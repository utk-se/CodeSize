File, Function, Length, Total Width, Leading Space(s), Leading Tab(s)
repos/cpp/bitcoin/build_msvc/testconsensus/testconsensus.cpp,"BuildSpendingTransaction( const CScript & scriptSig , const CScriptWitness & scriptWitness , int nValue = 0)",17, 2, 0, 0
repos/cpp/bitcoin/build_msvc/testconsensus/testconsensus.cpp,"main()",23, 2, 0, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CreateGenesisBlock( const char * pszTimestamp , const CScript & genesisOutputScript , uint32_t nTime , uint32_t nNonce , uint32_t nBits , int32_t nVersion , const CAmount & genesisReward)",20, 2, 0, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CreateGenesisBlock( uint32_t nTime , uint32_t nNonce , uint32_t nBits , int32_t nVersion , const CAmount & genesisReward)",6, 2, 0, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CMainParams::CMainParams()",107, 6, 4, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CTestNetParams::CTestNetParams()",86, 6, 4, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CRegTestParams::CRegTestParams( const ArgsManager & args)",75, 6, 4, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CRegTestParams::UpdateVersionBitsParameters( Consensus :: DeploymentPos d , int64_t nStartTime , int64_t nTimeout)",5, 6, 4, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CRegTestParams::UpdateVersionBitsParametersFromArgs( const ArgsManager & args)",31, 2, 0, 0
repos/cpp/bitcoin/src/chainparams.cpp,"Params()",4, 2, 0, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CreateChainParams( const std :: string & chain)",10, 2, 0, 0
repos/cpp/bitcoin/src/chainparams.cpp,"SelectParams( const std :: string & network)",5, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPWorkItem::HTTPWorkItem( std :: unique_ptr<HTTPRequest> _req , const std :: string & _path , const HTTPRequestHandler & _func)",4, 6, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPWorkItem::operator ( )()",4, 6, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::WorkQueue( size_t _maxDepth)",4, 6, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::~WorkQueue()",3, 6, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::Enqueue( WorkItem * item)",10, 6, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::Run()",16, 6, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::Interrupt()",6, 6, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPPathHandler::HTTPPathHandler()",1, 25, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPPathHandler::HTTPPathHandler( std :: string _prefix , bool _exactMatch , HTTPRequestHandler _handler)",4, 6, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"ClientAllowed( const CNetAddr & netaddr)",9, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"InitHTTPAllowList()",26, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"RequestMethodString( HTTPRequest :: RequestMethod m)",19, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"http_request_cb( struct evhttp_request * req , void * arg)",64, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"http_reject_request_cb( struct evhttp_request * req , void *)",5, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"ThreadHTTP( struct event_base * base)",9, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPBindAddresses( struct evhttp * http)",40, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPWorkQueueRun( WorkQueue<HTTPClosure> * queue)",5, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"libevent_log_cb( int severity , const char * msg)",11, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"InitHTTPServer()",50, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"UpdateHTTPServerLogging( bool enable)",13, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"StartHTTPServer()",11, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"InterruptHTTPServer()",10, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"StopHTTPServer()",32, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"EventBase()",4, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"httpevent_callback_fn( evutil_socket_t , short , void * data)",8, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPEvent::HTTPEvent( struct event_base * base , bool _deleteWhenTriggered , const std :: function<void()> & _handler)",6, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPEvent::~HTTPEvent()",4, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPEvent::trigger( struct timeval * tv)",7, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::HTTPRequest( struct evhttp_request * _req)",4, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::~HTTPRequest()",9, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::GetHeader( const std :: string & hdr) const",10, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::ReadBody()",19, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::WriteHeader( const std :: string & hdr , const std :: string & value)",6, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::WriteReply( int nStatus , const std :: string & strReply)",29, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::GetPeer() const",13, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::GetURI() const",4, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::GetRequestMethod() const",20, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"RegisterHTTPHandler( const std :: string & prefix , bool exactMatch , const HTTPRequestHandler & handler)",5, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"UnregisterHTTPHandler( const std :: string & prefix , bool exactMatch)",13, 2, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"urlDecode( const std :: string & urlEncoded)",11, 2, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CMerkleBlock::CMerkleBlock( const CBlock & block , CBloomFilter * filter , const std :: set<uint256> * txids)",26, 2, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::CalcHash( int height , unsigned int pos , const std :: vector<uint256> & vTxid)",19, 2, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::TraverseAndBuild( int height , unsigned int pos , const std :: vector<uint256> & vTxid , const std :: vector<bool> & vMatch)",17, 2, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::TraverseAndExtract( int height , unsigned int pos , unsigned int & nBitsUsed , unsigned int & nHashUsed , std :: vector<uint256> & vMatch , std :: vector<unsigned int> & vnIndex)",37, 2, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::CPartialMerkleTree( const std :: vector<uint256> & vTxid , const std :: vector<bool> & vMatch)",13, 2, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::CPartialMerkleTree()",1, 75, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::ExtractMatches( std :: vector<uint256> & vMatch , std :: vector<unsigned int> & vnIndex)",32, 2, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"AbstractThresholdConditionChecker::GetStateFor( const CBlockIndex * pindexPrev , const Consensus :: Params & params , ThresholdConditionCache & cache) const",88, 2, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"AbstractThresholdConditionChecker::GetStateStatisticsFor( const CBlockIndex * pindex , const Consensus :: Params & params) const",28, 2, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"AbstractThresholdConditionChecker::GetStateSinceHeightFor( const CBlockIndex * pindexPrev , const Consensus :: Params & params , ThresholdConditionCache & cache) const",34, 2, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::BeginTime( const Consensus :: Params & params) const",1, 117, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::EndTime( const Consensus :: Params & params) const",1, 113, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::Period( const Consensus :: Params & params) const",1, 107, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::Threshold( const Consensus :: Params & params) const",1, 116, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::Condition( const CBlockIndex * pindex , const Consensus :: Params & params) const",4, 6, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::VersionBitsConditionChecker( Consensus :: DeploymentPos id_)",1, 84, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::Mask( const Consensus :: Params & params) const",1, 114, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsState( const CBlockIndex * pindexPrev , const Consensus :: Params & params , Consensus :: DeploymentPos pos , VersionBitsCache & cache)",4, 2, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsStatistics( const CBlockIndex * pindexPrev , const Consensus :: Params & params , Consensus :: DeploymentPos pos)",4, 2, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsStateSinceHeight( const CBlockIndex * pindexPrev , const Consensus :: Params & params , Consensus :: DeploymentPos pos , VersionBitsCache & cache)",4, 2, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsMask( const Consensus :: Params & params , Consensus :: DeploymentPos pos)",4, 2, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsCache::Clear()",6, 2, 0, 0
repos/cpp/bitcoin/src/pow.cpp,"GetNextWorkRequired( const CBlockIndex * pindexLast , const CBlockHeader * pblock , const Consensus :: Params & params)",35, 2, 0, 0
repos/cpp/bitcoin/src/pow.cpp,"CalculateNextWorkRequired( const CBlockIndex * pindexLast , int64_t nFirstBlockTime , const Consensus :: Params & params)",24, 2, 0, 0
repos/cpp/bitcoin/src/pow.cpp,"CheckProofOfWork( uint256 hash , unsigned int nBits , const Consensus :: Params & params)",18, 2, 0, 0
repos/cpp/bitcoin/src/warnings.cpp,"SetMiscWarning( const std :: string & strWarning)",5, 2, 0, 0
repos/cpp/bitcoin/src/warnings.cpp,"SetfLargeWorkForkFound( bool flag)",5, 2, 0, 0
repos/cpp/bitcoin/src/warnings.cpp,"GetfLargeWorkForkFound()",5, 2, 0, 0
repos/cpp/bitcoin/src/warnings.cpp,"SetfLargeWorkInvalidChainFound( bool flag)",5, 2, 0, 0
repos/cpp/bitcoin/src/warnings.cpp,"GetWarnings( const std :: string & strFor)",38, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"SerializeDB( Stream & stream , const Data & data)",14, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"SerializeFileDB( const std :: string & prefix , const fs :: path & path , const Data & data)",26, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"DeserializeDB( Stream & stream , Data & data , bool fCheckSum = true)",29, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"DeserializeFileDB( const fs :: path & path , Data & data)",10, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CBanDB::CBanDB()",4, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CBanDB::Write( const banmap_t & banSet)",4, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CBanDB::Read( banmap_t & banSet)",4, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CAddrDB::CAddrDB()",4, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CAddrDB::Write( const CAddrMan & addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CAddrDB::Read( CAddrMan & addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CAddrDB::Read( CAddrMan & addr , CDataStream & ssPeers)",9, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::fopen( const fs :: path & p , const char * mode)",9, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::GetErrorReason()",3, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::FileLock( const fs :: path & file)",7, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::~FileLock()",6, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::TryLock()",16, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::GetErrorReason()",8, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::FileLock( const fs :: path & file)",8, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::~FileLock()",6, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::TryLock()",12, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::get_filesystem_error_message( const fs :: filesystem_error & e)",15, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::openmodeToStr( std :: ios_base :: openmode mode)",37, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::ifstream::open( const fs :: path & p , std :: ios_base :: openmode mode)",13, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::ifstream::close()",8, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::ofstream::open( const fs :: path & p , std :: ios_base :: openmode mode)",13, 2, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::ofstream::close()",8, 2, 0, 0
repos/cpp/bitcoin/src/timedata.cpp,"GetTimeOffset()",5, 2, 0, 0
repos/cpp/bitcoin/src/timedata.cpp,"GetAdjustedTime()",4, 2, 0, 0
repos/cpp/bitcoin/src/timedata.cpp,"abs64( int64_t n)",4, 2, 0, 0
repos/cpp/bitcoin/src/timedata.cpp,"AddTimeData( const CNetAddr & ip , int64_t nOffsetSample)",74, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"ParseNetwork( std :: string net)",11, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"GetNetworkName( enum Network net)",9, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupIntern( const char * pszName , std :: vector<CNetAddr> & vIP , unsigned int nMaxSolutions , bool fAllowLookup)",56, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupHost( const char * pszName , std :: vector<CNetAddr> & vIP , unsigned int nMaxSolutions , bool fAllowLookup)",11, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupHost( const char * pszName , CNetAddr & addr , bool fAllowLookup)",9, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"Lookup( const char * pszName , std :: vector<CService> & vAddr , int portDefault , bool fAllowLookup , unsigned int nMaxSolutions)",17, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"Lookup( const char * pszName , CService & addr , int portDefault , bool fAllowLookup)",9, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupNumeric( const char * pszName , int portDefault)",9, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"MillisToTimeval( int64_t nTimeout)",7, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"InterruptibleRecv( uint8_t * data , size_t len , int timeout , const SOCKET & hSocket)",38, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"Socks5ErrorString( uint8_t err)",23, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"Socks5( const std :: string & strDest , int port , const ProxyCredentials * auth , const SOCKET & hSocket)",118, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"CreateSocket( const CService & addrConnect)",35, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LogConnectFailure( bool manual_connection , const char * fmt , const Args & ... args)",8, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"ConnectSocketDirectly( const CService & addrConnect , const SOCKET & hSocket , int nTimeout , bool manual_connection)",57, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"SetProxy( enum Network net , const proxyType & addrProxy)",8, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"GetProxy( enum Network net , proxyType & proxyInfoOut)",8, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"SetNameProxy( const proxyType & addrProxy)",7, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"GetNameProxy( proxyType & nameProxyOut)",7, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"HaveNameProxy()",4, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"IsProxy( const CNetAddr & addr)",8, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"ConnectThroughProxy( const proxyType & proxy , const std :: string & strDest , int port , const SOCKET & hSocket , int nTimeout , bool * outProxyConnectionFailed)",23, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupSubNet( const char * pszName , CSubNet & ret)",36, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"NetworkErrorString( int err)",15, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"NetworkErrorString( int err)",16, 2, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"CloseSocket( SOCKET & hSocket)",15, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::CBloomFilter( const unsigned int nElements , const double nFPRate , const unsigned int nTweakIn , unsigned char nFlagsIn)",19, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::Hash( unsigned int nHashNum , const std :: vector<unsigned char> & vDataToHash) const",5, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::insert( const std :: vector<unsigned char> & vKey)",12, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::insert( const COutPoint & outpoint)",7, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::insert( const uint256 & hash)",5, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::contains( const std :: vector<unsigned char> & vKey) const",15, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::contains( const COutPoint & outpoint) const",7, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::contains( const uint256 & hash) const",5, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::clear()",6, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::reset( const unsigned int nNewTweak)",5, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::IsWithinSizeConstraints() const",4, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::IsRelevantAndUpdate( const CTransaction & tx)",69, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::UpdateEmptyFull()",12, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::CRollingBloomFilter( const unsigned int nElements , const double fpRate)",26, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"RollingBloomHash( unsigned int nHashNum , uint32_t nTweak , const std :: vector<unsigned char> & vDataToHash)",3, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"FastMod( uint32_t x , size_t n)",3, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::insert( const std :: vector<unsigned char> & vKey)",30, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::insert( const uint256 & hash)",5, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::contains( const std :: vector<unsigned char> & vKey) const",13, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::contains( const uint256 & hash) const",5, 2, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::reset()",9, 2, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPRPCTimer::HTTPRPCTimer( struct event_base * eventBase , std :: function<void()> & func , int64_t millis)",8, 6, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPRPCTimerInterface::HTTPRPCTimerInterface( struct event_base * _base)",3, 6, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPRPCTimerInterface::Name()",4, 6, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPRPCTimerInterface::NewTimer( std :: function<void()> & func , int64_t millis)",4, 6, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"JSONErrorReply( HTTPRequest * req , const UniValue & objError , const UniValue & id)",16, 2, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"multiUserAuthorized( std :: string strUserPass)",38, 2, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"RPCAuthorized( const std :: string & strAuth , std :: string & strAuthUsernameOut)",19, 2, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPReq_JSONRPC( HTTPRequest * req , const std :: string &)",66, 2, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"InitRPCAuthentication()",21, 2, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"StartHTTPRPC()",16, 2, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"InterruptHTTPRPC()",4, 2, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"StopHTTPRPC()",12, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"ec_privkey_import_der( const secp256k1_context * ctx , unsigned char * out32 , const unsigned char * privkey , size_t privkeylen)",46, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"ec_privkey_export_der( const secp256k1_context * ctx , unsigned char * privkey , size_t * privkeylen , const unsigned char * key32 , bool compressed)",61, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::Check( const unsigned char * vch)",3, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::MakeNewKey( bool fCompressedIn)",7, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::GetPrivKey() const",12, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::GetPubKey() const",12, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"SigHasLowR( const secp256k1_ecdsa_signature * sig)",11, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::Sign( const uint256 & hash , std :: vector<unsigned char> & vchSig , bool grind , uint32_t test_case) const",21, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::VerifyPubKey( const CPubKey & pubkey) const",13, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::SignCompact( const uint256 & hash , std :: vector<unsigned char> & vchSig) const",14, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::Load( const CPrivKey & privkey , const CPubKey & vchPubKey , bool fSkipCheck = false)",11, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::Derive( CKey & keyChild , ChainCode & ccChild , unsigned int nChild , const ChainCode & cc) const",19, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::Derive( CExtKey & out , unsigned int _nChild) const",7, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::SetSeed( const unsigned char * seed , unsigned int nSeedLen)",10, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::Neuter() const",9, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::Encode( unsigned char code [ BIP32_EXTKEY_SIZE ]) const",10, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::Decode( const unsigned char code [ BIP32_EXTKEY_SIZE ])",7, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"ECC_InitSanityCheck()",6, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"ECC_Start()",16, 2, 0, 0
repos/cpp/bitcoin/src/key.cpp,"ECC_Stop()",8, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"CCoinsViewErrorCatcher::CCoinsViewErrorCatcher( CCoinsView * view)",1, 82, 4, 0
repos/cpp/bitcoin/src/init.cpp,"CCoinsViewErrorCatcher::GetCoin( const COutPoint & outpoint , Coin & coin) const",13, 6, 4, 0
repos/cpp/bitcoin/src/init.cpp,"Interrupt()",14, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"Shutdown( InitInterfaces & interfaces)",111, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"HandleSIGTERM( int)",4, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"HandleSIGHUP( int)",4, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"consoleCtrlHandler( DWORD dwCtrlType)",6, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"registerSignalHandler( int signal , void(*handler)(int))",8, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"OnRPCStarted()",4, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"OnRPCStopped()",7, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"SetupServerArgs()",202, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"LicenseInfo()",21, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"BlockNotifyCallback( bool initialSync , const CBlockIndex * pBlockIndex)",12, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"BlockNotifyGenesisWait( bool , const CBlockIndex * pBlockIndex)",10, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"CImportingNow::CImportingNow()",4, 6, 4, 0
repos/cpp/bitcoin/src/init.cpp,"CImportingNow::~CImportingNow()",4, 6, 4, 0
repos/cpp/bitcoin/src/init.cpp,"CleanupBlockRevFiles()",34, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"ThreadImport( std :: vector<fs::path> vImportFiles)",74, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"InitSanityCheck()",17, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitServers()",13, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"InitParameterInteraction()",75, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"ResolveErrMsg( const char * const optname , const std :: string & strBind)",4, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"InitLogging()",24, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"new_handler_terminate()",12, 3, 0, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitBasicSetup()",49, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitParameterInteraction()",209, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"LockDataDirectory( bool probeOnly)",12, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitSanityChecks()",20, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitLockDataDirectory()",11, 2, 0, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitMain( InitInterfaces & interfaces)",574, 2, 0, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"DummyWalletInit::HasWalletSupport() const",1, 59, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"DummyWalletInit::ParameterInteraction() const",1, 62, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"DummyWalletInit::Construct( InitInterfaces & interfaces) const",1, 111, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"DummyWalletInit::AddWalletOptions() const",8, 2, 0, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"GetWalletDir()",4, 2, 0, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"ListWalletDir()",4, 2, 0, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"GetWallets()",4, 2, 0, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"interfaces::MakeWallet( const std :: shared_ptr<CWallet> & wallet)",4, 2, 0, 0
repos/cpp/bitcoin/src/outputtype.cpp,"ParseOutputType( const std :: string & type , OutputType & output_type)",14, 2, 0, 0
repos/cpp/bitcoin/src/outputtype.cpp,"FormatOutputType( OutputType type)",9, 2, 0, 0
repos/cpp/bitcoin/src/outputtype.cpp,"GetDestinationForKey( const CPubKey & key , OutputType type)",18, 2, 0, 0
repos/cpp/bitcoin/src/outputtype.cpp,"GetAllDestinationsForKey( const CPubKey & key)",11, 2, 0, 0
repos/cpp/bitcoin/src/outputtype.cpp,"AddAndGetDestinationForScript( CKeyStore & keystore , const CScript & script , OutputType type)",25, 2, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"ParseScript( const std :: string & s)",67, 2, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"CheckTxScriptsSanity( const CMutableTransaction & tx)",19, 2, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"DecodeHexTx( CMutableTransaction & tx , const std :: string & hex_tx , bool try_no_witness , bool try_witness)",34, 2, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"DecodeHexBlockHeader( CBlockHeader & header , const std :: string & hex_header)",13, 2, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"DecodeHexBlk( CBlock & block , const std :: string & strHexBlk)",16, 2, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"DecodePSBT( PartiallySignedTransaction & psbt , const std :: string & base64_tx , std :: string & error)",16, 2, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"ParseHashStr( const std :: string & strHex , uint256 & result)",8, 2, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"ParseHexUV( const UniValue & v , const std :: string & strName)",9, 2, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"ParseSighashString( const UniValue & sighash)",22, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CChain::SetTip( CBlockIndex * pindex)",11, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CChain::GetLocator( const CBlockIndex * pindex) const",27, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CChain::FindFork( const CBlockIndex * pindex) const",10, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CChain::FindEarliestAtLeast( int64_t nTime) const",6, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"InvertLowestOne( int n)",1, 65, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"GetSkipHeight( int height)",9, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CBlockIndex::GetAncestor( int height) const",26, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CBlockIndex::GetAncestor( int height)",4, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CBlockIndex::BuildSkip()",5, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"GetBlockProof( const CBlockIndex & block)",14, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"GetBlockProofEquivalentTime( const CBlockIndex & to , const CBlockIndex & from , const CBlockIndex & tip , const Consensus :: Params & params)",16, 2, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"LastCommonAncestor( const CBlockIndex * pa , const CBlockIndex * pb)",16, 2, 0, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::CThreadInterrupt()",1, 54, 0, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::operator bool() const",4, 2, 0, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::reset()",4, 2, 0, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::operator ( )()",8, 2, 0, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::sleep_for( std :: chrono :: milliseconds rel_time)",5, 2, 0, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::sleep_for( std :: chrono :: seconds rel_time)",4, 2, 0, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::sleep_for( std :: chrono :: minutes rel_time)",4, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"UpdateTime( CBlockHeader * pblock , const Consensus :: Params & consensusParams , const CBlockIndex * pindexPrev)",14, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::Options::Options()",4, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::BlockAssembler( const CChainParams & params , const Options & options)",6, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"DefaultOptions()",14, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::BlockAssembler( const CChainParams & params)",1, 105, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::resetBlock()",13, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::CreateNewBlock( const CScript & scriptPubKeyIn , bool fMineWitnessTx)",86, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::onlyUnconfirmed( CTxMemPool :: setEntries & testSet)",12, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::TestPackage( uint64_t packageSize , int64_t packageSigOpsCost) const",9, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::TestPackageTransactions( const CTxMemPool :: setEntries & package)",10, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::AddToBlock( CTxMemPool :: txiter iter)",18, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::UpdatePackagesForAdded( const CTxMemPool :: setEntries & alreadyAdded , indexed_modified_transaction_set & mapModifiedTx)",26, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::SkipMapTxEntry( CTxMemPool :: txiter it , indexed_modified_transaction_set & mapModifiedTx , CTxMemPool :: setEntries & failedTx)",5, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::SortForBlock( const CTxMemPool :: setEntries & package , std :: vector<CTxMemPool::txiter> & sortedEntries)",10, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::addPackageTxs( int & nPackagesSelected , int & nDescendantsUpdated)",129, 2, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"IncrementExtraNonce( CBlock * pblock , const CBlockIndex * pindexPrev , unsigned int & nExtraNonce)",18, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"FileWriteStr( const std :: string & str , FILE * fp)",4, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::OpenDebugLog()",21, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::EnableCategory( BCLog :: LogFlags flag)",4, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::EnableCategory( const std :: string & str)",7, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::DisableCategory( BCLog :: LogFlags flag)",4, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::DisableCategory( const std :: string & str)",7, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::WillLogCategory( BCLog :: LogFlags category) const",4, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::DefaultShrinkDebugFile() const",4, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"GetLogCategory( BCLog :: LogFlags & flag , const std :: string & str)",14, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"ListLogCategories()",14, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"ListActiveLogCategories()",14, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::LogTimestampStr( const std :: string & str)",29, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::LogPrintStr( const std :: string & str)",32, 2, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::ShrinkDebugFile()",40, 2, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"IsToKeyID( const CScript & script , CKeyID & hash)",10, 2, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"IsToScriptID( const CScript & script , CScriptID & hash)",9, 2, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"IsToPubKey( const CScript & script , CPubKey & pubkey)",14, 2, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"CompressScript( const CScript & script , std :: vector<unsigned char> & out)",30, 2, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"GetSpecialScriptSize( unsigned int nSize)",8, 2, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"DecompressScript( CScript & script , unsigned int nSize , const std :: vector<unsigned char> & in)",44, 2, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"CompressAmount( uint64_t n)",18, 2, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"DecompressAmount( uint64_t x)",25, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AddOneShot( const std :: string & strDest)",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"GetListenPort()",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"GetLocal( CService & addr , const CNetAddr * paddrPeer)",23, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"convertSeed6( const std :: vector<SeedSpec6> & vSeedsIn)",19, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"GetLocalAddress( const CNetAddr * paddrPeer , ServiceFlags nLocalServices)",11, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"GetnScore( const CService & addr)",7, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"IsPeerAddrLocalGood( CNode * pnode)",6, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"AdvertiseLocal( CNode * pnode)",25, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"AddLocal( const CService & addr , int nScore)",25, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"AddLocal( const CNetAddr & addr , int nScore)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"RemoveLocal( const CService & addr)",6, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"SetLimited( enum Network net , bool fLimited)",7, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"IsLimited( enum Network net)",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"IsLimited( const CNetAddr & addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"SeenLocal( const CService & addr)",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"IsLocal( const CService & addr)",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"IsReachable( enum Network net)",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"IsReachable( const CNetAddr & addr)",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::FindNode( const CNetAddr & ip)",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::FindNode( const CSubNet & subNet)",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::FindNode( const std :: string & addrName)",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::FindNode( const CService & addr)",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::CheckIncomingNonce( uint64_t nonce)",9, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"GetBindAddress( SOCKET sock)",14, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ConnectNode( CAddress addrConnect , const char * pszDest , bool fCountFailure , bool manual_connection)",95, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DumpBanlist()",19, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::CloseSocketDisconnect()",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ClearBanned()",11, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::IsBanned( CNetAddr ip)",13, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::IsBanned( CSubNet subnet)",13, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Ban( const CNetAddr & addr , const BanReason & banReason , int64_t bantimeoffset , bool sinceUnixEpoch)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Ban( const CSubNet & subNet , const BanReason & banReason , int64_t bantimeoffset , bool sinceUnixEpoch)",31, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Unban( const CNetAddr & addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Unban( const CSubNet & subNet)",12, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetBanned( banmap_t & banMap)",7, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetBanned( const banmap_t & banMap)",6, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SweepBanned()",27, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::BannedSetIsDirty()",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetBannedSetDirty( bool dirty)",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::IsWhitelistedRange( const CNetAddr & addr)",7, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::GetAddrName() const",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::MaybeSetAddrName( const std :: string & addrNameIn)",6, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::GetAddrLocal() const",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::SetAddrLocal( const CService & addrLocalIn)",8, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::copyStats( CNodeStats & stats)",59, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::ReceiveMsgBytes( const char * pch , unsigned int nBytes , bool & complete)",51, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::SetSendVersion( int nVersionIn)",13, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::GetSendVersion() const",11, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNetMessage::readHeader( const char * pch , unsigned int nBytes)",30, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNetMessage::readData( const char * pch , unsigned int nBytes)",16, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNetMessage::GetMessageHash() const",7, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pnode -> cs_vSend)",51, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"ReverseCompareNodeMinPingTime( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"ReverseCompareNodeTimeConnected( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CompareNetGroupKeyed( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",3, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CompareNodeBlockTime( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",7, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CompareNodeTXTime( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",8, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"EraseLastKElements( std :: vector<T> & elements , Comparator comparator , size_t k)",6, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AttemptToEvictConnection()",74, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AcceptConnection( const ListenSocket & hListenSocket)",80, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DisconnectNodes()",61, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::NotifyNumConnectionsChanged()",13, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::InactivityCheck( CNode * pnode)",32, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SocketHandler()",199, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadSocketHandler()",9, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::WakeMessageHandler()",8, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"ThreadMapPort()",80, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"StartMapPort()",7, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"InterruptMapPort()",6, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"StopMapPort()",7, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"StartMapPort()",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"InterruptMapPort()",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"StopMapPort()",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadDNSAddressSeed()",64, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DumpAddresses()",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DumpData()",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ProcessOneShot()",16, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetTryNewOutboundPeer()",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetTryNewOutboundPeer( bool flag)",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetExtraOutboundCount()",13, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadOpenConnections( const std :: vector<std::string> connect)",160, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetAddedNodeInfo()",53, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadOpenAddedConnections()",26, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::OpenNetworkConnection( const CAddress & addrConnect , bool fCountFailure , CSemaphoreGrant * grantOutbound , const char * pszDest , bool fOneShot , bool fFeeler , bool manual_connection)",38, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadMessageHandler()",48, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::BindListenPort( const CService & addrBind , std :: string & strError , bool fWhitelisted)",68, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"Discover()",50, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetNetworkActive( bool active)",12, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::CConnman( uint64_t nSeed0In , uint64_t nSeed1In)",15, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetNewNodeId()",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Bind( const CService & addr , unsigned int flags)",12, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::InitBinds( const std :: vector<CService> & binds , const std :: vector<CService> & whiteBinds)",17, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Start( CScheduler & scheduler , const Options & connOptions)",118, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNetCleanup::CNetCleanup()",1, 21, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CNetCleanup::~CNetCleanup()",7, 6, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Interrupt()",23, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Stop()",40, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DeleteNode( CNode * pnode)",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::~CConnman()",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetAddressCount() const",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetServices( const CService & addr , ServiceFlags nServices)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::MarkAddressGood( const CAddress & addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AddNewAddresses( const std :: vector<CAddress> & vAddr , const CAddress & addrFrom , int64_t nTimePenalty)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetAddresses()",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AddNode( const std :: string & strNode)",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::RemoveAddedNode( const std :: string & strNode)",11, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetNodeCount( NumConnections flags)",15, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetNodeStats( std :: vector<CNodeStats> & vstats)",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DisconnectNode( const std :: string & strNode)",9, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DisconnectNode( NodeId id)",11, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::RecordBytesRecv( uint64_t bytes)",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::RecordBytesSent( uint64_t bytes)",16, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetMaxOutboundTarget( uint64_t limit)",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetMaxOutboundTarget()",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetMaxOutboundTimeframe()",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetMaxOutboundTimeLeftInCycle()",13, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetMaxOutboundTimeframe( uint64_t timeframe)",11, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::OutboundTargetReached( bool historicalBlockServingLimit)",19, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetOutboundTargetBytesLeft()",8, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetTotalBytesRecv()",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetTotalBytesSent()",5, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetLocalServices() const",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetBestHeight( int height)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetBestHeight() const",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetReceiveFloodSize() const",1, 81, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::CNode( NodeId idIn , ServiceFlags nLocalServicesIn , int nMyStartingHeightIn , SOCKET hSocketIn , const CAddress & addrIn , uint64_t nKeyedNetGroupIn , uint64_t nLocalHostNonceIn , const CAddress & addrBindIn , const std :: string & addrNameIn , bool fInboundIn)",72, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::~CNode()",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::AskFor( const CInv & inv)",33, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::NodeFullyConnected( const CNode * pnode)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::PushMessage( CNode * pnode , CSerializedNetMsg && msg)",36, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ForNode( NodeId id , std :: function<bool(CNode*pnode)> func)",12, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::PoissonNextSendInbound( int64_t now , int average_interval_seconds)",10, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"PoissonNextSend( int64_t now , int average_interval_seconds)",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetDeterministicRandomizer( uint64_t id) const",4, 2, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::CalculateKeyedNetGroup( const CAddress & ad) const",6, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"ecdsa_signature_parse_der_lax( const secp256k1_context * ctx , secp256k1_ecdsa_signature * sig , const unsigned char * input , size_t inputlen)",141, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::Verify( const uint256 & hash , const std :: vector<unsigned char> & vchSig) const",16, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::RecoverCompact( const uint256 & hash , const std :: vector<unsigned char> & vchSig)",19, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::IsFullyValid() const",6, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::Decompress()",13, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::Derive( CPubKey & pubkeyChild , ChainCode & ccChild , unsigned int nChild , const ChainCode & cc) const",20, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CExtPubKey::Encode( unsigned char code [ BIP32_EXTKEY_SIZE ]) const",9, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CExtPubKey::Decode( const unsigned char code [ BIP32_EXTKEY_SIZE ])",7, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CExtPubKey::Derive( CExtPubKey & out , unsigned int _nChild) const",7, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::CheckLowS( const std :: vector<unsigned char> & vchSig)",7, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"ECCVerifyHandle::ECCVerifyHandle()",9, 2, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"ECCVerifyHandle::~ECCVerifyHandle()",9, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::CNetAddr()",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::SetIP( const CNetAddr & ipIn)",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::SetRaw( Network network , const uint8_t * ip_in)",15, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::SetInternal( const std :: string & name)",11, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::SetSpecial( const std :: string & strName)",13, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::CNetAddr( const struct in_addr & ipv4Addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::CNetAddr( const struct in6_addr & ipv6Addr , const uint32_t scope)",5, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetByte( int n) const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsBindAny() const",9, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsIPv4() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsIPv6() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC1918() const",7, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC2544() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC3927() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC6598() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC5737() const",6, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC3849() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC3964() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC6052() const",5, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC4380() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC4862() const",5, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC4193() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC6145() const",5, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC4843() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsTor() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsLocal() const",13, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsValid() const",38, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRoutable() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsInternal() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetNetwork() const",16, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::ToStringIP() const",23, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::ToString() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator ==( const CNetAddr & a , const CNetAddr & b)",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator <( const CNetAddr & a , const CNetAddr & b)",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetInAddr( struct in_addr * pipv4Addr) const",7, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetIn6Addr( struct in6_addr * pipv6Addr) const",8, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetGroup() const",72, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetHash() const",7, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"GetExtNetwork( const CNetAddr * addr)",8, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetReachabilityFrom( const CNetAddr * paddrPartner) const",57, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService()",3, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const CNetAddr & cip , unsigned short portIn)",3, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const struct in_addr & ipv4Addr , unsigned short portIn)",3, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const struct in6_addr & ipv6Addr , unsigned short portIn)",3, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const struct sockaddr_in & addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const struct sockaddr_in6 & addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::SetSockAddr( const struct sockaddr * paddr)",13, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::GetPort() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator ==( const CService & a , const CService & b)",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator <( const CService & a , const CService & b)",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::GetSockAddr( struct sockaddr * paddr , socklen_t * addrlen) const",29, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::GetKey() const",9, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::ToStringPort() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::ToStringIPPort() const",8, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::ToString() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::CSubNet()",5, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::CSubNet( const CNetAddr & addr , int32_t mask)",24, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::CSubNet( const CNetAddr & addr , const CNetAddr & mask)",17, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::CSubNet( const CNetAddr & addr)",6, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::Match( const CNetAddr & addr) const",9, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"NetmaskBits( uint8_t x)",15, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::ToString() const",37, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::IsValid() const",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator ==( const CSubNet & a , const CSubNet & b)",4, 2, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator <( const CSubNet & a , const CSubNet & b)",4, 2, 0, 0
repos/cpp/bitcoin/src/chainparamsbase.cpp,"SetupChainParamsBaseOptions()",7, 2, 0, 0
repos/cpp/bitcoin/src/chainparamsbase.cpp,"BaseParams()",5, 2, 0, 0
repos/cpp/bitcoin/src/chainparamsbase.cpp,"CreateBaseChainParams( const std :: string & chain)",11, 2, 0, 0
repos/cpp/bitcoin/src/chainparamsbase.cpp,"SelectBaseParams( const std :: string & chain)",5, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"SetupCliArgs()",28, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"libevent_log_cb( int severity , const char * msg)",10, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"CConnectionFailed::CConnectionFailed( const std :: string & msg)",3, 7, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"AppInitRPC( int argc , char * argv [ ])",46, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"HTTPReply::HTTPReply()",1, 41, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"http_errorstring( int code)",21, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"http_request_done( struct evhttp_request * req , void * ctx)",24, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"http_error_cb( enum evhttp_request_error err , void * ctx)",5, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"BaseRequestHandler::~BaseRequestHandler()",1, 37, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"GetinfoRequestHandler::PrepareRequest( const std :: string & method , const std :: vector<std::string> & args)",11, 6, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"GetinfoRequestHandler::ProcessReply( const UniValue & batch_in)",38, 6, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"DefaultRequestHandler::PrepareRequest( const std :: string & method , const std :: vector<std::string> & args)",10, 6, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"DefaultRequestHandler::ProcessReply( const UniValue & reply)",4, 6, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"CallRPC( BaseRequestHandler * rh , const std :: string & strMethod , const std :: vector<std::string> & args)",100, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"CommandLineRPC( int argc , char * argv [ ])",103, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"main( int argc , char * argv [ ])",37, 2, 0, 0
repos/cpp/bitcoin/src/bech32.cpp,"Cat( data x , const data & y)",5, 2, 0, 0
repos/cpp/bitcoin/src/bech32.cpp,"PolyMod( const data & v)",58, 2, 0, 0
repos/cpp/bitcoin/src/bech32.cpp,"LowerCase( unsigned char c)",4, 2, 0, 0
repos/cpp/bitcoin/src/bech32.cpp,"ExpandHRP( const std :: string & hrp)",13, 2, 0, 0
repos/cpp/bitcoin/src/bech32.cpp,"VerifyChecksum( const std :: string & hrp , const data & values)",8, 2, 0, 0
repos/cpp/bitcoin/src/bech32.cpp,"CreateChecksum( const std :: string & hrp , const data & values)",12, 2, 0, 0
repos/cpp/bitcoin/src/bech32.cpp,"bech32::Encode( const std :: string & hrp , const data & values)",10, 2, 0, 0
repos/cpp/bitcoin/src/bech32.cpp,"bech32::Decode( const std :: string & str)",32, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::CScheduler()",3, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::~CScheduler()",4, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"toPosixTime( const boost :: chrono :: system_clock :: time_point & t)",6, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::serviceQueue()",60, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::stop( bool drain)",11, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::schedule( CScheduler :: Function f , boost :: chrono :: system_clock :: time_point t)",8, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::scheduleFromNow( CScheduler :: Function f , int64_t deltaMilliSeconds)",4, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"Repeat( CScheduler * s , CScheduler :: Function f , int64_t deltaMilliSeconds)",5, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::scheduleEvery( CScheduler :: Function f , int64_t deltaMilliSeconds)",4, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::getQueueInfo( boost :: chrono :: system_clock :: time_point & first , boost :: chrono :: system_clock :: time_point & last) const",11, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::AreThreadsServicingQueue() const",4, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::MaybeScheduleProcessQueue()",11, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::ProcessQueue()",28, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::AddToProcessQueue( std :: function<void()> func)",9, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::EmptyQueue()",9, 2, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::CallbacksPending()",4, 2, 0, 0
repos/cpp/bitcoin/src/clientversion.cpp,"FormatVersion( int nVersion)",7, 2, 0, 0
repos/cpp/bitcoin/src/clientversion.cpp,"FormatFullVersion()",4, 2, 0, 0
repos/cpp/bitcoin/src/clientversion.cpp,"FormatSubVersion( const std :: string & name , int nClientVersion , const std :: vector<std::string> & comments)",16, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CBlockIndexWorkComparator::operator ( )( const CBlockIndex * pa , const CBlockIndex * pb) const",17, 10, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"FindForkInGlobalIndex( const CChain & chain , const CBlockLocator & locator)",18, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CheckFinalTx( const CTransaction & tx , int flags)",31, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"TestLockPointValidity( const LockPoints * lp)",17, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CheckSequenceLocks( const CTxMemPool & pool , const CTransaction & tx , int flags , LockPoints * lp , bool useExistingLockPoints)",71, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LimitMempoolSize( CTxMemPool & pool , size_t limit , unsigned long age)",11, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"FormatStateMessage( const CValidationState & state)",7, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",11, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",38, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",32, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",405, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",13, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"AcceptToMemoryPool( CTxMemPool & pool , CValidationState & state , const CTransactionRef & tx , bool * pfMissingInputs , std :: list<CTransactionRef> * plTxnReplaced , bool bypass_limits , const CAmount nAbsurdFee , bool test_accept)",7, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GetTransaction( const uint256 & hash , CTransactionRef & txOut , const Consensus :: Params & consensusParams , uint256 & hashBlock , bool fAllowSlow , CBlockIndex * blockIndex)",38, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"WriteBlockToDisk( const CBlock & block , CDiskBlockPos & pos , const CMessageHeader :: MessageStartChars & messageStart)",20, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ReadBlockFromDisk( CBlock & block , const CDiskBlockPos & pos , const Consensus :: Params & consensusParams)",23, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ReadBlockFromDisk( CBlock & block , const CBlockIndex * pindex , const Consensus :: Params & consensusParams)",15, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ReadRawBlockFromDisk( std :: vector<uint8_t> & block , const CDiskBlockPos & pos , const CMessageHeader :: MessageStartChars & message_start)",34, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ReadRawBlockFromDisk( std :: vector<uint8_t> & block , const CBlockIndex * pindex , const CMessageHeader :: MessageStartChars & message_start)",10, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GetBlockSubsidy( int nHeight , const Consensus :: Params & consensusParams)",12, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"IsInitialBlockDownload()",23, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"AlertNotify( const std :: string & strMessage)",17, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",40, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",32, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",15, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::InvalidBlockFound( CBlockIndex * pindex , const CValidationState & state)",9, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UpdateCoins( const CTransaction & tx , CCoinsViewCache & inputs , CTxUndo & txundo , int nHeight)",14, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UpdateCoins( const CTransaction & tx , CCoinsViewCache & inputs , int nHeight)",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CScriptCheck::operator ( )()",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GetSpendHeight( const CCoinsViewCache & inputs)",6, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"InitScriptExecutionCache()",8, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",82, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UndoWriteToDisk( const CBlockUndo & blockundo , CDiskBlockPos & pos , const uint256 & hashBlock , const CMessageHeader :: MessageStartChars & messageStart)",26, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UndoReadFromDisk( CBlockUndo & blockundo , const CBlockIndex * pindex)",30, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"AbortNode( const std :: string & strMessage , const std :: string & userMessage = "")",10, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"AbortNode( CValidationState & state , const std :: string & strMessage , const std :: string & userMessage = "")",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ApplyTxInUndo( Coin && undo , CCoinsViewCache & view , const COutPoint & out)",26, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::DisconnectBlock( const CBlock & block , const CBlockIndex * pindex , CCoinsViewCache & view)",56, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"FlushBlockFile( bool fFinalize = false)",27, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"WriteUndoDataForBlock( const CBlockUndo & blockundo , CValidationState & state , CBlockIndex * pindex , const CChainParams & chainparams)",18, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ThreadScriptCheck()",4, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ComputeBlockVersion( const CBlockIndex * pindexPrev , const Consensus :: Params & params)",14, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::WarningBitsConditionChecker( int bitIn)",1, 68, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::BeginTime( const Consensus :: Params & params) const",1, 84, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::EndTime( const Consensus :: Params & params) const",1, 116, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::Period( const Consensus :: Params & params) const",1, 107, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::Threshold( const Consensus :: Params & params) const",1, 116, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::Condition( const CBlockIndex * pindex , const Consensus :: Params & params) const",6, 6, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"IsScriptWitnessEnabled( const Consensus :: Params & params)",4, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",44, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ConnectBlock( const CBlock & block , CValidationState & state , CBlockIndex * pindex , CCoinsViewCache & view , const CChainParams & chainparams , bool fJustCheck)",283, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"FlushStateToDisk( const CChainParams & chainparams , CValidationState & state , FlushStateMode mode , int nManualPruneHeight)",103, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"FlushStateToDisk()",7, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"PruneAndFlush()",8, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"DoWarning( const std :: string & strWarning)",9, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"AppendWarning( std :: string & res , const std :: string & warn)",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UpdateTip( const CBlockIndex * pindexNew , const CChainParams & chainParams)",54, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::DisconnectTip( CValidationState & state , const CChainParams & chainparams , DisconnectedBlockTransactions * disconnectpool)",45, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"PerBlockConnectTrace::PerBlockConnectTrace()",1, 96, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"ConnectTrace::ConnectTrace( CTxMemPool & _pool)",3, 6, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"ConnectTrace::~ConnectTrace()",3, 6, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"ConnectTrace::BlockConnected( CBlockIndex * pindex , std :: shared_ptr<const CBlock> pblock)",8, 6, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"ConnectTrace::GetBlocksConnected()",11, 6, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"ConnectTrace::NotifyEntryRemoved( CTransactionRef txRemoved , MemPoolRemovalReason reason)",6, 6, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ConnectTip( CValidationState & state , const CChainParams & chainparams , CBlockIndex * pindexNew , const std :: shared_ptr<const CBlock> & pblock , ConnectTrace & connectTrace , DisconnectedBlockTransactions & disconnectpool)",54, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::FindMostWorkChain()",53, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::PruneBlockIndexCandidates()",10, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ActivateBestChainStep( CValidationState & state , const CChainParams & chainparams , CBlockIndex * pindexMostWork , const std :: shared_ptr<const CBlock> & pblock , bool & fInvalidFound , ConnectTrace & connectTrace)",82, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LOCKS_EXCLUDED( cs_main)",20, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ActivateBestChain( CValidationState & state , const CChainParams & chainparams , std :: shared_ptr<const CBlock> pblock)",99, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ActivateBestChain( CValidationState & state , const CChainParams & chainparams , std :: shared_ptr<const CBlock> pblock)",3, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::PreciousBlock( CValidationState & state , const CChainParams & params , CBlockIndex * pindex)",28, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"PreciousBlock( CValidationState & state , const CChainParams & params , CBlockIndex * pindex)",3, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::InvalidateBlock( CValidationState & state , const CChainParams & chainparams , CBlockIndex * pindex)",63, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"InvalidateBlock( CValidationState & state , const CChainParams & chainparams , CBlockIndex * pindex)",3, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ResetBlockFailureFlags( CBlockIndex * pindex)",33, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ResetBlockFailureFlags( CBlockIndex * pindex)",3, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::AddToBlockIndex( const CBlockHeader & block)",35, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ReceivedBlockTransactions( const CBlock & block , CBlockIndex * pindexNew , const CDiskBlockPos & pos , const Consensus :: Params & consensusParams)",45, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"FindBlockPos( CDiskBlockPos & pos , unsigned int nAddSize , unsigned int nHeight , uint64_t nTime , bool fKnown = false)",56, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"FindUndoPos( CValidationState & state , int nFile , CDiskBlockPos & pos , unsigned int nAddSize)",30, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CheckBlockHeader( const CBlockHeader & block , CValidationState & state , const Consensus :: Params & consensusParams , bool fCheckPOW = true)",8, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CheckBlock( const CBlock & block , CValidationState & state , const Consensus :: Params & consensusParams , bool fCheckPOW , bool fCheckMerkleRoot)",62, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"IsWitnessEnabled( const CBlockIndex * pindexPrev , const Consensus :: Params & params)",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"IsNullDummyEnabled( const CBlockIndex * pindexPrev , const Consensus :: Params & params)",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GetWitnessCommitmentIndex( const CBlock & block)",12, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UpdateUncommittedBlockStructures( CBlock & block , const CBlockIndex * pindexPrev , const Consensus :: Params & consensusParams)",11, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GenerateCoinbaseCommitment( CBlock & block , const CBlockIndex * pindexPrev , const Consensus :: Params & consensusParams)",28, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ContextualCheckBlockHeader( const CBlockHeader & block , CValidationState & state , const CChainParams & params , const CBlockIndex * pindexPrev , int64_t nAdjustedTime)",38, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ContextualCheckBlock( const CBlock & block , CValidationState & state , const Consensus :: Params & consensusParams , const CBlockIndex * pindexPrev)",81, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::AcceptBlockHeader( const CBlockHeader & block , CValidationState & state , const CChainParams & chainparams , CBlockIndex ** ppindex)",60, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ProcessNewBlockHeaders( const std :: vector<CBlockHeader> & headers , CValidationState & state , const CChainParams & chainparams , const CBlockIndex ** ppindex , CBlockHeader * first_invalid)",19, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"SaveBlockToDisk( const CBlock & block , int nHeight , const CChainParams & chainparams , const CDiskBlockPos * dbp)",17, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::AcceptBlock( const std :: shared_ptr<const CBlock> & pblock , CValidationState & state , const CChainParams & chainparams , CBlockIndex ** ppindex , bool fRequested , const CDiskBlockPos * dbp , bool * fNewBlock)",78, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ProcessNewBlock( const CChainParams & chainparams , const std :: shared_ptr<const CBlock> pblock , bool fForceProcessing , bool * fNewBlock)",34, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"TestBlockValidity( CValidationState & state , const CChainParams & chainparams , const CBlock & block , CBlockIndex * pindexPrev , bool fCheckPOW , bool fCheckMerkleRoot)",24, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CalculateCurrentUsage()",10, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"PruneOneBlockFile( const int fileNumber)",32, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UnlinkPrunedFiles( const std :: set<int> & setFilesToPrune)",9, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"FindFilesToPruneManual( std :: set<int> & setFilesToPrune , int nManualPruneHeight)",20, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"PruneBlockFilesManual( int nManualPruneHeight)",8, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"FindFilesToPrune( std :: set<int> & setFilesToPrune , uint64_t nPruneAfterHeight)",55, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CheckDiskSpace( uint64_t nAdditionalBytes , bool blocks_dir)",10, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"OpenDiskFile( const CDiskBlockPos & pos , const char * prefix , bool fReadOnly)",22, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"OpenBlockFile( const CDiskBlockPos & pos , bool fReadOnly)",3, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"OpenUndoFile( const CDiskBlockPos & pos , bool fReadOnly)",3, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GetBlockPosFilename( const CDiskBlockPos & pos , const char * prefix)",4, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::InsertBlockIndex( const uint256 & hash)",19, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::LoadBlockIndex( const Consensus :: Params & consensus_params , CBlockTreeDB & blocktree)",49, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",52, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadChainTip( const CChainParams & chainparams)",32, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CVerifyDB::CVerifyDB()",4, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CVerifyDB::~CVerifyDB()",4, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CVerifyDB::VerifyDB( const CChainParams & chainparams , CCoinsView * coinsview , int nCheckLevel , int nCheckDepth)",93, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::RollforwardBlock( const CBlockIndex * pindex , CCoinsViewCache & inputs , const CChainParams & params)",19, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ReplayBlocks( const CChainParams & params , CCoinsView * view)",65, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ReplayBlocks( const CChainParams & params , CCoinsView * view)",3, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::RewindBlockIndex( const CChainParams & params)",90, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"RewindBlockIndex( const CChainParams & params)",18, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::UnloadBlockIndex()",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UnloadBlockIndex()",25, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadBlockIndex( const CChainParams & chainparams)",21, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::LoadGenesisBlock( const CChainParams & chainparams)",24, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadGenesisBlock( const CChainParams & chainparams)",4, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadExternalBlockFile( const CChainParams & chainparams , FILE * fileIn , CDiskBlockPos * dbp)",121, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::CheckBlockIndex( const Consensus :: Params & consensusParams)",183, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CBlockFileInfo::ToString() const",4, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GetBlockFileInfo( size_t n)",6, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"VersionBitsTipState( const Consensus :: Params & params , Consensus :: DeploymentPos pos)",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"VersionBitsTipStatistics( const Consensus :: Params & params , Consensus :: DeploymentPos pos)",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"VersionBitsTipStateSinceHeight( const Consensus :: Params & params , Consensus :: DeploymentPos pos)",5, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadMempool()",76, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"DumpMempool()",52, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GuessVerificationProgress( const ChainTxData & data , const CBlockIndex * pindex)",16, 2, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CMainCleanup::CMainCleanup()",1, 22, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CMainCleanup::~CMainCleanup()",7, 6, 4, 0
repos/cpp/bitcoin/src/noui.cpp,"noui_ThreadSafeMessageBox( const std :: string & message , const std :: string & caption , unsigned int style)",26, 2, 0, 0
repos/cpp/bitcoin/src/noui.cpp,"noui_ThreadSafeQuestion( const std :: string & , const std :: string & message , const std :: string & caption , unsigned int style)",4, 2, 0, 0
repos/cpp/bitcoin/src/noui.cpp,"noui_InitMessage( const std :: string & message)",4, 2, 0, 0
repos/cpp/bitcoin/src/noui.cpp,"noui_connect()",6, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::DestinationEncoder( const CChainParams & params)",1, 82, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const CKeyID & id) const",6, 6, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const CScriptID & id) const",6, 6, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const WitnessV0KeyHash & id) const",7, 6, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const WitnessV0ScriptHash & id) const",7, 6, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const WitnessUnknown & id) const",10, 6, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const CNoDestination & no) const",1, 74, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeDestination( const std :: string & str , const CChainParams & params)",58, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeSecret( const std :: string & str)",15, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"EncodeSecret( const CKey & key)",12, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeExtPubKey( const std :: string & str)",12, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"EncodeExtPubKey( const CExtPubKey & key)",9, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeExtKey( const std :: string & str)",12, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"EncodeExtKey( const CExtKey & key)",10, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"EncodeDestination( const CTxDestination & dest)",4, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeDestination( const std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"IsValidDestinationString( const std :: string & str , const CChainParams & params)",4, 2, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"IsValidDestinationString( const std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CBitcoinLevelDBLogger::Logv( const char * format , va_list ap)",52, 6, 4, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"SetMaxOpenFiles( leveldb :: Options * options)",24, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"GetOptions( size_t nCacheSize)",16, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::CDBWrapper( const fs :: path & path , size_t nCacheSize , bool fMemory , bool fWipe , bool obfuscate)",51, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::~CDBWrapper()",13, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::WriteBatch( CDBBatch & batch , bool fSync)",16, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::DynamicMemoryUsage() const",8, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::CreateObfuscateKey() const",7, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::IsEmpty()",6, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBIterator::~CDBIterator()",1, 46, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBIterator::Valid() const",1, 59, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBIterator::SeekToFirst()",1, 58, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBIterator::Next()",1, 44, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"dbwrapper_private::HandleError( const leveldb :: Status & status)",9, 2, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"dbwrapper_private::GetObfuscateKey( const CDBWrapper & w)",4, 2, 0, 0
repos/cpp/bitcoin/src/checkpoints.cpp,"Checkpoints::GetLastCheckpoint( const CCheckpointData & data)",14, 6, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"MainSignalsInstance::MainSignalsInstance( CScheduler * pscheduler)",1, 92, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::RegisterBackgroundSignalScheduler( CScheduler & scheduler)",4, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::UnregisterBackgroundSignalScheduler()",3, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::FlushBackgroundCallbacks()",5, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::CallbacksPending()",4, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::RegisterWithMempoolSignals( CTxMemPool & pool)",3, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::UnregisterWithMempoolSignals( CTxMemPool & pool)",3, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"GetMainSignals()",4, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"RegisterValidationInterface( CValidationInterface * pwalletIn)",11, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"UnregisterValidationInterface( CValidationInterface * pwalletIn)",11, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"UnregisterAllValidationInterfaces()",14, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CallFunctionInValidationInterfaceQueue( std :: function<void()> func)",3, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"SyncWithValidationInterfaceQueue()",9, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::MempoolEntryRemoved( CTransactionRef ptx , MemPoolRemovalReason reason)",7, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::UpdatedBlockTip( const CBlockIndex * pindexNew , const CBlockIndex * pindexFork , bool fInitialDownload)",9, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::TransactionAddedToMempool( const CTransactionRef & ptx)",5, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::BlockConnected( const std :: shared_ptr<const CBlock> & pblock , const CBlockIndex * pindex , const std :: shared_ptr<const std::vector<CTransactionRef>> & pvtxConflicted)",5, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::BlockDisconnected( const std :: shared_ptr<const CBlock> & pblock)",5, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::ChainStateFlushed( const CBlockLocator & locator)",5, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::Broadcast( int64_t nBestBlockTime , CConnman * connman)",3, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::BlockChecked( const CBlock & block , const CValidationState & state)",3, 2, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::NewPoWValidBlock( const CBlockIndex * pindex , const std :: shared_ptr<const CBlock> & block)",3, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CoinEntry::CoinEntry( const COutPoint * ptr)",1, 103, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CoinEntry::Serialize( Stream & s) const",5, 6, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CoinEntry::Unserialize( Stream & s)",5, 6, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::CCoinsViewDB( size_t nCacheSize , bool fMemory , bool fWipe)",3, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::GetCoin( const COutPoint & outpoint , Coin & coin) const",3, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::HaveCoin( const COutPoint & outpoint) const",3, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::GetBestBlock() const",6, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::GetHeadBlocks() const",7, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlock)",60, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::EstimateSize() const",4, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::CBlockTreeDB( size_t nCacheSize , bool fMemory , bool fWipe)",2, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::ReadBlockFileInfo( int nFile , CBlockFileInfo & info)",3, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::WriteReindexing( bool fReindexing)",6, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::ReadReindexing( bool & fReindexing)",3, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::ReadLastBlockFile( int & nFile)",3, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::Cursor() const",17, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::GetKey( COutPoint & key) const",9, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::GetValue( Coin & coin) const",4, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::GetValueSize() const",4, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::Valid() const",4, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::Next()",10, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::WriteBatchSync( const std :: vector<std::pair<int,const CBlockFileInfo*>> & fileInfo , int nLastFile , const std :: vector<const CBlockIndex*> & blockinfo)",11, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::WriteFlag( const std :: string & name , bool fValue)",3, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::ReadFlag( const std :: string & name , bool & fValue)",7, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::LoadBlockIndexGuts( const Consensus :: Params & consensusParams , std :: function<CBlockIndex*(const uint256&)> insertBlockIndex)",42, 2, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoins::CCoins()",1, 57, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoins::Unserialize( Stream & s)",32, 6, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::Upgrade()",63, 2, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::ThreadSafeMessageBox( const std :: string & message , const std :: string & caption , unsigned int style)",1, 193, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::ThreadSafeQuestion( const std :: string & message , const std :: string & non_interactive_message , const std :: string & caption , unsigned int style)",1, 258, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::InitMessage( const std :: string & message)",1, 111, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyNumConnectionsChanged( int newNumConnections)",1, 148, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyNetworkActiveChanged( bool networkActive)",1, 139, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyAlertChanged()",1, 92, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::LoadWallet( std :: shared_ptr<CWallet> wallet)",1, 113, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::ShowProgress( const std :: string & title , int nProgress , bool resume_possible)",1, 174, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyBlockTip( bool b , const CBlockIndex * i)",1, 116, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyHeaderTip( bool b , const CBlockIndex * i)",1, 118, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::BannedListChanged()",1, 90, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"InitError( const std :: string & str)",5, 2, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"InitWarning( const std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"AmountHighWarn( const std :: string & optname)",4, 2, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"AmountErrMsg( const char * const optname , const std :: string & strValue)",4, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlReply::TorControlReply()",1, 35, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlReply::Clear()",5, 6, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::TorControlConnection( struct event_base * _base)",4, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::~TorControlConnection()",5, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::readcb( struct bufferevent * bev , void * ctx)",44, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::eventcb( struct bufferevent * bev , short what , void * ctx)",16, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::Connect( const std :: string & target , const ConnectionCB & _connected , const ConnectionCB & _disconnected)",29, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::Disconnect()",6, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::Command( const std :: string & cmd , const ReplyHandlerCB & reply_handler)",12, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"SplitTorReplyLine( const std :: string & s)",12, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"ParseTorReplyMapping( const std :: string & s)",86, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"ReadBinaryFile( const fs :: path & filename , size_t maxsize = std :: numeric_limits<size_t> :: max())",22, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"WriteBinaryFile( const fs :: path & filename , const std :: string & data)",12, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::TorController( struct event_base * _base , const std :: string & _target)",20, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::~TorController()",10, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::add_onion_cb( TorControlConnection & _conn , const TorControlReply & reply)",34, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::auth_cb( TorControlConnection & _conn , const TorControlReply & reply)",26, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"ComputeResponse( const std :: string & key , const std :: vector<uint8_t> & cookie , const std :: vector<uint8_t> & clientNonce , const std :: vector<uint8_t> & serverNonce)",10, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::authchallenge_cb( TorControlConnection & _conn , const TorControlReply & reply)",34, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::protocolinfo_cb( TorControlConnection & _conn , const TorControlReply & reply)",73, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::connected_cb( TorControlConnection & _conn)",7, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::disconnected_cb( TorControlConnection & _conn)",17, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::Reconnect()",10, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::GetPrivateKeyFile()",4, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::reconnect_cb( evutil_socket_t fd , short what , void * arg)",5, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlThread()",6, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"StartTorControl()",16, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"InterruptTorControl()",7, 2, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"StopTorControl()",8, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CMessageHeader::CMessageHeader( const MessageStartChars & pchMessageStartIn)",7, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CMessageHeader::CMessageHeader( const MessageStartChars & pchMessageStartIn , const char * pszCommand , unsigned int nMessageSizeIn)",8, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CMessageHeader::GetCommand() const",4, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CMessageHeader::IsValid( const MessageStartChars & pchMessageStartIn) const",29, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"GetDesirableServiceFlags( ServiceFlags services)",6, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"SetServiceFlagsIBDCache( bool state)",3, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CAddress::CAddress()",4, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CAddress::CAddress( CService ipIn , ServiceFlags nServicesIn)",5, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CAddress::Init()",5, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CInv::CInv()",5, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CInv::CInv( int typeIn , const uint256 & hashIn)",1, 78, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"operator <( const CInv & a , const CInv & b)",4, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CInv::GetCommand() const",16, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CInv::ToString() const",8, 2, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"getAllNetMessageTypes()",4, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts( const CPubKey & pubkey)",24, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetPubKey( const CKeyID & address , CPubKey & vchPubKeyOut) const",15, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::AddKeyPubKey( const CKey & key , const CPubKey & pubkey)",7, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::HaveKey( const CKeyID & address) const",5, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetKeys() const",9, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetKey( const CKeyID & address , CKey & keyOut) const",10, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::AddCScript( const CScript & redeemScript)",9, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::HaveCScript( const CScriptID & hash) const",5, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetCScripts() const",9, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetCScript( const CScriptID & hash , CScript & redeemScriptOut) const",11, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"ExtractPubKey( const CScript & dest , CPubKey & pubKeyOut)",15, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::AddWatchOnly( const CScript & dest)",11, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::RemoveWatchOnly( const CScript & dest)",12, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::HaveWatchOnly( const CScript & dest) const",5, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::HaveWatchOnly() const",5, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"GetKeyForDestination( const CKeyStore & store , const CTxDestination & dest)",21, 2, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"HaveKey( const CKeyStore & store , const CKey & key)",6, 2, 0, 0
repos/cpp/bitcoin/src/hash.cpp,"ROTL32( uint32_t x , int8_t r)",4, 2, 0, 0
repos/cpp/bitcoin/src/hash.cpp,"MurmurHash3( unsigned int nHashSeed , const std :: vector<unsigned char> & vDataToHash)",55, 2, 0, 0
repos/cpp/bitcoin/src/hash.cpp,"BIP32Hash( const ChainCode & chainCode , unsigned int nChild , unsigned char header , const unsigned char data [ 32 ] , unsigned char output [ 64 ])",9, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::CTxMemPoolEntry( const CTransactionRef & _tx , const CAmount & _nFee , int64_t _nTime , unsigned int _entryHeight , bool _spendsCoinbase , int64_t _sigOpsCost , LockPoints lp)",17, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::UpdateFeeDelta( int64_t newFeeDelta)",6, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::UpdateLockPoints( const LockPoints & lp)",4, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::GetTxSize() const",4, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateForDescendants( txiter updateIt , cacheMap & cachedDescendants , const std :: set<uint256> & setExclude)",41, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateTransactionsFromBlock( const std :: vector<uint256> & vHashesToUpdate)",42, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CalculateMemPoolAncestors( const CTxMemPoolEntry & entry , setEntries & setAncestors , uint64_t limitAncestorCount , uint64_t limitAncestorSize , uint64_t limitDescendantCount , uint64_t limitDescendantSize , std :: string & errString , bool fSearchForParents) const",61, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateAncestorsOf( bool add , txiter it , setEntries & setAncestors)",14, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateEntryForAncestors( txiter it , const setEntries & setAncestors)",13, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateChildrenForRemoval( txiter it)",7, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateForRemoveFromMempool( const setEntries & entriesToRemove , bool updateDescendants)",57, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::UpdateDescendantState( int64_t modifySize , CAmount modifyFee , int64_t modifyCount)",8, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::UpdateAncestorState( int64_t modifySize , CAmount modifyFee , int64_t modifyCount , int64_t modifySigOps)",10, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CTxMemPool( CBlockPolicyEstimator * estimator)",10, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::isSpent( const COutPoint & outpoint) const",5, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetTransactionsUpdated() const",5, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::AddTransactionsUpdated( unsigned int n)",5, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::addUnchecked( const CTxMemPoolEntry & entry , setEntries & setAncestors , bool validFeeEstimate)",50, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeUnchecked( txiter it , MemPoolRemovalReason reason)",24, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CalculateDescendants( txiter entryit , setEntries & setDescendants) const",22, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeRecursive( const CTransaction & origTx , MemPoolRemovalReason reason)",31, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeForReorg( const CCoinsViewCache * pcoins , unsigned int nMemPoolHeight , int flags)",36, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeConflicts( const CTransaction & tx)",16, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeForBlock( const std :: vector<CTransactionRef> & vtx , unsigned int nBlockHeight)",28, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::_clear()",12, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::clear()",5, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CheckInputsAndUpdateCoins( const CTransaction & tx , CCoinsViewCache & mempoolDuplicate , const int64_t spendheight)",8, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::check( const CCoinsViewCache * pcoins) const",115, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CompareDepthAndScore( const uint256 & hasha , const uint256 & hashb)",14, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"DepthAndScoreComparator::operator ( )( const CTxMemPool :: indexed_transaction_set :: const_iterator & a , const CTxMemPool :: indexed_transaction_set :: const_iterator & b)",9, 6, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetSortedDepthAndScore() const",13, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::queryHashes( std :: vector<uint256> & vtxid)",12, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"GetInfo( CTxMemPool :: indexed_transaction_set :: const_iterator it)",3, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::infoAll() const",13, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::get( const uint256 & hash) const",8, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::info( const uint256 & hash) const",8, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::PrioritiseTransaction( const uint256 & hash , const CAmount & nFeeDelta)",29, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::ApplyDelta( const uint256 hash , CAmount & nFeeDelta) const",9, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::ClearPrioritisation( const uint256 hash)",5, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetConflictTx( const COutPoint & prevout) const",5, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetIter( const uint256 & txid) const",6, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetIterSet( const std :: set<uint256> & hashes) const",9, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::HasNoInputsOf( const CTransaction & tx) const",7, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CCoinsViewMemPool::CCoinsViewMemPool( CCoinsView * baseIn , const CTxMemPool & mempoolIn)",1, 137, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CCoinsViewMemPool::GetCoin( const COutPoint & outpoint , Coin & coin) const",15, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::DynamicMemoryUsage() const",5, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::RemoveStaged( setEntries & stage , bool updateDescendants , MemPoolRemovalReason reason)",7, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::Expire( int64_t time)",15, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::addUnchecked( const CTxMemPoolEntry & entry , bool validFeeEstimate)",8, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateChild( txiter entry , txiter child , bool add)",9, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateParent( txiter entry , txiter parent , bool add)",9, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetMemPoolParents( txiter entry) const",7, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetMemPoolChildren( txiter entry) const",7, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetMinFee( size_t sizelimit) const",23, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::trackPackageRemoved( const CFeeRate & rate)",7, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::TrimToSize( size_t sizelimit , std :: vector<COutPoint> * pvNoSpendsRemaining)",42, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CalculateDescendantMaximum( txiter entry) const",21, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetTransactionAncestry( const uint256 & txid , size_t & ancestors , size_t & descendants) const",9, 2, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"SaltedTxidHasher::SaltedTxidHasher()",1, 143, 0, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::base_blob( const std :: vector<unsigned char> & vch)",5, 2, 0, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::GetHex() const",4, 2, 0, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::SetHex( const char * psz)",27, 2, 0, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::SetHex( const std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::ToString() const",4, 2, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"ValueFromAmount( const CAmount & amount)",9, 2, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"FormatScript( const CScript & script)",34, 2, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"SighashToStr( unsigned char sighash_type)",6, 2, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"ScriptToAsmStr( const CScript & script , const bool fAttemptSighashDecode)",43, 2, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"EncodeHexTx( const CTransaction & tx , const int serializeFlags)",6, 2, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"ScriptToUniv( const CScript & script , UniValue & out , bool include_address)",14, 2, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"ScriptPubKeyToUniv( const CScript & scriptPubKey , UniValue & out , bool fIncludeHex)",25, 2, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"TxToUniv( const CTransaction & tx , const uint256 & hashBlock , UniValue & entry , bool include_hex , int serialize_flags)",59, 2, 0, 0
repos/cpp/bitcoin/src/shutdown.cpp,"StartShutdown()",4, 2, 0, 0
repos/cpp/bitcoin/src/shutdown.cpp,"AbortShutdown()",4, 2, 0, 0
repos/cpp/bitcoin/src/shutdown.cpp,"ShutdownRequested()",4, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::GetTriedBucket( const uint256 & nKey) const",6, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::GetNewBucket( const uint256 & nKey , const CNetAddr & src) const",7, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::GetBucketPosition( const uint256 & nKey , bool fNew , int nBucket) const",5, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::IsTerrible( int64_t nNow) const",19, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::GetChance( int64_t nNow) const",14, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Find( const CNetAddr & addr , int * pnId)",12, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Create( const CAddress & addr , const CNetAddr & addrSource , int * pnId)",11, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::SwapRandom( unsigned int nRndPos1 , unsigned int nRndPos2)",19, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Delete( int nId)",13, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::ClearNew( int nUBucket , int nUBucketPos)",14, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::MakeTried( CAddrInfo & info , int nId)",47, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Good_( const CService & addr , bool test_before_evict , int64_t nTime)",63, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Add_( const CAddress & addr , const CNetAddr & source , int64_t nTimePenalty)",72, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Attempt_( const CService & addr , bool fCountFailure , int64_t nTime)",21, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Select_( bool newOnly)",46, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Check_()",75, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::GetAddr_( std :: vector<CAddress> & vAddr)",20, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Connected_( const CService & addr , int64_t nTime)",19, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::SetServices_( const CService & addr , ServiceFlags nServices)",17, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::ResolveCollisions_()",51, 2, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::SelectTriedCollision_()",26, 2, 0, 0
repos/cpp/bitcoin/src/bitcoind.cpp,"WaitForShutdown()",8, 2, 0, 0
repos/cpp/bitcoin/src/bitcoind.cpp,"AppInit( int argc , char * argv [ ])",129, 2, 0, 0
repos/cpp/bitcoin/src/bitcoind.cpp,"main( int argc , char * argv [ ])",13, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"RandFailure()",5, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetPerformanceCounter()",19, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"RDRandInit()",9, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"RDRandInit()",1, 28, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetHWRand( unsigned char * ent32)",36, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"RandAddSeed()",7, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"RandAddSeedPerfmon()",39, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetDevURandom( unsigned char * ent32)",17, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetOSRand( unsigned char * ent32)",70, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetRandBytes( unsigned char * buf , int num)",6, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"RandAddSeedSleep()",13, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"AddDataToRng( void * data , size_t len)",15, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetStrongRandBytes( unsigned char * out , int num)",34, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetRand( uint64_t nMax)",14, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetRandInt( int nMax)",4, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetRandHash()",6, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::RandomSeed()",6, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::rand256()",10, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::randbytes( size_t len)",9, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::FastRandomContext( const uint256 & seed)",4, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"Random_SanityCheck()",43, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::FastRandomContext( bool fDeterministic)",8, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::operator =( FastRandomContext && from)",13, 2, 0, 0
repos/cpp/bitcoin/src/random.cpp,"RandomInit()",4, 2, 0, 0
repos/cpp/bitcoin/src/base58.cpp,"DecodeBase58( const char * psz , std :: vector<unsigned char> & vch)",48, 2, 0, 0
repos/cpp/bitcoin/src/base58.cpp,"EncodeBase58( const unsigned char * pbegin , const unsigned char * pend)",39, 2, 0, 0
repos/cpp/bitcoin/src/base58.cpp,"EncodeBase58( const std :: vector<unsigned char> & vch)",4, 2, 0, 0
repos/cpp/bitcoin/src/base58.cpp,"DecodeBase58( const std :: string & str , std :: vector<unsigned char> & vchRet)",4, 2, 0, 0
repos/cpp/bitcoin/src/base58.cpp,"EncodeBase58Check( const std :: vector<unsigned char> & vchIn)",8, 2, 0, 0
repos/cpp/bitcoin/src/base58.cpp,"DecodeBase58Check( const char * psz , std :: vector<unsigned char> & vchRet)",16, 2, 0, 0
repos/cpp/bitcoin/src/base58.cpp,"DecodeBase58Check( const std :: string & str , std :: vector<unsigned char> & vchRet)",4, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"PrintLockContention( const char * pszName , const char * pszFile , int nLine)",5, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"CLockLocation::CLockLocation( const char * pszName , const char * pszFile , int nLine , bool fTryIn)",7, 6, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"CLockLocation::ToString() const",4, 6, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"LockData::LockData()",1, 36, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"LockData::~LockData()",1, 39, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"potential_deadlock_detected( const std :: pair<void*,void*> & mismatch , const LockStack & s1 , const LockStack & s2)",29, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"push_lock( void * c , const CLockLocation & locklocation)",21, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"pop_lock()",4, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"EnterCritical( const char * pszName , const char * pszFile , int nLine , void * cs , bool fTry)",4, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"LeaveCritical()",4, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"LocksHeld()",7, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"AssertLockHeldInternal( const char * pszName , const char * pszFile , int nLine , void * cs)",8, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"AssertLockNotHeldInternal( const char * pszName , const char * pszFile , int nLine , void * cs)",9, 2, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"DeleteLock( void * cs)",21, 2, 0, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs( const CBlock & block , bool fUseWTXID)",11, 2, 0, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const",10, 2, 0, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"CBlockHeaderAndShortTxIDs::GetShortID( const uint256 & txhash) const",4, 2, 0, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"PartiallyDownloadedBlock::InitData( const CBlockHeaderAndShortTxIDs & cmpctblock , const std :: vector<std::pair<uint256,CTransactionRef>> & extra_txn)",121, 2, 0, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"PartiallyDownloadedBlock::IsTxAvailable( size_t index) const",5, 2, 0, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"PartiallyDownloadedBlock::FillBlock( CBlock & block , const std :: vector<CTransactionRef> & vtx_missing)",43, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GolombRiceEncode( BitStreamWriter<OStream> & bitwriter , uint8_t P , uint64_t x)",15, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GolombRiceDecode( BitStreamReader<IStream> & bitreader , uint8_t P)",12, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"MapIntoRange( uint64_t x , uint64_t n)",25, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::HashToRange( const Element & element) const",7, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::BuildHashedSet( const ElementSet & elements) const",10, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::GCSFilter( uint64_t siphash_k0 , uint64_t siphash_k1 , uint8_t P , uint32_t M)",3, 3, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::GCSFilter( uint64_t siphash_k0 , uint64_t siphash_k1 , uint8_t P , uint32_t M , std :: vector<unsigned char> encoded_filter)",25, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::GCSFilter( uint64_t siphash_k0 , uint64_t siphash_k1 , uint8_t P , uint32_t M , const ElementSet & elements)",30, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::MatchInternal( const uint64_t * element_hashes , size_t size) const",31, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::Match( const Element & element) const",5, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::MatchAny( const ElementSet & elements) const",5, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BasicFilterElements( const CBlock & block , const CBlockUndo & block_undo)",23, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BlockFilter::BlockFilter( BlockFilterType filter_type , const CBlock & block , const CBlockUndo & block_undo)",14, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BlockFilter::GetHash() const",8, 2, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BlockFilter::ComputeHeader( const uint256 & prev_header) const",11, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::GetCoin( const COutPoint & outpoint , Coin & coin) const",1, 88, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::GetBestBlock() const",1, 63, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::GetHeadBlocks() const",1, 90, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlock)",1, 93, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::Cursor() const",1, 65, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::HaveCoin( const COutPoint & outpoint) const",5, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::CCoinsViewBacked( CCoinsView * viewIn)",1, 74, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::GetCoin( const COutPoint & outpoint , Coin & coin) const",1, 118, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::HaveCoin( const COutPoint & outpoint) const",1, 102, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::GetBestBlock() const",1, 80, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::GetHeadBlocks() const",1, 95, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::SetBackend( CCoinsView & viewIn)",1, 74, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlock)",1, 131, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::Cursor() const",1, 78, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::EstimateSize() const",1, 79, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"SaltedOutpointHasher::SaltedOutpointHasher()",1, 151, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::CCoinsViewCache( CCoinsView * baseIn)",1, 104, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::DynamicMemoryUsage() const",3, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::FetchCoin( const COutPoint & outpoint) const",16, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::GetCoin( const COutPoint & outpoint , Coin & coin) const",8, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::AddCoin( const COutPoint & outpoint , Coin && coin , bool possible_overwrite)",20, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"AddCoins( CCoinsViewCache & cache , const CTransaction & tx , int nHeight , bool check)",10, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::SpendCoin( const COutPoint & outpoint , Coin * moveout)",15, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::AccessCoin( const COutPoint & outpoint) const",8, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::HaveCoin( const COutPoint & outpoint) const",4, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::HaveCoinInCache( const COutPoint & outpoint) const",4, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::GetBestBlock() const",5, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::SetBestBlock( const uint256 & hashBlockIn)",3, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlockIn)",57, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::Flush()",6, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::Uncache( const COutPoint & hash)",8, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::GetCacheSize() const",3, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::GetValueIn( const CTransaction & tx) const",11, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::HaveInputs( const CTransaction & tx) const",11, 2, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"AccessByTxid( const CCoinsViewCache & view , const uint256 & txid)",10, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"CCoin::CCoin()",1, 28, 4, 0
repos/cpp/bitcoin/src/rest.cpp,"CCoin::CCoin( Coin && in)",1, 79, 4, 0
repos/cpp/bitcoin/src/rest.cpp,"CCoin::SerializationOp( Stream & s , Operation ser_action)",7, 6, 4, 0
repos/cpp/bitcoin/src/rest.cpp,"RESTERR( HTTPRequest * req , enum HTTPStatusCode status , std :: string message)",6, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"ParseDataFormat( std :: string & param , const std :: string & strReq)",20, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"AvailableDataFormatsString()",15, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"CheckWarmup( HTTPRequest * req)",7, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_headers( HTTPRequest * req , const std :: string & strURIPart)",77, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_block( HTTPRequest * req , const std :: string & strURIPart , bool showTxDetails)",65, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_block_extended( HTTPRequest * req , const std :: string & strURIPart)",4, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_block_notxdetails( HTTPRequest * req , const std :: string & strURIPart)",4, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_chaininfo( HTTPRequest * req , const std :: string & strURIPart)",22, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_mempool_info( HTTPRequest * req , const std :: string & strURIPart)",21, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_mempool_contents( HTTPRequest * req , const std :: string & strURIPart)",21, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_tx( HTTPRequest * req , const std :: string & strURIPart)",55, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_getutxos( HTTPRequest * req , const std :: string & strURIPart)",183, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"StartREST()",5, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"InterruptREST()",3, 2, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"StopREST()",5, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"SetupBitcoinTxArgs()",38, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"AppInitRawTx( int argc , char * argv [ ])",40, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"RegisterSetJson( const std :: string & key , const std :: string & rawJson)",10, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"RegisterSet( const std :: string & strInput)",14, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"RegisterLoad( const std :: string & strInput)",40, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"ExtractAndValidateValue( const std :: string & strValue)",7, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxVersion( CMutableTransaction & tx , const std :: string & cmdVal)",8, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxLocktime( CMutableTransaction & tx , const std :: string & cmdVal)",8, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxRBFOptIn( CMutableTransaction & tx , const std :: string & strInIdx)",19, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddInput( CMutableTransaction & tx , const std :: string & strInput)",33, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutAddr( CMutableTransaction & tx , const std :: string & strInput)",24, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutPubKey( CMutableTransaction & tx , const std :: string & strInput)",43, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutMultiSig( CMutableTransaction & tx , const std :: string & strInput)",73, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutData( CMutableTransaction & tx , const std :: string & strInput)",26, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutScript( CMutableTransaction & tx , const std :: string & strInput)",44, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxDelInput( CMutableTransaction & tx , const std :: string & strInIdx)",11, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxDelOutput( CMutableTransaction & tx , const std :: string & strOutIdx)",11, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"findSighashFlags( int & flags , const std :: string & flagStr)",13, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"AmountFromValue( const UniValue & value)",11, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxSign( CMutableTransaction & tx , const std :: string & flagStr)",115, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"Secp256k1Init::Secp256k1Init()",3, 6, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"Secp256k1Init::~Secp256k1Init()",3, 6, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTx( CMutableTransaction & tx , const std :: string & command , const std :: string & commandVal)",47, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"OutputTxJSON( const CTransaction & tx)",8, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"OutputTxHash( const CTransaction & tx)",6, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"OutputTxHex( const CTransaction & tx)",6, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"OutputTx( const CTransaction & tx)",9, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"readStdin()",19, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"CommandLineRawTx( int argc , char * argv [ ])",62, 2, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"main( int argc , char * argv [ ])",28, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"IteratorComparator::operator ( )( const I & a , const I & b) const",4, 10, 8, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CNodeState::CNodeState( CAddress addrIn , std :: string addrNameIn)",25, 6, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",6, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",9, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PushNodeVersion( CNode * pnode , CConnman * connman , int64_t nTime)",20, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",22, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",32, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",14, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",17, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",35, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",8, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",4, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",8, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",86, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"UpdateLastBlockAnnounceTime( NodeId node , int64_t time_in_seconds)",6, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"IsOutboundDisconnectionCandidate( const CNode * node)",4, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::InitializeNode( CNode * pnode)",11, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::FinalizeNode( NodeId nodeid , bool & fUpdateConnectionTime)",34, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"GetNodeStateStats( NodeId nodeid , CNodeStateStats & stats)",14, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( g_cs_orphans)",10, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( g_cs_orphans)",32, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( g_cs_orphans)",17, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EraseOrphansFor( NodeId peer)",15, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"LimitOrphanTxSize( unsigned int nMaxOrphans)",38, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",19, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",8, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::PeerLogicValidation( CConnman * connmanIn , CScheduler & scheduler , bool enable_bip61)",14, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::BlockConnected( const std :: shared_ptr<const CBlock> & pblock , const CBlockIndex * pindex , const std :: vector<CTransactionRef> & vtxConflicted)",31, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::NewPoWValidBlock( const CBlockIndex * pindex , const std :: shared_ptr<const CBlock> & pblock)",42, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::UpdatedBlockTip( const CBlockIndex * pindexNew , const CBlockIndex * pindexFork , bool fInitialDownload)",31, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::BlockChecked( const CBlock & block , const CValidationState & state)",32, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",35, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"RelayTransaction( const CTransaction & tx , CConnman * connman)",8, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"RelayAddress( const CAddress & addr , bool fReachable , CConnman * connman)",35, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"ProcessGetBlockData( CNode * pfrom , const CChainParams & chainparams , const CInv & inv , CConnman * connman)",154, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"LOCKS_EXCLUDED( cs_main)",63, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",7, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"SendBlockTransactions( const CBlock & block , const BlockTransactionsRequest & req , CNode * pfrom , CConnman * connman)",15, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"ProcessHeadersMessage( CNode * pfrom , CConnman * connman , const std :: vector<CBlockHeader> & headers , const CChainParams & chainparams , bool punish_duplicate_invalid)",220, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"ProcessMessage( CNode * pfrom , const std :: string & strCommand , CDataStream & vRecv , int64_t nTimeReceived , const CChainParams & chainparams , CConnman * connman , const std :: atomic<bool> & interruptMsgProc , bool enable_bip61)",1372, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",31, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::ProcessMessages( CNode * pfrom , std :: atomic<bool> & interruptMsgProc)",121, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::ConsiderEviction( CNode * pto , int64_t time_in_seconds)",52, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::EvictExtraOutboundPeers( int64_t time_in_seconds)",56, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::CheckForStaleTipAndEvictPeers( const Consensus :: Params & consensusParams)",22, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CompareInvMempoolOrder::CompareInvMempoolOrder( CTxMemPool * _mempool)",4, 6, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CompareInvMempoolOrder::operator ( )( std :: set<uint256> :: iterator a , std :: set<uint256> :: iterator b)",6, 6, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::SendMessages( CNode * pto)",532, 2, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CNetProcessingCleanup::CNetProcessingCleanup()",1, 31, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CNetProcessingCleanup::~CNetProcessingCleanup()",5, 6, 4, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::base_uint( const std :: string & str)",6, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator < <=( unsigned int shift)",15, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator > >=( unsigned int shift)",15, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator *=( uint32_t b32)",10, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator *=( const base_uint & b)",14, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator /=( const base_uint & b)",24, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::CompareTo( const base_uint<BITS> & b) const",10, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::EqualTo( uint64_t b) const",12, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::getdouble() const",10, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::GetHex() const",4, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::SetHex( const char * psz)",4, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::SetHex( const std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::ToString() const",4, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::bits() const",13, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"arith_uint256::SetCompact( uint32_t nCompact , bool * pfNegative , bool * pfOverflow)",19, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"arith_uint256::GetCompact( bool fNegative) const",22, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"ArithToUint256( const arith_uint256 & a)",7, 2, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"UintToArith256( const uint256 & a)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"GetWalletNameFromJSONRPCRequest( const JSONRPCRequest & request , std :: string & wallet_name)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"GetWalletForJSONRPCRequest( const JSONRPCRequest & request)",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"HelpRequiringPassphrase( CWallet * const pwallet)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"EnsureWalletIsAvailable( CWallet * const pwallet , bool avoidException)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"EnsureWalletIsUnlocked( CWallet * const pwallet)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"WalletTxToJSON( interfaces :: Chain & chain , interfaces :: Chain :: Lock & locked_chain , const CWalletTx & wtx , UniValue & entry)",38, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"LabelFromValue( const UniValue & value)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getnewaddress( const JSONRPCRequest & request)",61, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getrawchangeaddress( const JSONRPCRequest & request)",54, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"setlabel( const JSONRPCRequest & request)",40, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"SendMoney( interfaces :: Chain :: Lock & locked_chain , CWallet * const pwallet , const CTxDestination & address , CAmount nValue , bool fSubtractFeeFromAmount , const CCoinControl & coin_control , mapValue_t mapValue)",39, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"sendtoaddress( const JSONRPCRequest & request)",91, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listaddressgroupings( const JSONRPCRequest & request)",61, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"signmessage( const JSONRPCRequest & request)",65, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getreceivedbyaddress( const JSONRPCRequest & request)",69, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getreceivedbylabel( const JSONRPCRequest & request)",67, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getbalance( const JSONRPCRequest & request)",56, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getunconfirmedbalance( const JSONRPCRequest & request)",24, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"sendmany( const JSONRPCRequest & request)",155, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"addmultisigaddress( const JSONRPCRequest & request)",79, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"tallyitem::tallyitem()",6, 6, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",145, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listreceivedbyaddress( const JSONRPCRequest & request)",52, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listreceivedbylabel( const JSONRPCRequest & request)",45, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"MaybePushAddress( UniValue & entry , const CTxDestination & dest)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"ListTransactions( interfaces :: Chain :: Lock & locked_chain , CWallet * const pwallet , const CWalletTx & wtx , int nMinDepth , bool fLong , UniValue & ret , const isminefilter & filter_ismine , const std :: string * filter_label)",75, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listtransactions( const JSONRPCRequest & request)",128, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listsinceblock( const JSONRPCRequest & request)",141, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"gettransaction( const JSONRPCRequest & request)",96, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"abandontransaction( const JSONRPCRequest & request)",46, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"backupwallet( const JSONRPCRequest & request)",36, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"keypoolrefill( const JSONRPCRequest & request)",47, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletpassphrase( const JSONRPCRequest & request)",84, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletpassphrasechange( const JSONRPCRequest & request)",51, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletlock( const JSONRPCRequest & request)",41, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"encryptwallet( const JSONRPCRequest & request)",58, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"lockunspent( const JSONRPCRequest & request)",128, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listlockunspent( const JSONRPCRequest & request)",55, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"settxfee( const JSONRPCRequest & request)",41, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getwalletinfo( const JSONRPCRequest & request)",69, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listwalletdir( const JSONRPCRequest & request)",32, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listwallets( const JSONRPCRequest & request)",33, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"loadwallet( const JSONRPCRequest & request)",54, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"createwallet( const JSONRPCRequest & request)",53, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"unloadwallet( const JSONRPCRequest & request)",50, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"resendwallettransactions( const JSONRPCRequest & request)",39, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listunspent( const JSONRPCRequest & request)",177, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"FundTransaction( CWallet * const pwallet , CMutableTransaction & tx , CAmount & fee_out , int & change_position , UniValue options)",115, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"fundrawtransaction( const JSONRPCRequest & request)",91, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"signrawtransactionwithwallet( const JSONRPCRequest & request)",75, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"bumpfee( const JSONRPCRequest & request)",153, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"generate( const JSONRPCRequest & request)",54, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"rescanblockchain( const JSONRPCRequest & request)",89, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::ProcessSubScript( const CScript & subscript , UniValue & obj , bool include_addresses = false) const",42, 6, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::DescribeWalletAddressVisitor( CWallet * _pwallet)",1, 84, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const CNoDestination & dest) const",1, 95, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const CKeyID & keyID) const",10, 6, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const CScriptID & scriptID) const",9, 6, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const WitnessV0KeyHash & id) const",9, 6, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const WitnessV0ScriptHash & id) const",12, 6, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const WitnessUnknown & id) const",1, 93, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddress( CWallet * pwallet , const CTxDestination & dest)",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"AddressBookDataToJSON( const CAddressBookData & data , const bool verbose)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getaddressinfo( const JSONRPCRequest & request)",128, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getaddressesbylabel( const JSONRPCRequest & request)",46, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listlabels( const JSONRPCRequest & request)",55, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"sethdseed( const JSONRPCRequest & request)",73, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"AddKeypathToMap( const CWallet * pwallet , const CKeyID & keyID , std :: map<CPubKey,KeyOriginInfo> & hd_keypaths)",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"FillPSBT( const CWallet * pwallet , PartiallySignedTransaction & psbtx , int sighash_type , bool sign , bool bip32derivs)",53, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletprocesspsbt( const JSONRPCRequest & request)",64, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletcreatefundedpsbt( const JSONRPCRequest & request)",115, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"RegisterWalletRPCCommands( CRPCTable & t)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"WalletInit::HasWalletSupport() const",1, 58, 4, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"WalletInit::AddWalletOptions() const",34, 2, 0, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"WalletInit::ParameterInteraction() const",74, 2, 0, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"VerifyWallets( interfaces :: Chain & chain , const std :: vector<std::string> & wallet_files)",47, 2, 0, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"WalletInit::Construct( InitInterfaces & interfaces) const",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"LoadWallets( interfaces :: Chain & chain , const std :: vector<std::string> & wallet_files)",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"StartWallets( CScheduler & scheduler)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"FlushWallets()",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"StopWallets()",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"UnloadWallets()",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"AddWallet( const std :: shared_ptr<CWallet> & wallet)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"RemoveWallet( const std :: shared_ptr<CWallet> & wallet)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"HasWallets()",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"GetWallets()",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"GetWallet( const std :: string & name)",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"ReleaseWallet( CWallet * wallet)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"COutput::ToString() const",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"GetAffectedKeys( const CScript & spk , const SigningProvider & provider)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetWalletTx( const uint256 & hash) const",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GenerateNewKey( WalletBatch & batch , bool internal)",35, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DeriveNewChildKey( WalletBatch & batch , CKeyMetadata & metadata , CKey & secret , bool internal)",45, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddKeyPubKeyWithDB( WalletBatch & batch , const CKey & secret , const CPubKey & pubkey)",35, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddKeyPubKey( const CKey & secret , const CPubKey & pubkey)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddCryptedKey( const CPubKey & vchPubKey , const std :: vector<unsigned char> & vchCryptedSecret)",17, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadKeyMetadata( const CKeyID & keyID , const CKeyMetadata & meta)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadScriptMetadata( const CScriptID & script_id , const CKeyMetadata & meta)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadCryptedKey( const CPubKey & vchPubKey , const std :: vector<unsigned char> & vchCryptedSecret)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::UpdateTimeFirstKey( int64_t nCreateTime)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddCScript( const CScript & redeemScript)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadCScript( const CScript & redeemScript)",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddWatchOnly( const CScript & dest)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddWatchOnly( const CScript & dest , int64_t nCreateTime)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::RemoveWatchOnly( const CScript & dest)",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadWatchOnly( const CScript & dest)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::Unlock( const SecureString & strWalletPassphrase)",19, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ChangeWalletPassphrase( const SecureString & strOldWalletPassphrase , const SecureString & strNewWalletPassphrase)",45, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ChainStateFlushed( const CBlockLocator & loc)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetMinVersion( enum WalletFeature nVersion , WalletBatch * batch_in , bool fExplicit)",23, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetMaxVersion( int nVersion)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetConflicts( const uint256 & txid) const",22, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::HasWalletSpend( const uint256 & txid) const",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::Flush( bool shutdown)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SyncMetaData( std :: pair<TxSpends::iterator,TxSpends::iterator> range)",38, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsSpent( interfaces :: Chain :: Lock & locked_chain , const uint256 & hash , unsigned int n) const",18, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddToSpends( const COutPoint & outpoint , const uint256 & wtxid)",10, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddToSpends( const uint256 & wtxid)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::EncryptWallet( const SecureString & strWalletPassphrase)",95, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ReorderTransactions()",56, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IncOrderPosNext( WalletBatch * batch)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkDirty()",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkReplaced( const uint256 & originalHash , const uint256 & newHash)",28, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddToWallet( const CWalletTx & wtxIn , bool fFlushOnClose)",83, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadToWallet( const CWalletTx & wtxIn)",20, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddToWalletIfInvolvingMe( const CTransactionRef & ptx , const CBlockIndex * pIndex , int posInBlock , bool fUpdate)",56, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TransactionCanBeAbandoned( const uint256 & hashTx) const",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkInputsDirty( const CTransactionRef & tx)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AbandonTransaction( interfaces :: Chain :: Lock & locked_chain , const uint256 & hashTx)",55, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkConflicted( const uint256 & hashBlock , const uint256 & hashTx)",54, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SyncTransaction( const CTransactionRef & ptx , const CBlockIndex * pindex , int posInBlock , bool update_tx)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TransactionAddedToMempool( const CTransactionRef & ptx)",10, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TransactionRemovedFromMempool( const CTransactionRef & ptx)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::BlockConnected( const std :: shared_ptr<const CBlock> & pblock , const CBlockIndex * pindex , const std :: vector<CTransactionRef> & vtxConflicted)",22, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::BlockDisconnected( const std :: shared_ptr<const CBlock> & pblock)",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::BlockUntilSyncedToCurrentChain()",23, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsMine( const CTxIn & txin) const",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetDebit( const CTxIn & txin , const isminefilter & filter) const",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsMine( const CTxOut & txout) const",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetCredit( const CTxOut & txout , const isminefilter & filter) const",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsChange( const CTxOut & txout) const",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsChange( const CScript & script) const",21, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetChange( const CTxOut & txout) const",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsMine( const CTransaction & tx) const",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsFromMe( const CTransaction & tx) const",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetDebit( const CTransaction & tx , const isminefilter & filter) const",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsAllFromMe( const CTransaction & tx , const isminefilter & filter) const",20, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetCredit( const CTransaction & tx , const isminefilter & filter) const",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetChange( const CTransaction & tx) const",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GenerateNewSeed()",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DeriveNewSeed( const CKey & key)",26, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetHDSeed( const CPubKey & seed)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetHDChain( const CHDChain & chain , bool memonly)",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsHDEnabled() const",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetWalletFlag( uint64_t flags)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsWalletFlagSet( uint64_t flag)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetWalletFlags( uint64_t overwriteFlags , bool memonly)",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetTxTime() const",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DummySignInput( CTxIn & tx_in , const CTxOut & txout , bool use_max_sig) const",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DummySignTx( CMutableTransaction & txNew , const std :: vector<CTxOut> & txouts , bool use_max_sig) const",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CalculateMaximumSignedTxSize( const CTransaction & tx , const CWallet * wallet , bool use_max_sig)",16, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CalculateMaximumSignedTxSize( const CTransaction & tx , const CWallet * wallet , const std :: vector<CTxOut> & txouts , bool use_max_sig)",10, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CalculateMaximumSignedInputSize( const CTxOut & txout , const CWallet * wallet , bool use_max_sig)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetAmounts( std :: list<COutputEntry> & listReceived , std :: list<COutputEntry> & listSent , CAmount & nFee , const isminefilter & filter) const",54, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::RescanFromTime( int64_t startTime , const WalletRescanReserver & reserver , bool update)",21, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ScanForWalletTransactions( const CBlockIndex * const pindexStart , const CBlockIndex * const pindexStop , const WalletRescanReserver & reserver , const CBlockIndex * & failed_block , const CBlockIndex * & stop_block , bool fUpdate)",89, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ReacceptWalletTransactions()",30, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::RelayWalletTransaction( interfaces :: Chain :: Lock & locked_chain , CConnman * connman)",21, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetConflicts() const",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetDebit( const isminefilter & filter) const",30, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetCredit( interfaces :: Chain :: Lock & locked_chain , const isminefilter & filter) const",32, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetImmatureCredit( interfaces :: Chain :: Lock & locked_chain , bool fUseCache) const",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetAvailableCredit( interfaces :: Chain :: Lock & locked_chain , bool fUseCache , const isminefilter & filter) const",44, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetImmatureWatchOnlyCredit( interfaces :: Chain :: Lock & locked_chain , const bool fUseCache) const",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetChange() const",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::InMempool() const",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::IsTrusted( interfaces :: Chain :: Lock & locked_chain) const",32, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::IsEquivalentTo( const CWalletTx & _tx) const",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ResendWalletTransactionsBefore( interfaces :: Chain :: Lock & locked_chain , int64_t nTime , CConnman * connman)",24, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ResendWalletTransactions( int64_t nBestBlockTime , CConnman * connman)",23, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetBalance( const isminefilter & filter , const int min_depth) const",17, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetUnconfirmedBalance() const",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetImmatureBalance() const",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetUnconfirmedWatchOnlyBalance() const",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetImmatureWatchOnlyBalance() const",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetLegacyBalance( const isminefilter & filter , int minDepth) const",34, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetAvailableBalance( const CCoinControl * coinControl) const",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AvailableCoins( interfaces :: Chain :: Lock & locked_chain , std :: vector<COutput> & vCoins , bool fOnlySafe , const CCoinControl * coinControl , const CAmount & nMinimumAmount , const CAmount & nMaximumAmount , const CAmount & nMinimumSumAmount , const uint64_t nMaximumCount , const int nMinDepth , const int nMaxDepth) const",108, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ListCoins( interfaces :: Chain :: Lock & locked_chain) const",37, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::FindNonChangeParentOutput( const CTransaction & tx , int output) const",16, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SelectCoinsMinConf( const CAmount & nTargetValue , const CoinEligibilityFilter & eligibility_filter , std :: vector<OutputGroup> groups , std :: set<CInputCoin> & setCoinsRet , CAmount & nValueRet , const CoinSelectionParams & coin_selection_params , bool & bnb_used) const",53, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SelectCoins( const std :: vector<COutput> & vAvailableCoins , const CAmount & nTargetValue , std :: set<CInputCoin> & setCoinsRet , CAmount & nValueRet , const CCoinControl & coin_control , CoinSelectionParams & coin_selection_params , bool & bnb_used) const",86, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SignTransaction( CMutableTransaction & tx)",22, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::FundTransaction( CMutableTransaction & tx , CAmount & nFeeRet , int & nChangePosInOut , std :: string & strFailReason , bool lockUnspents , const std :: set<int> & setSubtractFeeFromOutputs , CCoinControl coinControl)",54, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TransactionChangeType( OutputType change_type , const std :: vector<CRecipient> & vecSend)",27, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::CreateTransaction( interfaces :: Chain :: Lock & locked_chain , const std :: vector<CRecipient> & vecSend , CTransactionRef & tx , CReserveKey & reservekey , CAmount & nFeeRet , int & nChangePosInOut , std :: string & strFailReason , const CCoinControl & coin_control , bool sign)",401, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::CommitTransaction( CTransactionRef tx , mapValue_t mapValue , std :: vector<std::pair<std::string,std::string>> orderForm , CReserveKey & reservekey , CConnman * connman , CValidationState & state)",47, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadWallet( bool & fFirstRunRet)",31, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ZapSelectTx( std :: vector<uint256> & vHashIn , std :: vector<uint256> & vHashOut)",31, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ZapWalletTx( std :: vector<CWalletTx> & vWtx)",22, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetAddressBook( const CTxDestination & address , const std :: string & strName , const std :: string & strPurpose)",17, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DelAddressBook( const CTxDestination & address)",19, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetLabelName( const CScript & scriptPubKey) const",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::NewKeyPool()",33, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::KeypoolCountExternalKeys()",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadKeyPool( int64_t nIndex , const CKeyPool & keypool)",20, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TopUpKeyPool( unsigned int kpSize)",57, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ReserveKeyFromKeyPool( int64_t & nIndex , CKeyPool & keypool , bool fRequestedInternal)",43, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::KeepKey( int64_t nIndex)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ReturnKey( int64_t nIndex , bool fInternal , const CPubKey & pubkey)",16, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetKeyFromPool( CPubKey & result , bool internal)",21, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"GetOldestKeyTimeInPool( const std :: set<int64_t> & setKeyPool , WalletBatch & batch)",13, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetOldestKeyPoolTime()",17, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetAddressBalances( interfaces :: Chain :: Lock & locked_chain)",39, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetAddressGroupings()",92, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetLabelAddresses( const std :: string & label) const",13, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CReserveKey::GetReservedKey( CPubKey & pubkey , bool internal)",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CReserveKey::KeepKey()",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CReserveKey::ReturnKey()",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkReserveKeysAsUsed( int64_t keypool_id)",23, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetScriptForMining( std :: shared_ptr<CReserveScript> & script)",10, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LockCoin( const COutPoint & output)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::UnlockCoin( const COutPoint & output)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::UnlockAllCoins()",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsLockedCoin( uint256 hash , unsigned int n) const",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ListLockedCoins( std :: vector<COutPoint> & vOutpts) const",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetKeyBirthTimes( interfaces :: Chain :: Lock & locked_chain , std :: map<CTxDestination,int64_t> & mapKeyBirth) const",47, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ComputeTimeSmart( const CWalletTx & wtx) const",38, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddDestData( const CTxDestination & dest , const std :: string & key , const std :: string & value)",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::EraseDestData( const CTxDestination & dest , const std :: string & key)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadDestData( const CTxDestination & dest , const std :: string & key , const std :: string & value)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetDestData( const CTxDestination & dest , const std :: string & key , std :: string * value) const",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetDestValues( const std :: string & prefix) const",13, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkPreSplitKeys()",17, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::Verify( interfaces :: Chain & chain , const WalletLocation & location , bool salvage_wallet , std :: string & error_string , std :: string & warning_string)",48, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::CreateWalletFromFile( interfaces :: Chain & chain , const WalletLocation & location , uint64_t wallet_creation_flags)",316, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::postInitProcess()",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::BackupWallet( const std :: string & strDest)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CKeyPool::CKeyPool()",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CKeyPool::CKeyPool( const CPubKey & vchPubKeyIn , bool internalIn)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletKey::CWalletKey( int64_t nExpires)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CMerkleTx::SetMerkleBranch( const CBlockIndex * pindex , int posInBlock)",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CMerkleTx::GetDepthInMainChain( interfaces :: Chain :: Lock & locked_chain) const",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CMerkleTx::GetBlocksToMaturity( interfaces :: Chain :: Lock & locked_chain) const",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CMerkleTx::IsImmatureCoinBase( interfaces :: Chain :: Lock & locked_chain) const",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::AcceptToMemoryPool( interfaces :: Chain :: Lock & locked_chain , const CAmount & nAbsurdFee , CValidationState & state)",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LearnRelatedScripts( const CPubKey & key , OutputType type)",10, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LearnAllRelatedScripts( const CPubKey & key)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GroupOutputs( const std :: vector<COutput> & outputs , bool single_coin) const",29, 2, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetKeyOrigin( const CKeyID & keyID , KeyOriginInfo & info) const",25, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"CheckUniqueFileid( const BerkeleyEnvironment & env , const std :: string & filename , Db & db , WalletDatabaseFileId & fileid)",16, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"WalletDatabaseFileId::operator ==( const WalletDatabaseFileId & rhs) const",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"SplitWalletPath( const fs :: path & wallet_path , fs :: path & env_directory , std :: string & database_filename)",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"IsWalletLoaded( const fs :: path & wallet_path)",10, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"GetWalletEnv( const fs :: path & wallet_path , std :: string & database_filename)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Close()",23, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Reset()",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::BerkeleyEnvironment( const fs :: path & dir_path)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::~BerkeleyEnvironment()",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Open( bool retry)",73, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::MakeMock()",31, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Verify( const std :: string & strFile , recoverFunc_type recoverFunc , std :: string & out_backup_filename)",16, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::Recover( const fs :: path & file_path , void * callbackDataIn , bool(*recoverKVcallback)(void*callbackData,CDataStream ssKey,CDataStream ssValue) , std :: string & newFilename)",68, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::VerifyEnvironment( const fs :: path & file_path , std :: string & errorStr)",23, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::VerifyDatabaseFile( const fs :: path & file_path , std :: string & warningStr , std :: string & errorStr , BerkeleyEnvironment :: recoverFunc_type recoverFunc)",27, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Salvage( const std :: string & strFile , bool fAggressive , std :: vector<BerkeleyEnvironment::KeyValPair> & vResult)",59, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::CheckpointLSN( const std :: string & strFile)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::BerkeleyBatch( BerkeleyDatabase & database , const char * pszMode , bool fFlushOnCloseIn)",78, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::Flush()",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::IncrementUpdateCounter()",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::Close()",18, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::CloseDb( const std :: string & strFile)",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::ReloadDbEnv()",25, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::Rewrite( BerkeleyDatabase & database , const char * pszSkip)",87, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Flush( bool fShutdown)",40, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::PeriodicFlush( BerkeleyDatabase & database)",42, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::Rewrite( const char * pszSkip)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::Backup( const std :: string & strDest)",40, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::Flush( bool shutdown)",18, 2, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::ReloadDbEnv()",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"EXCLUSIVE_LOCKS_REQUIRED( wallet -> cs_wallet)",41, 2, 0, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"feebumper::TransactionCanBeBumped( const CWallet * wallet , const uint256 & txid)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"feebumper::CreateTransaction( const CWallet * wallet , const uint256 & txid , const CCoinControl & coin_control , CAmount total_fee , std :: vector<std::string> & errors , CAmount & old_fee , CAmount & new_fee , CMutableTransaction & mtx)",138, 2, 0, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"feebumper::SignTransaction( CWallet * wallet , CMutableTransaction & mtx)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"feebumper::CommitTransaction( CWallet * wallet , const uint256 & txid , CMutableTransaction && mtx , std :: vector<std::string> & errors , uint256 & bumped_txid)",50, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::BytesToKeySHA512AES( const std :: vector<unsigned char> & chSalt , const SecureString & strKeyData , int count , unsigned char * key , unsigned char * iv) const",25, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::SetKeyFromPassphrase( const SecureString & strKeyData , const std :: vector<unsigned char> & chSalt , const unsigned int nRounds , const unsigned int nDerivationMethod)",19, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::SetKey( const CKeyingMaterial & chNewKey , const std :: vector<unsigned char> & chNewIV)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::Encrypt( const CKeyingMaterial & vchPlaintext , std :: vector<unsigned char> & vchCiphertext) const",17, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::Decrypt( const std :: vector<unsigned char> & vchCiphertext , CKeyingMaterial & vchPlaintext) const",17, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"EncryptSecret( const CKeyingMaterial & vMasterKey , const CKeyingMaterial & vchPlaintext , const uint256 & nIV , std :: vector<unsigned char> & vchCiphertext)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"DecryptSecret( const CKeyingMaterial & vMasterKey , const std :: vector<unsigned char> & vchCiphertext , const uint256 & nIV , CKeyingMaterial & vchPlaintext)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"DecryptKey( const CKeyingMaterial & vMasterKey , const std :: vector<unsigned char> & vchCryptedSecret , const CPubKey & vchPubKey , CKey & key)",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::SetCrypted()",10, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::IsLocked() const",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::Lock()",13, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::Unlock( const CKeyingMaterial & vMasterKeyIn)",37, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::AddKeyPubKey( const CKey & key , const CPubKey & pubkey)",22, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::AddCryptedKey( const CPubKey & vchPubKey , const std :: vector<unsigned char> & vchCryptedSecret)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::HaveKey( const CKeyID & address) const",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::GetKey( const CKeyID & address , CKey & keyOut) const",16, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::GetPubKey( const CKeyID & address , CPubKey & vchPubKeyOut) const",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::GetKeys() const",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::EncryptKeys( CKeyingMaterial & vMasterKeyIn)",21, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"DecodeDumpTime( const std :: string & str)",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"EncodeDumpString( const std :: string & str)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"DecodeDumpString( const std :: string & str)",13, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"GetWalletAddressesForKey( CWallet * const pwallet , const CKeyID & keyid , std :: string & strAddr , std :: string & strLabel)",20, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"RescanWallet( CWallet & wallet , const WalletRescanReserver & reserver , int64_t time_begin = TIMESTAMP_MIN , bool update = true)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importprivkey( const JSONRPCRequest & request)",98, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"abortrescan( const JSONRPCRequest & request)",26, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",25, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importaddress( const JSONRPCRequest & request)",81, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importprunedfunds( const JSONRPCRequest & request)",65, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"removeprunedfunds( const JSONRPCRequest & request)",40, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importpubkey( const JSONRPCRequest & request)",72, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importwallet( const JSONRPCRequest & request)",131, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"dumpprivkey( const JSONRPCRequest & request)",45, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"dumpwallet( const JSONRPCRequest & request)",132, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",240, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"GetImportTimestamp( const UniValue & data , int64_t now)",13, 2, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importmulti( const JSONRPCRequest & mainRequest)",171, 2, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"operator ( )( const OutputGroup & a , const OutputGroup & b) const",4, 6, 4, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"SelectCoinsBnB( std :: vector<OutputGroup> & utxo_pool , const CAmount & target_value , const CAmount & cost_of_change , std :: set<CInputCoin> & out_set , CAmount & value_ret , CAmount not_input_fees)",104, 2, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"ApproximateBestSubset( const std :: vector<OutputGroup> & groups , const CAmount & nTotalLower , const CAmount & nTargetValue , std :: vector<char> & vfBest , CAmount & nBest , int iterations = 1000)",45, 2, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"KnapsackSolver( const CAmount & nTargetValue , std :: vector<OutputGroup> & groups , std :: set<CInputCoin> & setCoinsRet , CAmount & nValueRet)",77, 2, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"OutputGroup::Insert( const CInputCoin & output , int depth , bool from_me , size_t ancestors , size_t descendants)",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"OutputGroup::Discard( const CInputCoin & output)",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"OutputGroup::EligibleForSpending( const CoinEligibilityFilter & eligibility_filter) const",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteName( const std :: string & strAddress , const std :: string & strName)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::EraseName( const std :: string & strAddress)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WritePurpose( const std :: string & strAddress , const std :: string & strPurpose)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ErasePurpose( const std :: string & strAddress)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteTx( const CWalletTx & wtx)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::EraseTx( uint256 hash)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteKey( const CPubKey & vchPubKey , const CPrivKey & vchPrivKey , const CKeyMetadata & keyMeta)",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteCryptedKey( const CPubKey & vchPubKey , const std :: vector<unsigned char> & vchCryptedSecret , const CKeyMetadata & keyMeta)",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteMasterKey( unsigned int nID , const CMasterKey & kMasterKey)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteCScript( const uint160 & hash , const CScript & redeemScript)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteWatchOnly( const CScript & dest , const CKeyMetadata & keyMeta)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::EraseWatchOnly( const CScript & dest)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteBestBlock( const CBlockLocator & locator)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ReadBestBlock( CBlockLocator & locator)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteOrderPosNext( int64_t nOrderPosNext)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ReadPool( int64_t nPool , CKeyPool & keypool)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WritePool( int64_t nPool , const CKeyPool & keypool)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ErasePool( int64_t nPool)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteMinVersion( int nVersion)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"CWalletScanState::CWalletScanState()",6, 6, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",254, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::IsKeyType( const std :: string & strType)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::LoadWallet( CWallet * pwallet)",101, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::FindWalletTx( std :: vector<uint256> & vTxHash , std :: vector<CWalletTx> & vWtx)",58, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ZapSelectTx( std :: vector<uint256> & vTxHashIn , std :: vector<uint256> & vTxHashOut)",37, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ZapWalletTx( std :: vector<CWalletTx> & vWtx)",16, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"MaybeCompactWalletDB()",29, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::Recover( const fs :: path & wallet_path , void * callbackDataIn , bool(*recoverKVcallback)(void*callbackData,CDataStream ssKey,CDataStream ssValue) , std :: string & out_backup_filename)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::Recover( const fs :: path & wallet_path , std :: string & out_backup_filename)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::RecoverKeysOnlyFilter( void * callbackData , CDataStream ssKey , CDataStream ssValue)",22, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::VerifyEnvironment( const fs :: path & wallet_path , std :: string & errorStr)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::VerifyDatabaseFile( const fs :: path & wallet_path , std :: string & warningStr , std :: string & errorStr)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteDestData( const std :: string & address , const std :: string & key , const std :: string & value)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::EraseDestData( const std :: string & address , const std :: string & key)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteHDChain( const CHDChain & chain)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteWalletFlags( const uint64_t flags)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::TxnBegin()",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::TxnCommit()",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::TxnAbort()",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ReadVersion( int & nVersion)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteVersion( int nVersion)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetRequiredFee( const CWallet & wallet , unsigned int nTxBytes)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetMinimumFee( const CWallet & wallet , unsigned int nTxBytes , const CCoinControl & coin_control , const CTxMemPool & pool , const CBlockPolicyEstimator & estimator , FeeCalculation * feeCalc)",10, 2, 0, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetRequiredFeeRate( const CWallet & wallet)",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetMinimumFeeRate( const CWallet & wallet , const CCoinControl & coin_control , const CTxMemPool & pool , const CBlockPolicyEstimator & estimator , FeeCalculation * feeCalc)",54, 2, 0, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetDiscardRate( const CWallet & wallet , const CBlockPolicyEstimator & estimator)",10, 2, 0, 0
repos/cpp/bitcoin/src/wallet/coincontrol.cpp,"CCoinControl::SetNull()",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"GetWalletDir()",21, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"IsBerkeleyBtree( const fs :: path & path)",20, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"ListWalletDir()",31, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"WalletLocation::WalletLocation( const std :: string & name)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"WalletLocation::Exists() const",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_test_fixture.cpp,"WalletTestingSetup::WalletTestingSetup( const std :: string & chainName)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_test_fixture.cpp,"WalletTestingSetup::~WalletTestingSetup()",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_default)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_custom)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_does_not_exist)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_is_not_directory)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_is_not_relative)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_no_trailing)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_no_trailing2)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestPassphraseSingle( const std :: vector<unsigned char> & vchSalt , const SecureString & passphrase , uint32_t rounds , const std :: vector<unsigned char> & correctKey = std :: vector<unsigned char>() , const std :: vector<unsigned char> & correctIV = std :: vector<unsigned char>())",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestPassphrase( const std :: vector<unsigned char> & vchSalt , const SecureString & passphrase , uint32_t rounds , const std :: vector<unsigned char> & correctKey = std :: vector<unsigned char>() , const std :: vector<unsigned char> & correctIV = std :: vector<unsigned char>())",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestDecrypt( const CCrypter & crypt , const std :: vector<unsigned char> & vchCiphertext , \
 const std :: vector<unsigned char> & vchPlaintext = std :: vector<unsigned char>())",8, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestEncryptSingle( const CCrypter & crypt , const CKeyingMaterial & vchPlaintext , const std :: vector<unsigned char> & vchCiphertextCorrect = std :: vector<unsigned char>())",12, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestEncrypt( const CCrypter & crypt , const std :: vector<unsigned char> & vchPlaintextIn , \
 const std :: vector<unsigned char> & vchCiphertextCorrect = std :: vector<unsigned char>())",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( passphrase)",15, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( encrypt)",14, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( decrypt)",20, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"add_coin( const CAmount & nValue , int nInput , std :: vector<CInputCoin> & set)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"add_coin( const CAmount & nValue , int nInput , CoinSet & set)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"add_coin( const CAmount & nValue , int nAge = 6 * 24 , bool fIsFromMe = false , int nInput = 0)",24, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"empty_wallet( void)",6, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"equal_sets( CoinSet a , CoinSet b)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"make_hard_case( int utxos , std :: vector<CInputCoin> & utxo_pool)",11, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"GroupCoins( const std :: vector<CInputCoin> & coins)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"GroupCoins( const std :: vector<COutput> & coins)",7, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"BOOST_AUTO_TEST_CASE( bnb_search_test)",144, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"BOOST_AUTO_TEST_CASE( knapsack_solver_test)",278, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"BOOST_AUTO_TEST_CASE( ApproximateBestSubset)",21, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"BOOST_AUTO_TEST_CASE( SelectCoins_test)",35, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"AddKey( CWallet & wallet , const CKey & key)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( rescan , TestChain100Setup)",84, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( importwallet_rescan , TestChain100Setup)",60, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( coin_mark_dirty_immature_credit , TestChain100Setup)",20, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"AddTx( CWallet & wallet , uint32_t lockTime , int64_t mockTime , int64_t blockTime)",27, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_AUTO_TEST_CASE( ComputeTimeSmart)",25, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_AUTO_TEST_CASE( LoadReceiveRequests)",13, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"ListCoinsTestingSetup::ListCoinsTestingSetup()",15, 6, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"ListCoinsTestingSetup::~ListCoinsTestingSetup()",4, 6, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"ListCoinsTestingSetup::AddTx( CRecipient recipient)",23, 6, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( ListCoins , ListCoinsTestingSetup)",60, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( wallet_disableprivkeys , TestChain100Setup)",9, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"CalculateNestedKeyhashInputSize( bool use_max_sig)",34, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( dummy_input_size_test , TestChain100Setup)",5, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/psbt_wallet_tests.cpp,"BOOST_AUTO_TEST_CASE( psbt_updater_test)",53, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/psbt_wallet_tests.cpp,"BOOST_AUTO_TEST_CASE( parse_hd_keypath)",73, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_test_fixture.cpp,"InitWalletDirTestingSetup::InitWalletDirTestingSetup( const std :: string & chainName)",26, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_test_fixture.cpp,"InitWalletDirTestingSetup::~InitWalletDirTestingSetup()",4, 2, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_test_fixture.cpp,"InitWalletDirTestingSetup::SetWalletDir( const fs :: path & walletdir_path)",4, 1, 0, 0
repos/cpp/bitcoin/src/support/cleanse.cpp,"memory_cleanse( void * ptr , size_t len)",13, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"align_up( size_t x , size_t align)",4, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::Arena( void * base_in , size_t size_in , size_t alignment_in)",8, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::~Arena()",3, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::alloc( size_t size)",34, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::free( void * ptr)",37, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::stats() const",10, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"printchunk( char * base , size_t sz , bool used)",6, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::walk() const",9, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Win32LockedPageAllocator::Win32LockedPageAllocator()",7, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Win32LockedPageAllocator::AllocateLocked( size_t len , bool * lockingSuccess)",13, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Win32LockedPageAllocator::FreeLocked( void * addr , size_t len)",6, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Win32LockedPageAllocator::GetLimit()",5, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"PosixLockedPageAllocator::PosixLockedPageAllocator()",9, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"PosixLockedPageAllocator::AllocateLocked( size_t len , bool * lockingSuccess)",10, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"PosixLockedPageAllocator::FreeLocked( void * addr , size_t len)",7, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"PosixLockedPageAllocator::GetLimit()",12, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::LockedPool( std :: unique_ptr<LockedPageAllocator> allocator_in , LockingFailed_Callback lf_cb_in)",4, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::~LockedPool()",3, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::alloc( size_t size)",21, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::free( void * ptr)",13, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::stats() const",14, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::new_arena( size_t size , size_t align)",28, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::LockedPageArena::LockedPageArena( LockedPageAllocator * allocator_in , void * base_in , size_t size_in , size_t align_in)",4, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::LockedPageArena::~LockedPageArena()",4, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPoolManager::LockedPoolManager( std :: unique_ptr<LockedPageAllocator> allocator_in)",4, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPoolManager::LockingFailed()",5, 2, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPoolManager::CreateInstance()",15, 2, 0, 0
repos/cpp/bitcoin/src/bench/mempool_eviction.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pool . cs)",11, 2, 0, 0
repos/cpp/bitcoin/src/bench/mempool_eviction.cpp,"MempoolEviction( benchmark :: State & state)",106, 2, 0, 0
repos/cpp/bitcoin/src/bench/block_assemble.cpp,"PrepareBlock( const CScript & coinbase_scriptPubKey)",12, 2, 0, 0
repos/cpp/bitcoin/src/bench/block_assemble.cpp,"MineBlock( const CScript & coinbase_scriptPubKey)",14, 2, 0, 0
repos/cpp/bitcoin/src/bench/block_assemble.cpp,"AssembleBlock( benchmark :: State & state)",65, 2, 0, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"nontrivial_t::nontrivial_t()",1, 29, 4, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"nontrivial_t::SerializationOp( Stream & s , Operation ser_action)",1, 81, 4, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"PrevectorDestructor( benchmark :: State & state)",11, 2, 0, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"PrevectorClear( benchmark :: State & state)",14, 2, 0, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"PrevectorResize( benchmark :: State & state)",13, 2, 0, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"PrevectorDeserialize( benchmark :: State & state)",20, 2, 0, 0
repos/cpp/bitcoin/src/bench/rollingbloom.cpp,"RollingBloom( benchmark :: State & state)",20, 2, 0, 0
repos/cpp/bitcoin/src/bench/checkblock.cpp,"DeserializeBlockTest( benchmark :: State & state)",15, 2, 0, 0
repos/cpp/bitcoin/src/bench/checkblock.cpp,"DeserializeAndCheckBlockTest( benchmark :: State & state)",21, 2, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"RIPEMD160( benchmark :: State & state)",7, 2, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA1( benchmark :: State & state)",7, 2, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA256( benchmark :: State & state)",7, 2, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA256_32b( benchmark :: State & state)",9, 2, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA256D64_1024( benchmark :: State & state)",7, 2, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA512( benchmark :: State & state)",7, 2, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SipHash_32b( benchmark :: State & state)",8, 2, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"FastRandom_32bit( benchmark :: State & state)",7, 2, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"FastRandom_1bit( benchmark :: State & state)",7, 2, 0, 0
repos/cpp/bitcoin/src/bench/gcs_filter.cpp,"ConstructGCSFilter( benchmark :: State & state)",17, 2, 0, 0
repos/cpp/bitcoin/src/bench/gcs_filter.cpp,"MatchGCSFilter( benchmark :: State & state)",15, 2, 0, 0
repos/cpp/bitcoin/src/bench/bech32.cpp,"Bech32Encode( benchmark :: State & state)",10, 2, 0, 0
repos/cpp/bitcoin/src/bench/bech32.cpp,"Bech32Decode( benchmark :: State & state)",7, 2, 0, 0
repos/cpp/bitcoin/src/bench/lockedpool.cpp,"BenchLockedPool( benchmark :: State & state)",29, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::ConsolePrinter::header()",4, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::ConsolePrinter::result( const State & state)",25, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::ConsolePrinter::footer()",1, 44, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::PlotlyPrinter::PlotlyPrinter( std :: string plotly_url , int64_t width , int64_t height)",4, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::PlotlyPrinter::header()",8, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::PlotlyPrinter::result( const State & state)",16, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::PlotlyPrinter::footer()",6, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::BenchRunner::benchmarks()",5, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::BenchRunner::BenchRunner( std :: string name , benchmark :: BenchFunction func , uint64_t num_iters_for_one_second)",4, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::BenchRunner::RunAll( Printer & printer , uint64_t num_evals , double scaling , const std :: string & filter , bool is_list_only)",32, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::State::UpdateTimer( const benchmark :: time_point current_time)",14, 2, 0, 0
repos/cpp/bitcoin/src/bench/duplicate_inputs.cpp,"DuplicateInputs( benchmark :: State & state)",73, 2, 0, 0
repos/cpp/bitcoin/src/bench/verify_script.cpp,"BuildCreditingTransaction( const CScript & scriptPubKey)",15, 2, 0, 0
repos/cpp/bitcoin/src/bench/verify_script.cpp,"BuildSpendingTransaction( const CScript & scriptSig , const CMutableTransaction & txCredit)",16, 2, 0, 0
repos/cpp/bitcoin/src/bench/verify_script.cpp,"VerifyScriptBench( benchmark :: State & state)",54, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench_bitcoin.cpp,"SetupBenchArgs()",16, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench_bitcoin.cpp,"SetDataDir()",7, 2, 0, 0
repos/cpp/bitcoin/src/bench/bench_bitcoin.cpp,"main( int argc , char ** argv)",51, 2, 0, 0
repos/cpp/bitcoin/src/bench/checkqueue.cpp,"CCheckQueueSpeedPrevectorJob( benchmark :: State & state)",38, 2, 0, 0
repos/cpp/bitcoin/src/bench/merkle_root.cpp,"MerkleRoot( benchmark :: State & state)",14, 2, 0, 0
repos/cpp/bitcoin/src/bench/examples.cpp,"Sleep100ms( benchmark :: State & state)",6, 2, 0, 0
repos/cpp/bitcoin/src/bench/examples.cpp,"Trig( benchmark :: State & state)",8, 2, 0, 0
repos/cpp/bitcoin/src/bench/base58.cpp,"Base58Encode( benchmark :: State & state)",13, 2, 0, 0
repos/cpp/bitcoin/src/bench/base58.cpp,"Base58CheckEncode( benchmark :: State & state)",15, 2, 0, 0
repos/cpp/bitcoin/src/bench/base58.cpp,"Base58Decode( benchmark :: State & state)",8, 2, 0, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"addCoin( const CAmount & nValue , const CWallet & wallet , std :: vector<std::unique_ptr<CWalletTx>> & wtxs)",9, 2, 0, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"CoinSelection( benchmark :: State & state)",32, 2, 0, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"add_coin( const CAmount & nValue , int nInput , std :: vector<OutputGroup> & set)",9, 2, 0, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"make_hard_case( int utxos , std :: vector<OutputGroup> & utxo_pool)",11, 2, 0, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"BnBExhaustion( benchmark :: State & state)",18, 2, 0, 0
repos/cpp/bitcoin/src/bench/ccoins_caching.cpp,"SetupDummyInputs( CBasicKeyStore & keystoreRet , CCoinsViewCache & coinsRet)",29, 2, 0, 0
repos/cpp/bitcoin/src/bench/ccoins_caching.cpp,"CCoinsCaching( benchmark :: State & state)",31, 2, 0, 0
repos/cpp/bitcoin/src/util/moneystr.cpp,"FormatMoney( const CAmount & n)",20, 2, 0, 0
repos/cpp/bitcoin/src/util/moneystr.cpp,"ParseMoney( const std :: string & str , CAmount & nRet)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/moneystr.cpp,"ParseMoney( const char * pszIn , CAmount & nRet)",39, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetTime()",9, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"SetMockTime( int64_t nMockTimeIn)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetMockTime()",4, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetTimeMillis()",7, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetTimeMicros()",7, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetSystemTimeInSeconds()",4, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"MilliSleep( int64_t n)",17, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"FormatISO8601DateTime( int64_t nTime)",10, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"FormatISO8601Date( int64_t nTime)",10, 2, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"FormatISO8601Time( int64_t nTime)",10, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"SanitizeString( const std :: string & str , int rule)",10, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"HexDigit( char c)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"IsHex( const std :: string & str)",9, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"IsHexNumber( const std :: string & str)",12, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseHex( const char * psz)",20, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseHex( const std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"SplitHostPort( std :: string in , int & portOut , std :: string & hostOut)",18, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"EncodeBase64( const unsigned char * pch , size_t len)",10, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"EncodeBase64( const std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"DecodeBase64( const char * p , bool * pfInvalid)",46, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"DecodeBase64( const std :: string & str)",5, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"EncodeBase32( const unsigned char * pch , size_t len)",10, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"EncodeBase32( const std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"DecodeBase32( const char * p , bool * pfInvalid)",46, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"DecodeBase32( const std :: string & str)",5, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParsePrechecks( const std :: string & str)",10, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseInt32( const std :: string & str , int32_t * out)",15, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseInt64( const std :: string & str , int64_t * out)",14, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseUInt32( const std :: string & str , uint32_t * out)",16, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseUInt64( const std :: string & str , uint64_t * out)",15, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseDouble( const std :: string & str , double * out)",13, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"FormatParagraph( const std :: string & in , size_t width , size_t indent)",40, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"i64tostr( int64_t n)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"itostr( int n)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"atoi64( const char * psz)",8, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"atoi64( const std :: string & str)",8, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"atoi( const std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ProcessMantissaDigit( char ch , int64_t & mantissa , int & mantissa_tzeros)",15, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseFixedPoint( const std :: string & val , int decimals , int64_t * amount_out)",91, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseHDKeypath( const std :: string & keypath_str , std :: vector<uint32_t> & keypath)",40, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"Downcase( std :: string & str)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"Capitalize( std :: string str)",6, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"locking_callback( int mode , int i , const char * file , int line)",8, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"CInit::CInit()",21, 6, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"CInit::~CInit()",9, 6, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"LockDirectory( const fs :: path & directory , const std :: string lockfile_name , bool probe_only)",23, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ReleaseDirectoryLocks()",5, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"DirIsWritable( const fs :: path & directory)",12, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"InterpretBool( const std :: string & strValue)",6, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::EXCLUSIVE_LOCKS_REQUIRED( am . cs_args)",4, 6, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::NetworkArg( const ArgsManager & am , const std :: string & arg)",5, 6, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::AddArgs( std :: vector<std::string> & res , const MapArgs & map_args , const std :: string & arg)",7, 6, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::GetArgHelper( const MapArgs & map_args , const std :: string & arg , bool getLast = false)",14, 6, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::GetArg( const ArgsManager & am , const std :: string & arg)",32, 6, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::EXCLUSIVE_LOCKS_REQUIRED( am . cs_args)",12, 6, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"InterpretNegatedOption( std :: string & key , std :: string & val)",23, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ArgsManager()",15, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetUnsuitableSectionOnlyArgs() const",32, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetUnrecognizedSections() const",17, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::SelectConfigNetwork( const std :: string & network)",5, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ParseParameters( int argc , const char * const argv [ ] , std :: string & error)",54, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::IsArgKnown( const std :: string & key) const",16, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetArgs( const std :: string & strArg) const",18, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::IsArgSet( const std :: string & strArg) const",5, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::IsArgNegated( const std :: string & strArg) const",17, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetArg( const std :: string & strArg , const std :: string & strDefault) const",7, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetArg( const std :: string & strArg , int64_t nDefault) const",7, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetBoolArg( const std :: string & strArg , bool fDefault) const",7, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::SoftSetArg( const std :: string & strArg , const std :: string & strValue)",7, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::SoftSetBoolArg( const std :: string & strArg , bool fValue)",7, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ForceSetArg( const std :: string & strArg , const std :: string & strValue)",5, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::AddArg( const std :: string & name , const std :: string & help , const bool debug_only , const OptionsCategory & cat)",13, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::AddHiddenArgs( const std :: vector<std::string> & names)",6, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetHelpMessage() const",68, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"HelpRequested( const ArgsManager & args)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"HelpMessageGroup( const std :: string & message)",3, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"HelpMessageOpt( const std :: string & option , const std :: string & message)",6, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"FormatException( const std :: exception * pex , const char * pszThread)",15, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"PrintExceptionContinue( const std :: exception * pex , const char * pszThread)",6, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetDefaultDataDir()",25, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetBlocksDir( bool fNetSpecific)",28, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetDataDir( bool fNetSpecific)",31, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ClearDatadirCache()",9, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetConfigFile( const std :: string & confPath)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"TrimString( const std :: string & str , const std :: string & pattern)",9, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetConfigOptions( std :: istream & stream , std :: string & error , std :: vector<std::pair<std::string,std::string>> & options , std :: set<std::string> & sections)",44, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ReadConfigStream( std :: istream & stream , std :: string & error , bool ignore_invalid_keys)",30, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ReadConfigFiles( std :: string & error , bool ignore_invalid_keys)",79, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetChainName() const",14, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetPidFile()",4, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"CreatePidFile( const fs :: path & path , pid_t pid)",9, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"RenameOver( fs :: path src , fs :: path dest)",10, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"TryCreateDirectories( const fs :: path & p)",13, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"FileCommit( FILE * file)",32, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"TruncateFile( FILE * file , unsigned int length)",7, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"RaiseFileDescriptorLimit( int nMinFD)",18, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"AllocateFileRange( FILE * file , unsigned int offset , unsigned int length)",43, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetSpecialFolderPath( int nFolder , bool fCreate)",12, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"runCommand( const std :: string & strCommand)",11, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"RenameThread( const char * name)",15, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"SetupEnvironment()",36, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"SetupNetworking()",11, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetNumCores()",4, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"CopyrightHolders( const std :: string & strPrefix)",10, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetStartupTime()",4, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"AbsPathForConfigVal( const fs :: path & path , bool net_specific)",4, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ScheduleBatchPriority()",13, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"util::WinCmdLineArgs::WinCmdLineArgs()",12, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"util::WinCmdLineArgs::~WinCmdLineArgs()",4, 2, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"util::WinCmdLineArgs::get()",4, 2, 0, 0
repos/cpp/bitcoin/src/util/bytevectorhash.cpp,"ByteVectorHash::ByteVectorHash()",5, 2, 0, 0
repos/cpp/bitcoin/src/util/bytevectorhash.cpp,"ByteVectorHash::operator ( )( const std :: vector<unsigned char> & input) const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::HelpMessageDialog( interfaces :: Node & node , QWidget * parent , bool about)",85, 2, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::~HelpMessageDialog()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::printToConsole()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::showOrPrint()",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::on_okButton_accepted()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"ShutdownWindow::ShutdownWindow( QWidget * parent , Qt :: WindowFlags f)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"ShutdownWindow::showShutdownWindow( BitcoinGUI * window)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"ShutdownWindow::closeEvent( QCloseEvent * event)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/networkstyle.cpp,"NetworkStyle::NetworkStyle( const QString & _appName , const int iconColorHueShift , const int iconColorSaturationReduction , const char * _titleAddText)",52, 2, 0, 0
repos/cpp/bitcoin/src/qt/networkstyle.cpp,"NetworkStyle::instantiate( const QString & networkId)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::TransactionView( const PlatformStyle * platformStyle , QWidget * parent)",173, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::setModel( WalletModel * _model)",56, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::chooseDate( int idx)",46, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::chooseType( int idx)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::chooseWatchonly( int idx)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::changedSearch()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::changedAmount()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::exportClicked()",37, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::contextualMenu( const QPoint & point)",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::abandonTx()",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::bumpFee()",22, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyAddress()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyLabel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyAmount()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyTxID()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyTxHex()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyTxPlainText()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::editLabel()",45, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::showDetails()",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::openThirdPartyTxUrl( QString url)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::createDateRangeWidget()",35, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::dateRangeChanged()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::focusTransaction( const QModelIndex & idx)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::focusTransaction( const uint256 & txid)",25, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::resizeEvent( QResizeEvent * event)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::eventFilter( QObject * obj , QEvent * event)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::updateWatchOnlyColumn( bool fHaveWatchOnly)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"SSLVerifyError::SSLVerifyError( std :: string err)",1, 75, 4, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::parse( const QByteArray & data)",21, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::SerializeToString( std :: string * output) const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::IsInitialized() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::getMerchant( X509_STORE * certStore , QString & merchant) const",141, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::getPayTo() const",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::SignVerifyMessageDialog( const PlatformStyle * _platformStyle , QWidget * parent)",32, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::~SignVerifyMessageDialog()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::setModel( WalletModel * _model)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::setAddress_SM( const QString & address)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::setAddress_VM( const QString & address)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::showTab_SM( bool fShow)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::showTab_VM( bool fShow)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_addressBookButton_SM_clicked()",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_pasteButton_SM_clicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_signMessageButton_SM_clicked()",55, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_clearButton_SM_clicked()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_addressBookButton_VM_clicked()",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()",48, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_clearButton_VM_clicked()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::eventFilter( QObject * object , QEvent * event)",24, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::TransactionFilterProxy( QObject * parent)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::filterAcceptsRow( int sourceRow , const QModelIndex & sourceParent) const",37, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setDateRange( const QDateTime & from , const QDateTime & to)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setSearchString( const QString & search_string)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setTypeFilter( quint32 modes)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setMinAmount( const CAmount & minimum)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setWatchOnlyFilter( WatchOnlyFilter filter)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setLimit( int limit)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setShowInactive( bool _showInactive)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::rowCount( const QModelIndex & parent) const",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"GetLangTerritory()",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"initTranslations( QTranslator & qtTranslatorBase , QTranslator & qtTranslator , QTranslator & translatorBase , QTranslator & translator)",36, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"DebugMessageHandler( QtMsgType type , const QMessageLogContext & context , const QString & msg)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::getReturnValue() const",1, 55, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinCore::BitcoinCore( interfaces :: Node & node)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinCore::handleRunawayException( const std :: exception * e)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinCore::initialize()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinCore::shutdown()",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::BitcoinApplication( interfaces :: Node & node , int & argc , char ** argv)",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::setupPlatformStyle()",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::~BitcoinApplication()",21, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::createPaymentServer()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::createOptionsModel( bool resetSettings)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::createWindow( const NetworkStyle * networkStyle)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::createSplashScreen( const NetworkStyle * networkStyle)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::startThread()",20, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::parameterSetup()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::requestInitialize()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::requestShutdown()",28, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::addWallet( WalletModel * walletModel)",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::removeWallet()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::initializeResult( bool success)",59, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::shutdownResult()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::handleRunawayException( const QString & message)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::getMainWinId() const",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"SetupUIArgs()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"main( int argc , char * argv [ ])",180, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::QRImageWidget( QWidget * parent)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::exportImage()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::mousePressEvent( QMouseEvent * event)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::saveImage()",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::copyImage()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::contextMenuEvent( QContextMenuEvent * event)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::ReceiveRequestDialog( QWidget * parent)",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::~ReceiveRequestDialog()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::setModel( WalletModel * _model)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::setInfo( const SendCoinsRecipient & _info)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::update()",78, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::on_btnCopyURI_clicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::on_btnCopyAddress_clicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::BitcoinGUI( interfaces :: Node & node , const PlatformStyle * _platformStyle , const NetworkStyle * networkStyle , QWidget * parent)",144, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::~BitcoinGUI()",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createActions()",133, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createMenuBar()",44, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createToolBars()",35, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setClientModel( ClientModel * _clientModel)",66, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::addWallet( WalletModel * walletModel)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::removeWallet( WalletModel * walletModel)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setCurrentWallet( const QString & name)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setCurrentWalletBySelectorIndex( int index)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::removeAllWallets()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setWalletActionsEnabled( bool enabled)",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createTrayIcon( const NetworkStyle * networkStyle)",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createTrayIconMenu()",41, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::trayIconActivated( QSystemTrayIcon :: ActivationReason reason)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::macosDockIconActivated()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::optionsClicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::aboutClicked()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showDebugWindow()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showDebugWindowActivateConsole()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showHelpMessageClicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::openClicked()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoOverviewPage()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoHistoryPage()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoReceiveCoinsPage()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoSendCoinsPage( QString addr)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoSignMessageTab( QString addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoVerifyMessageTab( QString addr)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::updateNetworkState()",28, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setNumConnections( int count)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setNetworkActive( bool networkActive)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::updateHeadersSyncProgressLabel()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::openOptionsDialogWithTab( OptionsDialog :: Tab tab)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setNumBlocks( int count , const QDateTime & blockDate , double nVerificationProgress , bool header)",114, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::message( const QString & title , const QString & message , unsigned int style , bool * ret)",59, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::changeEvent( QEvent * e)",23, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::closeEvent( QCloseEvent * event)",22, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showEvent( QShowEvent * event)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::incomingTransaction( const QString & date , int unit , const CAmount & amount , const QString & type , const QString & address , const QString & label , const QString & walletName)",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::dragEnterEvent( QDragEnterEvent * event)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::dropEvent( QDropEvent * event)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::eventFilter( QObject * object , QEvent * event)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::handlePaymentRequest( const SendCoinsRecipient & recipient)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setHDStatus( bool privkeyDisabled , int hdEnabled)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setEncryptionStatus( int status)",28, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::updateWalletStatus()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::updateProxyIcon()",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showNormalIfMinimized( bool fToggleHidden)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::toggleHidden()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::detectShutdown()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showProgress( const QString & title , int nProgress)",22, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setTrayIconVisible( bool fHideTrayIcon)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showModalOverlay()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"ThreadSafeMessageBox( BitcoinGUI * gui , const std :: string & message , const std :: string & caption , unsigned int style)",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::subscribeToCoreSignals()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::unsubscribeFromCoreSignals()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::UnitDisplayStatusBarControl( const PlatformStyle * platformStyle)",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::mousePressEvent( QMouseEvent * event)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::createContextMenu()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::setOptionsModel( OptionsModel * _optionsModel)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::updateDisplayUnit( int newUnits)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::onDisplayUnitsClicked( const QPoint & point)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::onMenuSelection( QAction * action)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"TxViewDelegate::TxViewDelegate( const PlatformStyle * _platformStyle , QObject * parent = nullptr)",6, 6, 4, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"TxViewDelegate::paint( QPainter * painter , const QStyleOptionViewItem & option , const QModelIndex & index) const",64, 6, 4, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"TxViewDelegate::sizeHint( const QStyleOptionViewItem & option , const QModelIndex & index) const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::OverviewPage( const PlatformStyle * platformStyle , QWidget * parent)",30, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::handleTransactionClicked( const QModelIndex & index)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::handleOutOfSyncWarningClicks()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::~OverviewPage()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::setBalance( const interfaces :: WalletBalances & balances)",29, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::updateWatchOnlyLabels( bool showWatchOnly)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::setClientModel( ClientModel * model)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::setWalletModel( WalletModel * model)",34, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::updateDisplayUnit()",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::updateAlerts( const QString & warnings)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::showOutOfSyncWarning( bool fShow)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::QValidatedLineEdit( QWidget * parent)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::setValid( bool _valid)",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::focusInEvent( QFocusEvent * evt)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::focusOutEvent( QFocusEvent * evt)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::markValid()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::clear()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::setEnabled( bool enabled)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::checkValidity()",26, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::setCheckValidator( const QValidator * v)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::isValid()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinaddressvalidator.cpp,"BitcoinAddressEntryValidator::BitcoinAddressEntryValidator( QObject * parent)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinaddressvalidator.cpp,"BitcoinAddressEntryValidator::validate( QString & input , int & pos) const",59, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinaddressvalidator.cpp,"BitcoinAddressCheckValidator::BitcoinAddressCheckValidator( QObject * parent)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinaddressvalidator.cpp,"BitcoinAddressCheckValidator::validate( QString & input , int & pos) const",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::TrafficGraphWidget( QWidget * parent)",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::setClientModel( ClientModel * model)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::getGraphRangeMins() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::paintPath( QPainterPath & path , QQueue<float> & samples)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::paintEvent( QPaintEvent *)",57, 2, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::updateRates()",30, 2, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::setGraphRangeMins( int mins)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::clear()",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookSortFilterProxyModel::AddressBookSortFilterProxyModel( const QString & type , QObject * parent)",8, 6, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookSortFilterProxyModel::filterAcceptsRow( int row , const QModelIndex & parent) const",18, 6, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::AddressBookPage( const PlatformStyle * platformStyle , Mode _mode , Tabs _tab , QWidget * parent)",82, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::~AddressBookPage()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::setModel( AddressTableModel * _model)",27, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::on_copyAddress_clicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::onCopyLabelAction()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::onEditAction()",20, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::on_newAddress_clicked()",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::on_deleteAddress_clicked()",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::selectionChanged()",32, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::done( int retval)",22, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::on_exportButton_clicked()",22, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::contextualMenu( const QPoint & point)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::selectNewAddress( const QModelIndex & parent , int begin , int)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"FreespaceChecker::FreespaceChecker( Intro * _intro)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"FreespaceChecker::check()",44, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::Intro( QWidget * parent)",39, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::~Intro()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::getDataDirectory()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::setDataDirectory( const QString & dataDir)",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::getDefaultDataDirectory()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::pickDataDirectory( interfaces :: Node & node)",52, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::setStatus( int status , const QString & message , quint64 bytesAvailable)",31, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::on_dataDirectory_textChanged( const QString & dataDirStr)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::on_ellipsisButton_clicked()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::on_dataDirDefault_clicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::on_dataDirCustom_clicked()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::startThread()",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::checkPath( const QString & dataDir)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::getPathToCheck()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::OptionsModel( interfaces :: Node & node , QObject * parent , bool resetSettings)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::addOverriddenOption( const std :: string & option)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::Init( bool resetSettings)",120, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"CopySettings( QSettings & dst , const QSettings & src)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"BackupSettings( const fs :: path & filename , const QSettings & src)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::Reset()",24, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::rowCount( const QModelIndex & parent) const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"GetProxySetting( QSettings & settings , const QString & name)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"SetProxySetting( QSettings & settings , const QString & name , const ProxySetting & ip_port)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"GetDefaultProxyAddress()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::data( const QModelIndex & index , int role) const",66, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::setData( const QModelIndex & index , const QVariant & value , int role)",149, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::setDisplayUnit( const QVariant & value)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::getProxySettings( QNetworkProxy & proxy) const",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::setRestartRequired( bool fRequired)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::isRestartRequired() const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::checkAndMigrate()",30, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::WalletModelTransaction( const QList<SendCoinsRecipient> & _recipients)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getRecipients() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getWtx()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getTransactionSize()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getTransactionFee() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::setTransactionFee( const CAmount & newFee)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::reassignAmounts( int nChangePosRet)",34, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getTotalTransactionAmount() const",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::Notificator( const QString & _programName , QSystemTrayIcon * _trayIcon , QWidget * _parent)",29, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::~Notificator()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"FreedesktopImage::FreedesktopImage()",1, 26, 4, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"FreedesktopImage::FreedesktopImage( const QImage & img)",23, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"operator < <( QDBusArgument & a , const FreedesktopImage & i)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"operator > >( const QDBusArgument & a , FreedesktopImage & i)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"FreedesktopImage::metaType()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"FreedesktopImage::toVariant( const QImage & img)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::notifyDBus( Class cls , const QString & title , const QString & text , const QIcon & icon , int millisTimeout)",55, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::notifySystray( Class cls , const QString & title , const QString & text , const QIcon & icon , int millisTimeout)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::notifyMacUserNotificationCenter( Class cls , const QString & title , const QString & text , const QIcon & icon)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::notify( Class cls , const QString & title , const QString & text , const QIcon & icon , int millisTimeout)",26, 2, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::ModalOverlay( QWidget * parent)",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::~ModalOverlay()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::eventFilter( QObject * obj , QEvent * ev)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::event( QEvent * ev)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::setKnownBestHeight( int count , const QDateTime & blockDate)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::tipUpdate( int count , const QDateTime & blockDate , double nVerificationProgress)",66, 2, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::toggleVisibility()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::showHide( bool hide , bool userRequested)",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::closeClicked()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::ClientModel( interfaces :: Node & node , OptionsModel * _optionsModel , QObject * parent)",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::~ClientModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getNumConnections( unsigned int flags) const",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getHeaderTipHeight() const",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getHeaderTipTime() const",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateTimer()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateNumConnections( int numConnections)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateNetworkActive( bool networkActive)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateAlert()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getBlockSource() const",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getStatusBarWarnings() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getOptionsModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getPeerTableModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getBanTableModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::formatFullVersion() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::formatSubVersion() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::isReleaseVersion() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::formatClientStartupTime() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::dataDir() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::blocksDir() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateBanlist()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ShowProgress( ClientModel * clientmodel , const std :: string & title , int nProgress)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"NotifyNumConnectionsChanged( ClientModel * clientmodel , int newNumConnections)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"NotifyNetworkActiveChanged( ClientModel * clientmodel , bool networkActive)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"NotifyAlertChanged( ClientModel * clientmodel)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"BannedListChanged( ClientModel * clientmodel)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"BlockTipChanged( ClientModel * clientmodel , bool initialSync , int height , int64_t blockTime , double verificationProgress , bool fHeader)",27, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::subscribeToCoreSignals()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::unsubscribeFromCoreSignals()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getProxyInfo( std :: string & ip_port) const",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"getConfTargetForIndex( int index)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"getIndexForConfTarget( int target)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::SendCoinsDialog( const PlatformStyle * _platformStyle , QWidget * parent)",75, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setClientModel( ClientModel * _clientModel)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setModel( WalletModel * _model)",65, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::~SendCoinsDialog()",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::on_sendButton_clicked()",176, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::clear()",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::reject()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::accept()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::addEntry()",22, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateTabsAndLabels()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::removeEntry( SendCoinsEntry * entry)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setupTabChain( QWidget * prev)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setAddress( const QString & address)",19, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::pasteEntry( const SendCoinsRecipient & rv)",23, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::handlePaymentRequest( const SendCoinsRecipient & rv)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setBalance( const interfaces :: WalletBalances & balances)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateDisplayUnit()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::processSendCoinsReturn( const WalletModel :: SendCoinsReturn & sendCoinsReturn , const QString & msgArg)",49, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::minimizeFeeSection( bool fMinimize)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::on_buttonChooseFee_clicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::on_buttonMinimizeFee_clicked()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::useAvailableBalance( SendCoinsEntry * entry)",24, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateFeeSectionControls()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateFeeMinimizedLabel()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateCoinControlState( CCoinControl & ctrl)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateSmartFeeLabel()",31, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardQuantity()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardAmount()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardFee()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardAfterFee()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardBytes()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardLowOutput()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardChange()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlFeatureChanged( bool checked)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlButtonClicked()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlChangeChecked( int state)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlChangeEdited( const QString & text)",52, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlUpdateLabels()",40, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendConfirmationDialog::SendConfirmationDialog( const QString & title , const QString & text , int _secDelay , QWidget * parent)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendConfirmationDialog::exec()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendConfirmationDialog::countDown()",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendConfirmationDialog::updateYesButton()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::AmountSpinBox( QWidget * parent)",7, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::validate( QString & text , int & pos) const",9, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::fixup( QString & input) const",19, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::value( bool * valid_out = 0) const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::setValue( const CAmount & value)",5, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::SetAllowEmpty( bool allow)",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::SetMinValue( const CAmount & value)",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::SetMaxValue( const CAmount & value)",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::stepBy( int steps)",8, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::setDisplayUnit( int unit)",12, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::setSingleStep( const CAmount & step)",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::minimumSizeHint() const",32, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::parse( const QString & text , bool * valid_out = 0) const",13, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::event( QEvent * event)",14, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::stepEnabled() const",18, 6, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::BitcoinAmountField( QWidget * parent)",29, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::clear()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setEnabled( bool fEnabled)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::validate()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setValid( bool valid)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::eventFilter( QObject * object , QEvent * event)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setupTabChain( QWidget * prev)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::value( bool * valid_out) const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setValue( const CAmount & value)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::SetAllowEmpty( bool allow)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::SetMinValue( const CAmount & value)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::SetMaxValue( const CAmount & value)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setReadOnly( bool fReadOnly)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::unitChanged( int idx)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setDisplayUnit( int newUnit)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setSingleStep( const CAmount & step)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::QValueComboBox( QWidget * parent)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::value() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::setValue( const QVariant & value)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::setRole( int _role)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::handleSelectionChanged( int idx)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCExecutor::RPCExecutor( interfaces :: Node & node)",1, 67, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerBase::QtRPCTimerBase( std :: function<void()> & _func , int64_t millis)",7, 6, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerBase::~QtRPCTimerBase()",1, 25, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerInterface::~QtRPCTimerInterface()",1, 30, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerInterface::Name()",1, 40, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerInterface::NewTimer( std :: function<void()> & func , int64_t millis)",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::RPCParseCommandLine( interfaces :: Node * node , std :: string & strResult , const std :: string & strCommand , const bool fExecute , std :: string * const pstrFilteredOut , const std :: string * walletID)",238, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCExecutor::request( const QString & command , const QString & walletID)",58, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::RPCConsole( interfaces :: Node & node , const PlatformStyle * _platformStyle , QWidget * parent)",59, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::~RPCConsole()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::eventFilter( QObject * obj , QEvent * event)",44, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setClientModel( ClientModel * model)",134, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::addWallet( WalletModel * const walletModel)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::removeWallet( WalletModel * const walletModel)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"categoryClass( int category)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::fontBigger()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::fontSmaller()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setFontSize( int newSize)",24, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::clear( bool clearHistory)",50, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::keyPressEvent( QKeyEvent * event)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::message( int category , const QString & message , bool html)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::updateNetworkState()",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setNumConnections( int count)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setNetworkActive( bool networkActive)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setNumBlocks( int count , const QDateTime & blockDate , double nVerificationProgress , bool headers)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setMempoolSize( long numberOfTxs , size_t dynUsage)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::on_lineEdit_returnPressed()",58, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::browseHistory( int offset)",20, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::startExecutor()",21, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::on_tabWidget_currentChanged( int index)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::on_openDebugLogfileButton_clicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::scrollToEnd()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::on_sldGraphRange_valueChanged( int value)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setTrafficGraphRange( int mins)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::updateTrafficStats( quint64 totalBytesIn , quint64 totalBytesOut)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::peerSelected( const QItemSelection & selected , const QItemSelection & deselected)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::peerLayoutAboutToChange()",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::peerLayoutChanged()",56, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::updateNodeDetail( const CNodeCombinedStats * stats)",45, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::resizeEvent( QResizeEvent * event)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::showEvent( QShowEvent * event)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::hideEvent( QHideEvent * event)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::showPeersTableContextMenu( const QPoint & point)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::showBanTableContextMenu( const QPoint & point)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::disconnectSelectedNode()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::banSelectedNode( int bantime)",26, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::unbanSelectedNode()",20, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::clearSelectedNode()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::showOrHideBanTableIfRequired()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setTabFocus( enum TabTypes tabType)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"MakeSingleColorImage( QImage & img , const QColor & colorbase)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"ColorizeIcon( const QIcon & ico , const QColor & colorbase)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"ColorizeImage( const QString & filename , const QColor & colorbase)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"ColorizeIcon( const QString & filename , const QColor & colorbase)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::PlatformStyle( const QString & _name , bool _imagesOnButtons , bool _colorizeIcons , bool _useExtraSpacing)",24, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::SingleColorImage( const QString & filename) const",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::SingleColorIcon( const QString & filename) const",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::SingleColorIcon( const QIcon & icon) const",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::TextColorIcon( const QString & filename) const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::TextColorIcon( const QIcon & icon) const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::instantiate( const QString & platformId)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiondesc.cpp,"TransactionDesc::FormatTxStatus( const interfaces :: WalletTx & wtx , const interfaces :: WalletTxStatus & status , bool inMempool , int numBlocks)",22, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiondesc.cpp,"TransactionDesc::toHTML( interfaces :: Node & node , interfaces :: Wallet & wallet , TransactionRecord * rec , int unit)",283, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroltreewidget.cpp,"CoinControlTreeWidget::CoinControlTreeWidget( QWidget * parent)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroltreewidget.cpp,"CoinControlTreeWidget::keyPressEvent( QKeyEvent * event)",21, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::SplashScreen( interfaces :: Node & node , Qt :: WindowFlags f , const NetworkStyle * networkStyle)",103, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::~SplashScreen()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::eventFilter( QObject * obj , QEvent * ev)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::finish()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"InitMessage( SplashScreen * splash , const std :: string & message)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"ShowProgress( SplashScreen * splash , const std :: string & title , int nProgress , bool resume_possible)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::ConnectWallet( std :: unique_ptr<interfaces::Wallet> wallet)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::subscribeToCoreSignals()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::unsubscribeFromCoreSignals()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::showMessage( const QString & message , int alignment , const QColor & color)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::paintEvent( QPaintEvent * event)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::closeEvent( QCloseEvent * event)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::EditAddressDialog( Mode _mode , QWidget * parent)",32, 2, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::~EditAddressDialog()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::setModel( AddressTableModel * _model)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::loadRow( int row)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::saveCurrentRow()",24, 2, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::accept()",41, 2, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::getDuplicateAddressWarning() const",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::getAddress() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::setAddress( const QString & _address)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::AskPassphraseDialog( Mode _mode , QWidget * parent)",57, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::~AskPassphraseDialog()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::setModel( WalletModel * _model)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::accept()",110, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::textChanged()",19, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::event( QEvent * event)",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::toggleShowPassword( bool show)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::eventFilter( QObject * object , QEvent * event)",25, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"SecureClearQLineEdit( QLineEdit * edit)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::secureClearPassFields()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::dateTimeStr( const QDateTime & date)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::dateTimeStr( qint64 nTime)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::fixedPitchFont()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::DummyAddress( const CChainParams & params)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::setupAddressWidget( QValidatedLineEdit * widget , QWidget * parent)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::parseBitcoinURI( const QUrl & uri , SendCoinsRecipient * out)",56, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::parseBitcoinURI( QString uri , SendCoinsRecipient * out)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatBitcoinURI( const SendCoinsRecipient & info)",27, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::isDust( interfaces :: Node & node , const QString & address , const CAmount & amount)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::HtmlEscape( const QString & str , bool fMultiLine)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::HtmlEscape( const std :: string & str , bool fMultiLine)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::copyEntryData( QAbstractItemView * view , int column , int role)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::getEntryData( QAbstractItemView * view , int column)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::getSaveFileName( QWidget * parent , const QString & caption , const QString & dir , const QString & filter , QString * selectedSuffixOut)",45, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::getOpenFileName( QWidget * parent , const QString & caption , const QString & dir , const QString & filter , QString * selectedSuffixOut)",30, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::blockingGUIThreadConnection()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::checkPoint( const QPoint & p , const QWidget * w)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::isObscured( QWidget * w)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::bringToFront( QWidget * w)",20, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::openDebugLogfile()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::openBitcoinConf()",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ToolTipToRichTextFilter::ToolTipToRichTextFilter( int _size_threshold , QObject * parent)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ToolTipToRichTextFilter::eventFilter( QObject * obj , QEvent * evt)",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::connectViewHeadersSignals()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::setViewHeaderResizeMode( int logicalIndex , QHeaderView :: ResizeMode resizeMode)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::resizeColumn( int nColumnIndex , int width)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::getColumnsWidth()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::getAvailableWidthForColumn( int column)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::adjustTableColumnsWidth()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::stretchColumnWidth( int column)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::on_sectionResized( int logicalIndex , int oldSize , int newSize)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::on_geometriesChanged()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer( QTableView * table , int lastColMinimumWidth , int allColsMinimumWidth , QObject * parent)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::StartupShortcutPath()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetStartOnSystemStartup()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::SetStartOnSystemStartup( bool fAutoStart)",53, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetAutostartDir()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetAutostartFilePath()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetStartOnSystemStartup()",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::SetStartOnSystemStartup( bool fAutoStart)",32, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::findStartupItemInList( LSSharedFileListRef list , CFURLRef findUrl)",38, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetStartOnSystemStartup()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::SetStartOnSystemStartup( bool fAutoStart)",22, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetStartOnSystemStartup()",1, 49, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::SetStartOnSystemStartup( bool fAutoStart)",1, 64, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::setClipboard( const QString & str)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::qstringToBoostPath( const QString & path)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::boostPathToQString( const fs :: path & path)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatDurationStr( int secs)",19, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatServicesStr( quint64 mask)",37, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatPingTime( double dPingTime)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatTimeOffset( int64_t nTimeOffset)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatNiceTimeOffset( qint64 secs)",36, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatBytes( uint64_t bytes)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::calculateIdealFontSize( int width , const QString & text , QFont font , qreal minPointSize , qreal font_size)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ClickableLabel::mouseReleaseEvent( QMouseEvent * event)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ClickableProgressBar::mouseReleaseEvent( QMouseEvent * event)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ItemDelegate::eventFilter( QObject * object , QEvent * event)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiondescdialog.cpp,"TransactionDescDialog::TransactionDescDialog( const QModelIndex & idx , QWidget * parent)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiondescdialog.cpp,"TransactionDescDialog::~TransactionDescDialog()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::WalletModel( std :: unique_ptr<interfaces::Wallet> wallet , interfaces :: Node & node , const PlatformStyle * platformStyle , OptionsModel * _optionsModel , QObject * parent)",21, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::~WalletModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::updateStatus()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::pollBalanceChanged()",24, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::checkBalanceChanged( const interfaces :: WalletBalances & new_balances)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::updateTransaction()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::updateAddressBook( const QString & address , const QString & label , bool isMine , const QString & purpose , int status)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::updateWatchOnlyFlag( bool fHaveWatchonly)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::validateAddress( const QString & address)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::prepareTransaction( WalletModelTransaction & transaction , const CCoinControl & coinControl)",107, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::sendCoins( WalletModelTransaction & transaction)",70, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getOptionsModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getAddressTableModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getTransactionTableModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getRecentRequestsTableModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getEncryptionStatus() const",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::setWalletEncrypted( bool encrypted , const SecureString & passphrase)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::setWalletLocked( bool locked , const SecureString & passPhrase)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::changePassphrase( const SecureString & oldPass , const SecureString & newPass)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyUnload( WalletModel * walletModel)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyKeyStoreStatusChanged( WalletModel * walletmodel)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyAddressBookChanged( WalletModel * walletmodel , const CTxDestination & address , const std :: string & label , bool isMine , const std :: string & purpose , ChangeType status)",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyTransactionChanged( WalletModel * walletmodel , const uint256 & hash , ChangeType status)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"ShowProgress( WalletModel * walletmodel , const std :: string & title , int nProgress)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyWatchonlyChanged( WalletModel * walletmodel , bool fHaveWatchonly)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::subscribeToCoreSignals()",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::unsubscribeFromCoreSignals()",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::requestUnlock()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::UnlockContext::UnlockContext( WalletModel * _wallet , bool _valid , bool _relock)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::UnlockContext::~UnlockContext()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::UnlockContext::CopyFrom( const UnlockContext & rhs)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::loadReceiveRequests( std :: vector<std::string> & vReceiveRequests)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::saveReceiveRequest( const std :: string & sAddress , const int64_t nId , const std :: string & sRequest)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::bumpFee( uint256 hash , uint256 & new_hash)",59, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::isWalletEnabled()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::privateKeysDisabled() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getWalletName() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::isMultiwallet()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::WalletFrame( const PlatformStyle * _platformStyle , BitcoinGUI * _gui)",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::~WalletFrame()",3, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::setClientModel( ClientModel * _clientModel)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::addWallet( WalletModel * walletModel)",36, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::setCurrentWallet( const QString & name)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::removeWallet( const QString & name)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::removeAllWallets()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::handlePaymentRequest( const SendCoinsRecipient & recipient)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::showOutOfSyncWarning( bool fShow)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoOverviewPage()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoHistoryPage()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoReceiveCoinsPage()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoSendCoinsPage( QString addr)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoSignMessageTab( QString addr)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoVerifyMessageTab( QString addr)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::encryptWallet( bool status)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::backupWallet()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::changePassphrase()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::unlockWallet()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::usedSendingAddresses()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::usedReceivingAddresses()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::currentWalletView()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::outOfSyncWarningClicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::OptionsDialog( QWidget * parent , bool enableWallet)",109, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::~OptionsDialog()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::setModel( OptionsModel * _model)",40, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::setCurrentTab( OptionsDialog :: Tab tab)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::setMapper()",39, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::setOkButtonState( bool fState)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_resetButton_clicked()",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_openBitcoinConfButton_clicked()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_okButton_clicked()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_cancelButton_clicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_hideTrayIcon_stateChanged( int fState)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::togglePruneWarning( bool enabled)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::showRestartWarning( bool fPersistent)",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::clearStatusLabel()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::updateProxyValidationState()",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::updateDefaultProxyNets()",21, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"ProxyAddressValidator::ProxyAddressValidator( QObject * parent)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"ProxyAddressValidator::validate( QString & input , int & pos) const",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntry::AddressTableEntry()",1, 27, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntry::AddressTableEntry( Type _type , const QString & _label , const QString & _address)",2, 57, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntryLessThan::operator ( )( const AddressTableEntry & a , const AddressTableEntry & b) const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntryLessThan::operator ( )( const AddressTableEntry & a , const QString & b) const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntryLessThan::operator ( )( const QString & a , const AddressTableEntry & b) const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"translateTransactionType( const QString & strPurpose , bool isMine)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::AddressTablePriv( AddressTableModel * _parent)",2, 27, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::refreshAddressTable( interfaces :: Wallet & wallet)",18, 6, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::updateEntry( const QString & address , const QString & label , bool isMine , const QString & purpose , int status)",46, 6, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::size()",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::index( int idx)",11, 6, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::AddressTableModel( WalletModel * parent)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::~AddressTableModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::rowCount( const QModelIndex & parent) const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::columnCount( const QModelIndex & parent) const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::data( const QModelIndex & index , int role) const",46, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::setData( const QModelIndex & index , const QVariant & value , int role)",55, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::flags( const QModelIndex & index) const",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::index( int row , int column , const QModelIndex & parent) const",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::updateEntry( const QString & address , const QString & label , bool isMine , const QString & purpose , int status)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::addRow( const QString & type , const QString & label , const QString & address , const OutputType address_type)",56, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::removeRows( int row , int count , const QModelIndex & parent)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::labelForAddress( const QString & address) const",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::purposeForAddress( const QString & address) const",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::getAddressData( const QString & address , std :: string * name , std :: string * purpose) const",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::lookupAddress( const QString & address) const",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::GetDefaultAddressType() const",1, 119, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::emitDataChanged( int idx)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::SendCoinsEntry( const PlatformStyle * _platformStyle , QWidget * parent)",33, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::~SendCoinsEntry()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::on_pasteButton_clicked()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::on_addressBookButton_clicked()",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::on_payTo_textChanged( const QString & address)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setModel( WalletModel * _model)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::clear()",22, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::checkSubtractFeeFromAmount()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::deleteClicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::useAvailableBalanceClicked()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::validate( interfaces :: Node & node)",40, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::getValue()",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setupTabChain( QWidget * prev)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setValue( const SendCoinsRecipient & value)",39, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setAddress( const QString & address)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setAmount( const CAmount & amount)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::isClear()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setFocus()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::updateDisplayUnit()",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::updateLabel( const QString & address)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"ipcServerName()",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::ipcParseCommandLine( interfaces :: Node & node , int argc , char * argv [ ])",58, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::ipcSendCommandLine()",32, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::PaymentServer( QObject * parent , bool startLocalServer)",43, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::~PaymentServer()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::eventFilter( QObject * object , QEvent * event)",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::uiReady()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::handleURIOrFile( const QString & s)",85, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::handleURIConnection()",19, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::setOptionsModel( OptionsModel * _optionsModel)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"X509StoreDeleter::operator ( )( X509_STORE * b)",3, 8, 6, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"X509Deleter::operator ( )( X509 * b)",1, 49, 6, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"ReportInvalidCertificate( const QSslCertificate & cert)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::LoadRootCAs( X509_STORE * _store)",80, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::initNetManager()",23, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::readPaymentRequestFromFile( const QString & filename , PaymentRequestPlus & request)",17, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::processPaymentRequest( const PaymentRequestPlus & request , SendCoinsRecipient & recipient)",91, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::fetchRequest( const QUrl & url)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::fetchPaymentACK( WalletModel * walletModel , const SendCoinsRecipient & recipient , QByteArray transaction)",51, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::netRequestFinished( QNetworkReply * reply)",61, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::reportSslErrors( QNetworkReply * reply , const QList<QSslError> & errs)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::handlePaymentACK( const QString & paymentACKMsg)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::verifyNetwork( interfaces :: Node & node , const payments :: PaymentDetails & requestDetails)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::verifyExpired( const payments :: PaymentDetails & requestDetails)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::verifySize( qint64 requestSize)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::verifyAmount( const CAmount & requestAmount)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::getCertStore()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::WalletView( const PlatformStyle * _platformStyle , QWidget * parent)",51, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::~WalletView()",3, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::setBitcoinGUI( BitcoinGUI * gui)",25, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::setClientModel( ClientModel * _clientModel)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::setWalletModel( WalletModel * _walletModel)",34, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::processNewTransaction( const QModelIndex & parent , int start , int)",19, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoOverviewPage()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoHistoryPage()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoReceiveCoinsPage()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoSendCoinsPage( QString addr)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoSignMessageTab( QString addr)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoVerifyMessageTab( QString addr)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::handlePaymentRequest( const SendCoinsRecipient & recipient)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::showOutOfSyncWarning( bool fShow)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::updateEncryptionStatus()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::encryptWallet( bool status)",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::backupWallet()",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::changePassphrase()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::unlockWallet()",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::usedSendingAddresses()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::usedReceivingAddresses()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::showProgress( const QString & title , int nProgress)",27, 2, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::requestedSyncWarningInfo()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::OpenURIDialog( QWidget * parent)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::~OpenURIDialog()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::getURI()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::accept()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::on_selectFileButton_clicked()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::ReceiveCoinsDialog( const PlatformStyle * _platformStyle , QWidget * parent)",43, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::setModel( WalletModel * _model)",38, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::~ReceiveCoinsDialog()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::clear()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::reject()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::accept()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::updateDisplayUnit()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::on_receiveButton_clicked()",30, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::on_recentRequestsView_doubleClicked( const QModelIndex & index)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::recentRequestsView_selectionChanged( const QItemSelection & selected , const QItemSelection & deselected)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::on_showRequestButton_clicked()",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::on_removeRequestButton_clicked()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::resizeEvent( QResizeEvent * event)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::keyPressEvent( QKeyEvent * event)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::selectedRow()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyColumnToClipboard( int column)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::showMenu( const QPoint & point)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyURI()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyLabel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyMessage()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyAmount()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"CSVModelWriter::CSVModelWriter( const QString & _filename , QObject * parent)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"CSVModelWriter::setModel( const QAbstractItemModel * _model)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"CSVModelWriter::addColumn( const QString & title , int column , int role)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"writeValue( QTextStream & f , const QString & value)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"writeSep( QTextStream & f)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"writeNewline( QTextStream & f)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"CSVModelWriter::write()",43, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"NodeLessThan::operator ( )( const CNodeCombinedStats & left , const CNodeCombinedStats & right) const",26, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTablePriv::refreshPeers( interfaces :: Node & node)",28, 6, 4, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTablePriv::size() const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTablePriv::index( int idx)",7, 6, 4, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::PeerTableModel( interfaces :: Node & node , ClientModel * parent)",19, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::~PeerTableModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::startAutoRefresh()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::stopAutoRefresh()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::rowCount( const QModelIndex & parent) const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::columnCount( const QModelIndex & parent) const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::data( const QModelIndex & index , int role) const",37, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::flags( const QModelIndex & index) const",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::index( int row , int column , const QModelIndex & parent) const",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::getNodeStats( int idx)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::refresh()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::getRowByNodeId( NodeId nodeid)",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::sort( int column , Qt :: SortOrder order)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BannedNodeLessThan::operator ( )( const CCombinedBan & left , const CCombinedBan & right) const",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTablePriv::refreshBanlist( interfaces :: Node & node)",19, 6, 4, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTablePriv::size() const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTablePriv::index( int idx)",7, 6, 4, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::BanTableModel( interfaces :: Node & node , ClientModel * parent)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::~BanTableModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::rowCount( const QModelIndex & parent) const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::columnCount( const QModelIndex & parent) const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::data( const QModelIndex & index , int role) const",21, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::flags( const QModelIndex & index) const",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::index( int row , int column , const QModelIndex & parent) const",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::refresh()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::sort( int column , Qt :: SortOrder order)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::shouldShow()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TxLessThan::operator ( )( const TransactionRecord & a , const TransactionRecord & b) const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TxLessThan::operator ( )( const TransactionRecord & a , const uint256 & b) const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TxLessThan::operator ( )( const uint256 & a , const TransactionRecord & b) const",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::TransactionTablePriv( TransactionTableModel * _parent)",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::refreshWallet( interfaces :: Wallet & wallet)",12, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::updateWallet( interfaces :: Wallet & wallet , const uint256 & hash , int status , bool showTransaction)",79, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::size()",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::index( interfaces :: Wallet & wallet , int idx)",22, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::describe( interfaces :: Node & node , interfaces :: Wallet & wallet , TransactionRecord * rec , int unit)",4, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::getTxHex( interfaces :: Wallet & wallet , TransactionRecord * rec)",9, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::TransactionTableModel( const PlatformStyle * _platformStyle , WalletModel * parent)",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::~TransactionTableModel()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::updateAmountColumnTitle()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::updateTransaction( const QString & hash , int status , bool showTransaction)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::updateConfirmations()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::rowCount( const QModelIndex & parent) const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::columnCount( const QModelIndex & parent) const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxStatus( const TransactionRecord * wtx) const",37, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxDate( const TransactionRecord * wtx) const",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::lookupAddress( const std :: string & address , bool tooltip) const",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxType( const TransactionRecord * wtx) const",19, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::txAddressDecoration( const TransactionRecord * wtx) const",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxToAddress( const TransactionRecord * wtx , bool tooltip) const",23, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::addressColor( const TransactionRecord * wtx) const",20, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxAmount( const TransactionRecord * wtx , bool showUnconfirmed , BitcoinUnits :: SeparatorStyle separators) const",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::txStatusDecoration( const TransactionRecord * wtx) const",35, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::txWatchonlyDecoration( const TransactionRecord * wtx) const",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTooltip( const TransactionRecord * rec) const",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::data( const QModelIndex & index , int role) const",137, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",32, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::index( int row , int column , const QModelIndex & parent) const",10, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::updateDisplayUnit()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionNotification::TransactionNotification()",1, 33, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionNotification::TransactionNotification( uint256 _hash , ChangeType _status , bool _showTransaction)",2, 75, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionNotification::invoke( QObject * ttm)",9, 6, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"NotifyTransactionChanged( TransactionTableModel * ttm , const uint256 & hash , ChangeType status)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"ShowProgress( TransactionTableModel * ttm , const std :: string & title , int nProgress)",20, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::subscribeToCoreSignals()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::unsubscribeFromCoreSignals()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::BitcoinUnits( QObject * parent)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::availableUnits()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::valid( int unit)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::longName( int unit)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::shortName( int unit)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::description( int unit)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::factor( int unit)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::decimals( int unit)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::format( int unit , const CAmount & nIn , bool fPlus , SeparatorStyle separators)",34, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::formatWithUnit( int unit , const CAmount & amount , bool plussign , SeparatorStyle separators)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::formatHtmlWithUnit( int unit , const CAmount & amount , bool plussign , SeparatorStyle separators)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::parse( int unit , const QString & value , CAmount * val_out)",38, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::getAmountColumnTitle( int unit)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::rowCount( const QModelIndex & parent) const",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::data( const QModelIndex & index , int role) const",19, 2, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::maxMoney()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CCoinControlWidgetItem::operator <( const QTreeWidgetItem & other) const",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::CoinControlDialog( const PlatformStyle * _platformStyle , QWidget * parent)",94, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::~CoinControlDialog()",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::setModel( WalletModel * _model)",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::buttonBoxClicked( QAbstractButton * button)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::buttonSelectAllClicked()",20, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::showMenu( const QPoint & point)",33, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::copyAmount()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::copyLabel()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::copyAddress()",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::copyTransactionHash()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::lockCoin()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::unlockCoin()",8, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardQuantity()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardAmount()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardFee()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardAfterFee()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardBytes()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardLowOutput()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardChange()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::sortView( int column , Qt :: SortOrder order)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::headerSectionClicked( int logicalIndex)",19, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::radioTreeMode( bool checked)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::radioListMode( bool checked)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::viewItemChanged( QTreeWidgetItem * item , int column)",26, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::updateLabelLocked()",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::updateLabels( WalletModel * model , QDialog * dialog)",185, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::coinControl()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::updateView()",131, 2, 0, 0
repos/cpp/bitcoin/src/qt/winshutdownmonitor.cpp,"WinShutdownMonitor::nativeEventFilter( const QByteArray & eventType , void * pMessage , long * pnResult)",36, 2, 0, 0
repos/cpp/bitcoin/src/qt/winshutdownmonitor.cpp,"WinShutdownMonitor::registerShutdownBlockReason( const QString & strReason , const HWND & mainWinId)",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::showTransaction()",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::decomposeTransaction( const interfaces :: WalletTx & wtx)",132, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::updateStatus( const interfaces :: WalletTxStatus & wtx , int numBlocks)",71, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::statusUpdateNeeded( int numBlocks) const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::getTxHash() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::getOutputIndex() const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::RecentRequestsTableModel( WalletModel * parent)",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::~RecentRequestsTableModel()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::rowCount( const QModelIndex & parent) const",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::columnCount( const QModelIndex & parent) const",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::data( const QModelIndex & index , int role) const",46, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::setData( const QModelIndex & index , const QVariant & value , int role)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",11, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::updateAmountColumnTitle()",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::getAmountTitle()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::index( int row , int column , const QModelIndex & parent) const",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::removeRows( int row , int count , const QModelIndex & parent)",21, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::flags( const QModelIndex & index) const",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::addNewRequest( const SendCoinsRecipient & recipient)",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::addNewRequest( const std :: string & recipient)",16, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::addNewRequest( RecentRequestEntry & recipient)",6, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::sort( int column , Qt :: SortOrder order)",5, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::updateDisplayUnit()",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestEntryLessThan::operator ( )( RecentRequestEntry & left , RecentRequestEntry & right) const",21, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/util.cpp,"ConfirmMessage( QString * text , int msec)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/paymentservertests.cpp,"parse_b64der_cert( const char * cert_data)",9, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/paymentservertests.cpp,"handleRequest( PaymentServer * server , std :: vector<unsigned char> & data)",27, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/paymentservertests.cpp,"PaymentServerTests::paymentServerTests()",143, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/paymentservertests.cpp,"RecipientCatcher::getRecipient( const SendCoinsRecipient & r)",4, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/test_main.cpp,"main( int argc , char * argv [ ])",62, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/rpcnestedtests.cpp,"rpcNestedTest_rpc( const JSONRPCRequest & request)",7, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/rpcnestedtests.cpp,"RPCNestedTests::rpcNestedTests()",101, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/compattests.cpp,"CompatTests::bswapTests()",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/uritests.cpp,"URITests::uriTests()",55, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/addressbooktests.cpp,"EditAddressAndSubmit( EditAddressDialog * dialog , const QString & label , const QString & address , QString expected_msg)",13, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/addressbooktests.cpp,"TestAddAddressesToSendBook()",82, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/addressbooktests.cpp,"AddressBookTests::addressBookTests()",15, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"ConfirmSend( QString * text = nullptr , bool cancel = false)",14, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"SendCoins( CWallet & wallet , SendCoinsDialog & sendCoinsDialog , const CTxDestination & address , CAmount amount , bool rbf)",18, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"FindTx( const QAbstractItemModel & model , const uint256 & txid)",12, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"BumpFee( TransactionView & view , const uint256 & txid , bool expectDisabled , std :: string expectError , bool cancel)",24, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"TestGUI()",119, 2, 0, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"WalletTests::walletTests()",15, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"QuadRound( __m128i & state0 , __m128i & state1 , uint64_t k1 , uint64_t k0)",6, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"QuadRound( __m128i & state0 , __m128i & state1 , __m128i m , uint64_t k1 , uint64_t k0)",6, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"ShiftMessageA( __m128i & m0 , __m128i m1)",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"ShiftMessageC( __m128i & m0 , __m128i m1 , __m128i & m2)",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"ShiftMessageB( __m128i & m0 , __m128i m1 , __m128i & m2)",5, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"Shuffle( __m128i & s0 , __m128i & s1)",7, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"Unshuffle( __m128i & s0 , __m128i & s1)",7, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"Load( const unsigned char * in)",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"Save( unsigned char * out , __m128i s)",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"sha256_shani::Transform( uint32_t * s , const unsigned char * chunk , size_t blocks)",62, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"sha256d64_shani::Transform_2way( unsigned char * out , const unsigned char * in)",209, 2, 0, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"CSipHasher::CSipHasher( uint64_t k0 , uint64_t k1)",9, 2, 0, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"CSipHasher::Write( uint64_t data)",19, 2, 0, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"CSipHasher::Write( const unsigned char * data , size_t size)",27, 2, 0, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"CSipHasher::Finalize() const",17, 2, 0, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"SipHashUint256( uint64_t k0 , uint64_t k1 , const uint256 & val)",39, 2, 0, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"SipHashUint256Extra( uint64_t k0 , uint64_t k1 , const uint256 & val , uint32_t extra)",40, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Encrypt::AES128Encrypt( const unsigned char key [ 16 ])",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Encrypt::~AES128Encrypt()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Encrypt::Encrypt( unsigned char ciphertext [ 16 ] , const unsigned char plaintext [ 16 ]) const",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Decrypt::AES128Decrypt( const unsigned char key [ 16 ])",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Decrypt::~AES128Decrypt()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Decrypt::Decrypt( unsigned char plaintext [ 16 ] , const unsigned char ciphertext [ 16 ]) const",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Encrypt::AES256Encrypt( const unsigned char key [ 32 ])",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Encrypt::~AES256Encrypt()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Encrypt::Encrypt( unsigned char ciphertext [ 16 ] , const unsigned char plaintext [ 16 ]) const",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Decrypt::AES256Decrypt( const unsigned char key [ 32 ])",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Decrypt::~AES256Decrypt()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Decrypt::Decrypt( unsigned char plaintext [ 16 ] , const unsigned char ciphertext [ 16 ]) const",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"CBCEncrypt( const T & enc , const unsigned char iv [ AES_BLOCKSIZE ] , const unsigned char * data , int size , bool pad , unsigned char * out)",34, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"CBCDecrypt( const T & dec , const unsigned char iv [ AES_BLOCKSIZE ] , const unsigned char * data , int size , bool pad , unsigned char * out)",39, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCEncrypt::AES256CBCEncrypt( const unsigned char key [ AES256_KEYSIZE ] , const unsigned char ivIn [ AES_BLOCKSIZE ] , bool padIn)",5, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCEncrypt::Encrypt( const unsigned char * data , int size , unsigned char * out) const",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCEncrypt::~AES256CBCEncrypt()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCDecrypt::AES256CBCDecrypt( const unsigned char key [ AES256_KEYSIZE ] , const unsigned char ivIn [ AES_BLOCKSIZE ] , bool padIn)",5, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCDecrypt::Decrypt( const unsigned char * data , int size , unsigned char * out) const",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCDecrypt::~AES256CBCDecrypt()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCEncrypt::AES128CBCEncrypt( const unsigned char key [ AES128_KEYSIZE ] , const unsigned char ivIn [ AES_BLOCKSIZE ] , bool padIn)",5, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCEncrypt::~AES128CBCEncrypt()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCEncrypt::Encrypt( const unsigned char * data , int size , unsigned char * out) const",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCDecrypt::AES128CBCDecrypt( const unsigned char key [ AES128_KEYSIZE ] , const unsigned char ivIn [ AES_BLOCKSIZE ] , bool padIn)",5, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCDecrypt::~AES128CBCDecrypt()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCDecrypt::Decrypt( const unsigned char * data , int size , unsigned char * out) const",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"rotl32( uint32_t v , int c)",1, 98, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::SetKey( const unsigned char * k , size_t keylen)",27, 2, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::ChaCha20()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::ChaCha20( const unsigned char * k , size_t keylen)",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::SetIV( uint64_t iv)",5, 2, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::Seek( uint64_t pos)",5, 2, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::Output( unsigned char * c , size_t bytes)",107, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Ch( uint64_t x , uint64_t y , uint64_t z)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Maj( uint64_t x , uint64_t y , uint64_t z)",1, 92, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Sigma0( uint64_t x)",1, 111, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Sigma1( uint64_t x)",1, 111, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::sigma0( uint64_t x)",1, 98, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::sigma1( uint64_t x)",1, 99, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Round( uint64_t a , uint64_t b , uint64_t c , uint64_t & d , uint64_t e , uint64_t f , uint64_t g , uint64_t & h , uint64_t k , uint64_t w)",7, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Initialize( uint64_t * s)",11, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Transform( uint64_t * s , const unsigned char * chunk)",99, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"CSHA512::CSHA512()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"CSHA512::Write( const unsigned char * data , size_t len)",25, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"CSHA512::Finalize( unsigned char hash [ OUTPUT_SIZE ])",16, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"CSHA512::Reset()",6, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::K( uint32_t x)",1, 62, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Add( __m256i x , __m256i y)",1, 76, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Add( __m256i x , __m256i y , __m256i z)",1, 82, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Add( __m256i x , __m256i y , __m256i z , __m256i w)",1, 101, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Add( __m256i x , __m256i y , __m256i z , __m256i w , __m256i v)",1, 115, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Inc( __m256i & x , __m256i y)",1, 71, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Inc( __m256i & x , __m256i y , __m256i z)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Inc( __m256i & x , __m256i y , __m256i z , __m256i w)",1, 99, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Xor( __m256i x , __m256i y)",1, 76, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Xor( __m256i x , __m256i y , __m256i z)",1, 82, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Or( __m256i x , __m256i y)",1, 74, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::And( __m256i x , __m256i y)",1, 76, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::ShR( __m256i x , int n)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::ShL( __m256i x , int n)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Ch( __m256i x , __m256i y , __m256i z)",1, 89, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Maj( __m256i x , __m256i y , __m256i z)",1, 96, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Sigma0( __m256i x)",1, 132, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Sigma1( __m256i x)",1, 131, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::sigma0( __m256i x)",1, 115, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::sigma1( __m256i x)",1, 117, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Round( __m256i a , __m256i b , __m256i c , __m256i & d , __m256i e , __m256i f , __m256i g , __m256i & h , __m256i k)",7, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Read8( const unsigned char * chunk , int offset)",13, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Write8( unsigned char * out , int offset , __m256i v)",11, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Transform_8way( unsigned char * out , const unsigned char * in)",250, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::Round( uint32_t a , uint32_t & b , uint32_t c , uint32_t d , uint32_t & e , uint32_t f , uint32_t k , uint32_t w)",5, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::f1( uint32_t b , uint32_t c , uint32_t d)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::f2( uint32_t b , uint32_t c , uint32_t d)",1, 77, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::f3( uint32_t b , uint32_t c , uint32_t d)",1, 91, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::left( uint32_t x)",1, 66, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::Initialize( uint32_t * s)",8, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::Transform( uint32_t * s , const unsigned char * chunk)",96, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"CSHA1::CSHA1()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"CSHA1::Write( const unsigned char * data , size_t len)",25, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"CSHA1::Finalize( unsigned char hash [ OUTPUT_SIZE ])",13, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"CSHA1::Reset()",6, 2, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f1( uint32_t x , uint32_t y , uint32_t z)",1, 77, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f2( uint32_t x , uint32_t y , uint32_t z)",1, 86, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f3( uint32_t x , uint32_t y , uint32_t z)",1, 80, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f4( uint32_t x , uint32_t y , uint32_t z)",1, 86, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f5( uint32_t x , uint32_t y , uint32_t z)",1, 80, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::Initialize( uint32_t * s)",8, 2, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::rol( uint32_t x , int i)",1, 78, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::Round( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t f , uint32_t x , uint32_t k , int r)",5, 2, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R11( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 145, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R21( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R31( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R41( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R51( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R12( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R22( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R32( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R42( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R52( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 145, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::Transform( uint32_t * s , const unsigned char * chunk)",181, 2, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"CRIPEMD160::CRIPEMD160()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"CRIPEMD160::Write( const unsigned char * data , size_t len)",25, 2, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"CRIPEMD160::Finalize( unsigned char hash [ OUTPUT_SIZE ])",13, 2, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"CRIPEMD160::Reset()",6, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse4.cpp,"sha256_sse4::Transform( uint32_t * s , const unsigned char * chunk , size_t blocks)",942, 2, 0, 0
repos/cpp/bitcoin/src/crypto/hmac_sha512.cpp,"CHMAC_SHA512::CHMAC_SHA512( const unsigned char * key , size_t keylen)",19, 2, 0, 0
repos/cpp/bitcoin/src/crypto/hmac_sha512.cpp,"CHMAC_SHA512::Finalize( unsigned char hash [ OUTPUT_SIZE ])",6, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::K( uint32_t x)",1, 59, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Add( __m128i x , __m128i y)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Add( __m128i x , __m128i y , __m128i z)",1, 82, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Add( __m128i x , __m128i y , __m128i z , __m128i w)",1, 101, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Add( __m128i x , __m128i y , __m128i z , __m128i w , __m128i v)",1, 115, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Inc( __m128i & x , __m128i y)",1, 71, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Inc( __m128i & x , __m128i y , __m128i z)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Inc( __m128i & x , __m128i y , __m128i z , __m128i w)",1, 99, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Xor( __m128i x , __m128i y)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Xor( __m128i x , __m128i y , __m128i z)",1, 82, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Or( __m128i x , __m128i y)",1, 71, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::And( __m128i x , __m128i y)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::ShR( __m128i x , int n)",1, 70, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::ShL( __m128i x , int n)",1, 70, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Ch( __m128i x , __m128i y , __m128i z)",1, 89, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Maj( __m128i x , __m128i y , __m128i z)",1, 96, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Sigma0( __m128i x)",1, 132, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Sigma1( __m128i x)",1, 131, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::sigma0( __m128i x)",1, 115, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::sigma1( __m128i x)",1, 117, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Round( __m128i a , __m128i b , __m128i c , __m128i & d , __m128i e , __m128i f , __m128i g , __m128i & h , __m128i k)",7, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Read4( const unsigned char * chunk , int offset)",9, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Write4( unsigned char * out , int offset , __m128i v)",7, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Transform_4way( unsigned char * out , const unsigned char * in)",250, 2, 0, 0
repos/cpp/bitcoin/src/crypto/hmac_sha256.cpp,"CHMAC_SHA256::CHMAC_SHA256( const unsigned char * key , size_t keylen)",19, 2, 0, 0
repos/cpp/bitcoin/src/crypto/hmac_sha256.cpp,"CHMAC_SHA256::Finalize( unsigned char hash [ OUTPUT_SIZE ])",6, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Ch( uint32_t x , uint32_t y , uint32_t z)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Maj( uint32_t x , uint32_t y , uint32_t z)",1, 92, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Sigma0( uint32_t x)",1, 110, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Sigma1( uint32_t x)",1, 109, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::sigma0( uint32_t x)",1, 99, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::sigma1( uint32_t x)",1, 101, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Round( uint32_t a , uint32_t b , uint32_t c , uint32_t & d , uint32_t e , uint32_t f , uint32_t g , uint32_t & h , uint32_t k)",7, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Initialize( uint32_t * s)",11, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Transform( uint32_t * s , const unsigned char * chunk , size_t blocks)",85, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::TransformD64( unsigned char * out , const unsigned char * in)",250, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"TransformD64Wrapper( unsigned char * out , const unsigned char * in)",37, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"SelfTest()",84, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"cpuid( uint32_t leaf , uint32_t subleaf , uint32_t & a , uint32_t & b , uint32_t & c , uint32_t & d)",8, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"AVXEnabled()",6, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"SHA256AutoDetect()",67, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"CSHA256::CSHA256()",4, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"CSHA256::Write( const unsigned char * data , size_t len)",25, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"CSHA256::Finalize( unsigned char hash [ OUTPUT_SIZE ])",16, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"CSHA256::Reset()",6, 2, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"SHA256D64( unsigned char * out , const unsigned char * in , size_t blocks)",33, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"CConnmanTest::AddNode( CNode & node)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"CConnmanTest::ClearNodes()",8, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"operator < <( std :: ostream & os , const uint256 & num)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"BasicTestingSetup::BasicTestingSetup( const std :: string & chainName)",17, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"BasicTestingSetup::~BasicTestingSetup()",5, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"BasicTestingSetup::SetDataDir( const std :: string & name)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestingSetup::TestingSetup( const std :: string & chainName)",35, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestingSetup::~TestingSetup()",13, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestChain100Setup::TestChain100Setup()",12, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestChain100Setup::CreateAndProcessBlock( const std :: vector<CMutableTransaction> & txns , const CScript & scriptPubKey)",25, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestChain100Setup::~TestChain100Setup()",3, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestMemPoolEntryHelper::FromTx( const CMutableTransaction & tx)",3, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestMemPoolEntryHelper::FromTx( const CTransactionRef & tx)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"getBlock13b8a()",7, 2, 0, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolRemoveTest)",91, 2, 0, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pool . cs)",9, 2, 0, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolIndexingTest)",172, 2, 0, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolAncestorIndexingTest)",127, 2, 0, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolSizeLimitTest)",153, 2, 0, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"make_tx( std :: vector<CAmount> && output_values , std :: vector<CTransactionRef> && inputs = std :: vector<CTransactionRef>() , std :: vector<uint32_t> && input_indices = std :: vector<uint32_t>())",15, 2, 0, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolAncestryTests)",158, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_criticalsection)",19, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ParseHex)",20, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_HexStr)",86, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_FormatISO8601DateTime)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_FormatISO8601Date)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_FormatISO8601Time)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::TestArgsManager()",1, 55, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::GetOverrideArgs()",1, 100, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::GetConfigArgs()",1, 96, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::ReadConfigString( const std :: string str_config)",10, 6, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::SetNetworkOnlyArg( const std :: string arg)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::SetupArgs( int argv , const char * args [ ])",6, 6, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ParseParameters)",31, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_GetBoolArg)",33, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_GetBoolArgEdgeCases)",51, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ReadConfigStream)",182, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_GetArg)",37, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_GetChainName)",75, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_FormatMoney)",24, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ParseMoney)",52, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_IsHex)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_IsHexNumber)",24, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_seed_insecure_rand)",24, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_TimingResistantEqual)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( strprintf_numbers)",20, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( gettime)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_IsDigit)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseInt32)",28, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseInt64)",29, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseUInt32)",30, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseUInt64)",31, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseDouble)",27, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_FormatParagraph)",26, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_FormatSubVersion)",11, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseFixedPoint)",64, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestOtherThread( fs :: path dirname , std :: string lockname , bool * result)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestOtherProcess( fs :: path dirname , std :: string lockname , int fd)",26, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_LockDirectory)",87, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_DirIsWritable)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ToLower)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ToUpper)",9, 2, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_Capitalize)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"SignatureHashOld( CScript scriptCode , const CTransaction & txTo , unsigned int nIn , int nHashType)",59, 2, 0, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"RandomScript( CScript & script)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"RandomTransaction( CMutableTransaction & tx , bool fSingle)",22, 2, 0, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"BOOST_AUTO_TEST_CASE( sighash_test)",43, 2, 0, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"BOOST_AUTO_TEST_CASE( sighash_from_data)",46, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::CAddrManTest( bool makeDeterministic = true)",9, 6, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::MakeDeterministic()",5, 6, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::Find( const CNetAddr & addr , int * pnId = nullptr)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::Create( const CAddress & addr , const CNetAddr & addrSource , int * pnId = nullptr)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::Delete( int nId)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::SimConnFail( CService & addr)",10, 7, 5, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"ResolveIP( const char * ip)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"ResolveIP( std :: string ip)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"ResolveService( const char * ip , int port = 0)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"ResolveService( std :: string ip , int port = 0)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_simple)",48, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_ports)",27, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_select)",58, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_new_collisions)",25, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_tried_collisions)",26, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_find)",32, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_create)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_delete)",19, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_getaddr)",59, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( caddrinfo_get_tried_bucket)",53, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( caddrinfo_get_new_bucket)",64, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_selecttriedcollision)",34, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_noevict)",58, 2, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_evictionworks)",56, 2, 0, 0
repos/cpp/bitcoin/src/test/amount_tests.cpp,"BOOST_AUTO_TEST_CASE( MoneyRangeTest)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/amount_tests.cpp,"BOOST_AUTO_TEST_CASE( GetFeeTest)",66, 2, 0, 0
repos/cpp/bitcoin/src/test/amount_tests.cpp,"BOOST_AUTO_TEST_CASE( BinaryOperatorTest)",16, 2, 0, 0
repos/cpp/bitcoin/src/test/amount_tests.cpp,"BOOST_AUTO_TEST_CASE( ToStringTest)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/bswap_tests.cpp,"BOOST_AUTO_TEST_CASE( bswap_tests)",13, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"DoubleEquals( double a , double b , double epsilon)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"CreateBlockIndexWithNbits( uint32_t nbits)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"RejectDifficultyMismatch( double difficulty , double expected_difficulty)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"TestDifficulty( uint32_t nbits , double expected_difficulty)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_very_low_target)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_low_target)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_mid_target)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_high_target)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_very_high_target)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_null_tip)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( get_next_work)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( get_next_work_pow_limit)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( get_next_work_lower_limit_actual)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( get_next_work_upper_limit_actual)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( GetBlockProofEquivalentTime_test)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"ip( uint32_t i)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( outbound_slow_chain_eviction)",53, 2, 0, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"AddRandomOutboundPeer( std :: vector<CNode*> & vNodes , PeerLogicValidation & peerLogic)",13, 2, 0, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( stale_tip_peer_management)",68, 2, 0, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( DoS_banning)",51, 2, 0, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( DoS_banscore)",43, 2, 0, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( DoS_bantime)",33, 2, 0, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"RandomOrphan()",9, 2, 0, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( DoS_mapOrphans)",80, 2, 0, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"is_null_key( const std :: vector<unsigned char> & key)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( dbwrapper)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( dbwrapper_batch)",35, 2, 0, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( dbwrapper_iterator)",39, 2, 0, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( existing_data_no_obfuscate)",39, 2, 0, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( existing_data_reindex)",35, 2, 0, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( iterator_ordering)",40, 2, 0, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::StringContentsSerializer()",1, 34, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::StringContentsSerializer( const std :: string & inp)",1, 76, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::operator +=( const std :: string & s)",4, 6, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::operator +=( const StringContentsSerializer & s)",1, 103, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::SerializationOp( Stream & s , Operation ser_action)",17, 6, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( iterator_string_ordering)",43, 2, 0, 0
repos/cpp/bitcoin/src/test/sync_tests.cpp,"TestPotentialDeadLockDetected( MutexType & mutex1 , MutexType & mutex2)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/sync_tests.cpp,"BOOST_AUTO_TEST_CASE( potential_deadlock_detected)",17, 2, 0, 0
repos/cpp/bitcoin/src/test/base32_tests.cpp,"BOOST_AUTO_TEST_CASE( base32_testvectors)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/compress_tests.cpp,"TestEncode( uint64_t in)",3, 2, 0, 0
repos/cpp/bitcoin/src/test/compress_tests.cpp,"TestDecode( uint64_t in)",3, 2, 0, 0
repos/cpp/bitcoin/src/test/compress_tests.cpp,"TestPair( uint64_t dec , uint64_t enc)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/compress_tests.cpp,"BOOST_AUTO_TEST_CASE( compress_amounts)",24, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"CallRPC( std :: string args)",20, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_rawparams)",34, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_togglenetwork)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_rawsign)",22, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_createraw_op_return)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_format_monetary_values)",34, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"ValueFromString( const std :: string & str)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_parse_monetary_values)",32, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( json_parse_errors)",20, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_ban)",82, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_convert_values_generatetoaddress)",22, 2, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_getblockstats_calculate_percentiles_by_weight)",77, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"operator ==( const Coin & a , const Coin & b)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewTest::GetCoin( const COutPoint & outpoint , Coin & coin) const",13, 6, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewTest::GetBestBlock() const",1, 69, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewTest::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlock)",17, 6, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewCacheTest::CCoinsViewCacheTest( CCoinsView * _base)",1, 80, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewCacheTest::SelfTest() const",12, 6, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewCacheTest::map() const",1, 50, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewCacheTest::usage() const",1, 55, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( coins_cache_simulation_test)",146, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"FindRandomFrom( const std :: set<COutPoint> & utxoSet)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( updatecoins_simulation_test)",196, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_serialization)",51, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"SetCoinsValue( CAmount value , Coin & coin)",11, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"InsertCoinsMapEntry( CCoinsMap & map , CAmount value , char flags)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"GetCoinsMapEntry( const CCoinsMap & map , CAmount & value , char & flags)",16, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"WriteCoinsViewEntry( CCoinsView & view , CAmount value , char flags)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"SingleEntryCacheTest::SingleEntryCacheTest( CAmount base_value , CAmount cache_value , char cache_flags)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckAccessCoin( CAmount base_value , CAmount cache_value , CAmount expected_value , char cache_flags , char expected_flags)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_access)",37, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckSpendCoins( CAmount base_value , CAmount cache_value , CAmount expected_value , char cache_flags , char expected_flags)",12, 3, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_spend)",37, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckAddCoinBase( CAmount base_value , CAmount cache_value , CAmount modify_value , CAmount expected_value , char cache_flags , char expected_flags , bool coinbase)",20, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckAddCoin( Args && ... args)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_add)",29, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckWriteCoins( CAmount parent_value , CAmount child_value , CAmount expected_value , char parent_flags , char child_flags , char expected_flags)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_write)",65, 2, 0, 0
repos/cpp/bitcoin/src/test/reverselock_tests.cpp,"BOOST_AUTO_TEST_CASE( reverselock_basics)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/reverselock_tests.cpp,"BOOST_AUTO_TEST_CASE( reverselock_errors)",34, 2, 0, 0
repos/cpp/bitcoin/src/test/arith_uint256_tests.cpp,"arith_uint256V( const std :: vector<unsigned char> & vch)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"RegtestingSetup::RegtestingSetup()",1, 67, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"TestSubscriber::TestSubscriber( uint256 tip)",1, 66, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"TestSubscriber::UpdatedBlockTip( const CBlockIndex * pindexNew , const CBlockIndex * pindexFork , bool fInitialDownload)",4, 6, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"TestSubscriber::BlockConnected( const std :: shared_ptr<const CBlock> & block , const CBlockIndex * pindex , const std :: vector<CTransactionRef> & txnConflicted)",7, 6, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"TestSubscriber::BlockDisconnected( const std :: shared_ptr<const CBlock> & block)",6, 6, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"Block( const uint256 & prev_hash)",20, 2, 0, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"FinalizeBlock( std :: shared_ptr<CBlock> pblock)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"GoodBlock( const uint256 & prev_hash)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"BadBlock( const uint256 & prev_hash)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"BuildChain( const uint256 & root , int height , const unsigned int invalid_rate , const unsigned int branch_rate , const unsigned int max_size , std :: vector<std::shared_ptr<const CBlock>> & blocks)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"BOOST_AUTO_TEST_CASE( processnewblock_signals_ordering)",61, 2, 0, 0
repos/cpp/bitcoin/src/test/timedata_tests.cpp,"BOOST_AUTO_TEST_CASE( util_MedianFilter)",24, 2, 0, 0
repos/cpp/bitcoin/src/test/descriptor_tests.cpp,"CheckUnparsable( const std :: string & prv , const std :: string & pub)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/descriptor_tests.cpp,"MaybeUseHInsteadOfApostrophy( std :: string ret)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/descriptor_tests.cpp,"Check( const std :: string & prv , const std :: string & pub , int flags , const std :: vector<std::vector<std::string>> & scripts , const std :: set<std::vector<uint32_t>> & paths = ONLY_EMPTY)",105, 2, 0, 0
repos/cpp/bitcoin/src/test/descriptor_tests.cpp,"BOOST_AUTO_TEST_CASE( descriptor_test)",56, 2, 0, 0
repos/cpp/bitcoin/src/test/blockfilter_tests.cpp,"BOOST_AUTO_TEST_CASE( gcsfilter_test)",22, 2, 0, 0
repos/cpp/bitcoin/src/test/blockfilter_tests.cpp,"BOOST_AUTO_TEST_CASE( blockfilter_basic_test)",50, 2, 0, 0
repos/cpp/bitcoin/src/test/blockfilter_tests.cpp,"BOOST_AUTO_TEST_CASE( blockfilters_json_test)",53, 2, 0, 0
repos/cpp/bitcoin/src/test/pmt_tests.cpp,"CPartialMerkleTreeTester::Damage()",5, 6, 4, 0
repos/cpp/bitcoin/src/test/pmt_tests.cpp,"BOOST_AUTO_TEST_CASE( pmt_test1)",77, 2, 0, 0
repos/cpp/bitcoin/src/test/pmt_tests.cpp,"BOOST_AUTO_TEST_CASE( pmt_malleability)",16, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"read_json( const std :: string & jsondata)",11, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"FormatScriptError( ScriptError_t err)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"ParseScriptError( const std :: string & name)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BuildCreditingTransaction( const CScript & scriptPubKey , int nValue = 0)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BuildSpendingTransaction( const CScript & scriptSig , const CScriptWitness & scriptWitness , const CTransaction & txCredit)",17, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"DoTest( const CScript & scriptPubKey , const CScript & scriptSig , const CScriptWitness & scriptWitness , int flags , const std :: string & message , int scriptError , CAmount nValue = 0)",38, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"NegateSignatureS( std :: vector<unsigned char> & vchSig)",39, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"KeyData::KeyData()",20, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::DoPush()",7, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::DoPush( const std :: vector<unsigned char> & data)",6, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::TestBuilder( const CScript & script_ , const std :: string & comment_ , int flags_ , bool P2SH = false , WitnessMode wm = WitnessMode :: NONE , int witnessversion = 0 , CAmount nValue_ = 0)",21, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::ScriptError( ScriptError_t err)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Add( const CScript & _script)",6, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Num( int num)",6, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Push( const std :: string & hex)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Push( const CScript & _script)",4, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::PushSig( const CKey & key , int nHashType = SIGHASH_ALL , unsigned int lenR = 32 , unsigned int lenS = 32 , SigVersion sigversion = SigVersion :: BASE , CAmount amount = 0)",17, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::PushWitSig( const CKey & key , CAmount amount = - 1 , int nHashType = SIGHASH_ALL , unsigned int lenR = 32 , unsigned int lenS = 32 , SigVersion sigversion = SigVersion :: WITNESS_V0)",6, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Push( const CPubKey & pubkey)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::PushRedeem()",5, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::PushWitRedeem()",5, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::EditPush( unsigned int pos , const std :: string & hexin , const std :: string & hexout)",11, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::DamagePush( unsigned int pos)",7, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Test()",8, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::AsWit()",7, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::GetJSON()",19, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::GetComment() const",4, 6, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"JSONPrettyPrint( const UniValue & univalue)",11, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_build)",476, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_json_test)",42, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_PushData)",41, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_cltv_truncated)",9, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"sign_multisig( const CScript & scriptPubKey , const std :: vector<CKey> & keys , const CTransaction & transaction)",23, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"sign_multisig( const CScript & scriptPubKey , const CKey & key , const CTransaction & transaction)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_CHECKMULTISIG12)",29, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_CHECKMULTISIG23)",68, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"CombineSignatures( const CTxOut & txout , const CMutableTransaction & tx , const SignatureData & scriptSig1 , const SignatureData & scriptSig2)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_combineSigs)",113, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_push)",20, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_IsPushOnly_on_invalid_scripts)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_GetScriptAsm)",29, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"ScriptFromHex( const char * hex)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_FindAndDelete)",108, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_HasValidOps)",13, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_can_append_self)",16, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_returns_true)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_tx_index_err)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_tx_size)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_tx_serialization)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_amount_required_err)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_invalid_flags)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/hash_tests.cpp,"BOOST_AUTO_TEST_CASE( murmurhash3)",32, 2, 0, 0
repos/cpp/bitcoin/src/test/hash_tests.cpp,"BOOST_AUTO_TEST_CASE( siphash)",69, 2, 0, 0
repos/cpp/bitcoin/src/test/txindex_tests.cpp,"BOOST_FIXTURE_TEST_CASE( txindex_initial_sync , TestChain100Setup)",51, 2, 0, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_Solver_success)",93, 2, 0, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_Solver_failure)",55, 2, 0, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_ExtractDestination)",68, 2, 0, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_ExtractDestinations)",65, 2, 0, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_GetScriptFor_)",71, 2, 0, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_IsMine)",359, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin_main.cpp,"Shutdown( void * parg)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin_main.cpp,"StartShutdown()",4, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin_main.cpp,"ShutdownRequested()",4, 2, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"ComputeMerkleRootFromBranch( const uint256 & leaf , const std :: vector<uint256> & vMerkleBranch , uint32_t nIndex)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"MerkleComputation( const std :: vector<uint256> & leaves , uint256 * proot , bool * pmutated , uint32_t branchpos , std :: vector<uint256> * pbranch)",86, 2, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"ComputeMerkleBranch( const std :: vector<uint256> & leaves , uint32_t position)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"BlockMerkleBranch( const CBlock & block , uint32_t position)",9, 2, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"BlockBuildMerkleTree( const CBlock & block , bool * fMutated , std :: vector<uint256> & vMerkleTree)",27, 2, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"BlockGetMerkleBranch( const CBlock & block , const std :: vector<uint256> & vMerkleTree , int nIndex)",13, 2, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"ctz( uint32_t i)",9, 2, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_test)",68, 2, 0, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"TestVector::TestVector( std :: string strHexMasterIn)",1, 86, 4, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"TestVector::operator ( )( std :: string pub , std :: string prv , unsigned int nChild)",8, 6, 4, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"RunTest( const TestVector & test)",49, 2, 0, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip32_test1)",3, 2, 0, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip32_test2)",3, 2, 0, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip32_test3)",3, 2, 0, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( osrandom_tests)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( fastrandom_tests)",33, 2, 0, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( fastrandom_randbits)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( stdrandom_test)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( shuffle_stat_test)",28, 2, 0, 0
repos/cpp/bitcoin/src/test/base58_tests.cpp,"BOOST_AUTO_TEST_CASE( base58_EncodeBase58)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/base58_tests.cpp,"BOOST_AUTO_TEST_CASE( base58_DecodeBase58)",27, 2, 0, 0
repos/cpp/bitcoin/src/test/multisig_tests.cpp,"sign_multisig( const CScript & scriptPubKey , const std :: vector<CKey> & keys , const CTransaction & transaction , int whichIn)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/multisig_tests.cpp,"BOOST_AUTO_TEST_CASE( multisig_verify)",99, 2, 0, 0
repos/cpp/bitcoin/src/test/multisig_tests.cpp,"BOOST_AUTO_TEST_CASE( multisig_IsStandard)",35, 2, 0, 0
repos/cpp/bitcoin/src/test/multisig_tests.cpp,"BOOST_AUTO_TEST_CASE( multisig_Sign)",41, 2, 0, 0
repos/cpp/bitcoin/src/test/base64_tests.cpp,"BOOST_AUTO_TEST_CASE( base64_testvectors)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin_fuzzy.cpp,"read_stdin( std :: vector<uint8_t> & data)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin_fuzzy.cpp,"test_one_input( std :: vector<uint8_t> buffer)",211, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin_fuzzy.cpp,"initialize()",3, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin_fuzzy.cpp,"LLVMFuzzerTestOneInput( const uint8_t * data , size_t size)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin_fuzzy.cpp,"LLVMFuzzerInitialize( int * argc , char ** * argv)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin_fuzzy.cpp,"main( int argc , char ** argv)",29, 2, 0, 0
repos/cpp/bitcoin/src/test/skiplist_tests.cpp,"BOOST_AUTO_TEST_CASE( skiplist_test)",28, 2, 0, 0
repos/cpp/bitcoin/src/test/skiplist_tests.cpp,"BOOST_AUTO_TEST_CASE( getlocator_test)",55, 2, 0, 0
repos/cpp/bitcoin/src/test/skiplist_tests.cpp,"BOOST_AUTO_TEST_CASE( findearliestatleast_test)",43, 2, 0, 0
repos/cpp/bitcoin/src/test/skiplist_tests.cpp,"BOOST_AUTO_TEST_CASE( findearliestatleast_edge_test)",32, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"ParseScriptFlags( std :: string strFlags)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"FormatScriptFlags( unsigned int flags)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( tx_valid)",84, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( tx_invalid)",85, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( basic_transaction_tests)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"SetupDummyInputs( CBasicKeyStore & keystoreRet , CCoinsViewCache & coinsRet)",30, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( test_Get)",25, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"CreateCreditAndSpend( const CKeyStore & keystore , const CScript & outscript , CTransactionRef & output , CMutableTransaction & input , bool success = true)",37, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"CheckWithFlag( const CTransactionRef & output , const CMutableTransaction & input , int flags , bool success)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"PushAll( const std :: vector<valtype> & values)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"ReplaceRedeemScript( CScript & script , const CScript & redeemScript)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( test_big_witness_transaction)",79, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"CombineSignatures( const CMutableTransaction & input1 , const CMutableTransaction & input2 , const CTransactionRef tx)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( test_witness)",173, 2, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( test_IsStandard)",90, 2, 0, 0
repos/cpp/bitcoin/src/test/main_tests.cpp,"TestBlockSubsidyHalvings( const Consensus :: Params & consensusParams)",16, 2, 0, 0
repos/cpp/bitcoin/src/test/main_tests.cpp,"TestBlockSubsidyHalvings( int nSubsidyHalvingInterval)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/main_tests.cpp,"BOOST_AUTO_TEST_CASE( block_subsidy_test)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/main_tests.cpp,"BOOST_AUTO_TEST_CASE( subsidy_limit_test)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/main_tests.cpp,"ReturnFalse()",1, 44, 0, 0
repos/cpp/bitcoin/src/test/main_tests.cpp,"ReturnTrue()",1, 42, 0, 0
repos/cpp/bitcoin/src/test/main_tests.cpp,"BOOST_AUTO_TEST_CASE( test_combiner_all)",13, 2, 0, 0
repos/cpp/bitcoin/src/test/streams_tests.cpp,"BOOST_AUTO_TEST_CASE( streams_vector_writer)",57, 2, 0, 0
repos/cpp/bitcoin/src/test/streams_tests.cpp,"BOOST_AUTO_TEST_CASE( streams_vector_reader)",44, 2, 0, 0
repos/cpp/bitcoin/src/test/streams_tests.cpp,"BOOST_AUTO_TEST_CASE( bitstream_reader_writer)",34, 2, 0, 0
repos/cpp/bitcoin/src/test/streams_tests.cpp,"BOOST_AUTO_TEST_CASE( streams_serializedata_xor)",54, 2, 0, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestTime( int nHeight)",1, 76, 0, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::BeginTime( const Consensus :: Params & params) const",1, 98, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::EndTime( const Consensus :: Params & params) const",1, 96, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::Period( const Consensus :: Params & params) const",1, 80, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::Threshold( const Consensus :: Params & params) const",1, 82, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::Condition( const CBlockIndex * pindex , const Consensus :: Params & params) const",1, 133, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::GetStateFor( const CBlockIndex * pindexPrev) const",1, 159, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::GetStateSinceHeightFor( const CBlockIndex * pindexPrev) const",1, 170, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestAlwaysActiveConditionChecker::BeginTime( const Consensus :: Params & params) const",1, 123, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::VersionBitsTester()",1, 36, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::Reset()",11, 6, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::~VersionBitsTester()",3, 6, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::Mine( unsigned int height , int32_t nTime , int32_t nVersion)",12, 6, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestStateSinceHeight( int height)",10, 6, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestDefined()",10, 6, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestStarted()",10, 6, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestLockedIn()",10, 6, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestActive()",10, 6, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestFailed()",10, 6, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::Tip()",1, 78, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"BOOST_AUTO_TEST_CASE( versionbits_test)",87, 2, 0, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"BOOST_AUTO_TEST_CASE( versionbits_computeblockversion)",103, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestVector( const Hasher & h , const In & in , const Out & out)",27, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestSHA1( const std :: string & in , const std :: string & hexout)",1, 117, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestSHA256( const std :: string & in , const std :: string & hexout)",1, 121, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestSHA512( const std :: string & in , const std :: string & hexout)",1, 121, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestRIPEMD160( const std :: string & in , const std :: string & hexout)",1, 127, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestHMACSHA256( const std :: string & hexkey , const std :: string & hexin , const std :: string & hexout)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestHMACSHA512( const std :: string & hexkey , const std :: string & hexin , const std :: string & hexout)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestAES128( const std :: string & hexkey , const std :: string & hexin , const std :: string & hexout)",19, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestAES256( const std :: string & hexkey , const std :: string & hexin , const std :: string & hexout)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestAES128CBC( const std :: string & hexkey , const std :: string & hexiv , bool pad , const std :: string & hexin , const std :: string & hexout)",40, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestAES256CBC( const std :: string & hexkey , const std :: string & hexiv , bool pad , const std :: string & hexin , const std :: string & hexout)",40, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestChaCha20( const std :: string & hexkey , uint64_t nonce , uint64_t seek , const std :: string & hexout)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"LongTestString()",11, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( ripemd160_testvectors)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( sha1_testvectors)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( sha256_testvectors)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( sha512_testvectors)",36, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( hmac_sha256_testvectors)",52, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( hmac_sha512_testvectors)",67, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( aes_testvectors)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( aes_cbc_testvectors)",50, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( chacha20_testvector)",29, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( countbits_tests)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( sha256d64)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/sanity_tests.cpp,"BOOST_AUTO_TEST_CASE( basic_sanity)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/txvalidation_tests.cpp,"BOOST_FIXTURE_TEST_CASE( tx_mempool_reject_coinbase , TestChain100Setup)",39, 2, 0, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"HasReason::HasReason( const std :: string & reason)",1, 72, 4, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"HasReason::operator ( )( const std :: runtime_error & e) const",3, 7, 4, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"AssemblerForTest( const CChainParams & params)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"CreateBlockIndex( int nHeight)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"EXCLUSIVE_LOCKS_REQUIRED( :: mempool . cs)",101, 2, 0, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"BOOST_AUTO_TEST_CASE( CreateNewBlock_validity)",318, 2, 0, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"ResetArgs( const std :: string & strArg)",17, 2, 0, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"SetupArgs( const std :: vector<std::string> & args)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( boolarg)",52, 2, 0, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( stringarg)",24, 2, 0, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( intarg)",19, 2, 0, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( doubledash)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( boolargno)",23, 2, 0, 0
repos/cpp/bitcoin/src/test/key_properties.cpp,"RC_BOOST_PROP( key_uniqueness ,(const CKey&key1,const CKey&key2))",4, 2, 0, 0
repos/cpp/bitcoin/src/test/key_properties.cpp,"RC_BOOST_PROP( key_generates_correct_pubkey ,(const CKey&key))",5, 2, 0, 0
repos/cpp/bitcoin/src/test/key_properties.cpp,"RC_BOOST_PROP( key_set_symmetry ,(const CKey&key))",6, 2, 0, 0
repos/cpp/bitcoin/src/test/key_properties.cpp,"RC_BOOST_PROP( key_sign_symmetry ,(const CKey&key,const uint256&hash))",7, 2, 0, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"RegtestingSetup::RegtestingSetup()",1, 67, 4, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BuildBlockTestCase()",31, 2, 0, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( SimpleRoundTripTest)",55, 2, 0, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"TestHeaderAndShortIDs::TestHeaderAndShortIDs( const CBlockHeaderAndShortTxIDs & orig)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"TestHeaderAndShortIDs::TestHeaderAndShortIDs( const CBlock & block)",2, 73, 8, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"TestHeaderAndShortIDs::GetShortID( const uint256 & txhash) const",7, 6, 4, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"TestHeaderAndShortIDs::SerializationOp( Stream & s , Operation ser_action)",15, 6, 4, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( NonCoinbasePreforwardRTTest)",69, 2, 0, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( SufficientPreforwardRTTest)",50, 2, 0, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( EmptyBlockRoundTripTest)",43, 2, 0, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( TransactionsRequestSerializationTest)",22, 2, 0, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( TransactionsRequestDeserializationMaxTest)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( TransactionsRequestDeserializationOverflowTest)",29, 2, 0, 0
repos/cpp/bitcoin/src/test/fs_tests.cpp,"BOOST_AUTO_TEST_CASE( fsbridge_fstream)",43, 2, 0, 0
repos/cpp/bitcoin/src/test/txvalidationcache_tests.cpp,"ToMemPool( const CMutableTransaction & tx)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/txvalidationcache_tests.cpp,"BOOST_FIXTURE_TEST_CASE( tx_mempool_block_doublespend , TestChain100Setup)",57, 2, 0, 0
repos/cpp/bitcoin/src/test/txvalidationcache_tests.cpp,"ValidateCheckInputsForAllFlags( const CTransaction & tx , uint32_t failing_flags , bool add_to_cache)",38, 2, 0, 0
repos/cpp/bitcoin/src/test/txvalidationcache_tests.cpp,"BOOST_FIXTURE_TEST_CASE( checkinputs_test , TestChain100Setup)",226, 2, 0, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::local_check_equal( A a , B b)",4, 10, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::local_check( bool b)",4, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::test()",35, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::resize( Size s)",7, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::reserve( Size s)",7, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::insert( Size position , const T & value)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::insert( Size position , Size count , const T & value)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::insert_range( Size position , I first , I last)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::erase( Size position)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::erase( Size first , Size last)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::update( Size pos , const T & value)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::push_back( const T & value)",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::pop_back()",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::clear()",4, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::assign( Size n , const T & value)",4, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::size() const",3, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::capacity() const",3, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::shrink_to_fit()",4, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::swap()",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::move()",6, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::copy()",4, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::~prevector_tester()",3, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::prevector_tester()",5, 6, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"BOOST_AUTO_TEST_CASE( PrevectorTestInt)",69, 2, 0, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"Serialize( const CScript & s)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"Verify( const CScript & scriptSig , const CScript & scriptPubKey , bool fStrict , ScriptError & err)",17, 2, 0, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( sign)",73, 2, 0, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( norecurse)",26, 2, 0, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( set)",54, 2, 0, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( is)",30, 2, 0, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( switchover)",19, 2, 0, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( AreInputsStandard)",110, 2, 0, 0
repos/cpp/bitcoin/src/test/bech32_tests.cpp,"CaseInsensitiveEqual( const std :: string & s1 , const std :: string & s2)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/bech32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip173_testvectors_valid)",19, 2, 0, 0
repos/cpp/bitcoin/src/test/bech32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip173_testvectors_invalid)",23, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"ResolveIP( const char * ip)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"ResolveSubNet( const char * subnet)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"CreateInternal( const char * host)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_networks)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_properties)",27, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"TestSplitHost( std :: string test , std :: string host , int port)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_splithost)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"TestParse( std :: string src , std :: string canon)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_lookupnumeric)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( onioncat_test)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( subnet_test)",146, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_getgroup)",20, 2, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_parsenetwork)",17, 2, 0, 0
repos/cpp/bitcoin/src/test/limitedmap_tests.cpp,"BOOST_AUTO_TEST_CASE( limitedmap_test)",87, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( bloom_create_insert_serialize)",30, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( bloom_create_insert_serialize_with_tweak)",27, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( bloom_create_insert_key)",23, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( bloom_match)",68, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_block_1)",40, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_block_2)",54, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_block_2_with_update_none)",51, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_block_3_and_serialize)",38, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_block_4)",45, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_block_4_test_p2pubkey_only)",22, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_block_4_test_update_none)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"RandomData()",5, 2, 0, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( rolling_bloom)",73, 2, 0, 0
repos/cpp/bitcoin/src/test/scheduler_tests.cpp,"microTask( CScheduler & s , boost :: mutex & mutex , int & counter , int delta , boost :: chrono :: system_clock :: time_point rescheduleTime)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/scheduler_tests.cpp,"MicroSleep( uint64_t n)",11, 2, 0, 0
repos/cpp/bitcoin/src/test/scheduler_tests.cpp,"BOOST_AUTO_TEST_CASE( manythreads)",73, 2, 0, 0
repos/cpp/bitcoin/src/test/scheduler_tests.cpp,"BOOST_AUTO_TEST_CASE( singlethreadedscheduler_ordered)",43, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"verify( const CScriptNum10 & bignum , const CScriptNum & scriptnum)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckCreateVch( const int64_t & num)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckCreateInt( const int64_t & num)",9, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckAdd( const int64_t & num1 , const int64_t & num2)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckNegate( const int64_t & num)",9, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckSubtract( const int64_t & num1 , const int64_t & num2)",24, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckCompare( const int64_t & num1 , const int64_t & num2)",35, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"RunCreate( const int64_t & num)",11, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"RunOperators( const int64_t & num1 , const int64_t & num2)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"BOOST_AUTO_TEST_CASE( creation)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"BOOST_AUTO_TEST_CASE( operators)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/torcontrol_tests.cpp,"CheckSplitTorReplyLine( std :: string input , std :: string command , std :: string args)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/torcontrol_tests.cpp,"BOOST_AUTO_TEST_CASE( util_SplitTorReplyLine)",32, 2, 0, 0
repos/cpp/bitcoin/src/test/torcontrol_tests.cpp,"CheckParseTorReplyMapping( std :: string input , std :: map<std::string,std::string> expected)",14, 2, 0, 0
repos/cpp/bitcoin/src/test/torcontrol_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ParseTorReplyMapping)",129, 2, 0, 0
repos/cpp/bitcoin/src/test/key_tests.cpp,"BOOST_AUTO_TEST_CASE( key_test1)",121, 2, 0, 0
repos/cpp/bitcoin/src/test/key_tests.cpp,"BOOST_AUTO_TEST_CASE( key_signature_tests)",35, 2, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( test_cuckoocache_no_fakes)",13, 3, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"test_cache( size_t megabytes , double load)",29, 2, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"normalize_hit_rate( double hits , double load)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( cuckoocache_hit_rate_ok)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"test_cache_erase( size_t megabytes)",55, 2, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( cuckoocache_erase_ok)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"test_cache_erase_parallel( size_t megabytes)",80, 2, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( cuckoocache_erase_parallel_ok)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"test_cache_generations()",89, 2, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( cuckoocache_generations)",4, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FakeCheck::operator ( )()",4, 6, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FakeCheck::swap( FakeCheck & x)",1, 31, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FakeCheckCheckCompletion::operator ( )()",5, 6, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FakeCheckCheckCompletion::swap( FakeCheckCheckCompletion & x)",1, 46, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FailingCheck::FailingCheck( bool _fails)",1, 49, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FailingCheck::FailingCheck()",1, 36, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FailingCheck::operator ( )()",4, 6, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FailingCheck::swap( FailingCheck & x)",4, 7, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"UniqueCheck::UniqueCheck( size_t check_id_in)",1, 63, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"UniqueCheck::UniqueCheck()",1, 35, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"UniqueCheck::operator ( )()",6, 6, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"UniqueCheck::swap( UniqueCheck & x)",1, 68, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::operator ( )()",4, 6, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::MemoryCheck()",1, 21, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::MemoryCheck( const MemoryCheck & x)",8, 7, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::MemoryCheck( bool b_)",4, 7, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::~MemoryCheck()",4, 7, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::swap( MemoryCheck & x)",1, 54, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FrozenCleanupCheck::operator ( )()",4, 6, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FrozenCleanupCheck::FrozenCleanupCheck()",1, 28, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FrozenCleanupCheck::~FrozenCleanupCheck()",9, 6, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FrozenCleanupCheck::swap( FrozenCleanupCheck & x)",1, 82, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"Correct_Queue_range( std :: vector<size_t> range)",27, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Correct_Zero)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Correct_One)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Correct_Max)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Correct_Random)",8, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Catches_Failure)",31, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Recovers_From_Failure)",24, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_UniqueCheck)",29, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Memory)",28, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_FrozenCleanup)",40, 2, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueueControl_Locks)",59, 2, 0, 0
repos/cpp/bitcoin/src/test/policyestimator_tests.cpp,"BOOST_AUTO_TEST_CASE( BlockPolicyEstimates)",165, 2, 0, 0
repos/cpp/bitcoin/src/test/raii_event_tests.cpp,"tag_malloc( size_t sz)",7, 2, 0, 0
repos/cpp/bitcoin/src/test/raii_event_tests.cpp,"tag_free( void * mem)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/raii_event_tests.cpp,"BOOST_AUTO_TEST_CASE( raii_event_creation)",28, 2, 0, 0
repos/cpp/bitcoin/src/test/raii_event_tests.cpp,"BOOST_AUTO_TEST_CASE( raii_event_order)",21, 2, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"ArrayToString( const unsigned char A [ ] , unsigned int width)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"uint160S( const char * str)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"uint160S( const std :: string & str)",6, 2, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( basics)",51, 2, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( comparison)",31, 2, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( methods)",93, 2, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( conversion)",15, 2, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( operator_with_self)",12, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"CSerializeMethodsTestSingle::CSerializeMethodsTestSingle( int intvalin , bool boolvalin , std :: string stringvalin , const char * charstrvalin , const CTransactionRef & txvalin)",4, 6, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"CSerializeMethodsTestSingle::SerializationOp( Stream & s , Operation ser_action)",7, 6, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"CSerializeMethodsTestSingle::operator ==( const CSerializeMethodsTestSingle & rhs)",8, 6, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"CSerializeMethodsTestMany::SerializationOp( Stream & s , Operation ser_action)",3, 6, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( sizes)",30, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( floats_conversion)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( doubles_conversion)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( floats)",16, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( doubles)",16, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( varints)",31, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( varints_bitpatterns)",20, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( compactsize)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"isCanonicalException( const std :: ios_base :: failure & ex)",10, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( noncanonical)",36, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( insert_delete)",47, 2, 0, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( class_methods)",26, 2, 0, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"BOOST_AUTO_TEST_CASE( arena_tests)",114, 2, 0, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"TestLockedPageAllocator::TestLockedPageAllocator( int count_in , int lockedcount_in)",1, 111, 4, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"TestLockedPageAllocator::AllocateLocked( size_t len , bool * lockingSuccess)",15, 6, 4, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"TestLockedPageAllocator::FreeLocked( void * addr , size_t len)",3, 6, 4, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"TestLockedPageAllocator::GetLimit()",4, 6, 4, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"BOOST_AUTO_TEST_CASE( lockedpool_tests_mock)",45, 2, 0, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"BOOST_AUTO_TEST_CASE( lockedpool_tests_live)",23, 2, 0, 0
repos/cpp/bitcoin/src/test/merkleblock_tests.cpp,"BOOST_AUTO_TEST_CASE( merkleblock_construct_from_txids_found)",35, 2, 0, 0
repos/cpp/bitcoin/src/test/merkleblock_tests.cpp,"BOOST_AUTO_TEST_CASE( merkleblock_construct_from_txids_not_found)",18, 2, 0, 0
repos/cpp/bitcoin/src/test/key_io_tests.cpp,"BOOST_AUTO_TEST_CASE( key_io_valid_parse)",59, 2, 0, 0
repos/cpp/bitcoin/src/test/key_io_tests.cpp,"BOOST_AUTO_TEST_CASE( key_io_valid_gen)",35, 2, 0, 0
repos/cpp/bitcoin/src/test/key_io_tests.cpp,"BOOST_AUTO_TEST_CASE( key_io_invalid)",26, 2, 0, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"CAddrManSerializationMock::MakeDeterministic()",5, 6, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"CAddrManUncorrupted::Serialize( CDataStream & s) const",4, 6, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"CAddrManCorrupted::Serialize( CDataStream & s) const",21, 6, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"AddrmanToStream( CAddrManSerializationMock & _addrman)",9, 2, 0, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( cnode_listen_port)",11, 2, 0, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( caddrdb_read)",44, 2, 0, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( caddrdb_read_corrupted)",31, 2, 0, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( cnode_simple_test)",23, 2, 0, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( ipv4_peer_with_ipv6_addrMe_test)",36, 2, 0, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"Serialize( const CScript & s)",5, 2, 0, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"BOOST_AUTO_TEST_CASE( GetSigOpCount)",37, 2, 0, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"VerifyWithFlag( const CTransaction & output , const CMutableTransaction & input , int flags)",9, 2, 0, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"BuildTxs( CMutableTransaction & spendingTx , CCoinsViewCache & coins , CMutableTransaction & creationTx , const CScript & scriptPubKey , const CScript & scriptSig , const CScriptWitness & witness)",22, 2, 0, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"BOOST_AUTO_TEST_CASE( GetTxSigOpCost)",123, 2, 0, 0
repos/cpp/bitcoin/src/test/gen/crypto_gen.cpp,"MultisigKeys()",6, 3, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"CDiskTxPos::SerializationOp( Stream & s , Operation ser_action)",4, 6, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"CDiskTxPos::CDiskTxPos( const CDiskBlockPos & blockIn , unsigned int nTxOffsetIn)",2, 6, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"CDiskTxPos::CDiskTxPos()",3, 6, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"CDiskTxPos::SetNull()",4, 6, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::DB::DB( size_t n_cache_size , bool f_memory , bool f_wipe)",3, 3, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::DB::ReadTxPos( const uint256 & txid , CDiskTxPos & pos) const",4, 2, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::DB::WriteTxs( const std :: vector<std::pair<uint256,CDiskTxPos>> & v_pos)",8, 2, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"WriteTxIndexMigrationBatches( CDBWrapper & newdb , CDBWrapper & olddb , CDBBatch & batch_newdb , CDBBatch & batch_olddb , const std :: pair<unsigned char,uint256> & begin_key , const std :: pair<unsigned char,uint256> & end_key)",13, 2, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::DB::MigrateData( CBlockTreeDB & block_tree_db , const CBlockLocator & best_locator)",119, 2, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::TxIndex( size_t n_cache_size , bool f_memory , bool f_wipe)",3, 3, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::~TxIndex()",1, 23, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::Init()",13, 2, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::WriteBlock( const CBlock & block , const CBlockIndex * pindex)",11, 2, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::GetDB() const",1, 56, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::FindTx( const uint256 & tx_hash , uint256 & block_hash , CTransactionRef & tx) const",27, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"FatalError( const char * fmt , const Args & ... args)",10, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::DB::DB( const fs :: path & path , size_t n_cache_size , bool f_memory , bool f_wipe , bool f_obfuscate)",3, 3, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::DB::ReadBestBlock( CBlockLocator & locator) const",8, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::DB::WriteBestBlock( const CBlockLocator & locator)",4, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::~BaseIndex()",5, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::Init()",12, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",15, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::ThreadSync()",58, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::WriteBestBlock( const CBlockIndex * block_index)",8, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::BlockConnected( const std :: shared_ptr<const CBlock> & block , const CBlockIndex * pindex , const std :: vector<CTransactionRef> & txn_conflicted)",37, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::ChainStateFlushed( const CBlockLocator & locator)",37, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::BlockUntilSyncedToCurrentChain()",23, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::Interrupt()",4, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::Start()",13, 2, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::Stop()",8, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqabstractnotifier.cpp,"CZMQAbstractNotifier::~CZMQAbstractNotifier()",4, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqabstractnotifier.cpp,"CZMQAbstractNotifier::NotifyBlock( const CBlockIndex *)",4, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqabstractnotifier.cpp,"CZMQAbstractNotifier::NotifyTransaction( const CTransaction &)",4, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqrpc.cpp,"getzmqnotifications( const JSONRPCRequest & request)",35, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqrpc.cpp,"RegisterZMQRPCCommands( CRPCTable & t)",6, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"zmq_send_multipart( void * sock , const void * data , size_t size , ...)",41, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQAbstractPublishNotifier::Initialize( void * pcontext)",48, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQAbstractPublishNotifier::Shutdown()",29, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQAbstractPublishNotifier::SendMessage( const char * command , const void * data , size_t size)",16, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQPublishHashBlockNotifier::NotifyBlock( const CBlockIndex * pindex)",9, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQPublishHashTransactionNotifier::NotifyTransaction( const CTransaction & transaction)",9, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQPublishRawBlockNotifier::NotifyBlock( const CBlockIndex * pindex)",20, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQPublishRawTransactionNotifier::NotifyTransaction( const CTransaction & transaction)",8, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"zmqError( const char * str)",4, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::CZMQNotificationInterface()",3, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::~CZMQNotificationInterface()",9, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::GetActiveNotifiers() const",8, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::Create()",40, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::Initialize()",39, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::Shutdown()",16, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::UpdatedBlockTip( const CBlockIndex * pindexNew , const CBlockIndex * pindexFork , bool fInitialDownload)",19, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::TransactionAddedToMempool( const CTransactionRef & ptx)",20, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::BlockConnected( const std :: shared_ptr<const CBlock> & pblock , const CBlockIndex * pindexConnected , const std :: vector<CTransactionRef> & vtxConflicted)",7, 2, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::BlockDisconnected( const std :: shared_ptr<const CBlock> & pblock)",7, 2, 0, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::PendingWalletTxImpl::PendingWalletTxImpl( CWallet & wallet)",1, 88, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::PendingWalletTxImpl::get()",1, 57, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::PendingWalletTxImpl::getVirtualSize()",1, 83, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::PendingWalletTxImpl::commit( WalletValueMap value_map , WalletOrderForm order_form , std :: string & reject_reason)",13, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::MakeWalletTx( interfaces :: Chain :: Lock & locked_chain , CWallet & wallet , const CWalletTx & wtx)",26, 2, 0, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::MakeWalletTxStatus( interfaces :: Chain :: Lock & locked_chain , const CWalletTx & wtx)",19, 2, 0, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::EXCLUSIVE_LOCKS_REQUIRED( wallet . cs_wallet)",9, 2, 0, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::WalletImpl( const std :: shared_ptr<CWallet> & wallet)",1, 118, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::encryptWallet( const SecureString & wallet_passphrase)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::isCrypted()",1, 63, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::lock()",1, 53, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::unlock( const SecureString & wallet_passphrase)",1, 111, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::isLocked()",1, 61, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::changeWalletPassphrase( const SecureString & old_wallet_passphrase , const SecureString & new_wallet_passphrase)",5, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::abortRescan()",1, 60, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::backupWallet( const std :: string & filename)",1, 104, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getWalletName()",1, 72, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getKeyFromPool( bool internal , CPubKey & pub_key)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getPubKey( const CKeyID & address , CPubKey & pub_key)",1, 118, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getPrivKey( const CKeyID & address , CKey & key)",1, 105, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::isSpendable( const CTxDestination & dest)",1, 112, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::haveWatchOnly()",1, 72, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::setAddressBook( const CTxDestination & dest , const std :: string & name , const std :: string & purpose)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::delAddressBook( const CTxDestination & dest)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getAddress( const CTxDestination & dest , std :: string * name , isminetype * is_mine , std :: string * purpose)",21, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getAddresses()",9, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::learnRelatedScripts( const CPubKey & key , OutputType type)",1, 120, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::addDestData( const CTxDestination & dest , const std :: string & key , const std :: string & value)",5, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::eraseDestData( const CTxDestination & dest , const std :: string & key)",5, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getDestValues( const std :: string & prefix)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::lockCoin( const COutPoint & output)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::unlockCoin( const COutPoint & output)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::isLockedCoin( const COutPoint & output)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::listLockedCoins( std :: vector<COutPoint> & outputs)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::createTransaction( const std :: vector<CRecipient> & recipients , const CCoinControl & coin_control , bool sign , int & change_pos , CAmount & fee , std :: string & fail_reason)",16, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::transactionCanBeAbandoned( const uint256 & txid)",1, 118, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::abandonTransaction( const uint256 & txid)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::transactionCanBeBumped( const uint256 & txid)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::createBumpTransaction( const uint256 & txid , const CCoinControl & coin_control , CAmount total_fee , std :: vector<std::string> & errors , CAmount & old_fee , CAmount & new_fee , CMutableTransaction & mtx)",11, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::signBumpTransaction( CMutableTransaction & mtx)",1, 119, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::commitBumpTransaction( const uint256 & txid , CMutableTransaction && mtx , std :: vector<std::string> & errors , uint256 & bumped_txid)",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getTx( const uint256 & txid)",10, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getWalletTx( const uint256 & txid)",10, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getWalletTxs()",11, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::tryGetTxStatus( const uint256 & txid , interfaces :: WalletTxStatus & tx_status , int & num_blocks)",20, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getWalletTxDetails( const uint256 & txid , WalletTxStatus & tx_status , WalletOrderForm & order_form , bool & in_mempool , int & num_blocks)",18, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getBalances()",14, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::tryGetBalances( WalletBalances & balances , int & num_blocks)",12, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getBalance()",1, 68, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getAvailableBalance( const CCoinControl & coin_control)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::txinIsMine( const CTxIn & txin)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::txoutIsMine( const CTxOut & txout)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getDebit( const CTxIn & txin , isminefilter filter)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getCredit( const CTxOut & txout , isminefilter filter)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::listCoins()",14, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getCoins( const std :: vector<COutPoint> & outputs)",18, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getRequiredFee( unsigned int tx_bytes)",1, 106, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getMinimumFee( unsigned int tx_bytes , const CCoinControl & coin_control , int * returned_target , FeeReason * reason)",12, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getConfirmTarget()",1, 83, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::hdEnabled()",1, 65, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::IsWalletFlagSet( uint64_t flag)",1, 92, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getDefaultAddressType()",1, 92, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getDefaultChangeType()",1, 90, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleUnload( UnloadFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleShowProgress( ShowProgressFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleStatusChanged( StatusChangedFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleAddressBookChanged( AddressBookChangedFn fn)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleTransactionChanged( TransactionChangedFn fn)",5, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleWatchOnlyChanged( WatchOnlyChangedFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::WalletClientImpl( Chain & chain , std :: vector<std::string> wallet_filenames)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::registerRpcs()",1, 83, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::verify()",1, 82, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::load()",1, 78, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::start( CScheduler & scheduler)",1, 83, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::flush()",1, 53, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::stop()",1, 51, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::~WalletClientImpl()",1, 54, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::MakeWallet( const std :: shared_ptr<CWallet> & wallet)",1, 118, 0, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::MakeWalletClient( Chain & chain , std :: vector<std::string> wallet_filenames)",4, 2, 0, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::lock( bool try_lock)",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::assumeLocked()",1, 92, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::MakeChain()",1, 71, 0, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::NodeImpl()",1, 53, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::parseParameters( int argc , const char * const argv [ ] , std :: string & error)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::readConfigFiles( std :: string & error)",1, 101, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::softSetArg( const std :: string & arg , const std :: string & value)",1, 120, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::softSetBoolArg( const std :: string & arg , bool value)",1, 114, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::selectParams( const std :: string & network)",1, 86, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNetwork()",1, 77, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::initLogging()",1, 51, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::initParameterInteraction()",1, 77, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getWarnings( const std :: string & type)",1, 92, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getLogCategories()",1, 81, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::baseInitialize()",5, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::appInitMain()",1, 70, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::appShutdown()",5, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::startShutdown()",1, 55, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::shutdownRequested()",1, 70, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::mapPort( bool use_upnp)",9, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::setupServerArgs()",1, 66, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getProxy( Network net , proxyType & proxy_info)",1, 101, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNodeCount( CConnman :: NumConnections flags)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNodesStats( NodesStats & stats)",25, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getBanned( banmap_t & banmap)",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::ban( const CNetAddr & net_addr , BanReason reason , int64_t ban_time_offset)",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::unban( const CSubNet & ip)",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::disconnect( NodeId id)",7, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getTotalBytesRecv()",1, 100, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getTotalBytesSent()",1, 100, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getMempoolSize()",1, 66, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getMempoolDynamicUsage()",1, 88, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getHeaderTip( int & height , int64_t & block_time)",10, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNumBlocks()",5, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getLastBlockTime()",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getVerificationProgress()",9, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::isInitialBlockDownload()",1, 80, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getReindex()",1, 54, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getImporting()",1, 58, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::setNetworkActive( bool active)",6, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNetworkActive()",1, 92, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getMaxTxFee()",1, 58, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::estimateSmartFee( int num_blocks , bool conservative , int * returned_target = nullptr)",9, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getDustRelayFee()",1, 67, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::executeRpc( const std :: string & command , const UniValue & params , const std :: string & uri)",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::listRpcCommands()",1, 94, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::rpcSetTimerInterfaceIfUnset( RPCTimerInterface * iface)",1, 112, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::rpcUnsetTimerInterface( RPCTimerInterface * iface)",1, 102, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getUnspentOutput( const COutPoint & output , Coin & coin)",5, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getWalletDir()",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::listWalletDir()",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getWallets()",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleInitMessage( InitMessageFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleMessageBox( MessageBoxFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleQuestion( QuestionFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleShowProgress( ShowProgressFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleLoadWallet( LoadWalletFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyNumConnectionsChanged( NotifyNumConnectionsChangedFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyNetworkActiveChanged( NotifyNetworkActiveChangedFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyAlertChanged( NotifyAlertChangedFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleBannedListChanged( BannedListChangedFn fn)",4, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyBlockTip( NotifyBlockTipFn fn)",7, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyHeaderTip( NotifyHeaderTipFn fn)",8, 6, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::MakeNode()",1, 68, 0, 0
repos/cpp/bitcoin/src/interfaces/handler.cpp,"interfaces::HandlerImpl::HandlerImpl( boost :: signals2 :: connection connection)",1, 106, 4, 0
repos/cpp/bitcoin/src/interfaces/handler.cpp,"interfaces::HandlerImpl::disconnect()",1, 62, 4, 0
repos/cpp/bitcoin/src/interfaces/handler.cpp,"interfaces::MakeHandler( boost :: signals2 :: connection connection)",4, 2, 0, 0
repos/cpp/bitcoin/src/univalue/gen/gen.cpp,"initJsonEscape()",20, 2, 0, 0
repos/cpp/bitcoin/src/univalue/gen/gen.cpp,"outputEscape()",36, 2, 0, 0
repos/cpp/bitcoin/src/univalue/gen/gen.cpp,"main( int argc , char * argv [ ])",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_read.cpp,"json_isdigit( int ch)",4, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_read.cpp,"hatoui( const char * first , const char * last , unsigned int & out)",25, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_read.cpp,"getJsonToken( std :: string & tokenVal , unsigned int & consumed , const char * raw , const char * end)",195, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_read.cpp,"UniValue::read( const char * raw , size_t size)",198, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"ParsePrechecks( const std :: string & str)",10, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"ParseInt32( const std :: string & str , int32_t * out)",15, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"ParseInt64( const std :: string & str , int64_t * out)",14, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"ParseDouble( const std :: string & str , double * out)",13, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::getKeys() const",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::getValues() const",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_bool() const",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_str() const",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_int() const",9, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_int64() const",9, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_real() const",9, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_obj() const",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_array() const",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::clear()",7, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setNull()",5, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setBool( bool val_)",8, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"validNumStr( const std :: string & s)",7, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setNumStr( const std :: string & val_)",10, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setInt( uint64_t val_)",8, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setInt( int64_t val_)",8, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setFloat( double val_)",10, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setStr( const std :: string & val_)",7, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setArray()",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setObject()",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::push_back( const UniValue & val_)",8, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::push_backV( const std :: vector<UniValue> & vec)",9, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::__pushKV( const std :: string & key , const UniValue & val_)",5, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::pushKV( const std :: string & key , const UniValue & val_)",12, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::pushKVs( const UniValue & obj)",10, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::getObjMap( std :: map<std::string,UniValue> & kv) const",9, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::findKey( const std :: string & key , size_t & retIdx) const",11, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::checkObject( const std :: map<std::string,UniValue::VType> & t) const",17, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::operator [ ]( const std :: string & key) const",11, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::operator [ ]( size_t index) const",9, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"uvTypeName( UniValue :: VType t)",14, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"find_value( const UniValue & obj , const std :: string & name)",8, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"json_escape( const std :: string & inS)",17, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"UniValue::write( unsigned int prettyIndent , unsigned int indentLevel) const",33, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"indentStr( unsigned int prettyIndent , unsigned int indentLevel , std :: string & s)",4, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"UniValue::writeArray( unsigned int prettyIndent , unsigned int indentLevel , std :: string & s) const",21, 2, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"UniValue::writeObject( unsigned int prettyIndent , unsigned int indentLevel , std :: string & s) const",23, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/no_nul.cpp,"main( int argc , char * argv [ ])",6, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_constructor)",47, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_typecheck)",41, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_set)",58, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_array)",46, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_object)",115, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_readwrite)",42, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"main( int argc , char * argv [ ])",10, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/test_json.cpp,"main( int argc , char * argv [ ])",12, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"rtrim( std :: string s)",5, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"runtest( std :: string filename , const std :: string & jdata)",23, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"runtest_file( const char * filename_)",23, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"unescape_unicode_test()",21, 2, 0, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"main( int argc , char * argv [ ])",10, 2, 0, 0
repos/cpp/bitcoin/src/compat/strnlen.cpp,"strnlen( const char * start , size_t max_len)",6, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibcxx_sanity.cpp,"sanity_test_widen( char testchar)",5, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibcxx_sanity.cpp,"sanity_test_list( unsigned int size)",16, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibcxx_sanity.cpp,"sanity_test_range_fmt()",11, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibcxx_sanity.cpp,"glibcxx_sanity_test()",4, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibc_compat.cpp,"memcpy( void * a , const void * b , size_t c)",4, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibc_compat.cpp,"__fdelt_warn( FDELT_TYPE a)",6, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibc_compat.cpp,"__wrap___divmoddi4( int64_t u , int64_t v , int64_t * rp)",23, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibc_compat.cpp,"__wrap_log2f( float x)",4, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibc_sanity.cpp,"memcpy_int( void * a , const void * b , size_t c)",4, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibc_sanity.cpp,"sanity_test_memcpy()",15, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibc_sanity.cpp,"sanity_test_fdelt()",7, 2, 0, 0
repos/cpp/bitcoin/src/compat/glibc_sanity.cpp,"glibc_sanity_test()",8, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"set_success( ScriptError * ret)",6, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"set_error( ScriptError * ret , const ScriptError serror)",6, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CastToBool( const valtype & vch)",14, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"popstack( std :: vector<valtype> & stack)",6, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsCompressedOrUncompressedPubKey( const valtype & vchPubKey)",21, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsCompressedPubKey( const valtype & vchPubKey)",11, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsValidSignatureEncoding( const std :: vector<unsigned char> & sig)",64, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsLowDERSignature( const valtype & vchSig , ScriptError * serror)",16, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsDefinedHashtypeSignature( const valtype & vchSig)",10, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CheckSignatureEncoding( const std :: vector<unsigned char> & vchSig , unsigned int flags , ScriptError * serror)",16, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CheckPubKeyEncoding( const valtype & vchPubKey , unsigned int flags , const SigVersion & sigversion , ScriptError * serror)",10, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CheckMinimalPush( const valtype & data , opcodetype opcode)",24, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"FindAndDelete( CScript & script , const CScript & b)",27, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"EvalScript( std :: vector<std::vector<unsigned char>> & stack , const CScript & script , unsigned int flags , const BaseSignatureChecker & checker , SigVersion sigversion , ScriptError * serror)",804, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::CTransactionSignatureSerializer( const T & txToIn , const CScript & scriptCodeIn , unsigned int nInIn , int nHashTypeIn)",5, 59, 8, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::SerializeScriptCode( S & s) const",20, 6, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::SerializeInput( S & s , unsigned int nInput) const",19, 6, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::SerializeOutput( S & s , unsigned int nOutput) const",7, 6, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::Serialize( S & s) const",16, 6, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GetPrevoutHash( const T & txTo)",8, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GetSequenceHash( const T & txTo)",8, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GetOutputsHash( const T & txTo)",8, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"PrecomputedTransactionData::PrecomputedTransactionData( const T & txTo)",10, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"SignatureHash( const CScript & scriptCode , const T & txTo , unsigned int nIn , int nHashType , const CAmount & amount , SigVersion sigversion , const PrecomputedTransactionData * cache)",68, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GenericTransactionSignatureChecker<T>::VerifySignature( const std :: vector<unsigned char> & vchSig , const CPubKey & pubkey , const uint256 & sighash) const",4, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GenericTransactionSignatureChecker<T>::CheckSig( const std :: vector<unsigned char> & vchSigIn , const std :: vector<unsigned char> & vchPubKey , const CScript & scriptCode , SigVersion sigversion) const",20, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GenericTransactionSignatureChecker<T>::CheckLockTime( const CScriptNum & nLockTime) const",35, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GenericTransactionSignatureChecker<T>::CheckSequence( const CScriptNum & nSequence) const",45, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"VerifyWitnessProgram( const CScriptWitness & witness , int witversion , const std :: vector<unsigned char> & program , unsigned int flags , const BaseSignatureChecker & checker , ScriptError * serror)",52, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"VerifyScript( const CScript & scriptSig , const CScript & scriptPubKey , const CScriptWitness * witness , unsigned int flags , const BaseSignatureChecker & checker , ScriptError * serror)",118, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"WitnessSigOps( int witversion , const std :: vector<unsigned char> & witprogram , const CScriptWitness & witness)",15, 2, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CountWitnessSigOps( const CScript & scriptSig , const CScript & scriptPubKey , const CScriptWitness * witness , unsigned int flags)",30, 2, 0, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::TxInputStream( int nTypeIn , int nVersionIn , const unsigned char * txTo , size_t txToLen)",6, 7, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::read( char * pch , size_t nSize)",15, 6, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::operator > >( T && obj)",5, 6, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::GetVersion() const",1, 49, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::GetType() const",1, 43, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"set_error( bitcoinconsensus_error * ret , bitcoinconsensus_error serror)",6, 2, 0, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"verify_flags( unsigned int flags)",4, 2, 0, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"verify_script( const unsigned char * scriptPubKey , unsigned int scriptPubKeyLen , CAmount amount , const unsigned char * txTo , unsigned int txToLen , unsigned int nIn , unsigned int flags , bitcoinconsensus_error * err)",24, 2, 0, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"bitcoinconsensus_verify_script_with_amount( const unsigned char * scriptPubKey , unsigned int scriptPubKeyLen , int64_t amount , const unsigned char * txTo , unsigned int txToLen , unsigned int nIn , unsigned int flags , bitcoinconsensus_error * err)",7, 2, 0, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"bitcoinconsensus_verify_script( const unsigned char * scriptPubKey , unsigned int scriptPubKeyLen , const unsigned char * txTo , unsigned int txToLen , unsigned int nIn , unsigned int flags , bitcoinconsensus_error * err)",11, 2, 0, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"bitcoinconsensus_version()",5, 2, 0, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"PermitsUncompressed( IsMineSigVersion sigversion)",4, 2, 0, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"HaveKeys( const std :: vector<valtype> & pubkeys , const CKeyStore & keystore)",8, 2, 0, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"IsMineInner( const CKeyStore & keystore , const CScript & scriptPubKey , IsMineSigVersion sigversion)",114, 2, 0, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"IsMine( const CKeyStore & keystore , const CScript & scriptPubKey)",13, 2, 0, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"IsMine( const CKeyStore & keystore , const CTxDestination & dest)",5, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"GetOpName( opcodetype opcode)",137, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::GetSigOpCount( bool fAccurate) const",23, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::GetSigOpCount( const CScript & scriptSig) const",23, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsPayToScriptHash() const",8, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsPayToWitnessScriptHash() const",7, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsWitnessProgram( int & version , std :: vector<unsigned char> & program) const",15, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsPushOnly( const_iterator pc) const",16, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsPushOnly() const",4, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScriptWitness::ToString() const",11, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::HasValidOps() const",12, 2, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"GetScriptOp( CScriptBase :: const_iterator & pc , CScriptBase :: const_iterator end , opcodetype & opcodeRet , std :: vector<unsigned char> * pvchRet)",51, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"MutableTransactionSignatureCreator::MutableTransactionSignatureCreator( const CMutableTransaction * txToIn , unsigned int nInIn , const CAmount & amountIn , int nHashTypeIn)",1, 270, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"MutableTransactionSignatureCreator::CreateSig( const SigningProvider & provider , std :: vector<unsigned char> & vchSig , const CKeyID & address , const CScript & scriptCode , SigVersion sigversion) const",16, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"GetCScript( const SigningProvider & provider , const SignatureData & sigdata , const CScriptID & scriptid , CScript & script)",15, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"GetPubKey( const SigningProvider & provider , const SignatureData & sigdata , const CKeyID & address , CPubKey & pubkey)",17, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"CreateSig( const BaseSignatureCreator & creator , SignatureData & sigdata , const SigningProvider & provider , std :: vector<unsigned char> & sig_out , const CPubKey & pubkey , const CScript & scriptcode , SigVersion sigversion)",19, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignStep( const SigningProvider & provider , const BaseSignatureCreator & creator , const CScript & scriptPubKey , std :: vector<valtype> & ret , txnouttype & whichTypeRet , SigVersion sigversion , SignatureData & sigdata)",68, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PushAll( const std :: vector<valtype> & values)",14, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"ProduceSignature( const SigningProvider & provider , const BaseSignatureCreator & creator , const CScript & fromPubKey , SignatureData & sigdata)",55, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTInputSigned( PSBTInput & input)",4, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignPSBTInput( const SigningProvider & provider , PartiallySignedTransaction & psbt , int index , int sighash)",55, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignatureExtractorChecker::SignatureExtractorChecker( SignatureData & sigdata , BaseSignatureChecker & checker)",1, 125, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignatureExtractorChecker::CheckSig( const std :: vector<unsigned char> & scriptSig , const std :: vector<unsigned char> & vchPubKey , const CScript & scriptCode , SigVersion sigversion) const",9, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"Stacks::Stacks( const SignatureData & data)",3, 6, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DataFromTransaction( const CMutableTransaction & tx , unsigned int nIn , const CTxOut & txout)",64, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"UpdateInput( CTxIn & input , const SignatureData & data)",5, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignatureData::MergeSignatureData( SignatureData sigdata)",15, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignSignature( const SigningProvider & provider , const CScript & fromPubKey , CMutableTransaction & txTo , unsigned int nIn , const CAmount & amount , int nHashType)",11, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignSignature( const SigningProvider & provider , const CTransaction & txFrom , CMutableTransaction & txTo , unsigned int nIn , int nHashType)",9, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureChecker::DummySignatureChecker()",1, 31, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureChecker::CheckSig( const std :: vector<unsigned char> & scriptSig , const std :: vector<unsigned char> & vchPubKey , const CScript & scriptCode , SigVersion sigversion) const",1, 190, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureCreator::DummySignatureCreator( char r_len , char s_len)",1, 86, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureCreator::Checker() const",1, 83, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureCreator::CreateSig( const SigningProvider & provider , std :: vector<unsigned char> & vchSig , const CKeyID & keyid , const CScript & scriptCode , SigVersion sigversion) const",15, 6, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"LookupHelper( const M & map , const K & key , V & value)",9, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"IsSolvable( const SigningProvider & provider , const CScript & script)",18, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PartiallySignedTransaction::PartiallySignedTransaction( const CTransaction & tx)",5, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PartiallySignedTransaction::IsNull() const",4, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PartiallySignedTransaction::Merge( const PartiallySignedTransaction & psbt)",10, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PartiallySignedTransaction::IsSane() const",7, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTInput::IsNull() const",4, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTInput::FillSignatureData( SignatureData & sigdata) const",25, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTInput::FromSignatureData( const SignatureData & sigdata)",28, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTInput::Merge( const PSBTInput & input)",17, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTInput::IsSane() const",11, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTOutput::FillSignatureData( SignatureData & sigdata) const",12, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTOutput::FromSignatureData( const SignatureData & sigdata)",12, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTOutput::IsNull() const",4, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PSBTOutput::Merge( const PSBTOutput & output)",8, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"HidingSigningProvider::GetCScript( const CScriptID & scriptid , CScript & script) const",4, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"HidingSigningProvider::GetPubKey( const CKeyID & keyid , CPubKey & pubkey) const",4, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"HidingSigningProvider::GetKey( const CKeyID & keyid , CKey & key) const",5, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"HidingSigningProvider::GetKeyOrigin( const CKeyID & keyid , KeyOriginInfo & info) const",5, 2, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"FlatSigningProvider::GetCScript( const CScriptID & scriptid , CScript & script) const",1, 139, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"FlatSigningProvider::GetPubKey( const CKeyID & keyid , CPubKey & pubkey) const",1, 129, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"FlatSigningProvider::GetKeyOrigin( const CKeyID & keyid , KeyOriginInfo & info) const",1, 134, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"FlatSigningProvider::GetKey( const CKeyID & keyid , CKey & key) const",1, 114, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"Merge( const FlatSigningProvider & a , const FlatSigningProvider & b)",13, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptID::CScriptID( const CScript & in)",1, 84, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"WitnessV0ScriptHash::WitnessV0ScriptHash( const CScript & in)",4, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetTxnOutputType( txnouttype t)",16, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"MatchPayToPubkey( const CScript & script , valtype & pubkey)",12, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"MatchPayToPubkeyHash( const CScript & script , valtype & pubkeyhash)",8, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"IsSmallInteger( opcodetype opcode)",4, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"MatchMultisig( const CScript & script , unsigned int & required , std :: vector<valtype> & pubkeys)",17, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"Solver( const CScript & scriptPubKey , std :: vector<std::vector<unsigned char>> & vSolutionsRet)",64, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"ExtractDestination( const CScript & scriptPubKey , CTxDestination & addressRet)",43, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"ExtractDestinations( const CScript & scriptPubKey , txnouttype & typeRet , std :: vector<CTxDestination> & addressRet , int & nRequiredRet)",39, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::CScriptVisitor( CScript * scriptin)",1, 70, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const CNoDestination & dest) const",4, 6, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const CKeyID & keyID) const",5, 6, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const CScriptID & scriptID) const",5, 6, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const WitnessV0KeyHash & id) const",6, 6, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const WitnessV0ScriptHash & id) const",6, 6, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const WitnessUnknown & id) const",6, 6, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetScriptForDestination( const CTxDestination & dest)",7, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetScriptForRawPubKey( const CPubKey & pubKey)",4, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetScriptForMultisig( int nRequired , const std :: vector<CPubKey> & keys)",10, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetScriptForWitness( const CScript & redeemscript)",11, 2, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"IsValidDestination( const CTxDestination & dest)",3, 2, 0, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::CSignatureCache()",4, 6, 4, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::ComputeEntry( uint256 & entry , const uint256 & hash , const std :: vector<unsigned char> & vchSig , const CPubKey & pubkey)",4, 6, 4, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::Get( const uint256 & entry , const bool erase)",5, 6, 4, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::Set( uint256 & entry)",5, 6, 4, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::setup_bytes( size_t n)",4, 6, 4, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"InitSignatureCache()",9, 2, 0, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CachingTransactionSignatureChecker::VerifySignature( const std :: vector<unsigned char> & vchSig , const CPubKey & pubkey , const uint256 & sighash) const",12, 2, 0, 0
repos/cpp/bitcoin/src/script/script_error.cpp,"ScriptErrorString( const ScriptError serror)",94, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"FormatKeyPath( const KeyPath & path)",9, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::OriginString() const",4, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::OriginPubkeyProvider( KeyOriginInfo info , std :: unique_ptr<PubkeyProvider> provider)",1, 151, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::GetPubKey( int pos , const SigningProvider & arg , CPubKey * key , KeyOriginInfo & info) const",7, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::IsRange() const",1, 68, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::GetSize() const",1, 70, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::ToString() const",1, 106, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::ToPrivateString( const SigningProvider & arg , std :: string & ret) const",7, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::ConstPubkeyProvider( const CPubKey & pubkey)",1, 69, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::GetPubKey( int pos , const SigningProvider & arg , CPubKey * key , KeyOriginInfo & info) const",8, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::IsRange() const",1, 52, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::GetSize() const",1, 64, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::ToString() const",1, 95, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::ToPrivateString( const SigningProvider & arg , std :: string & ret) const",7, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::GetExtKey( const SigningProvider & arg , CExtKey & ret) const",11, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::IsHardened() const",8, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::BIP32PubkeyProvider( const CExtPubKey & extkey , KeyPath path , DeriveType derive)",1, 148, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::IsRange() const",1, 73, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::GetSize() const",1, 51, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::GetPubKey( int pos , const SigningProvider & arg , CPubKey * key , KeyOriginInfo & info) const",30, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::ToString() const",9, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::ToPrivateString( const SigningProvider & arg , std :: string & out) const",11, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ToStringExtra() const",1, 61, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::DescriptorImpl( std :: vector<std::unique_ptr<PubkeyProvider>> pubkeys , std :: unique_ptr<DescriptorImpl> script , const std :: string & name)",1, 224, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::IsSolvable() const",7, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::IsRange() const",10, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ToStringHelper( const SigningProvider * arg , std :: string & out , bool priv) const",24, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ToString() const",6, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ExpandHelper( int pos , const SigningProvider & arg , Span<const unsigned char> * cache_read , std :: vector<CScript> & output_scripts , FlatSigningProvider & out , std :: vector<unsigned char> * cache_write) const",50, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::Expand( int pos , const SigningProvider & provider , std :: vector<CScript> & output_scripts , FlatSigningProvider & out , std :: vector<unsigned char> * cache = nullptr) const",4, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ExpandFromCache( int pos , const std :: vector<unsigned char> & cache , std :: vector<CScript> & output_scripts , FlatSigningProvider & out) const",5, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Singleton( T elem)",6, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"AddressDescriptor::ToStringExtra() const",1, 92, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"AddressDescriptor::MakeScripts( const std :: vector<CPubKey> & , const CScript * , FlatSigningProvider &) const",1, 181, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"AddressDescriptor::AddressDescriptor( CTxDestination destination)",1, 125, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"AddressDescriptor::IsSolvable() const",1, 52, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"RawDescriptor::ToStringExtra() const",1, 100, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"RawDescriptor::MakeScripts( const std :: vector<CPubKey> & , const CScript * , FlatSigningProvider &) const",1, 151, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"RawDescriptor::RawDescriptor( CScript script)",1, 98, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"RawDescriptor::IsSolvable() const",1, 52, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"PKDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider &) const",1, 178, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"PKDescriptor::PKDescriptor( std :: unique_ptr<PubkeyProvider> prov)",1, 113, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"PKHDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider &) const",1, 188, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"PKHDescriptor::PKHDescriptor( std :: unique_ptr<PubkeyProvider> prov)",1, 115, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"WPKHDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider &) const",1, 206, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"WPKHDescriptor::WPKHDescriptor( std :: unique_ptr<PubkeyProvider> prov)",1, 117, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ComboDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider & out) const",14, 6, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ComboDescriptor::ComboDescriptor( std :: unique_ptr<PubkeyProvider> prov)",1, 119, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"MultisigDescriptor::ToStringExtra() const",1, 88, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"MultisigDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider &) const",1, 187, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"MultisigDescriptor::MultisigDescriptor( int threshold , std :: vector<std::unique_ptr<PubkeyProvider>> providers)",1, 173, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"SHDescriptor::MakeScripts( const std :: vector<CPubKey> & , const CScript * script , FlatSigningProvider &) const",1, 193, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"SHDescriptor::SHDescriptor( std :: unique_ptr<DescriptorImpl> desc)",1, 102, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"WSHDescriptor::MakeScripts( const std :: vector<CPubKey> & , const CScript * script , FlatSigningProvider &) const",1, 203, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"WSHDescriptor::WSHDescriptor( std :: unique_ptr<DescriptorImpl> desc)",1, 104, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Const( const std :: string & str , Span<const char> & sp)",8, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Func( const std :: string & str , Span<const char> & sp)",8, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Expr( Span<const char> & sp)",18, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Split( const Span<const char> & sp , char sep)",15, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ParseKeyPath( const std :: vector<Span<const char>> & split , KeyPath & out)",15, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ParsePubkeyInner( const Span<const char> & sp , bool permit_uncompressed , FlatSigningProvider & out)",36, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ParsePubkey( const Span<const char> & sp , bool permit_uncompressed , FlatSigningProvider & out)",20, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ParseScript( Span<const char> & sp , ParseScriptContext ctx , FlatSigningProvider & out)",69, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"InferPubkey( const CPubKey & pubkey , ParseScriptContext , const SigningProvider & provider)",9, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"InferScript( const CScript & script , ParseScriptContext ctx , const SigningProvider & provider)",63, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Parse( const std :: string & descriptor , FlatSigningProvider & out)",7, 2, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"InferDescriptor( const CScript & script , const SigningProvider & provider)",4, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"COutPoint::ToString() const",4, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxIn::CTxIn( COutPoint prevoutIn , CScript scriptSigIn , uint32_t nSequenceIn)",6, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxIn::CTxIn( uint256 hashPrevTx , uint32_t nOut , CScript scriptSigIn , uint32_t nSequenceIn)",6, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxIn::ToString() const",14, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxOut::CTxOut( const CAmount & nValueIn , CScript scriptPubKeyIn)",5, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxOut::ToString() const",4, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CMutableTransaction::CMutableTransaction()",1, 102, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CMutableTransaction::CMutableTransaction( const CTransaction & tx)",1, 145, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CMutableTransaction::GetHash() const",4, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::ComputeHash() const",4, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::ComputeWitnessHash() const",7, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::CTransaction()",1, 129, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::CTransaction( const CMutableTransaction & tx)",1, 197, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::CTransaction( CMutableTransaction && tx)",1, 214, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::GetValueOut() const",10, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::GetTotalSize() const",4, 2, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::ToString() const",17, 2, 0, 0
repos/cpp/bitcoin/src/primitives/block.cpp,"CBlockHeader::GetHash() const",4, 2, 0, 0
repos/cpp/bitcoin/src/primitives/block.cpp,"CBlock::ToString() const",15, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCServer::OnStarted( std :: function<void()> slot)",4, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCServer::OnStopped( std :: function<void()> slot)",4, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCTypeCheck( const UniValue & params , const std :: list<UniValueType> & typesExpected , bool fAllowNull)",16, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCTypeCheckArgument( const UniValue & value , const UniValueType & typeExpected)",6, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCTypeCheckObj( const UniValue & o , const std :: map<std::string,UniValueType> & typesExpected , bool fAllowNull , bool fStrict)",29, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"AmountFromValue( const UniValue & value)",11, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"ParseHashV( const UniValue & v , std :: string strName)",9, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"ParseHashO( const UniValue & o , std :: string strKey)",4, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"ParseHexV( const UniValue & v , std :: string strName)",9, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"ParseHexO( const UniValue & o , std :: string strKey)",4, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::help( const std :: string & strCommand , const JSONRPCRequest & helpreq) const",53, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"help( const JSONRPCRequest & jsonRequest)",20, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"stop( const JSONRPCRequest & jsonRequest)",19, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"uptime( const JSONRPCRequest & jsonRequest)",16, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::CRPCTable()",11, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::operator [ ]( const std :: string & name) const",7, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::appendCommand( const std :: string & name , const CRPCCommand * pcmd)",13, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"StartRPC()",6, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"InterruptRPC()",6, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"StopRPC()",7, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"IsRPCRunning()",4, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"SetRPCWarmupStatus( const std :: string & newStatus)",5, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"SetRPCWarmupFinished()",6, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCIsInWarmup( std :: string * outStatus)",7, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"JSONRPCRequest::parse( const UniValue & valRequest)",32, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"IsDeprecatedRPCEnabled( const std :: string & method)",6, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"JSONRPCExecOne( JSONRPCRequest jreq , const UniValue & req)",22, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"JSONRPCExecBatch( const JSONRPCRequest & jreq , const UniValue & vReq)",8, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"transformNamedArguments( const JSONRPCRequest & in , const std :: vector<std::string> & argNames)",45, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::execute( const JSONRPCRequest & request) const",30, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::listCommands() const",10, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"HelpExampleCli( const std :: string & methodname , const std :: string & args)",4, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"HelpExampleRpc( const std :: string & methodname , const std :: string & args)",5, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCSetTimerInterfaceIfUnset( RPCTimerInterface * iface)",5, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCSetTimerInterface( RPCTimerInterface * iface)",4, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCUnsetTimerInterface( RPCTimerInterface * iface)",5, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCRunLater( const std :: string & name , std :: function<void()> func , int64_t nSeconds)",8, 2, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCSerializationFlags()",7, 2, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"HexToPubKey( const std :: string & hex_in)",11, 2, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"AddrToPubKey( CKeyStore * const keystore , const std :: string & addr_in)",19, 2, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"CreateMultisigRedeemscript( const int required , const std :: vector<CPubKey> & pubkeys)",21, 2, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::DescribeAddressVisitor()",1, 41, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const CNoDestination & dest) const",4, 6, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const CKeyID & keyID) const",7, 6, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const CScriptID & scriptID) const",7, 6, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const WitnessV0KeyHash & id) const",9, 6, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const WitnessV0ScriptHash & id) const",9, 6, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const WitnessUnknown & id) const",8, 6, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddress( const CTxDestination & dest)",4, 2, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"Section::Section( const std :: string & left , const std :: string & right)",2, 42, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"Sections::PushSection( const Section & s)",5, 6, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"Sections::Push( const RPCArg & arg , const size_t current_indent = 5 , const OuterType outer_type = OuterType :: NAMED_ARG)",51, 6, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"Sections::ToString() const",36, 6, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCHelpMan::RPCHelpMan( const std :: string & name , const std :: string & description , const std :: vector<RPCArg> & args)",9, 2, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCHelpMan::ToString() const",44, 2, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCArg::ToDescriptionString( const bool implicitly_required) const",57, 2, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCArg::ToStringObj( const bool oneline) const",36, 2, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCArg::ToString( const bool oneline) const",39, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"validateaddress( const JSONRPCRequest & request)",47, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"createmultisig( const JSONRPCRequest & request)",64, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"verifymessage( const JSONRPCRequest & request)",57, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"signmessagewithprivkey( const JSONRPCRequest & request)",40, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"setmocktime( const JSONRPCRequest & request)",28, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"RPCLockedMemoryInfo()",12, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"RPCMallocInfo()",16, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"getmemoryinfo( const JSONRPCRequest & request)",48, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"EnableOrDisableLogCategories( UniValue cats , bool enable)",17, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"logging( const JSONRPCRequest & request)",69, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"echo( const JSONRPCRequest & request)",14, 2, 0, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"RegisterMiscRPCCommands( CRPCTable & t)",5, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"TxToJSON( const CTransaction & tx , const uint256 hashBlock , UniValue & entry)",25, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"getrawtransaction( const JSONRPCRequest & request)",139, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"gettxoutproof( const JSONRPCRequest & request)",93, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"verifytxoutproof( const JSONRPCRequest & request)",42, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"ConstructTransaction( const UniValue & inputs_in , const UniValue & outputs_in , const UniValue & locktime , const UniValue & rbf)",112, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"createrawtransaction( const JSONRPCRequest & request)",67, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"decoderawtransaction( const JSONRPCRequest & request)",74, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"decodescript( const JSONRPCRequest & request)",79, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"TxInErrorToJSON( const CTxIn & txin , UniValue & vErrorsRet , const std :: string & strMessage)",15, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"combinerawtransaction( const JSONRPCRequest & request)",83, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"SignTransaction( interfaces :: Chain & chain , CMutableTransaction & mtx , const UniValue & prevTxsUnival , CBasicKeyStore * keystore , bool is_temp_keystore , const UniValue & hashType)",138, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"signrawtransactionwithkey( const JSONRPCRequest & request)",81, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"signrawtransaction( const JSONRPCRequest & request)",7, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"sendrawtransaction( const JSONRPCRequest & request)",96, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"testmempoolaccept( const JSONRPCRequest & request)",82, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"WriteHDKeypath( std :: vector<uint32_t> & keypath)",18, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"decodepsbt( const JSONRPCRequest & request)",274, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"combinepsbt( const JSONRPCRequest & request)",53, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"finalizepsbt( const JSONRPCRequest & request)",64, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"createpsbt( const JSONRPCRequest & request)",74, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"converttopsbt( const JSONRPCRequest & request)",65, 2, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"RegisterRawTransactionRPCCommands( CRPCTable & t)",5, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getconnectioncount( const JSONRPCRequest & request)",19, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"ping( const JSONRPCRequest & request)",24, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getpeerinfo( const JSONRPCRequest & request)",127, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"addnode( const JSONRPCRequest & request)",48, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"disconnectnode( const JSONRPCRequest & request)",44, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getaddednodeinfo( const JSONRPCRequest & request)",68, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getnettotals( const JSONRPCRequest & request)",46, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"GetNetworksInfo()",20, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getnetworkinfo( const JSONRPCRequest & request)",76, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"setban( const JSONRPCRequest & request)",65, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"listbanned( const JSONRPCRequest & request)",33, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"clearbanned( const JSONRPCRequest & request)",18, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"setnetworkactive( const JSONRPCRequest & request)",21, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getnodeaddresses( const JSONRPCRequest & request)",52, 2, 0, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"RegisterNetRPCCommands( CRPCTable & t)",5, 2, 0, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"CRPCConvertTable::convert( const std :: string & method , int idx)",3, 6, 4, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"CRPCConvertTable::convert( const std :: string & method , const std :: string & name)",3, 6, 4, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"CRPCConvertTable::CRPCConvertTable()",12, 2, 0, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"ParseNonRFCJSONValue( const std :: string & strVal)",8, 2, 0, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"RPCConvertValues( const std :: string & strMethod , const std :: vector<std::string> & strParams)",18, 2, 0, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"RPCConvertNamedValues( const std :: string & strMethod , const std :: vector<std::string> & strParams)",24, 2, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCRequestObj( const std :: string & strMethod , const UniValue & params , const UniValue & id)",8, 2, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCReplyObj( const UniValue & result , const UniValue & error , const UniValue & id)",11, 2, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCReply( const UniValue & result , const UniValue & error , const UniValue & id)",5, 2, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCError( int code , const std :: string & message)",7, 2, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"GetAuthCookieFile( bool temp = false)",8, 2, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"GenerateAuthCookie( std :: string * cookie_out)",31, 2, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"GetAuthCookie( std :: string * cookie_out)",15, 2, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"DeleteAuthCookie()",8, 2, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCProcessBatchReply( const UniValue & in , size_t num)",19, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"GetDifficulty( const CBlockIndex * blockindex)",24, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"blockheaderToJSON( const CBlockIndex * blockindex)",29, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"blockToJSON( const CBlock & block , const CBlockIndex * blockindex , bool txDetails)",45, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockcount( const JSONRPCRequest & request)",17, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getbestblockhash( const JSONRPCRequest & request)",17, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"RPCNotifyBlockChange( bool ibd , const CBlockIndex * pindex)",9, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"waitfornewblock( const JSONRPCRequest & request)",39, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"waitforblock( const JSONRPCRequest & request)",43, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"waitforblockheight( const JSONRPCRequest & request)",43, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"syncwithvalidationinterfacequeue( const JSONRPCRequest & request)",15, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getdifficulty( const JSONRPCRequest & request)",17, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"EntryDescriptionString()",28, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"EXCLUSIVE_LOCKS_REQUIRED( :: mempool . cs)",59, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"mempoolToJSON( bool fVerbose)",27, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getrawmempool( const JSONRPCRequest & request)",33, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getmempoolancestors( const JSONRPCRequest & request)",65, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getmempooldescendants( const JSONRPCRequest & request)",65, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getmempoolentry( const JSONRPCRequest & request)",34, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockhash( const JSONRPCRequest & request)",26, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockheader( const JSONRPCRequest & request)",60, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"GetBlockChecked( const CBlockIndex * pblockindex)",18, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblock( const JSONRPCRequest & request)",82, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CCoinsStats::CCoinsStats()",1, 121, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"ApplyStats( CCoinsStats & stats , CHashWriter & ss , const uint256 & hash , const std :: map<uint32_t,Coin> & outputs)",17, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"GetUTXOStats( CCoinsView * view , CCoinsStats & stats)",37, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"pruneblockchain( const JSONRPCRequest & request)",50, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"gettxoutsetinfo( const JSONRPCRequest & request)",43, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"gettxout( const JSONRPCRequest & request)",78, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"verifychain( const JSONRPCRequest & request)",29, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"SoftForkMajorityDesc( int version , CBlockIndex * pindex , const Consensus :: Params & consensusParams)",19, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"SoftForkDesc( const std :: string & name , int version , CBlockIndex * pindex , const Consensus :: Params & consensusParams)",8, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"BIP9SoftForkDesc( const Consensus :: Params & consensusParams , Consensus :: DeploymentPos id)",31, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"BIP9SoftForkDescPushBack( UniValue & bip9_softforks , const Consensus :: Params & consensusParams , Consensus :: DeploymentPos id)",8, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockchaininfo( const JSONRPCRequest & request)",102, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CompareBlocksByHeight::operator ( )( const CBlockIndex * a , const CBlockIndex * b) const",10, 6, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getchaintips( const JSONRPCRequest & request)",104, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"mempoolInfoToJSON()",13, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getmempoolinfo( const JSONRPCRequest & request)",23, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"preciousblock( const JSONRPCRequest & request)",38, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"invalidateblock( const JSONRPCRequest & request)",39, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"reconsiderblock( const JSONRPCRequest & request)",38, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getchaintxstats( const JSONRPCRequest & request)",75, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CalculateTruncatedMedian( std :: vector<T> & scores)",14, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CalculatePercentilesByWeight( CAmount result [ NUM_GETBLOCKSTATS_PERCENTILES ] , std :: vector<std::pair<CAmount,int64_t>> & scores , int64_t total_weight)",28, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"SetHasKeys( const std :: set<T> & set)",1, 70, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"SetHasKeys( const std :: set<T> & set , const Tk & key , const Args & ... args)",4, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockstats( const JSONRPCRequest & request)",265, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"savemempool( const JSONRPCRequest & request)",23, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"FindScriptPubKey( std :: atomic<int> & scan_progress , const std :: atomic<bool> & should_abort , int64_t & count , CCoinsViewCursor * cursor , const std :: set<CScript> & needles , std :: map<COutPoint,Coin> & out_results)",27, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CoinsViewScanReserver::CoinsViewScanReserver()",1, 65, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CoinsViewScanReserver::reserve()",10, 6, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CoinsViewScanReserver::~CoinsViewScanReserver()",6, 6, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"scantxoutset( const JSONRPCRequest & request)",162, 2, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"RegisterBlockchainRPCCommands( CRPCTable & t)",5, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"ParseConfirmTarget( const UniValue & value)",9, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"GetNetworkHashPS( int lookup , int height)",36, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"getnetworkhashps( const JSONRPCRequest & request)",23, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"generateBlocks( std :: shared_ptr<CReserveScript> coinbaseScript , int nGenerate , uint64_t nMaxTries , bool keepScript)",47, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"generatetoaddress( const JSONRPCRequest & request)",37, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"getmininginfo( const JSONRPCRequest & request)",37, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"prioritisetransaction( const JSONRPCRequest & request)",35, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"BIP22ValidationResult( const CValidationState & state)",17, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"gbt_vb_name( const Consensus :: DeploymentPos pos)",8, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"getblocktemplate( const JSONRPCRequest & request)",390, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"submitblock_StateCatcher::submitblock_StateCatcher( const uint256 & hashIn)",1, 102, 4, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"submitblock_StateCatcher::BlockChecked( const CBlock & block , const CValidationState & stateIn)",6, 6, 4, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"submitblock( const JSONRPCRequest & request)",65, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"submitheader( const JSONRPCRequest & request)",37, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"estimatesmartfee( const JSONRPCRequest & request)",62, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"estimaterawfee( const JSONRPCRequest & request)",103, 2, 0, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"RegisterMiningRPCCommands( CRPCTable & t)",5, 2, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"GetDustThreshold( const CTxOut & txout , const CFeeRate & dustRelayFeeIn)",33, 2, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"IsDust( const CTxOut & txout , const CFeeRate & dustRelayFeeIn)",4, 2, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"IsStandard( const CScript & scriptPubKey , txnouttype & whichType)",22, 2, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"IsStandardTx( const CTransaction & tx , std :: string & reason)",63, 2, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"AreInputsStandard( const CTransaction & tx , const CCoinsViewCache & mapInputs)",29, 2, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"IsWitnessStandard( const CTransaction & tx , const CCoinsViewCache & mapInputs)",51, 2, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"GetVirtualTransactionSize( int64_t nWeight , int64_t nSigOpCost)",4, 2, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"GetVirtualTransactionSize( const CTransaction & tx , int64_t nSigOpCost)",4, 2, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"GetVirtualTransactionInputSize( const CTxIn & txin , int64_t nSigOpCost)",4, 2, 0, 0
repos/cpp/bitcoin/src/policy/feerate.cpp,"CFeeRate::CFeeRate( const CAmount & nFeePaid , size_t nBytes_)",10, 2, 0, 0
repos/cpp/bitcoin/src/policy/feerate.cpp,"CFeeRate::GetFee( size_t nBytes_) const",16, 2, 0, 0
repos/cpp/bitcoin/src/policy/feerate.cpp,"CFeeRate::ToString() const",4, 2, 0, 0
repos/cpp/bitcoin/src/policy/rbf.cpp,"SignalsOptInRBF( const CTransaction & tx)",9, 2, 0, 0
repos/cpp/bitcoin/src/policy/rbf.cpp,"IsRBFOptIn( const CTransaction & tx , CTxMemPool & pool)",31, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"StringForFeeEstimateHorizon( FeeEstimateHorizon horizon)",12, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"StringForFeeReason( FeeReason reason)",19, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"FeeModeFromString( const std :: string & mode_string , FeeEstimateMode & fee_estimate_mode)",13, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::GetMaxConfirms() const",1, 75, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::TxConfirmStats( const std :: vector<double> & defaultBuckets , const std :: map<double,unsigned int> & defaultBucketMap , unsigned int maxPeriods , double _decay , unsigned int _scale)",22, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::resizeInMemoryCounters( size_t newbuckets)",8, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::ClearCurrent( unsigned int nBlockHeight)",7, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::Record( int blocksToConfirm , double val)",13, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::UpdateMovingAverages()",11, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::EstimateMedianVal( int confTarget , double sufficientTxVal , double successBreakPoint , bool requireGreater , unsigned int nBlockHeight , EstimationResult * result) const",151, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::Write( CAutoFile & fileout) const",9, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::Read( CAutoFile & filein , int nFileVersion , size_t numBuckets)",55, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::NewTx( unsigned int nBlockHeight , double val)",7, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::removeTx( unsigned int entryHeight , unsigned int nBestSeenHeight , unsigned int bucketindex , bool inBlock)",36, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::removeTx( uint256 hash , bool inBlock)",14, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::CBlockPolicyEstimator()",17, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::~CBlockPolicyEstimator()",3, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::processTransaction( const CTxMemPoolEntry & entry , bool validFeeEstimate)",38, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::processBlockTx( unsigned int nBlockHeight , const CTxMemPoolEntry * entry)",26, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::processBlock( unsigned int nBlockHeight , std :: vector<const CTxMemPoolEntry*> & entries)",48, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateFee( int confTarget) const",8, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateRawFee( int confTarget , double successThreshold , FeeEstimateHorizon horizon , EstimationResult * result) const",37, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::HighestTargetTracked( FeeEstimateHorizon horizon) const",17, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::BlockSpan() const",7, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::HistoricalBlockSpan() const",9, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::MaxUsableEstimate() const",5, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateCombinedFee( unsigned int confTarget , double successThreshold , bool checkShorterHorizon , EstimationResult * result) const",35, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateConservativeFee( unsigned int doubleTarget , EstimationResult * result) const",16, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateSmartFee( int confTarget , FeeCalculation * feeCalc , bool conservative) const",77, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::Write( CAutoFile & fileout) const",24, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::Read( CAutoFile & filein)",59, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::FlushUnconfirmed()",12, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"FeeFilterRounder::FeeFilterRounder( const CFeeRate & minIncrementalFee)",8, 2, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"FeeFilterRounder::round( CAmount currentMinFee)",8, 2, 0, 0
repos/cpp/bitcoin/src/consensus/merkle.cpp,"ComputeMerkleRoot( std :: vector<uint256> hashes , bool * mutated)",18, 2, 0, 0
repos/cpp/bitcoin/src/consensus/merkle.cpp,"BlockMerkleRoot( const CBlock & block , bool * mutated)",9, 2, 0, 0
repos/cpp/bitcoin/src/consensus/merkle.cpp,"BlockWitnessMerkleRoot( const CBlock & block , bool * mutated)",10, 2, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"IsFinalTx( const CTransaction & tx , int nBlockHeight , int64_t nBlockTime)",12, 2, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"CalculateSequenceLocks( const CTransaction & tx , int flags , std :: vector<int> * prevHeights , const CBlockIndex & block)",61, 2, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"EvaluateSequenceLocks( const CBlockIndex & block , std :: pair<int,int64_t> lockPair)",9, 2, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"SequenceLocks( const CTransaction & tx , int flags , std :: vector<int> * prevHeights , const CBlockIndex & block)",4, 2, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"GetLegacySigOpCount( const CTransaction & tx)",13, 2, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"GetP2SHSigOpCount( const CTransaction & tx , const CCoinsViewCache & inputs)",16, 2, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"GetTransactionSigOpCost( const CTransaction & tx , const CCoinsViewCache & inputs , int flags)",20, 2, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"CheckTransaction( const CTransaction & tx , CValidationState & state , bool fCheckDuplicateInputs)",48, 2, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"Consensus::CheckTxInputs( const CTransaction & tx , CValidationState & state , const CCoinsViewCache & inputs , int nSpendHeight , CAmount & txfee)",43, 2, 0, 0
