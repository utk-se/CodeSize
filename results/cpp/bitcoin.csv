File, Function, Length, Total Width, Leading Space(s), Leading Tab(s)
repos/cpp/bitcoin/build_msvc/testconsensus/testconsensus.cpp,"BuildSpendingTransaction( const CScript & scriptSig , const CScriptWitness & scriptWitness , int nValue = 0)",17, 124, 0, 0
repos/cpp/bitcoin/build_msvc/testconsensus/testconsensus.cpp,"main()",23, 215, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PartiallySignedTransaction::PartiallySignedTransaction( const CMutableTransaction & tx)",5, 95, 0, 0
repos/cpp/bitcoin/src/psbt.cpp,"PartiallySignedTransaction::IsNull() const",4, 72, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PartiallySignedTransaction::Merge( const PartiallySignedTransaction & psbt)",17, 79, 0, 0
repos/cpp/bitcoin/src/psbt.cpp,"PartiallySignedTransaction::IsSane() const",7, 48, 0, 0
repos/cpp/bitcoin/src/psbt.cpp,"PartiallySignedTransaction::AddInput( const CTxIn & txin , PSBTInput & psbtin)",12, 80, 0, 0
repos/cpp/bitcoin/src/psbt.cpp,"PartiallySignedTransaction::AddOutput( const CTxOut & txout , const PSBTOutput & psbtout)",6, 91, 0, 0
repos/cpp/bitcoin/src/psbt.cpp,"PartiallySignedTransaction::GetInputUTXO( CTxOut & utxo , int input_index) const",13, 83, 0, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTInput::IsNull() const",4, 172, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTInput::FillSignatureData( SignatureData & sigdata) const",25, 73, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTInput::FromSignatureData( const SignatureData & sigdata)",28, 79, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTInput::Merge( const PSBTInput & input)",17, 130, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTInput::IsSane() const",11, 88, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTOutput::FillSignatureData( SignatureData & sigdata) const",12, 72, 8, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTOutput::FromSignatureData( const SignatureData & sigdata)",12, 69, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTOutput::IsNull() const",4, 102, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTOutput::Merge( const PSBTOutput & output)",8, 106, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"PSBTInputSigned( PSBTInput & input)",4, 84, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"SignPSBTInput( const SigningProvider & provider , PartiallySignedTransaction & psbt , int index , int sighash , SignatureData * out_sigdata , bool use_dummy)",68, 154, 0, 0
repos/cpp/bitcoin/src/psbt.cpp,"FinalizePSBT( PartiallySignedTransaction & psbtx)",13, 98, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"FinalizeAndExtractPSBT( PartiallySignedTransaction & psbtx , CMutableTransaction & result)",15, 94, 4, 0
repos/cpp/bitcoin/src/psbt.cpp,"CombinePSBTs( PartiallySignedTransaction & out , const std :: vector<PartiallySignedTransaction> & psbtxs)",16, 118, 0, 0
repos/cpp/bitcoin/src/flatfile.cpp,"FlatFileSeq::FlatFileSeq( fs :: path dir , const char * prefix , size_t chunk_size)",9, 80, 0, 0
repos/cpp/bitcoin/src/flatfile.cpp,"FlatFilePos::ToString() const",4, 69, 4, 0
repos/cpp/bitcoin/src/flatfile.cpp,"FlatFileSeq::FileName( const FlatFilePos & pos) const",4, 65, 4, 0
repos/cpp/bitcoin/src/flatfile.cpp,"FlatFileSeq::Open( const FlatFilePos & pos , bool read_only)",21, 85, 8, 0
repos/cpp/bitcoin/src/flatfile.cpp,"FlatFileSeq::Allocate( const FlatFilePos & pos , size_t add_size , bool & out_of_space)",25, 112, 16, 0
repos/cpp/bitcoin/src/flatfile.cpp,"FlatFileSeq::Flush( const FlatFilePos & pos , bool finalize)",18, 77, 8, 0
repos/cpp/bitcoin/src/timedata.cpp,"GetTimeOffset()",5, 26, 4, 0
repos/cpp/bitcoin/src/timedata.cpp,"GetAdjustedTime()",4, 40, 4, 0
repos/cpp/bitcoin/src/timedata.cpp,"abs64( int64_t n)",4, 32, 0, 0
repos/cpp/bitcoin/src/timedata.cpp,"AddTimeData( const CNetAddr & ip , int64_t nOffsetSample)",74, 191, 20, 0
repos/cpp/bitcoin/src/bitcoin-wallet.cpp,"SetupWalletToolArgs()",13, 158, 4, 0
repos/cpp/bitcoin/src/bitcoin-wallet.cpp,"WalletAppInit( int argc , char * argv [ ])",33, 143, 38, 0
repos/cpp/bitcoin/src/bitcoin-wallet.cpp,"main( int argc , char * argv [ ])",49, 140, 16, 0
repos/cpp/bitcoin/src/bitcoind.cpp,"WaitForShutdown()",8, 33, 4, 0
repos/cpp/bitcoin/src/bitcoind.cpp,"AppInit( int argc , char * argv [ ])",129, 138, 16, 0
repos/cpp/bitcoin/src/bitcoind.cpp,"main( int argc , char * argv [ ])",13, 64, 4, 0
repos/cpp/bitcoin/src/rest.cpp,"CCoin::CCoin()",1, 28, 4, 0
repos/cpp/bitcoin/src/rest.cpp,"CCoin::CCoin( Coin && in)",1, 79, 4, 0
repos/cpp/bitcoin/src/rest.cpp,"CCoin::SerializationOp( Stream & s , Operation ser_action)",7, 65, 4, 0
repos/cpp/bitcoin/src/rest.cpp,"RESTERR( HTTPRequest * req , enum HTTPStatusCode status , std :: string message)",6, 87, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"ParseDataFormat( std :: string & param , const std :: string & strReq)",20, 80, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"AvailableDataFormatsString()",15, 58, 4, 0
repos/cpp/bitcoin/src/rest.cpp,"CheckWarmup( HTTPRequest * req)",7, 109, 9, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_headers( HTTPRequest * req , const std :: string & strURIPart)",76, 117, 8, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_block( HTTPRequest * req , const std :: string & strURIPart , bool showTxDetails)",63, 122, 8, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_block_extended( HTTPRequest * req , const std :: string & strURIPart)",4, 81, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_block_notxdetails( HTTPRequest * req , const std :: string & strURIPart)",4, 84, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_chaininfo( HTTPRequest * req , const std :: string & strURIPart)",22, 90, 8, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_mempool_info( HTTPRequest * req , const std :: string & strURIPart)",21, 90, 8, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_mempool_contents( HTTPRequest * req , const std :: string & strURIPart)",21, 90, 8, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_tx( HTTPRequest * req , const std :: string & strURIPart)",55, 122, 8, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_getutxos( HTTPRequest * req , const std :: string & strURIPart)",183, 155, 8, 0
repos/cpp/bitcoin/src/rest.cpp,"rest_blockhash_by_height( HTTPRequest * req , const std :: string & str_uri_part)",45, 122, 8, 0
repos/cpp/bitcoin/src/rest.cpp,"StartREST()",5, 85, 8, 0
repos/cpp/bitcoin/src/rest.cpp,"InterruptREST()",3, 21, 0, 0
repos/cpp/bitcoin/src/rest.cpp,"StopREST()",5, 62, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CBlockIndexWorkComparator::operator ( )( const CBlockIndex * pa , const CBlockIndex * pb) const",17, 82, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"FindForkInGlobalIndex( const CChain & chain , const CBlockLocator & locator)",18, 86, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CheckFinalTx( const CTransaction & tx , int flags)",31, 77, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"TestLockPointValidity( const LockPoints * lp)",17, 90, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"CheckSequenceLocks( const CTxMemPool & pool , const CTransaction & tx , int flags , LockPoints * lp , bool useExistingLockPoints)",71, 127, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LimitMempoolSize( CTxMemPool & pool , size_t limit , unsigned long age)",11, 93, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"FormatStateMessage( const CValidationState & state)",7, 77, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",11, 86, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",38, 162, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",32, 129, 17, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",405, 173, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",13, 174, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"AcceptToMemoryPool( CTxMemPool & pool , CValidationState & state , const CTransactionRef & tx , bool * pfMissingInputs , std :: list<CTransactionRef> * plTxnReplaced , bool bypass_limits , const CAmount nAbsurdFee , bool test_accept)",7, 152, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"GetTransaction( const uint256 & hash , CTransactionRef & txOut , const Consensus :: Params & consensusParams , uint256 & hashBlock , const CBlockIndex * const block_index)",29, 165, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"WriteBlockToDisk( const CBlock & block , FlatFilePos & pos , const CMessageHeader :: MessageStartChars & messageStart)",20, 123, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ReadBlockFromDisk( CBlock & block , const FlatFilePos & pos , const Consensus :: Params & consensusParams)",23, 104, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ReadBlockFromDisk( CBlock & block , const CBlockIndex * pindex , const Consensus :: Params & consensusParams)",15, 109, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"ReadRawBlockFromDisk( std :: vector<uint8_t> & block , const FlatFilePos & pos , const CMessageHeader :: MessageStartChars & message_start)",34, 135, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ReadRawBlockFromDisk( std :: vector<uint8_t> & block , const CBlockIndex * pindex , const CMessageHeader :: MessageStartChars & message_start)",10, 138, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GetBlockSubsidy( int nHeight , const Consensus :: Params & consensusParams)",12, 97, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"IsInitialBlockDownload()",23, 70, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"AlertNotify( const std :: string & strMessage)",17, 87, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",40, 183, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",32, 113, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",15, 106, 6, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::InvalidBlockFound( CBlockIndex * pindex , const CValidationState & state)",9, 90, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UpdateCoins( const CTransaction & tx , CCoinsViewCache & inputs , CTxUndo & txundo , int nHeight)",14, 96, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UpdateCoins( const CTransaction & tx , CCoinsViewCache & inputs , int nHeight)",5, 79, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CScriptCheck::operator ( )()",5, 170, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"GetSpendHeight( const CCoinsViewCache & inputs)",6, 71, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"InitScriptExecutionCache()",8, 170, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",82, 291, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UndoWriteToDisk( const CBlockUndo & blockundo , FlatFilePos & pos , const uint256 & hashBlock , const CMessageHeader :: MessageStartChars & messageStart)",26, 149, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UndoReadFromDisk( CBlockUndo & blockundo , const CBlockIndex * pindex)",30, 106, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"AbortNode( const std :: string & strMessage , const std :: string & userMessage = '')",10, 116, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"AbortNode( CValidationState & state , const std :: string & strMessage , const std :: string & userMessage = '')",5, 113, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ApplyTxInUndo( Coin && undo , CCoinsViewCache & view , const COutPoint & out)",26, 96, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::DisconnectBlock( const CBlock & block , const CBlockIndex * pindex , CCoinsViewCache & view)",56, 127, 16, 0
repos/cpp/bitcoin/src/validation.cpp,"FlushBlockFile( bool fFinalize = false)",14, 101, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"WriteUndoDataForBlock( const CBlockUndo & blockundo , CValidationState & state , CBlockIndex * pindex , const CChainParams & chainparams)",18, 142, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ThreadScriptCheck()",4, 38, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"ComputeBlockVersion( const CBlockIndex * pindexPrev , const Consensus :: Params & params)",14, 129, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::WarningBitsConditionChecker( int bitIn)",1, 68, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::BeginTime( const Consensus :: Params & params) const",1, 84, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::EndTime( const Consensus :: Params & params) const",1, 116, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::Period( const Consensus :: Params & params) const",1, 107, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::Threshold( const Consensus :: Params & params) const",1, 116, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"WarningBitsConditionChecker::Condition( const CBlockIndex * pindex , const Consensus :: Params & params) const",6, 94, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"IsScriptWitnessEnabled( const Consensus :: Params & params)",4, 76, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",44, 145, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ConnectBlock( const CBlock & block , CValidationState & state , CBlockIndex * pindex , CCoinsViewCache & view , const CChainParams & chainparams , bool fJustCheck)",283, 339, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"FlushStateToDisk( const CChainParams & chainparams , CValidationState & state , FlushStateMode mode , int nManualPruneHeight)",105, 162, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"FlushStateToDisk()",7, 92, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"PruneAndFlush()",8, 92, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"DoWarning( const std :: string & strWarning)",9, 53, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"AppendWarning( std :: string & res , const std :: string & warn)",5, 69, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UpdateTip( const CBlockIndex * pindexNew , const CChainParams & chainParams)",48, 149, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::DisconnectTip( CValidationState & state , const CChainParams & chainparams , DisconnectedBlockTransactions * disconnectpool)",45, 137, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"PerBlockConnectTrace::PerBlockConnectTrace()",1, 96, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"ConnectTrace::ConnectTrace( CTxMemPool & _pool)",3, 166, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"ConnectTrace::BlockConnected( CBlockIndex * pindex , std :: shared_ptr<const CBlock> pblock)",8, 85, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"ConnectTrace::GetBlocksConnected()",11, 74, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"ConnectTrace::NotifyEntryRemoved( CTransactionRef txRemoved , MemPoolRemovalReason reason)",6, 86, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ConnectTip( CValidationState & state , const CChainParams & chainparams , CBlockIndex * pindexNew , const std :: shared_ptr<const CBlock> & pblock , ConnectTrace & connectTrace , DisconnectedBlockTransactions & disconnectpool)",54, 231, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::FindMostWorkChain()",53, 125, 16, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::PruneBlockIndexCandidates()",10, 114, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ActivateBestChainStep( CValidationState & state , const CChainParams & chainparams , CBlockIndex * pindexMostWork , const std :: shared_ptr<const CBlock> & pblock , bool & fInvalidFound , ConnectTrace & connectTrace)",82, 221, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LOCKS_EXCLUDED( cs_main)",20, 74, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"LimitValidationInterfaceQueue()",7, 52, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ActivateBestChain( CValidationState & state , const CChainParams & chainparams , std :: shared_ptr<const CBlock> pblock)",97, 196, 16, 0
repos/cpp/bitcoin/src/validation.cpp,"ActivateBestChain( CValidationState & state , const CChainParams & chainparams , std :: shared_ptr<const CBlock> pblock)",3, 121, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::PreciousBlock( CValidationState & state , const CChainParams & params , CBlockIndex * pindex)",28, 106, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"PreciousBlock( CValidationState & state , const CChainParams & params , CBlockIndex * pindex)",3, 95, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::InvalidateBlock( CValidationState & state , const CChainParams & chainparams , CBlockIndex * pindex)",84, 172, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"InvalidateBlock( CValidationState & state , const CChainParams & chainparams , CBlockIndex * pindex)",3, 102, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ResetBlockFailureFlags( CBlockIndex * pindex)",33, 171, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"ResetBlockFailureFlags( CBlockIndex * pindex)",3, 56, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::AddToBlockIndex( const CBlockHeader & block)",35, 122, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ReceivedBlockTransactions( const CBlock & block , CBlockIndex * pindexNew , const FlatFilePos & pos , const Consensus :: Params & consensusParams)",45, 175, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"FindBlockPos( FlatFilePos & pos , unsigned int nAddSize , unsigned int nHeight , uint64_t nTime , bool fKnown = false)",48, 125, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"FindUndoPos( CValidationState & state , int nFile , FlatFilePos & pos , unsigned int nAddSize)",21, 101, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CheckBlockHeader( const CBlockHeader & block , CValidationState & state , const Consensus :: Params & consensusParams , bool fCheckPOW = true)",8, 146, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CheckBlock( const CBlock & block , CValidationState & state , const Consensus :: Params & consensusParams , bool fCheckPOW , bool fCheckMerkleRoot)",62, 213, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"IsWitnessEnabled( const CBlockIndex * pindexPrev , const Consensus :: Params & params)",5, 125, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"IsNullDummyEnabled( const CBlockIndex * pindexPrev , const Consensus :: Params & params)",5, 125, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"GetWitnessCommitmentIndex( const CBlock & block)",12, 366, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"UpdateUncommittedBlockStructures( CBlock & block , const CBlockIndex * pindexPrev , const Consensus :: Params & consensusParams)",11, 126, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GenerateCoinbaseCommitment( CBlock & block , const CBlockIndex * pindexPrev , const Consensus :: Params & consensusParams)",28, 142, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ContextualCheckBlockHeader( const CBlockHeader & block , CValidationState & state , const CChainParams & params , const CBlockIndex * pindexPrev , int64_t nAdjustedTime)",38, 173, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ContextualCheckBlock( const CBlock & block , CValidationState & state , const Consensus :: Params & consensusParams , const CBlockIndex * pindexPrev)",81, 160, 16, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::AcceptBlockHeader( const CBlockHeader & block , CValidationState & state , const CChainParams & chainparams , CBlockIndex ** ppindex)",80, 144, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ProcessNewBlockHeaders( const std :: vector<CBlockHeader> & headers , CValidationState & state , const CChainParams & chainparams , const CBlockIndex ** ppindex , CBlockHeader * first_invalid)",19, 186, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"SaveBlockToDisk( const CBlock & block , int nHeight , const CChainParams & chainparams , const FlatFilePos * dbp)",17, 128, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::AcceptBlock( const std :: shared_ptr<const CBlock> & pblock , CValidationState & state , const CChainParams & chainparams , CBlockIndex ** ppindex , bool fRequested , const FlatFilePos * dbp , bool * fNewBlock)",78, 214, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"ProcessNewBlock( const CChainParams & chainparams , const std :: shared_ptr<const CBlock> pblock , bool fForceProcessing , bool * fNewBlock)",34, 138, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"TestBlockValidity( CValidationState & state , const CChainParams & chainparams , const CBlock & block , CBlockIndex * pindexPrev , bool fCheckPOW , bool fCheckMerkleRoot)",24, 166, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CalculateCurrentUsage()",10, 56, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"PruneOneBlockFile( const int fileNumber)",32, 182, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"UnlinkPrunedFiles( const std :: set<int> & setFilesToPrune)",9, 100, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"FindFilesToPruneManual( std :: set<int> & setFilesToPrune , int nManualPruneHeight)",20, 129, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"PruneBlockFilesManual( int nManualPruneHeight)",8, 92, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"FindFilesToPrune( std :: set<int> & setFilesToPrune , uint64_t nPruneAfterHeight)",55, 125, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"BlockFileSeq()",4, 69, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"UndoFileSeq()",4, 68, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"OpenBlockFile( const FlatFilePos & pos , bool fReadOnly)",3, 62, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"OpenUndoFile( const FlatFilePos & pos , bool fReadOnly)",3, 68, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"GetBlockPosFilename( const FlatFilePos & pos)",4, 53, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::InsertBlockIndex( const uint256 & hash)",19, 70, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::LoadBlockIndex( const Consensus :: Params & consensus_params , CBlockTreeDB & blocktree)",49, 161, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",52, 102, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadChainTip( const CChainParams & chainparams)",32, 106, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CVerifyDB::CVerifyDB()",4, 66, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CVerifyDB::~CVerifyDB()",4, 46, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CVerifyDB::VerifyDB( const CChainParams & chainparams , CCoinsView * coinsview , int nCheckLevel , int nCheckDepth)",99, 200, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::RollforwardBlock( const CBlockIndex * pindex , CCoinsViewCache & inputs , const CChainParams & params)",19, 132, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::ReplayBlocks( const CChainParams & params , CCoinsView * view)",65, 150, 16, 0
repos/cpp/bitcoin/src/validation.cpp,"ReplayBlocks( const CChainParams & params , CCoinsView * view)",3, 66, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::EraseBlockData( CBlockIndex * index)",34, 171, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::RewindBlockIndex( const CChainParams & params)",92, 167, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"RewindBlockIndex( const CChainParams & params)",18, 108, 12, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::UnloadBlockIndex()",5, 39, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"UnloadBlockIndex()",25, 62, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadBlockIndex( const CChainParams & chainparams)",21, 66, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::LoadGenesisBlock( const CChainParams & chainparams)",24, 88, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadGenesisBlock( const CChainParams & chainparams)",4, 55, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadExternalBlockFile( const CChainParams & chainparams , FILE * fileIn , FlatFilePos * dbp)",121, 174, 20, 0
repos/cpp/bitcoin/src/validation.cpp,"CChainState::CheckBlockIndex( const Consensus :: Params & consensusParams)",183, 193, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"CBlockFileInfo::ToString() const",4, 195, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"GetBlockFileInfo( size_t n)",6, 43, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"VersionBitsTipState( const Consensus :: Params & params , Consensus :: DeploymentPos pos)",5, 98, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"VersionBitsTipStatistics( const Consensus :: Params & params , Consensus :: DeploymentPos pos)",5, 98, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"VersionBitsTipStateSinceHeight( const Consensus :: Params & params , Consensus :: DeploymentPos pos)",5, 98, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"LoadMempool()",76, 154, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"DumpMempool()",52, 102, 8, 0
repos/cpp/bitcoin/src/validation.cpp,"GuessVerificationProgress( const ChainTxData & data , const CBlockIndex * pindex)",16, 87, 0, 0
repos/cpp/bitcoin/src/validation.cpp,"CMainCleanup::CMainCleanup()",1, 22, 4, 0
repos/cpp/bitcoin/src/validation.cpp,"CMainCleanup::~CMainCleanup()",7, 56, 8, 0
repos/cpp/bitcoin/src/warnings.cpp,"SetMiscWarning( const std :: string & strWarning)",5, 51, 0, 0
repos/cpp/bitcoin/src/warnings.cpp,"SetfLargeWorkForkFound( bool flag)",5, 39, 0, 0
repos/cpp/bitcoin/src/warnings.cpp,"GetfLargeWorkForkFound()",5, 32, 4, 0
repos/cpp/bitcoin/src/warnings.cpp,"SetfLargeWorkInvalidChainFound( bool flag)",5, 47, 0, 0
repos/cpp/bitcoin/src/warnings.cpp,"GetWarnings( const std :: string & strFor)",38, 185, 8, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::GetCoin( const COutPoint & outpoint , Coin & coin) const",1, 88, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::GetBestBlock() const",1, 63, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::GetHeadBlocks() const",1, 90, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlock)",1, 93, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::Cursor() const",1, 65, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsView::HaveCoin( const COutPoint & outpoint) const",5, 59, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::CCoinsViewBacked( CCoinsView * viewIn)",1, 74, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::GetCoin( const COutPoint & outpoint , Coin & coin) const",1, 118, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::HaveCoin( const COutPoint & outpoint) const",1, 102, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::GetBestBlock() const",1, 80, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::GetHeadBlocks() const",1, 95, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::SetBackend( CCoinsView & viewIn)",1, 74, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlock)",1, 131, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::Cursor() const",1, 78, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewBacked::EstimateSize() const",1, 79, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"SaltedOutpointHasher::SaltedOutpointHasher()",1, 151, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::CCoinsViewCache( CCoinsView * baseIn)",1, 104, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::DynamicMemoryUsage() const",3, 66, 4, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::FetchCoin( const COutPoint & outpoint) const",16, 154, 4, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::GetCoin( const COutPoint & outpoint , Coin & coin) const",8, 77, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::AddCoin( const COutPoint & outpoint , Coin && coin , bool possible_overwrite)",20, 124, 4, 0
repos/cpp/bitcoin/src/coins.cpp,"AddCoins( CCoinsViewCache & cache , const CTransaction & tx , int nHeight , bool check)",10, 101, 8, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::SpendCoin( const COutPoint & outpoint , Coin * moveout)",15, 76, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::AccessCoin( const COutPoint & outpoint) const",8, 75, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::HaveCoin( const COutPoint & outpoint) const",4, 67, 4, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::HaveCoinInCache( const COutPoint & outpoint) const",4, 73, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::GetBestBlock() const",5, 48, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::SetBestBlock( const uint256 & hashBlockIn)",3, 65, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlockIn)",57, 124, 16, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::Flush()",6, 56, 4, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::Uncache( const COutPoint & hash)",8, 66, 8, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::GetCacheSize() const",3, 53, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::GetValueIn( const CTransaction & tx) const",11, 66, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"CCoinsViewCache::HaveInputs( const CTransaction & tx) const",11, 63, 0, 0
repos/cpp/bitcoin/src/coins.cpp,"AccessByTxid( const CCoinsViewCache & view , const uint256 & txid)",10, 75, 0, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::CThreadInterrupt()",1, 54, 0, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::operator bool() const",4, 49, 4, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::reset()",4, 50, 4, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::operator ( )()",8, 53, 8, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::sleep_for( std :: chrono :: milliseconds rel_time)",5, 102, 4, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::sleep_for( std :: chrono :: seconds rel_time)",4, 87, 4, 0
repos/cpp/bitcoin/src/threadinterrupt.cpp,"CThreadInterrupt::sleep_for( std :: chrono :: minutes rel_time)",4, 87, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::DestinationEncoder( const CChainParams & params)",1, 82, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const CKeyID & id) const",6, 95, 8, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const CScriptID & id) const",6, 95, 8, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const WitnessV0KeyHash & id) const",7, 100, 8, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const WitnessV0ScriptHash & id) const",7, 100, 8, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const WitnessUnknown & id) const",10, 114, 8, 0
repos/cpp/bitcoin/src/key_io.cpp,"DestinationEncoder::operator ( )( const CNoDestination & no) const",1, 74, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeDestination( const std :: string & str , const CChainParams & params)",58, 137, 8, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeSecret( const std :: string & str)",17, 126, 8, 0
repos/cpp/bitcoin/src/key_io.cpp,"EncodeSecret( const CKey & key)",12, 87, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeExtPubKey( const std :: string & str)",12, 122, 8, 0
repos/cpp/bitcoin/src/key_io.cpp,"EncodeExtPubKey( const CExtPubKey & key)",9, 91, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeExtKey( const std :: string & str)",12, 122, 8, 0
repos/cpp/bitcoin/src/key_io.cpp,"EncodeExtKey( const CExtKey & key)",10, 91, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"EncodeDestination( const CTxDestination & dest)",4, 69, 4, 0
repos/cpp/bitcoin/src/key_io.cpp,"DecodeDestination( const std :: string & str)",4, 57, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"IsValidDestinationString( const std :: string & str , const CChainParams & params)",4, 82, 0, 0
repos/cpp/bitcoin/src/key_io.cpp,"IsValidDestinationString( const std :: string & str)",4, 54, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"ecdsa_signature_parse_der_lax( const secp256k1_context * ctx , secp256k1_ecdsa_signature * sig , const unsigned char * input , size_t inputlen)",141, 150, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::Verify( const uint256 & hash , const std :: vector<unsigned char> & vchSig) const",16, 104, 4, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::RecoverCompact( const uint256 & hash , const std :: vector<unsigned char> & vchSig)",19, 145, 4, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::IsFullyValid() const",6, 86, 4, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::Decompress()",13, 111, 4, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::Derive( CPubKey & pubkeyChild , ChainCode & ccChild , unsigned int nChild , const ChainCode & cc) const",20, 113, 0, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CExtPubKey::Encode( unsigned char code [ BIP32_EXTKEY_SIZE ]) const",9, 74, 4, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CExtPubKey::Decode( const unsigned char code [ BIP32_EXTKEY_SIZE ])",7, 75, 4, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CExtPubKey::Derive( CExtPubKey & out , unsigned int _nChild) const",7, 73, 4, 0
repos/cpp/bitcoin/src/pubkey.cpp,"CPubKey::CheckLowS( const std :: vector<unsigned char> & vchSig)",7, 104, 4, 0
repos/cpp/bitcoin/src/pubkey.cpp,"ECCVerifyHandle::ECCVerifyHandle()",9, 87, 8, 0
repos/cpp/bitcoin/src/pubkey.cpp,"ECCVerifyHandle::~ECCVerifyHandle()",9, 61, 8, 0
repos/cpp/bitcoin/src/logging.cpp,"LogInstance()",20, 80, 1, 0
repos/cpp/bitcoin/src/logging.cpp,"FileWriteStr( const std :: string & str , FILE * fp)",4, 58, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::OpenDebugLog()",21, 61, 8, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::EnableCategory( BCLog :: LogFlags flag)",4, 57, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::EnableCategory( const std :: string & str)",7, 59, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::DisableCategory( BCLog :: LogFlags flag)",4, 58, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::DisableCategory( const std :: string & str)",7, 60, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::WillLogCategory( BCLog :: LogFlags category) const",4, 75, 4, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::DefaultShrinkDebugFile() const",4, 51, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"GetLogCategory( BCLog :: LogFlags & flag , const std :: string & str)",14, 67, 0, 0
repos/cpp/bitcoin/src/logging.cpp,"ListLogCategories()",14, 85, 8, 0
repos/cpp/bitcoin/src/logging.cpp,"ListActiveLogCategories()",14, 85, 8, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::LogTimestampStr( const std :: string & str)",29, 82, 12, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::LogPrintStr( const std :: string & str)",32, 73, 8, 0
repos/cpp/bitcoin/src/logging.cpp,"BCLog::Logger::ShrinkDebugFile()",40, 79, 4, 0
repos/cpp/bitcoin/src/noui.cpp,"noui_ThreadSafeMessageBox( const std :: string & message , const std :: string & caption , unsigned int style)",26, 107, 0, 0
repos/cpp/bitcoin/src/noui.cpp,"noui_ThreadSafeQuestion( const std :: string & , const std :: string & message , const std :: string & caption , unsigned int style)",4, 159, 0, 0
repos/cpp/bitcoin/src/noui.cpp,"noui_InitMessage( const std :: string & message)",4, 50, 0, 0
repos/cpp/bitcoin/src/noui.cpp,"noui_connect()",6, 73, 4, 0
repos/cpp/bitcoin/src/base58.cpp,"DecodeBase58( const char * psz , std :: vector<unsigned char> & vch)",48, 142, 8, 0
repos/cpp/bitcoin/src/base58.cpp,"EncodeBase58( const unsigned char * pbegin , const unsigned char * pend)",39, 140, 8, 0
repos/cpp/bitcoin/src/base58.cpp,"EncodeBase58( const std :: vector<unsigned char> & vch)",4, 64, 0, 0
repos/cpp/bitcoin/src/base58.cpp,"DecodeBase58( const std :: string & str , std :: vector<unsigned char> & vchRet)",4, 78, 0, 0
repos/cpp/bitcoin/src/base58.cpp,"EncodeBase58Check( const std :: vector<unsigned char> & vchIn)",8, 77, 4, 0
repos/cpp/bitcoin/src/base58.cpp,"DecodeBase58Check( const char * psz , std :: vector<unsigned char> & vchRet)",16, 81, 4, 0
repos/cpp/bitcoin/src/base58.cpp,"DecodeBase58Check( const std :: string & str , std :: vector<unsigned char> & vchRet)",4, 83, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPRPCTimer::HTTPRPCTimer( struct event_base * eventBase , std :: function<void()> & func , int64_t millis)",8, 94, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPRPCTimerInterface::HTTPRPCTimerInterface( struct event_base * _base)",3, 75, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPRPCTimerInterface::Name()",4, 32, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPRPCTimerInterface::NewTimer( std :: function<void()> & func , int64_t millis)",4, 81, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"JSONErrorReply( HTTPRequest * req , const UniValue & objError , const UniValue & id)",16, 91, 0, 0
repos/cpp/bitcoin/src/httprpc.cpp,"multiUserAuthorized( std :: string strUserPass)",38, 188, 8, 0
repos/cpp/bitcoin/src/httprpc.cpp,"RPCAuthorized( const std :: string & strAuth , std :: string & strAuthUsernameOut)",19, 108, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"HTTPReq_JSONRPC( HTTPRequest * req , const std :: string &)",66, 90, 8, 0
repos/cpp/bitcoin/src/httprpc.cpp,"InitRPCAuthentication()",21, 242, 8, 0
repos/cpp/bitcoin/src/httprpc.cpp,"StartHTTPRPC()",16, 74, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"InterruptHTTPRPC()",4, 60, 4, 0
repos/cpp/bitcoin/src/httprpc.cpp,"StopHTTPRPC()",12, 61, 8, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs( const CBlock & block , bool fUseWTXID)",11, 103, 4, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const",10, 85, 4, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"CBlockHeaderAndShortTxIDs::GetShortID( const uint256 & txhash) const",4, 95, 4, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"PartiallyDownloadedBlock::InitData( const CBlockHeaderAndShortTxIDs & cmpctblock , const std :: vector<std::pair<uint256,CTransactionRef>> & extra_txn)",121, 207, 4, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"PartiallyDownloadedBlock::IsTxAvailable( size_t index) const",5, 67, 0, 0
repos/cpp/bitcoin/src/blockencodings.cpp,"PartiallyDownloadedBlock::FillBlock( CBlock & block , const std :: vector<CTransactionRef> & vtx_missing)",43, 259, 4, 0
repos/cpp/bitcoin/src/pow.cpp,"GetNextWorkRequired( const CBlockIndex * pindexLast , const CBlockHeader * pblock , const Consensus :: Params & params)",35, 140, 16, 0
repos/cpp/bitcoin/src/pow.cpp,"CalculateNextWorkRequired( const CBlockIndex * pindexLast , int64_t nFirstBlockTime , const Consensus :: Params & params)",24, 128, 0, 0
repos/cpp/bitcoin/src/pow.cpp,"CheckProofOfWork( uint256 hash , unsigned int nBits , const Consensus :: Params & params)",18, 95, 4, 0
repos/cpp/bitcoin/src/random.cpp,"RandFailure()",5, 56, 4, 0
repos/cpp/bitcoin/src/random.cpp,"GetPerformanceCounter()",19, 91, 4, 0
repos/cpp/bitcoin/src/random.cpp,"GetCPUID( uint32_t leaf , uint32_t subleaf , uint32_t & a , uint32_t & b , uint32_t & c , uint32_t & d)",9, 113, 0, 0
repos/cpp/bitcoin/src/random.cpp,"InitHardwareRand()",12, 40, 4, 0
repos/cpp/bitcoin/src/random.cpp,"ReportHardwareRand()",11, 90, 4, 0
repos/cpp/bitcoin/src/random.cpp,"GetRdRand()",27, 112, 8, 0
repos/cpp/bitcoin/src/random.cpp,"GetRdSeed()",31, 112, 8, 0
repos/cpp/bitcoin/src/random.cpp,"InitHardwareRand()",1, 34, 0, 0
repos/cpp/bitcoin/src/random.cpp,"ReportHardwareRand()",1, 36, 0, 0
repos/cpp/bitcoin/src/random.cpp,"SeedHardwareFast( CSHA512 & hasher)",9, 67, 0, 0
repos/cpp/bitcoin/src/random.cpp,"SeedHardwareSlow( CSHA512 & hasher)",23, 76, 4, 0
repos/cpp/bitcoin/src/random.cpp,"RandAddSeedPerfmon( CSHA512 & hasher)",37, 105, 8, 0
repos/cpp/bitcoin/src/random.cpp,"GetDevURandom( unsigned char * ent32)",17, 71, 8, 0
repos/cpp/bitcoin/src/random.cpp,"GetOSRand( unsigned char * ent32)",70, 102, 4, 0
repos/cpp/bitcoin/src/random.cpp,"RNGState::RNGState()",15, 108, 8, 0
repos/cpp/bitcoin/src/random.cpp,"RNGState::~RNGState()",7, 62, 8, 0
repos/cpp/bitcoin/src/random.cpp,"RNGState::MixExtract( unsigned char * out , size_t num , CSHA512 && hasher , bool strong_seed)",29, 105, 8, 0
repos/cpp/bitcoin/src/random.cpp,"RNGState::GetOpenSSLMutex( int i)",1, 65, 4, 0
repos/cpp/bitcoin/src/random.cpp,"GetRNGState()",7, 85, 4, 0
repos/cpp/bitcoin/src/random.cpp,"LockingCallbackOpenSSL( int mode , int i , const char * file , int line)",10, 99, 0, 0
repos/cpp/bitcoin/src/random.cpp,"SeedTimestamp( CSHA512 & hasher)",5, 75, 4, 0
repos/cpp/bitcoin/src/random.cpp,"SeedFast( CSHA512 & hasher)",14, 71, 4, 0
repos/cpp/bitcoin/src/random.cpp,"SeedSlow( CSHA512 & hasher)",21, 96, 4, 0
repos/cpp/bitcoin/src/random.cpp,"SeedSleep( CSHA512 & hasher)",17, 121, 4, 0
repos/cpp/bitcoin/src/random.cpp,"SeedStartup( CSHA512 & hasher)",15, 60, 4, 0
repos/cpp/bitcoin/src/random.cpp,"ProcRand( unsigned char * out , int num , RNGLevel level)",36, 126, 4, 0
repos/cpp/bitcoin/src/random.cpp,"GetRandBytes( unsigned char * buf , int num)",1, 96, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetStrongRandBytes( unsigned char * buf , int num)",1, 102, 0, 0
repos/cpp/bitcoin/src/random.cpp,"RandAddSeedSleep()",1, 67, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetRand( uint64_t nMax)",4, 74, 4, 0
repos/cpp/bitcoin/src/random.cpp,"GetRandInt( int nMax)",4, 34, 0, 0
repos/cpp/bitcoin/src/random.cpp,"GetRandHash()",6, 55, 4, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::RandomSeed()",6, 37, 0, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::rand256()",10, 58, 4, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::randbytes( size_t len)",9, 68, 0, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::FastRandomContext( const uint256 & seed)",4, 123, 0, 0
repos/cpp/bitcoin/src/random.cpp,"Random_SanityCheck()",45, 116, 4, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::FastRandomContext( bool fDeterministic)",8, 133, 0, 0
repos/cpp/bitcoin/src/random.cpp,"FastRandomContext::operator =( FastRandomContext && from)",13, 86, 4, 0
repos/cpp/bitcoin/src/random.cpp,"RandomInit()",7, 76, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"SetupCliArgs()",25, 379, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"libevent_log_cb( int severity , const char * msg)",10, 100, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"CConnectionFailed::CConnectionFailed( const std :: string & msg)",3, 64, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"AppInitRPC( int argc , char * argv [ ])",46, 140, 16, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"HTTPReply::HTTPReply()",1, 41, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"http_errorstring( int code)",21, 64, 8, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"http_request_done( struct evhttp_request * req , void * ctx)",24, 79, 8, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"http_error_cb( enum evhttp_request_error err , void * ctx)",5, 68, 0, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"BaseRequestHandler::~BaseRequestHandler()",1, 37, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"GetinfoRequestHandler::PrepareRequest( const std :: string & method , const std :: vector<std::string> & args)",11, 102, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"GetinfoRequestHandler::ProcessReply( const UniValue & batch_in)",34, 99, 16, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"DefaultRequestHandler::PrepareRequest( const std :: string & method , const std :: vector<std::string> & args)",10, 102, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"DefaultRequestHandler::ProcessReply( const UniValue & reply)",4, 58, 4, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"CallRPC( BaseRequestHandler * rh , const std :: string & strMethod , const std :: vector<std::string> & args)",100, 218, 8, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"CommandLineRPC( int argc , char * argv [ ])",103, 118, 28, 0
repos/cpp/bitcoin/src/bitcoin-cli.cpp,"main( int argc , char * argv [ ])",37, 68, 8, 0
repos/cpp/bitcoin/src/shutdown.cpp,"StartShutdown()",4, 29, 4, 0
repos/cpp/bitcoin/src/shutdown.cpp,"AbortShutdown()",4, 30, 4, 0
repos/cpp/bitcoin/src/shutdown.cpp,"ShutdownRequested()",4, 29, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::CBloomFilter( const unsigned int nElements , const double nFPRate , const unsigned int nTweakIn , unsigned char nFlagsIn)",19, 134, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::Hash( unsigned int nHashNum , const std :: vector<unsigned char> & vDataToHash) const",5, 115, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::insert( const std :: vector<unsigned char> & vKey)",12, 66, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::insert( const COutPoint & outpoint)",7, 67, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::insert( const uint256 & hash)",5, 63, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::contains( const std :: vector<unsigned char> & vKey) const",15, 74, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::contains( const COutPoint & outpoint) const",7, 67, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::contains( const uint256 & hash) const",5, 63, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::clear()",6, 34, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::reset( const unsigned int nNewTweak)",5, 55, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::IsWithinSizeConstraints() const",4, 82, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::IsRelevantAndUpdate( const CTransaction & tx)",69, 114, 8, 0
repos/cpp/bitcoin/src/bloom.cpp,"CBloomFilter::UpdateEmptyFull()",12, 52, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::CRollingBloomFilter( const unsigned int nElements , const double fpRate)",26, 118, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"RollingBloomHash( unsigned int nHashNum , uint32_t nTweak , const std :: vector<unsigned char> & vDataToHash)",3, 129, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"FastMod( uint32_t x , size_t n)",3, 55, 0, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::insert( const std :: vector<unsigned char> & vKey)",30, 129, 8, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::insert( const uint256 & hash)",5, 64, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::contains( const std :: vector<unsigned char> & vKey) const",13, 121, 8, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::contains( const uint256 & hash) const",5, 64, 4, 0
repos/cpp/bitcoin/src/bloom.cpp,"CRollingBloomFilter::reset()",9, 86, 4, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts( const CPubKey & pubkey)",24, 79, 4, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetPubKey( const CKeyID & address , CPubKey & vchPubKeyOut) const",15, 83, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::AddKeyPubKey( const CKey & key , const CPubKey & pubkey)",7, 74, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::HaveKey( const CKeyID & address) const",5, 58, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetKeys() const",9, 49, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetKey( const CKeyID & address , CKey & keyOut) const",10, 71, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::AddCScript( const CScript & redeemScript)",9, 117, 8, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::HaveCScript( const CScriptID & hash) const",5, 62, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetCScripts() const",9, 56, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::GetCScript( const CScriptID & hash , CScript & redeemScriptOut) const",11, 87, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"ExtractPubKey( const CScript & dest , CPubKey & pubKeyOut)",15, 94, 4, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::AddWatchOnly( const CScript & dest)",11, 55, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::RemoveWatchOnly( const CScript & dest)",12, 78, 4, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::HaveWatchOnly( const CScript & dest) const",5, 62, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"CBasicKeyStore::HaveWatchOnly() const",5, 43, 0, 0
repos/cpp/bitcoin/src/keystore.cpp,"GetKeyForDestination( const CKeyStore & store , const CTxDestination & dest)",21, 94, 8, 0
repos/cpp/bitcoin/src/keystore.cpp,"HaveKey( const CKeyStore & store , const CKey & key)",6, 94, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"PrintLockContention( const char * pszName , const char * pszFile , int nLine)",5, 78, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"CLockLocation::CLockLocation( const char * pszName , const char * pszFile , int nLine , bool fTryIn)",7, 84, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"CLockLocation::ToString() const",4, 98, 8, 0
repos/cpp/bitcoin/src/sync.cpp,"LockData::LockData()",1, 36, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"LockData::~LockData()",1, 39, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"GetLockData()",4, 30, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"potential_deadlock_detected( const std :: pair<void*,void*> & mismatch , const LockStack & s1 , const LockStack & s2)",29, 133, 8, 0
repos/cpp/bitcoin/src/sync.cpp,"push_lock( void * c , const CLockLocation & locklocation)",22, 95, 12, 0
repos/cpp/bitcoin/src/sync.cpp,"pop_lock()",4, 28, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"EnterCritical( const char * pszName , const char * pszFile , int nLine , void * cs , bool fTry)",4, 93, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"LeaveCritical()",4, 21, 0, 0
repos/cpp/bitcoin/src/sync.cpp,"LocksHeld()",7, 65, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"AssertLockHeldInternal( const char * pszName , const char * pszFile , int nLine , void * cs)",8, 131, 4, 0
repos/cpp/bitcoin/src/sync.cpp,"AssertLockNotHeldInternal( const char * pszName , const char * pszFile , int nLine , void * cs)",9, 135, 12, 0
repos/cpp/bitcoin/src/sync.cpp,"DeleteLock( void * cs)",22, 93, 8, 0
repos/cpp/bitcoin/src/core_write.cpp,"ValueFromAmount( const CAmount & amount)",9, 75, 12, 0
repos/cpp/bitcoin/src/core_write.cpp,"FormatScript( const CScript & script)",34, 107, 16, 0
repos/cpp/bitcoin/src/core_write.cpp,"SighashToStr( unsigned char sighash_type)",6, 57, 4, 0
repos/cpp/bitcoin/src/core_write.cpp,"ScriptToAsmStr( const CScript & script , const bool fAttemptSighashDecode)",43, 133, 20, 0
repos/cpp/bitcoin/src/core_write.cpp,"EncodeHexTx( const CTransaction & tx , const int serializeFlags)",6, 74, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"ScriptToUniv( const CScript & script , UniValue & out , bool include_address)",14, 78, 0, 0
repos/cpp/bitcoin/src/core_write.cpp,"ScriptPubKeyToUniv( const CScript & scriptPubKey , UniValue & out , bool fIncludeHex)",25, 77, 8, 0
repos/cpp/bitcoin/src/core_write.cpp,"TxToUniv( const CTransaction & tx , const uint256 & hashBlock , UniValue & entry , bool include_hex , int serialize_flags)",59, 180, 8, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CreateGenesisBlock( const char * pszTimestamp , const CScript & genesisOutputScript , uint32_t nTime , uint32_t nNonce , uint32_t nBits , int32_t nVersion , const CAmount & genesisReward)",20, 195, 4, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CreateGenesisBlock( uint32_t nTime , uint32_t nNonce , uint32_t nBits , int32_t nVersion , const CAmount & genesisReward)",6, 212, 4, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CMainParams::CMainParams()",110, 128, 8, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CTestNetParams::CTestNetParams()",88, 129, 8, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CRegTestParams::CRegTestParams( const ArgsManager & args)",77, 126, 8, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CRegTestParams::UpdateVersionBitsParameters( Consensus :: DeploymentPos d , int64_t nStartTime , int64_t nTimeout)",5, 103, 4, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CRegTestParams::UpdateVersionBitsParametersFromArgs( const ArgsManager & args)",31, 152, 16, 0
repos/cpp/bitcoin/src/chainparams.cpp,"Params()",4, 31, 0, 0
repos/cpp/bitcoin/src/chainparams.cpp,"CreateChainParams( const std :: string & chain)",10, 83, 4, 0
repos/cpp/bitcoin/src/chainparams.cpp,"SelectParams( const std :: string & network)",5, 52, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPWorkItem::HTTPWorkItem( std :: unique_ptr<HTTPRequest> _req , const std :: string & _path , const HTTPRequestHandler & _func)",4, 112, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPWorkItem::operator ( )()",4, 31, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::WorkQueue( size_t _maxDepth)",4, 58, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::~WorkQueue()",3, 17, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::Enqueue( WorkItem * item)",10, 61, 8, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::Run()",16, 49, 16, 0
repos/cpp/bitcoin/src/httpserver.cpp,"WorkQueue::Interrupt()",6, 27, 8, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPPathHandler::HTTPPathHandler( std :: string _prefix , bool _exactMatch , HTTPRequestHandler _handler)",4, 89, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"ClientAllowed( const CNetAddr & netaddr)",9, 51, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"InitHTTPAllowList()",26, 208, 16, 0
repos/cpp/bitcoin/src/httpserver.cpp,"RequestMethodString( HTTPRequest :: RequestMethod m)",19, 69, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"http_request_cb( struct evhttp_request * req , void * arg)",64, 152, 13, 0
repos/cpp/bitcoin/src/httpserver.cpp,"http_reject_request_cb( struct evhttp_request * req , void *)",5, 70, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"ThreadHTTP( struct event_base * base)",9, 63, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPBindAddresses( struct evhttp * http)",40, 142, 12, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPWorkQueueRun( WorkQueue<HTTPClosure> * queue)",5, 60, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"libevent_log_cb( int severity , const char * msg)",11, 91, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"InitHTTPServer()",50, 100, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"UpdateHTTPServerLogging( bool enable)",13, 59, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"StartHTTPServer()",11, 92, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"InterruptHTTPServer()",10, 70, 8, 0
repos/cpp/bitcoin/src/httpserver.cpp,"StopHTTPServer()",32, 81, 4, 0
repos/cpp/bitcoin/src/httpserver.cpp,"EventBase()",4, 31, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"httpevent_callback_fn( evutil_socket_t , short , void * data)",8, 70, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPEvent::HTTPEvent( struct event_base * base , bool _deleteWhenTriggered , const std :: function<void()> & _handler)",6, 113, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPEvent::~HTTPEvent()",4, 24, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPEvent::trigger( struct timeval * tv)",7, 76, 8, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::HTTPRequest( struct evhttp_request * _req)",4, 72, 55, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::~HTTPRequest()",9, 71, 8, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::GetHeader( const std :: string & hdr) const",10, 82, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::ReadBody()",19, 80, 5, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::WriteHeader( const std :: string & hdr , const std :: string & value)",6, 80, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::WriteReply( int nStatus , const std :: string & strReply)",29, 99, 8, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::GetPeer() const",13, 66, 8, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::GetURI() const",4, 40, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"HTTPRequest::GetRequestMethod() const",20, 65, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"RegisterHTTPHandler( const std :: string & prefix , bool exactMatch , const HTTPRequestHandler & handler)",5, 104, 0, 0
repos/cpp/bitcoin/src/httpserver.cpp,"UnregisterHTTPHandler( const std :: string & prefix , bool exactMatch)",13, 106, 8, 0
repos/cpp/bitcoin/src/httpserver.cpp,"urlDecode( const std :: string & urlEncoded)",11, 78, 8, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CMerkleBlock::CMerkleBlock( const CBlock & block , CBloomFilter * filter , const std :: set<uint256> * txids)",26, 102, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::CalcHash( int height , unsigned int pos , const std :: vector<uint256> & vTxid)",19, 104, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::TraverseAndBuild( int height , unsigned int pos , const std :: vector<uint256> & vTxid , const std :: vector<bool> & vMatch)",17, 142, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::TraverseAndExtract( int height , unsigned int pos , unsigned int & nBitsUsed , unsigned int & nHashUsed , std :: vector<uint256> & vMatch , std :: vector<unsigned int> & vnIndex)",37, 195, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::CPartialMerkleTree( const std :: vector<uint256> & vTxid , const std :: vector<bool> & vMatch)",13, 152, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::CPartialMerkleTree()",1, 75, 0, 0
repos/cpp/bitcoin/src/merkleblock.cpp,"CPartialMerkleTree::ExtractMatches( std :: vector<uint256> & vMatch , std :: vector<unsigned int> & vnIndex)",32, 111, 0, 0
repos/cpp/bitcoin/src/chainparamsbase.cpp,"SetupChainParamsBaseOptions()",7, 170, 4, 0
repos/cpp/bitcoin/src/chainparamsbase.cpp,"BaseParams()",5, 37, 0, 0
repos/cpp/bitcoin/src/chainparamsbase.cpp,"CreateBaseChainParams( const std :: string & chain)",11, 87, 8, 0
repos/cpp/bitcoin/src/chainparamsbase.cpp,"SelectBaseParams( const std :: string & chain)",5, 58, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::CTxMemPoolEntry( const CTransactionRef & _tx , const CAmount & _nFee , int64_t _nTime , unsigned int _entryHeight , bool _spendsCoinbase , int64_t _sigOpsCost , LockPoints lp)",17, 147, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::UpdateFeeDelta( int64_t newFeeDelta)",6, 58, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::UpdateLockPoints( const LockPoints & lp)",4, 61, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::GetTxSize() const",4, 60, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateForDescendants( txiter updateIt , cacheMap & cachedDescendants , const std :: set<uint256> & setExclude)",41, 134, 12, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateTransactionsFromBlock( const std :: vector<uint256> & vHashesToUpdate)",42, 96, 12, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CalculateMemPoolAncestors( const CTxMemPoolEntry & entry , setEntries & setAncestors , uint64_t limitAncestorCount , uint64_t limitAncestorSize , uint64_t limitDescendantCount , uint64_t limitDescendantSize , std :: string & errString , bool fSearchForParents) const",61, 284, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateAncestorsOf( bool add , txiter it , setEntries & setAncestors)",14, 95, 8, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateEntryForAncestors( txiter it , const setEntries & setAncestors)",13, 99, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateChildrenForRemoval( txiter it)",7, 67, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateForRemoveFromMempool( const setEntries & entriesToRemove , bool updateDescendants)",57, 110, 8, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::UpdateDescendantState( int64_t modifySize , CAmount modifyFee , int64_t modifyCount)",8, 104, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPoolEntry::UpdateAncestorState( int64_t modifySize , CAmount modifyFee , int64_t modifyCount , int64_t modifySigOps)",10, 124, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CTxMemPool( CBlockPolicyEstimator * estimator)",10, 71, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::isSpent( const COutPoint & outpoint) const",5, 58, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetTransactionsUpdated() const",5, 56, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::AddTransactionsUpdated( unsigned int n)",5, 56, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::addUnchecked( const CTxMemPoolEntry & entry , setEntries & setAncestors , bool validFeeEstimate)",50, 109, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeUnchecked( txiter it , MemPoolRemovalReason reason)",24, 118, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CalculateDescendants( txiter entryit , setEntries & setDescendants) const",22, 88, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeRecursive( const CTransaction & origTx , MemPoolRemovalReason reason)",31, 90, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeForReorg( const CCoinsViewCache * pcoins , unsigned int nMemPoolHeight , int flags)",36, 129, 16, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeConflicts( const CTransaction & tx)",16, 77, 16, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::removeForBlock( const std :: vector<CTransactionRef> & vtx , unsigned int nBlockHeight)",28, 100, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::_clear()",12, 42, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::clear()",5, 25, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CheckInputsAndUpdateCoins( const CTransaction & tx , CCoinsViewCache & mempoolDuplicate , const int64_t spendheight)",8, 124, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::check( const CCoinsViewCache * pcoins) const",115, 147, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CompareDepthAndScore( const uint256 & hasha , const uint256 & hashb)",14, 82, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"DepthAndScoreComparator::operator ( )( const CTxMemPool :: indexed_transaction_set :: const_iterator & a , const CTxMemPool :: indexed_transaction_set :: const_iterator & b)",9, 144, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetSortedDepthAndScore() const",13, 108, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::queryHashes( std :: vector<uint256> & vtxid) const",12, 64, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"GetInfo( CTxMemPool :: indexed_transaction_set :: const_iterator it)",3, 138, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::infoAll() const",13, 55, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::get( const uint256 & hash) const",8, 66, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::info( const uint256 & hash) const",8, 66, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::PrioritiseTransaction( const uint256 & hash , const CAmount & nFeeDelta)",29, 112, 12, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::ApplyDelta( const uint256 hash , CAmount & nFeeDelta) const",9, 75, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::ClearPrioritisation( const uint256 hash)",5, 57, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetConflictTx( const COutPoint & prevout) const",5, 78, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetIter( const uint256 & txid) const",6, 83, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetIterSet( const std :: set<uint256> & hashes) const",9, 85, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::HasNoInputsOf( const CTransaction & tx) const",7, 61, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CCoinsViewMemPool::CCoinsViewMemPool( CCoinsView * baseIn , const CTxMemPool & mempoolIn)",1, 137, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CCoinsViewMemPool::GetCoin( const COutPoint & outpoint , Coin & coin) const",15, 99, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::DynamicMemoryUsage() const",5, 257, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::RemoveStaged( setEntries & stage , bool updateDescendants , MemPoolRemovalReason reason)",7, 104, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::Expire( int64_t time)",15, 101, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::addUnchecked( const CTxMemPoolEntry & entry , bool validFeeEstimate)",8, 99, 4, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateChild( txiter entry , txiter child , bool add)",9, 67, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::UpdateParent( txiter entry , txiter parent , bool add)",9, 69, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetMemPoolParents( txiter entry) const",7, 81, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetMemPoolChildren( txiter entry) const",7, 82, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetMinFee( size_t sizelimit) const",23, 108, 8, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::trackPackageRemoved( const CFeeRate & rate)",7, 61, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::TrimToSize( size_t sizelimit , std :: vector<COutPoint> * pvNoSpendsRemaining)",42, 131, 8, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::CalculateDescendantMaximum( txiter entry) const",21, 79, 12, 0
repos/cpp/bitcoin/src/txmempool.cpp,"CTxMemPool::GetTransactionAncestry( const uint256 & txid , size_t & ancestors , size_t & descendants) const",9, 109, 0, 0
repos/cpp/bitcoin/src/txmempool.cpp,"SaltedTxidHasher::SaltedTxidHasher()",1, 143, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AddOneShot( const std :: string & strDest)",5, 54, 0, 0
repos/cpp/bitcoin/src/net.cpp,"GetListenPort()",4, 79, 4, 0
repos/cpp/bitcoin/src/net.cpp,"GetLocal( CService & addr , const CNetAddr * paddrPeer)",23, 114, 12, 0
repos/cpp/bitcoin/src/net.cpp,"convertSeed6( const std :: vector<SeedSpec6> & vSeedsIn)",19, 88, 8, 0
repos/cpp/bitcoin/src/net.cpp,"GetLocalAddress( const CNetAddr * paddrPeer , ServiceFlags nLocalServices)",11, 81, 0, 0
repos/cpp/bitcoin/src/net.cpp,"GetnScore( const CService & addr)",6, 49, 4, 0
repos/cpp/bitcoin/src/net.cpp,"IsPeerAddrLocalGood( CNode * pnode)",6, 78, 4, 0
repos/cpp/bitcoin/src/net.cpp,"AdvertiseLocal( CNode * pnode)",25, 116, 12, 0
repos/cpp/bitcoin/src/net.cpp,"AddLocal( const CService & addr , int nScore)",25, 61, 4, 0
repos/cpp/bitcoin/src/net.cpp,"AddLocal( const CNetAddr & addr , int nScore)",4, 62, 4, 0
repos/cpp/bitcoin/src/net.cpp,"RemoveLocal( const CService & addr)",6, 53, 4, 0
repos/cpp/bitcoin/src/net.cpp,"SetReachable( enum Network net , bool reachable)",7, 54, 4, 0
repos/cpp/bitcoin/src/net.cpp,"IsReachable( enum Network net)",5, 35, 0, 0
repos/cpp/bitcoin/src/net.cpp,"IsReachable( const CNetAddr & addr)",4, 43, 4, 0
repos/cpp/bitcoin/src/net.cpp,"SeenLocal( const CService & addr)",10, 43, 8, 0
repos/cpp/bitcoin/src/net.cpp,"IsLocal( const CService & addr)",5, 41, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::FindNode( const CNetAddr & ip)",10, 54, 6, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::FindNode( const CSubNet & subNet)",10, 64, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::FindNode( const std :: string & addrName)",10, 55, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::FindNode( const CService & addr)",10, 58, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::CheckIncomingNonce( uint64_t nonce)",9, 99, 8, 0
repos/cpp/bitcoin/src/net.cpp,"GetBindAddress( SOCKET sock)",14, 88, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ConnectNode( CAddress addrConnect , const char * pszDest , bool fCountFailure , bool manual_connection)",95, 175, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::CloseSocketDisconnect()",10, 61, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::IsWhitelistedRange( const CNetAddr & addr)",7, 58, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::GetAddrName() const",4, 41, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::MaybeSetAddrName( const std :: string & addrNameIn)",6, 62, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::GetAddrLocal() const",4, 39, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::SetAddrLocal( const CService & addrLocalIn)",8, 138, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::copyStats( CNodeStats & stats)",59, 165, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::ReceiveMsgBytes( const char * pch , unsigned int nBytes , bool & complete)",50, 103, 12, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::SetSendVersion( int nVersionIn)",13, 120, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::GetSendVersion() const",11, 95, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CNetMessage::readHeader( const char * pch , unsigned int nBytes)",30, 66, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNetMessage::readData( const char * pch , unsigned int nBytes)",16, 85, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CNetMessage::GetMessageHash() const",7, 51, 0, 0
repos/cpp/bitcoin/src/net.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pnode -> cs_vSend)",51, 171, 12, 0
repos/cpp/bitcoin/src/net.cpp,"ReverseCompareNodeMinPingTime( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",4, 106, 0, 0
repos/cpp/bitcoin/src/net.cpp,"ReverseCompareNodeTimeConnected( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",4, 108, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CompareNetGroupKeyed( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",3, 99, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CompareNodeBlockTime( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",7, 123, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CompareNodeTXTime( const NodeEvictionCandidate & a , const NodeEvictionCandidate & b)",8, 129, 4, 0
repos/cpp/bitcoin/src/net.cpp,"EraseLastKElements( std :: vector<T> & elements , Comparator comparator , size_t k)",6, 90, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AttemptToEvictConnection()",83, 137, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AcceptConnection( const ListenSocket & hListenSocket)",85, 140, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DisconnectNodes()",61, 100, 20, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::NotifyNumConnectionsChanged()",13, 70, 12, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::InactivityCheck( CNode * pnode)",32, 178, 12, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GenerateSelectSet( std :: set<SOCKET> & recv_set , std :: set<SOCKET> & send_set , std :: set<SOCKET> & error_set)",45, 118, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SocketEvents( std :: set<SOCKET> & recv_set , std :: set<SOCKET> & send_set , std :: set<SOCKET> & error_set)",41, 113, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SocketEvents( std :: set<SOCKET> & recv_set , std :: set<SOCKET> & send_set , std :: set<SOCKET> & error_set)",73, 113, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SocketHandler()",122, 123, 24, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadSocketHandler()",9, 39, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::WakeMessageHandler()",8, 56, 8, 0
repos/cpp/bitcoin/src/net.cpp,"ThreadMapPort()",80, 103, 12, 0
repos/cpp/bitcoin/src/net.cpp,"StartMapPort()",7, 100, 8, 0
repos/cpp/bitcoin/src/net.cpp,"InterruptMapPort()",6, 35, 4, 0
repos/cpp/bitcoin/src/net.cpp,"StopMapPort()",7, 35, 4, 0
repos/cpp/bitcoin/src/net.cpp,"StartMapPort()",4, 33, 4, 0
repos/cpp/bitcoin/src/net.cpp,"InterruptMapPort()",4, 33, 4, 0
repos/cpp/bitcoin/src/net.cpp,"StopMapPort()",4, 33, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadDNSAddressSeed()",64, 146, 12, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DumpAddresses()",10, 70, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ProcessOneShot()",16, 75, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetTryNewOutboundPeer()",4, 40, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetTryNewOutboundPeer( bool flag)",5, 98, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetExtraOutboundCount()",13, 162, 12, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadOpenConnections( const std :: vector<std::string> connect)",166, 143, 12, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetAddedNodeInfo()",53, 134, 16, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadOpenAddedConnections()",26, 121, 20, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::OpenNetworkConnection( const CAddress & addrConnect , bool fCountFailure , CSemaphoreGrant * grantOutbound , const char * pszDest , bool fOneShot , bool fFeeler , bool manual_connection)",38, 192, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ThreadMessageHandler()",48, 142, 12, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::BindListenPort( const CService & addrBind , std :: string & strError , bool fWhitelisted)",68, 152, 8, 0
repos/cpp/bitcoin/src/net.cpp,"Discover()",50, 94, 20, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetNetworkActive( bool active)",12, 60, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::CConnman( uint64_t nSeed0In , uint64_t nSeed1In)",7, 94, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetNewNodeId()",4, 64, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Bind( const CService & addr , unsigned int flags)",12, 96, 12, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::InitBinds( const std :: vector<CService> & binds , const std :: vector<CService> & whiteBinds)",17, 104, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Start( CScheduler & scheduler , const Options & connOptions)",100, 202, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CNetCleanup::CNetCleanup()",1, 21, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CNetCleanup::~CNetCleanup()",7, 36, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Interrupt()",23, 60, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::Stop()",40, 119, 16, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DeleteNode( CNode * pnode)",10, 68, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::~CConnman()",5, 22, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetAddressCount() const",4, 41, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetServices( const CService & addr , ServiceFlags nServices)",4, 73, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::MarkAddressGood( const CAddress & addr)",4, 53, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AddNewAddresses( const std :: vector<CAddress> & vAddr , const CAddress & addrFrom , int64_t nTimePenalty)",4, 115, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetAddresses()",4, 47, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::AddNode( const std :: string & strNode)",10, 51, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::RemoveAddedNode( const std :: string & strNode)",11, 102, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetNodeCount( NumConnections flags)",15, 76, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetNodeStats( std :: vector<CNodeStats> & vstats)",10, 61, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DisconnectNode( const std :: string & strNode)",9, 58, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DisconnectNode( const CSubNet & subnet)",12, 53, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DisconnectNode( const CNetAddr & addr)",4, 52, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::DisconnectNode( NodeId id)",11, 41, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::RecordBytesRecv( uint64_t bytes)",5, 47, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::RecordBytesSent( uint64_t bytes)",16, 66, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetMaxOutboundTarget( uint64_t limit)",5, 52, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetMaxOutboundTarget()",5, 42, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetMaxOutboundTimeframe()",5, 45, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetMaxOutboundTimeLeftInCycle()",13, 80, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetMaxOutboundTimeframe( uint64_t timeframe)",11, 59, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::OutboundTargetReached( bool historicalBlockServingLimit)",19, 108, 8, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetOutboundTargetBytesLeft()",8, 129, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetTotalBytesRecv()",5, 39, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetTotalBytesSent()",5, 39, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetLocalServices() const",4, 48, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::SetBestHeight( int height)",4, 58, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetBestHeight() const",4, 56, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetReceiveFloodSize() const",1, 81, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::CNode( NodeId idIn , ServiceFlags nLocalServicesIn , int nMyStartingHeightIn , SOCKET hSocketIn , const CAddress & addrIn , uint64_t nKeyedNetGroupIn , uint64_t nLocalHostNonceIn , const CAddress & addrBindIn , const std :: string & addrNameIn , bool fInboundIn)",30, 255, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CNode::~CNode()",4, 26, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::NodeFullyConnected( const CNode * pnode)",4, 74, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::PushMessage( CNode * pnode , CSerializedNetMsg && msg)",36, 129, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::ForNode( NodeId id , std :: function<bool(CNode*pnode)> func)",12, 74, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::PoissonNextSendInbound( int64_t now , int average_interval_seconds)",10, 117, 8, 0
repos/cpp/bitcoin/src/net.cpp,"PoissonNextSend( int64_t now , int average_interval_seconds)",4, 147, 4, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::GetDeterministicRandomizer( uint64_t id) const",4, 67, 0, 0
repos/cpp/bitcoin/src/net.cpp,"CConnman::CalculateKeyedNetGroup( const CAddress & ad) const",6, 120, 4, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::CScheduler()",3, 97, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::~CScheduler()",4, 41, 4, 0
repos/cpp/bitcoin/src/scheduler.cpp,"toPosixTime( const boost :: chrono :: system_clock :: time_point & t)",6, 169, 4, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::serviceQueue()",60, 101, 16, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::stop( bool drain)",11, 61, 8, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::schedule( CScheduler :: Function f , boost :: chrono :: system_clock :: time_point t)",8, 93, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::scheduleFromNow( CScheduler :: Function f , int64_t deltaMilliSeconds)",4, 102, 4, 0
repos/cpp/bitcoin/src/scheduler.cpp,"Repeat( CScheduler * s , CScheduler :: Function f , int64_t deltaMilliSeconds)",5, 88, 4, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::scheduleEvery( CScheduler :: Function f , int64_t deltaMilliSeconds)",4, 88, 4, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::getQueueInfo( boost :: chrono :: system_clock :: time_point & first , boost :: chrono :: system_clock :: time_point & last) const",11, 82, 29, 0
repos/cpp/bitcoin/src/scheduler.cpp,"CScheduler::AreThreadsServicingQueue() const",4, 57, 4, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::MaybeScheduleProcessQueue()",11, 91, 4, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::ProcessQueue()",28, 105, 8, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::AddToProcessQueue( std :: function<void()> func)",9, 85, 0, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::EmptyQueue()",9, 56, 8, 0
repos/cpp/bitcoin/src/scheduler.cpp,"SingleThreadedSchedulerClient::CallbacksPending()",4, 59, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"IsToKeyID( const CScript & script , CKeyID & hash)",10, 79, 28, 0
repos/cpp/bitcoin/src/compressor.cpp,"IsToScriptID( const CScript & script , CScriptID & hash)",9, 74, 4, 0
repos/cpp/bitcoin/src/compressor.cpp,"IsToPubKey( const CScript & script , CPubKey & pubkey)",14, 99, 8, 0
repos/cpp/bitcoin/src/compressor.cpp,"CompressScript( const CScript & script , std :: vector<unsigned char> & out)",30, 76, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"GetSpecialScriptSize( unsigned int nSize)",8, 62, 4, 0
repos/cpp/bitcoin/src/compressor.cpp,"DecompressScript( CScript & script , unsigned int nSize , const std :: vector<unsigned char> & in)",44, 97, 0, 0
repos/cpp/bitcoin/src/compressor.cpp,"CompressAmount( uint64_t n)",18, 41, 8, 0
repos/cpp/bitcoin/src/compressor.cpp,"DecompressAmount( uint64_t x)",25, 71, 4, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::base_uint( const std :: string & str)",6, 110, 4, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator <<=( unsigned int shift)",15, 66, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator >>=( unsigned int shift)",15, 66, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator * =( uint32_t b32)",10, 59, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator * =( const base_uint & b)",14, 74, 12, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::operator / =( const base_uint & b)",24, 79, 12, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::CompareTo( const base_uint<BITS> & b) const",10, 63, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::EqualTo( uint64_t b) const",12, 48, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::getdouble() const",10, 42, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::GetHex() const",4, 44, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::SetHex( const char * psz)",4, 46, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::SetHex( const std :: string & str)",4, 53, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::ToString() const",4, 46, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"base_uint<BITS>::bits() const",13, 55, 12, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"arith_uint256::SetCompact( uint32_t nCompact , bool * pfNegative , bool * pfOverflow)",19, 96, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"arith_uint256::GetCompact( bool fNegative) const",22, 89, 4, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"ArithToUint256( const arith_uint256 & a)",7, 47, 0, 0
repos/cpp/bitcoin/src/arith_uint256.cpp,"UintToArith256( const uint256 & a)",7, 47, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"SetupBitcoinTxArgs()",35, 164, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"AppInitRawTx( int argc , char * argv [ ])",40, 108, 8, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"RegisterSetJson( const std :: string & key , const std :: string & rawJson)",10, 80, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"RegisterSet( const std :: string & strInput)",14, 72, 8, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"RegisterLoad( const std :: string & strInput)",40, 74, 8, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"ExtractAndValidateValue( const std :: string & strValue)",7, 68, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxVersion( CMutableTransaction & tx , const std :: string & cmdVal)",8, 111, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxLocktime( CMutableTransaction & tx , const std :: string & cmdVal)",8, 94, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxRBFOptIn( CMutableTransaction & tx , const std :: string & strInIdx)",19, 102, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddInput( CMutableTransaction & tx , const std :: string & strInput)",33, 96, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutAddr( CMutableTransaction & tx , const std :: string & strInput)",24, 85, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutPubKey( CMutableTransaction & tx , const std :: string & strInput)",43, 97, 12, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutMultiSig( CMutableTransaction & tx , const std :: string & strInput)",73, 136, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutData( CMutableTransaction & tx , const std :: string & strInput)",26, 85, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxAddOutScript( CMutableTransaction & tx , const std :: string & strInput)",44, 116, 24, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxDelInput( CMutableTransaction & tx , const std :: string & strInIdx)",11, 102, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxDelOutput( CMutableTransaction & tx , const std :: string & strOutIdx)",11, 107, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"findSighashFlags( int & flags , const std :: string & flagStr)",13, 69, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"AmountFromValue( const UniValue & value)",11, 70, 8, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTxSign( CMutableTransaction & tx , const std :: string & flagStr)",115, 130, 12, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"Secp256k1Init::Secp256k1Init()",3, 22, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"Secp256k1Init::~Secp256k1Init()",3, 23, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"MutateTx( CMutableTransaction & tx , const std :: string & command , const std :: string & commandVal)",47, 74, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"OutputTxJSON( const CTransaction & tx)",8, 49, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"OutputTxHash( const CTransaction & tx)",6, 113, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"OutputTxHex( const CTransaction & tx)",6, 48, 0, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"OutputTx( const CTransaction & tx)",9, 47, 4, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"readStdin()",19, 58, 8, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"CommandLineRawTx( int argc , char * argv [ ])",62, 79, 12, 0
repos/cpp/bitcoin/src/bitcoin-tx.cpp,"main( int argc , char * argv [ ])",28, 63, 8, 0
repos/cpp/bitcoin/src/net_processing.cpp,"IteratorComparator::operator ( )( const I & a , const I & b) const",4, 54, 8, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CNodeState::CNodeState( CAddress addrIn , std :: string addrNameIn)",25, 94, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",6, 75, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",9, 110, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PushNodeVersion( CNode * pnode , CConnman * connman , int64_t nTime)",20, 190, 8, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",22, 129, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",32, 191, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",14, 123, 12, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",17, 119, 8, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",35, 180, 20, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",8, 111, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",4, 107, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",8, 108, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",86, 211, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",4, 75, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",8, 80, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",9, 102, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",26, 132, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"UpdateLastBlockAnnounceTime( NodeId node , int64_t time_in_seconds)",6, 71, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"IsOutboundDisconnectionCandidate( const CNode * node)",4, 94, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::InitializeNode( CNode * pnode)",11, 162, 8, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::FinalizeNode( NodeId nodeid , bool & fUpdateConnectionTime)",34, 85, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"GetNodeStateStats( NodeId nodeid , CNodeStateStats & stats)",14, 101, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( g_cs_orphans)",10, 113, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( g_cs_orphans)",33, 130, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( g_cs_orphans)",29, 82, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EraseOrphansFor( NodeId peer)",15, 116, 8, 0
repos/cpp/bitcoin/src/net_processing.cpp,"LimitOrphanTxSize( unsigned int nMaxOrphans)",35, 103, 8, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",19, 184, 8, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",8, 135, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::PeerLogicValidation( CConnman * connmanIn , BanMan * banman , CScheduler & scheduler , bool enable_bip61)",13, 150, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::BlockConnected( const std :: shared_ptr<const CBlock> & pblock , const CBlockIndex * pindex , const std :: vector<CTransactionRef> & vtxConflicted)",31, 166, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::NewPoWValidBlock( const CBlockIndex * pindex , const std :: shared_ptr<const CBlock> & pblock)",42, 134, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::UpdatedBlockTip( const CBlockIndex * pindexNew , const CBlockIndex * pindexFork , bool fInitialDownload)",31, 128, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::BlockChecked( const CBlock & block , const CValidationState & state)",32, 142, 12, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",35, 113, 19, 0
repos/cpp/bitcoin/src/net_processing.cpp,"RelayTransaction( const CTransaction & tx , CConnman * connman)",8, 72, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"RelayAddress( const CAddress & addr , bool fReachable , CConnman * connman)",35, 161, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"ProcessGetBlockData( CNode * pfrom , const CChainParams & chainparams , const CInv & inv , CConnman * connman)",154, 306, 12, 0
repos/cpp/bitcoin/src/net_processing.cpp,"LOCKS_EXCLUDED( cs_main)",63, 160, 0, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",7, 93, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"SendBlockTransactions( const CBlock & block , const BlockTransactionsRequest & req , CNode * pfrom , CConnman * connman)",15, 136, 12, 0
repos/cpp/bitcoin/src/net_processing.cpp,"ProcessHeadersMessage( CNode * pfrom , CConnman * connman , const std :: vector<CBlockHeader> & headers , const CChainParams & chainparams , bool punish_duplicate_invalid)",220, 231, 12, 0
repos/cpp/bitcoin/src/net_processing.cpp,"ProcessMessage( CNode * pfrom , const std :: string & strCommand , CDataStream & vRecv , int64_t nTimeReceived , const CChainParams & chainparams , CConnman * connman , const std :: atomic<bool> & interruptMsgProc , bool enable_bip61)",1377, 417, 12, 0
repos/cpp/bitcoin/src/net_processing.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",33, 195, 12, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::ProcessMessages( CNode * pfrom , std :: atomic<bool> & interruptMsgProc)",121, 208, 12, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::ConsiderEviction( CNode * pto , int64_t time_in_seconds)",52, 339, 16, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::EvictExtraOutboundPeers( int64_t time_in_seconds)",56, 195, 20, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::CheckForStaleTipAndEvictPeers( const Consensus :: Params & consensusParams)",22, 164, 12, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CompareInvMempoolOrder::CompareInvMempoolOrder( CTxMemPool * _mempool)",4, 58, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CompareInvMempoolOrder::operator ( )( std :: set<uint256> :: iterator a , std :: set<uint256> :: iterator b)",6, 82, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"PeerLogicValidation::SendMessages( CNode * pto)",546, 224, 16, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CNetProcessingCleanup::CNetProcessingCleanup()",1, 31, 4, 0
repos/cpp/bitcoin/src/net_processing.cpp,"CNetProcessingCleanup::~CNetProcessingCleanup()",5, 45, 8, 0
repos/cpp/bitcoin/src/addrdb.cpp,"SerializeDB( Stream & stream , const Data & data)",14, 77, 8, 0
repos/cpp/bitcoin/src/addrdb.cpp,"SerializeFileDB( const std :: string & prefix , const fs :: path & path , const Data & data)",26, 88, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"DeserializeDB( Stream & stream , Data & data , bool fCheckSum = true)",29, 81, 16, 0
repos/cpp/bitcoin/src/addrdb.cpp,"DeserializeFileDB( const fs :: path & path , Data & data)",10, 77, 8, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CBanDB::CBanDB( fs :: path ban_list_path)",3, 83, 0, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CBanDB::Write( const banmap_t & banSet)",4, 64, 4, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CBanDB::Read( banmap_t & banSet)",4, 55, 4, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CAddrDB::CAddrDB()",4, 43, 4, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CAddrDB::Write( const CAddrMan & addr)",4, 53, 4, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CAddrDB::Read( CAddrMan & addr)",4, 46, 4, 0
repos/cpp/bitcoin/src/addrdb.cpp,"CAddrDB::Read( CAddrMan & addr , CDataStream & ssPeers)",9, 57, 0, 0
repos/cpp/bitcoin/src/outputtype.cpp,"ParseOutputType( const std :: string & type , OutputType & output_type)",14, 71, 0, 0
repos/cpp/bitcoin/src/outputtype.cpp,"FormatOutputType( OutputType type)",9, 73, 4, 0
repos/cpp/bitcoin/src/outputtype.cpp,"GetDestinationForKey( const CPubKey & key , OutputType type)",18, 73, 0, 0
repos/cpp/bitcoin/src/outputtype.cpp,"GetAllDestinationsForKey( const CPubKey & key)",11, 98, 8, 0
repos/cpp/bitcoin/src/outputtype.cpp,"AddAndGetDestinationForScript( CKeyStore & keystore , const CScript & script , OutputType type)",25, 106, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CChain::SetTip( CBlockIndex * pindex)",11, 58, 4, 0
repos/cpp/bitcoin/src/chain.cpp,"CChain::GetLocator( const CBlockIndex * pindex) const",27, 68, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CChain::FindFork( const CBlockIndex * pindex) const",10, 71, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"CChain::FindEarliestAtLeast( int64_t nTime) const",6, 108, 4, 0
repos/cpp/bitcoin/src/chain.cpp,"InvertLowestOne( int n)",1, 65, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"GetSkipHeight( int height)",9, 102, 4, 0
repos/cpp/bitcoin/src/chain.cpp,"CBlockIndex::GetAncestor( int height) const",26, 81, 12, 0
repos/cpp/bitcoin/src/chain.cpp,"CBlockIndex::GetAncestor( int height)",4, 97, 4, 0
repos/cpp/bitcoin/src/chain.cpp,"CBlockIndex::BuildSkip()",5, 60, 8, 0
repos/cpp/bitcoin/src/chain.cpp,"GetBlockProof( const CBlockIndex & block)",14, 87, 4, 0
repos/cpp/bitcoin/src/chain.cpp,"GetBlockProofEquivalentTime( const CBlockIndex & to , const CBlockIndex & from , const CBlockIndex & tip , const Consensus :: Params & params)",16, 141, 0, 0
repos/cpp/bitcoin/src/chain.cpp,"LastCommonAncestor( const CBlockIndex * pa , const CBlockIndex * pb)",16, 86, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::CNetAddr()",4, 31, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::SetIP( const CNetAddr & ipIn)",4, 43, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::SetRaw( Network network , const uint8_t * ip_in)",15, 61, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::SetInternal( const std :: string & name)",11, 90, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::SetSpecial( const std :: string & strName)",13, 106, 8, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::CNetAddr( const struct in_addr & ipv4Addr)",4, 51, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::CNetAddr( const struct in6_addr & ipv6Addr , const uint32_t scope)",5, 74, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetByte( int n) const",4, 44, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsBindAny() const",9, 42, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsIPv4() const",4, 56, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsIPv6() const",4, 53, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC1918() const",7, 72, 8, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC2544() const",4, 84, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC3927() const",4, 65, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC6598() const",4, 83, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC5737() const",6, 85, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC3849() const",4, 101, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC3964() const",4, 57, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC6052() const",5, 82, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC4380() const",4, 97, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC4862() const",5, 71, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC4193() const",4, 43, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC6145() const",5, 79, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRFC4843() const",4, 112, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsTor() const",4, 64, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsLocal() const",13, 81, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsValid() const",38, 92, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsRoutable() const",4, 188, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::IsInternal() const",4, 73, 3, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetNetwork() const",16, 42, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::ToStringIP() const",23, 118, 8, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::ToString() const",4, 39, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator ==( const CNetAddr & a , const CNetAddr & b)",4, 54, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator <( const CNetAddr & a , const CNetAddr & b)",4, 53, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetInAddr( struct in_addr * pipv4Addr) const",7, 58, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetIn6Addr( struct in6_addr * pipv6Addr) const",8, 60, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetGroup() const",72, 103, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetHash() const",7, 42, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"GetExtNetwork( const CNetAddr * addr)",8, 47, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CNetAddr::GetReachabilityFrom( const CNetAddr * paddrPartner) const",57, 140, 8, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService()",3, 31, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const CNetAddr & cip , unsigned short portIn)",3, 93, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const struct in_addr & ipv4Addr , unsigned short portIn)",3, 109, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const struct in6_addr & ipv6Addr , unsigned short portIn)",3, 110, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const struct sockaddr_in & addr)",4, 105, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::CService( const struct sockaddr_in6 & addr)",4, 128, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::SetSockAddr( const struct sockaddr * paddr)",13, 62, 8, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::GetPort() const",4, 41, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator ==( const CService & a , const CService & b)",4, 85, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator <( const CService & a , const CService & b)",4, 141, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::GetSockAddr( struct sockaddr * paddr , socklen_t * addrlen) const",29, 77, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::GetKey() const",9, 52, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::ToStringPort() const",4, 43, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::ToStringIPPort() const",8, 59, 8, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CService::ToString() const",4, 39, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::CSubNet()",5, 41, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::CSubNet( const CNetAddr & addr , int32_t mask)",24, 90, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::CSubNet( const CNetAddr & addr , const CNetAddr & mask)",17, 90, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::CSubNet( const CNetAddr & addr)",6, 43, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::Match( const CNetAddr & addr) const",9, 56, 8, 0
repos/cpp/bitcoin/src/netaddress.cpp,"NetmaskBits( uint8_t x)",15, 41, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::ToString() const",37, 103, 12, 0
repos/cpp/bitcoin/src/netaddress.cpp,"CSubNet::IsValid() const",4, 30, 0, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator ==( const CSubNet & a , const CSubNet & b)",4, 94, 4, 0
repos/cpp/bitcoin/src/netaddress.cpp,"operator <( const CSubNet & a , const CSubNet & b)",4, 104, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"DummyWalletInit::HasWalletSupport() const",1, 59, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"DummyWalletInit::ParameterInteraction() const",1, 62, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"DummyWalletInit::Construct( InitInterfaces & interfaces) const",1, 111, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"DummyWalletInit::AddWalletOptions() const",8, 146, 8, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"GetWalletDir()",4, 75, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"ListWalletDir()",4, 75, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"GetWallets()",4, 75, 4, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"LoadWallet( interfaces :: Chain & chain , const std :: string & name , std :: string & error , std :: string & warning)",4, 129, 0, 0
repos/cpp/bitcoin/src/dummywallet.cpp,"interfaces::MakeWallet( const std :: shared_ptr<CWallet> & wallet)",4, 75, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GolombRiceEncode( BitStreamWriter<OStream> & bitwriter , uint8_t P , uint64_t x)",15, 89, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GolombRiceDecode( BitStreamReader<IStream> & bitreader , uint8_t P)",12, 81, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"MapIntoRange( uint64_t x , uint64_t n)",25, 90, 4, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::HashToRange( const Element & element) const",7, 77, 4, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::BuildHashedSet( const ElementSet & elements) const",10, 82, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::GCSFilter( const Params & params)",3, 53, 4, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::GCSFilter( const Params & params , std :: vector<unsigned char> encoded_filter)",22, 100, 4, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::GCSFilter( const Params & params , const ElementSet & elements)",29, 76, 4, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::MatchInternal( const uint64_t * element_hashes , size_t size) const",31, 81, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::Match( const Element & element) const",5, 52, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"GCSFilter::MatchAny( const ElementSet & elements) const",5, 68, 4, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BasicFilterElements( const CBlock & block , const CBlockUndo & block_undo)",23, 79, 49, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BlockFilter::BlockFilter( BlockFilterType filter_type , const uint256 & block_hash , std :: vector<unsigned char> filter)",10, 81, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BlockFilter::BlockFilter( BlockFilterType filter_type , const CBlock & block , const CBlockUndo & block_undo)",9, 105, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BlockFilter::BuildParams( GCSFilter :: Params & params) const",15, 63, 0, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BlockFilter::GetHash() const",8, 73, 4, 0
repos/cpp/bitcoin/src/blockfilter.cpp,"BlockFilter::ComputeHeader( const uint256 & prev_header) const",11, 69, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"ParseNetwork( std :: string net)",11, 129, 8, 0
repos/cpp/bitcoin/src/netbase.cpp,"GetNetworkName( enum Network net)",9, 47, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupIntern( const char * pszName , std :: vector<CNetAddr> & vIP , unsigned int nMaxSolutions , bool fAllowLookup)",52, 121, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupHost( const char * pszName , std :: vector<CNetAddr> & vIP , unsigned int nMaxSolutions , bool fAllowLookup)",11, 112, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupHost( const char * pszName , CNetAddr & addr , bool fAllowLookup)",9, 72, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"Lookup( const char * pszName , std :: vector<CService> & vAddr , int portDefault , bool fAllowLookup , unsigned int nMaxSolutions)",17, 127, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"Lookup( const char * pszName , CService & addr , int portDefault , bool fAllowLookup)",9, 85, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupNumeric( const char * pszName , int portDefault)",9, 75, 4, 0
repos/cpp/bitcoin/src/netbase.cpp,"MillisToTimeval( int64_t nTimeout)",7, 49, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"InterruptibleRecv( uint8_t * data , size_t len , int timeout , const SOCKET & hSocket)",46, 102, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"Socks5ErrorString( uint8_t err)",23, 50, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"Socks5( const std :: string & strDest , int port , const ProxyCredentials * auth , const SOCKET & hSocket)",118, 118, 8, 0
repos/cpp/bitcoin/src/netbase.cpp,"CreateSocket( const CService & addrConnect)",35, 134, 8, 0
repos/cpp/bitcoin/src/netbase.cpp,"LogConnectFailure( bool manual_connection , const char * fmt , const Args & ... args)",8, 94, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"ConnectSocketDirectly( const CService & addrConnect , const SOCKET & hSocket , int nTimeout , bool manual_connection)",64, 149, 16, 0
repos/cpp/bitcoin/src/netbase.cpp,"SetProxy( enum Network net , const proxyType & addrProxy)",8, 62, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"GetProxy( enum Network net , proxyType & proxyInfoOut)",8, 59, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"SetNameProxy( const proxyType & addrProxy)",7, 48, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"GetNameProxy( proxyType & nameProxyOut)",7, 45, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"HaveNameProxy()",4, 32, 4, 0
repos/cpp/bitcoin/src/netbase.cpp,"IsProxy( const CNetAddr & addr)",8, 63, 8, 0
repos/cpp/bitcoin/src/netbase.cpp,"ConnectThroughProxy( const proxyType & proxy , const std :: string & strDest , int port , const SOCKET & hSocket , int nTimeout , bool * outProxyConnectionFailed)",23, 156, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"LookupSubNet( const char * pszName , CSubNet & ret)",36, 98, 12, 0
repos/cpp/bitcoin/src/netbase.cpp,"NetworkErrorString( int err)",15, 122, 8, 0
repos/cpp/bitcoin/src/netbase.cpp,"NetworkErrorString( int err)",16, 90, 0, 0
repos/cpp/bitcoin/src/netbase.cpp,"CloseSocket( SOCKET & hSocket)",15, 107, 8, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::fopen( const fs :: path & p , const char * mode)",9, 78, 4, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::GetErrorReason()",3, 38, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::FileLock( const fs :: path & file)",7, 46, 4, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::~FileLock()",6, 22, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::TryLock()",16, 43, 4, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::GetErrorReason()",8, 121, 8, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::FileLock( const fs :: path & file)",8, 135, 4, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::~FileLock()",6, 41, 4, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::FileLock::TryLock()",12, 169, 4, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::get_filesystem_error_message( const fs :: filesystem_error & e)",15, 103, 4, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::openmodeToStr( std :: ios_base :: openmode mode)",37, 96, 4, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::ifstream::open( const fs :: path & p , std :: ios_base :: openmode mode)",14, 69, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::ifstream::close()",8, 29, 4, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::ofstream::open( const fs :: path & p , std :: ios_base :: openmode mode)",14, 69, 0, 0
repos/cpp/bitcoin/src/fs.cpp,"fsbridge::ofstream::close()",8, 29, 4, 0
repos/cpp/bitcoin/src/bech32.cpp,"Cat( data x , const data & y)",5, 43, 4, 0
repos/cpp/bitcoin/src/bech32.cpp,"PolyMod( const data & v)",58, 105, 8, 0
repos/cpp/bitcoin/src/bech32.cpp,"LowerCase( unsigned char c)",4, 57, 4, 0
repos/cpp/bitcoin/src/bech32.cpp,"ExpandHRP( const std :: string & hrp)",13, 46, 4, 0
repos/cpp/bitcoin/src/bech32.cpp,"VerifyChecksum( const std :: string & hrp , const data & values)",8, 98, 4, 0
repos/cpp/bitcoin/src/bech32.cpp,"CreateChecksum( const std :: string & hrp , const data & values)",12, 83, 4, 0
repos/cpp/bitcoin/src/bech32.cpp,"bech32::Encode( const std :: string & hrp , const data & values)",10, 65, 0, 0
repos/cpp/bitcoin/src/bech32.cpp,"bech32::Decode( const std :: string & str)",32, 82, 4, 0
repos/cpp/bitcoin/src/core_read.cpp,"ParseScript( const std :: string & s)",67, 114, 4, 0
repos/cpp/bitcoin/src/core_read.cpp,"CheckTxScriptsSanity( const CMutableTransaction & tx)",19, 106, 8, 0
repos/cpp/bitcoin/src/core_read.cpp,"DecodeHexTx( CMutableTransaction & tx , const std :: string & hex_tx , bool try_no_witness , bool try_witness)",34, 108, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"DecodeHexBlockHeader( CBlockHeader & header , const std :: string & hex_header)",13, 79, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"DecodeHexBlk( CBlock & block , const std :: string & strHexBlk)",16, 67, 4, 0
repos/cpp/bitcoin/src/core_read.cpp,"DecodeBase64PSBT( PartiallySignedTransaction & psbt , const std :: string & base64_tx , std :: string & error)",10, 106, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"DecodeRawPSBT( PartiallySignedTransaction & psbt , const std :: string & tx_data , std :: string & error)",15, 105, 4, 0
repos/cpp/bitcoin/src/core_read.cpp,"ParseHashStr( const std :: string & strHex , uint256 & result)",8, 62, 0, 0
repos/cpp/bitcoin/src/core_read.cpp,"ParseHexUV( const UniValue & v , const std :: string & strName)",9, 98, 8, 0
repos/cpp/bitcoin/src/core_read.cpp,"ParseSighashString( const UniValue & sighash)",22, 92, 12, 0
repos/cpp/bitcoin/src/txdb.cpp,"CoinEntry::CoinEntry( const COutPoint * ptr)",1, 103, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CoinEntry::Serialize( Stream & s) const",5, 38, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CoinEntry::Unserialize( Stream & s)",5, 34, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::CCoinsViewDB( size_t nCacheSize , bool fMemory , bool fWipe)",3, 140, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::GetCoin( const COutPoint & outpoint , Coin & coin) const",3, 74, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::HaveCoin( const COutPoint & outpoint) const",3, 63, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::GetBestBlock() const",6, 48, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::GetHeadBlocks() const",7, 59, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlock)",60, 151, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::EstimateSize() const",4, 56, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::CBlockTreeDB( size_t nCacheSize , bool fMemory , bool fWipe)",2, 208, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::ReadBlockFileInfo( int nFile , CBlockFileInfo & info)",3, 72, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::WriteReindexing( bool fReindexing)",6, 55, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::ReadReindexing( bool & fReindexing)",3, 55, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::ReadLastBlockFile( int & nFile)",3, 51, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::Cursor() const",17, 111, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::GetKey( COutPoint & key) const",9, 54, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::GetValue( Coin & coin) const",4, 52, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::GetValueSize() const",4, 54, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::Valid() const",4, 39, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDBCursor::Next()",10, 111, 8, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::WriteBatchSync( const std :: vector<std::pair<int,const CBlockFileInfo*>> & fileInfo , int nLastFile , const std :: vector<const CBlockIndex*> & blockinfo)",11, 170, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::WriteFlag( const std :: string & name , bool fValue)",3, 69, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::ReadFlag( const std :: string & name , bool & fValue)",7, 69, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CBlockTreeDB::LoadBlockIndexGuts( const Consensus :: Params & consensusParams , std :: function<CBlockIndex*(const uint256&)> insertBlockIndex)",42, 142, 0, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoins::CCoins()",1, 57, 4, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoins::Unserialize( Stream & s)",32, 75, 8, 0
repos/cpp/bitcoin/src/txdb.cpp,"CCoinsViewDB::Upgrade()",63, 104, 20, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::ThreadSafeMessageBox( const std :: string & message , const std :: string & caption , unsigned int style)",1, 193, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::ThreadSafeQuestion( const std :: string & message , const std :: string & non_interactive_message , const std :: string & caption , unsigned int style)",1, 258, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::InitMessage( const std :: string & message)",1, 111, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyNumConnectionsChanged( int newNumConnections)",1, 148, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyNetworkActiveChanged( bool networkActive)",1, 139, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyAlertChanged()",1, 92, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::LoadWallet( std :: unique_ptr<interfaces::Wallet> & wallet)",1, 125, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::ShowProgress( const std :: string & title , int nProgress , bool resume_possible)",1, 174, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyBlockTip( bool b , const CBlockIndex * i)",1, 116, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::NotifyHeaderTip( bool b , const CBlockIndex * i)",1, 118, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"CClientUIInterface::BannedListChanged()",1, 90, 0, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"InitError( const std :: string & str)",5, 78, 4, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"InitWarning( const std :: string & str)",4, 80, 4, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"AmountHighWarn( const std :: string & optname)",4, 58, 4, 0
repos/cpp/bitcoin/src/ui_interface.cpp,"AmountErrMsg( const char * const optname , const std :: string & strValue)",4, 85, 4, 0
repos/cpp/bitcoin/src/clientversion.cpp,"FormatVersion( int nVersion)",7, 127, 8, 0
repos/cpp/bitcoin/src/clientversion.cpp,"FormatFullVersion()",4, 32, 0, 0
repos/cpp/bitcoin/src/clientversion.cpp,"FormatSubVersion( const std :: string & name , int nClientVersion , const std :: vector<std::string> & comments)",16, 116, 0, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::base_blob( const std :: vector<unsigned char> & vch)",5, 66, 0, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::GetHex() const",4, 124, 4, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::SetHex( const char * psz)",27, 61, 12, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::SetHex( const std :: string & str)",4, 53, 0, 0
repos/cpp/bitcoin/src/uint256.cpp,"base_blob<BITS>::ToString() const",4, 46, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CMessageHeader::CMessageHeader( const MessageStartChars & pchMessageStartIn)",7, 75, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CMessageHeader::CMessageHeader( const MessageStartChars & pchMessageStartIn , const char * pszCommand , unsigned int nMessageSizeIn)",8, 128, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CMessageHeader::GetCommand() const",4, 84, 4, 0
repos/cpp/bitcoin/src/protocol.cpp,"CMessageHeader::IsValid( const MessageStartChars & pchMessageStartIn) const",29, 118, 8, 0
repos/cpp/bitcoin/src/protocol.cpp,"GetDesirableServiceFlags( ServiceFlags services)",6, 83, 4, 0
repos/cpp/bitcoin/src/protocol.cpp,"SetServiceFlagsIBDCache( bool state)",3, 48, 4, 0
repos/cpp/bitcoin/src/protocol.cpp,"CAddress::CAddress()",4, 34, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CAddress::CAddress( CService ipIn , ServiceFlags nServicesIn)",5, 77, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"CAddress::Init()",5, 27, 4, 0
repos/cpp/bitcoin/src/protocol.cpp,"CInv::CInv()",5, 20, 4, 0
repos/cpp/bitcoin/src/protocol.cpp,"CInv::CInv( int typeIn , const uint256 & hashIn)",1, 78, 0, 0
repos/cpp/bitcoin/src/protocol.cpp,"operator <( const CInv & a , const CInv & b)",4, 71, 4, 0
repos/cpp/bitcoin/src/protocol.cpp,"CInv::GetCommand() const",16, 94, 8, 0
repos/cpp/bitcoin/src/protocol.cpp,"CInv::ToString() const",8, 66, 8, 0
repos/cpp/bitcoin/src/protocol.cpp,"getAllNetMessageTypes()",4, 56, 0, 0
repos/cpp/bitcoin/src/init.cpp,"GetPidFile()",4, 86, 4, 0
repos/cpp/bitcoin/src/init.cpp,"CreatePidFile()",15, 127, 8, 0
repos/cpp/bitcoin/src/init.cpp,"CCoinsViewErrorCatcher::CCoinsViewErrorCatcher( CCoinsView * view)",1, 82, 4, 0
repos/cpp/bitcoin/src/init.cpp,"CCoinsViewErrorCatcher::GetCoin( const COutPoint & outpoint , Coin & coin) const",13, 131, 12, 0
repos/cpp/bitcoin/src/init.cpp,"Interrupt()",14, 32, 8, 0
repos/cpp/bitcoin/src/init.cpp,"Shutdown( InitInterfaces & interfaces)",112, 111, 8, 0
repos/cpp/bitcoin/src/init.cpp,"HandleSIGTERM( int)",4, 31, 0, 0
repos/cpp/bitcoin/src/init.cpp,"HandleSIGHUP( int)",4, 40, 4, 0
repos/cpp/bitcoin/src/init.cpp,"consoleCtrlHandler( DWORD dwCtrlType)",6, 56, 0, 0
repos/cpp/bitcoin/src/init.cpp,"registerSignalHandler( int signal , void(*handler)(int))",8, 67, 0, 0
repos/cpp/bitcoin/src/init.cpp,"OnRPCStarted()",4, 63, 4, 0
repos/cpp/bitcoin/src/init.cpp,"OnRPCStopped()",7, 66, 4, 0
repos/cpp/bitcoin/src/init.cpp,"SetupServerArgs()",197, 437, 4, 0
repos/cpp/bitcoin/src/init.cpp,"LicenseInfo()",21, 250, 11, 0
repos/cpp/bitcoin/src/init.cpp,"BlockNotifyCallback( bool initialSync , const CBlockIndex * pBlockIndex)",12, 82, 0, 0
repos/cpp/bitcoin/src/init.cpp,"BlockNotifyGenesisWait( bool , const CBlockIndex * pBlockIndex)",10, 73, 0, 0
repos/cpp/bitcoin/src/init.cpp,"CImportingNow::CImportingNow()",4, 37, 8, 0
repos/cpp/bitcoin/src/init.cpp,"CImportingNow::~CImportingNow()",4, 36, 8, 0
repos/cpp/bitcoin/src/init.cpp,"CleanupBlockRevFiles()",34, 99, 4, 0
repos/cpp/bitcoin/src/init.cpp,"ThreadImport( std :: vector<fs::path> vImportFiles)",74, 118, 8, 0
repos/cpp/bitcoin/src/init.cpp,"InitSanityCheck()",17, 82, 8, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitServers()",13, 69, 4, 0
repos/cpp/bitcoin/src/init.cpp,"InitParameterInteraction()",75, 132, 8, 0
repos/cpp/bitcoin/src/init.cpp,"ResolveErrMsg( const char * const optname , const std :: string & strBind)",4, 89, 0, 0
repos/cpp/bitcoin/src/init.cpp,"InitLogging()",24, 113, 4, 0
repos/cpp/bitcoin/src/init.cpp,"new_handler_terminate()",12, 76, 4, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitBasicSetup()",40, 102, 4, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitParameterInteraction()",230, 168, 12, 0
repos/cpp/bitcoin/src/init.cpp,"LockDataDirectory( bool probeOnly)",12, 153, 8, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitSanityChecks()",20, 117, 8, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitLockDataDirectory()",11, 107, 4, 0
repos/cpp/bitcoin/src/init.cpp,"AppInitMain( InitInterfaces & interfaces)",594, 184, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlReply::TorControlReply()",1, 35, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlReply::Clear()",5, 23, 8, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::TorControlConnection( struct event_base * _base)",4, 70, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::~TorControlConnection()",5, 46, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::readcb( struct bufferevent * bev , void * ctx)",44, 106, 20, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::eventcb( struct bufferevent * bev , short what , void * ctx)",16, 83, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::Connect( const std :: string & target , const ConnectionCB & _connected , const ConnectionCB & _disconnected)",29, 130, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::Disconnect()",6, 40, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlConnection::Command( const std :: string & cmd , const ReplyHandlerCB & reply_handler)",12, 96, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"SplitTorReplyLine( const std :: string & s)",12, 75, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"ParseTorReplyMapping( const std :: string & s)",86, 117, 24, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"ReadBinaryFile( const fs :: path & filename , size_t maxsize = std :: numeric_limits<size_t> :: max())",22, 127, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"WriteBinaryFile( const fs :: path & filename , const std :: string & data)",12, 79, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::TorController( struct event_base * _base , const std :: string & _target)",20, 105, 8, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::~TorController()",10, 34, 8, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::add_onion_cb( TorControlConnection & _conn , const TorControlReply & reply)",34, 107, 12, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::auth_cb( TorControlConnection & _conn , const TorControlReply & reply)",26, 120, 8, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"ComputeResponse( const std :: string & key , const std :: vector<uint8_t> & cookie , const std :: vector<uint8_t> & clientNonce , const std :: vector<uint8_t> & serverNonce)",10, 187, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::authchallenge_cb( TorControlConnection & _conn , const TorControlReply & reply)",34, 161, 12, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::protocolinfo_cb( TorControlConnection & _conn , const TorControlReply & reply)",73, 179, 16, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::connected_cb( TorControlConnection & _conn)",7, 138, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::disconnected_cb( TorControlConnection & _conn)",17, 102, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::Reconnect()",10, 100, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::GetPrivateKeyFile()",4, 47, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorController::reconnect_cb( evutil_socket_t fd , short what , void * arg)",5, 76, 0, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"TorControlThread()",6, 81, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"StartTorControl()",16, 106, 4, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"InterruptTorControl()",7, 46, 8, 0
repos/cpp/bitcoin/src/torcontrol.cpp,"StopTorControl()",8, 33, 8, 0
repos/cpp/bitcoin/src/hash.cpp,"ROTL32( uint32_t x , int8_t r)",4, 45, 0, 0
repos/cpp/bitcoin/src/hash.cpp,"MurmurHash3( unsigned int nHashSeed , const std :: vector<unsigned char> & vDataToHash)",55, 120, 4, 0
repos/cpp/bitcoin/src/hash.cpp,"BIP32Hash( const ChainCode & chainCode , unsigned int nChild , unsigned char header , const unsigned char data [ 32 ] , unsigned char output [ 64 ])",9, 142, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"MainSignalsInstance::MainSignalsInstance( CScheduler * pscheduler)",1, 92, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::RegisterBackgroundSignalScheduler( CScheduler & scheduler)",4, 78, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::UnregisterBackgroundSignalScheduler()",3, 59, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::FlushBackgroundCallbacks()",5, 53, 8, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::CallbacksPending()",4, 62, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::RegisterWithMempoolSignals( CTxMemPool & pool)",6, 162, 8, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::UnregisterWithMempoolSignals( CTxMemPool & pool)",3, 68, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"GetMainSignals()",4, 31, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"RegisterValidationInterface( CValidationInterface * pwalletIn)",12, 207, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"UnregisterValidationInterface( CValidationInterface * pwalletIn)",5, 70, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"UnregisterAllValidationInterfaces()",6, 54, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CallFunctionInValidationInterfaceQueue( std :: function<void()> func)",3, 81, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"SyncWithValidationInterfaceQueue()",9, 56, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::MempoolEntryRemoved( CTransactionRef ptx , MemPoolRemovalReason reason)",7, 93, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::UpdatedBlockTip( const CBlockIndex * pindexNew , const CBlockIndex * pindexFork , bool fInitialDownload)",9, 121, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::TransactionAddedToMempool( const CTransactionRef & ptx)",5, 75, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::BlockConnected( const std :: shared_ptr<const CBlock> & pblock , const CBlockIndex * pindex , const std :: shared_ptr<const std::vector<CTransactionRef>> & pvtxConflicted)",5, 183, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::BlockDisconnected( const std :: shared_ptr<const CBlock> & pblock)",5, 84, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::ChainStateFlushed( const CBlockLocator & locator)",5, 71, 4, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::Broadcast( int64_t nBestBlockTime , CConnman * connman)",3, 74, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::BlockChecked( const CBlock & block , const CValidationState & state)",3, 86, 0, 0
repos/cpp/bitcoin/src/validationinterface.cpp,"CMainSignals::NewPoWValidBlock( const CBlockIndex * pindex , const std :: shared_ptr<const CBlock> & block)",3, 109, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"AbstractThresholdConditionChecker::GetStateFor( const CBlockIndex * pindexPrev , const Consensus :: Params & params , ThresholdConditionCache & cache) const",88, 165, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"AbstractThresholdConditionChecker::GetStateStatisticsFor( const CBlockIndex * pindex , const Consensus :: Params & params) const",28, 133, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"AbstractThresholdConditionChecker::GetStateSinceHeightFor( const CBlockIndex * pindexPrev , const Consensus :: Params & params , ThresholdConditionCache & cache) const",34, 165, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::BeginTime( const Consensus :: Params & params) const",1, 117, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::EndTime( const Consensus :: Params & params) const",1, 113, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::Period( const Consensus :: Params & params) const",1, 107, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::Threshold( const Consensus :: Params & params) const",1, 116, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::Condition( const CBlockIndex * pindex , const Consensus :: Params & params) const",4, 128, 8, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::VersionBitsConditionChecker( Consensus :: DeploymentPos id_)",1, 84, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsConditionChecker::Mask( const Consensus :: Params & params) const",1, 114, 4, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsState( const CBlockIndex * pindexPrev , const Consensus :: Params & params , Consensus :: DeploymentPos pos , VersionBitsCache & cache)",4, 151, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsStatistics( const CBlockIndex * pindexPrev , const Consensus :: Params & params , Consensus :: DeploymentPos pos)",4, 126, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsStateSinceHeight( const CBlockIndex * pindexPrev , const Consensus :: Params & params , Consensus :: DeploymentPos pos , VersionBitsCache & cache)",4, 151, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsMask( const Consensus :: Params & params , Consensus :: DeploymentPos pos)",4, 88, 0, 0
repos/cpp/bitcoin/src/versionbits.cpp,"VersionBitsCache::Clear()",6, 81, 4, 0
repos/cpp/bitcoin/src/checkpoints.cpp,"Checkpoints::GetLastCheckpoint( const CCheckpointData & data)",14, 81, 8, 0
repos/cpp/bitcoin/src/key.cpp,"ec_privkey_import_der( const secp256k1_context * ctx , unsigned char * out32 , const unsigned char * privkey , size_t privkeylen)",46, 136, 0, 0
repos/cpp/bitcoin/src/key.cpp,"ec_privkey_export_der( const secp256k1_context * ctx , unsigned char * privkey , size_t * privkeylen , const unsigned char * key32 , bool compressed)",61, 154, 0, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::Check( const unsigned char * vch)",3, 68, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::MakeNewKey( bool fCompressedIn)",7, 60, 8, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::GetPrivKey() const",12, 108, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::GetPubKey() const",12, 174, 4, 0
repos/cpp/bitcoin/src/key.cpp,"SigHasLowR( const secp256k1_ecdsa_signature * sig)",11, 129, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::Sign( const uint256 & hash , std :: vector<unsigned char> & vchSig , bool grind , uint32_t test_case) const",21, 172, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::VerifyPubKey( const CPubKey & pubkey) const",13, 109, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::SignCompact( const uint256 & hash , std :: vector<unsigned char> & vchSig) const",14, 144, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::Load( const CPrivKey & privkey , const CPubKey & vchPubKey , bool fSkipCheck = false)",11, 113, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CKey::Derive( CKey & keyChild , ChainCode & ccChild , unsigned int nChild , const ChainCode & cc) const",19, 118, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::Derive( CExtKey & out , unsigned int _nChild) const",7, 67, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::SetSeed( const unsigned char * seed , unsigned int nSeedLen)",10, 94, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::Neuter() const",9, 59, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::Encode( unsigned char code [ BIP32_EXTKEY_SIZE ]) const",10, 70, 4, 0
repos/cpp/bitcoin/src/key.cpp,"CExtKey::Decode( const unsigned char code [ BIP32_EXTKEY_SIZE ])",7, 75, 4, 0
repos/cpp/bitcoin/src/key.cpp,"ECC_InitSanityCheck()",6, 38, 4, 0
repos/cpp/bitcoin/src/key.cpp,"ECC_Start()",16, 79, 4, 0
repos/cpp/bitcoin/src/key.cpp,"ECC_Stop()",8, 53, 4, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::BanMan( fs :: path ban_file , CClientUIInterface * client_interface , int64_t default_ban_time)",21, 112, 4, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::~BanMan()",4, 19, 4, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::DumpBanlist()",17, 86, 4, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::ClearBanned()",10, 69, 4, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::IsBannedLevel( CNetAddr net_addr)",20, 78, 4, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::IsBanned( CNetAddr net_addr)",14, 77, 8, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::IsBanned( CSubNet sub_net)",13, 51, 4, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::Ban( const CNetAddr & net_addr , const BanReason & ban_reason , int64_t ban_time_offset , bool since_unix_epoch)",5, 120, 0, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::Ban( const CSubNet & sub_net , const BanReason & ban_reason , int64_t ban_time_offset , bool since_unix_epoch)",25, 118, 0, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::Unban( const CNetAddr & net_addr)",5, 45, 0, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::Unban( const CSubNet & sub_net)",11, 69, 4, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::GetBanned( banmap_t & banmap)",7, 58, 4, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::SetBanned( const banmap_t & banmap)",6, 47, 0, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::SweepBanned()",24, 128, 16, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::BannedSetIsDirty()",5, 32, 0, 0
repos/cpp/bitcoin/src/banman.cpp,"BanMan::SetBannedSetDirty( bool dirty)",5, 69, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::GetTriedBucket( const uint256 & nKey) const",6, 134, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::GetNewBucket( const uint256 & nKey , const CNetAddr & src) const",7, 146, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::GetBucketPosition( const uint256 & nKey , bool fNew , int nBucket) const",5, 120, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::IsTerrible( int64_t nNow) const",19, 147, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrInfo::GetChance( int64_t nNow) const",14, 135, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Find( const CNetAddr & addr , int * pnId)",12, 73, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Create( const CAddress & addr , const CNetAddr & addrSource , int * pnId)",11, 89, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::SwapRandom( unsigned int nRndPos1 , unsigned int nRndPos2)",19, 72, 0, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Delete( int nId)",13, 53, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::ClearNew( int nUBucket , int nUBucketPos)",14, 64, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::MakeTried( CAddrInfo & info , int nId)",47, 112, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Good_( const CService & addr , bool test_before_evict , int64_t nTime)",65, 245, 8, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Add_( const CAddress & addr , const CNetAddr & source , int64_t nTimePenalty)",72, 105, 8, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Attempt_( const CService & addr , bool fCountFailure , int64_t nTime)",21, 88, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Select_( bool newOnly)",46, 126, 16, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Check_()",75, 111, 8, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::GetAddr_( std :: vector<CAddress> & vAddr)",20, 74, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::Connected_( const CService & addr , int64_t nTime)",19, 88, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::SetServices_( const CService & addr , ServiceFlags nServices)",17, 88, 4, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::ResolveCollisions_()",58, 155, 16, 0
repos/cpp/bitcoin/src/addrman.cpp,"CAddrMan::SelectTriedCollision_()",26, 81, 4, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CBitcoinLevelDBLogger::Logv( const char * format , va_list ap)",52, 89, 20, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"SetMaxOpenFiles( leveldb :: Options * options)",24, 81, 4, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"GetOptions( size_t nCacheSize)",16, 112, 4, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::CDBWrapper( const fs :: path & path , size_t nCacheSize , bool fMemory , bool fWipe , bool obfuscate)",51, 106, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::~CDBWrapper()",13, 37, 4, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::WriteBatch( CDBBatch & batch , bool fSync)",16, 100, 8, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::DynamicMemoryUsage() const",8, 87, 8, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::CreateObfuscateKey() const",7, 81, 4, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBWrapper::IsEmpty()",6, 52, 4, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBIterator::~CDBIterator()",1, 46, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBIterator::Valid() const",1, 59, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBIterator::SeekToFirst()",1, 58, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"CDBIterator::Next()",1, 44, 0, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"dbwrapper_private::HandleError( const leveldb :: Status & status)",9, 88, 4, 0
repos/cpp/bitcoin/src/dbwrapper.cpp,"dbwrapper_private::GetObfuscateKey( const CDBWrapper & w)",4, 71, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"UpdateTime( CBlockHeader * pblock , const Consensus :: Params & consensusParams , const CBlockIndex * pindexPrev)",14, 114, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::Options::Options()",4, 58, 4, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::BlockAssembler( const CChainParams & params , const Options & options)",6, 114, 4, 0
repos/cpp/bitcoin/src/miner.cpp,"DefaultOptions()",14, 97, 4, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::BlockAssembler( const CChainParams & params)",1, 105, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::resetBlock()",13, 49, 4, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::CreateNewBlock( const CScript & scriptPubKeyIn)",86, 267, 4, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::onlyUnconfirmed( CTxMemPool :: setEntries & testSet)",12, 91, 4, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::TestPackage( uint64_t packageSize , int64_t packageSigOpsCost) const",9, 95, 4, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::TestPackageTransactions( const CTxMemPool :: setEntries & package)",10, 84, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::AddToBlock( CTxMemPool :: txiter iter)",18, 85, 4, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::UpdatePackagesForAdded( const CTxMemPool :: setEntries & alreadyAdded , indexed_modified_transaction_set & mapModifiedTx)",26, 87, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::SkipMapTxEntry( CTxMemPool :: txiter it , indexed_modified_transaction_set & mapModifiedTx , CTxMemPool :: setEntries & failedTx)",5, 142, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::SortForBlock( const CTxMemPool :: setEntries & package , std :: vector<CTxMemPool::txiter> & sortedEntries)",10, 121, 0, 0
repos/cpp/bitcoin/src/miner.cpp,"BlockAssembler::addPackageTxs( int & nPackagesSelected , int & nDescendantsUpdated)",129, 129, 4, 0
repos/cpp/bitcoin/src/miner.cpp,"IncrementExtraNonce( CBlock * pblock , const CBlockIndex * pindexPrev , unsigned int & nExtraNonce)",18, 107, 4, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"IsFinalTx( const CTransaction & tx , int nBlockHeight , int64_t nBlockTime)",12, 115, 4, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"CalculateSequenceLocks( const CTransaction & tx , int flags , std :: vector<int> * prevHeights , const CBlockIndex & block)",61, 160, 12, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"EvaluateSequenceLocks( const CBlockIndex & block , std :: pair<int,int64_t> lockPair)",9, 87, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"SequenceLocks( const CTransaction & tx , int flags , std :: vector<int> * prevHeights , const CBlockIndex & block)",4, 111, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"GetLegacySigOpCount( const CTransaction & tx)",13, 60, 8, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"GetP2SHSigOpCount( const CTransaction & tx , const CCoinsViewCache & inputs)",16, 86, 0, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"GetTransactionSigOpCost( const CTransaction & tx , const CCoinsViewCache & inputs , int flags)",20, 115, 8, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"CheckTransaction( const CTransaction & tx , CValidationState & state , bool fCheckDuplicateInputs)",48, 127, 4, 0
repos/cpp/bitcoin/src/consensus/tx_verify.cpp,"Consensus::CheckTxInputs( const CTransaction & tx , CValidationState & state , const CCoinsViewCache & inputs , int nSpendHeight , CAmount & txfee)",43, 144, 0, 0
repos/cpp/bitcoin/src/consensus/merkle.cpp,"ComputeMerkleRoot( std :: vector<uint256> hashes , bool * mutated)",18, 76, 8, 0
repos/cpp/bitcoin/src/consensus/merkle.cpp,"BlockMerkleRoot( const CBlock & block , bool * mutated)",9, 60, 0, 0
repos/cpp/bitcoin/src/consensus/merkle.cpp,"BlockWitnessMerkleRoot( const CBlock & block , bool * mutated)",10, 67, 0, 0
repos/cpp/bitcoin/src/leveldb/util/testutil.cc,"leveldb::test::RandomString( Random * rnd , int len , std :: string * dst)",7, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/util/testutil.cc,"leveldb::test::RandomKey( Random * rnd , int len)",12, 64, 4, 0
repos/cpp/bitcoin/src/leveldb/util/testutil.cc,"leveldb::test::CompressibleString( Random * rnd , double compressed_fraction , size_t len , std :: string * dst)",15, 73, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32SequentialFile::GetName() const",1, 62, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32RandomAccessFile::GetName() const",1, 62, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32WritableFile::GetName() const",1, 62, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::ToWidePath( const std :: string & value , std :: wstring & target)",5, 71, 0, 1
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::ToNarrowPath( const std :: wstring & value , std :: string & target)",5, 83, 0, 1
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::GetCurrentDirW()",7, 66, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::GetCurrentDir()",6, 42, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::ModifyPath( std :: string & path)",9, 52, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::ModifyPath( std :: wstring & path)",8, 54, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::GetLastErrSz()",19, 42, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::GetLastErrSzW()",18, 42, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::WorkItemWrapper::WorkItemWrapper( ScheduleProc proc_ , void * content_)",5, 72, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::WorkItemWrapperProc( LPVOID pContent)",9, 69, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::GetPageSize()",6, 63, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32SequentialFile::Win32SequentialFile( const std :: string & fname)",5, 71, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32SequentialFile::~Win32SequentialFile()",4, 44, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32SequentialFile::Read( size_t n , Slice * result , char * scratch)",11, 75, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32SequentialFile::Skip( uint64_t n)",10, 65, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32SequentialFile::isEnable()",4, 37, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32SequentialFile::_Init()",15, 76, 25, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32SequentialFile::_CleanUp()",7, 37, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32RandomAccessFile::Win32RandomAccessFile( const std :: string & fname)",7, 75, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32RandomAccessFile::~Win32RandomAccessFile()",4, 48, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32RandomAccessFile::Read( uint64_t offset , size_t n , Slice * result , char * scratch) const",14, 95, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32RandomAccessFile::_Init( LPCWSTR path)",12, 102, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32RandomAccessFile::isEnable()",4, 39, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32RandomAccessFile::_CleanUp()",7, 39, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32WritableFile::Win32WritableFile( const std :: string & fname , bool append)",21, 101, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32WritableFile::~Win32WritableFile()",5, 40, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32WritableFile::Append( const Slice & data)",8, 106, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32WritableFile::Close()",8, 107, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32WritableFile::Flush()",5, 65, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32WritableFile::Sync()",7, 110, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32WritableFile::isEnable()",4, 43, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32FileLock::Win32FileLock( const std :: string & fname)",7, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32FileLock::~Win32FileLock()",4, 32, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32FileLock::_Init( LPCWSTR path)",12, 88, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32FileLock::_CleanUp()",5, 31, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32FileLock::isEnable()",4, 34, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Logger::Win32Logger( WritableFile * pFile)",4, 67, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Logger::~Win32Logger()",5, 28, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Logger::Logv( const char * format , va_list ap)",67, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::FileExists( const std :: string & fname)",7, 60, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::GetChildren( const std :: string & dir , std :: vector<std::string> * result)",27, 87, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::SleepForMicroseconds( int micros)",4, 50, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::DeleteFile( const std :: string & fname)",12, 64, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::GetFileSize( const std :: string & fname , uint64_t * file_size)",17, 102, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::RenameFile( const std :: string & src , const std :: string & target)",22, 81, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::LockFile( const std :: string & fname , FileLock ** lock)",15, 71, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::UnlockFile( FileLock * lock)",6, 46, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::Schedule( void(*function)(void*arg) , void * arg)",6, 66, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::StartThread( void(*function)(void*arg) , void * arg)",4, 69, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::GetTestDirectory( std :: string * path)",10, 55, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::NowMicros()",7, 46, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::CreateDirInner( const std :: string & dirname)",20, 65, 0, 1
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::CreateDir( const std :: string & dirname)",10, 57, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::DeleteDir( const std :: string & dirname)",11, 72, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::NewSequentialFile( const std :: string & fname , SequentialFile ** result)",14, 88, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::NewRandomAccessFile( const std :: string & fname , RandomAccessFile ** result)",13, 92, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::NewLogger( const std :: string & fname , Logger ** result)",15, 82, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::NewWritableFile( const std :: string & fname , WritableFile ** result)",12, 84, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::NewAppendableFile( const std :: string & fname , WritableFile ** result)",12, 86, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::Win32Env()",4, 21, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Win32::Win32Env::~Win32Env()",4, 22, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::InitDefaultEnv()",1, 70, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_win.cc,"leveldb::Env::Default()",4, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/util/status.cc,"leveldb::Status::CopyState( const char * state)",7, 51, 0, 0
repos/cpp/bitcoin/src/leveldb/util/status.cc,"leveldb::Status::Status( Code code , const Slice & msg , const Slice & msg2)",16, 65, 0, 0
repos/cpp/bitcoin/src/leveldb/util/status.cc,"leveldb::Status::ToString() const",38, 57, 8, 0
repos/cpp/bitcoin/src/leveldb/util/arena.cc,"leveldb::Arena::Arena()",4, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/util/arena.cc,"leveldb::Arena::~Arena()",5, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/util/arena.cc,"leveldb::Arena::AllocateFallback( size_t bytes)",17, 80, 4, 0
repos/cpp/bitcoin/src/leveldb/util/arena.cc,"leveldb::Arena::AllocateAligned( size_t bytes)",18, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/util/arena.cc,"leveldb::Arena::AllocateNewBlock( size_t block_bytes)",7, 77, 6, 0
repos/cpp/bitcoin/src/leveldb/util/bloom.cc,"leveldb::BloomHash( const Slice & key)",3, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/util/bloom.cc,"leveldb::BloomFilterPolicy::BloomFilterPolicy( int bits_per_key)",7, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/util/bloom.cc,"leveldb::BloomFilterPolicy::Name() const",3, 42, 4, 0
repos/cpp/bitcoin/src/leveldb/util/bloom.cc,"leveldb::BloomFilterPolicy::CreateFilter( const Slice * keys , int n , std :: string * dst) const",27, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/util/bloom.cc,"leveldb::BloomFilterPolicy::KeyMayMatch( const Slice & key , const Slice & bloom_filter) const",25, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/util/bloom.cc,"leveldb::NewBloomFilterPolicy( int bits_per_key)",3, 61, 0, 0
repos/cpp/bitcoin/src/leveldb/util/hash.cc,"leveldb::Hash( const char * data , size_t n , uint32_t seed)",32, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/util/crc32c_test.cc,"leveldb::crc32c::TEST( CRC , StandardResults)",36, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/util/crc32c_test.cc,"leveldb::crc32c::TEST( CRC , Values)",3, 45, 2, 0
repos/cpp/bitcoin/src/leveldb/util/crc32c_test.cc,"leveldb::crc32c::TEST( CRC , Extend)",4, 53, 12, 0
repos/cpp/bitcoin/src/leveldb/util/crc32c_test.cc,"leveldb::crc32c::TEST( CRC , Mask)",7, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/util/crc32c_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::Key( int i , char * buffer)",4, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::BloomTest::BloomTest()",1, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::BloomTest::~BloomTest()",3, 20, 4, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::BloomTest::Reset()",4, 21, 4, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::BloomTest::Add( const Slice & s)",3, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::BloomTest::Build()",11, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::BloomTest::FilterSize() const",3, 30, 2, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::BloomTest::DumpFilter()",10, 68, 6, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::BloomTest::Matches( const Slice & s)",6, 45, 4, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::BloomTest::FalsePositiveRate()",10, 50, 6, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::TEST( BloomTest , EmptyFilter)",4, 35, 2, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::TEST( BloomTest , Small)",8, 33, 2, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::NextLength( int length)",12, 36, 0, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"leveldb::TEST( BloomTest , VaryingLengths)",39, 81, 6, 0
repos/cpp/bitcoin/src/leveldb/util/bloom_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/hash_test.cc,"leveldb::TEST( HASH , SignedUnsignedIssue)",37, 77, 6, 0
repos/cpp/bitcoin/src/leveldb/util/hash_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/filter_policy.cc,"leveldb::FilterPolicy::~FilterPolicy()",1, 34, 0, 0
repos/cpp/bitcoin/src/leveldb/util/arena_test.cc,"leveldb::TEST( ArenaTest , Empty)",3, 25, 0, 0
repos/cpp/bitcoin/src/leveldb/util/arena_test.cc,"leveldb::TEST( ArenaTest , Simple)",45, 64, 10, 0
repos/cpp/bitcoin/src/leveldb/util/arena_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/histogram.cc,"leveldb::Histogram::Clear()",10, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/util/histogram.cc,"leveldb::Histogram::Add( double value)",13, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/util/histogram.cc,"leveldb::Histogram::Merge( const Histogram & other)",10, 48, 0, 0
repos/cpp/bitcoin/src/leveldb/util/histogram.cc,"leveldb::Histogram::Median() const",3, 35, 0, 0
repos/cpp/bitcoin/src/leveldb/util/histogram.cc,"leveldb::Histogram::Percentile( double p) const",20, 68, 6, 0
repos/cpp/bitcoin/src/leveldb/util/histogram.cc,"leveldb::Histogram::Average() const",4, 36, 0, 0
repos/cpp/bitcoin/src/leveldb/util/histogram.cc,"leveldb::Histogram::StandardDeviation() const",5, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/util/histogram.cc,"leveldb::Histogram::ToString() const",33, 81, 13, 0
repos/cpp/bitcoin/src/leveldb/util/crc32c.cc,"leveldb::crc32c::LE_LOAD32( const uint8_t * p)",3, 58, 2, 0
repos/cpp/bitcoin/src/leveldb/util/crc32c.cc,"leveldb::crc32c::CanAccelerateCRC32C()",12, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/util/crc32c.cc,"leveldb::crc32c::Extend( uint32_t crc , const char * buf , size_t size)",49, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , Fixed32)",13, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , Fixed64)",26, 52, 4, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , EncodingOutput)",21, 45, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , Varint32)",20, 48, 4, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , Varint64)",35, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , Varint32Overflow)",6, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , Varint32Truncation)",11, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , Varint64Overflow)",6, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , Varint64Truncation)",11, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"leveldb::TEST( Coding , Strings)",19, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::Cache::~Cache()",2, 18, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUHandle::key() const",9, 63, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::HandleTable::HandleTable()",1, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::HandleTable::~HandleTable()",1, 37, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::HandleTable::Lookup( const Slice & key , uint32_t hash)",3, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::HandleTable::Insert( LRUHandle * h)",15, 70, 8, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::HandleTable::Remove( const Slice & key , uint32_t hash)",9, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::HandleTable::FindPointer( const Slice & key , uint32_t hash)",8, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::HandleTable::Resize()",25, 62, 8, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::SetCapacity( size_t capacity)",1, 62, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::TotalCharge() const",4, 31, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::LRUCache()",8, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::~LRUCache()",11, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::Ref( LRUHandle * e)",7, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::Unref( LRUHandle * e)",12, 85, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::LRU_Remove( LRUHandle * e)",4, 42, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::LRU_Append( LRUHandle * list , LRUHandle * e)",7, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::Lookup( const Slice & key , uint32_t hash)",8, 67, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::Release( Cache :: Handle * handle)",4, 48, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::Insert( const Slice & key , uint32_t hash , void * value , size_t charge , void(*deleter)(const Slice&key,void*value))",35, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::FinishErase( LRUHandle * e)",10, 43, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::Erase( const Slice & key , uint32_t hash)",4, 56, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::LRUCache::Prune()",11, 69, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::HashSlice( const Slice & s)",3, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::Shard( uint32_t hash)",3, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::ShardedLRUCache( size_t capacity)",7, 73, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::~ShardedLRUCache()",1, 33, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::Insert( const Slice & key , void * value , size_t charge , void(*deleter)(const Slice&key,void*value))",5, 75, 25, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::Lookup( const Slice & key)",4, 50, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::Release( Handle * handle)",4, 57, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::Erase( const Slice & key)",4, 42, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::Value( Handle * handle)",3, 56, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::NewId()",4, 29, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::Prune()",5, 43, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::ShardedLRUCache::TotalCharge() const",7, 43, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache.cc,"leveldb::NewLRUCache( size_t capacity)",3, 40, 2, 0
repos/cpp/bitcoin/src/leveldb/util/testharness.cc,"leveldb::test::RegisterTest( const char * base , const char * name , void(*func)())",11, 72, 0, 0
repos/cpp/bitcoin/src/leveldb/util/testharness.cc,"leveldb::test::RunAllTests()",23, 60, 6, 0
repos/cpp/bitcoin/src/leveldb/util/testharness.cc,"leveldb::test::TmpDir()",6, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/util/testharness.cc,"leveldb::test::RandomSeed()",8, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_test.cc,"leveldb::EnvTest::EnvTest()",1, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_test.cc,"leveldb::SetBool( void * ptr)",3, 69, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_test.cc,"leveldb::TEST( EnvTest , RunImmediately)",6, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_test.cc,"leveldb::TEST( EnvTest , RunMany)",31, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_test.cc,"leveldb::ThreadBody( void * arg)",7, 44, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_test.cc,"leveldb::TEST( EnvTest , StartThread)",18, 46, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/logging.cc,"leveldb::AppendNumberTo( std :: string * str , uint64_t num)",5, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/util/logging.cc,"leveldb::AppendEscapedStringTo( std :: string * str , const Slice & value)",13, 67, 0, 0
repos/cpp/bitcoin/src/leveldb/util/logging.cc,"leveldb::NumberToString( uint64_t num)",5, 43, 0, 0
repos/cpp/bitcoin/src/leveldb/util/logging.cc,"leveldb::EscapeString( const Slice & value)",5, 47, 0, 0
repos/cpp/bitcoin/src/leveldb/util/logging.cc,"leveldb::ConsumeDecimalNumber( Slice * in , uint64_t * val)",23, 68, 6, 0
repos/cpp/bitcoin/src/leveldb/util/options.cc,"leveldb::Options::Options()",17, 40, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::EncodeKey( int k)",5, 38, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::DecodeKey( const Slice & k)",4, 39, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::EncodeValue( uintptr_t v)",1, 77, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::DecodeValue( void * v)",1, 75, 0, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::CacheTest::Deleter( const Slice & key , void * v)",4, 57, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::CacheTest::CacheTest()",3, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::CacheTest::~CacheTest()",3, 19, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::CacheTest::Lookup( int key)",8, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::CacheTest::Insert( int key , int value , int charge = 1)",4, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::CacheTest::InsertAndReturnHandle( int key , int value , int charge = 1)",4, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::CacheTest::Erase( int key)",3, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::TEST( CacheTest , HitAndMiss)",22, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::TEST( CacheTest , Erase)",18, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::TEST( CacheTest , EntriesArePinned)",24, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::TEST( CacheTest , EvictionPolicy)",18, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::TEST( CacheTest , UseExceedsCacheSize)",16, 66, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::TEST( CacheTest , HeavyEntries)",26, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::TEST( CacheTest , NewId)",5, 32, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"leveldb::TEST( CacheTest , Prune)",12, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/util/cache_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/comparator.cc,"leveldb::Comparator::~Comparator()",1, 30, 0, 0
repos/cpp/bitcoin/src/leveldb/util/comparator.cc,"leveldb::BytewiseComparatorImpl::BytewiseComparatorImpl()",1, 31, 2, 0
repos/cpp/bitcoin/src/leveldb/util/comparator.cc,"leveldb::BytewiseComparatorImpl::Name() const",3, 41, 4, 0
repos/cpp/bitcoin/src/leveldb/util/comparator.cc,"leveldb::BytewiseComparatorImpl::Compare( const Slice & a , const Slice & b) const",3, 62, 2, 0
repos/cpp/bitcoin/src/leveldb/util/comparator.cc,"leveldb::BytewiseComparatorImpl::FindShortestSeparator( std :: string * start , const Slice & limit) const",23, 70, 6, 0
repos/cpp/bitcoin/src/leveldb/util/comparator.cc,"leveldb::BytewiseComparatorImpl::FindShortSuccessor( std :: string * key) const",13, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/util/comparator.cc,"leveldb::InitModule()",3, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/util/comparator.cc,"leveldb::BytewiseComparator()",4, 41, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::EncodeFixed32( char * buf , uint32_t value)",10, 48, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::EncodeFixed64( char * buf , uint64_t value)",14, 48, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::PutFixed32( std :: string * dst , uint32_t value)",5, 52, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::PutFixed64( std :: string * dst , uint64_t value)",5, 52, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::EncodeVarint32( char * dst , uint32_t v)",27, 62, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::PutVarint32( std :: string * dst , uint32_t v)",5, 49, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::EncodeVarint64( char * dst , uint64_t v)",10, 62, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::PutVarint64( std :: string * dst , uint64_t v)",5, 49, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::PutLengthPrefixedSlice( std :: string * dst , const Slice & value)",4, 68, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::VarintLength( uint64_t v)",8, 31, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::GetVarint32PtrFallback( const char * p , const char * limit , uint32_t * value)",18, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::GetVarint32( Slice * input , uint32_t * value)",11, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::GetVarint64Ptr( const char * p , const char * limit , uint64_t * value)",16, 80, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::GetVarint64( Slice * input , uint64_t * value)",11, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::GetLengthPrefixedSlice( const char * p , const char * limit , Slice * result)",9, 69, 0, 0
repos/cpp/bitcoin/src/leveldb/util/coding.cc,"leveldb::GetLengthPrefixedSlice( Slice * input , Slice * result)",11, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix_test.cc,"leveldb::EnvPosixTest::EnvPosixTest()",1, 44, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix_test.cc,"leveldb::EnvPosixTest::SetFileLimits( int read_only_file_limit , int mmap_limit)",4, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix_test.cc,"leveldb::TEST( EnvPosixTest , TestOpenOnRead)",30, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix_test.cc,"main( int argc , char ** argv)",6, 68, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::IOError( const std :: string & context , int err_number)",3, 68, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::Limiter::Limiter( intptr_t n)",3, 24, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::Limiter::Acquire()",13, 31, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::Limiter::Release()",4, 34, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::Limiter::GetAllowed() const",3, 64, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::Limiter::SetAllowed( intptr_t v)",3, 56, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixSequentialFile::PosixSequentialFile( const std :: string & fname , FILE * f)",2, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixSequentialFile::~PosixSequentialFile()",1, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixSequentialFile::Read( size_t n , Slice * result , char * scratch)",14, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixSequentialFile::Skip( uint64_t n)",6, 40, 6, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixSequentialFile::GetName() const",1, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixRandomAccessFile::PosixRandomAccessFile( const std :: string & fname , int fd , Limiter * limiter)",9, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixRandomAccessFile::~PosixRandomAccessFile()",6, 37, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixRandomAccessFile::Read( uint64_t offset , size_t n , Slice * result , char * scratch) const",23, 67, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixRandomAccessFile::GetName() const",1, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixMmapReadableFile::PosixMmapReadableFile( const std :: string & fname , void * base , size_t length , Limiter * limiter)",5, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixMmapReadableFile::~PosixMmapReadableFile()",4, 38, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixMmapReadableFile::Read( uint64_t offset , size_t n , Slice * result , char * scratch) const",11, 77, 6, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixMmapReadableFile::GetName() const",1, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixWritableFile::PosixWritableFile( const std :: string & fname , FILE * f)",2, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixWritableFile::~PosixWritableFile()",6, 39, 6, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixWritableFile::Append( const Slice & data)",7, 68, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixWritableFile::Close()",8, 42, 6, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixWritableFile::Flush()",6, 40, 6, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixWritableFile::SyncDirIfManifest()",26, 48, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixWritableFile::Sync()",12, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixWritableFile::GetName() const",1, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::LockOrUnlock( int fd , bool lock)",10, 49, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixLockTable::Insert( const std :: string & fname)",4, 47, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixLockTable::Remove( const std :: string & fname)",4, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::~PosixEnv()",5, 48, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::NewSequentialFile( const std :: string & fname , SequentialFile ** result)",11, 62, 35, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::NewRandomAccessFile( const std :: string & fname , RandomAccessFile ** result)",27, 80, 10, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::NewWritableFile( const std :: string & fname , WritableFile ** result)",12, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::NewAppendableFile( const std :: string & fname , WritableFile ** result)",12, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::FileExists( const std :: string & fname)",3, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::GetChildren( const std :: string & dir , std :: vector<std::string> * result)",14, 65, 29, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::DeleteFile( const std :: string & fname)",7, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::CreateDir( const std :: string & name)",7, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::DeleteDir( const std :: string & name)",7, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::GetFileSize( const std :: string & fname , uint64_t * size)",11, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::RenameFile( const std :: string & src , const std :: string & target)",7, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::LockFile( const std :: string & fname , FileLock ** lock)",21, 76, 6, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::UnlockFile( FileLock * lock)",11, 69, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::GetTestDirectory( std :: string * result)",13, 73, 6, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::gettid()",6, 72, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::NewLogger( const std :: string & fname , Logger ** result)",10, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::NowMicros()",5, 68, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::SleepForMicroseconds( int micros)",3, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::PthreadCall( const char * label , int result)",6, 68, 6, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::BGThreadWrapper( void * arg)",4, 50, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::MaxMmaps()",8, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::MaxOpenFiles()",16, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::PosixEnv()",7, 65, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::Schedule( void(*function)(void*) , void * arg)",24, 78, 8, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::BGThread()",16, 64, 6, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::StartThreadWrapper( void * arg)",6, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::PosixEnv::StartThread( void(*function)(void*arg) , void * arg)",8, 70, 14, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::InitDefaultEnv()",1, 61, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::EnvPosixTestHelper::SetReadOnlyFDLimit( int limit)",4, 57, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::EnvPosixTestHelper::SetReadOnlyMMapLimit( int limit)",4, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env_posix.cc,"leveldb::Env::Default()",4, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::Env::~Env()",2, 14, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::Env::NewAppendableFile( const std :: string & fname , WritableFile ** result)",3, 81, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::SequentialFile::~SequentialFile()",2, 36, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::RandomAccessFile::~RandomAccessFile()",2, 40, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::WritableFile::~WritableFile()",2, 32, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::Logger::~Logger()",2, 20, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::FileLock::~FileLock()",2, 24, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::Log( Logger * info_log , const char * format , ...)",8, 54, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::DoWriteStringToFile( Env * env , const Slice & data , const std :: string & fname , bool should_sync)",21, 63, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::WriteStringToFile( Env * env , const Slice & data , const std :: string & fname)",4, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::WriteStringToFileSync( Env * env , const Slice & data , const std :: string & fname)",4, 58, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::ReadFileToString( Env * env , const std :: string & fname , std :: string * data)",24, 81, 0, 0
repos/cpp/bitcoin/src/leveldb/util/env.cc,"leveldb::EnvWrapper::~EnvWrapper()",2, 28, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::Table::Rep::~Rep()",5, 27, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::Table::Open( const Options & options , RandomAccessFile * file , uint64_t size , Table ** table)",52, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::Table::ReadMeta( const Footer & footer)",28, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::Table::ReadFilter( const Slice & filter_handle_value)",22, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::Table::~Table()",3, 18, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::DeleteBlock( void * arg , void * ignored)",3, 52, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::DeleteCachedBlock( const Slice & key , void * value)",4, 63, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::ReleaseBlock( void * arg , void * h)",5, 63, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::Table::BlockReader( void * arg , const ReadOptions & options , const Slice & index_value)",55, 76, 8, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::Table::NewIterator( const ReadOptions & options) const",5, 65, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::Table::InternalGet( const ReadOptions & options , const Slice & k , void * arg , void(*saver)(void*,const Slice&,const Slice&))",30, 78, 26, 0
repos/cpp/bitcoin/src/leveldb/table/table.cc,"leveldb::Table::ApproximateOffsetOf( const Slice & key) const",26, 71, 6, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::NumRestarts() const",4, 58, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Block( const BlockContents & contents)",16, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::~Block()",5, 20, 4, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::DecodeEntry( const char * p , const char * limit , uint32_t * shared , uint32_t * non_shared , uint32_t * value_length)",22, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::Compare( const Slice & a , const Slice & b) const",3, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::NextEntryOffset() const",3, 52, 4, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::GetRestartPoint( uint32_t index)",4, 72, 4, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::SeekToRestartPoint( uint32_t index)",9, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::Iter( const Comparator * comparator , const char * data , uint32_t restarts , uint32_t num_restarts)",12, 40, 8, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::Valid() const",1, 62, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::status() const",1, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::key() const",4, 30, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::value() const",4, 32, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::Next()",4, 24, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::Prev()",20, 74, 6, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::Seek( const Slice & target)",39, 78, 40, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::SeekToFirst()",4, 31, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::SeekToLast()",6, 62, 4, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::CorruptionError()",7, 56, 4, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::Iter::ParseNextKey()",28, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/table/block.cc,"leveldb::Block::NewIterator( const Comparator * cmp)",11, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::MergingIterator( const Comparator * comparator , Iterator ** children , int n)",10, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::~MergingIterator()",3, 31, 2, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::Valid() const",3, 31, 2, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::SeekToFirst()",7, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::SeekToLast()",7, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::Seek( const Slice & target)",7, 43, 2, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::Next()",25, 68, 4, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::Prev()",28, 78, 12, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::key() const",4, 30, 2, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::value() const",4, 32, 2, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::status() const",10, 38, 6, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::FindSmallest()",14, 76, 6, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::MergingIterator::FindLargest()",14, 75, 6, 0
repos/cpp/bitcoin/src/leveldb/table/merger.cc,"leveldb::NewMergingIterator( const Comparator * cmp , Iterator ** list , int n)",10, 78, 0, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::Iterator::Iterator()",4, 28, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::Iterator::~Iterator()",11, 56, 4, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::Iterator::RegisterCleanup( CleanupFunction func , void * arg1 , void * arg2)",14, 79, 0, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::EmptyIterator( const Status & s)",1, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::Valid() const",1, 47, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::Seek( const Slice & target)",1, 45, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::SeekToFirst()",1, 33, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::SeekToLast()",1, 32, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::Next()",1, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::Prev()",1, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::key() const",1, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::value() const",1, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::EmptyIterator::status() const",1, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::NewEmptyIterator()",3, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/table/iterator.cc,"leveldb::NewErrorIterator( const Status & status)",3, 51, 0, 0
repos/cpp/bitcoin/src/leveldb/table/block_builder.cc,"leveldb::BlockBuilder::BlockBuilder( const Options * options)",8, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block_builder.cc,"leveldb::BlockBuilder::Reset()",8, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block_builder.cc,"leveldb::BlockBuilder::CurrentSizeEstimate() const",5, 74, 10, 0
repos/cpp/bitcoin/src/leveldb/table/block_builder.cc,"leveldb::BlockBuilder::Finish()",9, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/table/block_builder.cc,"leveldb::BlockBuilder::Add( const Slice & key , const Slice & value)",35, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::Rep::Rep( const Options & opt , WritableFile * f)",14, 67, 21, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::TableBuilder( const Options & options , WritableFile * file)",6, 71, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::~TableBuilder()",5, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::ChangeOptions( const Options & options)",15, 80, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::Add( const Slice & key , const Slice & value)",30, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::Flush()",15, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::WriteBlock( BlockBuilder * block , BlockHandle * handle)",35, 74, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::WriteRawBlock( const Slice & block_contents , CompressionType type , BlockHandle * handle)",19, 80, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::status() const",3, 38, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::Finish()",56, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::Abandon()",5, 31, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::NumEntries() const",3, 44, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table_builder.cc,"leveldb::TableBuilder::FileSize() const",3, 42, 0, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block_test.cc,"leveldb::TestHashFilter::Name() const",3, 37, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block_test.cc,"leveldb::TestHashFilter::CreateFilter( const Slice * keys , int n , std :: string * dst) const",6, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block_test.cc,"leveldb::TestHashFilter::KeyMayMatch( const Slice & key , const Slice & filter) const",9, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block_test.cc,"leveldb::TEST( FilterBlockTest , EmptyBuilder)",8, 63, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block_test.cc,"leveldb::TEST( FilterBlockTest , SingleChunk)",20, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block_test.cc,"leveldb::TEST( FilterBlockTest , MultiChunk)",47, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block.cc,"leveldb::FilterBlockBuilder::FilterBlockBuilder( const FilterPolicy * policy)",3, 67, 0, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block.cc,"leveldb::FilterBlockBuilder::StartBlock( uint64_t block_offset)",7, 61, 0, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block.cc,"leveldb::FilterBlockBuilder::AddKey( const Slice & key)",5, 52, 0, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block.cc,"leveldb::FilterBlockBuilder::Finish()",15, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block.cc,"leveldb::FilterBlockBuilder::GenerateFilter()",25, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block.cc,"leveldb::FilterBlockReader::FilterBlockReader( const FilterPolicy * policy , const Slice & contents)",16, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/table/filter_block.cc,"leveldb::FilterBlockReader::KeyMayMatch( uint64_t block_offset , const Slice & key)",15, 79, 0, 0
repos/cpp/bitcoin/src/leveldb/table/format.cc,"leveldb::BlockHandle::EncodeTo( std :: string * dst) const",7, 53, 0, 0
repos/cpp/bitcoin/src/leveldb/table/format.cc,"leveldb::BlockHandle::DecodeFrom( Slice * input)",8, 51, 4, 0
repos/cpp/bitcoin/src/leveldb/table/format.cc,"leveldb::Footer::EncodeTo( std :: string * dst) const",10, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/table/format.cc,"leveldb::Footer::DecodeFrom( Slice * input)",21, 72, 4, 0
repos/cpp/bitcoin/src/leveldb/table/format.cc,"leveldb::ReadBlock( RandomAccessFile * file , const ReadOptions & options , const BlockHandle & handle , BlockContents * result)",78, 91, 8, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Reverse( const Slice & key)",9, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::ReverseKeyComparator::Name() const",3, 48, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::ReverseKeyComparator::Compare( const Slice & a , const Slice & b) const",3, 66, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::ReverseKeyComparator::FindShortestSeparator( std :: string * start , const Slice & limit) const",8, 56, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::ReverseKeyComparator::FindShortSuccessor( std :: string * key) const",5, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Increment( const Comparator * cmp , std :: string * key)",10, 65, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::STLLessThan::STLLessThan()",1, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::STLLessThan::STLLessThan( const Comparator * c)",1, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::STLLessThan::operator ( )( const std :: string & a , const std :: string & b) const",3, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSink::~StringSink()",1, 20, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSink::contents() const",1, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSink::Close()",1, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSink::Flush()",1, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSink::Sync()",1, 49, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSink::Append( const Slice & data)",4, 48, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSource::StringSource( const Slice & contents)",3, 54, 6, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSource::~StringSource()",1, 30, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSource::Size() const",1, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::StringSource::Read( uint64_t offset , size_t n , Slice * result , char * scratch) const",12, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Constructor::Constructor( const Comparator * cmp)",1, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Constructor::~Constructor()",1, 29, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Constructor::Add( const std :: string & key , const Slice & value)",3, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Constructor::Finish( const Options & options , std :: vector<std::string> * keys , KVMap * kvmap)",14, 51, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Constructor::data()",1, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Constructor::db() const",1, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::BlockConstructor::BlockConstructor( const Comparator * cmp)",4, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::BlockConstructor::~BlockConstructor()",3, 24, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::BlockConstructor::FinishImpl( const Options & options , const KVMap & data)",19, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::BlockConstructor::NewIterator() const",3, 45, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TableConstructor::TableConstructor( const Comparator * cmp)",4, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TableConstructor::~TableConstructor()",3, 24, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TableConstructor::FinishImpl( const Options & options , const KVMap & data)",22, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TableConstructor::NewIterator() const",3, 47, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TableConstructor::ApproximateOffsetOf( const Slice & key) const",3, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TableConstructor::Reset()",6, 20, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::KeyConvertingIterator( Iterator * iter)",1, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::~KeyConvertingIterator()",1, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::Valid() const",1, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::Seek( const Slice & target)",6, 68, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::SeekToFirst()",1, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::SeekToLast()",1, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::Next()",1, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::Prev()",1, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::key() const",9, 62, 6, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::value() const",1, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::KeyConvertingIterator::status() const",3, 53, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::MemTableConstructor::MemTableConstructor( const Comparator * cmp)",6, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::MemTableConstructor::~MemTableConstructor()",3, 27, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::MemTableConstructor::FinishImpl( const Options & options , const KVMap & data)",13, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::MemTableConstructor::NewIterator() const",3, 64, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::DBConstructor::DBConstructor( const Comparator * cmp)",6, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::DBConstructor::~DBConstructor()",3, 21, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::DBConstructor::FinishImpl( const Options & options , const KVMap & data)",13, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::DBConstructor::NewIterator() const",3, 44, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::DBConstructor::db() const",1, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::DBConstructor::NewDB()",14, 76, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::Harness()",1, 37, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::Init( const TestArgs & args)",27, 69, 8, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::~Harness()",3, 25, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::Add( const std :: string & key , const std :: string & value)",3, 63, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::Test( Random * rnd)",9, 50, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::TestForwardScan( const std :: vector<std::string> & keys , const KVMap & data)",14, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::TestBackwardScan( const std :: vector<std::string> & keys , const KVMap & data)",14, 67, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::TestRandomAccess( Random * rnd , const std :: vector<std::string> & keys , const KVMap & data)",69, 73, 14, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::ToString( const KVMap & data , const KVMap :: const_iterator & it)",7, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::ToString( const KVMap & data , const KVMap :: const_reverse_iterator & it)",8, 66, 23, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::ToString( const Iterator * it)",7, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::PickRandomKey( Random * rnd , const std :: vector<std::string> & keys)",26, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Harness::db() const",1, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( Harness , Empty)",7, 43, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( Harness , ZeroRestartPointsInBlock)",17, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( Harness , SimpleEmptyKey)",8, 43, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( Harness , SimpleSingle)",8, 43, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( Harness , SimpleMulti)",10, 43, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( Harness , SimpleSpecialKey)",8, 43, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( Harness , Randomized)",19, 69, 12, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( Harness , RandomizedLongDB)",23, 73, 4, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( MemTableTest , Simple)",24, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::Between( uint64_t val , uint64_t low , uint64_t high)",10, 65, 0, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( TableTest , ApproximateOffsetOfPlain)",29, 71, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::SnappyCompressionSupported()",5, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"leveldb::TEST( TableTest , ApproximateOffsetOfCompressed)",35, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/table/table_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::Valid() const",3, 31, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::key() const",4, 30, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::value() const",4, 32, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::status() const",10, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::SaveError( const Status & s)",3, 46, 4, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::TwoLevelIterator( Iterator * index_iter , BlockFunction block_function , void * arg , const ReadOptions & options)",11, 39, 4, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::~TwoLevelIterator()",2, 40, 0, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::Seek( const Slice & target)",6, 58, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::SeekToFirst()",6, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::SeekToLast()",6, 58, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::Next()",5, 32, 0, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::Prev()",5, 33, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::SkipEmptyDataBlocksForward()",12, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::SkipEmptyDataBlocksBackward()",12, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::SetDataIterator( Iterator * data_iter)",4, 65, 2, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::TwoLevelIterator::InitDataBlock()",15, 80, 4, 0
repos/cpp/bitcoin/src/leveldb/table/two_level_iterator.cc,"leveldb::NewTwoLevelIterator( Iterator * index_iter , BlockFunction block_function , void * arg , const ReadOptions & options)",7, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_writer.cc,"leveldb::log::InitTypeCrc( uint32_t * type_crc)",6, 46, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_writer.cc,"leveldb::log::Writer::Writer( WritableFile * dest)",5, 35, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_writer.cc,"leveldb::log::Writer::Writer( WritableFile * dest , uint64_t dest_length)",4, 61, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_writer.cc,"leveldb::log::Writer::~Writer()",2, 20, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_writer.cc,"leveldb::log::Writer::AddRecord( const Slice & slice)",47, 74, 8, 0
repos/cpp/bitcoin/src/leveldb/db/log_writer.cc,"leveldb::log::Writer::EmitPhysicalRecord( RecordType t , const char * ptr , size_t n)",26, 77, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::Writer::Writer( port :: Mutex * mu)",1, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::CompactionState::current_output()",1, 66, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::CompactionState::CompactionState( Compaction * c)",6, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::ClipToRange( T * ptr , V minvalue , V maxvalue)",4, 58, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::SanitizeOptions( const std :: string & dbname , const InternalKeyComparator * icmp , const InternalFilterPolicy * ipolicy , const Options & src)",26, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::DBImpl( const Options & raw_options , const std :: string & dbname)",30, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::~DBImpl()",28, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::NewDB()",31, 65, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::MaybeIgnoreError( Status * s) const",8, 72, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::DeleteObsoleteFiles()",55, 76, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::Recover( VersionEdit * edit , bool * save_manifest)",90, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::RecoverLogFile( uint64_t log_number , bool last_log , bool * save_manifest , VersionEdit * edit , SequenceNumber * max_sequence)",122, 77, 10, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::WriteLevel0Table( MemTable * mem , VersionEdit * edit , Version * base)",45, 76, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::CompactMemTable()",32, 74, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::CompactRange( const Slice * begin , const Slice * end)",16, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::TEST_CompactRange( int level , const Slice * begin , const Slice * end)",36, 81, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::TEST_CompactMemTable()",15, 62, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::RecordBackgroundError( const Status & s)",7, 54, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::MaybeScheduleCompaction()",17, 59, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::BGWork( void * db)",3, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::BackgroundCall()",18, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::BackgroundCompaction()",84, 74, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::CleanupCompaction( CompactionState * compact)",16, 72, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::OpenCompactionOutputFile( CompactionState * compact)",24, 69, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::FinishCompactionOutputFile( CompactionState * compact , Iterator * input)",51, 68, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::InstallCompactionResults( CompactionState * compact)",20, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::DoCompactionWork( CompactionState * compact)",160, 77, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::CleanupIteratorState( void * arg1 , void * arg2)",9, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::NewInternalIterator( const ReadOptions & options , SequenceNumber * latest_snapshot , uint32_t * seed)",30, 72, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::TEST_NewInternalIterator()",5, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::TEST_MaxNextLevelOverlappingBytes()",4, 54, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::Get( const ReadOptions & options , const Slice & key , std :: string * value)",46, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::NewIterator( const ReadOptions & options)",11, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::RecordReadSample( Slice key)",6, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::GetSnapshot()",4, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::ReleaseSnapshot( const Snapshot * s)",4, 63, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::Put( const WriteOptions & o , const Slice & key , const Slice & val)",3, 80, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::Delete( const WriteOptions & options , const Slice & key)",3, 71, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::Write( const WriteOptions & options , WriteBatch * my_batch)",72, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::BuildBatchGroup( Writer ** last_writer)",46, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::MakeRoomForWrite( bool force)",62, 81, 15, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::GetProperty( const Slice & property , std :: string * value)",66, 70, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DBImpl::GetApproximateSizes( const Range * range , int n , uint64_t * sizes)",25, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DB::Put( const WriteOptions & opt , const Slice & key , const Slice & value)",5, 80, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DB::Delete( const WriteOptions & opt , const Slice & key)",5, 63, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DB::~DB()",1, 14, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DB::Open( const Options & options , const std :: string & dbname , DB ** dbptr)",43, 74, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::Snapshot::~Snapshot()",2, 24, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_impl.cc,"leveldb::DestroyDB( const std :: string & dbname , const Options & options)",30, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::RandomGenerator::RandomGenerator()",14, 76, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::RandomGenerator::Generate( size_t len)",8, 50, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::TrimSpace( Slice s)",11, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::AppendWithSpace( std :: string * str , Slice msg)",7, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Stats::Stats()",1, 23, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Stats::Start()",11, 33, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Stats::Merge( const Stats & other)",11, 58, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Stats::Stop()",4, 42, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Stats::AddMessage( Slice msg)",3, 37, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Stats::FinishedSingleOp()",25, 67, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Stats::AddBytes( int64_t n)",3, 29, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Stats::Report( const Slice & name)",27, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::SharedState::SharedState()",1, 30, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::ThreadState::ThreadState( int index)",4, 29, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::PrintHeader()",17, 81, 12, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::PrintWarnings()",20, 81, 12, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::PrintEnvironment()",34, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::Benchmark()",22, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::~Benchmark()",5, 27, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::Run()",116, 80, 10, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::ThreadBody( void * v)",27, 54, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::RunBenchmark( int n , Slice name , void(Benchmark::*method)(ThreadState*))",40, 63, 20, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::Crc32c( ThreadState * thread)",18, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::AcquireLoad( ThreadState * thread)",15, 66, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::SnappyCompress( ThreadState * thread)",24, 75, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::SnappyUncompress( ThreadState * thread)",21, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::Open()",18, 65, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::OpenBench( ThreadState * thread)",7, 40, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::WriteSeq( ThreadState * thread)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::WriteRandom( ThreadState * thread)",3, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::DoWrite( ThreadState * thread , bool seq)",29, 69, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::ReadSequential( ThreadState * thread)",12, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::ReadReverse( ThreadState * thread)",12, 74, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::ReadRandom( ThreadState * thread)",17, 65, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::ReadMissing( ThreadState * thread)",11, 53, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::ReadHot( ThreadState * thread)",12, 49, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::SeekRandom( ThreadState * thread)",17, 65, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::DoDelete( ThreadState * thread , bool seq)",20, 69, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::DeleteSeq( ThreadState * thread)",3, 40, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::DeleteRandom( ThreadState * thread)",3, 43, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::ReadWhileWriting( ThreadState * thread)",29, 81, 10, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::Compact( ThreadState * thread)",3, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::PrintStats( const char * key)",7, 46, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::WriteToFile( void * arg , const char * buf , int n)",3, 65, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"leveldb::Benchmark::HeapProfile()",16, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_bench.cc,"main( int argc , char ** argv)",65, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::MakeFileName( const std :: string & name , uint64_t number , const char * suffix)",8, 74, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::LogFileName( const std :: string & name , uint64_t number)",4, 68, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::TableFileName( const std :: string & name , uint64_t number)",4, 70, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::SSTTableFileName( const std :: string & name , uint64_t number)",4, 73, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::DescriptorFileName( const std :: string & dbname , uint64_t number)",7, 77, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::CurrentFileName( const std :: string & dbname)",3, 57, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::LockFileName( const std :: string & dbname)",3, 54, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::TempFileName( const std :: string & dbname , uint64_t number)",4, 71, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::InfoLogFileName( const std :: string & dbname)",3, 57, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::OldInfoLogFileName( const std :: string & dbname)",3, 60, 0, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::ParseFileName( const std :: string & fname , uint64_t * number , FileType * type)",45, 69, 4, 0
repos/cpp/bitcoin/src/leveldb/db/filename.cc,"leveldb::SetCurrentFile( Env * env , const std :: string & dbname , uint64_t descriptor_number)",17, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::GetDirName( const std :: string filename)",8, 60, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::SyncDir( const std :: string & dir)",4, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::Truncate( const std :: string & filename , uint64_t length)",31, 67, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FileState::FileState( const std :: string & filename)",5, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FileState::FileState()",1, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FileState::IsFullySynced() const",1, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::FaultInjectionTestEnv()",1, 84, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::~FaultInjectionTestEnv()",1, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::IsFilesystemActive() const",1, 65, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::SetFilesystemActive( bool active)",1, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::TestWritableFile::TestWritableFile( const FileState & state , WritableFile * f , FaultInjectionTestEnv * env)",9, 63, 35, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::TestWritableFile::~TestWritableFile()",6, 40, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::TestWritableFile::Append( const Slice & data)",7, 53, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::TestWritableFile::Close()",8, 38, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::TestWritableFile::Flush()",7, 46, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::TestWritableFile::SyncParent()",7, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::TestWritableFile::Sync()",17, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::NewWritableFile( const std :: string & fname , WritableFile ** result)",17, 72, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::NewAppendableFile( const std :: string & fname , WritableFile ** result)",19, 74, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::DropUnsyncedFileData()",13, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::DirWasSynced()",4, 45, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::IsFileCreatedSinceLastDirSync( const std :: string & filename)",6, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::UntrackFile( const std :: string & f)",5, 64, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::DeleteFile( const std :: string & f)",8, 65, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::RenameFile( const std :: string & s , const std :: string & t)",20, 65, 41, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::ResetState()",7, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::DeleteFilesCreatedAfterLastDirSync()",13, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTestEnv::WritableFileClosed( const FileState & state)",4, 73, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FileState::DropUnsyncedData() const",4, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::FaultInjectionTest()",12, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::~FaultInjectionTest()",6, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::ReuseLogs( bool reuse)",3, 33, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::Build( int start_idx , int num_vals)",11, 61, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::ReadValue( int i , std :: string * val) const",7, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::Verify( int start_idx , int num_vals , ExpectedVerifResult expected) const",21, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::Key( int i , std :: string * storage) const",6, 49, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::Value( int k , std :: string * storage) const",4, 56, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::OpenDB()",6, 46, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::CloseDB()",4, 19, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::DeleteAllData()",9, 61, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::ResetDBState( ResetMethod reset_method)",12, 63, 8, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::PartialCompactTestPreFault( int num_pre_sync , int num_post_sync)",6, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::PartialCompactTestReopenWithFault( ResetMethod reset_method , int num_pre_sync , int num_post_sync)",10, 90, 4, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::NoWriteTestPreFault()",2, 31, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::NoWriteTestReopenWithFault( ResetMethod reset_method)",5, 62, 2, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::FaultInjectionTest::DoTest()",26, 77, 6, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::TEST( FaultInjectionTest , FaultTestNoLogReuse)",4, 48, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"leveldb::TEST( FaultInjectionTest , FaultTestWithLogReuse)",4, 50, 0, 0
repos/cpp/bitcoin/src/leveldb/db/fault_injection_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/table_cache.cc,"leveldb::DeleteEntry( const Slice & key , void * value)",6, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/table_cache.cc,"leveldb::UnrefEntry( void * arg1 , void * arg2)",5, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/table_cache.cc,"leveldb::TableCache::TableCache( const std :: string & dbname , const Options * options , int entries)",8, 50, 0, 0
repos/cpp/bitcoin/src/leveldb/db/table_cache.cc,"leveldb::TableCache::~TableCache()",3, 28, 0, 0
repos/cpp/bitcoin/src/leveldb/db/table_cache.cc,"leveldb::TableCache::FindTable( uint64_t file_number , uint64_t file_size , Cache :: Handle ** handle)",36, 74, 6, 0
repos/cpp/bitcoin/src/leveldb/db/table_cache.cc,"leveldb::TableCache::NewIterator( const ReadOptions & options , uint64_t file_number , uint64_t file_size , Table ** tableptr)",22, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/db/table_cache.cc,"leveldb::TableCache::Get( const ReadOptions & options , uint64_t file_number , uint64_t file_size , const Slice & k , void * arg , void(*saver)(void*,const Slice&,const Slice&))",15, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/db/table_cache.cc,"leveldb::TableCache::Evict( uint64_t file_number)",5, 47, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_reader.cc,"leveldb::log::Reader::Reporter::~Reporter()",2, 32, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_reader.cc,"leveldb::log::Reader::Reader( SequentialFile * file , Reporter * reporter , bool checksum , uint64_t initial_offset)",13, 72, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_reader.cc,"leveldb::log::Reader::~Reader()",3, 27, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_reader.cc,"leveldb::log::Reader::SkipToInitialBlock()",23, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_reader.cc,"leveldb::log::Reader::ReadRecord( Slice * record , std :: string * scratch)",123, 80, 8, 0
repos/cpp/bitcoin/src/leveldb/db/log_reader.cc,"leveldb::log::Reader::LastRecordOffset()",3, 38, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_reader.cc,"leveldb::log::Reader::ReportCorruption( uint64_t bytes , const char * reason)",3, 68, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_reader.cc,"leveldb::log::Reader::ReportDrop( uint64_t bytes , const Status & reason)",6, 75, 6, 0
repos/cpp/bitcoin/src/leveldb/db/log_reader.cc,"leveldb::log::Reader::ReadPhysicalRecord( Slice * result)",83, 81, 6, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatch::WriteBatch()",3, 27, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatch::~WriteBatch()",1, 30, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatch::Handler::~Handler()",1, 36, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatch::Clear()",4, 27, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatch::Iterate( Handler * handler) const",39, 67, 4, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatchInternal::Count( const WriteBatch * b)",3, 53, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatchInternal::SetCount( WriteBatch * b , int n)",3, 58, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatchInternal::Sequence( const WriteBatch * b)",3, 67, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatchInternal::SetSequence( WriteBatch * b , SequenceNumber seq)",3, 74, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatch::Put( const Slice & key , const Slice & value)",6, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatch::Delete( const Slice & key)",5, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::MemTableInserter::Put( const Slice & key , const Slice & value)",4, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::MemTableInserter::Delete( const Slice & key)",4, 55, 4, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatchInternal::InsertInto( const WriteBatch * b , MemTable * memtable)",7, 60, 38, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatchInternal::SetContents( WriteBatch * b , const Slice & contents)",4, 77, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch.cc,"leveldb::WriteBatchInternal::Append( WriteBatch * dst , const WriteBatch * src)",5, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_comparator_t::~leveldb_comparator_t()",3, 36, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_comparator_t::Compare( const Slice & a , const Slice & b) const",3, 72, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_comparator_t::Name() const",3, 37, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_comparator_t::FindShortestSeparator( std :: string * , const Slice &) const",1, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_comparator_t::FindShortSuccessor( std :: string * key) const",1, 62, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_filterpolicy_t::~leveldb_filterpolicy_t()",3, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_filterpolicy_t::Name() const",3, 37, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_filterpolicy_t::CreateFilter( const Slice * keys , int n , std :: string * dst) const",12, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_filterpolicy_t::KeyMayMatch( const Slice & key , const Slice & filter) const",4, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"SaveError( char ** errptr , const Status & s)",13, 56, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"CopyString( const std :: string & str)",5, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_open( const leveldb_options_t * options , const char * name , char ** errptr)",12, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_close( leveldb_t * db)",4, 36, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_put( leveldb_t * db , const leveldb_writeoptions_t * options , const char * key , size_t keylen , const char * val , size_t vallen , char ** errptr)",9, 81, 12, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_delete( leveldb_t * db , const leveldb_writeoptions_t * options , const char * key , size_t keylen , char ** errptr)",7, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_write( leveldb_t * db , const leveldb_writeoptions_t * options , leveldb_writebatch_t * batch , char ** errptr)",7, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_get( leveldb_t * db , const leveldb_readoptions_t * options , const char * key , size_t keylen , size_t * vallen , char ** errptr)",20, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_create_iterator( leveldb_t * db , const leveldb_readoptions_t * options)",7, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_create_snapshot( leveldb_t * db)",6, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_release_snapshot( leveldb_t * db , const leveldb_snapshot_t * snapshot)",6, 43, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_property_value( leveldb_t * db , const char * propname)",11, 62, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_approximate_sizes( leveldb_t * db , int num_ranges , const char * const * range_start_key , const size_t * range_start_key_len , const char * const * range_limit_key , const size_t * range_limit_key_len , uint64_t * sizes)",14, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_compact_range( leveldb_t * db , const char * start_key , size_t start_key_len , const char * limit_key , size_t limit_key_len)",10, 71, 6, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_destroy_db( const leveldb_options_t * options , const char * name , char ** errptr)",6, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_repair_db( const leveldb_options_t * options , const char * name , char ** errptr)",6, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_destroy( leveldb_iterator_t * iter)",4, 54, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_valid( const leveldb_iterator_t * iter)",3, 67, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_seek_to_first( leveldb_iterator_t * iter)",3, 60, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_seek_to_last( leveldb_iterator_t * iter)",3, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_seek( leveldb_iterator_t * iter , const char * k , size_t klen)",3, 79, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_next( leveldb_iterator_t * iter)",3, 51, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_prev( leveldb_iterator_t * iter)",3, 51, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_key( const leveldb_iterator_t * iter , size_t * klen)",5, 77, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_value( const leveldb_iterator_t * iter , size_t * vlen)",5, 79, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_iter_get_error( const leveldb_iterator_t * iter , char ** errptr)",3, 77, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_writebatch_create()",3, 52, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_writebatch_destroy( leveldb_writebatch_t * b)",3, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_writebatch_clear( leveldb_writebatch_t * b)",3, 57, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_writebatch_put( leveldb_writebatch_t * b , const char * key , size_t klen , const char * val , size_t vlen)",6, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_writebatch_delete( leveldb_writebatch_t * b , const char * key , size_t klen)",5, 36, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_writebatch_iterate( leveldb_writebatch_t * b , void * state , void(*put)(void*,const char*k,size_t klen,const char*v,size_t vlen) , void(*deleted)(void*,const char*k,size_t klen))",23, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_create()",3, 46, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_destroy( leveldb_options_t * options)",3, 59, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_comparator( leveldb_options_t * opt , leveldb_comparator_t * cmp)",5, 37, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_filter_policy( leveldb_options_t * opt , leveldb_filterpolicy_t * policy)",5, 40, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_create_if_missing( leveldb_options_t * opt , unsigned char v)",4, 47, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_error_if_exists( leveldb_options_t * opt , unsigned char v)",4, 47, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_paranoid_checks( leveldb_options_t * opt , unsigned char v)",4, 47, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_env( leveldb_options_t * opt , leveldb_env_t * env)",3, 75, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_info_log( leveldb_options_t * opt , leveldb_logger_t * l)",3, 81, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_write_buffer_size( leveldb_options_t * opt , size_t s)",3, 79, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_max_open_files( leveldb_options_t * opt , int n)",3, 73, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_cache( leveldb_options_t * opt , leveldb_cache_t * c)",3, 77, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_block_size( leveldb_options_t * opt , size_t s)",3, 72, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_block_restart_interval( leveldb_options_t * opt , int n)",3, 81, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_options_set_compression( leveldb_options_t * opt , int t)",3, 70, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_comparator_create( void * state , void(*destructor)(void*) , int(*compare)(void*,const char*a,size_t alen,const char*b,size_t blen) , const char *(*name)(void*))",15, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_comparator_destroy( leveldb_comparator_t * cmp)",3, 61, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_filterpolicy_create( void * state , void(*destructor)(void*) , char *(*create_filter)(void*,const char*const*key_array,const size_t*key_length_array,int num_keys,size_t*filter_length) , unsigned char(*key_may_match)(void*,const char*key,size_t length,const char*filter,size_t filter_length) , const char *(*name)(void*))",21, 70, 8, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_filterpolicy_destroy( leveldb_filterpolicy_t * filter)",3, 68, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_filterpolicy_create_bloom( int bits_per_key)",22, 78, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_readoptions_create()",3, 54, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_readoptions_destroy( leveldb_readoptions_t * opt)",3, 63, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_readoptions_set_verify_checksums( leveldb_readoptions_t * opt , unsigned char v)",5, 47, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_readoptions_set_fill_cache( leveldb_readoptions_t * opt , unsigned char v)",4, 51, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_readoptions_set_snapshot( leveldb_readoptions_t * opt , const leveldb_snapshot_t * snap)",5, 49, 2, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_writeoptions_create()",3, 56, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_writeoptions_destroy( leveldb_writeoptions_t * opt)",3, 65, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_writeoptions_set_sync( leveldb_writeoptions_t * opt , unsigned char v)",4, 52, 4, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_cache_create_lru( size_t capacity)",5, 61, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_cache_destroy( leveldb_cache_t * cache)",4, 53, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_create_default_env()",6, 46, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_env_destroy( leveldb_env_t * env)",4, 47, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_free( void * ptr)",3, 31, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_major_version()",3, 30, 0, 0
repos/cpp/bitcoin/src/leveldb/db/c.cc,"leveldb_minor_version()",3, 30, 0, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::RecoveryTest()",5, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::~RecoveryTest()",4, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::dbfull() const",1, 68, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::env() const",1, 36, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::CanAppend()",10, 72, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::Close()",4, 17, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::Open( Options * options = NULL)",15, 63, 6, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::Put( const std :: string & k , const std :: string & v)",3, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::Get( const std :: string & k , const Snapshot * snapshot = NULL)",10, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::ManifestFileName()",9, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::LogName( uint64_t number)",3, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::DeleteLogFiles()",7, 73, 6, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::FirstLogFile()",3, 34, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::GetFiles( FileType t)",13, 70, 6, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::NumLogs()",3, 38, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::NumTables()",3, 40, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::FileSize( const std :: string & fname)",5, 59, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::CompactMemTable()",3, 38, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::RecoveryTest::MakeLogFile( uint64_t lognum , SequenceNumber seq , Slice key , Slice val)",12, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::TEST( RecoveryTest , ManifestReused)",15, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::TEST( RecoveryTest , LargeManifestCompacted)",30, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::TEST( RecoveryTest , NoLogFiles)",8, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::TEST( RecoveryTest , LogFileReuse)",29, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::TEST( RecoveryTest , MultipleMemTables)",28, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"leveldb::TEST( RecoveryTest , MultipleLogFiles)",45, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/db/recovery_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/builder.cc,"leveldb::BuildTable( const std :: string & dbname , Env * env , const Options & options , TableCache * table_cache , Iterator * iter , FileMetaData * meta)",70, 64, 46, 0
repos/cpp/bitcoin/src/leveldb/db/version_edit.cc,"leveldb::VersionEdit::Clear()",14, 33, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_edit.cc,"leveldb::VersionEdit::EncodeTo( std :: string * dst) const",46, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_edit.cc,"leveldb::GetInternalKey( Slice * input , InternalKey * dst)",9, 61, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_edit.cc,"leveldb::GetLevel( Slice * input , int * level)",10, 49, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_edit.cc,"leveldb::VersionEdit::DecodeFrom( const Slice & src)",102, 67, 10, 0
repos/cpp/bitcoin/src/leveldb/db/version_edit.cc,"leveldb::VersionEdit::DebugString() const",53, 69, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::Comparator::operator ( )( const Key & a , const Key & b) const",9, 53, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TEST( SkipTest , Empty)",15, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TEST( SkipTest , InsertAndLookup)",77, 69, 4, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::key( Key key)",1, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::gen( Key key)",1, 68, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::hash( Key key)",1, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::HashNumbers( uint64_t k , uint64_t g)",4, 65, 4, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::MakeKey( uint64_t k , uint64_t g)",6, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::IsValidKey( Key k)",3, 60, 4, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::RandomTarget( Random * rnd)",13, 44, 8, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::State::Set( int k , intptr_t v)",3, 63, 6, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::State::Get( int k)",3, 71, 6, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::State::State()",5, 36, 6, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::ConcurrentTest()",1, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::WriteStep( Random * rnd)",7, 44, 4, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentTest::ReadStep( Random * rnd)",58, 79, 20, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TEST( SkipTest , ConcurrentWithoutThreads)",8, 43, 0, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TestState::TestState( int s)",5, 28, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TestState::Wait( ReaderState s)",7, 29, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TestState::Change( ReaderState s)",6, 31, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::ConcurrentReader( void * arg)",11, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::RunConcurrent( int run)",19, 73, 4, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TEST( SkipTest , Concurrent1)",1, 50, 0, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TEST( SkipTest , Concurrent2)",1, 50, 0, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TEST( SkipTest , Concurrent3)",1, 50, 0, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TEST( SkipTest , Concurrent4)",1, 50, 0, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"leveldb::TEST( SkipTest , Concurrent5)",1, 50, 0, 0
repos/cpp/bitcoin/src/leveldb/db/skiplist_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::CorruptionTest()",12, 51, 4, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::~CorruptionTest()",5, 36, 5, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::TryReopen()",5, 46, 4, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::Reopen()",3, 28, 4, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::RepairDB()",5, 55, 4, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::Build( int n)",17, 81, 6, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::Check( int min_expected , int max_expected)",37, 80, 12, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::Corrupt( FileType filetype , int offset , int bytes_to_corrupt)",49, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::Property( const std :: string & name)",10, 56, 8, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::Key( int i , std :: string * storage)",6, 44, 4, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::CorruptionTest::Value( int k , std :: string * storage)",4, 56, 4, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , Recovery)",10, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , RecoverWriteError)",5, 42, 0, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , NewFileErrorDuringWrite)",16, 66, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , TableFile)",10, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , TableFileRepair)",15, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , TableFileIndexData)",9, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , MissingDescriptor)",6, 42, 0, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , SequenceNumberRecovery)",20, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , CorruptedDescriptor)",16, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , CompactionInputError)",14, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , CompactionInputErrorParanoid)",20, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"leveldb::TEST( CorruptionTest , UnrelatedKeys)",15, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/db/corruption_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::PackSequenceAndType( uint64_t seq , ValueType t)",5, 65, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::AppendInternalKey( std :: string * result , const ParsedInternalKey & key)",4, 76, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::ParsedInternalKey::DebugString() const",10, 53, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::InternalKey::DebugString() const",11, 47, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::InternalKeyComparator::Name() const",3, 50, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::InternalKeyComparator::Compare( const Slice & akey , const Slice & bkey) const",17, 81, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::InternalKeyComparator::FindShortestSeparator( std :: string * start , const Slice & limit) const",18, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::InternalKeyComparator::FindShortSuccessor( std :: string * key) const",13, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::InternalFilterPolicy::Name() const",3, 49, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::InternalFilterPolicy::CreateFilter( const Slice * keys , int n , std :: string * dst) const",11, 68, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::InternalFilterPolicy::KeyMayMatch( const Slice & key , const Slice & f) const",3, 81, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat.cc,"leveldb::LookupKey::LookupKey( const Slice & user_key , SequenceNumber s)",18, 65, 2, 0
repos/cpp/bitcoin/src/leveldb/db/filename_test.cc,"leveldb::TEST( FileNameTest , Parse)",60, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/db/filename_test.cc,"leveldb::TEST( FileNameTest , Construction)",41, 65, 2, 0
repos/cpp/bitcoin/src/leveldb/db/filename_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::BigString( const std :: string & partial_string , size_t n)",8, 76, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::NumberString( int n)",5, 41, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::RandomSkewedString( int i , Random * rnd)",3, 60, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::StringDest::Close()",1, 52, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::StringDest::Flush()",1, 52, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::StringDest::Sync()",1, 51, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::StringDest::Append( const Slice & slice)",4, 52, 6, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::StringSource::StringSource()",1, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::StringSource::Read( size_t n , Slice * result , char * scratch)",17, 76, 6, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::StringSource::Skip( uint64_t n)",10, 68, 8, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::ReportCollector::ReportCollector()",1, 46, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::ReportCollector::Corruption( size_t bytes , const Status & status)",4, 66, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::LogTest()",5, 71, 14, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::~LogTest()",4, 20, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::ReopenForAppend()",4, 58, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::Write( const std :: string & msg)",4, 64, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::WrittenBytes() const",3, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::Read()",13, 50, 6, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::IncrementByte( int offset , int delta)",3, 46, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::SetByte( int offset , char new_byte)",3, 44, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::ShrinkSize( int bytes)",3, 60, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::FixChecksum( int header_offset , int len)",6, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::ForceError()",3, 33, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::DroppedBytes() const",3, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::ReportMessage() const",3, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::MatchError( const std :: string & msg) const",7, 59, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::WriteInitialOffsetLog()",7, 60, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::StartReadingAt( uint64_t initial_offset)",4, 80, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::CheckOffsetPastEndReturnsNoRecords( uint64_t offset_past_end)",11, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::LogTest::CheckInitialOffsetRecord( uint64_t initial_offset , int expected_record_offset)",23, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , Empty)",3, 28, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadWrite)",12, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ManyBlocks)",9, 40, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , Fragmentation)",9, 49, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , MarginalTrailer)",12, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , MarginalTrailer2)",12, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ShortTrailer)",11, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , AlignedEof)",7, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , OpenForAppend)",8, 31, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , RandomRead)",12, 57, 4, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadError)",7, 45, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , BadRecordType)",9, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , TruncatedTrailingRecordIsIgnored)",8, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , BadLength)",10, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , BadLengthAtEndIsIgnored)",7, 41, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ChecksumMismatch)",7, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , UnexpectedMiddleType)",8, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , UnexpectedLastType)",8, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , UnexpectedFullType)",10, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , UnexpectedFirstType)",10, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , MissingLastIsIgnored)",8, 46, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , PartialLastIsIgnored)",8, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , SkipIntoMultiRecord)",15, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ErrorJoinsRecords)",22, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadStart)",3, 34, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadSecondOneOff)",3, 34, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadSecondTenThousand)",3, 39, 0, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadSecondStart)",3, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadThirdOneOff)",3, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadThirdStart)",3, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadFourthOneOff)",3, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadFourthFirstBlockTrailer)",3, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadFourthMiddleBlock)",3, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadFourthLastBlock)",3, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadFourthStart)",5, 81, 6, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadInitialOffsetIntoBlockPadding)",3, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadEnd)",3, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"leveldb::log::TEST( LogTest , ReadPastEnd)",3, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/db/log_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::FindFileTest::FindFileTest()",1, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::FindFileTest::~FindFileTest()",5, 46, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::FindFileTest::Add( const char * smallest , const char * largest , SequenceNumber smallest_seq = 100 , SequenceNumber largest_seq = 100)",9, 67, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::FindFileTest::Find( const char * key)",5, 53, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::FindFileTest::Overlaps( const char * smallest , const char * largest)",8, 70, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::TEST( FindFileTest , Empty)",7, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::TEST( FindFileTest , Single)",29, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::TEST( FindFileTest , Multiple)",37, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::TEST( FindFileTest , MultipleNullBoundaries)",19, 45, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::TEST( FindFileTest , OverlapSequenceChecks)",8, 44, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"leveldb::TEST( FindFileTest , OverlappingFiles)",17, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::RandomString( Random * rnd , int len)",5, 56, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::AtomicCounter::AtomicCounter()",1, 34, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::AtomicCounter::Increment()",3, 21, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::AtomicCounter::IncrementBy( int count)",4, 32, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::AtomicCounter::Read()",4, 23, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::AtomicCounter::Reset()",4, 23, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DelayMilliseconds( int millis)",3, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::SpecialEnv::SpecialEnv( Env * base)",9, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::SpecialEnv::NewWritableFile( const std :: string & f , WritableFile ** r)",72, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::SpecialEnv::NewRandomAccessFile( const std :: string & f , RandomAccessFile ** r)",23, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::DBTest()",8, 52, 13, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::~DBTest()",6, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::ChangeOptions()",9, 34, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::CurrentOptions()",18, 48, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::dbfull()",3, 43, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::Reopen( Options * options = NULL)",3, 41, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::Close()",4, 17, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::DestroyAndReopen( Options * options = NULL)",6, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::TryReopen( Options * options)",14, 42, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::Put( const std :: string & k , const std :: string & v)",3, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::Delete( const std :: string & k)",3, 43, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::Get( const std :: string & k , const Snapshot * snapshot = NULL)",12, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::Contents()",24, 74, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::AllEntriesFor( const Slice & user_key)",41, 81, 10, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::NumTableFilesAtLevel( int level)",7, 79, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::TotalTableFiles()",7, 63, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::FilesPerLevel()",15, 65, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::CountFiles()",5, 43, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::Size( const Slice & start , const Slice & limit)",6, 58, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::Compact( const Slice & start , const Slice & limit)",3, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::MakeTables( int n , const std :: string & small , const std :: string & large)",7, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::FillLevels( const std :: string & smallest , const std :: string & largest)",3, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::DumpFileCounts( const char * label)",12, 65, 16, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::DumpSSTableList()",5, 53, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::IterStatus( Iterator * iter)",9, 73, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::DeleteAnSSTFile()",13, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::DBTest::RenameLDBToSST()",16, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , Empty)",6, 40, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , ReadWrite)",10, 33, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , PutDeleteGet)",10, 54, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , GetFromImmutableLayer)",17, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , GetFromVersions)",7, 38, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , GetMemUsage)",10, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , GetSnapshot)",17, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , GetLevel0Ordering)",14, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , GetOrderedByLevels)",11, 38, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , GetPicksCorrectFile)",14, 62, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , GetEncountersEmptyLevel)",38, 75, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , IterEmpty)",14, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , IterSingle)",37, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , IterMulti)",82, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , IterSmallAndLargeMix)",37, 65, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , IterMultiWithDelete)",16, 54, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , Recover)",21, 33, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , RecoveryWithEmptyLog)",11, 37, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , RecoverDuringMemtableCompaction)",20, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::Key( int i)",5, 44, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , MinorCompactionsHappen)",24, 61, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , RecoverWithLargeLog)",23, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , CompactionsGenerateMultipleFiles)",25, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , RepeatedWritesToSameKey)",18, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , SparseMerge)",39, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::Between( uint64_t val , uint64_t low , uint64_t high)",10, 65, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , ApproximateSizes)",57, 80, 10, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , ApproximateSizes_MixOfSmallAndLarge)",42, 76, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , IteratorPinsRef)",21, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , Snapshot)",28, 45, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , HiddenValuesAreRemoved)",30, 70, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , DeletionMarkers1)",28, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , DeletionMarkers2)",25, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , OverlapInLevel0)",40, 82, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , L0_CompactionBug_Issue44_a)",16, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , L0_CompactionBug_Issue44_b)",25, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , ComparatorCheck)",22, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , CustomComparator)",54, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , ManualCompaction)",33, 66, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , DBOpen_Options)",38, 71, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , Locking)",5, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , NoSpace)",18, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , NonWritableFileSystem)",19, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , WriteSyncError)",30, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , ManifestWriteError)",40, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , MissingSSTFile)",17, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , StillReadSST)",15, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , FilesDeletedAfterCompaction)",10, 44, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , BloomFilter)",46, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::MTThreadBody( void * arg)",44, 79, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , MultiThreaded)",31, 58, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelDB( const Options & options)",1, 66, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::~ModelDB()",1, 17, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::Put( const WriteOptions & o , const Slice & k , const Slice & v)",3, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::Delete( const WriteOptions & o , const Slice & key)",3, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::Get( const ReadOptions & options , const Slice & key , std :: string * value)",5, 61, 21, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::NewIterator( const ReadOptions & options)",11, 77, 10, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::GetSnapshot()",5, 49, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ReleaseSnapshot( const Snapshot * snapshot)",3, 61, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::Write( const WriteOptions & options , WriteBatch * batch)",15, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::GetProperty( const Slice & property , std :: string * value)",3, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::GetApproximateSizes( const Range * r , int n , uint64_t * sizes)",5, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::CompactRange( const Slice * start , const Slice * end)",2, 68, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::ModelIter( const KVMap * map , bool owned)",3, 57, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::~ModelIter()",3, 31, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::Valid() const",1, 64, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::SeekToFirst()",1, 58, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::SeekToLast()",7, 51, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::Seek( const Slice & k)",3, 47, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::Next()",1, 37, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::Prev()",1, 37, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::key() const",1, 55, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::value() const",1, 58, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::ModelDB::ModelIter::status() const",1, 59, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::RandomKey( Random * rnd)",6, 75, 13, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::CompareIterators( int step , DB * model , DB * db , const Snapshot * model_snap , const Snapshot * db_snap)",47, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::TEST( DBTest , Randomized)",70, 79, 8, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::MakeKey( unsigned int num)",5, 44, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"leveldb::BM_LogAndApply( int iters , int num_base_files)",51, 74, 10, 0
repos/cpp/bitcoin/src/leveldb/db/db_test.cc,"main( int argc , char ** argv)",11, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::TargetFileSize( const Options * options)",3, 55, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::MaxGrandParentOverlapBytes( const Options * options)",3, 68, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::ExpandedCompactionByteSizeLimit( const Options * options)",3, 73, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::MaxBytesForLevel( const Options * options , int level)",12, 69, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::MaxFileSizeForLevel( const Options * options , int level)",4, 73, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::TotalFileSize( const std :: vector<FileMetaData*> & files)",7, 72, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::~Version()",19, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::FindFile( const InternalKeyComparator & icmp , const std :: vector<FileMetaData*> & files , const Slice & key)",20, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::AfterFile( const Comparator * ucmp , const Slice * user_key , const FileMetaData * f)",6, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::BeforeFile( const Comparator * ucmp , const Slice * user_key , const FileMetaData * f)",6, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::SomeFileOverlapsRange( const InternalKeyComparator & icmp , bool disjoint_sorted_files , const std :: vector<FileMetaData*> & files , const Slice * smallest_user_key , const Slice * largest_user_key)",36, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::LevelFileNumIterator( const InternalKeyComparator & icmp , const std :: vector<FileMetaData*> * flist)",6, 64, 23, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::Valid() const",3, 36, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::Seek( const Slice & target)",3, 47, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::SeekToFirst()",1, 45, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::SeekToLast()",3, 55, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::Next()",4, 24, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::Prev()",8, 52, 6, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::key() const",4, 48, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::value() const",6, 63, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::LevelFileNumIterator::status() const",1, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::GetFileIterator( void * arg , const ReadOptions & options , const Slice & file_value)",13, 73, 8, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::NewConcatenatingIterator( const ReadOptions & options , int level) const",6, 72, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::AddIterators( const ReadOptions & options , std :: vector<Iterator*> * iters)",18, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::SaveValue( void * arg , const Slice & ikey , const Slice & v)",14, 70, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::NewestFirst( FileMetaData * a , FileMetaData * b)",3, 60, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::ForEachOverlapping( Slice user_key , Slice internal_key , void * arg , bool(*func)(void*,int,FileMetaData*))",44, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::Get( const ReadOptions & options , const LookupKey & k , std :: string * value , GetStats * stats)",98, 79, 8, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::UpdateStats( const GetStats & stats)",12, 61, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::RecordReadSample( Slice internal_key)",37, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::Ref()",3, 22, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::Unref()",8, 43, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::OverlapInLevel( int level , const Slice * smallest_user_key , const Slice * largest_user_key)",6, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::PickLevelForMemTableOutput( const Slice & smallest_user_key , const Slice & largest_user_key)",27, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::GetOverlappingInputs( int level , const InternalKey * begin , const InternalKey * end , std :: vector<FileMetaData*> * inputs)",42, 81, 8, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Version::DebugString() const",25, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::Builder::BySmallestKey::operator ( )( FileMetaData * f1 , FileMetaData * f2) const",9, 72, 6, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::Builder::Builder( VersionSet * vset , Version * base)",10, 63, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::Builder::~Builder()",20, 63, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::Builder::Apply( VersionEdit * edit)",44, 77, 6, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::Builder::SaveTo( Version * v)",47, 81, 6, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::Builder::MaybeAddFile( Version * v , int level , FileMetaData * f)",14, 72, 8, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::VersionSet( const std :: string & dbname , const Options * options , TableCache * table_cache , const InternalKeyComparator * cmp)",20, 57, 23, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::~VersionSet()",6, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::AppendVersion( Version * v)",16, 45, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::LogAndApply( VersionEdit * edit , port :: Mutex * mu)",84, 79, 8, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::Recover( bool * save_manifest)",121, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::ReuseManifest( const std :: string & dscname , const std :: string & dscbase)",30, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::MarkFileNumberUsed( uint64_t number)",5, 55, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::Finalize( Version * v)",37, 80, 10, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::WriteSnapshot( log :: Writer * log)",29, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::NumLevelFiles( int level) const",5, 49, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::LevelSummary( LevelSummaryStorage * scratch) const",14, 75, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::ApproximateOffsetOf( Version * v , const InternalKey & ikey)",31, 80, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::AddLiveFiles( std :: set<uint64_t> * live)",12, 66, 6, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::NumLevelBytes( int level) const",5, 53, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::MaxNextLevelOverlappingBytes()",16, 73, 6, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::GetRange( const std :: vector<FileMetaData*> & inputs , InternalKey * smallest , InternalKey * largest)",21, 68, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::GetRange2( const std :: vector<FileMetaData*> & inputs1 , const std :: vector<FileMetaData*> & inputs2 , InternalKey * smallest , InternalKey * largest)",8, 70, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::MakeInputIterator( Compaction * c)",32, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::PickCompaction()",53, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::SetupOtherInputs( Compaction * c)",67, 80, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::VersionSet::CompactRange( int level , const InternalKey * begin , const InternalKey * end)",34, 71, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Compaction::Compaction( const Options * options , int level)",11, 66, 6, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Compaction::~Compaction()",5, 32, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Compaction::IsTrivialMove() const",9, 70, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Compaction::AddInputDeletions( VersionEdit * edit)",7, 67, 6, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Compaction::IsBaseLevelForKey( const Slice & user_key)",20, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Compaction::ShouldStopBefore( const Slice & internal_key)",22, 80, 20, 0
repos/cpp/bitcoin/src/leveldb/db/version_set.cc,"leveldb::Compaction::ReleaseInputs()",6, 35, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::GuessType( const std :: string & fname , FileType * type)",11, 76, 4, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::CorruptionReporter::Corruption( size_t bytes , const Status & status)",8, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::PrintLogContents( Env * env , const std :: string & fname , void(*func)(uint64_t,Slice,WritableFile*) , WritableFile * dst)",19, 70, 24, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::WriteBatchItemPrinter::Put( const Slice & key , const Slice & value)",8, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::WriteBatchItemPrinter::Delete( const Slice & key)",6, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::WriteBatchPrinter( uint64_t pos , Slice record , WritableFile * dst)",24, 79, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::DumpLog( Env * env , const std :: string & fname , WritableFile * dst)",3, 72, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::VersionEditPrinter( uint64_t pos , Slice record , WritableFile * dst)",14, 80, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::DumpDescriptor( Env * env , const std :: string & fname , WritableFile * dst)",3, 79, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::DumpTable( Env * env , const std :: string & fname , WritableFile * dst)",64, 74, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dumpfile.cc,"leveldb::DumpFile( Env * env , const std :: string & fname , WritableFile * dst)",14, 73, 0, 0
repos/cpp/bitcoin/src/leveldb/db/autocompact_test.cc,"leveldb::AutoCompactTest::AutoCompactTest()",9, 52, 4, 0
repos/cpp/bitcoin/src/leveldb/db/autocompact_test.cc,"leveldb::AutoCompactTest::~AutoCompactTest()",5, 35, 4, 0
repos/cpp/bitcoin/src/leveldb/db/autocompact_test.cc,"leveldb::AutoCompactTest::Key( int i)",5, 46, 4, 0
repos/cpp/bitcoin/src/leveldb/db/autocompact_test.cc,"leveldb::AutoCompactTest::Size( const Slice & start , const Slice & limit)",6, 58, 2, 0
repos/cpp/bitcoin/src/leveldb/db/autocompact_test.cc,"leveldb::AutoCompactTest::DoReads( int n)",47, 74, 12, 0
repos/cpp/bitcoin/src/leveldb/db/autocompact_test.cc,"leveldb::TEST( AutoCompactTest , ReadAll)",3, 33, 0, 0
repos/cpp/bitcoin/src/leveldb/db/autocompact_test.cc,"leveldb::TEST( AutoCompactTest , ReadHalf)",3, 34, 0, 0
repos/cpp/bitcoin/src/leveldb/db/autocompact_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DumpInternalIter( Iterator * iter)",10, 76, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::DBIter( DBImpl * db , const Comparator * cmp , Iterator * iter , SequenceNumber s , uint32_t seed)",11, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::~DBIter()",3, 22, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::Valid() const",1, 48, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::key() const",4, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::value() const",4, 69, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::status() const",7, 34, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::SaveKey( const Slice & k , std :: string * dst)",3, 58, 2, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::ClearSavedValue()",8, 45, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::RandomPeriod()",3, 53, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::ParseKey( ParsedInternalKey * ikey)",15, 70, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::Next()",26, 69, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::FindNextUserEntry( bool skipping , std :: string * skip)",31, 70, 14, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::Prev()",26, 71, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::FindPrevUserEntry()",41, 78, 10, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::Seek( const Slice & target)",13, 77, 6, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::SeekToFirst()",10, 67, 4, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::DBIter::SeekToLast()",6, 28, 0, 0
repos/cpp/bitcoin/src/leveldb/db/db_iter.cc,"leveldb::NewDBIterator( DBImpl * db , const Comparator * user_key_comparator , Iterator * internal_iter , SequenceNumber sequence , uint32_t seed)",8, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::Repairer( const std :: string & dbname , const Options & options)",12, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::~Repairer()",9, 35, 6, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::Run()",23, 52, 6, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::FindFiles()",32, 64, 6, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::ConvertLogFilesToTables()",12, 75, 8, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::ConvertLogToTable( uint64_t log)",81, 81, 12, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::ExtractMetaData()",5, 57, 4, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::NewTableIterator( const FileMetaData & meta)",7, 70, 4, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::ScanTable( uint64_t number)",62, 66, 6, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::RepairTable( const std :: string & src , TableInfo t)",53, 68, 4, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::WriteDescriptor()",58, 76, 4, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::Repairer::ArchiveFile( const std :: string & fname)",19, 66, 4, 0
repos/cpp/bitcoin/src/leveldb/db/repair.cc,"leveldb::RepairDB( const std :: string & dbname , const Options & options)",4, 69, 0, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch_test.cc,"leveldb::PrintContents( WriteBatch * b)",39, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch_test.cc,"leveldb::TEST( WriteBatchTest , Empty)",5, 51, 2, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch_test.cc,"leveldb::TEST( WriteBatchTest , Multiple)",13, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch_test.cc,"leveldb::TEST( WriteBatchTest , Corruption)",12, 77, 34, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch_test.cc,"leveldb::TEST( WriteBatchTest , Append)",25, 45, 2, 0
repos/cpp/bitcoin/src/leveldb/db/write_batch_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/leveldbutil.cc,"leveldb::StdoutPrinter::Append( const Slice & data)",4, 49, 4, 0
repos/cpp/bitcoin/src/leveldb/db/leveldbutil.cc,"leveldb::StdoutPrinter::Close()",1, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/db/leveldbutil.cc,"leveldb::StdoutPrinter::Flush()",1, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/db/leveldbutil.cc,"leveldb::StdoutPrinter::Sync()",1, 49, 2, 0
repos/cpp/bitcoin/src/leveldb/db/leveldbutil.cc,"leveldb::StdoutPrinter::GetName() const",1, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/db/leveldbutil.cc,"leveldb::HandleDumpCommand( Env * env , char ** files , int num)",12, 58, 0, 0
repos/cpp/bitcoin/src/leveldb/db/leveldbutil.cc,"Usage()",7, 71, 6, 0
repos/cpp/bitcoin/src/leveldb/db/leveldbutil.cc,"main( int argc , char ** argv)",17, 60, 6, 0
repos/cpp/bitcoin/src/leveldb/db/version_edit_test.cc,"leveldb::TestEncodeDecode( const VersionEdit & edit)",9, 56, 0, 0
repos/cpp/bitcoin/src/leveldb/db/version_edit_test.cc,"leveldb::TEST( VersionEditTest , EncodeDecode)",19, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/db/version_edit_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::GetLengthPrefixedSlice( const char * data)",6, 77, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTable::MemTable( const InternalKeyComparator & cmp)",5, 53, 0, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTable::~MemTable()",3, 24, 0, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTable::ApproximateMemoryUsage()",1, 75, 0, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTable::KeyComparator::operator ( )( const char * aptr , const char * bptr) const",7, 76, 0, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::EncodeKey( std :: string * scratch , const Slice & target)",6, 74, 0, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::MemTableIterator( MemTable :: Table * table)",1, 71, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::Valid() const",1, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::Seek( const Slice & k)",1, 73, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::SeekToFirst()",1, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::SeekToLast()",1, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::Next()",1, 40, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::Prev()",1, 40, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::key() const",1, 76, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::value() const",4, 72, 4, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTableIterator::status() const",1, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTable::NewIterator()",3, 40, 2, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTable::Add( SequenceNumber s , ValueType type , const Slice & key , const Slice & value)",25, 60, 6, 0
repos/cpp/bitcoin/src/leveldb/db/memtable.cc,"leveldb::MemTable::Get( const LookupKey & key , std :: string * value , Status * s)",36, 74, 0, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat_test.cc,"leveldb::IKey( const std :: string & user_key , uint64_t seq , ValueType vt)",7, 69, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat_test.cc,"leveldb::Shorten( const std :: string & s , const std :: string & l)",5, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat_test.cc,"leveldb::ShortSuccessor( const std :: string & s)",5, 75, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat_test.cc,"leveldb::TestKey( const std :: string & key , uint64_t seq , ValueType vt)",15, 58, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat_test.cc,"leveldb::TEST( FormatTest , InternalKey_EncodeDecode)",15, 74, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat_test.cc,"leveldb::TEST( FormatTest , InternalKeyShortSeparator)",35, 62, 2, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat_test.cc,"leveldb::TEST( FormatTest , InternalKeyShortestSuccessor)",6, 64, 12, 0
repos/cpp/bitcoin/src/leveldb/db/dbformat_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"ExecErrorCheck( int status , char * err_msg)",7, 56, 0, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"StepErrorCheck( int status)",6, 62, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"ErrorCheck( int status)",6, 61, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"WalCheckpoint( sqlite3 * db_)",6, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::RandomGenerator::RandomGenerator()",14, 76, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::RandomGenerator::Generate( int len)",8, 50, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::TrimSpace( Slice s)",11, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::PrintHeader()",12, 75, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::PrintWarnings()",11, 81, 12, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::PrintEnvironment()",33, 77, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::Start()",9, 49, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::FinishedSingleOp()",25, 67, 8, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::Stop( const Slice & name)",28, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::Benchmark()",22, 62, 8, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::~Benchmark()",4, 37, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::Run()",73, 80, 10, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::Open()",60, 80, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::Write( bool write_sync , Order order , DBState state , int num_entries , int value_size , int entries_per_batch)",102, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::Read( Order order , int entries_per_batch)",67, 78, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"leveldb::Benchmark::ReadSequential()",15, 81, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_sqlite3.cc,"main( int argc , char ** argv)",50, 80, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"DBSynchronize( kyotocabinet :: TreeDB * db_)",7, 69, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::RandomGenerator::RandomGenerator()",14, 76, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::RandomGenerator::Generate( int len)",8, 50, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::TrimSpace( Slice s)",11, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::PrintHeader()",17, 81, 12, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::PrintWarnings()",11, 81, 12, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::PrintEnvironment()",34, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::Start()",9, 49, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::FinishedSingleOp()",25, 67, 8, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::Stop( const Slice & name)",28, 79, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::Benchmark()",21, 61, 8, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::~Benchmark()",5, 65, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::Run()",68, 80, 10, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::Open( bool sync)",34, 64, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::Write( bool sync , Order order , DBState state , int num_entries , int value_size , int entries_per_batch)",34, 78, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::ReadSequential()",10, 51, 4, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"leveldb::Benchmark::ReadRandom()",10, 46, 6, 0
repos/cpp/bitcoin/src/leveldb/doc/bench/db_bench_tree_db.cc,"main( int argc , char ** argv)",45, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::PthreadCall( const char * label , int result)",6, 66, 4, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::Mutex::Mutex()",1, 78, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::Mutex::~Mutex()",1, 79, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::Mutex::Lock()",1, 70, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::Mutex::Unlock()",1, 76, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::CondVar::CondVar( Mutex * mu)",4, 59, 4, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::CondVar::~CondVar()",1, 79, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::CondVar::Wait()",3, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::CondVar::Signal()",3, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::CondVar::SignalAll()",3, 58, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::InitOnce( OnceType * once , void(*initializer)())",3, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix.cc,"leveldb::port::HasAcceleratedCRC32C()",9, 68, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::Mutex::Mutex()",7, 69, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::Mutex::~Mutex()",7, 65, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::Mutex::Lock()",4, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::Mutex::Unlock()",4, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::Mutex::AssertHeld()",4, 27, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::CondVar::CondVar( Mutex * mu)",7, 53, 4, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::CondVar::~CondVar()",4, 24, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::CondVar::Wait()",14, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::CondVar::Signal()",11, 44, 4, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::CondVar::SignalAll()",9, 45, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::AtomicPointer::AtomicPointer( void * v)",3, 40, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::InitOnce( OnceType * once , void(*initializer)())",3, 55, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::AtomicPointer::Acquire_Load() const",5, 44, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::AtomicPointer::Release_Store( void * v)",3, 45, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::AtomicPointer::NoBarrier_Load() const",3, 46, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::AtomicPointer::NoBarrier_Store( void * v)",3, 47, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_win.cc,"leveldb::port::HasAcceleratedCRC32C()",9, 45, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix_sse.cc,"leveldb::port::LE_LOAD32( const uint8_t * p)",6, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix_sse.cc,"leveldb::port::LE_LOAD64( const uint8_t * p)",5, 53, 0, 0
repos/cpp/bitcoin/src/leveldb/port/port_posix_sse.cc,"leveldb::port::AcceleratedCRC32C( uint32_t crc , const char * buf , size_t size)",54, 73, 0, 0
repos/cpp/bitcoin/src/leveldb/issues/issue200_test.cc,"leveldb::TEST( Issue200 , Test)",38, 66, 2, 0
repos/cpp/bitcoin/src/leveldb/issues/issue200_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/issues/issue178_test.cc,"Key1( int i)",5, 46, 2, 0
repos/cpp/bitcoin/src/leveldb/issues/issue178_test.cc,"Key2( int i)",3, 27, 2, 0
repos/cpp/bitcoin/src/leveldb/issues/issue178_test.cc,"TEST( Issue178 , Test)",57, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/issues/issue178_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::FileState::FileState()",1, 38, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::FileState::Ref()",4, 34, 4, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::FileState::Unref()",16, 36, 6, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::FileState::Size() const",1, 42, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::FileState::Read( uint64_t offset , size_t n , Slice * result , char * scratch) const",42, 79, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::FileState::Append( const Slice & data)",28, 52, 8, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::FileState::~FileState()",6, 79, 4, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::SequentialFileImpl::SequentialFileImpl( FileState * file)",3, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::SequentialFileImpl::~SequentialFileImpl()",3, 26, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::SequentialFileImpl::Read( size_t n , Slice * result , char * scratch)",7, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::SequentialFileImpl::Skip( uint64_t n)",11, 54, 6, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::SequentialFileImpl::GetName() const",1, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::RandomAccessFileImpl::RandomAccessFileImpl( FileState * file)",3, 65, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::RandomAccessFileImpl::~RandomAccessFileImpl()",3, 28, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::RandomAccessFileImpl::Read( uint64_t offset , size_t n , Slice * result , char * scratch) const",4, 64, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::RandomAccessFileImpl::GetName() const",1, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::WritableFileImpl::WritableFileImpl( FileState * file)",3, 52, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::WritableFileImpl::~WritableFileImpl()",3, 24, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::WritableFileImpl::Append( const Slice & data)",3, 45, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::WritableFileImpl::Close()",1, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::WritableFileImpl::Flush()",1, 50, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::WritableFileImpl::Sync()",1, 49, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::WritableFileImpl::GetName() const",1, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::NoOpLogger::Logv( const char * format , va_list ap)",1, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::InMemoryEnv( Env * base_env)",1, 65, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::~InMemoryEnv()",5, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::NewSequentialFile( const std :: string & fname , SequentialFile ** result)",11, 62, 35, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::NewRandomAccessFile( const std :: string & fname , RandomAccessFile ** result)",11, 66, 37, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::NewWritableFile( const std :: string & fname , WritableFile ** result)",14, 59, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::NewAppendableFile( const std :: string & fname , WritableFile ** result)",12, 61, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::FileExists( const std :: string & fname)",4, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::GetChildren( const std :: string & dir , std :: vector<std::string> * result)",16, 81, 4, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::DeleteFileInternal( const std :: string & fname)",8, 54, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::DeleteFile( const std :: string & fname)",9, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::CreateDir( const std :: string & dirname)",3, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::DeleteDir( const std :: string & dirname)",3, 57, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::GetFileSize( const std :: string & fname , uint64_t * file_size)",9, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::RenameFile( const std :: string & src , const std :: string & target)",12, 57, 28, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::LockFile( const std :: string & fname , FileLock ** lock)",4, 71, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::UnlockFile( FileLock * lock)",4, 46, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::GetTestDirectory( std :: string * path)",4, 55, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::InMemoryEnv::NewLogger( const std :: string & fname , Logger ** result)",4, 72, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv.cc,"leveldb::NewMemEnv( Env * base_env)",3, 36, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv_test.cc,"leveldb::MemEnvTest::MemEnvTest()",3, 42, 6, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv_test.cc,"leveldb::MemEnvTest::~MemEnvTest()",3, 18, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv_test.cc,"leveldb::TEST( MemEnvTest , Basics)",67, 81, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv_test.cc,"leveldb::TEST( MemEnvTest , ReadWrite)",41, 78, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv_test.cc,"leveldb::TEST( MemEnvTest , Locks)",7, 56, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv_test.cc,"leveldb::TEST( MemEnvTest , Misc)",14, 60, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv_test.cc,"leveldb::TEST( MemEnvTest , LargeWrite)",32, 68, 4, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv_test.cc,"leveldb::TEST( MemEnvTest , DBTest)",42, 67, 2, 0
repos/cpp/bitcoin/src/leveldb/helpers/memenv/memenv_test.cc,"main( int argc , char ** argv)",3, 39, 2, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"nontrivial_t::nontrivial_t()",1, 29, 4, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"nontrivial_t::SerializationOp( Stream & s , Operation ser_action)",1, 81, 4, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"PrevectorDestructor( benchmark :: State & state)",11, 57, 0, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"PrevectorClear( benchmark :: State & state)",14, 52, 0, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"PrevectorResize( benchmark :: State & state)",13, 53, 0, 0
repos/cpp/bitcoin/src/bench/prevector.cpp,"PrevectorDeserialize( benchmark :: State & state)",20, 58, 0, 0
repos/cpp/bitcoin/src/bench/checkblock.cpp,"DeserializeBlockTest( benchmark :: State & state)",15, 86, 12, 0
repos/cpp/bitcoin/src/bench/checkblock.cpp,"DeserializeAndCheckBlockTest( benchmark :: State & state)",21, 99, 8, 0
repos/cpp/bitcoin/src/bench/rpc_mempool.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main , pool . cs)",5, 130, 4, 0
repos/cpp/bitcoin/src/bench/rpc_mempool.cpp,"RpcMempool( benchmark :: State & state)",21, 65, 8, 0
repos/cpp/bitcoin/src/bench/merkle_root.cpp,"MerkleRoot( benchmark :: State & state)",14, 83, 8, 0
repos/cpp/bitcoin/src/bench/duplicate_inputs.cpp,"DuplicateInputs( benchmark :: State & state)",75, 176, 4, 0
repos/cpp/bitcoin/src/bench/base58.cpp,"Base58Encode( benchmark :: State & state)",13, 78, 12, 0
repos/cpp/bitcoin/src/bench/base58.cpp,"Base58CheckEncode( benchmark :: State & state)",15, 78, 12, 0
repos/cpp/bitcoin/src/bench/base58.cpp,"Base58Decode( benchmark :: State & state)",8, 61, 4, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"addCoin( const CAmount & nValue , const CWallet & wallet , std :: vector<std::unique_ptr<CWalletTx>> & wtxs)",9, 113, 0, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"CoinSelection( benchmark :: State & state)",32, 145, 8, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"add_coin( const CAmount & nValue , int nInput , std :: vector<OutputGroup> & set)",9, 108, 4, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"make_hard_case( int utxos , std :: vector<OutputGroup> & utxo_pool)",11, 95, 8, 0
repos/cpp/bitcoin/src/bench/coin_selection.cpp,"BnBExhaustion( benchmark :: State & state)",18, 102, 8, 0
repos/cpp/bitcoin/src/bench/block_assemble.cpp,"PrepareBlock( const CScript & coinbase_scriptPubKey)",12, 82, 0, 0
repos/cpp/bitcoin/src/bench/block_assemble.cpp,"MineBlock( const CScript & coinbase_scriptPubKey)",14, 89, 4, 0
repos/cpp/bitcoin/src/bench/block_assemble.cpp,"AssembleBlock( benchmark :: State & state)",67, 174, 12, 0
repos/cpp/bitcoin/src/bench/rollingbloom.cpp,"RollingBloom( benchmark :: State & state)",20, 50, 0, 0
repos/cpp/bitcoin/src/bench/verify_script.cpp,"BuildCreditingTransaction( const CScript & scriptPubKey)",15, 82, 0, 0
repos/cpp/bitcoin/src/bench/verify_script.cpp,"BuildSpendingTransaction( const CScript & scriptSig , const CMutableTransaction & txCredit)",16, 115, 0, 0
repos/cpp/bitcoin/src/bench/verify_script.cpp,"VerifyScriptBench( benchmark :: State & state)",54, 142, 4, 0
repos/cpp/bitcoin/src/bench/lockedpool.cpp,"BenchLockedPool( benchmark :: State & state)",29, 60, 4, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"RIPEMD160( benchmark :: State & state)",7, 65, 8, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA1( benchmark :: State & state)",7, 60, 8, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA256( benchmark :: State & state)",7, 62, 8, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA256_32b( benchmark :: State & state)",9, 48, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA256D64_1024( benchmark :: State & state)",7, 52, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SHA512( benchmark :: State & state)",7, 62, 8, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"SipHash_32b( benchmark :: State & state)",8, 62, 8, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"FastRandom_32bit( benchmark :: State & state)",7, 54, 0, 0
repos/cpp/bitcoin/src/bench/crypto_hash.cpp,"FastRandom_1bit( benchmark :: State & state)",7, 53, 0, 0
repos/cpp/bitcoin/src/bench/examples.cpp,"Sleep100ms( benchmark :: State & state)",6, 48, 0, 0
repos/cpp/bitcoin/src/bench/examples.cpp,"Trig( benchmark :: State & state)",8, 42, 0, 0
repos/cpp/bitcoin/src/bench/bech32.cpp,"Bech32Encode( benchmark :: State & state)",10, 107, 4, 0
repos/cpp/bitcoin/src/bench/bech32.cpp,"Bech32Decode( benchmark :: State & state)",7, 79, 4, 0
repos/cpp/bitcoin/src/bench/mempool_eviction.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main , pool . cs)",11, 127, 0, 0
repos/cpp/bitcoin/src/bench/mempool_eviction.cpp,"MempoolEviction( benchmark :: State & state)",106, 62, 4, 0
repos/cpp/bitcoin/src/bench/bench_bitcoin.cpp,"SetupBenchArgs()",13, 218, 4, 0
repos/cpp/bitcoin/src/bench/bench_bitcoin.cpp,"SetDataDir()",7, 84, 4, 0
repos/cpp/bitcoin/src/bench/bench_bitcoin.cpp,"main( int argc , char ** argv)",50, 103, 4, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::ConsolePrinter::header()",4, 89, 4, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::ConsolePrinter::result( const State & state)",25, 170, 4, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::ConsolePrinter::footer()",1, 44, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::PlotlyPrinter::PlotlyPrinter( std :: string plotly_url , int64_t width , int64_t height)",4, 95, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::PlotlyPrinter::header()",8, 122, 14, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::PlotlyPrinter::result( const State & state)",16, 78, 14, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::PlotlyPrinter::footer()",6, 107, 4, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::BenchRunner::benchmarks()",5, 75, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::BenchRunner::BenchRunner( std :: string name , benchmark :: BenchFunction func , uint64_t num_iters_for_one_second)",4, 120, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::BenchRunner::RunAll( Printer & printer , uint64_t num_evals , double scaling , const std :: string & filter , bool is_list_only)",32, 136, 0, 0
repos/cpp/bitcoin/src/bench/bench.cpp,"benchmark::State::UpdateTimer( const benchmark :: time_point current_time)",14, 77, 0, 0
repos/cpp/bitcoin/src/bench/gcs_filter.cpp,"ConstructGCSFilter( benchmark :: State & state)",17, 66, 8, 0
repos/cpp/bitcoin/src/bench/gcs_filter.cpp,"MatchGCSFilter( benchmark :: State & state)",15, 57, 8, 0
repos/cpp/bitcoin/src/bench/ccoins_caching.cpp,"SetupDummyInputs( CBasicKeyStore & keystoreRet , CCoinsViewCache & coinsRet)",29, 101, 4, 0
repos/cpp/bitcoin/src/bench/ccoins_caching.cpp,"CCoinsCaching( benchmark :: State & state)",31, 99, 4, 0
repos/cpp/bitcoin/src/bench/checkqueue.cpp,"CCheckQueueSpeedPrevectorJob( benchmark :: State & state)",38, 72, 8, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::K( uint32_t x)",1, 62, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Add( __m256i x , __m256i y)",1, 76, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Add( __m256i x , __m256i y , __m256i z)",1, 82, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Add( __m256i x , __m256i y , __m256i z , __m256i w)",1, 101, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Add( __m256i x , __m256i y , __m256i z , __m256i w , __m256i v)",1, 115, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Inc( __m256i & x , __m256i y)",1, 71, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Inc( __m256i & x , __m256i y , __m256i z)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Inc( __m256i & x , __m256i y , __m256i z , __m256i w)",1, 99, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Xor( __m256i x , __m256i y)",1, 76, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Xor( __m256i x , __m256i y , __m256i z)",1, 82, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Or( __m256i x , __m256i y)",1, 74, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::And( __m256i x , __m256i y)",1, 76, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::ShR( __m256i x , int n)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::ShL( __m256i x , int n)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Ch( __m256i x , __m256i y , __m256i z)",1, 89, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Maj( __m256i x , __m256i y , __m256i z)",1, 96, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Sigma0( __m256i x)",1, 132, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Sigma1( __m256i x)",1, 131, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::sigma0( __m256i x)",1, 115, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::sigma1( __m256i x)",1, 117, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Round( __m256i a , __m256i b , __m256i c , __m256i & d , __m256i e , __m256i f , __m256i g , __m256i & h , __m256i k)",7, 150, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Read8( const unsigned char * chunk , int offset)",13, 167, 4, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Write8( unsigned char * out , int offset , __m256i v)",11, 162, 4, 0
repos/cpp/bitcoin/src/crypto/sha256_avx2.cpp,"sha256d64_avx2::Transform_8way( unsigned char * out , const unsigned char * in)",250, 109, 4, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"CSipHasher::CSipHasher( uint64_t k0 , uint64_t k1)",9, 49, 0, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"CSipHasher::Write( uint64_t data)",19, 57, 4, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"CSipHasher::Write( const unsigned char * data , size_t size)",27, 70, 0, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"CSipHasher::Finalize() const",17, 57, 4, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"SipHashUint256( uint64_t k0 , uint64_t k1 , const uint256 & val)",39, 70, 0, 0
repos/cpp/bitcoin/src/crypto/siphash.cpp,"SipHashUint256Extra( uint64_t k0 , uint64_t k1 , const uint256 & val , uint32_t extra)",40, 91, 0, 0
repos/cpp/bitcoin/src/crypto/hmac_sha256.cpp,"CHMAC_SHA256::CHMAC_SHA256( const unsigned char * key , size_t keylen)",19, 68, 0, 0
repos/cpp/bitcoin/src/crypto/hmac_sha256.cpp,"CHMAC_SHA256::Finalize( unsigned char hash [ OUTPUT_SIZE ])",6, 61, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::Round( uint32_t a , uint32_t & b , uint32_t c , uint32_t d , uint32_t & e , uint32_t f , uint32_t k , uint32_t w)",5, 116, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::f1( uint32_t b , uint32_t c , uint32_t d)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::f2( uint32_t b , uint32_t c , uint32_t d)",1, 77, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::f3( uint32_t b , uint32_t c , uint32_t d)",1, 91, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::left( uint32_t x)",1, 66, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::Initialize( uint32_t * s)",8, 36, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"sha1::Transform( uint32_t * s , const unsigned char * chunk)",96, 83, 4, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"CSHA1::CSHA1()",4, 26, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"CSHA1::Write( const unsigned char * data , size_t len)",25, 59, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"CSHA1::Finalize( unsigned char hash [ OUTPUT_SIZE ])",13, 54, 0, 0
repos/cpp/bitcoin/src/crypto/sha1.cpp,"CSHA1::Reset()",6, 25, 4, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Ch( uint64_t x , uint64_t y , uint64_t z)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Maj( uint64_t x , uint64_t y , uint64_t z)",1, 92, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Sigma0( uint64_t x)",1, 111, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Sigma1( uint64_t x)",1, 111, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::sigma0( uint64_t x)",1, 98, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::sigma1( uint64_t x)",1, 99, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Round( uint64_t a , uint64_t b , uint64_t c , uint64_t & d , uint64_t e , uint64_t f , uint64_t g , uint64_t & h , uint64_t k , uint64_t w)",7, 140, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Initialize( uint64_t * s)",11, 36, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"sha512::Transform( uint64_t * s , const unsigned char * chunk)",99, 97, 4, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"CSHA512::CSHA512()",4, 30, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"CSHA512::Write( const unsigned char * data , size_t len)",25, 63, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"CSHA512::Finalize( unsigned char hash [ OUTPUT_SIZE ])",16, 56, 0, 0
repos/cpp/bitcoin/src/crypto/sha512.cpp,"CSHA512::Reset()",6, 27, 4, 0
repos/cpp/bitcoin/src/crypto/hmac_sha512.cpp,"CHMAC_SHA512::CHMAC_SHA512( const unsigned char * key , size_t keylen)",19, 68, 0, 0
repos/cpp/bitcoin/src/crypto/hmac_sha512.cpp,"CHMAC_SHA512::Finalize( unsigned char hash [ OUTPUT_SIZE ])",6, 61, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Ch( uint32_t x , uint32_t y , uint32_t z)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Maj( uint32_t x , uint32_t y , uint32_t z)",1, 92, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Sigma0( uint32_t x)",1, 110, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Sigma1( uint32_t x)",1, 109, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::sigma0( uint32_t x)",1, 99, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::sigma1( uint32_t x)",1, 101, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Round( uint32_t a , uint32_t b , uint32_t c , uint32_t & d , uint32_t e , uint32_t f , uint32_t g , uint32_t & h , uint32_t k)",7, 128, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Initialize( uint32_t * s)",11, 36, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::Transform( uint32_t * s , const unsigned char * chunk , size_t blocks)",85, 97, 8, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"sha256::TransformD64( unsigned char * out , const unsigned char * in)",250, 99, 4, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"TransformD64Wrapper( unsigned char * out , const unsigned char * in)",37, 70, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"SelfTest()",84, 122, 8, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"cpuid( uint32_t leaf , uint32_t subleaf , uint32_t & a , uint32_t & b , uint32_t & c , uint32_t & d)",8, 103, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"AVXEnabled()",6, 51, 4, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"SHA256AutoDetect()",67, 89, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"CSHA256::CSHA256()",4, 30, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"CSHA256::Write( const unsigned char * data , size_t len)",25, 63, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"CSHA256::Finalize( unsigned char hash [ OUTPUT_SIZE ])",16, 56, 0, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"CSHA256::Reset()",6, 27, 4, 0
repos/cpp/bitcoin/src/crypto/sha256.cpp,"SHA256D64( unsigned char * out , const unsigned char * in , size_t blocks)",33, 75, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse4.cpp,"sha256_sse4::Transform( uint32_t * s , const unsigned char * chunk , size_t blocks)",942, 203, 8, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::K( uint32_t x)",1, 59, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Add( __m128i x , __m128i y)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Add( __m128i x , __m128i y , __m128i z)",1, 82, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Add( __m128i x , __m128i y , __m128i z , __m128i w)",1, 101, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Add( __m128i x , __m128i y , __m128i z , __m128i w , __m128i v)",1, 115, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Inc( __m128i & x , __m128i y)",1, 71, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Inc( __m128i & x , __m128i y , __m128i z)",1, 85, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Inc( __m128i & x , __m128i y , __m128i z , __m128i w)",1, 99, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Xor( __m128i x , __m128i y)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Xor( __m128i x , __m128i y , __m128i z)",1, 82, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Or( __m128i x , __m128i y)",1, 71, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::And( __m128i x , __m128i y)",1, 73, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::ShR( __m128i x , int n)",1, 70, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::ShL( __m128i x , int n)",1, 70, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Ch( __m128i x , __m128i y , __m128i z)",1, 89, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Maj( __m128i x , __m128i y , __m128i z)",1, 96, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Sigma0( __m128i x)",1, 132, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Sigma1( __m128i x)",1, 131, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::sigma0( __m128i x)",1, 115, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::sigma1( __m128i x)",1, 117, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Round( __m128i a , __m128i b , __m128i c , __m128i & d , __m128i e , __m128i f , __m128i g , __m128i & h , __m128i k)",7, 150, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Read4( const unsigned char * chunk , int offset)",9, 105, 4, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Write4( unsigned char * out , int offset , __m128i v)",7, 100, 4, 0
repos/cpp/bitcoin/src/crypto/sha256_sse41.cpp,"sha256d64_sse41::Transform_4way( unsigned char * out , const unsigned char * in)",250, 109, 4, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"rotl32( uint32_t v , int c)",1, 98, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::SetKey( const unsigned char * k , size_t keylen)",27, 61, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::ChaCha20()",4, 37, 4, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::ChaCha20( const unsigned char * k , size_t keylen)",4, 58, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::SetIV( uint64_t iv)",5, 34, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::Seek( uint64_t pos)",5, 34, 0, 0
repos/cpp/bitcoin/src/crypto/chacha20.cpp,"ChaCha20::Output( unsigned char * c , size_t bytes)",107, 83, 4, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f1( uint32_t x , uint32_t y , uint32_t z)",1, 77, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f2( uint32_t x , uint32_t y , uint32_t z)",1, 86, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f3( uint32_t x , uint32_t y , uint32_t z)",1, 80, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f4( uint32_t x , uint32_t y , uint32_t z)",1, 86, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::f5( uint32_t x , uint32_t y , uint32_t z)",1, 80, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::Initialize( uint32_t * s)",8, 36, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::rol( uint32_t x , int i)",1, 78, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::Round( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t f , uint32_t x , uint32_t k , int r)",5, 123, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R11( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 145, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R21( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R31( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R41( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R51( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R12( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R22( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R32( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R42( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 156, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::R52( uint32_t & a , uint32_t b , uint32_t & c , uint32_t d , uint32_t e , uint32_t x , int r)",1, 145, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"ripemd160::Transform( uint32_t * s , const unsigned char * chunk)",181, 125, 4, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"CRIPEMD160::CRIPEMD160()",4, 36, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"CRIPEMD160::Write( const unsigned char * data , size_t len)",25, 69, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"CRIPEMD160::Finalize( unsigned char hash [ OUTPUT_SIZE ])",13, 59, 0, 0
repos/cpp/bitcoin/src/crypto/ripemd160.cpp,"CRIPEMD160::Reset()",6, 32, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"QuadRound( __m128i & state0 , __m128i & state1 , uint64_t k1 , uint64_t k0)",6, 114, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"QuadRound( __m128i & state0 , __m128i & state1 , __m128i m , uint64_t k1 , uint64_t k0)",6, 125, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"ShiftMessageA( __m128i & m0 , __m128i m1)",4, 83, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"ShiftMessageC( __m128i & m0 , __m128i m1 , __m128i & m2)",4, 96, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"ShiftMessageB( __m128i & m0 , __m128i m1 , __m128i & m2)",5, 95, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"Shuffle( __m128i & s0 , __m128i & s1)",7, 77, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"Unshuffle( __m128i & s0 , __m128i & s1)",7, 79, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"Load( const unsigned char * in)",4, 77, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"Save( unsigned char * out , __m128i s)",4, 80, 0, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"sha256_shani::Transform( uint32_t * s , const unsigned char * chunk , size_t blocks)",62, 77, 8, 0
repos/cpp/bitcoin/src/crypto/sha256_shani.cpp,"sha256d64_shani::Transform_2way( unsigned char * out , const unsigned char * in)",209, 76, 4, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Encrypt::AES128Encrypt( const unsigned char key [ 16 ])",4, 58, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Encrypt::~AES128Encrypt()",4, 34, 4, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Encrypt::Encrypt( unsigned char ciphertext [ 16 ] , const unsigned char plaintext [ 16 ]) const",4, 99, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Decrypt::AES128Decrypt( const unsigned char key [ 16 ])",4, 58, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Decrypt::~AES128Decrypt()",4, 34, 4, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128Decrypt::Decrypt( unsigned char plaintext [ 16 ] , const unsigned char ciphertext [ 16 ]) const",4, 99, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Encrypt::AES256Encrypt( const unsigned char key [ 32 ])",4, 58, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Encrypt::~AES256Encrypt()",4, 34, 4, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Encrypt::Encrypt( unsigned char ciphertext [ 16 ] , const unsigned char plaintext [ 16 ]) const",4, 99, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Decrypt::AES256Decrypt( const unsigned char key [ 32 ])",4, 58, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Decrypt::~AES256Decrypt()",4, 34, 4, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256Decrypt::Decrypt( unsigned char plaintext [ 16 ] , const unsigned char ciphertext [ 16 ]) const",4, 99, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"CBCEncrypt( const T & enc , const unsigned char iv [ AES_BLOCKSIZE ] , const unsigned char * data , int size , bool pad , unsigned char * out)",34, 142, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"CBCDecrypt( const T & dec , const unsigned char iv [ AES_BLOCKSIZE ] , const unsigned char * data , int size , bool pad , unsigned char * out)",39, 142, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCEncrypt::AES256CBCEncrypt( const unsigned char key [ AES256_KEYSIZE ] , const unsigned char ivIn [ AES_BLOCKSIZE ] , bool padIn)",5, 129, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCEncrypt::Encrypt( const unsigned char * data , int size , unsigned char * out) const",4, 93, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCEncrypt::~AES256CBCEncrypt()",4, 38, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCDecrypt::AES256CBCDecrypt( const unsigned char key [ AES256_KEYSIZE ] , const unsigned char ivIn [ AES_BLOCKSIZE ] , bool padIn)",5, 129, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCDecrypt::Decrypt( const unsigned char * data , int size , unsigned char * out) const",4, 93, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES256CBCDecrypt::~AES256CBCDecrypt()",4, 38, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCEncrypt::AES128CBCEncrypt( const unsigned char key [ AES128_KEYSIZE ] , const unsigned char ivIn [ AES_BLOCKSIZE ] , bool padIn)",5, 129, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCEncrypt::~AES128CBCEncrypt()",4, 38, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCEncrypt::Encrypt( const unsigned char * data , int size , unsigned char * out) const",4, 93, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCDecrypt::AES128CBCDecrypt( const unsigned char key [ AES128_KEYSIZE ] , const unsigned char ivIn [ AES_BLOCKSIZE ] , bool padIn)",5, 129, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCDecrypt::~AES128CBCDecrypt()",4, 38, 0, 0
repos/cpp/bitcoin/src/crypto/aes.cpp,"AES128CBCDecrypt::Decrypt( const unsigned char * data , int size , unsigned char * out) const",4, 93, 0, 0
repos/cpp/bitcoin/src/compat/glibc_compat.cpp,"memcpy( void * a , const void * b , size_t c)",4, 58, 0, 0
repos/cpp/bitcoin/src/compat/glibc_compat.cpp,"__fdelt_warn( FDELT_TYPE a)",6, 49, 0, 0
repos/cpp/bitcoin/src/compat/glibc_compat.cpp,"__wrap___divmoddi4( int64_t u , int64_t v , int64_t * rp)",23, 73, 0, 0
repos/cpp/bitcoin/src/compat/glibc_compat.cpp,"__wrap_log2f( float x)",4, 39, 0, 0
repos/cpp/bitcoin/src/compat/glibc_sanity.cpp,"memcpy_int( void * a , const void * b , size_t c)",4, 51, 0, 0
repos/cpp/bitcoin/src/compat/glibc_sanity.cpp,"sanity_test_memcpy()",15, 65, 4, 0
repos/cpp/bitcoin/src/compat/glibc_sanity.cpp,"sanity_test_fdelt()",7, 30, 4, 0
repos/cpp/bitcoin/src/compat/glibc_sanity.cpp,"glibc_sanity_test()",8, 39, 4, 0
repos/cpp/bitcoin/src/compat/strnlen.cpp,"strnlen( const char * start , size_t max_len)",6, 66, 4, 0
repos/cpp/bitcoin/src/compat/glibcxx_sanity.cpp,"sanity_test_widen( char testchar)",5, 84, 4, 0
repos/cpp/bitcoin/src/compat/glibcxx_sanity.cpp,"sanity_test_list( unsigned int size)",16, 45, 4, 0
repos/cpp/bitcoin/src/compat/glibcxx_sanity.cpp,"sanity_test_range_fmt()",11, 41, 4, 0
repos/cpp/bitcoin/src/compat/glibcxx_sanity.cpp,"glibcxx_sanity_test()",4, 87, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestTime( int nHeight)",1, 76, 0, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::BeginTime( const Consensus :: Params & params) const",1, 98, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::EndTime( const Consensus :: Params & params) const",1, 96, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::Period( const Consensus :: Params & params) const",1, 80, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::Threshold( const Consensus :: Params & params) const",1, 82, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::Condition( const CBlockIndex * pindex , const Consensus :: Params & params) const",1, 133, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::GetStateFor( const CBlockIndex * pindexPrev) const",1, 159, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestConditionChecker::GetStateSinceHeightFor( const CBlockIndex * pindexPrev) const",1, 170, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"TestAlwaysActiveConditionChecker::BeginTime( const Consensus :: Params & params) const",1, 123, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::VersionBitsTester()",1, 36, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::Reset()",11, 68, 12, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::~VersionBitsTester()",3, 27, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::Mine( unsigned int height , int32_t nTime , int32_t nVersion)",12, 84, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestStateSinceHeight( int height)",10, 192, 16, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestDefined()",10, 192, 16, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestStarted()",10, 192, 16, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestLockedIn()",10, 192, 16, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestActive()",10, 192, 16, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::TestFailed()",10, 192, 16, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"VersionBitsTester::Tip()",1, 78, 4, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"BOOST_AUTO_TEST_CASE( versionbits_test)",87, 157, 27, 0
repos/cpp/bitcoin/src/test/versionbits_tests.cpp,"BOOST_AUTO_TEST_CASE( versionbits_computeblockversion)",103, 119, 8, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"verify( const CScriptNum10 & bignum , const CScriptNum & scriptnum)",4, 91, 4, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckCreateVch( const int64_t & num)",14, 54, 4, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckCreateInt( const int64_t & num)",9, 132, 4, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckAdd( const int64_t & num1 , const int64_t & num2)",21, 93, 4, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckNegate( const int64_t & num)",9, 52, 4, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckSubtract( const int64_t & num1 , const int64_t & num2)",24, 87, 4, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"CheckCompare( const int64_t & num1 , const int64_t & num2)",35, 70, 4, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"RunCreate( const int64_t & num)",11, 69, 4, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"RunOperators( const int64_t & num1 , const int64_t & num2)",7, 67, 0, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"BOOST_AUTO_TEST_CASE( creation)",12, 73, 8, 0
repos/cpp/bitcoin/src/test/scriptnum_tests.cpp,"BOOST_AUTO_TEST_CASE( operators)",21, 73, 8, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"CConnmanTest::AddNode( CNode & node)",5, 33, 8, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"CConnmanTest::ClearNodes()",8, 37, 8, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"ip( uint32_t i)",6, 61, 4, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( outbound_slow_chain_eviction)",55, 140, 4, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"AddRandomOutboundPeer( std :: vector<CNode*> & vNodes , PeerLogicValidation & peerLogic , CConnmanTest * connman)",13, 153, 4, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( stale_tip_peer_management)",71, 96, 4, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( DoS_banning)",54, 106, 4, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( DoS_banscore)",46, 106, 4, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( DoS_bantime)",36, 106, 4, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"RandomOrphan()",9, 63, 4, 0
repos/cpp/bitcoin/src/test/denialofservice_tests.cpp,"BOOST_AUTO_TEST_CASE( DoS_mapOrphans)",80, 84, 8, 0
repos/cpp/bitcoin/src/test/validation_tests.cpp,"TestBlockSubsidyHalvings( const Consensus :: Params & consensusParams)",16, 115, 4, 0
repos/cpp/bitcoin/src/test/validation_tests.cpp,"TestBlockSubsidyHalvings( int nSubsidyHalvingInterval)",6, 71, 4, 0
repos/cpp/bitcoin/src/test/validation_tests.cpp,"BOOST_AUTO_TEST_CASE( block_subsidy_test)",7, 73, 4, 0
repos/cpp/bitcoin/src/test/validation_tests.cpp,"BOOST_AUTO_TEST_CASE( subsidy_limit_test)",12, 82, 8, 0
repos/cpp/bitcoin/src/test/validation_tests.cpp,"ReturnFalse()",1, 44, 0, 0
repos/cpp/bitcoin/src/test/validation_tests.cpp,"ReturnTrue()",1, 42, 0, 0
repos/cpp/bitcoin/src/test/validation_tests.cpp,"BOOST_AUTO_TEST_CASE( test_combiner_all)",13, 56, 4, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"ResetArgs( const std :: string & strArg)",17, 79, 4, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"SetupArgs( const std :: vector<std::string> & args)",7, 64, 8, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( boolarg)",52, 62, 4, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( stringarg)",24, 65, 4, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( intarg)",19, 53, 4, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( doubledash)",10, 62, 4, 0
repos/cpp/bitcoin/src/test/getarg_tests.cpp,"BOOST_AUTO_TEST_CASE( boolargno)",23, 53, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FakeCheck::operator ( )()",4, 22, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FakeCheck::swap( FakeCheck & x)",1, 31, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FakeCheckCheckCompletion::operator ( )()",5, 57, 8, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FakeCheckCheckCompletion::swap( FakeCheckCheckCompletion & x)",1, 46, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FailingCheck::FailingCheck( bool _fails)",1, 49, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FailingCheck::FailingCheck()",1, 36, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FailingCheck::operator ( )()",4, 23, 8, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FailingCheck::swap( FailingCheck & x)",4, 35, 8, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"UniqueCheck::UniqueCheck( size_t check_id_in)",1, 63, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"UniqueCheck::UniqueCheck()",1, 35, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"UniqueCheck::operator ( )()",6, 42, 8, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"UniqueCheck::swap( UniqueCheck & x)",1, 68, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::operator ( )()",4, 22, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::MemoryCheck()",1, 21, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::MemoryCheck( const MemoryCheck & x)",8, 80, 8, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::MemoryCheck( bool b_)",4, 71, 8, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::~MemoryCheck()",4, 71, 8, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"MemoryCheck::swap( MemoryCheck & x)",1, 54, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FrozenCleanupCheck::operator ( )()",4, 22, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FrozenCleanupCheck::FrozenCleanupCheck()",1, 28, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FrozenCleanupCheck::~FrozenCleanupCheck()",9, 83, 12, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"FrozenCleanupCheck::swap( FrozenCleanupCheck & x)",1, 82, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"Correct_Queue_range( std :: vector<size_t> range)",27, 116, 12, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Correct_Zero)",6, 51, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Correct_One)",6, 50, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Correct_Max)",6, 50, 0, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Correct_Random)",8, 134, 4, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Catches_Failure)",31, 69, 12, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Recovers_From_Failure)",24, 72, 12, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_UniqueCheck)",29, 62, 8, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_Memory)",28, 84, 20, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueue_FrozenCleanup)",41, 88, 8, 0
repos/cpp/bitcoin/src/test/checkqueue_tests.cpp,"BOOST_AUTO_TEST_CASE( test_CheckQueueControl_Locks)",59, 84, 20, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::CAddrManTest( bool makeDeterministic = true)",7, 64, 12, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::MakeDeterministic()",5, 49, 8, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::Find( const CNetAddr & addr , int * pnId = nullptr)",5, 63, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::Create( const CAddress & addr , const CNetAddr & addrSource , int * pnId = nullptr)",5, 93, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::Delete( int nId)",5, 31, 8, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"CAddrManTest::SimConnFail( CService & addr)",10, 88, 9, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"ResolveIP( const char * ip)",6, 94, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"ResolveIP( std :: string ip)",4, 42, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"ResolveService( const char * ip , int port = 0)",6, 105, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"ResolveService( std :: string ip , int port = 0)",4, 61, 0, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_simple)",48, 78, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_ports)",27, 79, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_select)",58, 93, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_new_collisions)",25, 72, 8, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_tried_collisions)",26, 72, 8, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_find)",32, 79, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_create)",18, 77, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_delete)",19, 77, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_getaddr)",59, 95, 8, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( caddrinfo_get_tried_bucket)",53, 86, 12, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( caddrinfo_get_new_bucket)",64, 131, 44, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_selecttriedcollision)",34, 76, 8, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_noevict)",58, 78, 4, 0
repos/cpp/bitcoin/src/test/addrman_tests.cpp,"BOOST_AUTO_TEST_CASE( addrman_evictionworks)",56, 78, 4, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( bloom_create_insert_serialize)",30, 154, 4, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( bloom_create_insert_serialize_with_tweak)",27, 154, 4, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( bloom_create_insert_key)",23, 99, 4, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_block_1)",40, 134, 4, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_block_3_and_serialize)",38, 501, 4, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"RandomData()",5, 59, 4, 0
repos/cpp/bitcoin/src/test/bloom_tests.cpp,"BOOST_AUTO_TEST_CASE( rolling_bloom)",71, 72, 4, 0
repos/cpp/bitcoin/src/test/torcontrol_tests.cpp,"CheckSplitTorReplyLine( std :: string input , std :: string command , std :: string args)",7, 93, 0, 0
repos/cpp/bitcoin/src/test/torcontrol_tests.cpp,"BOOST_AUTO_TEST_CASE( util_SplitTorReplyLine)",32, 94, 8, 0
repos/cpp/bitcoin/src/test/torcontrol_tests.cpp,"CheckParseTorReplyMapping( std :: string input , std :: map<std::string,std::string> expected)",14, 101, 0, 0
repos/cpp/bitcoin/src/test/torcontrol_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ParseTorReplyMapping)",129, 116, 8, 0
repos/cpp/bitcoin/src/test/descriptor_tests.cpp,"CheckUnparsable( const std :: string & prv , const std :: string & pub)",8, 69, 0, 0
repos/cpp/bitcoin/src/test/descriptor_tests.cpp,"EqualDescriptor( std :: string a , std :: string b)",10, 61, 4, 0
repos/cpp/bitcoin/src/test/descriptor_tests.cpp,"MaybeUseHInsteadOfApostrophy( std :: string ret)",15, 151, 16, 0
repos/cpp/bitcoin/src/test/descriptor_tests.cpp,"Check( const std :: string & prv , const std :: string & pub , int flags , const std :: vector<std::vector<std::string>> & scripts , const std :: set<std::vector<uint32_t>> & paths = ONLY_EMPTY)",105, 183, 0, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"BOOST_AUTO_TEST_CASE( arena_tests)",114, 87, 4, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"TestLockedPageAllocator::TestLockedPageAllocator( int count_in , int lockedcount_in)",1, 111, 4, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"TestLockedPageAllocator::AllocateLocked( size_t len , bool * lockingSuccess)",15, 154, 12, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"TestLockedPageAllocator::FreeLocked( void * addr , size_t len)",3, 53, 4, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"TestLockedPageAllocator::GetLimit()",4, 51, 8, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"BOOST_AUTO_TEST_CASE( lockedpool_tests_mock)",45, 88, 4, 0
repos/cpp/bitcoin/src/test/allocator_tests.cpp,"BOOST_AUTO_TEST_CASE( lockedpool_tests_live)",23, 88, 4, 0
repos/cpp/bitcoin/src/test/txindex_tests.cpp,"BOOST_FIXTURE_TEST_CASE( txindex_initial_sync , TestChain100Setup)",63, 100, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::local_check_equal( A a , B b)",4, 41, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::local_check( bool b)",4, 29, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::test()",35, 95, 13, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::resize( Size s)",7, 50, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::reserve( Size s)",7, 50, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::insert( Size position , const T & value)",5, 67, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::insert( Size position , Size count , const T & value)",5, 74, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::insert_range( Size position , I first , I last)",5, 73, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::erase( Size position)",5, 59, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::erase( Size first , Size last)",5, 84, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::update( Size pos , const T & value)",5, 44, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::push_back( const T & value)",5, 38, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::pop_back()",5, 32, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::clear()",4, 29, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::assign( Size n , const T & value)",4, 42, 4, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::size() const",3, 35, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::capacity() const",3, 38, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::shrink_to_fit()",4, 36, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::swap()",5, 43, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::move()",6, 50, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::copy()",4, 39, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::~prevector_tester()",3, 79, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"prevector_tester::prevector_tester()",5, 51, 8, 0
repos/cpp/bitcoin/src/test/prevector_tests.cpp,"BOOST_AUTO_TEST_CASE( PrevectorTestInt)",69, 108, 16, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"SignatureHashOld( CScript scriptCode , const CTransaction & txTo , unsigned int nIn , int nHashType)",59, 111, 0, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"RandomScript( CScript & script)",7, 128, 4, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"RandomTransaction( CMutableTransaction & tx , bool fSingle)",22, 105, 8, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"BOOST_AUTO_TEST_CASE( sighash_test)",43, 103, 4, 0
repos/cpp/bitcoin/src/test/sighash_tests.cpp,"BOOST_AUTO_TEST_CASE( sighash_from_data)",46, 117, 4, 0
repos/cpp/bitcoin/src/test/key_properties.cpp,"RC_BOOST_PROP( key_uniqueness ,(const CKey&key1,const CKey&key2))",4, 68, 0, 0
repos/cpp/bitcoin/src/test/key_properties.cpp,"RC_BOOST_PROP( key_generates_correct_pubkey ,(const CKey&key))",5, 63, 0, 0
repos/cpp/bitcoin/src/test/key_properties.cpp,"RC_BOOST_PROP( key_set_symmetry ,(const CKey&key))",6, 58, 4, 0
repos/cpp/bitcoin/src/test/key_properties.cpp,"RC_BOOST_PROP( key_sign_symmetry ,(const CKey&key,const uint256&hash))",7, 73, 0, 0
repos/cpp/bitcoin/src/test/arith_uint256_tests.cpp,"arith_uint256V( const std :: vector<unsigned char> & vch)",4, 82, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestVector( const Hasher & h , const In & in , const Out & out)",27, 100, 16, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestSHA1( const std :: string & in , const std :: string & hexout)",1, 117, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestSHA256( const std :: string & in , const std :: string & hexout)",1, 121, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestSHA512( const std :: string & in , const std :: string & hexout)",1, 121, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestRIPEMD160( const std :: string & in , const std :: string & hexout)",1, 127, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestHMACSHA256( const std :: string & hexkey , const std :: string & hexin , const std :: string & hexout)",4, 109, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestHMACSHA512( const std :: string & hexkey , const std :: string & hexin , const std :: string & hexout)",4, 109, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestAES128( const std :: string & hexkey , const std :: string & hexin , const std :: string & hexout)",19, 103, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestAES256( const std :: string & hexkey , const std :: string & hexin , const std :: string & hexout)",18, 103, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestAES128CBC( const std :: string & hexkey , const std :: string & hexiv , bool pad , const std :: string & hexin , const std :: string & hexout)",40, 142, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestAES256CBC( const std :: string & hexkey , const std :: string & hexiv , bool pad , const std :: string & hexin , const std :: string & hexout)",40, 142, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"TestChaCha20( const std :: string & hexkey , uint64_t nonce , uint64_t seek , const std :: string & hexout)",12, 110, 0, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"LongTestString()",11, 41, 8, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( ripemd160_testvectors)",15, 101, 4, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( sha1_testvectors)",15, 91, 4, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( sha256_testvectors)",21, 99, 4, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( sha512_testvectors)",36, 84, 15, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( hmac_sha256_testvectors)",52, 88, 19, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( hmac_sha512_testvectors)",67, 88, 19, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( aes_testvectors)",15, 156, 4, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( aes_cbc_testvectors)",50, 123, 18, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( chacha20_testvector)",29, 121, 17, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( countbits_tests)",21, 77, 16, 0
repos/cpp/bitcoin/src/test/crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( sha256d64)",15, 71, 12, 0
repos/cpp/bitcoin/src/test/sync_tests.cpp,"TestPotentialDeadLockDetected( MutexType & mutex1 , MutexType & mutex2)",18, 73, 0, 0
repos/cpp/bitcoin/src/test/sync_tests.cpp,"BOOST_AUTO_TEST_CASE( potential_deadlock_detected)",17, 53, 4, 0
repos/cpp/bitcoin/src/test/multisig_tests.cpp,"sign_multisig( const CScript & scriptPubKey , const std :: vector<CKey> & keys , const CTransaction & transaction , int whichIn)",15, 120, 0, 0
repos/cpp/bitcoin/src/test/multisig_tests.cpp,"BOOST_AUTO_TEST_CASE( multisig_verify)",99, 178, 16, 0
repos/cpp/bitcoin/src/test/multisig_tests.cpp,"BOOST_AUTO_TEST_CASE( multisig_IsStandard)",35, 197, 4, 0
repos/cpp/bitcoin/src/test/multisig_tests.cpp,"BOOST_AUTO_TEST_CASE( multisig_Sign)",41, 156, 4, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"Serialize( const CScript & s)",5, 64, 4, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"Verify( const CScript & scriptSig , const CScript & scriptPubKey , bool fStrict , ScriptError & err)",17, 185, 4, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( sign)",73, 168, 12, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( norecurse)",26, 79, 4, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( set)",54, 135, 8, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( is)",38, 104, 4, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( switchover)",19, 80, 4, 0
repos/cpp/bitcoin/src/test/script_p2sh_tests.cpp,"BOOST_AUTO_TEST_CASE( AreInputsStandard)",110, 131, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"is_null_key( const std :: vector<unsigned char> & key)",8, 65, 0, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( dbwrapper)",18, 99, 8, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( dbwrapper_batch)",35, 105, 8, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( dbwrapper_iterator)",39, 108, 8, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( existing_data_no_obfuscate)",39, 109, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( existing_data_reindex)",35, 98, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( iterator_ordering)",40, 113, 12, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::StringContentsSerializer()",1, 34, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::StringContentsSerializer( const std :: string & inp)",1, 76, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::operator +=( const std :: string & s)",4, 65, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::operator +=( const StringContentsSerializer & s)",1, 103, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"StringContentsSerializer::SerializationOp( Stream & s , Operation ser_action)",17, 67, 4, 0
repos/cpp/bitcoin/src/test/dbwrapper_tests.cpp,"BOOST_AUTO_TEST_CASE( iterator_string_ordering)",43, 117, 16, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"ParseScriptFlags( std :: string strFlags)",18, 81, 12, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"FormatScriptFlags( unsigned int flags)",15, 83, 4, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( tx_valid)",84, 132, 49, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( tx_invalid)",85, 126, 4, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"SetupDummyInputs( CBasicKeyStore & keystoreRet , CCoinsViewCache & coinsRet)",30, 101, 4, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( test_Get)",25, 99, 4, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"CreateCreditAndSpend( const CKeyStore & keystore , const CScript & outscript , CTransactionRef & output , CMutableTransaction & input , bool success = true)",37, 160, 0, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"CheckWithFlag( const CTransactionRef & output , const CMutableTransaction & input , int flags , bool success)",7, 194, 4, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"PushAll( const std :: vector<valtype> & values)",14, 63, 8, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"ReplaceRedeemScript( CScript & script , const CScript & redeemScript)",8, 98, 4, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( test_big_witness_transaction)",79, 127, 8, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"CombineSignatures( const CMutableTransaction & input1 , const CMutableTransaction & input2 , const CTransactionRef tx)",8, 149, 4, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( test_witness)",173, 133, 4, 0
repos/cpp/bitcoin/src/test/transaction_tests.cpp,"BOOST_AUTO_TEST_CASE( test_IsStandard)",90, 231, 4, 0
repos/cpp/bitcoin/src/test/sanity_tests.cpp,"BOOST_AUTO_TEST_CASE( basic_sanity)",6, 76, 2, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"CAddrManSerializationMock::MakeDeterministic()",5, 49, 8, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"CAddrManUncorrupted::Serialize( CDataStream & s) const",4, 50, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"CAddrManCorrupted::Serialize( CDataStream & s) const",21, 95, 8, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"AddrmanToStream( CAddrManSerializationMock & _addrman)",9, 72, 0, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( cnode_listen_port)",11, 69, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( caddrdb_read)",44, 84, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( caddrdb_read_corrupted)",31, 90, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( cnode_simple_test)",23, 137, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( ipv4_peer_with_ipv6_addrMe_test)",36, 136, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( LimitedAndReachable_Network)",22, 54, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( LimitedAndReachable_NetworkCaseUnroutableAndInternal)",11, 87, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"UtilBuildAddress( unsigned char p1 , unsigned char p2 , unsigned char p3 , unsigned char p4)",9, 98, 0, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( LimitedAndReachable_CNetAddr)",12, 83, 4, 0
repos/cpp/bitcoin/src/test/net_tests.cpp,"BOOST_AUTO_TEST_CASE( LocalAddress_BasicLifecycle)",13, 98, 4, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( get_next_work)",10, 124, 4, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( get_next_work_pow_limit)",10, 124, 4, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( get_next_work_lower_limit_actual)",10, 124, 4, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( get_next_work_upper_limit_actual)",10, 124, 4, 0
repos/cpp/bitcoin/src/test/pow_tests.cpp,"BOOST_AUTO_TEST_CASE( GetBlockProofEquivalentTime_test)",21, 111, 8, 0
repos/cpp/bitcoin/src/test/streams_tests.cpp,"BOOST_AUTO_TEST_CASE( streams_vector_writer)",57, 80, 4, 0
repos/cpp/bitcoin/src/test/streams_tests.cpp,"BOOST_AUTO_TEST_CASE( streams_vector_reader)",44, 78, 4, 0
repos/cpp/bitcoin/src/test/streams_tests.cpp,"BOOST_AUTO_TEST_CASE( bitstream_reader_writer)",34, 88, 4, 0
repos/cpp/bitcoin/src/test/streams_tests.cpp,"BOOST_AUTO_TEST_CASE( streams_serializedata_xor)",54, 67, 12, 0
repos/cpp/bitcoin/src/test/base58_tests.cpp,"BOOST_AUTO_TEST_CASE( base58_EncodeBase58)",18, 156, 4, 0
repos/cpp/bitcoin/src/test/base58_tests.cpp,"BOOST_AUTO_TEST_CASE( base58_DecodeBase58)",27, 156, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_criticalsection)",19, 45, 8, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ParseHex)",20, 157, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_HexStr)",46, 143, 8, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_FormatISO8601DateTime)",4, 82, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_FormatISO8601Date)",4, 68, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::TestArgsManager()",1, 55, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::GetOverrideArgs()",1, 100, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::GetConfigArgs()",1, 96, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::ReadConfigString( const std :: string str_config)",11, 66, 8, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::SetNetworkOnlyArg( const std :: string arg)",5, 50, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestArgsManager::SetupArgs( int argv , const char * args [ ])",6, 66, 12, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ParseParameters)",31, 141, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_GetBoolArg)",33, 73, 8, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_GetBoolArgEdgeCases)",51, 78, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ReadConfigStream)",182, 129, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_GetArg)",37, 77, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_GetChainName)",75, 80, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_FormatMoney)",24, 74, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_ParseMoney)",52, 59, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_IsHex)",14, 72, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_IsHexNumber)",24, 80, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_seed_insecure_rand)",24, 71, 8, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( util_TimingResistantEqual)",10, 80, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( strprintf_numbers)",20, 83, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( gettime)",4, 51, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_IsDigit)",14, 48, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseInt32)",28, 110, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseInt64)",29, 97, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseUInt32)",30, 77, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseUInt64)",31, 90, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseDouble)",27, 71, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_FormatParagraph)",26, 393, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_FormatSubVersion)",11, 183, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ParseFixedPoint)",64, 72, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestOtherThread( fs :: path dirname , std :: string lockname , bool * result)",4, 82, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"TestOtherProcess( fs :: path dirname , std :: string lockname , int fd)",26, 77, 0, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_LockDirectory)",87, 100, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_DirIsWritable)",15, 60, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ToLower)",21, 51, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_ToUpper)",9, 48, 4, 0
repos/cpp/bitcoin/src/test/util_tests.cpp,"BOOST_AUTO_TEST_CASE( test_Capitalize)",6, 67, 4, 0
repos/cpp/bitcoin/src/test/compress_tests.cpp,"TestEncode( uint64_t in)",3, 55, 4, 0
repos/cpp/bitcoin/src/test/compress_tests.cpp,"TestDecode( uint64_t in)",3, 55, 4, 0
repos/cpp/bitcoin/src/test/compress_tests.cpp,"TestPair( uint64_t dec , uint64_t enc)",4, 51, 0, 0
repos/cpp/bitcoin/src/test/compress_tests.cpp,"BOOST_AUTO_TEST_CASE( compress_amounts)",24, 56, 4, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"Serialize( const CScript & s)",5, 64, 4, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"BOOST_AUTO_TEST_CASE( GetSigOpCount)",37, 90, 4, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"VerifyWithFlag( const CTransaction & output , const CMutableTransaction & input , int flags)",9, 192, 4, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"BuildTxs( CMutableTransaction & spendingTx , CCoinsViewCache & coins , CMutableTransaction & creationTx , const CScript & scriptPubKey , const CScript & scriptSig , const CScriptWitness & witness)",22, 197, 0, 0
repos/cpp/bitcoin/src/test/sigopcount_tests.cpp,"BOOST_AUTO_TEST_CASE( GetTxSigOpCost)",123, 132, 8, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"ArrayToString( const unsigned char A [ ] , unsigned int width)",10, 78, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"uint160S( const char * str)",6, 41, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"uint160S( const std :: string & str)",6, 48, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( basics)",51, 69, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( comparison)",31, 50, 8, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( methods)",93, 120, 0, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( conversion)",15, 69, 4, 0
repos/cpp/bitcoin/src/test/uint256_tests.cpp,"BOOST_AUTO_TEST_CASE( operator_with_self)",12, 54, 4, 0
repos/cpp/bitcoin/src/test/key_tests.cpp,"BOOST_AUTO_TEST_CASE( key_test1)",121, 181, 4, 0
repos/cpp/bitcoin/src/test/key_tests.cpp,"BOOST_AUTO_TEST_CASE( key_signature_tests)",35, 117, 4, 0
repos/cpp/bitcoin/src/test/txvalidationcache_tests.cpp,"ToMemPool( const CMutableTransaction & tx)",8, 106, 30, 0
repos/cpp/bitcoin/src/test/txvalidationcache_tests.cpp,"BOOST_FIXTURE_TEST_CASE( tx_mempool_block_doublespend , TestChain100Setup)",57, 100, 8, 0
repos/cpp/bitcoin/src/test/txvalidationcache_tests.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",38, 144, 0, 0
repos/cpp/bitcoin/src/test/txvalidationcache_tests.cpp,"BOOST_FIXTURE_TEST_CASE( checkinputs_test , TestChain100Setup)",225, 174, 8, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"TestVector::TestVector( std :: string strHexMasterIn)",1, 86, 4, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"TestVector::operator ( )( std :: string pub , std :: string prv , unsigned int nChild)",8, 84, 4, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"RunTest( const TestVector & test)",49, 106, 8, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip32_test1)",3, 36, 0, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip32_test2)",3, 36, 0, 0
repos/cpp/bitcoin/src/test/bip32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip32_test3)",3, 36, 0, 0
repos/cpp/bitcoin/src/test/blockfilter_tests.cpp,"BOOST_AUTO_TEST_CASE( gcsfilter_test)",22, 64, 4, 0
repos/cpp/bitcoin/src/test/blockfilter_tests.cpp,"BOOST_AUTO_TEST_CASE( gcsfilter_default_constructor)",12, 58, 4, 0
repos/cpp/bitcoin/src/test/blockfilter_tests.cpp,"BOOST_AUTO_TEST_CASE( blockfilter_basic_test)",67, 119, 4, 0
repos/cpp/bitcoin/src/test/blockfilter_tests.cpp,"BOOST_AUTO_TEST_CASE( blockfilters_json_test)",53, 103, 8, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"CallRPC( std :: string args)",20, 77, 8, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_rawparams)",34, 414, 4, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_togglenetwork)",21, 74, 4, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_rawsign)",22, 175, 6, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_createraw_op_return)",14, 330, 4, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_format_monetary_values)",34, 90, 4, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"ValueFromString( const std :: string & str)",6, 56, 0, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_parse_monetary_values)",32, 189, 4, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( json_parse_errors)",20, 149, 4, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_ban)",82, 130, 4, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_convert_values_generatetoaddress)",22, 124, 4, 0
repos/cpp/bitcoin/src/test/rpc_tests.cpp,"BOOST_AUTO_TEST_CASE( rpc_getblockstats_calculate_percentiles_by_weight)",77, 86, 4, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_Solver_success)",93, 100, 4, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_Solver_failure)",55, 88, 4, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_ExtractDestination)",68, 120, 4, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_ExtractDestinations)",65, 100, 4, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_GetScriptFor_)",71, 112, 4, 0
repos/cpp/bitcoin/src/test/script_standard_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_IsMine)",359, 99, 8, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"operator < <( std :: ostream & os , const uint256 & num)",5, 63, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"BasicTestingSetup::BasicTestingSetup( const std :: string & chainName)",16, 145, 4, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"BasicTestingSetup::~BasicTestingSetup()",5, 40, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"BasicTestingSetup::SetDataDir( const std :: string & name)",7, 64, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestingSetup::TestingSetup( const std :: string & chainName)",35, 106, 8, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestingSetup::~TestingSetup()",13, 60, 4, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestChain100Setup::TestChain100Setup()",12, 95, 4, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestChain100Setup::CreateAndProcessBlock( const std :: vector<CMutableTransaction> & txns , const CScript & scriptPubKey)",25, 116, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestChain100Setup::~TestChain100Setup()",3, 40, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestMemPoolEntryHelper::FromTx( const CMutableTransaction & tx)",3, 80, 0, 0
repos/cpp/bitcoin/src/test/test_bitcoin.cpp,"TestMemPoolEntryHelper::FromTx( const CTransactionRef & tx)",5, 74, 0, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( osrandom_tests)",4, 39, 4, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( fastrandom_tests)",43, 107, 8, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( fastrandom_randbits)",14, 64, 12, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( stdrandom_test)",21, 79, 12, 0
repos/cpp/bitcoin/src/test/random_tests.cpp,"BOOST_AUTO_TEST_CASE( shuffle_stat_test)",28, 132, 8, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolRemoveTest)",91, 97, 4, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pool . cs)",9, 115, 4, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolIndexingTest)",172, 163, 4, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolAncestorIndexingTest)",127, 74, 8, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolSizeLimitTest)",153, 141, 4, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"make_tx( std :: vector<CAmount> && output_values , std :: vector<CTransactionRef> && inputs = std :: vector<CTransactionRef>() , std :: vector<uint32_t> && input_indices = std :: vector<uint32_t>())",15, 202, 0, 0
repos/cpp/bitcoin/src/test/mempool_tests.cpp,"BOOST_AUTO_TEST_CASE( MempoolAncestryTests)",158, 144, 8, 0
repos/cpp/bitcoin/src/test/raii_event_tests.cpp,"tag_malloc( size_t sz)",7, 37, 0, 0
repos/cpp/bitcoin/src/test/raii_event_tests.cpp,"tag_free( void * mem)",5, 34, 0, 0
repos/cpp/bitcoin/src/test/raii_event_tests.cpp,"BOOST_AUTO_TEST_CASE( raii_event_creation)",28, 72, 8, 0
repos/cpp/bitcoin/src/test/raii_event_tests.cpp,"BOOST_AUTO_TEST_CASE( raii_event_order)",21, 72, 8, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"DoubleEquals( double a , double b , double epsilon)",4, 61, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"CreateBlockIndexWithNbits( uint32_t nbits)",8, 62, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"RejectDifficultyMismatch( double difficulty , double expected_difficulty)",6, 86, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"TestDifficulty( uint32_t nbits , double expected_difficulty)",8, 71, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_very_low_target)",4, 57, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_low_target)",4, 52, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_mid_target)",4, 52, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_high_target)",4, 53, 0, 0
repos/cpp/bitcoin/src/test/blockchain_tests.cpp,"BOOST_AUTO_TEST_CASE( get_difficulty_for_very_high_target)",4, 61, 4, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"ComputeMerkleRootFromBranch( const uint256 & leaf , const std :: vector<uint256> & vMerkleBranch , uint32_t nIndex)",12, 126, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"MerkleComputation( const std :: vector<uint256> & leaves , uint256 * proot , bool * pmutated , uint32_t branchpos , std :: vector<uint256> * pbranch)",86, 151, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"ComputeMerkleBranch( const std :: vector<uint256> & leaves , uint32_t position)",5, 105, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"BlockMerkleBranch( const CBlock & block , uint32_t position)",9, 86, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"BlockBuildMerkleTree( const CBlock & block , bool * fMutated , std :: vector<uint256> & vMerkleTree)",27, 108, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"BlockGetMerkleBranch( const CBlock & block , const std :: vector<uint256> & vMerkleTree , int nIndex)",13, 123, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"ctz( uint32_t i)",9, 36, 0, 0
repos/cpp/bitcoin/src/test/merkle_tests.cpp,"BOOST_AUTO_TEST_CASE( merkle_test)",68, 123, 12, 0
repos/cpp/bitcoin/src/test/timedata_tests.cpp,"BOOST_AUTO_TEST_CASE( util_MedianFilter)",24, 44, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"read_json( const std :: string & jsondata)",11, 43, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"FormatScriptError( ScriptError_t err)",8, 101, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"ParseScriptError( const std :: string & name)",8, 79, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BuildCreditingTransaction( const CScript & scriptPubKey , int nValue = 0)",15, 91, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BuildSpendingTransaction( const CScript & scriptSig , const CScriptWitness & scriptWitness , const CTransaction & txCredit)",17, 138, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"DoTest( const CScript & scriptPubKey , const CScript & scriptSig , const CScriptWitness & scriptWitness , int flags , const std :: string & message , int scriptError , CAmount nValue = 0)",39, 257, 12, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"NegateSignatureS( std :: vector<unsigned char> & vchSig)",39, 131, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"KeyData::KeyData()",20, 79, 8, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::DoPush()",7, 46, 12, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::DoPush( const std :: vector<unsigned char> & data)",6, 56, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::TestBuilder( const CScript & script_ , const std :: string & comment_ , int flags_ , bool P2SH = false , WitnessMode wm = WitnessMode :: NONE , int witnessversion = 0 , CAmount nValue_ = 0)",21, 295, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::ScriptError( ScriptError_t err)",5, 48, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Add( const CScript & _script)",6, 45, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Num( int num)",6, 41, 8, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Push( const std :: string & hex)",5, 46, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Push( const CScript & _script)",4, 77, 9, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::PushSig( const CKey & key , int nHashType = SIGHASH_ALL , unsigned int lenR = 32 , unsigned int lenS = 32 , SigVersion sigversion = SigVersion :: BASE , CAmount amount = 0)",17, 181, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::PushWitSig( const CKey & key , CAmount amount = - 1 , int nHashType = SIGHASH_ALL , unsigned int lenR = 32 , unsigned int lenS = 32 , SigVersion sigversion = SigVersion :: WITNESS_V0)",6, 191, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Push( const CPubKey & pubkey)",5, 74, 8, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::PushRedeem()",5, 86, 8, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::PushWitRedeem()",5, 80, 8, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::EditPush( unsigned int pos , const std :: string & hexin , const std :: string & hexout)",11, 132, 8, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::DamagePush( unsigned int pos)",7, 46, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::Test()",8, 126, 8, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::AsWit()",7, 45, 8, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::GetJSON()",19, 72, 12, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"TestBuilder::GetComment() const",4, 35, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"JSONPrettyPrint( const UniValue & univalue)",11, 97, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_build)",476, 271, 32, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_json_test)",42, 132, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_PushData)",41, 169, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_cltv_truncated)",9, 146, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"sign_multisig( const CScript & scriptPubKey , const std :: vector<CKey> & keys , const CTransaction & transaction)",23, 107, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"sign_multisig( const CScript & scriptPubKey , const CKey & key , const CTransaction & transaction)",6, 93, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_CHECKMULTISIG12)",29, 154, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_CHECKMULTISIG23)",68, 158, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"CombineSignatures( const CTxOut & txout , const CMutableTransaction & tx , const SignatureData & scriptSig1 , const SignatureData & scriptSig2)",8, 150, 0, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_combineSigs)",113, 114, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_standard_push)",20, 184, 8, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_IsPushOnly_on_invalid_scripts)",10, 80, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_GetScriptAsm)",29, 170, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"ScriptFromHex( const char * hex)",5, 53, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_FindAndDelete)",108, 81, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_HasValidOps)",13, 99, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( script_can_append_self)",16, 164, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_returns_true)",21, 171, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_tx_index_err)",21, 171, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_tx_size)",21, 175, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_tx_serialization)",21, 171, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_amount_required_err)",21, 171, 4, 0
repos/cpp/bitcoin/src/test/script_tests.cpp,"BOOST_AUTO_TEST_CASE( bitcoinconsensus_verify_script_invalid_flags)",21, 171, 4, 0
repos/cpp/bitcoin/src/test/hash_tests.cpp,"BOOST_AUTO_TEST_CASE( murmurhash3)",32, 95, 0, 0
repos/cpp/bitcoin/src/test/hash_tests.cpp,"BOOST_AUTO_TEST_CASE( siphash)",69, 186, 4, 0
repos/cpp/bitcoin/src/test/policyestimator_tests.cpp,"BOOST_AUTO_TEST_CASE( BlockPolicyEstimates)",165, 126, 8, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"HasReason::HasReason( const std :: string & reason)",1, 72, 4, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"HasReason::operator ( )( const std :: runtime_error & e) const",3, 74, 8, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"AssemblerForTest( const CChainParams & params)",7, 69, 0, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"CreateBlockIndex( int nHeight)",7, 49, 0, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",5, 99, 0, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main , :: mempool . cs)",101, 188, 0, 0
repos/cpp/bitcoin/src/test/miner_tests.cpp,"BOOST_AUTO_TEST_CASE( CreateNewBlock_validity)",318, 222, 4, 0
repos/cpp/bitcoin/src/test/fs_tests.cpp,"BOOST_AUTO_TEST_CASE( fsbridge_fstream)",43, 86, 8, 0
repos/cpp/bitcoin/src/test/pmt_tests.cpp,"CPartialMerkleTreeTester::Damage()",5, 58, 8, 0
repos/cpp/bitcoin/src/test/pmt_tests.cpp,"BOOST_AUTO_TEST_CASE( pmt_test1)",77, 106, 12, 0
repos/cpp/bitcoin/src/test/pmt_tests.cpp,"BOOST_AUTO_TEST_CASE( pmt_malleability)",16, 115, 4, 0
repos/cpp/bitcoin/src/test/scheduler_tests.cpp,"microTask( CScheduler & s , boost :: mutex & mutex , int & counter , int delta , boost :: chrono :: system_clock :: time_point rescheduleTime)",12, 139, 0, 0
repos/cpp/bitcoin/src/test/scheduler_tests.cpp,"MicroSleep( uint64_t n)",11, 67, 4, 0
repos/cpp/bitcoin/src/test/scheduler_tests.cpp,"BOOST_AUTO_TEST_CASE( manythreads)",73, 120, 8, 0
repos/cpp/bitcoin/src/test/scheduler_tests.cpp,"BOOST_AUTO_TEST_CASE( singlethreadedscheduler_ordered)",43, 88, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"RegtestingSetup::RegtestingSetup()",1, 67, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"TestSubscriber::TestSubscriber( uint256 tip)",1, 66, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"TestSubscriber::UpdatedBlockTip( const CBlockIndex * pindexNew , const CBlockIndex * pindexFork , bool fInitialDownload)",4, 118, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"TestSubscriber::BlockConnected( const std :: shared_ptr<const CBlock> & block , const CBlockIndex * pindex , const std :: vector<CTransactionRef> & txnConflicted)",7, 155, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"TestSubscriber::BlockDisconnected( const std :: shared_ptr<const CBlock> & block)",6, 80, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"Block( const uint256 & prev_hash)",20, 70, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"FinalizeBlock( std :: shared_ptr<CBlock> pblock)",10, 91, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"GoodBlock( const uint256 & prev_hash)",4, 72, 0, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"BadBlock( const uint256 & prev_hash)",14, 96, 4, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"BuildChain( const uint256 & root , int height , const unsigned int invalid_rate , const unsigned int branch_rate , const unsigned int max_size , std :: vector<std::shared_ptr<const CBlock>> & blocks)",18, 195, 0, 0
repos/cpp/bitcoin/src/test/validation_block_tests.cpp,"BOOST_AUTO_TEST_CASE( processnewblock_signals_ordering)",64, 148, 4, 0
repos/cpp/bitcoin/src/test/amount_tests.cpp,"BOOST_AUTO_TEST_CASE( MoneyRangeTest)",8, 66, 4, 0
repos/cpp/bitcoin/src/test/amount_tests.cpp,"BOOST_AUTO_TEST_CASE( GetFeeTest)",66, 96, 4, 0
repos/cpp/bitcoin/src/test/amount_tests.cpp,"BOOST_AUTO_TEST_CASE( BinaryOperatorTest)",16, 41, 0, 0
repos/cpp/bitcoin/src/test/amount_tests.cpp,"BOOST_AUTO_TEST_CASE( ToStringTest)",6, 64, 4, 0
repos/cpp/bitcoin/src/test/base64_tests.cpp,"BOOST_AUTO_TEST_CASE( base64_testvectors)",12, 101, 4, 0
repos/cpp/bitcoin/src/test/bech32_tests.cpp,"CaseInsensitiveEqual( const std :: string & s1 , const std :: string & s2)",12, 79, 0, 0
repos/cpp/bitcoin/src/test/bech32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip173_testvectors_valid)",19, 102, 8, 0
repos/cpp/bitcoin/src/test/bech32_tests.cpp,"BOOST_AUTO_TEST_CASE( bip173_testvectors_invalid)",23, 103, 8, 0
repos/cpp/bitcoin/src/test/skiplist_tests.cpp,"BOOST_AUTO_TEST_CASE( skiplist_test)",28, 85, 8, 0
repos/cpp/bitcoin/src/test/skiplist_tests.cpp,"BOOST_AUTO_TEST_CASE( getlocator_test)",55, 147, 8, 0
repos/cpp/bitcoin/src/test/skiplist_tests.cpp,"BOOST_AUTO_TEST_CASE( findearliestatleast_test)",43, 97, 12, 0
repos/cpp/bitcoin/src/test/skiplist_tests.cpp,"BOOST_AUTO_TEST_CASE( findearliestatleast_edge_test)",32, 118, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"operator ==( const Coin & a , const Coin & b)",7, 49, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewTest::GetCoin( const COutPoint & outpoint , Coin & coin) const",13, 81, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewTest::GetBestBlock() const",1, 69, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewTest::BatchWrite( CCoinsMap & mapCoins , const uint256 & hashBlock)",17, 90, 16, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewCacheTest::CCoinsViewCacheTest( CCoinsView * _base)",1, 80, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewCacheTest::SelfTest() const",12, 83, 8, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewCacheTest::map() const",1, 50, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CCoinsViewCacheTest::usage() const",1, 55, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( coins_cache_simulation_test)",146, 146, 12, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"FindRandomFrom( const std :: set<COutPoint> & utxoSet)",10, 75, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( updatecoins_simulation_test)",198, 127, 12, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_serialization)",51, 157, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"SetCoinsValue( CAmount value , Coin & coin)",11, 53, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"InsertCoinsMapEntry( CCoinsMap & map , CAmount value , char flags)",14, 77, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"GetCoinsMapEntry( const CCoinsMap & map , CAmount & value , char & flags)",16, 73, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"WriteCoinsViewEntry( CCoinsView & view , CAmount value , char flags)",6, 70, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"SingleEntryCacheTest::SingleEntryCacheTest( CAmount base_value , CAmount cache_value , char cache_flags)",5, 88, 8, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckAccessCoin( CAmount base_value , CAmount cache_value , CAmount expected_value , char cache_flags , char expected_flags)",12, 132, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_access)",37, 81, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckSpendCoins( CAmount base_value , CAmount cache_value , CAmount expected_value , char cache_flags , char expected_flags)",12, 132, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_spend)",37, 80, 4, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckAddCoinBase( CAmount base_value , CAmount cache_value , CAmount modify_value , CAmount expected_value , char cache_flags , char expected_flags , bool coinbase)",20, 170, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckAddCoin( Args && ... args)",5, 67, 8, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_add)",29, 87, 5, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"CheckWriteCoins( CAmount parent_value , CAmount child_value , CAmount expected_value , char parent_flags , char child_flags , char expected_flags)",18, 146, 0, 0
repos/cpp/bitcoin/src/test/coins_tests.cpp,"BOOST_AUTO_TEST_CASE( ccoins_write)",65, 119, 20, 0
repos/cpp/bitcoin/src/test/flatfile_tests.cpp,"BOOST_AUTO_TEST_CASE( flatfile_filename)",12, 74, 4, 0
repos/cpp/bitcoin/src/test/flatfile_tests.cpp,"BOOST_AUTO_TEST_CASE( flatfile_open)",60, 102, 22, 0
repos/cpp/bitcoin/src/test/flatfile_tests.cpp,"BOOST_AUTO_TEST_CASE( flatfile_allocate)",19, 79, 4, 0
repos/cpp/bitcoin/src/test/flatfile_tests.cpp,"BOOST_AUTO_TEST_CASE( flatfile_flush)",16, 76, 4, 0
repos/cpp/bitcoin/src/test/txvalidation_tests.cpp,"BOOST_FIXTURE_TEST_CASE( tx_mempool_reject_coinbase , TestChain100Setup)",39, 94, 4, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( test_cuckoocache_no_fakes)",13, 61, 8, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"test_cache( size_t megabytes , double load)",29, 81, 4, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"normalize_hit_rate( double hits , double load)",4, 59, 0, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( cuckoocache_hit_rate_ok)",12, 102, 8, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"test_cache_erase( size_t megabytes)",55, 106, 4, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( cuckoocache_erase_ok)",5, 84, 4, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"test_cache_erase_parallel( size_t megabytes)",82, 106, 4, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( cuckoocache_erase_parallel_ok)",5, 93, 4, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"test_cache_generations()",89, 101, 4, 0
repos/cpp/bitcoin/src/test/cuckoocache_tests.cpp,"BOOST_AUTO_TEST_CASE( cuckoocache_generations)",4, 81, 4, 0
repos/cpp/bitcoin/src/test/reverselock_tests.cpp,"BOOST_AUTO_TEST_CASE( reverselock_basics)",12, 69, 8, 0
repos/cpp/bitcoin/src/test/reverselock_tests.cpp,"BOOST_AUTO_TEST_CASE( reverselock_errors)",34, 77, 4, 0
repos/cpp/bitcoin/src/test/limitedmap_tests.cpp,"BOOST_AUTO_TEST_CASE( limitedmap_test)",87, 68, 8, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"RegtestingSetup::RegtestingSetup()",1, 67, 4, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BuildBlockTestCase()",31, 101, 4, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( SimpleRoundTripTest)",55, 133, 12, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"TestHeaderAndShortIDs::TestHeaderAndShortIDs( const CBlockHeaderAndShortTxIDs & orig)",5, 76, 4, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"TestHeaderAndShortIDs::TestHeaderAndShortIDs( const CBlock & block)",2, 73, 8, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"TestHeaderAndShortIDs::GetShortID( const uint256 & txhash) const",7, 59, 8, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"TestHeaderAndShortIDs::SerializationOp( Stream & s , Operation ser_action)",15, 67, 4, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( NonCoinbasePreforwardRTTest)",69, 170, 8, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( SufficientPreforwardRTTest)",50, 158, 8, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( EmptyBlockRoundTripTest)",43, 106, 8, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( TransactionsRequestSerializationTest)",22, 77, 4, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( TransactionsRequestDeserializationMaxTest)",14, 66, 0, 0
repos/cpp/bitcoin/src/test/blockencodings_tests.cpp,"BOOST_AUTO_TEST_CASE( TransactionsRequestDeserializationOverflowTest)",29, 101, 8, 0
repos/cpp/bitcoin/src/test/merkleblock_tests.cpp,"BOOST_AUTO_TEST_CASE( merkleblock_construct_from_txids_found)",35, 113, 4, 0
repos/cpp/bitcoin/src/test/merkleblock_tests.cpp,"BOOST_AUTO_TEST_CASE( merkleblock_construct_from_txids_not_found)",18, 113, 4, 0
repos/cpp/bitcoin/src/test/bswap_tests.cpp,"BOOST_AUTO_TEST_CASE( bswap_tests)",13, 51, 0, 1
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"CSerializeMethodsTestSingle::CSerializeMethodsTestSingle( int intvalin , bool boolvalin , std :: string stringvalin , const char * charstrvalin , const CTransactionRef & txvalin)",4, 235, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"CSerializeMethodsTestSingle::SerializationOp( Stream & s , Operation ser_action)",7, 67, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"CSerializeMethodsTestSingle::operator ==( const CSerializeMethodsTestSingle & rhs)",8, 61, 16, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"CSerializeMethodsTestMany::SerializationOp( Stream & s , Operation ser_action)",3, 67, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( sizes)",30, 75, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( floats_conversion)",18, 78, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( doubles_conversion)",18, 86, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( floats)",16, 125, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( doubles)",16, 125, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( varints)",31, 82, 8, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( varints_bitpatterns)",20, 137, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( compactsize)",18, 83, 8, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"isCanonicalException( const std :: ios_base :: failure & ex)",10, 81, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( noncanonical)",36, 94, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( insert_delete)",47, 51, 4, 0
repos/cpp/bitcoin/src/test/serialize_tests.cpp,"BOOST_AUTO_TEST_CASE( class_methods)",26, 96, 4, 0
repos/cpp/bitcoin/src/test/base32_tests.cpp,"BOOST_AUTO_TEST_CASE( base32_testvectors)",12, 121, 4, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"ResolveIP( const char * ip)",6, 42, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"ResolveSubNet( const char * subnet)",6, 49, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"CreateInternal( const char * host)",6, 49, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_networks)",10, 101, 4, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_properties)",27, 88, 4, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"TestSplitHost( std :: string test , std :: string host , int port)",7, 72, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_splithost)",18, 87, 4, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"TestParse( std :: string src , std :: string canon)",5, 58, 0, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_lookupnumeric)",15, 94, 4, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( onioncat_test)",12, 110, 4, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( subnet_test)",146, 101, 4, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_getgroup)",20, 167, 4, 0
repos/cpp/bitcoin/src/test/netbase_tests.cpp,"BOOST_AUTO_TEST_CASE( netbase_parsenetwork)",17, 65, 4, 0
repos/cpp/bitcoin/src/test/key_io_tests.cpp,"BOOST_AUTO_TEST_CASE( key_io_valid_parse)",59, 165, 12, 0
repos/cpp/bitcoin/src/test/key_io_tests.cpp,"BOOST_AUTO_TEST_CASE( key_io_valid_gen)",35, 132, 4, 0
repos/cpp/bitcoin/src/test/key_io_tests.cpp,"BOOST_AUTO_TEST_CASE( key_io_invalid)",26, 160, 4, 0
repos/cpp/bitcoin/src/test/gen/crypto_gen.cpp,"MultisigKeys()",6, 106, 4, 0
repos/cpp/bitcoin/src/test/fuzz/script_flags.cpp,"test_one_input( std :: vector<uint8_t> buffer)",51, 164, 12, 0
repos/cpp/bitcoin/src/test/fuzz/script_flags.cpp,"IsValidFlagCombination( unsigned flags)",6, 113, 4, 0
repos/cpp/bitcoin/src/test/fuzz/deserialize.cpp,"test_one_input( std :: vector<uint8_t> buffer)",139, 90, 12, 0
repos/cpp/bitcoin/src/test/fuzz/fuzz.cpp,"read_stdin( std :: vector<uint8_t> & data)",11, 62, 4, 0
repos/cpp/bitcoin/src/test/fuzz/fuzz.cpp,"initialize()",4, 69, 4, 0
repos/cpp/bitcoin/src/test/fuzz/fuzz.cpp,"LLVMFuzzerTestOneInput( const uint8_t * data , size_t size)",5, 72, 0, 0
repos/cpp/bitcoin/src/test/fuzz/fuzz.cpp,"LLVMFuzzerInitialize( int * argc , char ** * argv)",5, 61, 0, 0
repos/cpp/bitcoin/src/test/fuzz/fuzz.cpp,"main( int argc , char ** argv)",28, 80, 4, 0
repos/cpp/bitcoin/src/util/bip32.cpp,"ParseHDKeypath( const std :: string & keypath_str , std :: vector<uint32_t> & keypath)",40, 106, 12, 0
repos/cpp/bitcoin/src/util/bip32.cpp,"FormatHDKeypath( const std :: vector<uint32_t> & path)",9, 63, 0, 0
repos/cpp/bitcoin/src/util/bip32.cpp,"WriteHDKeypath( const std :: vector<uint32_t> & keypath)",4, 65, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"SanitizeString( const std :: string & str , int rule)",10, 64, 8, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"HexDigit( char c)",4, 46, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"IsHex( const std :: string & str)",9, 76, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"IsHexNumber( const std :: string & str)",12, 76, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseHex( const char * psz)",20, 53, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseHex( const std :: string & str)",4, 60, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"SplitHostPort( std :: string in , int & portOut , std :: string & hostOut)",18, 149, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"EncodeBase64( const unsigned char * pch , size_t len)",10, 101, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"EncodeBase64( const std :: string & str)",4, 72, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"DecodeBase64( const char * p , bool * pf_invalid)",46, 111, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"DecodeBase64( const std :: string & str , bool * pf_invalid)",5, 79, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"EncodeBase32( const unsigned char * pch , size_t len)",10, 80, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"EncodeBase32( const std :: string & str)",4, 72, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"DecodeBase32( const char * p , bool * pf_invalid)",46, 111, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"DecodeBase32( const std :: string & str , bool * pf_invalid)",5, 79, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParsePrechecks( const std :: string & str)",10, 98, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseInt32( const std :: string & str , int32_t * out)",15, 101, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseInt64( const std :: string & str , int64_t * out)",14, 103, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseUInt32( const std :: string & str , uint32_t * out)",16, 141, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseUInt64( const std :: string & str , uint64_t * out)",15, 142, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseDouble( const std :: string & str , double * out)",13, 92, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"FormatParagraph( const std :: string & in , size_t width , size_t indent)",40, 80, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"i64tostr( int64_t n)",4, 32, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"itostr( int n)",4, 31, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"atoi64( const char * psz)",8, 38, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"atoi64( const std :: string & str)",8, 46, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"atoi( const std :: string & str)",4, 33, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ProcessMantissaDigit( char ch , int64_t & mantissa , int & mantissa_tzeros)",15, 90, 0, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"ParseFixedPoint( const std :: string & val , int decimals , int64_t * amount_out)",91, 93, 8, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"Downcase( std :: string & str)",4, 89, 4, 0
repos/cpp/bitcoin/src/util/strencodings.cpp,"Capitalize( std :: string str)",6, 40, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"LockDirectory( const fs :: path & directory , const std :: string lockfile_name , bool probe_only)",23, 112, 8, 0
repos/cpp/bitcoin/src/util/system.cpp,"UnlockDirectory( const fs :: path & directory , const std :: string & lockfile_name)",5, 82, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ReleaseDirectoryLocks()",5, 53, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"DirIsWritable( const fs :: path & directory)",12, 54, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"CheckDiskSpace( const fs :: path & dir , uint64_t additional_bytes)",7, 70, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"InterpretBool( const std :: string & strValue)",6, 55, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::EXCLUSIVE_LOCKS_REQUIRED( am . cs_args)",4, 125, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::NetworkArg( const ArgsManager & am , const std :: string & arg)",5, 88, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::AddArgs( std :: vector<std::string> & res , const MapArgs & map_args , const std :: string & arg)",7, 111, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::GetArgHelper( const MapArgs & map_args , const std :: string & arg , bool getLast = false)",14, 130, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::GetArg( const ArgsManager & am , const std :: string & arg)",32, 100, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManagerHelper::EXCLUSIVE_LOCKS_REQUIRED( am . cs_args)",12, 125, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"InterpretNegatedOption( std :: string & key , std :: string & val)",23, 98, 12, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ArgsManager()",15, 77, 5, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetUnsuitableSectionOnlyArgs() const",32, 114, 8, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetUnrecognizedSections() const",14, 141, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::SelectConfigNetwork( const std :: string & network)",5, 66, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ParseParameters( int argc , const char * const argv [ ] , std :: string & error)",54, 100, 16, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::IsArgKnown( const std :: string & key) const",16, 89, 8, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetArgs( const std :: string & strArg) const",18, 105, 8, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::IsArgSet( const std :: string & strArg) const",5, 60, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::IsArgNegated( const std :: string & strArg) const",17, 92, 8, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetArg( const std :: string & strArg , const std :: string & strDefault) const",7, 96, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetArg( const std :: string & strArg , int64_t nDefault) const",7, 86, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetBoolArg( const std :: string & strArg , bool fDefault) const",7, 86, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::SoftSetArg( const std :: string & strArg , const std :: string & strValue)",7, 85, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::SoftSetBoolArg( const std :: string & strArg , bool fValue)",7, 73, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ForceSetArg( const std :: string & strArg , const std :: string & strValue)",5, 86, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::AddArg( const std :: string & name , const std :: string & help , const bool debug_only , const OptionsCategory & cat)",13, 128, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::AddHiddenArgs( const std :: vector<std::string> & names)",6, 71, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetHelpMessage() const",68, 96, 16, 0
repos/cpp/bitcoin/src/util/system.cpp,"HelpRequested( const ArgsManager & args)",4, 113, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"SetupHelpOptions( ArgsManager & args)",5, 92, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"HelpMessageGroup( const std :: string & message)",3, 59, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"HelpMessageOpt( const std :: string & option , const std :: string & message)",6, 84, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"FormatException( const std :: exception * pex , const char * pszThread)",15, 123, 12, 0
repos/cpp/bitcoin/src/util/system.cpp,"PrintExceptionContinue( const std :: exception * pex , const char * pszThread)",6, 78, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetDefaultDataDir()",25, 84, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetBlocksDir()",27, 76, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetDataDir( bool fNetSpecific)",31, 76, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"ClearDatadirCache()",8, 51, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetConfigFile( const std :: string & confPath)",4, 59, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"TrimString( const std :: string & str , const std :: string & pattern)",9, 82, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetConfigOptions( std :: istream & stream , const std :: string & filepath , std :: string & error , std :: vector<std::pair<std::string,std::string>> & options , std :: list<SectionInfo> & sections)",44, 193, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ReadConfigStream( std :: istream & stream , const std :: string & filepath , std :: string & error , bool ignore_invalid_keys)",29, 132, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::ReadConfigFiles( std :: string & error , bool ignore_invalid_keys)",80, 141, 16, 0
repos/cpp/bitcoin/src/util/system.cpp,"ArgsManager::GetChainName() const",14, 83, 8, 0
repos/cpp/bitcoin/src/util/system.cpp,"RenameOver( fs :: path src , fs :: path dest)",10, 71, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"TryCreateDirectories( const fs :: path & p)",13, 86, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"FileCommit( FILE * file)",32, 116, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"TruncateFile( FILE * file , unsigned int length)",7, 53, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"RaiseFileDescriptorLimit( int nMinFD)",18, 57, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"AllocateFileRange( FILE * file , unsigned int offset , unsigned int length)",43, 88, 8, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetSpecialFolderPath( int nFolder , bool fCreate)",12, 87, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"runCommand( const std :: string & strCommand)",11, 124, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"RenameThread( const char * name)",15, 79, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"SetupEnvironment()",36, 91, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"SetupNetworking()",11, 92, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetNumCores()",4, 48, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"CopyrightHolders( const std :: string & strPrefix)",10, 118, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"GetStartupTime()",4, 25, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"AbsPathForConfigVal( const fs :: path & path , bool net_specific)",4, 70, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"ScheduleBatchPriority()",13, 80, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"util::WinCmdLineArgs::WinCmdLineArgs()",12, 78, 4, 0
repos/cpp/bitcoin/src/util/system.cpp,"util::WinCmdLineArgs::~WinCmdLineArgs()",4, 34, 0, 0
repos/cpp/bitcoin/src/util/system.cpp,"util::WinCmdLineArgs::get()",4, 45, 0, 0
repos/cpp/bitcoin/src/util/moneystr.cpp,"FormatMoney( const CAmount & n)",20, 74, 4, 0
repos/cpp/bitcoin/src/util/moneystr.cpp,"ParseMoney( const std :: string & str , CAmount & nRet)",4, 55, 0, 0
repos/cpp/bitcoin/src/util/moneystr.cpp,"ParseMoney( const char * pszIn , CAmount & nRet)",39, 63, 4, 0
repos/cpp/bitcoin/src/util/bytevectorhash.cpp,"ByteVectorHash::ByteVectorHash()",5, 73, 4, 0
repos/cpp/bitcoin/src/util/bytevectorhash.cpp,"ByteVectorHash::operator ( )( const std :: vector<unsigned char> & input) const",4, 81, 0, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetTime()",9, 66, 4, 0
repos/cpp/bitcoin/src/util/time.cpp,"SetMockTime( int64_t nMockTimeIn)",4, 61, 4, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetMockTime()",4, 54, 4, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetTimeMillis()",7, 101, 19, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetTimeMicros()",7, 101, 19, 0
repos/cpp/bitcoin/src/util/time.cpp,"GetSystemTimeInSeconds()",4, 36, 4, 0
repos/cpp/bitcoin/src/util/time.cpp,"MilliSleep( int64_t n)",17, 77, 1, 0
repos/cpp/bitcoin/src/util/time.cpp,"FormatISO8601DateTime( int64_t nTime)",10, 136, 4, 0
repos/cpp/bitcoin/src/util/time.cpp,"FormatISO8601Date( int64_t nTime)",10, 86, 4, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::QValidatedLineEdit( QWidget * parent)",7, 91, 4, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::setValid( bool _valid)",17, 47, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::focusInEvent( QFocusEvent * evt)",7, 56, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::focusOutEvent( QFocusEvent * evt)",6, 57, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::markValid()",5, 68, 4, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::clear()",5, 33, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::setEnabled( bool enabled)",15, 65, 8, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::checkValidity()",26, 82, 12, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::setCheckValidator( const QValidator * v)",4, 64, 0, 0
repos/cpp/bitcoin/src/qt/qvalidatedlineedit.cpp,"QValidatedLineEdit::isValid()",13, 78, 8, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::WalletModelTransaction( const QList<SendCoinsRecipient> & _recipients)",5, 95, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getRecipients() const",4, 72, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getWtx()",4, 79, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getTransactionSize()",4, 58, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getTransactionFee() const",4, 58, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::setTransactionFee( const CAmount & newFee)",4, 70, 0, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::reassignAmounts( int nChangePosRet)",34, 100, 4, 0
repos/cpp/bitcoin/src/qt/walletmodeltransaction.cpp,"WalletModelTransaction::getTotalTransactionAmount() const",9, 66, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::ModalOverlay( QWidget * parent)",18, 88, 4, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::~ModalOverlay()",4, 30, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::eventFilter( QObject * obj , QEvent * ev)",15, 65, 12, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::event( QEvent * ev)",12, 57, 8, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::setKnownBestHeight( int count , const QDateTime & blockDate)",8, 77, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::tipUpdate( int count , const QDateTime & blockDate , double nVerificationProgress)",66, 117, 12, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::UpdateHeaderSyncLabel()",4, 199, 4, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::toggleVisibility()",6, 38, 0, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::showHide( bool hide , bool userRequested)",18, 108, 4, 0
repos/cpp/bitcoin/src/qt/modaloverlay.cpp,"ModalOverlay::closeClicked()",5, 34, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::SignVerifyMessageDialog( const PlatformStyle * _platformStyle , QWidget * parent)",32, 105, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::~SignVerifyMessageDialog()",4, 52, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::setModel( WalletModel * _model)",4, 60, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::setAddress_SM( const QString & address)",5, 68, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::setAddress_VM( const QString & address)",5, 68, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::showTab_SM( bool fShow)",6, 53, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::showTab_VM( bool fShow)",6, 53, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_addressBookButton_SM_clicked()",12, 112, 8, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_pasteButton_SM_clicked()",4, 58, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_signMessageButton_SM_clicked()",55, 152, 8, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()",4, 66, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_clearButton_SM_clicked()",9, 58, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_addressBookButton_VM_clicked()",12, 110, 8, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()",48, 157, 8, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::on_clearButton_VM_clicked()",9, 58, 0, 0
repos/cpp/bitcoin/src/qt/signverifymessagedialog.cpp,"SignVerifyMessageDialog::eventFilter( QObject * object , QEvent * event)",24, 87, 4, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"WalletController::WalletController( interfaces :: Node & node , const PlatformStyle * platform_style , OptionsModel * options_model , QObject * parent)",16, 142, 0, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"WalletController::~WalletController()",5, 38, 0, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"WalletController::getWallets() const",5, 63, 0, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"WalletController::getWalletsAvailableToOpen() const",10, 103, 8, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"WalletController::openWallet( const std :: string & name , QWidget * parent)",6, 91, 0, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"WalletController::closeWallet( WalletModel * wallet_model , QWidget * parent)",15, 138, 4, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"WalletController::getOrCreateWallet( std :: unique_ptr<interfaces::Wallet> wallet)",36, 120, 4, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"WalletController::addWallet( WalletModel * wallet_model)",6, 60, 0, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"WalletController::removeAndDeleteWallet( WalletModel * wallet_model)",12, 88, 8, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"OpenWalletActivity::OpenWalletActivity( WalletController * wallet_controller , const std :: string & name)",4, 101, 0, 0
repos/cpp/bitcoin/src/qt/walletcontroller.cpp,"OpenWalletActivity::open()",14, 113, 4, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::OpenURIDialog( QWidget * parent)",7, 49, 4, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::~OpenURIDialog()",4, 32, 0, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::getURI()",4, 32, 0, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::accept()",11, 49, 4, 0
repos/cpp/bitcoin/src/qt/openuridialog.cpp,"OpenURIDialog::on_selectFileButton_clicked()",8, 115, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::BitcoinUnits( QObject * parent)",5, 45, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::availableUnits()",9, 57, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::valid( int unit)",13, 35, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::longName( int unit)",11, 56, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::shortName( int unit)",9, 49, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::description( int unit)",11, 102, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::factor( int unit)",11, 38, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::decimals( int unit)",11, 37, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::format( int unit , const CAmount & nIn , bool fPlus , SeparatorStyle separators)",34, 98, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::formatWithUnit( int unit , const CAmount & amount , bool plussign , SeparatorStyle separators)",4, 112, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::formatHtmlWithUnit( int unit , const CAmount & amount , bool plussign , SeparatorStyle separators)",6, 116, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::parse( int unit , const QString & value , CAmount * val_out)",38, 75, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::getAmountColumnTitle( int unit)",9, 65, 8, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::rowCount( const QModelIndex & parent) const",5, 60, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::data( const QModelIndex & index , int role) const",19, 70, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinunits.cpp,"BitcoinUnits::maxMoney()",4, 33, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::TrafficGraphWidget( QWidget * parent)",14, 78, 4, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::setClientModel( ClientModel * model)",8, 60, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::getGraphRangeMins() const",4, 50, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::paintPath( QPainterPath & path , QQueue<float> & samples)",15, 79, 0, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::paintEvent( QPaintEvent *)",57, 115, 8, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::updateRates()",30, 85, 4, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::setGraphRangeMins( int mins)",9, 62, 4, 0
repos/cpp/bitcoin/src/qt/trafficgraphwidget.cpp,"TrafficGraphWidget::clear()",14, 65, 8, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookSortFilterProxyModel::AddressBookSortFilterProxyModel( const QString & type , QObject * parent)",8, 74, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookSortFilterProxyModel::filterAcceptsRow( int row , const QModelIndex & parent) const",18, 84, 8, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::AddressBookPage( const PlatformStyle * platformStyle , Mode _mode , Tabs _tab , QWidget * parent)",82, 174, 8, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::~AddressBookPage()",4, 36, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::setModel( AddressTableModel * _model)",27, 120, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::on_copyAddress_clicked()",4, 71, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::onCopyLabelAction()",4, 69, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::onEditAction()",20, 79, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::on_newAddress_clicked()",16, 71, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::on_deleteAddress_clicked()",12, 71, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::selectionChanged()",32, 69, 12, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::done( int retval)",22, 97, 4, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::on_exportButton_clicked()",22, 110, 12, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::contextualMenu( const QPoint & point)",8, 58, 0, 0
repos/cpp/bitcoin/src/qt/addressbookpage.cpp,"AddressBookPage::selectNewAddress( const QModelIndex & parent , int begin , int)",11, 106, 4, 0
repos/cpp/bitcoin/src/qt/networkstyle.cpp,"NetworkStyle::NetworkStyle( const QString & _appName , const int iconColorHueShift , const int iconColorSaturationReduction , const char * _titleAddText)",52, 149, 0, 0
repos/cpp/bitcoin/src/qt/networkstyle.cpp,"NetworkStyle::instantiate( const QString & networkId)",15, 72, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::WalletView( const PlatformStyle * _platformStyle , QWidget * parent)",51, 175, 4, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::~WalletView()",3, 26, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::setBitcoinGUI( BitcoinGUI * gui)",25, 118, 8, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::setClientModel( ClientModel * _clientModel)",7, 59, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::setWalletModel( WalletModel * _walletModel)",34, 139, 8, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::processNewTransaction( const QModelIndex & parent , int start , int)",19, 148, 4, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoOverviewPage()",4, 36, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoHistoryPage()",4, 40, 4, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoReceiveCoinsPage()",4, 40, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoSendCoinsPage( QString addr)",7, 49, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoSignMessageTab( QString addr)",11, 105, 4, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::gotoVerifyMessageTab( QString addr)",11, 105, 4, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::handlePaymentRequest( const SendCoinsRecipient & recipient)",4, 75, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::showOutOfSyncWarning( bool fShow)",4, 50, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::updateEncryptionStatus()",4, 42, 0, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::encryptWallet( bool status)",10, 105, 4, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::backupWallet()",18, 122, 8, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::changePassphrase()",6, 68, 4, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::unlockWallet()",12, 68, 8, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::usedSendingAddresses()",7, 53, 4, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::usedReceivingAddresses()",7, 55, 4, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::showProgress( const QString & title , int nProgress)",22, 75, 8, 0
repos/cpp/bitcoin/src/qt/walletview.cpp,"WalletView::requestedSyncWarningInfo()",4, 44, 0, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"SSLVerifyError::SSLVerifyError( std :: string err)",1, 75, 4, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::parse( const QByteArray & data)",21, 142, 8, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::SerializeToString( std :: string * output) const",4, 70, 0, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::IsInitialized() const",4, 47, 0, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::getMerchant( X509_STORE * certStore , QString & merchant) const",141, 156, 12, 0
repos/cpp/bitcoin/src/qt/paymentrequestplus.cpp,"PaymentRequestPlus::getPayTo() const",12, 99, 8, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"MakeSingleColorImage( QImage & img , const QColor & colorbase)",12, 106, 12, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"ColorizeIcon( const QIcon & ico , const QColor & colorbase)",11, 62, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"ColorizeImage( const QString & filename , const QColor & colorbase)",6, 71, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"ColorizeIcon( const QString & filename , const QColor & colorbase)",4, 74, 4, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::PlatformStyle( const QString & _name , bool _imagesOnButtons , bool _colorizeIcons , bool _useExtraSpacing)",24, 125, 8, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::SingleColorImage( const QString & filename) const",6, 70, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::SingleColorIcon( const QString & filename) const",6, 68, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::SingleColorIcon( const QIcon & icon) const",6, 62, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::TextColorIcon( const QString & filename) const",4, 66, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::TextColorIcon( const QIcon & icon) const",4, 60, 0, 0
repos/cpp/bitcoin/src/qt/platformstyle.cpp,"PlatformStyle::instantiate( const QString & platformId)",15, 75, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::ClientModel( interfaces :: Node & node , OptionsModel * _optionsModel , QObject * parent)",18, 97, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::~ClientModel()",4, 34, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getNumConnections( unsigned int flags) const",13, 71, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getHeaderTipHeight() const",14, 72, 8, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getHeaderTipTime() const",12, 54, 8, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateTimer()",7, 89, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateNumConnections( int numConnections)",4, 59, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateNetworkActive( bool networkActive)",4, 58, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateAlert()",4, 50, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getBlockSource() const",11, 53, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getStatusBarWarnings() const",4, 62, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getOptionsModel()",4, 45, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getPeerTableModel()",4, 49, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getBanTableModel()",4, 47, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::formatFullVersion() const",4, 56, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::formatSubVersion() const",4, 50, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::isReleaseVersion() const",4, 43, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::formatClientStartupTime() const",4, 63, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::dataDir() const",4, 54, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::blocksDir() const",4, 56, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::updateBanlist()",4, 34, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ShowProgress( ClientModel * clientmodel , const std :: string & title , int nProgress)",7, 92, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"NotifyNumConnectionsChanged( ClientModel * clientmodel , int newNumConnections)",6, 100, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"NotifyNetworkActiveChanged( ClientModel * clientmodel , bool networkActive)",5, 88, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"NotifyAlertChanged( ClientModel * clientmodel)",5, 81, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"BannedListChanged( ClientModel * clientmodel)",5, 83, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"BlockTipChanged( ClientModel * clientmodel , bool initialSync , int height , int64_t blockTime , double verificationProgress , bool fHeader)",27, 146, 0, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::subscribeToCoreSignals()",11, 196, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::unsubscribeFromCoreSignals()",11, 60, 4, 0
repos/cpp/bitcoin/src/qt/clientmodel.cpp,"ClientModel::getProxyInfo( std :: string & ip_port) const",9, 84, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntry::AddressTableEntry()",1, 27, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntry::AddressTableEntry( Type _type , const QString & _label , const QString & _address)",2, 83, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntryLessThan::operator ( )( const AddressTableEntry & a , const AddressTableEntry & b) const",4, 82, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntryLessThan::operator ( )( const AddressTableEntry & a , const QString & b) const",4, 72, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableEntryLessThan::operator ( )( const QString & a , const AddressTableEntry & b) const",4, 72, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"translateTransactionType( const QString & strPurpose , bool isMine)",12, 96, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::AddressTablePriv( AddressTableModel * _parent)",2, 59, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::refreshAddressTable( interfaces :: Wallet & wallet)",18, 108, 8, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::updateEntry( const QString & address , const QString & label , bool isMine , const QString & purpose , int status)",46, 116, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::size()",4, 42, 8, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTablePriv::index( int idx)",11, 56, 8, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::AddressTableModel( WalletModel * parent)",7, 60, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::~AddressTableModel()",4, 40, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::rowCount( const QModelIndex & parent) const",5, 65, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::columnCount( const QModelIndex & parent) const",5, 68, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::data( const QModelIndex & index , int role) const",46, 87, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::setData( const QModelIndex & index , const QVariant & value , int role)",55, 110, 16, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",11, 97, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::flags( const QModelIndex & index) const",16, 87, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::index( int row , int column , const QModelIndex & parent) const",13, 91, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::updateEntry( const QString & address , const QString & label , bool isMine , const QString & purpose , int status)",6, 79, 8, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::addRow( const QString & type , const QString & label , const QString & address , const OutputType address_type)",56, 132, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::removeRows( int row , int count , const QModelIndex & parent)",13, 89, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::labelForAddress( const QString & address) const",8, 73, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::purposeForAddress( const QString & address) const",8, 75, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::getAddressData( const QString & address , std :: string * name , std :: string * purpose) const",6, 97, 4, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::lookupAddress( const QString & address) const",13, 77, 32, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::GetDefaultAddressType() const",1, 119, 0, 0
repos/cpp/bitcoin/src/qt/addresstablemodel.cpp,"AddressTableModel::emitDataChanged( int idx)",4, 101, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::WalletModel( std :: unique_ptr<interfaces::Wallet> wallet , interfaces :: Node & node , const PlatformStyle * platformStyle , OptionsModel * _optionsModel , QObject * parent)",19, 177, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::~WalletModel()",4, 34, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::updateStatus()",8, 66, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::pollBalanceChanged()",24, 78, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::checkBalanceChanged( const interfaces :: WalletBalances & new_balances)",7, 86, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::updateTransaction()",5, 61, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::updateAddressBook( const QString & address , const QString & label , bool isMine , const QString & purpose , int status)",6, 82, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::updateWatchOnlyFlag( bool fHaveWatchonly)",5, 59, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::validateAddress( const QString & address)",4, 60, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::prepareTransaction( WalletModelTransaction & transaction , const CCoinControl & coinControl)",107, 131, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::sendCoins( WalletModelTransaction & transaction)",70, 161, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getOptionsModel()",4, 45, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getAddressTableModel()",4, 55, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getTransactionTableModel()",4, 63, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getRecentRequestsTableModel()",4, 69, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getEncryptionStatus() const",15, 71, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::setWalletEncrypted( bool encrypted , const SecureString & passphrase)",13, 85, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::setWalletLocked( bool locked , const SecureString & passPhrase)",13, 79, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::changePassphrase( const SecureString & oldPass , const SecureString & newPass)",5, 93, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyUnload( WalletModel * walletModel)",5, 54, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyKeyStoreStatusChanged( WalletModel * walletmodel)",5, 82, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyAddressBookChanged( WalletModel * walletmodel , const CTxDestination & address , const std :: string & label , bool isMine , const std :: string & purpose , ChangeType status)",16, 181, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyTransactionChanged( WalletModel * walletmodel , const uint256 & hash , ChangeType status)",6, 103, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"ShowProgress( WalletModel * walletmodel , const std :: string & title , int nProgress)",7, 92, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyWatchonlyChanged( WalletModel * walletmodel , bool fHaveWatchonly)",5, 88, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"NotifyCanGetAddressesChanged( WalletModel * walletmodel)",4, 70, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::subscribeToCoreSignals()",11, 231, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::unsubscribeFromCoreSignals()",11, 51, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::requestUnlock()",13, 90, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::UnlockContext::UnlockContext( WalletModel * _wallet , bool _valid , bool _relock)",6, 92, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::UnlockContext::~UnlockContext()",7, 45, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::UnlockContext::CopyFrom( const UnlockContext & rhs)",6, 68, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::loadReceiveRequests( std :: vector<std::string> & vReceiveRequests)",4, 82, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::saveReceiveRequest( const std :: string & sAddress , const int64_t nId , const std :: string & sRequest)",13, 114, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::bumpFee( uint256 hash , uint256 & new_hash)",59, 117, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::isWalletEnabled()",4, 71, 3, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::privateKeysDisabled() const",4, 72, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::canGetAddresses() const",4, 42, 0, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getWalletName() const",4, 62, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::getDisplayName() const",5, 65, 4, 0
repos/cpp/bitcoin/src/qt/walletmodel.cpp,"WalletModel::isMultiwallet()",4, 43, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::SendCoinsEntry( const PlatformStyle * _platformStyle , QWidget * parent)",33, 122, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::~SendCoinsEntry()",4, 34, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::on_pasteButton_clicked()",5, 59, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::on_addressBookButton_clicked()",12, 106, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::on_payTo_textChanged( const QString & address)",4, 66, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setModel( WalletModel * _model)",9, 121, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::clear()",22, 69, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::checkSubtractFeeFromAmount()",4, 57, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::deleteClicked()",4, 37, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::useAvailableBalanceClicked()",4, 50, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::validate( interfaces :: Node & node)",40, 86, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::getValue()",17, 105, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setupTabChain( QWidget * prev)",11, 84, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setValue( const SendCoinsRecipient & value)",39, 125, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setAddress( const QString & address)",5, 56, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setAmount( const CAmount & amount)",4, 54, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::isClear()",4, 107, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::setFocus()",4, 32, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::updateDisplayUnit()",10, 86, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsentry.cpp,"SendCoinsEntry::updateLabel( const QString & address)",15, 87, 4, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::Notificator( const QString & _programName , QSystemTrayIcon * _trayIcon , QWidget * _parent)",29, 102, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::~Notificator()",6, 28, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"FreedesktopImage::FreedesktopImage()",1, 26, 4, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"FreedesktopImage::FreedesktopImage( const QImage & img)",23, 74, 4, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"operator < <( QDBusArgument & a , const FreedesktopImage & i)",7, 100, 4, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"operator > >( const QDBusArgument & a , FreedesktopImage & i)",7, 100, 4, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"FreedesktopImage::metaType()",4, 54, 4, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"FreedesktopImage::toVariant( const QImage & img)",5, 58, 4, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::notifyDBus( Class cls , const QString & title , const QString & text , const QIcon & icon , int millisTimeout)",55, 121, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::notifySystray( Class cls , const QString & title , const QString & text , int millisTimeout)",11, 105, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::notifyMacUserNotificationCenter( const QString & title , const QString & text)",5, 93, 0, 0
repos/cpp/bitcoin/src/qt/notificator.cpp,"Notificator::notify( Class cls , const QString & title , const QString & text , const QIcon & icon , int millisTimeout)",26, 117, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BannedNodeLessThan::operator ( )( const CCombinedBan & left , const CCombinedBan & right) const",18, 95, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTablePriv::refreshBanlist( interfaces :: Node & node)",19, 112, 12, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTablePriv::size() const",4, 37, 8, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTablePriv::index( int idx)",7, 52, 8, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::BanTableModel( interfaces :: Node & node , ClientModel * parent)",11, 76, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::~BanTableModel()",4, 32, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::rowCount( const QModelIndex & parent) const",5, 61, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::columnCount( const QModelIndex & parent) const",5, 64, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::data( const QModelIndex & index , int role) const",21, 77, 4, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",11, 93, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::flags( const QModelIndex & index) const",7, 69, 4, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::index( int row , int column , const QModelIndex & parent) const",9, 87, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::refresh()",6, 37, 4, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::sort( int column , Qt :: SortOrder order)",6, 58, 0, 0
repos/cpp/bitcoin/src/qt/bantablemodel.cpp,"BanTableModel::shouldShow()",4, 33, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::ReceiveCoinsDialog( const PlatformStyle * _platformStyle , QWidget * parent)",43, 112, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::setModel( WalletModel * _model)",43, 142, 8, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::~ReceiveCoinsDialog()",4, 42, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::clear()",7, 33, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::reject()",4, 34, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::accept()",4, 34, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::updateDisplayUnit()",7, 83, 8, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::on_receiveButton_clicked()",30, 119, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::on_recentRequestsView_doubleClicked( const QModelIndex & index)",9, 87, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::recentRequestsView_selectionChanged( const QItemSelection & selected , const QItemSelection & deselected)",7, 127, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::on_showRequestButton_clicked()",10, 101, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::on_removeRequestButton_clicked()",11, 113, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::resizeEvent( QResizeEvent * event)",5, 80, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::keyPressEvent( QKeyEvent * event)",15, 97, 8, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::selectedRow()",11, 101, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyColumnToClipboard( int column)",8, 140, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::showMenu( const QPoint & point)",7, 55, 0, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyURI()",11, 92, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyLabel()",4, 60, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyMessage()",4, 62, 4, 0
repos/cpp/bitcoin/src/qt/receivecoinsdialog.cpp,"ReceiveCoinsDialog::copyAmount()",4, 61, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinaddressvalidator.cpp,"BitcoinAddressEntryValidator::BitcoinAddressEntryValidator( QObject * parent)",4, 78, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinaddressvalidator.cpp,"BitcoinAddressEntryValidator::validate( QString & input , int & pos) const",59, 89, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinaddressvalidator.cpp,"BitcoinAddressCheckValidator::BitcoinAddressCheckValidator( QObject * parent)",4, 78, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinaddressvalidator.cpp,"BitcoinAddressCheckValidator::validate( QString & input , int & pos) const",10, 89, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::HelpMessageDialog( interfaces :: Node & node , QWidget * parent , bool about)",85, 114, 4, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::~HelpMessageDialog()",4, 40, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::printToConsole()",5, 95, 4, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::showOrPrint()",10, 93, 4, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"HelpMessageDialog::on_okButton_accepted()",4, 47, 0, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"ShutdownWindow::ShutdownWindow( QWidget * parent , Qt :: WindowFlags f)",9, 78, 8, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"ShutdownWindow::showShutdownWindow( BitcoinGUI * window)",15, 111, 4, 0
repos/cpp/bitcoin/src/qt/utilitydialog.cpp,"ShutdownWindow::closeEvent( QCloseEvent * event)",4, 52, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCExecutor::RPCExecutor( interfaces :: Node & node)",1, 67, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerBase::QtRPCTimerBase( std :: function<void()> & _func , int64_t millis)",7, 66, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerBase::~QtRPCTimerBase()",1, 25, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerInterface::~QtRPCTimerInterface()",1, 30, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerInterface::Name()",1, 40, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"QtRPCTimerInterface::NewTimer( std :: function<void()> & func , int64_t millis)",4, 72, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::RPCParseCommandLine( interfaces :: Node * node , std :: string & strResult , const std :: string & strCommand , const bool fExecute , std :: string * const pstrFilteredOut , const WalletModel * wallet_model)",238, 207, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCExecutor::request( const QString & command , const WalletModel * wallet_model)",55, 124, 12, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::RPCConsole( interfaces :: Node & node , const PlatformStyle * _platformStyle , QWidget * parent)",59, 108, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::~RPCConsole()",8, 67, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::eventFilter( QObject * obj , QEvent * event)",44, 93, 8, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setClientModel( ClientModel * model)",133, 134, 8, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::addWallet( WalletModel * const walletModel)",13, 117, 8, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::removeWallet( WalletModel * const walletModel)",8, 100, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"categoryClass( int category)",10, 64, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::fontBigger()",4, 36, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::fontSmaller()",4, 36, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setFontSize( int newSize)",24, 134, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::clear( bool clearHistory)",50, 221, 24, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::keyPressEvent( QKeyEvent * event)",7, 69, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::message( int category , const QString & message , bool html)",15, 97, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::updateNetworkState()",12, 110, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setNumConnections( int count)",7, 46, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setNetworkActive( bool networkActive)",4, 54, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setNumBlocks( int count , const QDateTime & blockDate , double nVerificationProgress , bool headers)",7, 113, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setMempoolSize( long numberOfTxs , size_t dynUsage)",9, 87, 8, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::on_lineEdit_returnPressed()",58, 118, 16, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::browseHistory( int offset)",20, 66, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::startExecutor()",18, 128, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::on_tabWidget_currentChanged( int index)",6, 59, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::on_openDebugLogfileButton_clicked()",4, 53, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::scrollToEnd()",5, 69, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::on_sldGraphRange_valueChanged( int value)",6, 78, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setTrafficGraphRange( int mins)",5, 71, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::updateTrafficStats( quint64 totalBytesIn , quint64 totalBytesOut)",5, 81, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::peerSelected( const QItemSelection & selected , const QItemSelection & deselected)",11, 120, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::peerLayoutAboutToChange()",10, 112, 8, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::peerLayoutChanged()",56, 110, 12, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::updateNodeDetail( const CNodeCombinedStats * stats)",45, 157, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::resizeEvent( QResizeEvent * event)",4, 50, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::showEvent( QShowEvent * event)",10, 59, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::hideEvent( QHideEvent * event)",10, 59, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::showPeersTableContextMenu( const QPoint & point)",6, 64, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::showBanTableContextMenu( const QPoint & point)",6, 62, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::disconnectSelectedNode()",13, 97, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::banSelectedNode( int bantime)",26, 105, 8, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::unbanSelectedNode()",20, 97, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::clearSelectedNode()",7, 81, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::showOrHideBanTableIfRequired()",9, 66, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::tabFocus() const",4, 53, 4, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::setTabFocus( enum TabTypes tabType)",4, 52, 0, 0
repos/cpp/bitcoin/src/qt/rpcconsole.cpp,"RPCConsole::tabTitle( TabTypes tab_type) const",4, 54, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::BitcoinGUI( interfaces :: Node & node , const PlatformStyle * _platformStyle , const NetworkStyle * networkStyle , QWidget * parent)",140, 308, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::~BitcoinGUI()",17, 90, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createActions()",177, 156, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createMenuBar()",97, 152, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createToolBars()",36, 160, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setClientModel( ClientModel * _clientModel)",65, 136, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setWalletController( WalletController * wallet_controller)",14, 99, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::addWallet( WalletModel * walletModel)",13, 80, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::removeWallet( WalletModel * walletModel)",15, 79, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setCurrentWallet( WalletModel * wallet_model)",12, 88, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setCurrentWalletBySelectorIndex( int index)",5, 90, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::removeAllWallets()",7, 37, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setWalletActionsEnabled( bool enabled)",18, 55, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createTrayIcon()",12, 108, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::createTrayIconMenu()",37, 111, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::trayIconActivated( QSystemTrayIcon :: ActivationReason reason)",8, 77, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::macosDockIconActivated()",5, 42, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::optionsClicked()",4, 55, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::aboutClicked()",8, 47, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showDebugWindow()",5, 39, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showDebugWindowActivateConsole()",5, 54, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showHelpMessageClicked()",4, 42, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::openClicked()",8, 42, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoOverviewPage()",5, 54, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoHistoryPage()",5, 53, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoReceiveCoinsPage()",5, 58, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoSendCoinsPage( QString addr)",5, 59, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoSignMessageTab( QString addr)",4, 60, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::gotoVerifyMessageTab( QString addr)",4, 62, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::updateNetworkState()",28, 141, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setNumConnections( int count)",4, 46, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setNetworkActive( bool networkActive)",4, 54, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::updateHeadersSyncProgressLabel()",8, 156, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::openOptionsDialogWithTab( OptionsDialog :: Tab tab)",10, 66, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setNumBlocks( int count , const QDateTime & blockDate , double nVerificationProgress , bool header)",113, 164, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::message( const QString & title , const QString & message , unsigned int style , bool * ret)",59, 103, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::changeEvent( QEvent * e)",23, 113, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::closeEvent( QCloseEvent * event)",22, 95, 12, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showEvent( QShowEvent * event)",7, 61, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::incomingTransaction( const QString & date , int unit , const CAmount & amount , const QString & type , const QString & address , const QString & label , const QString & walletName)",16, 185, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::dragEnterEvent( QDragEnterEvent * event)",6, 56, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::dropEvent( QDropEvent * event)",11, 58, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::eventFilter( QObject * object , QEvent * event)",11, 114, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::handlePaymentRequest( const SendCoinsRecipient & recipient)",11, 75, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setHDStatus( bool privkeyDisabled , int hdEnabled)",8, 210, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setEncryptionStatus( int status)",28, 147, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::updateWalletStatus()",13, 88, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::updateProxyIcon()",17, 135, 12, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::updateWindowTitle()",16, 77, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showNormalIfMinimized( bool fToggleHidden)",11, 88, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::toggleHidden()",4, 33, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::detectShutdown()",9, 36, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showProgress( const QString & title , int nProgress)",18, 72, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::setTrayIconVisible( bool fHideTrayIcon)",7, 56, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::showModalOverlay()",5, 86, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"ThreadSafeMessageBox( BitcoinGUI * gui , const std :: string & message , const std :: string & caption , unsigned int style)",16, 126, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::subscribeToCoreSignals()",6, 161, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"BitcoinGUI::unsubscribeFromCoreSignals()",6, 46, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::UnitDisplayStatusBarControl( const PlatformStyle * platformStyle)",17, 95, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::mousePressEvent( QMouseEvent * event)",4, 70, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::createContextMenu()",11, 91, 4, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::setOptionsModel( OptionsModel * _optionsModel)",13, 122, 8, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::updateDisplayUnit( int newUnits)",4, 66, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::onDisplayUnitsClicked( const QPoint & point)",5, 77, 0, 0
repos/cpp/bitcoin/src/qt/bitcoingui.cpp,"UnitDisplayStatusBarControl::onMenuSelection( QAction * action)",7, 67, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"getConfTargetForIndex( int index)",9, 58, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"getIndexForConfTarget( int target)",8, 60, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::SendCoinsDialog( const PlatformStyle * _platformStyle , QWidget * parent)",75, 152, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setClientModel( ClientModel * _clientModel)",8, 108, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setModel( WalletModel * _model)",65, 162, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::~SendCoinsDialog()",10, 101, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::on_sendButton_clicked()",176, 123, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::clear()",17, 57, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::reject()",4, 31, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::accept()",4, 31, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::addEntry()",22, 116, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateTabsAndLabels()",5, 44, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::removeEntry( SendCoinsEntry * entry)",12, 65, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setupTabChain( QWidget * prev)",15, 97, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setAddress( const QString & address)",19, 97, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::pasteEntry( const SendCoinsRecipient & rv)",23, 97, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::handlePaymentRequest( const SendCoinsRecipient & rv)",7, 73, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::setBalance( const interfaces :: WalletBalances & balances)",7, 127, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateDisplayUnit()",6, 79, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::processSendCoinsReturn( const WalletModel :: SendCoinsReturn & sendCoinsReturn , const QString & msgArg)",49, 197, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::minimizeFeeSection( bool fMinimize)",9, 84, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::on_buttonChooseFee_clicked()",4, 51, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::on_buttonMinimizeFee_clicked()",5, 53, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::useAvailableBalance( SendCoinsEntry * entry)",24, 93, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateFeeSectionControls()",11, 79, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateFeeMinimizedLabel()",11, 146, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateCoinControlState( CCoinControl & ctrl)",12, 100, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::updateSmartFeeLabel()",31, 136, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardQuantity()",4, 65, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardAmount()",4, 117, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardFee()",4, 135, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardAfterFee()",4, 145, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardBytes()",4, 86, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardLowOutput()",4, 66, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlClipboardChange()",4, 141, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlFeatureChanged( bool checked)",9, 62, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlButtonClicked()",7, 49, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlChangeChecked( int state)",13, 73, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlChangeEdited( const QString & text)",52, 267, 16, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendCoinsDialog::coinControlUpdateLabels()",40, 97, 8, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendConfirmationDialog::SendConfirmationDialog( const QString & title , const QString & text , int _secDelay , QWidget * parent)",9, 121, 4, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendConfirmationDialog::exec()",6, 35, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendConfirmationDialog::countDown()",10, 41, 0, 0
repos/cpp/bitcoin/src/qt/sendcoinsdialog.cpp,"SendConfirmationDialog::updateYesButton()",13, 80, 8, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::RecentRequestsTableModel( WalletModel * parent)",14, 132, 4, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::~RecentRequestsTableModel()",4, 54, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::rowCount( const QModelIndex & parent) const",6, 72, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::columnCount( const QModelIndex & parent) const",6, 75, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::data( const QModelIndex & index , int role) const",46, 155, 16, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::setData( const QModelIndex & index , const QVariant & value , int role)",4, 98, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",11, 104, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::updateAmountColumnTitle()",5, 60, 4, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::getAmountTitle()",4, 178, 4, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::index( int row , int column , const QModelIndex & parent) const",6, 98, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::removeRows( int row , int count , const QModelIndex & parent)",21, 101, 12, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::flags( const QModelIndex & index) const",4, 78, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::addNewRequest( const SendCoinsRecipient & recipient)",15, 98, 4, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::addNewRequest( const std :: string & recipient)",16, 75, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::addNewRequest( RecentRequestEntry & recipient)",6, 76, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::sort( int column , Qt :: SortOrder order)",5, 114, 4, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestsTableModel::updateDisplayUnit()",4, 51, 0, 0
repos/cpp/bitcoin/src/qt/recentrequeststablemodel.cpp,"RecentRequestEntryLessThan::operator ( )( RecentRequestEntry & left , RecentRequestEntry & right) const",21, 103, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"NodeLessThan::operator ( )( const CNodeCombinedStats & left , const CNodeCombinedStats & right) const",26, 101, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTablePriv::refreshPeers( interfaces :: Node & node)",28, 110, 12, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTablePriv::size() const",4, 39, 8, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTablePriv::index( int idx)",7, 54, 8, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::PeerTableModel( interfaces :: Node & node , ClientModel * parent)",17, 117, 4, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::~PeerTableModel()",4, 34, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::startAutoRefresh()",4, 40, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::stopAutoRefresh()",4, 39, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::rowCount( const QModelIndex & parent) const",5, 62, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::columnCount( const QModelIndex & parent) const",5, 65, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::data( const QModelIndex & index , int role) const",37, 117, 12, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",11, 94, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::flags( const QModelIndex & index) const",7, 69, 4, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::index( int row , int column , const QModelIndex & parent) const",9, 88, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::getNodeStats( int idx)",4, 64, 0, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::refresh()",6, 37, 4, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::getRowByNodeId( NodeId nodeid)",8, 73, 4, 0
repos/cpp/bitcoin/src/qt/peertablemodel.cpp,"PeerTableModel::sort( int column , Qt :: SortOrder order)",6, 59, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::TransactionFilterProxy( QObject * parent)",12, 66, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::filterAcceptsRow( int sourceRow , const QModelIndex & sourceParent) const",37, 100, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setDateRange( const QDateTime & from , const QDateTime & to)",6, 86, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setSearchString( const QString & search_string)",6, 75, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setTypeFilter( quint32 modes)",5, 58, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setMinAmount( const CAmount & minimum)",5, 66, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setWatchOnlyFilter( WatchOnlyFilter filter)",5, 72, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setLimit( int limit)",4, 49, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::setShowInactive( bool _showInactive)",5, 65, 0, 0
repos/cpp/bitcoin/src/qt/transactionfilterproxy.cpp,"TransactionFilterProxy::rowCount( const QModelIndex & parent) const",11, 77, 8, 0
repos/cpp/bitcoin/src/qt/transactiondescdialog.cpp,"TransactionDescDialog::TransactionDescDialog( const QModelIndex & idx , QWidget * parent)",9, 102, 4, 0
repos/cpp/bitcoin/src/qt/transactiondescdialog.cpp,"TransactionDescDialog::~TransactionDescDialog()",4, 48, 0, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::TransactionView( const PlatformStyle * platformStyle , QWidget * parent)",173, 160, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::setModel( WalletModel * _model)",56, 158, 20, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::chooseDate( int idx)",46, 84, 16, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::chooseType( int idx)",7, 44, 8, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::chooseWatchonly( int idx)",7, 103, 8, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::changedSearch()",6, 67, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::changedAmount()",13, 113, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::exportClicked()",37, 149, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::contextualMenu( const QPoint & point)",18, 99, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::abandonTx()",17, 91, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::bumpFee()",22, 91, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyAddress()",4, 84, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyLabel()",4, 82, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyAmount()",4, 92, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyTxID()",4, 83, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyTxHex()",4, 82, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::copyTxPlainText()",4, 88, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::editLabel()",45, 95, 8, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::showDetails()",12, 83, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::openThirdPartyTxUrl( QString url)",8, 144, 9, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::createDateRangeWidget()",35, 94, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::dateRangeChanged()",8, 51, 12, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::focusTransaction( const QModelIndex & idx)",9, 71, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::focusTransaction( const uint256 & txid)",25, 85, 8, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::resizeEvent( QResizeEvent * event)",5, 79, 4, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::eventFilter( QObject * obj , QEvent * event)",13, 97, 13, 0
repos/cpp/bitcoin/src/qt/transactionview.cpp,"TransactionView::updateWatchOnlyColumn( bool fHaveWatchOnly)",5, 89, 4, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"ipcServerName()",12, 65, 4, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::ipcParseCommandLine( interfaces :: Node & node , int argc , char * argv [ ])",58, 109, 12, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::ipcSendCommandLine()",32, 72, 8, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::PaymentServer( QObject * parent , bool startLocalServer)",43, 105, 12, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::~PaymentServer()",6, 49, 4, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::eventFilter( QObject * object , QEvent * event)",14, 73, 8, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::uiReady()",13, 50, 4, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::handleURIOrFile( const QString & s)",93, 127, 20, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::handleURIConnection()",19, 106, 4, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::setOptionsModel( OptionsModel * _optionsModel)",4, 65, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"X509StoreDeleter::operator ( )( X509_STORE * b)",3, 39, 6, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"X509Deleter::operator ( )( X509 * b)",1, 49, 6, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"ReportInvalidCertificate( const QSslCertificate & cert)",4, 290, 4, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::LoadRootCAs( X509_STORE * _store)",80, 129, 8, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::initNetManager()",23, 116, 8, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::readPaymentRequestFromFile( const QString & filename , PaymentRequestPlus & request)",17, 101, 0, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::processPaymentRequest( const PaymentRequestPlus & request , SendCoinsRecipient & recipient)",91, 125, 12, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::fetchRequest( const QUrl & url)",9, 82, 4, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::fetchPaymentACK( WalletModel * walletModel , const SendCoinsRecipient & recipient , QByteArray transaction)",51, 207, 8, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::netRequestFinished( QNetworkReply * reply)",61, 94, 12, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::reportSslErrors( QNetworkReply * reply , const QList<QSslError> & errs)",11, 91, 4, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::handlePaymentACK( const QString & paymentACKMsg)",5, 129, 4, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::verifyNetwork( interfaces :: Node & node , const payments :: PaymentDetails & requestDetails)",11, 120, 8, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::verifyExpired( const payments :: PaymentDetails & requestDetails)",11, 121, 8, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::verifySize( qint64 requestSize)",11, 108, 8, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::verifyAmount( const CAmount & requestAmount)",11, 118, 8, 0
repos/cpp/bitcoin/src/qt/paymentserver.cpp,"PaymentServer::getCertStore()",4, 42, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::dateTimeStr( const QDateTime & date)",4, 100, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::dateTimeStr( qint64 nTime)",4, 62, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::fixedPitchFont()",4, 64, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::DummyAddress( const CChainParams & params)",13, 96, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::setupAddressWidget( QValidatedLineEdit * widget , QWidget * parent)",12, 85, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::parseBitcoinURI( const QUrl & uri , SendCoinsRecipient * out)",56, 93, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::parseBitcoinURI( QString uri , SendCoinsRecipient * out)",5, 59, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatBitcoinURI( const SendCoinsRecipient & info)",27, 133, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::isDust( interfaces :: Node & node , const QString & address , const CAmount & amount)",7, 83, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::HtmlEscape( const QString & str , bool fMultiLine)",9, 56, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::HtmlEscape( const std :: string & str , bool fMultiLine)",4, 64, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::copyEntryData( QAbstractItemView * view , int column , int role)",12, 78, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::getEntryData( QAbstractItemView * view , int column)",6, 69, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::getSaveFileName( QWidget * parent , const QString & caption , const QString & dir , const QString & filter , QString * selectedSuffixOut)",45, 126, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::getOpenFileName( QWidget * parent , const QString & caption , const QString & dir , const QString & filter , QString * selectedSuffixOut)",30, 126, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::blockingGUIThreadConnection()",11, 51, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::checkPoint( const QPoint & p , const QWidget * w)",6, 62, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::isObscured( QWidget * w)",8, 68, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::bringToFront( QWidget * w)",20, 103, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::openDebugLogfile()",8, 87, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::openBitcoinConf()",15, 91, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ToolTipToRichTextFilter::ToolTipToRichTextFilter( int _size_threshold , QObject * parent)",6, 89, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ToolTipToRichTextFilter::eventFilter( QObject * obj , QEvent * evt)",17, 107, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::connectViewHeadersSignals()",5, 140, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()",5, 143, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::setViewHeaderResizeMode( int logicalIndex , QHeaderView :: ResizeMode resizeMode)",4, 117, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::resizeColumn( int nColumnIndex , int width)",5, 81, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::getColumnsWidth()",9, 75, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::getAvailableWidthForColumn( int column)",13, 102, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::adjustTableColumnsWidth()",13, 99, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::stretchColumnWidth( int column)",6, 70, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::on_sectionResized( int logicalIndex , int oldSize , int newSize)",9, 101, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::on_geometriesChanged()",9, 100, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer( QTableView * table , int lastColMinimumWidth , int allColsMinimumWidth , QObject * parent)",13, 155, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::StartupShortcutPath()",9, 116, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetStartOnSystemStartup()",5, 46, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::SetStartOnSystemStartup( bool fAutoStart)",53, 160, 12, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetAutostartDir()",8, 69, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetAutostartFilePath()",7, 67, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetStartOnSystemStartup()",18, 59, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::SetStartOnSystemStartup( bool fAutoStart)",32, 167, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::findStartupItemInList( CFArrayRef listSnapshot , LSSharedFileListRef list , CFURLRef findUrl)",34, 115, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetStartOnSystemStartup()",15, 115, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::SetStartOnSystemStartup( bool fAutoStart)",25, 136, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::GetStartOnSystemStartup()",1, 49, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::SetStartOnSystemStartup( bool fAutoStart)",1, 64, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::setClipboard( const QString & str)",5, 68, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::qstringToBoostPath( const QString & path)",4, 49, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::boostPathToQString( const fs :: path & path)",4, 50, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatDurationStr( int secs)",19, 67, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatServicesStr( quint64 mask)",37, 77, 16, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatPingTime( double dPingTime)",4, 188, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatTimeOffset( int64_t nTimeOffset)",4, 82, 2, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatNiceTimeOffset( qint64 secs)",36, 154, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::formatBytes( uint64_t bytes)",11, 74, 4, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::calculateIdealFontSize( int width , const QString & text , QFont font , qreal minPointSize , qreal font_size)",11, 112, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ClickableLabel::mouseReleaseEvent( QMouseEvent * event)",4, 59, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ClickableProgressBar::mouseReleaseEvent( QMouseEvent * event)",4, 65, 0, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::ItemDelegate::eventFilter( QObject * object , QEvent * event)",9, 71, 8, 0
repos/cpp/bitcoin/src/qt/guiutil.cpp,"GUIUtil::PolishProgressDialog( QProgressDialog * dialog)",11, 72, 4, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"TxViewDelegate::TxViewDelegate( const PlatformStyle * _platformStyle , QObject * parent = nullptr)",6, 91, 4, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"TxViewDelegate::paint( QPainter * painter , const QStyleOptionViewItem & option , const QModelIndex & index) const",64, 124, 8, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"TxViewDelegate::sizeHint( const QStyleOptionViewItem & option , const QModelIndex & index) const",4, 94, 4, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::OverviewPage( const PlatformStyle * platformStyle , QWidget * parent)",30, 246, 4, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::handleTransactionClicked( const QModelIndex & index)",5, 70, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::handleOutOfSyncWarningClicks()",4, 50, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::~OverviewPage()",4, 30, 0, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::setBalance( const interfaces :: WalletBalances & balances)",29, 222, 8, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::updateWatchOnlyLabels( bool showWatchOnly)",12, 113, 4, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::setClientModel( ClientModel * model)",10, 88, 8, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::setWalletModel( WalletModel * model)",34, 118, 8, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::updateDisplayUnit()",14, 77, 8, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::updateAlerts( const QString & warnings)",5, 60, 4, 0
repos/cpp/bitcoin/src/qt/overviewpage.cpp,"OverviewPage::showOutOfSyncWarning( bool fShow)",5, 52, 0, 0
repos/cpp/bitcoin/src/qt/winshutdownmonitor.cpp,"WinShutdownMonitor::nativeEventFilter( const QByteArray & eventType , void * pMessage , long * pnResult)",36, 113, 16, 0
repos/cpp/bitcoin/src/qt/winshutdownmonitor.cpp,"WinShutdownMonitor::registerShutdownBlockReason( const QString & strReason , const HWND & mainWinId)",14, 137, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"FreespaceChecker::FreespaceChecker( Intro * _intro)",4, 50, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"FreespaceChecker::check()",44, 132, 16, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::Intro( QWidget * parent , uint64_t blockchain_size , uint64_t chain_state_size)",41, 125, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::~Intro()",7, 57, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::getDataDirectory()",4, 38, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::setDataDirectory( const QString & dataDir)",14, 53, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::getDefaultDataDirectory()",4, 61, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::pickDataDirectory( interfaces :: Node & node)",59, 212, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::setStatus( int status , const QString & message , quint64 bytesAvailable)",31, 99, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::on_dataDirectory_textChanged( const QString & dataDirStr)",6, 68, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::on_ellipsisButton_clicked()",6, 140, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::on_dataDirDefault_clicked()",4, 49, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::on_dataDirCustom_clicked()",5, 42, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::startThread()",13, 77, 4, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::checkPath( const QString & dataDir)",11, 46, 0, 0
repos/cpp/bitcoin/src/qt/intro.cpp,"Intro::getPathToCheck()",9, 59, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CCoinControlWidgetItem::operator <( const QTreeWidgetItem & other) const",6, 149, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::CoinControlDialog( const PlatformStyle * _platformStyle , QWidget * parent)",94, 147, 8, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::~CoinControlDialog()",9, 75, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::setModel( WalletModel * _model)",11, 78, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::buttonBoxClicked( QAbstractButton * button)",5, 75, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::buttonSelectAllClicked()",20, 91, 8, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::showMenu( const QPoint & point)",33, 188, 8, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::copyAmount()",4, 93, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::copyLabel()",7, 122, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::copyAddress()",7, 124, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::copyTransactionHash()",4, 89, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::lockCoin()",11, 165, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::unlockCoin()",8, 165, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardQuantity()",4, 65, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardAmount()",4, 117, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardFee()",4, 135, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardAfterFee()",4, 145, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardBytes()",4, 86, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardLowOutput()",4, 66, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::clipboardChange()",4, 141, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::sortView( int column , Qt :: SortOrder order)",7, 71, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::headerSectionClicked( int logicalIndex)",19, 196, 12, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::radioTreeMode( bool checked)",5, 52, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::radioListMode( bool checked)",5, 52, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::viewItemChanged( QTreeWidgetItem * item , int column)",26, 213, 4, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::updateLabelLocked()",11, 72, 7, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::updateLabels( WalletModel * model , QDialog * dialog)",185, 178, 8, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::coinControl()",5, 47, 0, 0
repos/cpp/bitcoin/src/qt/coincontroldialog.cpp,"CoinControlDialog::updateView()",131, 144, 12, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::AskPassphraseDialog( Mode _mode , QWidget * parent)",57, 186, 12, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::~AskPassphraseDialog()",5, 44, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::setModel( WalletModel * _model)",4, 56, 0, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::accept()",110, 196, 17, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::textChanged()",19, 127, 8, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::event( QEvent * event)",16, 77, 12, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::toggleShowPassword( bool show)",8, 70, 4, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::eventFilter( QObject * object , QEvent * event)",25, 101, 12, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"SecureClearQLineEdit( QLineEdit * edit)",6, 77, 4, 0
repos/cpp/bitcoin/src/qt/askpassphrasedialog.cpp,"AskPassphraseDialog::secureClearPassFields()",6, 50, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"GetLangTerritory()",14, 98, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"initTranslations( QTranslator & qtTranslatorBase , QTranslator & qtTranslator , QTranslator & translatorBase , QTranslator & translator)",36, 141, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"DebugMessageHandler( QtMsgType type , const QMessageLogContext & context , const QString & msg)",9, 96, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinCore::BitcoinCore( interfaces :: Node & node)",4, 51, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinCore::handleRunawayException( const std :: exception * e)",5, 80, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinCore::initialize()",13, 70, 8, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinCore::shutdown()",14, 64, 8, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::BitcoinApplication( interfaces :: Node & node , int & argc , char ** argv)",13, 88, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::setupPlatformStyle()",12, 89, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::~BitcoinApplication()",23, 53, 8, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::createPaymentServer()",4, 47, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::createOptionsModel( bool resetSettings)",4, 69, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::createWindow( const NetworkStyle * networkStyle)",7, 87, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::createSplashScreen( const NetworkStyle * networkStyle)",9, 90, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::baseInitialize()",4, 42, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::startThread()",19, 106, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::parameterSetup()",9, 76, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::requestInitialize()",6, 55, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::requestShutdown()",27, 80, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::initializeResult( bool success)",57, 135, 12, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::shutdownResult()",4, 72, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::handleRunawayException( const QString & message)",5, 181, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"BitcoinApplication::getMainWinId() const",7, 45, 0, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"SetupUIArgs()",13, 188, 4, 0
repos/cpp/bitcoin/src/qt/bitcoin.cpp,"GuiMain( int argc , char * argv [ ])",177, 163, 12, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"CSVModelWriter::CSVModelWriter( const QString & _filename , QObject * parent)",5, 76, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"CSVModelWriter::setModel( const QAbstractItemModel * _model)",4, 64, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"CSVModelWriter::addColumn( const QString & title , int column , int role)",9, 75, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"writeValue( QTextStream & f , const QString & value)",6, 61, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"writeSep( QTextStream & f)",4, 37, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"writeNewline( QTextStream & f)",4, 41, 0, 0
repos/cpp/bitcoin/src/qt/csvmodelwriter.cpp,"CSVModelWriter::write()",43, 86, 12, 0
repos/cpp/bitcoin/src/qt/coincontroltreewidget.cpp,"CoinControlTreeWidget::CoinControlTreeWidget( QWidget * parent)",5, 64, 0, 0
repos/cpp/bitcoin/src/qt/coincontroltreewidget.cpp,"CoinControlTreeWidget::keyPressEvent( QKeyEvent * event)",21, 164, 12, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::showTransaction()",6, 68, 4, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::decomposeTransaction( const interfaces :: WalletTx & wtx)",132, 131, 12, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::updateStatus( const interfaces :: WalletTxStatus & wtx , int numBlocks , int64_t block_time)",70, 117, 4, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::statusUpdateNeeded( int numBlocks) const",4, 69, 4, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::getTxHash() const",4, 52, 4, 0
repos/cpp/bitcoin/src/qt/transactionrecord.cpp,"TransactionRecord::getOutputIndex() const",4, 46, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::OptionsModel( interfaces :: Node & node , QObject * parent , bool resetSettings)",5, 90, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::addOverriddenOption( const std :: string & option)",4, 129, 4, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::Init( bool resetSettings)",120, 154, 4, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"CopySettings( QSettings & dst , const QSettings & src)",6, 63, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"BackupSettings( const fs :: path & filename , const QSettings & src)",7, 89, 4, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::Reset()",24, 73, 4, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::rowCount( const QModelIndex & parent) const",4, 61, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"GetProxySetting( QSettings & settings , const QString & name)",15, 120, 4, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"SetProxySetting( QSettings & settings , const QString & name , const ProxySetting & ip_port)",4, 99, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"GetDefaultProxyAddress()",4, 85, 4, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::data( const QModelIndex & index , int role) const",66, 75, 12, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::setData( const QModelIndex & index , const QVariant & value , int role)",149, 88, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::setDisplayUnit( const QVariant & value)",10, 57, 0, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::getProxySettings( QNetworkProxy & proxy) const",17, 80, 8, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::setRestartRequired( bool fRequired)",5, 61, 4, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::isRestartRequired() const",5, 63, 4, 0
repos/cpp/bitcoin/src/qt/optionsmodel.cpp,"OptionsModel::checkAndMigrate()",30, 133, 8, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::OptionsDialog( QWidget * parent , bool enableWallet)",111, 166, 12, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::~OptionsDialog()",4, 32, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::setModel( OptionsModel * _model)",44, 149, 8, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::setCurrentTab( OptionsDialog :: Tab tab)",9, 77, 4, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::setMapper()",39, 84, 4, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::setOkButtonState( bool fState)",4, 50, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_resetButton_clicked()",17, 135, 12, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_openBitcoinConfButton_clicked()",11, 107, 8, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_okButton_clicked()",6, 42, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_cancelButton_clicked()",4, 46, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::on_hideTrayIcon_stateChanged( int fState)",12, 61, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::togglePruneWarning( bool enabled)",4, 66, 4, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::showRestartWarning( bool fPersistent)",16, 90, 8, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::clearStatusLabel()",7, 47, 4, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::updateProxyValidationState()",16, 177, 4, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"OptionsDialog::updateDefaultProxyNets()",21, 131, 4, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"ProxyAddressValidator::ProxyAddressValidator( QObject * parent)",4, 64, 0, 0
repos/cpp/bitcoin/src/qt/optionsdialog.cpp,"ProxyAddressValidator::validate( QString & input , int & pos) const",11, 87, 4, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::QRImageWidget( QWidget * parent)",11, 84, 4, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::exportImage()",6, 36, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::mousePressEvent( QMouseEvent * event)",15, 56, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::saveImage()",10, 114, 4, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::copyImage()",6, 56, 4, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"QRImageWidget::contextMenuEvent( QContextMenuEvent * event)",6, 63, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::ReceiveRequestDialog( QWidget * parent)",14, 93, 4, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::~ReceiveRequestDialog()",4, 46, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::setModel( WalletModel * _model)",10, 116, 8, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::setInfo( const SendCoinsRecipient & _info)",5, 68, 0, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::update()",78, 146, 8, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::on_btnCopyURI_clicked()",4, 60, 4, 0
repos/cpp/bitcoin/src/qt/receiverequestdialog.cpp,"ReceiveRequestDialog::on_btnCopyAddress_clicked()",4, 55, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::SplashScreen( interfaces :: Node & node , Qt :: WindowFlags f , const NetworkStyle * networkStyle)",103, 128, 4, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::~SplashScreen()",4, 34, 4, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::eventFilter( QObject * obj , QEvent * ev)",9, 61, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::finish()",9, 73, 4, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"InitMessage( SplashScreen * splash , const std :: string & message)",8, 74, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"ShowProgress( SplashScreen * splash , const std :: string & title , int nProgress , bool resume_possible)",7, 110, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::ConnectWallet( std :: unique_ptr<interfaces::Wallet> wallet)",5, 158, 4, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::subscribeToCoreSignals()",9, 157, 4, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::unsubscribeFromCoreSignals()",11, 62, 4, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::showMessage( const QString & message , int alignment , const QColor & color)",7, 91, 0, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::paintEvent( QPaintEvent * event)",8, 51, 4, 0
repos/cpp/bitcoin/src/qt/splashscreen.cpp,"SplashScreen::closeEvent( QCloseEvent * event)",5, 77, 4, 0
repos/cpp/bitcoin/src/qt/transactiondesc.cpp,"TransactionDesc::FormatTxStatus( const interfaces :: WalletTx & wtx , const interfaces :: WalletTxStatus & status , bool inMempool , int numBlocks)",22, 163, 12, 0
repos/cpp/bitcoin/src/qt/transactiondesc.cpp,"TransactionDesc::toHTML( interfaces :: Node & node , interfaces :: Wallet & wallet , TransactionRecord * rec , int unit)",283, 443, 8, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::EditAddressDialog( Mode _mode , QWidget * parent)",32, 99, 4, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::~EditAddressDialog()",4, 40, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::setModel( AddressTableModel * _model)",10, 69, 4, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::loadRow( int row)",4, 41, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::saveCurrentRow()",24, 49, 16, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::accept()",41, 111, 16, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::getDuplicateAddressWarning() const",18, 79, 12, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::getAddress() const",4, 46, 0, 0
repos/cpp/bitcoin/src/qt/editaddressdialog.cpp,"EditAddressDialog::setAddress( const QString & _address)",5, 60, 0, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::QValueComboBox( QWidget * parent)",5, 138, 4, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::value() const",4, 43, 4, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::setValue( const QVariant & value)",4, 53, 0, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::setRole( int _role)",4, 40, 0, 0
repos/cpp/bitcoin/src/qt/qvaluecombobox.cpp,"QValueComboBox::handleSelectionChanged( int idx)",4, 53, 0, 0
repos/cpp/bitcoin/src/qt/main.cpp,"main( int argc , char * argv [ ])",1, 65, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::WalletFrame( const PlatformStyle * _platformStyle , BitcoinGUI * _gui)",16, 82, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::~WalletFrame()",3, 28, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::setClientModel( ClientModel * _clientModel)",4, 60, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::addWallet( WalletModel * walletModel)",29, 108, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::setCurrentWallet( WalletModel * wallet_model)",9, 65, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::removeWallet( WalletModel * wallet_model)",8, 64, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::removeAllWallets()",7, 79, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::handlePaymentRequest( const SendCoinsRecipient & recipient)",8, 76, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::showOutOfSyncWarning( bool fShow)",7, 79, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoOverviewPage()",6, 79, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoHistoryPage()",6, 79, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoReceiveCoinsPage()",6, 79, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoSendCoinsPage( QString addr)",6, 79, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoSignMessageTab( QString addr)",6, 51, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::gotoVerifyMessageTab( QString addr)",6, 53, 0, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::encryptWallet( bool status)",6, 50, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::backupWallet()",6, 50, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::changePassphrase()",6, 50, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::unlockWallet()",6, 50, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::usedSendingAddresses()",6, 50, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::usedReceivingAddresses()",6, 50, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::currentWalletView() const",4, 68, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::currentWalletModel() const",5, 66, 4, 0
repos/cpp/bitcoin/src/qt/walletframe.cpp,"WalletFrame::outOfSyncWarningClicked()",4, 44, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TxLessThan::operator ( )( const TransactionRecord & a , const TransactionRecord & b) const",4, 82, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TxLessThan::operator ( )( const TransactionRecord & a , const uint256 & b) const",4, 72, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TxLessThan::operator ( )( const uint256 & a , const TransactionRecord & b) const",4, 72, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::TransactionTablePriv( TransactionTableModel * _parent)",4, 68, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::refreshWallet( interfaces :: Wallet & wallet)",12, 87, 20, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::updateWallet( interfaces :: Wallet & wallet , const uint256 & hash , int status , bool showTransaction)",79, 134, 8, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::size()",4, 36, 8, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::index( interfaces :: Wallet & wallet , int idx)",23, 118, 12, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::describe( interfaces :: Node & node , interfaces :: Wallet & wallet , TransactionRecord * rec , int unit)",4, 107, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTablePriv::getTxHex( interfaces :: Wallet & wallet , TransactionRecord * rec)",9, 73, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::TransactionTableModel( const PlatformStyle * _platformStyle , WalletModel * parent)",14, 170, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::~TransactionTableModel()",5, 48, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::updateAmountColumnTitle()",5, 108, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::updateTransaction( const QString & hash , int status , bool showTransaction)",7, 101, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::updateConfirmations()",9, 83, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::rowCount( const QModelIndex & parent) const",5, 69, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::columnCount( const QModelIndex & parent) const",5, 72, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxStatus( const TransactionRecord * wtx) const",37, 151, 8, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxDate( const TransactionRecord * wtx) const",8, 80, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::lookupAddress( const std :: string & address , bool tooltip) const",14, 107, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxType( const TransactionRecord * wtx) const",19, 80, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::txAddressDecoration( const TransactionRecord * wtx) const",16, 88, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxToAddress( const TransactionRecord * wtx , bool tooltip) const",23, 105, 8, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::addressColor( const TransactionRecord * wtx) const",20, 116, 8, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTxAmount( const TransactionRecord * wtx , bool showUnconfirmed , BitcoinUnits :: SeparatorStyle separators) const",12, 145, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::txStatusDecoration( const TransactionRecord * wtx) const",35, 87, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::txWatchonlyDecoration( const TransactionRecord * wtx) const",7, 90, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::formatTooltip( const TransactionRecord * rec) const",10, 101, 7, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::data( const QModelIndex & index , int role) const",137, 130, 8, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::headerData( int section , Qt :: Orientation orientation , int role) const",32, 105, 16, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::index( int row , int column , const QModelIndex & parent) const",10, 95, 0, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::updateDisplayUnit()",6, 73, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionNotification::TransactionNotification()",1, 33, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionNotification::TransactionNotification( uint256 _hash , ChangeType _status , bool _showTransaction)",2, 87, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionNotification::invoke( QObject * ttm)",9, 100, 8, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"NotifyTransactionChanged( TransactionTableModel * ttm , const uint256 & hash , ChangeType status)",15, 119, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"ShowProgress( TransactionTableModel * ttm , const std :: string & title , int nProgress)",20, 125, 16, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::subscribeToCoreSignals()",6, 173, 4, 0
repos/cpp/bitcoin/src/qt/transactiontablemodel.cpp,"TransactionTableModel::unsubscribeFromCoreSignals()",6, 57, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::AmountSpinBox( QWidget * parent)",7, 89, 8, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::validate( QString & text , int & pos) const",9, 84, 8, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::fixup( QString & input) const",19, 98, 12, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::value( bool * valid_out = nullptr) const",4, 49, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::setValue( const CAmount & value)",5, 109, 8, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::SetAllowEmpty( bool allow)",4, 35, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::SetMinValue( const CAmount & value)",4, 43, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::SetMaxValue( const CAmount & value)",4, 43, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::stepBy( int steps)",8, 55, 8, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::setDisplayUnit( int unit)",12, 37, 8, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::setSingleStep( const CAmount & step)",4, 44, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::minimumSizeHint() const",32, 135, 12, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::parse( const QString & text , bool * valid_out = nullptr) const",13, 70, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::event( QEvent * event)",14, 146, 16, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"AmountSpinBox::stepEnabled() const",18, 75, 8, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::BitcoinAmountField( QWidget * parent)",29, 131, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::clear()",5, 33, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setEnabled( bool fEnabled)",5, 51, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::validate()",7, 36, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setValid( bool valid)",7, 46, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::eventFilter( QObject * object , QEvent * event)",9, 69, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setupTabChain( QWidget * prev)",6, 58, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::value( bool * valid_out) const",4, 57, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setValue( const CAmount & value)",4, 56, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::SetAllowEmpty( bool allow)",4, 51, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::SetMinValue( const CAmount & value)",4, 59, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::SetMaxValue( const CAmount & value)",4, 59, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setReadOnly( bool fReadOnly)",4, 53, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::unitChanged( int idx)",10, 71, 4, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setDisplayUnit( int newUnit)",4, 53, 0, 0
repos/cpp/bitcoin/src/qt/bitcoinamountfield.cpp,"BitcoinAmountField::setSingleStep( const CAmount & step)",4, 60, 0, 0
repos/cpp/bitcoin/src/qt/test/util.cpp,"ConfirmMessage( QString * text , int msec)",12, 78, 16, 0
repos/cpp/bitcoin/src/qt/test/addressbooktests.cpp,"EditAddressAndSubmit( EditAddressDialog * dialog , const QString & label , const QString & address , QString expected_msg)",13, 77, 4, 0
repos/cpp/bitcoin/src/qt/test/addressbooktests.cpp,"TestAddAddressesToSendBook()",83, 121, 4, 0
repos/cpp/bitcoin/src/qt/test/addressbooktests.cpp,"AddressBookTests::addressBookTests()",15, 124, 8, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"ConfirmSend( QString * text = nullptr , bool cancel = false)",14, 107, 16, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"SendCoins( CWallet & wallet , SendCoinsDialog & sendCoinsDialog , const CTxDestination & address , CAmount amount , bool rbf)",18, 141, 4, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"FindTx( const QAbstractItemModel & model , const uint256 & txid)",12, 76, 8, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"BumpFee( TransactionView & view , const uint256 & txid , bool expectDisabled , std :: string expectError , bool cancel)",24, 116, 0, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"TestGUI()",116, 154, 8, 0
repos/cpp/bitcoin/src/qt/test/wallettests.cpp,"WalletTests::walletTests()",15, 119, 8, 0
repos/cpp/bitcoin/src/qt/test/compattests.cpp,"CompatTests::bswapTests()",13, 48, 0, 1
repos/cpp/bitcoin/src/qt/test/uritests.cpp,"URITests::uriTests()",55, 124, 4, 0
repos/cpp/bitcoin/src/qt/test/test_main.cpp,"main( int argc , char * argv [ ])",67, 137, 4, 0
repos/cpp/bitcoin/src/qt/test/paymentservertests.cpp,"parse_b64der_cert( const char * cert_data)",9, 63, 4, 0
repos/cpp/bitcoin/src/qt/test/paymentservertests.cpp,"handleRequest( PaymentServer * server , std :: vector<unsigned char> & data)",27, 97, 0, 0
repos/cpp/bitcoin/src/qt/test/paymentservertests.cpp,"PaymentServerTests::paymentServerTests()",143, 104, 4, 0
repos/cpp/bitcoin/src/qt/test/paymentservertests.cpp,"RecipientCatcher::getRecipient( const SendCoinsRecipient & r)",4, 65, 0, 0
repos/cpp/bitcoin/src/qt/test/rpcnestedtests.cpp,"rpcNestedTest_rpc( const JSONRPCRequest & request)",7, 65, 0, 0
repos/cpp/bitcoin/src/qt/test/rpcnestedtests.cpp,"RPCNestedTests::rpcNestedTests()",99, 199, 4, 0
repos/cpp/bitcoin/src/qt/test/apptests.cpp,"TestRpcCommand( RPCConsole * console)",14, 119, 4, 0
repos/cpp/bitcoin/src/qt/test/apptests.cpp,"AppTests::appTests()",32, 116, 8, 0
repos/cpp/bitcoin/src/qt/test/apptests.cpp,"AppTests::guiTests( BitcoinGUI * window)",8, 79, 4, 0
repos/cpp/bitcoin/src/qt/test/apptests.cpp,"AppTests::consoleTests( RPCConsole * console)",5, 52, 4, 0
repos/cpp/bitcoin/src/qt/test/apptests.cpp,"AppTests::HandleCallback::~HandleCallback()",10, 47, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"PolyMod( uint64_t c , int val)",11, 40, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorChecksum( const Span<const char> & span)",46, 126, 5, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"AddChecksum( const std :: string & str)",1, 106, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::OriginString() const",4, 122, 8, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::OriginPubkeyProvider( KeyOriginInfo info , std :: unique_ptr<PubkeyProvider> provider)",1, 151, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::GetPubKey( int pos , const SigningProvider & arg , CPubKey * key , KeyOriginInfo & info) const",7, 106, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::IsRange() const",1, 68, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::GetSize() const",1, 70, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::ToString() const",1, 106, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"OriginPubkeyProvider::ToPrivateString( const SigningProvider & arg , std :: string & ret) const",7, 86, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::ConstPubkeyProvider( const CPubKey & pubkey)",1, 69, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::GetPubKey( int pos , const SigningProvider & arg , CPubKey * key , KeyOriginInfo & info) const",8, 106, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::IsRange() const",1, 52, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::GetSize() const",1, 64, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::ToString() const",1, 95, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ConstPubkeyProvider::ToPrivateString( const SigningProvider & arg , std :: string & ret) const",7, 86, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::GetExtKey( const SigningProvider & arg , CExtKey & ret) const",11, 118, 8, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::IsHardened() const",8, 59, 8, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::BIP32PubkeyProvider( const CExtPubKey & extkey , KeyPath path , DeriveType derive)",1, 148, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::IsRange() const",1, 73, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::GetSize() const",1, 51, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::GetPubKey( int pos , const SigningProvider & arg , CPubKey * key , KeyOriginInfo & info) const",30, 106, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::ToString() const",9, 79, 8, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"BIP32PubkeyProvider::ToPrivateString( const SigningProvider & arg , std :: string & out) const",11, 86, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ToStringExtra() const",1, 61, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::DescriptorImpl( std :: vector<std::unique_ptr<PubkeyProvider>> pubkeys , std :: unique_ptr<DescriptorImpl> script , const std :: string & name)",1, 224, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::IsSolvable() const",7, 59, 12, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::IsRange() const",10, 54, 12, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ToStringHelper( const SigningProvider * arg , std :: string & out , bool priv) const",24, 87, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ToString() const",6, 45, 8, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ExpandHelper( int pos , const SigningProvider & arg , Span<const unsigned char> * cache_read , std :: vector<CScript> & output_scripts , FlatSigningProvider & out , std :: vector<unsigned char> * cache_write) const",49, 209, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::Expand( int pos , const SigningProvider & provider , std :: vector<CScript> & output_scripts , FlatSigningProvider & out , std :: vector<unsigned char> * cache = nullptr) const",4, 179, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"DescriptorImpl::ExpandFromCache( int pos , const std :: vector<unsigned char> & cache , std :: vector<CScript> & output_scripts , FlatSigningProvider & out) const",5, 151, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Singleton( T elem)",6, 39, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"AddressDescriptor::ToStringExtra() const",1, 92, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"AddressDescriptor::MakeScripts( const std :: vector<CPubKey> & , const CScript * , FlatSigningProvider &) const",1, 181, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"AddressDescriptor::AddressDescriptor( CTxDestination destination)",1, 125, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"AddressDescriptor::IsSolvable() const",1, 52, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"RawDescriptor::ToStringExtra() const",1, 100, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"RawDescriptor::MakeScripts( const std :: vector<CPubKey> & , const CScript * , FlatSigningProvider &) const",1, 151, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"RawDescriptor::RawDescriptor( CScript script)",1, 98, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"RawDescriptor::IsSolvable() const",1, 52, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"PKDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider &) const",1, 178, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"PKDescriptor::PKDescriptor( std :: unique_ptr<PubkeyProvider> prov)",1, 113, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"PKHDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider & out) const",6, 128, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"PKHDescriptor::PKHDescriptor( std :: unique_ptr<PubkeyProvider> prov)",1, 115, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"WPKHDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider & out) const",6, 128, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"WPKHDescriptor::WPKHDescriptor( std :: unique_ptr<PubkeyProvider> prov)",1, 117, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ComboDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider & out) const",15, 128, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ComboDescriptor::ComboDescriptor( std :: unique_ptr<PubkeyProvider> prov)",1, 119, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"MultisigDescriptor::ToStringExtra() const",1, 88, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"MultisigDescriptor::MakeScripts( const std :: vector<CPubKey> & keys , const CScript * , FlatSigningProvider &) const",1, 187, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"MultisigDescriptor::MultisigDescriptor( int threshold , std :: vector<std::unique_ptr<PubkeyProvider>> providers)",1, 173, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"SHDescriptor::MakeScripts( const std :: vector<CPubKey> & , const CScript * script , FlatSigningProvider &) const",1, 193, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"SHDescriptor::SHDescriptor( std :: unique_ptr<DescriptorImpl> desc)",1, 102, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"WSHDescriptor::MakeScripts( const std :: vector<CPubKey> & , const CScript * script , FlatSigningProvider &) const",1, 203, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"WSHDescriptor::WSHDescriptor( std :: unique_ptr<DescriptorImpl> desc)",1, 104, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Const( const std :: string & str , Span<const char> & sp)",8, 93, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Func( const std :: string & str , Span<const char> & sp)",8, 150, 4, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Expr( Span<const char> & sp)",18, 63, 8, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Split( const Span<const char> & sp , char sep)",15, 74, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ParseKeyPath( const std :: vector<Span<const char>> & split , KeyPath & out)",15, 103, 8, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ParsePubkeyInner( const Span<const char> & sp , bool permit_uncompressed , FlatSigningProvider & out)",36, 137, 12, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ParsePubkey( const Span<const char> & sp , bool permit_uncompressed , FlatSigningProvider & out)",20, 124, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"ParseScript( Span<const char> & sp , ParseScriptContext ctx , FlatSigningProvider & out)",69, 116, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"InferPubkey( const CPubKey & pubkey , ParseScriptContext , const SigningProvider & provider)",9, 120, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"InferScript( const CScript & script , ParseScriptContext ctx , const SigningProvider & provider)",63, 124, 0, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"Parse( const std :: string & descriptor , FlatSigningProvider & out , bool require_checksum)",20, 120, 8, 0
repos/cpp/bitcoin/src/script/descriptor.cpp,"InferDescriptor( const CScript & script , const SigningProvider & provider)",4, 100, 0, 0
repos/cpp/bitcoin/src/script/script_error.cpp,"ScriptErrorString( const ScriptError serror)",94, 103, 12, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"set_success( ScriptError * ret)",6, 42, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"set_error( ScriptError * ret , const ScriptError serror)",6, 66, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CastToBool( const valtype & vch)",14, 53, 12, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"popstack( std :: vector<valtype> & stack)",6, 61, 8, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsCompressedOrUncompressedPubKey( const valtype & vchPubKey)",21, 78, 12, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsCompressedPubKey( const valtype & vchPubKey)",11, 72, 8, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsValidSignatureEncoding( const std :: vector<unsigned char> & sig)",64, 86, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsLowDERSignature( const valtype & vchSig , ScriptError * serror)",16, 95, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"IsDefinedHashtypeSignature( const valtype & vchSig)",10, 85, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CheckSignatureEncoding( const std :: vector<unsigned char> & vchSig , unsigned int flags , ScriptError * serror)",16, 134, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CheckPubKeyEncoding( const valtype & vchPubKey , unsigned int flags , const SigVersion & sigversion , ScriptError * serror)",10, 133, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CheckMinimalPush( const valtype & data , opcodetype opcode)",24, 98, 8, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"FindAndDelete( CScript & script , const CScript & b)",27, 96, 8, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"EvalScript( std :: vector<std::vector<unsigned char>> & stack , const CScript & script , unsigned int flags , const BaseSignatureChecker & checker , SigVersion sigversion , ScriptError * serror)",804, 189, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::CTransactionSignatureSerializer( const T & txToIn , const CScript & scriptCodeIn , unsigned int nInIn , int nHashTypeIn)",5, 121, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::SerializeScriptCode( S & s) const",20, 68, 8, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::SerializeInput( S & s , unsigned int nInput) const",19, 86, 8, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::SerializeOutput( S & s , unsigned int nOutput) const",7, 71, 12, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CTransactionSignatureSerializer::Serialize( S & s) const",16, 90, 8, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GetPrevoutHash( const T & txTo)",8, 40, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GetSequenceHash( const T & txTo)",8, 40, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GetOutputsHash( const T & txTo)",8, 42, 4, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"PrecomputedTransactionData::PrecomputedTransactionData( const T & txTo)",10, 70, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"SignatureHash( const CScript & scriptCode , const T & txTo , unsigned int nIn , int nHashType , const CAmount & amount , SigVersion sigversion , const PrecomputedTransactionData * cache)",68, 184, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GenericTransactionSignatureChecker<T>::VerifySignature( const std :: vector<unsigned char> & vchSig , const CPubKey & pubkey , const uint256 & sighash) const",4, 155, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GenericTransactionSignatureChecker<T>::CheckSig( const std :: vector<unsigned char> & vchSigIn , const std :: vector<unsigned char> & vchPubKey , const CScript & scriptCode , SigVersion sigversion) const",20, 198, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GenericTransactionSignatureChecker<T>::CheckLockTime( const CScriptNum & nLockTime) const",35, 93, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"GenericTransactionSignatureChecker<T>::CheckSequence( const CScriptNum & nSequence) const",45, 127, 8, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"VerifyWitnessProgram( const CScriptWitness & witness , int witversion , const std :: vector<unsigned char> & program , unsigned int flags , const BaseSignatureChecker & checker , ScriptError * serror)",52, 201, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"VerifyScript( const CScript & scriptSig , const CScript & scriptPubKey , const CScriptWitness * witness , unsigned int flags , const BaseSignatureChecker & checker , ScriptError * serror)",118, 182, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"WitnessSigOps( int witversion , const std :: vector<unsigned char> & witprogram , const CScriptWitness & witness)",15, 121, 0, 0
repos/cpp/bitcoin/src/script/interpreter.cpp,"CountWitnessSigOps( const CScript & scriptSig , const CScript & scriptPubKey , const CScriptWitness * witness , unsigned int flags)",30, 132, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"GetOpName( opcodetype opcode)",137, 70, 4, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::GetSigOpCount( bool fAccurate) const",23, 81, 8, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::GetSigOpCount( const CScript & scriptSig) const",23, 68, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsPayToScriptHash() const",8, 56, 4, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsPayToWitnessScriptHash() const",7, 64, 4, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsWitnessProgram( int & version , std :: vector<unsigned char> & program) const",15, 88, 0, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsPushOnly( const_iterator pc) const",16, 80, 8, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::IsPushOnly() const",4, 38, 4, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScriptWitness::ToString() const",11, 54, 4, 0
repos/cpp/bitcoin/src/script/script.cpp,"CScript::HasValidOps() const",12, 104, 8, 0
repos/cpp/bitcoin/src/script/script.cpp,"GetScriptOp( CScriptBase :: const_iterator & pc , CScriptBase :: const_iterator end , opcodetype & opcodeRet , std :: vector<unsigned char> * pvchRet)",51, 143, 0, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::TxInputStream( int nTypeIn , int nVersionIn , const unsigned char * txTo , size_t txToLen)",6, 92, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::read( char * pch , size_t nSize)",15, 94, 12, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::operator > >( T && obj)",5, 39, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::GetVersion() const",1, 49, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"TxInputStream::GetType() const",1, 43, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"set_error( bitcoinconsensus_error * ret , bitcoinconsensus_error serror)",6, 81, 0, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"verify_flags( unsigned int flags)",4, 71, 4, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"verify_script( const unsigned char * scriptPubKey , unsigned int scriptPubKeyLen , CAmount amount , const unsigned char * txTo , unsigned int txToLen , unsigned int nIn , unsigned int flags , bitcoinconsensus_error * err)",24, 206, 8, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"bitcoinconsensus_verify_script_with_amount( const unsigned char * scriptPubKey , unsigned int scriptPubKeyLen , int64_t amount , const unsigned char * txTo , unsigned int txToLen , unsigned int nIn , unsigned int flags , bitcoinconsensus_error * err)",7, 128, 0, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"bitcoinconsensus_verify_script( const unsigned char * scriptPubKey , unsigned int scriptPubKeyLen , const unsigned char * txTo , unsigned int txToLen , unsigned int nIn , unsigned int flags , bitcoinconsensus_error * err)",11, 102, 35, 0
repos/cpp/bitcoin/src/script/bitcoinconsensus.cpp,"bitcoinconsensus_version()",5, 40, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"MutableTransactionSignatureCreator::MutableTransactionSignatureCreator( const CMutableTransaction * txToIn , unsigned int nInIn , const CAmount & amountIn , int nHashTypeIn)",1, 270, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"MutableTransactionSignatureCreator::CreateSig( const SigningProvider & provider , std :: vector<unsigned char> & vchSig , const CKeyID & address , const CScript & scriptCode , SigVersion sigversion) const",16, 199, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"GetCScript( const SigningProvider & provider , const SignatureData & sigdata , const CScriptID & scriptid , CScript & script)",15, 130, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"GetPubKey( const SigningProvider & provider , const SignatureData & sigdata , const CKeyID & address , CPubKey & pubkey)",17, 125, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"CreateSig( const BaseSignatureCreator & creator , SignatureData & sigdata , const SigningProvider & provider , std :: vector<unsigned char> & sig_out , const CPubKey & pubkey , const CScript & scriptcode , SigVersion sigversion)",21, 226, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignStep( const SigningProvider & provider , const BaseSignatureCreator & creator , const CScript & scriptPubKey , std :: vector<valtype> & ret , txnouttype & whichTypeRet , SigVersion sigversion , SignatureData & sigdata)",77, 125, 12, 0
repos/cpp/bitcoin/src/script/sign.cpp,"PushAll( const std :: vector<valtype> & values)",14, 63, 8, 0
repos/cpp/bitcoin/src/script/sign.cpp,"ProduceSignature( const SigningProvider & provider , const BaseSignatureCreator & creator , const CScript & fromPubKey , SignatureData & sigdata)",55, 224, 8, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignatureExtractorChecker::SignatureExtractorChecker( SignatureData & sigdata , BaseSignatureChecker & checker)",1, 125, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignatureExtractorChecker::CheckSig( const std :: vector<unsigned char> & scriptSig , const std :: vector<unsigned char> & vchPubKey , const CScript & scriptCode , SigVersion sigversion) const",9, 187, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"Stacks::Stacks( const SignatureData & data)",3, 111, 8, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DataFromTransaction( const CMutableTransaction & tx , unsigned int nIn , const CTxOut & txout)",64, 138, 16, 0
repos/cpp/bitcoin/src/script/sign.cpp,"UpdateInput( CTxIn & input , const SignatureData & data)",5, 58, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignatureData::MergeSignatureData( SignatureData sigdata)",15, 127, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignSignature( const SigningProvider & provider , const CScript & fromPubKey , CMutableTransaction & txTo , unsigned int nIn , const CAmount & amount , int nHashType)",11, 162, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"SignSignature( const SigningProvider & provider , const CTransaction & txFrom , CMutableTransaction & txTo , unsigned int nIn , int nHashType)",9, 140, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureChecker::DummySignatureChecker()",1, 31, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureChecker::CheckSig( const std :: vector<unsigned char> & scriptSig , const std :: vector<unsigned char> & vchPubKey , const CScript & scriptCode , SigVersion sigversion) const",1, 190, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureCreator::DummySignatureCreator( char r_len , char s_len)",1, 86, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureCreator::Checker() const",1, 83, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"DummySignatureCreator::CreateSig( const SigningProvider & provider , std :: vector<unsigned char> & vchSig , const CKeyID & keyid , const CScript & scriptCode , SigVersion sigversion) const",15, 174, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"LookupHelper( const M & map , const K & key , V & value)",9, 56, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"IsSolvable( const SigningProvider & provider , const CScript & script)",18, 159, 4, 0
repos/cpp/bitcoin/src/script/sign.cpp,"HidingSigningProvider::GetCScript( const CScriptID & scriptid , CScript & script) const",4, 89, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"HidingSigningProvider::GetPubKey( const CKeyID & keyid , CPubKey & pubkey) const",4, 82, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"HidingSigningProvider::GetKey( const CKeyID & keyid , CKey & key) const",5, 73, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"HidingSigningProvider::GetKeyOrigin( const CKeyID & keyid , KeyOriginInfo & info) const",5, 89, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"FlatSigningProvider::GetCScript( const CScriptID & scriptid , CScript & script) const",1, 139, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"FlatSigningProvider::GetPubKey( const CKeyID & keyid , CPubKey & pubkey) const",1, 129, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"FlatSigningProvider::GetKeyOrigin( const CKeyID & keyid , KeyOriginInfo & info) const",1, 134, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"FlatSigningProvider::GetKey( const CKeyID & keyid , CKey & key) const",1, 114, 0, 0
repos/cpp/bitcoin/src/script/sign.cpp,"Merge( const FlatSigningProvider & a , const FlatSigningProvider & b)",13, 86, 0, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::CSignatureCache()",4, 41, 8, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::ComputeEntry( uint256 & entry , const uint256 & hash , const std :: vector<unsigned char> & vchSig , const CPubKey & pubkey)",4, 158, 8, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::Get( const uint256 & entry , const bool erase)",5, 67, 8, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::Set( uint256 & entry)",5, 67, 8, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CSignatureCache::setup_bytes( size_t n)",4, 40, 8, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"InitSignatureCache()",9, 170, 4, 0
repos/cpp/bitcoin/src/script/sigcache.cpp,"CachingTransactionSignatureChecker::VerifySignature( const std :: vector<unsigned char> & vchSig , const CPubKey & pubkey , const uint256 & sighash) const",12, 152, 0, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"PermitsUncompressed( IsMineSigVersion sigversion)",4, 88, 4, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"HaveKeys( const std :: vector<valtype> & pubkeys , const CKeyStore & keystore)",8, 78, 0, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"IsMineInner( const CKeyStore & keystore , const CScript & scriptPubKey , IsMineSigVersion sigversion)",114, 139, 8, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"IsMine( const CKeyStore & keystore , const CScript & scriptPubKey)",13, 74, 0, 0
repos/cpp/bitcoin/src/script/ismine.cpp,"IsMine( const CKeyStore & keystore , const CTxDestination & dest)",5, 73, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptID::CScriptID( const CScript & in)",1, 84, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"WitnessV0ScriptHash::WitnessV0ScriptHash( const CScript & in)",4, 61, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetTxnOutputType( txnouttype t)",16, 67, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"MatchPayToPubkey( const CScript & script , valtype & pubkey)",12, 152, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"MatchPayToPubkeyHash( const CScript & script , valtype & pubkeyhash)",8, 161, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"IsSmallInteger( opcodetype opcode)",4, 56, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"MatchMultisig( const CScript & script , unsigned int & required , std :: vector<valtype> & pubkeys)",17, 104, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"Solver( const CScript & scriptPubKey , std :: vector<std::vector<unsigned char>> & vSolutionsRet)",64, 119, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"ExtractDestination( const CScript & scriptPubKey , CTxDestination & addressRet)",43, 81, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"ExtractDestinations( const CScript & scriptPubKey , txnouttype & typeRet , std :: vector<CTxDestination> & addressRet , int & nRequiredRet)",39, 135, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::CScriptVisitor( CScript * scriptin)",1, 70, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const CNoDestination & dest) const",4, 56, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const CKeyID & keyID) const",5, 97, 8, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const CScriptID & scriptID) const",5, 69, 8, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const WitnessV0KeyHash & id) const",6, 54, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const WitnessV0ScriptHash & id) const",6, 57, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"CScriptVisitor::operator ( )( const WitnessUnknown & id) const",6, 118, 8, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetScriptForDestination( const CTxDestination & dest)",7, 60, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetScriptForRawPubKey( const CPubKey & pubKey)",4, 97, 4, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetScriptForMultisig( int nRequired , const std :: vector<CPubKey> & keys)",10, 78, 0, 0
repos/cpp/bitcoin/src/script/standard.cpp,"GetScriptForWitness( const CScript & redeemscript)",11, 111, 8, 0
repos/cpp/bitcoin/src/script/standard.cpp,"IsValidDestination( const CTxDestination & dest)",3, 54, 0, 0
repos/cpp/bitcoin/src/primitives/block.cpp,"CBlockHeader::GetHash() const",4, 38, 0, 0
repos/cpp/bitcoin/src/primitives/block.cpp,"CBlock::ToString() const",15, 130, 4, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"COutPoint::ToString() const",4, 76, 4, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxIn::CTxIn( COutPoint prevoutIn , CScript scriptSigIn , uint32_t nSequenceIn)",6, 77, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxIn::CTxIn( uint256 hashPrevTx , uint32_t nOut , CScript scriptSigIn , uint32_t nSequenceIn)",6, 91, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxIn::ToString() const",14, 77, 8, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxOut::CTxOut( const CAmount & nValueIn , CScript scriptPubKeyIn)",5, 64, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTxOut::ToString() const",4, 131, 4, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CMutableTransaction::CMutableTransaction()",1, 102, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CMutableTransaction::CMutableTransaction( const CTransaction & tx)",1, 145, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CMutableTransaction::GetHash() const",4, 80, 4, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::ComputeHash() const",4, 80, 4, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::ComputeWitnessHash() const",7, 49, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::CTransaction()",1, 129, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::CTransaction( const CMutableTransaction & tx)",1, 197, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::CTransaction( CMutableTransaction && tx)",1, 214, 0, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::GetValueOut() const",10, 86, 12, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::GetTotalSize() const",4, 56, 4, 0
repos/cpp/bitcoin/src/primitives/transaction.cpp,"CTransaction::ToString() const",17, 97, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"align_up( size_t x , size_t align)",4, 54, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::Arena( void * base_in , size_t size_in , size_t alignment_in)",8, 107, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::~Arena()",3, 16, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::alloc( size_t size)",34, 118, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::free( void * ptr)",37, 69, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::stats() const",10, 71, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"printchunk( char * base , size_t sz , bool used)",6, 74, 8, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Arena::walk() const",9, 54, 8, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Win32LockedPageAllocator::Win32LockedPageAllocator()",7, 53, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Win32LockedPageAllocator::AllocateLocked( size_t len , bool * lockingSuccess)",13, 87, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Win32LockedPageAllocator::FreeLocked( void * addr , size_t len)",6, 66, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"Win32LockedPageAllocator::GetLimit()",5, 56, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"PosixLockedPageAllocator::PosixLockedPageAllocator()",9, 53, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"PosixLockedPageAllocator::AllocateLocked( size_t len , bool * lockingSuccess)",13, 87, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"PosixLockedPageAllocator::FreeLocked( void * addr , size_t len)",7, 66, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"PosixLockedPageAllocator::GetLimit()",12, 49, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::LockedPool( std :: unique_ptr<LockedPageAllocator> allocator_in , LockingFailed_Callback lf_cb_in)",4, 108, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::~LockedPool()",3, 26, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::alloc( size_t size)",21, 46, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::free( void * ptr)",13, 87, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::stats() const",14, 65, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::new_arena( size_t size , size_t align)",28, 132, 8, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::LockedPageArena::LockedPageArena( LockedPageAllocator * allocator_in , void * base_in , size_t size_in , size_t align_in)",4, 129, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPool::LockedPageArena::~LockedPageArena()",4, 48, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPoolManager::LockedPoolManager( std :: unique_ptr<LockedPageAllocator> allocator_in)",4, 89, 0, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPoolManager::LockingFailed()",5, 61, 4, 0
repos/cpp/bitcoin/src/support/lockedpool.cpp,"LockedPoolManager::CreateInstance()",15, 84, 4, 0
repos/cpp/bitcoin/src/support/cleanse.cpp,"memory_cleanse( void * ptr , size_t len)",13, 82, 4, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"EXCLUSIVE_LOCKS_REQUIRED( wallet -> cs_wallet)",39, 206, 0, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"feebumper::TransactionCanBeBumped( const CWallet * wallet , const uint256 & txid)",11, 91, 4, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"feebumper::CreateTransaction( const CWallet * wallet , const uint256 & txid , const CCoinControl & coin_control , CAmount total_fee , std :: vector<std::string> & errors , CAmount & old_fee , CAmount & new_fee , CMutableTransaction & mtx)",138, 196, 64, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"feebumper::SignTransaction( CWallet * wallet , CMutableTransaction & mtx)",5, 66, 0, 0
repos/cpp/bitcoin/src/wallet/feebumper.cpp,"feebumper::CommitTransaction( CWallet * wallet , const uint256 & txid , CMutableTransaction && mtx , std :: vector<std::string> & errors , uint256 & bumped_txid)",50, 146, 0, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"GetWalletDir()",21, 84, 8, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"IsBerkeleyBtree( const fs :: path & path)",20, 113, 4, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"ListWalletDir()",31, 120, 8, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"WalletLocation::WalletLocation( const std :: string & name)",5, 56, 0, 0
repos/cpp/bitcoin/src/wallet/walletutil.cpp,"WalletLocation::Exists() const",4, 68, 4, 0
repos/cpp/bitcoin/src/wallet/psbtwallet.cpp,"FillPSBT( const CWallet * pwallet , PartiallySignedTransaction & psbtx , bool & complete , int sighash_type , bool sign , bool bip32derivs)",54, 148, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"CheckUniqueFileid( const BerkeleyEnvironment & env , const std :: string & filename , Db & db , WalletDatabaseFileId & fileid)",16, 129, 8, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"WalletDatabaseFileId::operator ==( const WalletDatabaseFileId & rhs) const",4, 77, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"SplitWalletPath( const fs :: path & wallet_path , fs :: path & env_directory , std :: string & database_filename)",15, 114, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"IsWalletLoaded( const fs :: path & wallet_path)",11, 70, 4, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"GetWalletEnv( const fs :: path & wallet_path , std :: string & database_filename)",13, 111, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Close()",30, 121, 8, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Reset()",6, 50, 4, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::BerkeleyEnvironment( const fs :: path & dir_path)",4, 96, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::~BerkeleyEnvironment()",6, 44, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Open( bool retry)",73, 133, 12, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::BerkeleyEnvironment()",30, 123, 8, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Verify( const std :: string & strFile , recoverFunc_type recoverFunc , std :: string & out_backup_filename)",16, 154, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::SafeDbt::SafeDbt()",4, 36, 4, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::SafeDbt::SafeDbt( void * data , size_t size)",4, 57, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::SafeDbt::~SafeDbt()",13, 78, 8, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::SafeDbt::get_data() const",4, 53, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::SafeDbt::get_size() const",4, 51, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::SafeDbt::operator Dbt *()",4, 40, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::Recover( const fs :: path & file_path , void * callbackDataIn , bool(*recoverKVcallback)(void*callbackData,CDataStream ssKey,CDataStream ssValue) , std :: string & newFilename)",68, 190, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::VerifyEnvironment( const fs :: path & file_path , std :: string & errorStr)",23, 114, 8, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::VerifyDatabaseFile( const fs :: path & file_path , std :: string & warningStr , std :: string & errorStr , BerkeleyEnvironment :: recoverFunc_type recoverFunc)",27, 165, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Salvage( const std :: string & strFile , bool fAggressive , std :: vector<BerkeleyEnvironment::KeyValPair> & vResult)",59, 135, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::CheckpointLSN( const std :: string & strFile)",7, 68, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::BerkeleyBatch( BerkeleyDatabase & database , const char * pszMode , bool fFlushOnCloseIn)",78, 149, 20, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::Flush()",12, 121, 4, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::IncrementUpdateCounter()",4, 48, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::Close()",18, 41, 8, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::CloseDb( const std :: string & strFile)",14, 62, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::ReloadDbEnv()",25, 62, 4, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::Rewrite( BerkeleyDatabase & database , const char * pszSkip)",87, 110, 32, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyEnvironment::Flush( bool fShutdown)",40, 185, 8, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyBatch::PeriodicFlush( BerkeleyDatabase & database)",42, 93, 16, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::Rewrite( const char * pszSkip)",4, 52, 0, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::Backup( const std :: string & strDest)",40, 135, 20, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::Flush( bool shutdown)",18, 91, 12, 0
repos/cpp/bitcoin/src/wallet/db.cpp,"BerkeleyDatabase::ReloadDbEnv()",6, 37, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::BytesToKeySHA512AES( const std :: vector<unsigned char> & chSalt , const SecureString & strKeyData , int count , unsigned char * key , unsigned char * iv) const",25, 163, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::SetKeyFromPassphrase( const SecureString & strKeyData , const std :: vector<unsigned char> & chSalt , const unsigned int nRounds , const unsigned int nDerivationMethod)",19, 176, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::SetKey( const CKeyingMaterial & chNewKey , const std :: vector<unsigned char> & chNewIV)",11, 98, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::Encrypt( const CKeyingMaterial & vchPlaintext , std :: vector<unsigned char> & vchCiphertext) const",17, 109, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCrypter::Decrypt( const std :: vector<unsigned char> & vchCiphertext , CKeyingMaterial & vchPlaintext) const",17, 109, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"EncryptSecret( const CKeyingMaterial & vMasterKey , const CKeyingMaterial & vchPlaintext , const uint256 & nIV , std :: vector<unsigned char> & vchCiphertext)",9, 161, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"DecryptSecret( const CKeyingMaterial & vMasterKey , const std :: vector<unsigned char> & vchCiphertext , const uint256 & nIV , CKeyingMaterial & vchPlaintext)",9, 161, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"DecryptKey( const CKeyingMaterial & vMasterKey , const std :: vector<unsigned char> & vchCryptedSecret , const CPubKey & vchPubKey , CKey & key)",12, 147, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::SetCrypted()",10, 35, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::IsLocked() const",8, 39, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::Lock()",13, 31, 4, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::Unlock( const CKeyingMaterial & vMasterKeyIn , bool accept_no_keys)",37, 129, 12, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::AddKeyPubKey( const CKey & key , const CPubKey & pubkey)",22, 85, 4, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::AddCryptedKey( const CPubKey & vchPubKey , const std :: vector<unsigned char> & vchCryptedSecret)",11, 114, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::HaveKey( const CKeyID & address) const",8, 59, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::GetKey( const CKeyID & address , CKey & keyOut) const",16, 82, 8, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::GetPubKey( const CKeyID & address , CPubKey & vchPubKeyOut) const",15, 84, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::GetKeys() const",12, 50, 0, 0
repos/cpp/bitcoin/src/wallet/crypter.cpp,"CCryptoKeyStore::EncryptKeys( CKeyingMaterial & vMasterKeyIn)",21, 92, 8, 0
repos/cpp/bitcoin/src/wallet/coincontrol.cpp,"CCoinControl::SetNull()",14, 98, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteName( const std :: string & strAddress , const std :: string & strName)",4, 87, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::EraseName( const std :: string & strAddress)",6, 96, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WritePurpose( const std :: string & strAddress , const std :: string & strPurpose)",4, 93, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ErasePurpose( const std :: string & strAddress)",4, 72, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteTx( const CWalletTx & wtx)",4, 75, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::EraseTx( uint256 hash)",4, 61, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteKeyMetadata( const CKeyMetadata & meta , const CPubKey & pubkey , const bool overwrite)",4, 106, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteKey( const CPubKey & vchPubKey , const CPrivKey & vchPrivKey , const CKeyMetadata & keyMeta)",14, 138, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteCryptedKey( const CPubKey & vchPubKey , const std :: vector<unsigned char> & vchCryptedSecret , const CKeyMetadata & keyMeta)",15, 93, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteMasterKey( unsigned int nID , const CMasterKey & kMasterKey)",4, 81, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteCScript( const uint160 & hash , const CScript & redeemScript)",4, 87, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteWatchOnly( const CScript & dest , const CKeyMetadata & keyMeta)",7, 83, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::EraseWatchOnly( const CScript & dest)",7, 68, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteBestBlock( const CBlockLocator & locator)",5, 147, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ReadBestBlock( CBlockLocator & locator)",5, 96, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteOrderPosNext( int64_t nOrderPosNext)",4, 64, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ReadPool( int64_t nPool , CKeyPool & keypool)",4, 78, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WritePool( int64_t nPool , const CKeyPool & keypool)",4, 73, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ErasePool( int64_t nPool)",4, 64, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteMinVersion( int nVersion)",4, 57, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"CWalletScanState::CWalletScanState()",2, 25, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",254, 124, 13, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::IsKeyType( const std :: string & strType)",5, 56, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::LoadWallet( CWallet * pwallet)",109, 121, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::FindWalletTx( std :: vector<uint256> & vTxHash , std :: vector<CWalletTx> & vWtx)",58, 96, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ZapSelectTx( std :: vector<uint256> & vTxHashIn , std :: vector<uint256> & vTxHashOut)",37, 124, 16, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ZapWalletTx( std :: vector<CWalletTx> & vWtx)",16, 64, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"MaybeCompactWalletDB()",29, 92, 8, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::Recover( const fs :: path & wallet_path , void * callbackDataIn , bool(*recoverKVcallback)(void*callbackData,CDataStream ssKey,CDataStream ssValue) , std :: string & out_backup_filename)",4, 198, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::Recover( const fs :: path & wallet_path , std :: string & out_backup_filename)",6, 89, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::RecoverKeysOnlyFilter( void * callbackData , CDataStream ssKey , CDataStream ssValue)",22, 100, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::VerifyEnvironment( const fs :: path & wallet_path , std :: string & errorStr)",4, 88, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::VerifyDatabaseFile( const fs :: path & wallet_path , std :: string & warningStr , std :: string & errorStr)",4, 114, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteDestData( const std :: string & address , const std :: string & key , const std :: string & value)",4, 110, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::EraseDestData( const std :: string & address , const std :: string & key)",4, 91, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteHDChain( const CHDChain & chain)",4, 54, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteWalletFlags( const uint64_t flags)",4, 57, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::TxnBegin()",4, 31, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::TxnCommit()",4, 32, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::TxnAbort()",4, 31, 4, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::ReadVersion( int & nVersion)",4, 45, 0, 0
repos/cpp/bitcoin/src/wallet/walletdb.cpp,"WalletBatch::WriteVersion( int nVersion)",4, 45, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"AddWallet( const std :: shared_ptr<CWallet> & wallet)",9, 117, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"RemoveWallet( const std :: shared_ptr<CWallet> & wallet)",9, 111, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"HasWallets()",5, 31, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"GetWallets()",5, 51, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"GetWallet( const std :: string & name)",8, 63, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"ReleaseWallet( CWallet * wallet)",19, 83, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"UnloadWallet( std :: shared_ptr<CWallet> && wallet)",22, 80, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"LoadWallet( interfaces :: Chain & chain , const WalletLocation & location , std :: string & error , std :: string & warning)",16, 136, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"LoadWallet( interfaces :: Chain & chain , const std :: string & name , std :: string & error , std :: string & warning)",4, 129, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"COutput::ToString() const",4, 124, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"GetAffectedKeys( const CScript & spk , const SigningProvider & provider)",11, 89, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetWalletTx( const uint256 & hash) const",8, 76, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GenerateNewKey( WalletBatch & batch , bool internal)",36, 125, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DeriveNewChildKey( WalletBatch & batch , CKeyMetadata & metadata , CKey & secret , bool internal)",54, 106, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddKeyPubKeyWithDB( WalletBatch & batch , const CKey & secret , const CPubKey & pubkey)",39, 96, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddKeyPubKey( const CKey & secret , const CPubKey & pubkey)",5, 70, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddCryptedKey( const CPubKey & vchPubKey , const std :: vector<unsigned char> & vchCryptedSecret)",17, 96, 60, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadKeyMetadata( const CKeyID & keyID , const CKeyMetadata & meta)",6, 77, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadScriptMetadata( const CScriptID & script_id , const CKeyMetadata & meta)",6, 87, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::WriteKeyMetadata( const CKeyMetadata & meta , const CPubKey & pubkey , const bool overwrite)",4, 102, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::UpgradeKeyMetadata()",41, 167, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadCryptedKey( const CPubKey & vchPubKey , const std :: vector<unsigned char> & vchCryptedSecret)",4, 107, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::UpdateTimeFirstKey( int64_t nCreateTime)",11, 80, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddCScript( const CScript & redeemScript)",10, 84, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadCScript( const CScript & redeemScript)",14, 236, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddWatchOnly( const CScript & dest)",13, 67, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddWatchOnly( const CScript & dest , int64_t nCreateTime)",5, 69, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::RemoveWatchOnly( const CScript & dest)",12, 54, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadWatchOnly( const CScript & dest)",4, 49, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::Unlock( const SecureString & strWalletPassphrase , bool accept_no_keys)",22, 168, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ChangeWalletPassphrase( const SecureString & strOldWalletPassphrase , const SecureString & strNewWalletPassphrase)",45, 211, 16, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ChainStateFlushed( const CBlockLocator & loc)",5, 58, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetMinVersion( enum WalletFeature nVersion , WalletBatch * batch_in , bool fExplicit)",23, 97, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetMaxVersion( int nVersion)",11, 46, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetConflicts( const uint256 & txid) const",22, 85, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::HasWalletSpend( const uint256 & txid) const",6, 68, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::Flush( bool shutdown)",4, 35, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SyncMetaData( std :: pair<TxSpends::iterator,TxSpends::iterator> range)",38, 94, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsSpent( interfaces :: Chain :: Lock & locked_chain , const uint256 & hash , unsigned int n) const",18, 104, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddToSpends( const COutPoint & outpoint , const uint256 & wtxid)",10, 75, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddToSpends( const uint256 & wtxid)",11, 64, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::EncryptWallet( const SecureString & strWalletPassphrase)",95, 178, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ReorderTransactions()",56, 78, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IncOrderPosNext( WalletBatch * batch)",11, 65, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkDirty()",8, 68, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkReplaced( const uint256 & originalHash , const uint256 & newHash)",28, 98, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddToWallet( const CWalletTx & wtxIn , bool fFlushOnClose)",83, 132, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadToWallet( const CWalletTx & wtxIn)",20, 86, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddToWalletIfInvolvingMe( const CTransactionRef & ptx , const uint256 & block_hash , int posInBlock , bool fUpdate)",56, 269, 24, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TransactionCanBeAbandoned( const uint256 & hashTx) const",7, 108, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkInputsDirty( const CTransactionRef & tx)",9, 57, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AbandonTransaction( interfaces :: Chain :: Lock & locked_chain , const uint256 & hashTx)",55, 111, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkConflicted( const uint256 & hashBlock , const uint256 & hashTx)",50, 112, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SyncTransaction( const CTransactionRef & ptx , const uint256 & block_hash , int posInBlock , bool update_tx)",9, 119, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TransactionAddedToMempool( const CTransactionRef & ptx)",10, 74, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TransactionRemovedFromMempool( const CTransactionRef & ptx)",7, 74, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::BlockConnected( const std :: shared_ptr<const CBlock> & pblock , const CBlockIndex * pindex , const std :: vector<CTransactionRef> & vtxConflicted)",22, 154, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::BlockDisconnected( const std :: shared_ptr<const CBlock> & pblock)",8, 79, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::BlockUntilSyncedToCurrentChain()",22, 104, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsMine( const CTxIn & txin) const",14, 93, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetDebit( const CTxIn & txin , const isminefilter & filter) const",15, 93, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsMine( const CTxOut & txout) const",4, 54, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetCredit( const CTxOut & txout , const isminefilter & filter) const",6, 82, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsChange( const CTxOut & txout) const",4, 50, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsChange( const CScript & script) const",21, 86, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetChange( const CTxOut & txout) const",6, 82, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsMine( const CTransaction & tx) const",7, 51, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsFromMe( const CTransaction & tx) const",4, 53, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetDebit( const CTransaction & tx , const isminefilter & filter) const",11, 86, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsAllFromMe( const CTransaction & tx , const isminefilter & filter) const",20, 84, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetCredit( const CTransaction & tx , const isminefilter & filter) const",11, 86, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetChange( const CTransaction & tx) const",11, 86, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GenerateNewSeed()",7, 64, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DeriveNewSeed( const CKey & key)",27, 87, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetHDSeed( const CPubKey & seed)",13, 126, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetHDChain( const CHDChain & chain , bool memonly)",8, 84, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsHDEnabled() const",4, 38, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::CanGenerateKeys()",6, 111, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::CanGetAddresses( bool internal)",16, 71, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetWalletFlag( uint64_t flags)",7, 91, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::UnsetWalletFlag( uint64_t flag)",7, 91, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsWalletFlagSet( uint64_t flag)",4, 45, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetWalletFlags( uint64_t overwriteFlags , bool memonly)",14, 91, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetTxTime() const",5, 37, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DummySignInput( CTxIn & tx_in , const CTxOut & txout , bool use_max_sig) const",12, 132, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DummySignTx( CMutableTransaction & txNew , const std :: vector<CTxOut> & txouts , bool use_max_sig) const",14, 113, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CalculateMaximumSignedTxSize( const CTransaction & tx , const CWallet * wallet , bool use_max_sig)",16, 102, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CalculateMaximumSignedTxSize( const CTransaction & tx , const CWallet * wallet , const std :: vector<CTxOut> & txouts , bool use_max_sig)",10, 137, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CalculateMaximumSignedInputSize( const CTxOut & txout , const CWallet * wallet , bool use_max_sig)",9, 98, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetAmounts( std :: list<COutputEntry> & listReceived , std :: list<COutputEntry> & listSent , CAmount & nFee , const isminefilter & filter) const",54, 111, 27, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::RescanFromTime( int64_t startTime , const WalletRescanReserver & reserver , bool update)",26, 136, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ScanForWalletTransactions( const uint256 & start_block , const uint256 & stop_block , const WalletRescanReserver & reserver , bool fUpdate)",98, 198, 16, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ReacceptWalletTransactions()",30, 90, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::RelayWalletTransaction( interfaces :: Chain :: Lock & locked_chain)",17, 83, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetConflicts() const",11, 50, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetDebit( const isminefilter & filter) const",30, 75, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetCredit( interfaces :: Chain :: Lock & locked_chain , const isminefilter & filter) const",32, 102, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetImmatureCredit( interfaces :: Chain :: Lock & locked_chain , bool fUseCache) const",12, 98, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetAvailableCredit( interfaces :: Chain :: Lock & locked_chain , bool fUseCache , const isminefilter & filter) const",44, 127, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetImmatureWatchOnlyCredit( interfaces :: Chain :: Lock & locked_chain , const bool fUseCache) const",12, 113, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::GetChange() const",8, 45, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::InMempool() const",4, 34, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::IsTrusted( interfaces :: Chain :: Lock & locked_chain) const",31, 97, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::IsEquivalentTo( const CWalletTx & _tx) const",8, 63, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ResendWalletTransactionsBefore( interfaces :: Chain :: Lock & locked_chain , int64_t nTime)",25, 115, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ResendWalletTransactions( int64_t nBestBlockTime , CConnman * connman)",23, 103, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetBalance( const isminefilter & filter , const int min_depth) const",17, 109, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetUnconfirmedBalance() const",15, 122, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetImmatureBalance() const",14, 63, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetUnconfirmedWatchOnlyBalance() const",15, 122, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetImmatureWatchOnlyBalance() const",14, 72, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetLegacyBalance( const isminefilter & filter , int minDepth) const",33, 106, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetAvailableBalance( const CCoinControl * coinControl) const",15, 76, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AvailableCoins( interfaces :: Chain :: Lock & locked_chain , std :: vector<COutput> & vCoins , bool fOnlySafe , const CCoinControl * coinControl , const CAmount & nMinimumAmount , const CAmount & nMaximumAmount , const CAmount & nMinimumSumAmount , const uint64_t nMaximumCount , const int nMinDepth , const int nMaxDepth) const",109, 321, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ListCoins( interfaces :: Chain :: Lock & locked_chain) const",37, 117, 16, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::FindNonChangeParentOutput( const CTransaction & tx , int output) const",16, 91, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SelectCoinsMinConf( const CAmount & nTargetValue , const CoinEligibilityFilter & eligibility_filter , std :: vector<OutputGroup> groups , std :: set<CInputCoin> & setCoinsRet , CAmount & nValueRet , const CoinSelectionParams & coin_selection_params , bool & bnb_used) const",53, 191, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SelectCoins( const std :: vector<COutput> & vAvailableCoins , const CAmount & nTargetValue , std :: set<CInputCoin> & setCoinsRet , CAmount & nValueRet , const CCoinControl & coin_control , CoinSelectionParams & coin_selection_params , bool & bnb_used) const",86, 271, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SignTransaction( CMutableTransaction & tx)",22, 130, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::FundTransaction( CMutableTransaction & tx , CAmount & nFeeRet , int & nChangePosInOut , std :: string & strFailReason , bool lockUnspents , const std :: set<int> & setSubtractFeeFromOutputs , CCoinControl coinControl)",54, 216, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"IsCurrentForAntiFeeSniping( interfaces :: Chain :: Lock & locked_chain)",11, 90, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"GetLocktimeForNewTransaction( interfaces :: Chain :: Lock & locked_chain)",43, 84, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TransactionChangeType( OutputType change_type , const std :: vector<CRecipient> & vecSend)",27, 106, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::CreateTransaction( interfaces :: Chain :: Lock & locked_chain , const std :: vector<CRecipient> & vecSend , CTransactionRef & tx , CReserveKey & reservekey , CAmount & nFeeRet , int & nChangePosInOut , std :: string & strFailReason , const CCoinControl & coin_control , bool sign)",363, 224, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::CommitTransaction( CTransactionRef tx , mapValue_t mapValue , std :: vector<std::pair<std::string,std::string>> orderForm , CReserveKey & reservekey , CValidationState & state)",47, 183, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadWallet( bool & fFirstRunRet)",32, 135, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ZapSelectTx( std :: vector<uint256> & vHashIn , std :: vector<uint256> & vHashOut)",30, 93, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ZapWalletTx( std :: vector<CWalletTx> & vWtx)",22, 79, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::SetAddressBook( const CTxDestination & address , const std :: string & strName , const std :: string & strPurpose)",17, 119, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::DelAddressBook( const CTxDestination & address)",19, 104, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetLabelName( const CScript & scriptPubKey) const",14, 86, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::NewKeyPool()",33, 66, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::KeypoolCountExternalKeys()",5, 69, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadKeyPool( int64_t nIndex , const CKeyPool & keypool)",20, 71, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::TopUpKeyPool( unsigned int kpSize)",46, 258, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddKeypoolPubkey( const CPubKey & pubkey , const bool internal)",6, 75, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddKeypoolPubkeyWithDB( const CPubKey & pubkey , const bool internal , WalletBatch & batch)",15, 116, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ReserveKeyFromKeyPool( int64_t & nIndex , CKeyPool & keypool , bool fRequestedInternal)",46, 148, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::KeepKey( int64_t nIndex)",7, 50, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ReturnKey( int64_t nIndex , bool fInternal , const CPubKey & pubkey)",17, 79, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetKeyFromPool( CPubKey & result , bool internal)",21, 119, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"GetOldestKeyTimeInPool( const std :: set<int64_t> & setKeyPool , WalletBatch & batch)",13, 97, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetOldestKeyPoolTime()",17, 99, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetAddressBalances( interfaces :: Chain :: Lock & locked_chain)",39, 105, 16, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetAddressGroupings()",92, 120, 16, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetLabelAddresses( const std :: string & label) const",13, 89, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CReserveKey::GetReservedKey( CPubKey & pubkey , bool internal)",19, 74, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CReserveKey::KeepKey()",7, 34, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CReserveKey::ReturnKey()",8, 58, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkReserveKeysAsUsed( int64_t keypool_id)",23, 149, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LockCoin( const COutPoint & output)",5, 48, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::UnlockCoin( const COutPoint & output)",5, 50, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::UnlockAllCoins()",5, 31, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::IsLockedCoin( uint256 hash , unsigned int n) const",7, 63, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ListLockedCoins( std :: vector<COutPoint> & vOutpts) const",9, 69, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetKeyBirthTimes( interfaces :: Chain :: Lock & locked_chain , std :: map<CTxDestination,int64_t> & mapKeyBirth) const",46, 145, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::ComputeTimeSmart( const CWalletTx & wtx) const",38, 134, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddDestData( const CTxDestination & dest , const std :: string & key , const std :: string & value)",8, 104, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::EraseDestData( const CTxDestination & dest , const std :: string & key)",6, 80, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LoadDestData( const CTxDestination & dest , const std :: string & key , const std :: string & value)",4, 105, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetDestData( const CTxDestination & dest , const std :: string & key , std :: string * value) const",15, 104, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetDestValues( const std :: string & prefix) const",12, 81, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::MarkPreSplitKeys()",17, 105, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::Verify( interfaces :: Chain & chain , const WalletLocation & location , bool salvage_wallet , std :: string & error_string , std :: string & warning_string)",51, 156, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::CreateWalletFromFile( interfaces :: Chain & chain , const WalletLocation & location , uint64_t wallet_creation_flags)",326, 209, 12, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::postInitProcess()",6, 73, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::BackupWallet( const std :: string & strDest)",4, 55, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CKeyPool::CKeyPool()",6, 25, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CKeyPool::CKeyPool( const CPubKey & vchPubKeyIn , bool internalIn)",7, 64, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletKey::CWalletKey( int64_t nExpires)",5, 47, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CMerkleTx::SetMerkleBranch( const uint256 & block_hash , int posInBlock)",8, 75, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CMerkleTx::GetDepthInMainChain( interfaces :: Chain :: Lock & locked_chain) const",9, 80, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CMerkleTx::GetBlocksToMaturity( interfaces :: Chain :: Lock & locked_chain) const",8, 80, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CMerkleTx::IsImmatureCoinBase( interfaces :: Chain :: Lock & locked_chain) const",5, 80, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWalletTx::AcceptToMemoryPool( interfaces :: Chain :: Lock & locked_chain , CValidationState & state)",11, 99, 0, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LearnRelatedScripts( const CPubKey & key , OutputType type)",10, 97, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::LearnAllRelatedScripts( const CPubKey & key)",5, 80, 4, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GroupOutputs( const std :: vector<COutput> & outputs , bool single_coin) const",29, 121, 16, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::GetKeyOrigin( const CKeyID & keyID , KeyOriginInfo & info) const",18, 99, 8, 0
repos/cpp/bitcoin/src/wallet/wallet.cpp,"CWallet::AddKeyOrigin( const CPubKey & pubkey , const KeyOriginInfo & info)",9, 110, 4, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"WalletInit::HasWalletSupport() const",1, 58, 4, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"WalletInit::AddWalletOptions() const",34, 434, 4, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"WalletInit::ParameterInteraction() const",59, 151, 8, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"VerifyWallets( interfaces :: Chain & chain , const std :: vector<std::string> & wallet_files)",51, 122, 12, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"WalletInit::Construct( InitInterfaces & interfaces) const",9, 118, 4, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"LoadWallets( interfaces :: Chain & chain , const std :: vector<std::string> & wallet_files)",12, 109, 8, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"StartWallets( CScheduler & scheduler)",9, 67, 4, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"FlushWallets()",6, 67, 4, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"StopWallets()",6, 67, 4, 0
repos/cpp/bitcoin/src/wallet/init.cpp,"UnloadWallets()",10, 41, 8, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetRequiredFee( const CWallet & wallet , unsigned int nTxBytes)",4, 69, 0, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetMinimumFee( const CWallet & wallet , unsigned int nTxBytes , const CCoinControl & coin_control , FeeCalculation * feeCalc)",10, 127, 0, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetRequiredFeeRate( const CWallet & wallet)",4, 56, 4, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetMinimumFeeRate( const CWallet & wallet , const CCoinControl & coin_control , FeeCalculation * feeCalc)",54, 152, 4, 0
repos/cpp/bitcoin/src/wallet/fees.cpp,"GetDiscardRate( const CWallet & wallet)",10, 122, 4, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"operator ( )( const OutputGroup & a , const OutputGroup & b) const",4, 70, 4, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"SelectCoinsBnB( std :: vector<OutputGroup> & utxo_pool , const CAmount & target_value , const CAmount & cost_of_change , std :: set<CInputCoin> & out_set , CAmount & value_ret , CAmount not_input_fees)",104, 192, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"ApproximateBestSubset( const std :: vector<OutputGroup> & groups , const CAmount & nTotalLower , const CAmount & nTargetValue , std :: vector<char> & vfBest , CAmount & nBest , int iterations = 1000)",45, 131, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"KnapsackSolver( const CAmount & nTargetValue , std :: vector<OutputGroup> & groups , std :: set<CInputCoin> & setCoinsRet , CAmount & nValueRet)",77, 138, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"OutputGroup::Insert( const CInputCoin & output , int depth , bool from_me , size_t ancestors , size_t descendants)",14, 116, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"OutputGroup::Discard( const CInputCoin & output)",8, 83, 0, 0
repos/cpp/bitcoin/src/wallet/coinselection.cpp,"OutputGroup::EligibleForSpending( const CoinEligibilityFilter & eligibility_filter) const",6, 98, 4, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"DecodeDumpTime( const std :: string & str)",12, 85, 4, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"EncodeDumpString( const std :: string & str)",11, 62, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"DecodeDumpString( const std :: string & str)",13, 67, 12, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",20, 172, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"RescanWallet( CWallet & wallet , const WalletRescanReserver & reserver , int64_t time_begin = TIMESTAMP_MIN , bool update = true)",9, 136, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importprivkey( const JSONRPCRequest & request)",103, 193, 12, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"abortrescan( const JSONRPCRequest & request)",28, 108, 16, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",25, 167, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",8, 152, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importaddress( const JSONRPCRequest & request)",83, 196, 12, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importprunedfunds( const JSONRPCRequest & request)",66, 334, 16, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"removeprunedfunds( const JSONRPCRequest & request)",41, 183, 16, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importpubkey( const JSONRPCRequest & request)",74, 196, 12, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importwallet( const JSONRPCRequest & request)",160, 147, 8, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"dumpprivkey( const JSONRPCRequest & request)",46, 117, 20, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"dumpwallet( const JSONRPCRequest & request)",134, 193, 4, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"RecurseImportData( const CScript & script , ImportData & import_data , const ScriptContext script_ctx)",66, 155, 12, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"ProcessImportLegacy( ImportData & import_data , std :: map<CKeyID,CPubKey> & pubkey_map , std :: map<CKeyID,CKey> & privkey_map , std :: set<CScript> & script_pub_keys , bool & have_solving_data , const UniValue & data , std :: vector<CKeyID> & ordered_pubkeys)",143, 258, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"ProcessImportDescriptor( ImportData & import_data , std :: map<CKeyID,CPubKey> & pubkey_map , std :: map<CKeyID,CKey> & privkey_map , std :: set<CScript> & script_pub_keys , bool & have_solving_data , const UniValue & data , std :: vector<CKeyID> & ordered_pubkeys)",84, 262, 0, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",114, 179, 16, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"GetImportTimestamp( const UniValue & data , int64_t now)",13, 152, 8, 0
repos/cpp/bitcoin/src/wallet/rpcdump.cpp,"importmulti( const JSONRPCRequest & mainRequest)",180, 275, 36, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"GetWalletNameFromJSONRPCRequest( const JSONRPCRequest & request , std :: string & wallet_name)",9, 94, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"GetWalletForJSONRPCRequest( const JSONRPCRequest & request)",12, 116, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"HelpRequiringPassphrase( CWallet * const pwallet)",6, 79, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"EnsureWalletIsAvailable( CWallet * const pwallet , bool avoidException)",11, 111, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"EnsureWalletIsUnlocked( CWallet * const pwallet)",6, 128, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"WalletTxToJSON( interfaces :: Chain & chain , interfaces :: Chain :: Lock & locked_chain , const CWalletTx & wtx , UniValue & entry)",40, 131, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"LabelFromValue( const UniValue & value)",7, 81, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getnewaddress( const JSONRPCRequest & request)",62, 292, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getrawchangeaddress( const JSONRPCRequest & request)",55, 178, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"setlabel( const JSONRPCRequest & request)",41, 128, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"SendMoney( interfaces :: Chain :: Lock & locked_chain , CWallet * const pwallet , const CTxDestination & address , CAmount nValue , bool fSubtractFeeFromAmount , const CCoinControl & coin_control , mapValue_t mapValue)",39, 228, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"sendtoaddress( const JSONRPCRequest & request)",92, 190, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listaddressgroupings( const JSONRPCRequest & request)",62, 95, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"signmessage( const JSONRPCRequest & request)",66, 125, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getreceivedbyaddress( const JSONRPCRequest & request)",70, 136, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getreceivedbylabel( const JSONRPCRequest & request)",68, 138, 16, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getbalance( const JSONRPCRequest & request)",57, 160, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getunconfirmedbalance( const JSONRPCRequest & request)",27, 81, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"sendmany( const JSONRPCRequest & request)",156, 252, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"addmultisigaddress( const JSONRPCRequest & request)",80, 179, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"tallyitem::tallyitem()",3, 16, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",144, 177, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listreceivedbyaddress( const JSONRPCRequest & request)",52, 152, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listreceivedbylabel( const JSONRPCRequest & request)",45, 152, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"MaybePushAddress( UniValue & entry , const CTxDestination & dest)",6, 75, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pwallet -> cs_wallet)",75, 269, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listtransactions( const JSONRPCRequest & request)",133, 164, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listsinceblock( const JSONRPCRequest & request)",144, 404, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"gettransaction( const JSONRPCRequest & request)",101, 166, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"abandontransaction( const JSONRPCRequest & request)",46, 128, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"backupwallet( const JSONRPCRequest & request)",37, 123, 16, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"keypoolrefill( const JSONRPCRequest & request)",48, 98, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletpassphrase( const JSONRPCRequest & request)",85, 157, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletpassphrasechange( const JSONRPCRequest & request)",52, 141, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletlock( const JSONRPCRequest & request)",42, 129, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"encryptwallet( const JSONRPCRequest & request)",59, 177, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"lockunspent( const JSONRPCRequest & request)",128, 164, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listlockunspent( const JSONRPCRequest & request)",56, 164, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"settxfee( const JSONRPCRequest & request)",42, 142, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getwalletinfo( const JSONRPCRequest & request)",69, 228, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listwalletdir( const JSONRPCRequest & request)",35, 76, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listwallets( const JSONRPCRequest & request)",34, 79, 16, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"loadwallet( const JSONRPCRequest & request)",45, 130, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"createwallet( const JSONRPCRequest & request)",59, 188, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"unloadwallet( const JSONRPCRequest & request)",43, 147, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"resendwallettransactions( const JSONRPCRequest & request)",43, 122, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listunspent( const JSONRPCRequest & request)",200, 174, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"FundTransaction( CWallet * const pwallet , CMutableTransaction & tx , CAmount & fee_out , int & change_position , UniValue options)",115, 137, 16, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"fundrawtransaction( const JSONRPCRequest & request)",93, 230, 28, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"signrawtransactionwithwallet( const JSONRPCRequest & request)",76, 158, 36, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"bumpfee( const JSONRPCRequest & request)",155, 223, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"rescanblockchain( const JSONRPCRequest & request)",93, 225, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::ProcessSubScript( const CScript & subscript , UniValue & obj , bool include_addresses = false) const",42, 116, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::DescribeWalletAddressVisitor( CWallet * _pwallet)",1, 84, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const CNoDestination & dest) const",1, 95, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const CKeyID & keyID) const",10, 66, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const CScriptID & scriptID) const",9, 89, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const WitnessV0KeyHash & id) const",9, 65, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const WitnessV0ScriptHash & id) const",12, 74, 8, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddressVisitor::operator ( )( const WitnessUnknown & id) const",1, 93, 4, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"DescribeWalletAddress( CWallet * pwallet , const CTxDestination & dest)",8, 84, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"AddressBookDataToJSON( const CAddressBookData & data , const bool verbose)",9, 88, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getaddressinfo( const JSONRPCRequest & request)",127, 342, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"getaddressesbylabel( const JSONRPCRequest & request)",47, 139, 12, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"listlabels( const JSONRPCRequest & request)",56, 207, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"sethdseed( const JSONRPCRequest & request)",78, 184, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"AddKeypathToMap( const CWallet * pwallet , const CKeyID & keyID , std :: map<CPubKey,KeyOriginInfo> & hd_keypaths)",12, 113, 0, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletprocesspsbt( const JSONRPCRequest & request)",68, 162, 20, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"walletcreatefundedpsbt( const JSONRPCRequest & request)",119, 230, 28, 0
repos/cpp/bitcoin/src/wallet/rpcwallet.cpp,"RegisterWalletRPCCommands( CRPCTable & t)",5, 70, 4, 0
repos/cpp/bitcoin/src/wallet/wallettool.cpp,"WalletTool::WalletToolReleaseWallet( CWallet * wallet)",6, 53, 0, 0
repos/cpp/bitcoin/src/wallet/wallettool.cpp,"WalletTool::CreateWallet( const std :: string & name , const fs :: path & path)",26, 144, 4, 0
repos/cpp/bitcoin/src/wallet/wallettool.cpp,"WalletTool::LoadWallet( const std :: string & name , const fs :: path & path)",43, 144, 4, 0
repos/cpp/bitcoin/src/wallet/wallettool.cpp,"WalletTool::WalletShowInfo( CWallet * wallet_instance)",11, 116, 4, 0
repos/cpp/bitcoin/src/wallet/wallettool.cpp,"WalletTool::ExecuteWalletToolFunc( const std :: string & command , const std :: string & name)",31, 105, 12, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestPassphraseSingle( const std :: vector<unsigned char> & vchSalt , const SecureString & passphrase , uint32_t rounds , const std :: vector<unsigned char> & correctKey = std :: vector<unsigned char>() , const std :: vector<unsigned char> & correctIV = std :: vector<unsigned char>())",14, 132, 12, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestPassphrase( const std :: vector<unsigned char> & vchSalt , const SecureString & passphrase , uint32_t rounds , const std :: vector<unsigned char> & correctKey = std :: vector<unsigned char>() , const std :: vector<unsigned char> & correctIV = std :: vector<unsigned char>())",8, 119, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestDecrypt( const CCrypter & crypt , const std :: vector<unsigned char> & vchCiphertext , \
 const std :: vector<unsigned char> & vchPlaintext = std :: vector<unsigned char>())",8, 103, 24, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestEncryptSingle( const CCrypter & crypt , const CKeyingMaterial & vchPlaintext , const std :: vector<unsigned char> & vchCiphertextCorrect = std :: vector<unsigned char>())",12, 110, 23, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"TestCrypter::TestEncrypt( const CCrypter & crypt , const std :: vector<unsigned char> & vchPlaintextIn , \
 const std :: vector<unsigned char> & vchCiphertextCorrect = std :: vector<unsigned char>())",7, 115, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( passphrase)",15, 112, 32, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( encrypt)",14, 115, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_crypto_tests.cpp,"BOOST_AUTO_TEST_CASE( decrypt)",20, 114, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_test_fixture.cpp,"WalletTestingSetup::WalletTestingSetup( const std :: string & chainName)",9, 96, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_test_fixture.cpp,"WalletTestingSetup::~WalletTestingSetup()",4, 46, 4, 0
repos/cpp/bitcoin/src/wallet/test/db_tests.cpp,"BOOST_AUTO_TEST_CASE( getwalletenv_file)",13, 82, 4, 0
repos/cpp/bitcoin/src/wallet/test/db_tests.cpp,"BOOST_AUTO_TEST_CASE( getwalletenv_directory)",10, 80, 4, 0
repos/cpp/bitcoin/src/wallet/test/db_tests.cpp,"BOOST_AUTO_TEST_CASE( getwalletenv_g_dbenvs_multiple)",13, 84, 4, 0
repos/cpp/bitcoin/src/wallet/test/db_tests.cpp,"BOOST_AUTO_TEST_CASE( getwalletenv_g_dbenvs_free_instance)",16, 87, 4, 0
repos/cpp/bitcoin/src/wallet/test/init_test_fixture.cpp,"InitWalletDirTestingSetup::InitWalletDirTestingSetup( const std :: string & chainName)",26, 113, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_test_fixture.cpp,"InitWalletDirTestingSetup::~InitWalletDirTestingSetup()",4, 56, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_test_fixture.cpp,"InitWalletDirTestingSetup::SetWalletDir( const fs :: path & walletdir_path)",4, 77, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"AddKey( CWallet & wallet , const CKey & key)",5, 53, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( scan_for_wallet_transactions , TestChain100Setup)",79, 146, 8, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( importmulti_rescan , TestChain100Setup)",56, 126, 8, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( importwallet_rescan , TestChain100Setup)",60, 126, 8, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( coin_mark_dirty_immature_credit , TestChain100Setup)",20, 78, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"AddTx( CWallet & wallet , uint32_t lockTime , int64_t mockTime , int64_t blockTime)",28, 94, 0, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_AUTO_TEST_CASE( ComputeTimeSmart)",25, 78, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_AUTO_TEST_CASE( LoadReceiveRequests)",13, 52, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"ListCoinsTestingSetup::ListCoinsTestingSetup()",15, 162, 8, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"ListCoinsTestingSetup::~ListCoinsTestingSetup()",4, 29, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"ListCoinsTestingSetup::AddTx( CRecipient recipient)",23, 124, 8, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( ListCoins , ListCoinsTestingSetup)",60, 92, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( wallet_disableprivkeys , TestChain100Setup)",10, 122, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"CalculateNestedKeyhashInputSize( bool use_max_sig)",34, 137, 4, 0
repos/cpp/bitcoin/src/wallet/test/wallet_tests.cpp,"BOOST_FIXTURE_TEST_CASE( dummy_input_size_test , TestChain100Setup)",5, 95, 4, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"add_coin( const CAmount & nValue , int nInput , std :: vector<CInputCoin> & set)",7, 86, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"add_coin( const CAmount & nValue , int nInput , CoinSet & set)",7, 70, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"add_coin( const CAmount & nValue , int nAge = 6 * 24 , bool fIsFromMe = false , int nInput = 0)",24, 108, 4, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"empty_wallet( void)",6, 31, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"equal_sets( CoinSet a , CoinSet b)",5, 99, 4, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"make_hard_case( int utxos , std :: vector<CInputCoin> & utxo_pool)",11, 95, 8, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"GroupCoins( const std :: vector<CInputCoin> & coins)",7, 82, 0, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"GroupCoins( const std :: vector<COutput> & coins)",7, 292, 4, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"BOOST_AUTO_TEST_CASE( bnb_search_test)",144, 169, 4, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"BOOST_AUTO_TEST_CASE( knapsack_solver_test)",278, 173, 8, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"BOOST_AUTO_TEST_CASE( ApproximateBestSubset)",21, 155, 4, 0
repos/cpp/bitcoin/src/wallet/test/coinselector_tests.cpp,"BOOST_AUTO_TEST_CASE( SelectCoins_test)",35, 159, 20, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_default)",9, 79, 4, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_custom)",9, 78, 4, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_does_not_exist)",6, 65, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_is_not_directory)",6, 67, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_is_not_relative)",6, 66, 0, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_no_trailing)",9, 79, 4, 0
repos/cpp/bitcoin/src/wallet/test/init_tests.cpp,"BOOST_AUTO_TEST_CASE( walletinit_verify_walletdir_no_trailing2)",9, 79, 4, 0
repos/cpp/bitcoin/src/wallet/test/psbt_wallet_tests.cpp,"BOOST_AUTO_TEST_CASE( parse_hd_keypath)",73, 137, 4, 0
repos/cpp/bitcoin/src/index/base.cpp,"FatalError( const char * fmt , const Args & ... args)",10, 77, 8, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::DB::DB( const fs :: path & path , size_t n_cache_size , bool f_memory , bool f_wipe , bool f_obfuscate)",3, 109, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::DB::ReadBestBlock( CBlockLocator & locator) const",8, 64, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::DB::WriteBestBlock( const CBlockLocator & locator)",4, 65, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::~BaseIndex()",5, 24, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::Init()",16, 74, 8, 0
repos/cpp/bitcoin/src/index/base.cpp,"EXCLUSIVE_LOCKS_REQUIRED( cs_main)",15, 106, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::ThreadSync()",58, 88, 12, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::WriteBestBlock( const CBlockIndex * block_index)",8, 72, 4, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::BlockConnected( const std :: shared_ptr<const CBlock> & block , const CBlockIndex * pindex , const std :: vector<CTransactionRef> & txn_conflicted)",37, 102, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::ChainStateFlushed( const CBlockLocator & locator)",37, 106, 4, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::BlockUntilSyncedToCurrentChain()",23, 86, 4, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::Interrupt()",4, 28, 0, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::Start()",13, 80, 4, 0
repos/cpp/bitcoin/src/index/base.cpp,"BaseIndex::Stop()",8, 41, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"CDiskTxPos::SerializationOp( Stream & s , Operation ser_action)",4, 67, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"CDiskTxPos::CDiskTxPos( const FlatFilePos & blockIn , unsigned int nTxOffsetIn)",2, 138, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"CDiskTxPos::CDiskTxPos()",3, 19, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"CDiskTxPos::SetNull()",4, 32, 8, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::DB::DB( size_t n_cache_size , bool f_memory , bool f_wipe)",3, 88, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::DB::ReadTxPos( const uint256 & txid , CDiskTxPos & pos) const",4, 72, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::DB::WriteTxs( const std :: vector<std::pair<uint256,CDiskTxPos>> & v_pos)",8, 85, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"WriteTxIndexMigrationBatches( CDBWrapper & newdb , CDBWrapper & olddb , CDBBatch & batch_newdb , CDBBatch & batch_olddb , const std :: pair<unsigned char,uint256> & begin_key , const std :: pair<unsigned char,uint256> & end_key)",13, 93, 41, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::DB::MigrateData( CBlockTreeDB & block_tree_db , const CBlockLocator & best_locator)",119, 100, 12, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::TxIndex( size_t n_cache_size , bool f_memory , bool f_wipe)",3, 68, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::~TxIndex()",1, 23, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::Init()",13, 80, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::WriteBlock( const CBlock & block , const CBlockIndex * pindex)",14, 83, 4, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::GetDB() const",1, 56, 0, 0
repos/cpp/bitcoin/src/index/txindex.cpp,"TxIndex::FindTx( const uint256 & tx_hash , uint256 & block_hash , CTransactionRef & tx) const",27, 93, 0, 0
repos/cpp/bitcoin/src/node/transaction.cpp,"TransactionErrorString( const TransactionError err)",25, 76, 12, 0
repos/cpp/bitcoin/src/node/transaction.cpp,"BroadcastTransaction( const CTransactionRef tx , uint256 & hashTx , std :: string & err_string , const CAmount & highfee)",63, 130, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"GetDifficulty( const CBlockIndex * blockindex)",21, 71, 8, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"ComputeNextBlockAndDepth( const CBlockIndex * tip , const CBlockIndex * blockindex , const CBlockIndex * & next)",9, 117, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"blockheaderToJSON( const CBlockIndex * tip , const CBlockIndex * blockindex)",25, 88, 8, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"blockToJSON( const CBlock & block , const CBlockIndex * tip , const CBlockIndex * blockindex , bool txDetails)",41, 120, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockcount( const JSONRPCRequest & request)",19, 79, 16, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getbestblockhash( const JSONRPCRequest & request)",19, 91, 16, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"RPCNotifyBlockChange( bool ibd , const CBlockIndex * pindex)",9, 64, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"waitfornewblock( const JSONRPCRequest & request)",40, 189, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"waitforblock( const JSONRPCRequest & request)",44, 143, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"waitforblockheight( const JSONRPCRequest & request)",44, 149, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"syncwithvalidationinterfacequeue( const JSONRPCRequest & request)",17, 136, 16, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getdifficulty( const JSONRPCRequest & request)",19, 108, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"EntryDescriptionString()",28, 205, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"EXCLUSIVE_LOCKS_REQUIRED( pool . cs)",59, 124, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"MempoolToJSON( const CTxMemPool & pool , bool verbose)",23, 61, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getrawmempool( const JSONRPCRequest & request)",34, 138, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getmempoolancestors( const JSONRPCRequest & request)",69, 138, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getmempooldescendants( const JSONRPCRequest & request)",69, 138, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getmempoolentry( const JSONRPCRequest & request)",35, 118, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockhash( const JSONRPCRequest & request)",27, 93, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockheader( const JSONRPCRequest & request)",69, 135, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"GetBlockChecked( const CBlockIndex * pblockindex)",18, 81, 8, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblock( const JSONRPCRequest & request)",87, 167, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CCoinsStats::CCoinsStats()",1, 121, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"ApplyStats( CCoinsStats & stats , CHashWriter & ss , const uint256 & hash , const std :: map<uint32_t,Coin> & outputs)",17, 122, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"GetUTXOStats( CCoinsView * view , CCoinsStats & stats)",37, 68, 8, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"pruneblockchain( const JSONRPCRequest & request)",52, 162, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"gettxoutsetinfo( const JSONRPCRequest & request)",44, 102, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"gettxout( const JSONRPCRequest & request)",78, 189, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"verifychain( const JSONRPCRequest & request)",30, 153, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"SoftForkMajorityDesc( int version , const CBlockIndex * pindex , const Consensus :: Params & consensusParams)",19, 119, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"SoftForkDesc( const std :: string & name , int version , const CBlockIndex * pindex , const Consensus :: Params & consensusParams)",8, 136, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"BIP9SoftForkDesc( const Consensus :: Params & consensusParams , Consensus :: DeploymentPos id)",31, 104, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"BIP9SoftForkDescPushBack( UniValue & bip9_softforks , const Consensus :: Params & consensusParams , Consensus :: DeploymentPos id)",8, 134, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockchaininfo( const JSONRPCRequest & request)",104, 161, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CompareBlocksByHeight::operator ( )( const CBlockIndex * a , const CBlockIndex * b) const",10, 77, 8, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getchaintips( const JSONRPCRequest & request)",105, 146, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"MempoolInfoToJSON( const CTxMemPool & pool)",13, 118, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getmempoolinfo( const JSONRPCRequest & request)",25, 190, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"preciousblock( const JSONRPCRequest & request)",38, 125, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"invalidateblock( const JSONRPCRequest & request)",39, 124, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"reconsiderblock( const JSONRPCRequest & request)",38, 127, 16, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getchaintxstats( const JSONRPCRequest & request)",76, 173, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CalculateTruncatedMedian( std :: vector<T> & scores)",14, 62, 8, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CalculatePercentilesByWeight( CAmount result [ NUM_GETBLOCKSTATS_PERCENTILES ] , std :: vector<std::pair<CAmount,int64_t>> & scores , int64_t total_weight)",28, 153, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"SetHasKeys( const std :: set<T> & set)",1, 70, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"SetHasKeys( const std :: set<T> & set , const Tk & key , const Args & ... args)",4, 90, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"getblockstats( const JSONRPCRequest & request)",266, 179, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"savemempool( const JSONRPCRequest & request)",25, 104, 16, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"FindScriptPubKey( std :: atomic<int> & scan_progress , const std :: atomic<bool> & should_abort , int64_t & count , CCoinsViewCursor * cursor , const std :: set<CScript> & needles , std :: map<COutPoint,Coin> & out_results)",27, 212, 0, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CoinsViewScanReserver::CoinsViewScanReserver()",1, 65, 4, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CoinsViewScanReserver::reserve()",10, 57, 8, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"CoinsViewScanReserver::~CoinsViewScanReserver()",6, 61, 12, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"scantxoutset( const JSONRPCRequest & request)",167, 176, 20, 0
repos/cpp/bitcoin/src/rpc/blockchain.cpp,"RegisterBlockchainRPCCommands( CRPCTable & t)",5, 70, 4, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"GetNetworkHashPS( int lookup , int height)",36, 103, 4, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"getnetworkhashps( const JSONRPCRequest & request)",24, 158, 4, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"generateBlocks( std :: shared_ptr<CReserveScript> coinbaseScript , int nGenerate , uint64_t nMaxTries , bool keepScript)",47, 148, 8, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"generatetoaddress( const JSONRPCRequest & request)",38, 133, 12, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"getmininginfo( const JSONRPCRequest & request)",39, 181, 20, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"prioritisetransaction( const JSONRPCRequest & request)",36, 148, 20, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"BIP22ValidationResult( const CValidationState & state)",17, 73, 8, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"gbt_vb_name( const Consensus :: DeploymentPos pos)",8, 76, 4, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"getblocktemplate( const JSONRPCRequest & request)",385, 348, 12, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"submitblock_StateCatcher::submitblock_StateCatcher( const uint256 & hashIn)",1, 102, 4, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"submitblock_StateCatcher::BlockChecked( const CBlock & block , const CValidationState & stateIn)",6, 87, 4, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"submitblock( const JSONRPCRequest & request)",65, 144, 20, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"submitheader( const JSONRPCRequest & request)",39, 122, 12, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"estimatesmartfee( const JSONRPCRequest & request)",64, 122, 20, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"estimaterawfee( const JSONRPCRequest & request)",105, 161, 12, 0
repos/cpp/bitcoin/src/rpc/mining.cpp,"RegisterMiningRPCCommands( CRPCTable & t)",5, 70, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"HexToPubKey( const std :: string & hex_in)",11, 89, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"AddrToPubKey( CKeyStore * const keystore , const std :: string & addr_in)",19, 113, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"CreateMultisigRedeemscript( const int required , const std :: vector<CPubKey> & pubkeys)",21, 162, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::DescribeAddressVisitor()",1, 41, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const CNoDestination & dest) const",4, 58, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const CKeyID & keyID) const",7, 51, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const CScriptID & scriptID) const",7, 57, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const WitnessV0KeyHash & id) const",9, 69, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const WitnessV0ScriptHash & id) const",9, 69, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddressVisitor::operator ( )( const WitnessUnknown & id) const",8, 83, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"DescribeAddress( const CTxDestination & dest)",4, 65, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"ParseConfirmTarget( const UniValue & value , unsigned int max_target)",8, 125, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCErrorFromTransactionError( TransactionError terr)",18, 65, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"JSONRPCTransactionError( TransactionError terr , const std :: string & err_string)",8, 95, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"Section::Section( const std :: string & left , const std :: string & right)",2, 63, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"Sections::PushSection( const Section & s)",5, 58, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"Sections::Push( const RPCArg & arg , const size_t current_indent = 5 , const OuterType outer_type = OuterType :: NAMED_ARG)",52, 129, 16, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"Sections::ToString() const",36, 76, 16, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCHelpMan::RPCHelpMan( std :: string name , std :: string description , std :: vector<RPCArg> args , RPCResults results , RPCExamples examples)",13, 134, 0, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCResults::ToDescriptionString() const",13, 56, 12, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCExamples::ToDescriptionString() const",4, 75, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCHelpMan::IsValidNumArgs( size_t num_args) const",11, 71, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCHelpMan::ToString() const",49, 112, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCArg::IsOptional() const",8, 81, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCArg::ToDescriptionString() const",66, 92, 12, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCArg::ToStringObj( const bool oneline) const",38, 73, 8, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"RPCArg::ToString( const bool oneline) const",40, 81, 4, 0
repos/cpp/bitcoin/src/rpc/util.cpp,"ParseRange( const UniValue & value)",13, 131, 8, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"CRPCConvertTable::convert( const std :: string & method , int idx)",3, 65, 8, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"CRPCConvertTable::convert( const std :: string & method , const std :: string & name)",3, 72, 8, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"CRPCConvertTable::CRPCConvertTable()",12, 78, 44, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"ParseNonRFCJSONValue( const std :: string & strVal)",8, 77, 8, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"RPCConvertValues( const std :: string & strMethod , const std :: vector<std::string> & strParams)",18, 99, 0, 0
repos/cpp/bitcoin/src/rpc/client.cpp,"RPCConvertNamedValues( const std :: string & strMethod , const std :: vector<std::string> & strParams)",24, 142, 12, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"validateaddress( const JSONRPCRequest & request)",48, 146, 16, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"createmultisig( const JSONRPCRequest & request)",64, 210, 12, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"getdescriptorinfo( const JSONRPCRequest & request)",39, 152, 16, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"deriveaddresses( const JSONRPCRequest & request)",88, 218, 16, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"verifymessage( const JSONRPCRequest & request)",58, 155, 20, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"signmessagewithprivkey( const JSONRPCRequest & request)",41, 119, 20, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"setmocktime( const JSONRPCRequest & request)",30, 114, 20, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"RPCLockedMemoryInfo()",12, 69, 4, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"RPCMallocInfo()",16, 43, 4, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"getmemoryinfo( const JSONRPCRequest & request)",52, 208, 12, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"EnableOrDisableLogCategories( UniValue cats , bool enable)",17, 90, 12, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"logging( const JSONRPCRequest & request)",70, 142, 20, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"echo( const JSONRPCRequest & request)",16, 139, 16, 0
repos/cpp/bitcoin/src/rpc/misc.cpp,"RegisterMiscRPCCommands( CRPCTable & t)",5, 70, 4, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"TxToJSON( const CTransaction & tx , const uint256 hashBlock , UniValue & entry)",25, 91, 16, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"getrawtransaction( const JSONRPCRequest & request)",145, 155, 12, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"gettxoutproof( const JSONRPCRequest & request)",95, 155, 20, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"verifytxoutproof( const JSONRPCRequest & request)",44, 139, 12, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"ConstructTransaction( const UniValue & inputs_in , const UniValue & outputs_in , const UniValue & locktime , const UniValue & rbf)",112, 143, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"createrawtransaction( const JSONRPCRequest & request)",67, 217, 36, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"decoderawtransaction( const JSONRPCRequest & request)",74, 166, 20, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"decodescript( const JSONRPCRequest & request)",80, 147, 12, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"TxInErrorToJSON( const CTxIn & txin , UniValue & vErrorsRet , const std :: string & strMessage)",15, 107, 8, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"combinerawtransaction( const JSONRPCRequest & request)",83, 152, 8, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"SignTransaction( interfaces :: Chain & chain , CMutableTransaction & mtx , const UniValue & prevTxsUnival , CBasicKeyStore * keystore , bool is_temp_keystore , const UniValue & hashType)",148, 183, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"signrawtransactionwithkey( const JSONRPCRequest & request)",82, 158, 36, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"signrawtransaction( const JSONRPCRequest & request)",7, 106, 8, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"sendrawtransaction( const JSONRPCRequest & request)",46, 140, 12, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"testmempoolaccept( const JSONRPCRequest & request)",83, 151, 16, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"WriteHDKeypath( std :: vector<uint32_t> & keypath)",18, 66, 0, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"decodepsbt( const JSONRPCRequest & request)",274, 147, 12, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"combinepsbt( const JSONRPCRequest & request)",50, 136, 20, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"finalizepsbt( const JSONRPCRequest & request)",58, 142, 12, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"createpsbt( const JSONRPCRequest & request)",75, 217, 36, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"converttopsbt( const JSONRPCRequest & request)",66, 170, 28, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"utxoupdatepsbt( const JSONRPCRequest & request)",63, 129, 8, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"joinpsbts( const JSONRPCRequest & request)",73, 186, 16, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"analyzepsbt( const JSONRPCRequest & request)",193, 186, 16, 0
repos/cpp/bitcoin/src/rpc/rawtransaction.cpp,"RegisterRawTransactionRPCCommands( CRPCTable & t)",5, 70, 4, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getconnectioncount( const JSONRPCRequest & request)",21, 110, 8, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"ping( const JSONRPCRequest & request)",25, 137, 16, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getpeerinfo( const JSONRPCRequest & request)",133, 203, 12, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"addnode( const JSONRPCRequest & request)",49, 197, 20, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"disconnectnode( const JSONRPCRequest & request)",45, 138, 16, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getaddednodeinfo( const JSONRPCRequest & request)",69, 171, 20, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getnettotals( const JSONRPCRequest & request)",47, 117, 12, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"GetNetworksInfo()",20, 93, 8, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getnetworkinfo( const JSONRPCRequest & request)",78, 163, 12, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"setban( const JSONRPCRequest & request)",79, 265, 20, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"listbanned( const JSONRPCRequest & request)",36, 82, 8, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"clearbanned( const JSONRPCRequest & request)",21, 82, 8, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"setnetworkactive( const JSONRPCRequest & request)",23, 120, 20, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"getnodeaddresses( const JSONRPCRequest & request)",53, 248, 20, 0
repos/cpp/bitcoin/src/rpc/net.cpp,"RegisterNetRPCCommands( CRPCTable & t)",5, 70, 4, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCRequestObj( const std :: string & strMethod , const UniValue & params , const UniValue & id)",8, 101, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCReplyObj( const UniValue & result , const UniValue & error , const UniValue & id)",11, 92, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCReply( const UniValue & result , const UniValue & error , const UniValue & id)",5, 92, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCError( int code , const std :: string & message)",7, 60, 0, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"GetAuthCookieFile( bool temp = false)",8, 71, 4, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"GenerateAuthCookie( std :: string * cookie_out)",31, 119, 8, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"GetAuthCookie( std :: string * cookie_out)",15, 45, 4, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"DeleteAuthCookie()",8, 126, 8, 0
repos/cpp/bitcoin/src/rpc/protocol.cpp,"JSONRPCProcessBatchReply( const UniValue & in , size_t num)",19, 79, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCCommandExecution::RPCCommandExecution( const std :: string & method)",5, 123, 8, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCCommandExecution::~RPCCommandExecution()",5, 53, 8, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCServer::OnStarted( std :: function<void()> slot)",4, 55, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCServer::OnStopped( std :: function<void()> slot)",4, 55, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCTypeCheck( const UniValue & params , const std :: list<UniValueType> & typesExpected , bool fAllowNull)",16, 64, 18, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCTypeCheckArgument( const UniValue & value , const UniValueType & typeExpected)",6, 140, 8, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCTypeCheckObj( const UniValue & o , const std :: map<std::string,UniValueType> & typesExpected , bool fAllowNull , bool fStrict)",29, 94, 8, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"AmountFromValue( const UniValue & value)",11, 80, 8, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"ParseHashV( const UniValue & v , std :: string strName)",9, 146, 8, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"ParseHashO( const UniValue & o , std :: string strKey)",4, 58, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"ParseHexV( const UniValue & v , std :: string strName)",9, 109, 8, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"ParseHexO( const UniValue & o , std :: string strKey)",4, 76, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::help( const std :: string & strCommand , const JSONRPCRequest & helpreq) const",53, 96, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"help( const JSONRPCRequest & jsonRequest)",22, 112, 20, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"stop( const JSONRPCRequest & jsonRequest)",22, 79, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"uptime( const JSONRPCRequest & jsonRequest)",18, 104, 24, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"getrpcinfo( const JSONRPCRequest & request)",27, 84, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::CRPCTable()",11, 87, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::operator [ ]( const std :: string & name) const",7, 91, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::appendCommand( const std :: string & name , const CRPCCommand * pcmd)",13, 91, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"StartRPC()",6, 44, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"InterruptRPC()",6, 48, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"StopRPC()",7, 44, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"IsRPCRunning()",4, 26, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"SetRPCWarmupStatus( const std :: string & newStatus)",5, 54, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"SetRPCWarmupFinished()",6, 28, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCIsInWarmup( std :: string * outStatus)",7, 43, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"JSONRPCRequest::parse( const UniValue & valRequest)",32, 112, 8, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"IsDeprecatedRPCEnabled( const std :: string & method)",6, 98, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"JSONRPCExecOne( JSONRPCRequest jreq , const UniValue & req)",22, 88, 37, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"JSONRPCExecBatch( const JSONRPCRequest & jreq , const UniValue & vReq)",8, 79, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"transformNamedArguments( const JSONRPCRequest & in , const std :: vector<std::string> & argNames)",45, 121, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::execute( const JSONRPCRequest & request) const",29, 82, 12, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"CRPCTable::listCommands() const",6, 73, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"HelpExampleCli( const std :: string & methodname , const std :: string & args)",4, 83, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"HelpExampleRpc( const std :: string & methodname , const std :: string & args)",5, 133, 8, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCSetTimerInterfaceIfUnset( RPCTimerInterface * iface)",5, 59, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCSetTimerInterface( RPCTimerInterface * iface)",4, 52, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCUnsetTimerInterface( RPCTimerInterface * iface)",5, 54, 0, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCRunLater( const std :: string & name , std :: function<void()> func , int64_t nSeconds)",8, 118, 4, 0
repos/cpp/bitcoin/src/rpc/server.cpp,"RPCSerializationFlags()",7, 79, 4, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_constructor)",47, 50, 4, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_typecheck)",41, 63, 4, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_set)",58, 52, 4, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_array)",46, 52, 4, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_object)",115, 65, 4, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"BOOST_AUTO_TEST_CASE( univalue_readwrite)",42, 71, 7, 0
repos/cpp/bitcoin/src/univalue/test/object.cpp,"main( int argc , char * argv [ ])",10, 34, 0, 0
repos/cpp/bitcoin/src/univalue/test/test_json.cpp,"main( int argc , char * argv [ ])",12, 78, 8, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"rtrim( std :: string s)",5, 46, 4, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"runtest( std :: string filename , const std :: string & jdata)",23, 68, 0, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"runtest_file( const char * filename_)",23, 59, 16, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"unescape_unicode_test()",21, 55, 4, 0
repos/cpp/bitcoin/src/univalue/test/unitester.cpp,"main( int argc , char * argv [ ])",10, 72, 4, 0
repos/cpp/bitcoin/src/univalue/test/no_nul.cpp,"main( int argc , char * argv [ ])",6, 41, 4, 0
repos/cpp/bitcoin/src/univalue/gen/gen.cpp,"initJsonEscape()",20, 94, 4, 0
repos/cpp/bitcoin/src/univalue/gen/gen.cpp,"outputEscape()",36, 61, 0, 1
repos/cpp/bitcoin/src/univalue/gen/gen.cpp,"main( int argc , char * argv [ ])",6, 34, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_read.cpp,"json_isdigit( int ch)",4, 41, 4, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_read.cpp,"hatoui( const char * first , const char * last , unsigned int & out)",25, 63, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_read.cpp,"getJsonToken( std :: string & tokenVal , unsigned int & consumed , const char * raw , const char * end)",195, 76, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_read.cpp,"UniValue::read( const char * raw , size_t size)",198, 76, 12, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::clear()",7, 23, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setNull()",5, 25, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setBool( bool val_)",8, 34, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"validNumStr( const std :: string & s)",7, 90, 4, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setNumStr( const std :: string & val_)",10, 50, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setInt( uint64_t val_)",8, 37, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setInt( int64_t val_)",8, 36, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setFloat( double val_)",10, 42, 4, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setStr( const std :: string & val_)",7, 47, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setArray()",6, 26, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::setObject()",6, 27, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::push_back( const UniValue & val_)",8, 47, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::push_backV( const std :: vector<UniValue> & vec)",9, 60, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::__pushKV( const std :: string & key , const UniValue & val_)",5, 70, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::pushKV( const std :: string & key , const UniValue & val_)",12, 68, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::pushKVs( const UniValue & obj)",10, 49, 4, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::getObjMap( std :: map<std::string,UniValue> & kv) const",9, 67, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::findKey( const std :: string & key , size_t & retIdx) const",11, 69, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::checkObject( const std :: map<std::string,UniValue::VType> & t) const",17, 81, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::operator [ ]( const std :: string & key) const",11, 67, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"UniValue::operator [ ]( size_t index) const",9, 57, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"uvTypeName( UniValue :: VType t)",14, 42, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue.cpp,"find_value( const UniValue & obj , const std :: string & name)",8, 73, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"ParsePrechecks( const std :: string & str)",10, 108, 4, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"ParseInt32( const std :: string & str , int32_t * out)",15, 101, 4, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"ParseInt64( const std :: string & str , int64_t * out)",14, 102, 4, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"ParseDouble( const std :: string & str , double * out)",13, 92, 4, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::getKeys() const",6, 77, 8, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::getValues() const",6, 86, 8, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_bool() const",6, 77, 8, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_str() const",6, 76, 8, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_int() const",9, 78, 8, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_int64() const",9, 78, 8, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_real() const",9, 76, 8, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_obj() const",6, 77, 8, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_get.cpp,"UniValue::get_array() const",6, 76, 8, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"json_escape( const std :: string & inS)",17, 55, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"UniValue::write( unsigned int prettyIndent , unsigned int indentLevel) const",33, 60, 28, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"indentStr( unsigned int prettyIndent , unsigned int indentLevel , std :: string & s)",4, 91, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"UniValue::writeArray( unsigned int prettyIndent , unsigned int indentLevel , std :: string & s) const",21, 101, 0, 0
repos/cpp/bitcoin/src/univalue/lib/univalue_write.cpp,"UniValue::writeObject( unsigned int prettyIndent , unsigned int indentLevel , std :: string & s) const",23, 102, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"zmq_send_multipart( void * sock , const void * data , size_t size , ...)",41, 78, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQAbstractPublishNotifier::Initialize( void * pcontext)",49, 141, 8, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQAbstractPublishNotifier::Shutdown()",29, 89, 4, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQAbstractPublishNotifier::SendMessage( const char * command , const void * data , size_t size)",16, 123, 4, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQPublishHashBlockNotifier::NotifyBlock( const CBlockIndex * pindex)",9, 74, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQPublishHashTransactionNotifier::NotifyTransaction( const CTransaction & transaction)",9, 92, 0, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQPublishRawBlockNotifier::NotifyBlock( const CBlockIndex * pindex)",20, 89, 4, 0
repos/cpp/bitcoin/src/zmq/zmqpublishnotifier.cpp,"CZMQPublishRawTransactionNotifier::NotifyTransaction( const CTransaction & transaction)",8, 91, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"zmqError( const char * str)",4, 82, 4, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::CZMQNotificationInterface()",3, 75, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::~CZMQNotificationInterface()",9, 98, 4, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::GetActiveNotifiers() const",8, 93, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::Create()",40, 142, 12, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::Initialize()",39, 123, 12, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::Shutdown()",16, 116, 12, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::UpdatedBlockTip( const CBlockIndex * pindexNew , const CBlockIndex * pindexFork , bool fInitialDownload)",19, 132, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::TransactionAddedToMempool( const CTransactionRef & ptx)",20, 97, 4, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::BlockConnected( const std :: shared_ptr<const CBlock> & pblock , const CBlockIndex * pindexConnected , const std :: vector<CTransactionRef> & vtxConflicted)",7, 179, 0, 0
repos/cpp/bitcoin/src/zmq/zmqnotificationinterface.cpp,"CZMQNotificationInterface::BlockDisconnected( const std :: shared_ptr<const CBlock> & pblock)",7, 95, 0, 0
repos/cpp/bitcoin/src/zmq/zmqabstractnotifier.cpp,"CZMQAbstractNotifier::~CZMQAbstractNotifier()",4, 46, 0, 0
repos/cpp/bitcoin/src/zmq/zmqabstractnotifier.cpp,"CZMQAbstractNotifier::NotifyBlock( const CBlockIndex *)",4, 76, 0, 0
repos/cpp/bitcoin/src/zmq/zmqabstractnotifier.cpp,"CZMQAbstractNotifier::NotifyTransaction( const CTransaction &)",4, 82, 0, 0
repos/cpp/bitcoin/src/zmq/zmqrpc.cpp,"getzmqnotifications( const JSONRPCRequest & request)",37, 90, 12, 0
repos/cpp/bitcoin/src/zmq/zmqrpc.cpp,"RegisterZMQRPCCommands( CRPCTable & t)",6, 42, 0, 0
repos/cpp/bitcoin/src/policy/rbf.cpp,"SignalsOptInRBF( const CTransaction & tx)",9, 57, 8, 0
repos/cpp/bitcoin/src/policy/rbf.cpp,"IsRBFOptIn( const CTransaction & tx , const CTxMemPool & pool)",31, 107, 4, 0
repos/cpp/bitcoin/src/policy/feerate.cpp,"CFeeRate::CFeeRate( const CAmount & nFeePaid , size_t nBytes_)",10, 70, 4, 0
repos/cpp/bitcoin/src/policy/feerate.cpp,"CFeeRate::GetFee( size_t nBytes_) const",16, 70, 4, 0
repos/cpp/bitcoin/src/policy/feerate.cpp,"CFeeRate::ToString() const",4, 98, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"StringForFeeEstimateHorizon( FeeEstimateHorizon horizon)",12, 79, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"StringForFeeReason( FeeReason reason)",19, 80, 8, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"FeeModeFromString( const std :: string & mode_string , FeeEstimateMode & fee_estimate_mode)",13, 93, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::GetMaxConfirms() const",1, 75, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::TxConfirmStats( const std :: vector<double> & defaultBuckets , const std :: map<double,unsigned int> & defaultBucketMap , unsigned int maxPeriods , double _decay , unsigned int _scale)",22, 92, 31, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::resizeInMemoryCounters( size_t newbuckets)",8, 107, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::ClearCurrent( unsigned int nBlockHeight)",7, 72, 8, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::Record( int blocksToConfirm , double val)",13, 67, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::UpdateMovingAverages()",11, 58, 8, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::EstimateMedianVal( int confTarget , double sufficientTxVal , double successBreakPoint , bool requireGreater , unsigned int nBlockHeight , EstimationResult * result) const",151, 183, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::Write( CAutoFile & fileout) const",9, 53, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::Read( CAutoFile & filein , int nFileVersion , size_t numBuckets)",55, 129, 8, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::NewTx( unsigned int nBlockHeight , double val)",7, 74, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"TxConfirmStats::removeTx( unsigned int entryHeight , unsigned int nBestSeenHeight , unsigned int bucketindex , bool inBlock)",36, 126, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::removeTx( uint256 hash , bool inBlock)",14, 106, 8, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::CBlockPolicyEstimator()",17, 139, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::~CBlockPolicyEstimator()",3, 48, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::processTransaction( const CTxMemPoolEntry & entry , bool validFeeEstimate)",38, 100, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::processBlockTx( unsigned int nBlockHeight , const CTxMemPoolEntry * entry)",26, 102, 8, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::processBlock( unsigned int nBlockHeight , std :: vector<const CTxMemPoolEntry*> & entries)",48, 169, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateFee( int confTarget) const",8, 93, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateRawFee( int confTarget , double successThreshold , FeeEstimateHorizon horizon , EstimationResult * result) const",37, 148, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::HighestTargetTracked( FeeEstimateHorizon horizon) const",18, 107, 8, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::BlockSpan() const",7, 54, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::HistoricalBlockSpan() const",9, 78, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::MaxUsableEstimate() const",5, 113, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateCombinedFee( unsigned int confTarget , double successThreshold , bool checkShorterHorizon , EstimationResult * result) const",35, 171, 16, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateConservativeFee( unsigned int doubleTarget , EstimationResult * result) const",16, 149, 8, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::estimateSmartFee( int confTarget , FeeCalculation * feeCalc , bool conservative) const",77, 115, 0, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::Write( CAutoFile & fileout) const",24, 106, 8, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::Read( CAutoFile & filein)",59, 147, 12, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"CBlockPolicyEstimator::FlushUnconfirmed()",12, 134, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"FeeFilterRounder::FeeFilterRounder( const CFeeRate & minIncrementalFee)",8, 124, 4, 0
repos/cpp/bitcoin/src/policy/fees.cpp,"FeeFilterRounder::round( CAmount currentMinFee)",8, 91, 4, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"GetDustThreshold( const CTxOut & txout , const CFeeRate & dustRelayFeeIn)",33, 79, 4, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"IsDust( const CTxOut & txout , const CFeeRate & dustRelayFeeIn)",4, 69, 4, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"IsStandard( const CScript & scriptPubKey , txnouttype & whichType)",22, 86, 15, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"IsStandardTx( const CTransaction & tx , std :: string & reason)",63, 80, 8, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"AreInputsStandard( const CTransaction & tx , const CCoinsViewCache & mapInputs)",29, 119, 12, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"IsWitnessStandard( const CTransaction & tx , const CCoinsViewCache & mapInputs)",51, 119, 12, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"GetVirtualTransactionSize( int64_t nWeight , int64_t nSigOpCost)",4, 111, 4, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"GetVirtualTransactionSize( const CTransaction & tx , int64_t nSigOpCost)",4, 78, 0, 0
repos/cpp/bitcoin/src/policy/policy.cpp,"GetVirtualTransactionInputSize( const CTxIn & txin , int64_t nSigOpCost)",4, 83, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::NodeImpl()",1, 53, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::parseParameters( int argc , const char * const argv [ ] , std :: string & error)",4, 90, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::readConfigFiles( std :: string & error)",1, 101, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::softSetArg( const std :: string & arg , const std :: string & value)",1, 120, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::softSetBoolArg( const std :: string & arg , bool value)",1, 114, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::selectParams( const std :: string & network)",1, 86, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getAssumedBlockchainSize()",1, 94, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getAssumedChainStateSize()",1, 94, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNetwork()",1, 77, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::initLogging()",1, 51, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::initParameterInteraction()",1, 77, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getWarnings( const std :: string & type)",1, 92, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getLogCategories()",1, 85, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::baseInitialize()",5, 96, 8, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::appInitMain()",1, 70, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::appShutdown()",5, 32, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::startShutdown()",1, 55, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::shutdownRequested()",1, 70, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::mapPort( bool use_upnp)",9, 41, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::setupServerArgs()",1, 66, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getProxy( Network net , proxyType & proxy_info)",1, 101, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNodeCount( CConnman :: NumConnections flags)",4, 65, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNodesStats( NodesStats & stats)",25, 100, 24, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getBanned( banmap_t & banmap)",8, 46, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::ban( const CNetAddr & net_addr , BanReason reason , int64_t ban_time_offset)",8, 91, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::unban( const CSubNet & ip)",8, 43, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::disconnect( const CNetAddr & net_addr)",7, 56, 12, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::disconnect( NodeId id)",7, 50, 12, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getTotalBytesRecv()",1, 100, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getTotalBytesSent()",1, 100, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getMempoolSize()",1, 66, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getMempoolDynamicUsage()",1, 88, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getHeaderTip( int & height , int64_t & block_time)",10, 65, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNumBlocks()",5, 39, 8, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getLastBlockTime()",8, 98, 8, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getVerificationProgress()",9, 66, 8, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::isInitialBlockDownload()",1, 80, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getReindex()",1, 54, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getImporting()",1, 58, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::setNetworkActive( bool active)",6, 49, 12, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getNetworkActive()",1, 92, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getMaxTxFee()",1, 58, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::estimateSmartFee( int num_blocks , bool conservative , int * returned_target = nullptr)",9, 106, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getDustRelayFee()",1, 67, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::executeRpc( const std :: string & command , const UniValue & params , const std :: string & uri)",8, 109, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::listRpcCommands()",1, 94, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::rpcSetTimerInterfaceIfUnset( RPCTimerInterface * iface)",1, 112, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::rpcUnsetTimerInterface( RPCTimerInterface * iface)",1, 102, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getUnspentOutput( const COutPoint & output , Coin & coin)",5, 72, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getWalletDir()",4, 40, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::listWalletDir()",8, 54, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::getWallets()",8, 70, 8, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::loadWallet( const std :: string & name , std :: string & error , std :: string & warning)",4, 115, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleInitMessage( InitMessageFn fn)",4, 74, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleMessageBox( MessageBoxFn fn)",4, 76, 8, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleQuestion( QuestionFn fn)",4, 74, 8, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleShowProgress( ShowProgressFn fn)",4, 76, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleLoadWallet( LoadWalletFn fn)",4, 128, 8, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyNumConnectionsChanged( NotifyNumConnectionsChangedFn fn)",4, 106, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyNetworkActiveChanged( NotifyNetworkActiveChangedFn fn)",4, 104, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyAlertChanged( NotifyAlertChangedFn fn)",4, 88, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleBannedListChanged( BannedListChangedFn fn)",4, 86, 4, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyBlockTip( NotifyBlockTipFn fn)",7, 120, 8, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::NodeImpl::handleNotifyHeaderTip( NotifyHeaderTipFn fn)",8, 106, 12, 0
repos/cpp/bitcoin/src/interfaces/node.cpp,"interfaces::MakeNode()",1, 68, 0, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::getHeight()",8, 45, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::getBlockHeight( const uint256 & hash)",8, 63, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::getBlockDepth( const uint256 & hash)",6, 69, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::getBlockHash( int height)",6, 52, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::getBlockTime( int height)",6, 52, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::getBlockMedianTimePast( int height)",6, 56, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::haveBlockOnDisk( int height)",5, 85, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::findFirstBlockWithTime( int64_t time , uint256 * hash)",9, 79, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::findFirstBlockWithTimeAndHeight( int64_t time , int height)",14, 101, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::findPruned( int start_height , Optional<int> stop_height)",13, 98, 12, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::findFork( const uint256 & hash , Optional<int> * height)",16, 83, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::isPotentialTip( const uint256 & hash)",6, 91, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::getTipLocator()",1, 82, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::findLocatorFork( const CBlockLocator & locator)",8, 81, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::checkFinalTx( const CTransaction & tx)",5, 55, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::LockImpl::submitToMemoryPool( const CTransactionRef & tx , CAmount absurd_fee , CValidationState & state)",6, 114, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::lock( bool try_lock)",8, 104, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::assumeLocked()",1, 92, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::findBlock( const uint256 & hash , CBlock * block , int64_t * time , int64_t * time_max)",21, 98, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::guessVerificationProgress( const uint256 & block_hash)",5, 91, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::isRBFOptIn( const CTransaction & tx)",5, 68, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::hasDescendantsInMempool( const uint256 & txid)",6, 63, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::relayTransaction( const uint256 & txid)",5, 83, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::getTransactionAncestry( const uint256 & txid , size_t & ancestors , size_t & descendants)",4, 102, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::checkChainLimits( const CTransactionRef & tx)",14, 113, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::estimateSmartFee( int num_blocks , bool conservative , FeeCalculation * calc)",4, 96, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::estimateMaxBlocks()",4, 87, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::mempoolMinFee()",4, 101, 8, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::maxTxFee()",1, 55, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::getPruneMode()",1, 58, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::p2pEnabled()",1, 64, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::isInitialBlockDownload()",1, 80, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::getAdjustedTime()",1, 69, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::initMessage( const std :: string & message)",1, 98, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::initWarning( const std :: string & message)",1, 84, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::initError( const std :: string & message)",1, 80, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::ChainImpl::loadWallet( std :: unique_ptr<Wallet> wallet)",1, 99, 4, 0
repos/cpp/bitcoin/src/interfaces/chain.cpp,"interfaces::MakeChain()",1, 71, 0, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::PendingWalletTxImpl::PendingWalletTxImpl( CWallet & wallet)",1, 88, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::PendingWalletTxImpl::get()",1, 57, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::PendingWalletTxImpl::getVirtualSize()",1, 83, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::PendingWalletTxImpl::commit( WalletValueMap value_map , WalletOrderForm order_form , std :: string & reject_reason)",13, 108, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::MakeWalletTx( interfaces :: Chain :: Lock & locked_chain , CWallet & wallet , const CWalletTx & wtx)",26, 120, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::MakeWalletTxStatus( interfaces :: Chain :: Lock & locked_chain , const CWalletTx & wtx)",19, 103, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::EXCLUSIVE_LOCKS_REQUIRED( wallet . cs_wallet)",9, 70, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::WalletImpl( const std :: shared_ptr<CWallet> & wallet)",1, 86, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::encryptWallet( const SecureString & wallet_passphrase)",4, 71, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::isCrypted()",1, 64, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::lock()",1, 54, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::unlock( const SecureString & wallet_passphrase)",1, 112, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::isLocked()",1, 62, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::changeWalletPassphrase( const SecureString & old_wallet_passphrase , const SecureString & new_wallet_passphrase)",5, 95, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::abortRescan()",1, 61, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::backupWallet( const std :: string & filename)",1, 105, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getWalletName()",1, 73, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getKeyFromPool( bool internal , CPubKey & pub_key)",4, 66, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getPubKey( const CKeyID & address , CPubKey & pub_key)",1, 119, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getPrivKey( const CKeyID & address , CKey & key)",1, 106, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::isSpendable( const CTxDestination & dest)",1, 113, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::haveWatchOnly()",1, 73, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::setAddressBook( const CTxDestination & dest , const std :: string & name , const std :: string & purpose)",4, 114, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::delAddressBook( const CTxDestination & dest)",4, 61, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getAddress( const CTxDestination & dest , std :: string * name , isminetype * is_mine , std :: string * purpose)",21, 55, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getAddresses()",9, 115, 12, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::learnRelatedScripts( const CPubKey & key , OutputType type)",1, 121, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::addDestData( const CTxDestination & dest , const std :: string & key , const std :: string & value)",5, 108, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::eraseDestData( const CTxDestination & dest , const std :: string & key)",5, 84, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getDestValues( const std :: string & prefix)",5, 79, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::lockCoin( const COutPoint & output)",6, 54, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::unlockCoin( const COutPoint & output)",6, 54, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::isLockedCoin( const COutPoint & output)",6, 62, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::listLockedCoins( std :: vector<COutPoint> & outputs)",6, 67, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::createTransaction( const std :: vector<CRecipient> & recipients , const CCoinControl & coin_control , bool sign , int & change_pos , CAmount & fee , std :: string & fail_reason)",16, 116, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::transactionCanBeAbandoned( const uint256 & txid)",1, 119, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::abandonTransaction( const uint256 & txid)",6, 66, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::transactionCanBeBumped( const uint256 & txid)",4, 72, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::createBumpTransaction( const uint256 & txid , const CCoinControl & coin_control , CAmount total_fee , std :: vector<std::string> & errors , CAmount & old_fee , CAmount & new_fee , CMutableTransaction & mtx)",11, 125, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::signBumpTransaction( CMutableTransaction & mtx)",1, 124, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::commitBumpTransaction( const uint256 & txid , CMutableTransaction && mtx , std :: vector<std::string> & errors , uint256 & bumped_txid)",8, 106, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getTx( const uint256 & txid)",10, 56, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getWalletTx( const uint256 & txid)",10, 71, 12, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getWalletTxs()",11, 87, 12, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::tryGetTxStatus( const uint256 & txid , interfaces :: WalletTxStatus & tx_status , int & num_blocks , int64_t & block_time)",27, 73, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getWalletTxDetails( const uint256 & txid , WalletTxStatus & tx_status , WalletOrderForm & order_form , bool & in_mempool , int & num_blocks)",18, 71, 12, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getBalances()",14, 96, 12, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::tryGetBalances( WalletBalances & balances , int & num_blocks)",12, 76, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getBalance()",1, 69, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getAvailableBalance( const CCoinControl & coin_control)",4, 75, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::txinIsMine( const CTxIn & txin)",6, 54, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::txoutIsMine( const CTxOut & txout)",6, 57, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getDebit( const CTxIn & txin , isminefilter filter)",6, 70, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getCredit( const CTxOut & txout , isminefilter filter)",6, 73, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::listCoins()",14, 95, 20, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getCoins( const std :: vector<COutPoint> & outputs)",18, 108, 20, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getRequiredFee( unsigned int tx_bytes)",1, 107, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getMinimumFee( unsigned int tx_bytes , const CCoinControl & coin_control , int * returned_target , FeeReason * reason)",12, 78, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getConfirmTarget()",1, 84, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::hdEnabled()",1, 66, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::canGetAddresses()",1, 76, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::IsWalletFlagSet( uint64_t flag)",1, 93, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getDefaultAddressType()",1, 93, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::getDefaultChangeType()",1, 91, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::remove()",4, 32, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleUnload( UnloadFn fn)",4, 64, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleShowProgress( ShowProgressFn fn)",4, 76, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleStatusChanged( StatusChangedFn fn)",4, 101, 8, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleAddressBookChanged( AddressBookChangedFn fn)",6, 116, 16, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleTransactionChanged( TransactionChangedFn fn)",5, 92, 12, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleWatchOnlyChanged( WatchOnlyChangedFn fn)",4, 84, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletImpl::handleCanGetAddressesChanged( CanGetAddressesChangedFn fn)",4, 96, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::WalletClientImpl( Chain & chain , std :: vector<std::string> wallet_filenames)",4, 78, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::registerRpcs()",1, 83, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::verify()",1, 82, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::load()",1, 78, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::start( CScheduler & scheduler)",1, 83, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::flush()",1, 53, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::stop()",1, 51, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::WalletClientImpl::~WalletClientImpl()",1, 54, 4, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::MakeWallet( const std :: shared_ptr<CWallet> & wallet)",1, 137, 0, 0
repos/cpp/bitcoin/src/interfaces/wallet.cpp,"interfaces::MakeWalletClient( Chain & chain , std :: vector<std::string> wallet_filenames)",4, 103, 0, 0
repos/cpp/bitcoin/src/interfaces/handler.cpp,"interfaces::HandlerImpl::HandlerImpl( boost :: signals2 :: connection connection)",1, 106, 4, 0
repos/cpp/bitcoin/src/interfaces/handler.cpp,"interfaces::HandlerImpl::disconnect()",1, 62, 4, 0
repos/cpp/bitcoin/src/interfaces/handler.cpp,"interfaces::MakeHandler( boost :: signals2 :: connection connection)",4, 77, 0, 0
