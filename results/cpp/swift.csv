File, Function, Length, Total Width, Leading Space(s), Leading Tab(s)
repos/cpp/swift/lib/AST/AccessScopeChecker.cpp,"AccessScopeChecker::AccessScopeChecker( const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",5, 38, 4, 0
repos/cpp/swift/lib/AST/AccessScopeChecker.cpp,"AccessScopeChecker::visitDecl( ValueDecl * VD)",8, 2, 0, 0
repos/cpp/swift/lib/AST/AccessScopeChecker.cpp,"TypeReprAccessScopeChecker::TypeReprAccessScopeChecker( const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",4, 2, 0, 0
repos/cpp/swift/lib/AST/AccessScopeChecker.cpp,"TypeReprAccessScopeChecker::walkToTypeReprPre( TypeRepr * TR)",5, 2, 0, 0
repos/cpp/swift/lib/AST/AccessScopeChecker.cpp,"TypeReprAccessScopeChecker::walkToTypeReprPost( TypeRepr * TR)",3, 2, 0, 0
repos/cpp/swift/lib/AST/AccessScopeChecker.cpp,"TypeReprAccessScopeChecker::getAccessScope( TypeRepr * TR , const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",6, 2, 0, 0
repos/cpp/swift/lib/AST/AccessScopeChecker.cpp,"TypeAccessScopeChecker::TypeAccessScopeChecker( const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",3, 64, 4, 0
repos/cpp/swift/lib/AST/AccessScopeChecker.cpp,"TypeAccessScopeChecker::walkToTypePre( Type T)",14, 2, 0, 0
repos/cpp/swift/lib/AST/AccessScopeChecker.cpp,"TypeAccessScopeChecker::getAccessScope( Type T , const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::ilist_alloc_traits<EquivalenceClass>::deleteNode( EquivalenceClass * ptr)",1, 80, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::RewritePath()",1, 20, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::getBase() const",1, 61, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::getPath() const",1, 66, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::isEmpty() const",1, 74, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::operator bool() const",1, 56, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::LLVM_ATTRIBUTE_DEPRECATED( void dump() const LLVM_ATTRIBUTE_USED , "only for use within the debugger")",4, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::operator ==( const RewritePath & lhs , const RewritePath & rhs)",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"AnchorPathCache::AnchorPathCache( GenericSignatureBuilder & builder , EquivalenceClass & equivClass)",3, 51, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"AnchorPathCache::getAnchorPath()",6, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::RewriteTreeNode( AssociatedTypeDecl * assocType)",2, 51, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::getMatch() const",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::hasRewriteRule() const",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::setRewriteRule( RewritePath replacementPath)",5, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::removeRewriteRule()",4, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::getRewriteRule() const &",4, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::getRewriteRule() &&",4, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::enumerateRewritePaths( RelativeRewritePath matchPath , llvm :: function_ref<void(unsigned,RewritePath)> callback) const",5, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::RuleAction::RuleAction( Kind kind , RewritePath path = { })",2, 35, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::RuleAction::none()",1, 58, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::RuleAction::stop()",1, 58, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::RuleAction::remove()",1, 62, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::RuleAction::replace( RewritePath path)",3, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::RuleAction::operator Kind() const",1, 43, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::enumerateRules( llvm :: function_ref<EnumerateCallback> fn , bool temporarilyDisableVisitedRule = false)",5, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::Implementation::~Implementation()",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::Implementation::allocateEquivalenceClass( PotentialArchetype * representative)",16, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::Implementation::deallocateEquivalenceClass( EquivalenceClass * equivClass)",5, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClassVizNode::operator const void *() const",1, 66, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClassVizIterator::EquivalenceClassVizIterator( EquivalenceClassVizNode node , BaseIterator base , BaseIterator baseEnd)",4, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClassVizIterator::getBase()",1, 45, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClassVizIterator::getBase() const",1, 57, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClassVizIterator::operator *() const",3, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClassVizIterator::operator ++()",4, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClassVizIterator::operator ++( int)",5, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClassVizIterator::operator ==( const EquivalenceClassVizIterator & lhs , const EquivalenceClassVizIterator & rhs)",4, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClassVizIterator::operator !=( const EquivalenceClassVizIterator & lhs , const EquivalenceClassVizIterator & rhs)",4, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::getEntryNode( const EquivalenceClass * equivClass)",3, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_iterator::nodes_iterator( const EquivalenceClass * equivClass , BaseIterator base)",2, 49, 6, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_iterator::getBase()",1, 47, 6, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_iterator::getBase() const",1, 59, 6, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_iterator::operator *() const",3, 8, 6, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_iterator::operator ++()",4, 8, 6, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_iterator::operator ++( int)",5, 8, 6, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_iterator::operator ==( const nodes_iterator & lhs , const nodes_iterator & rhs)",4, 8, 6, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_iterator::operator !=( const nodes_iterator & lhs , const nodes_iterator & rhs)",4, 8, 6, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_begin( const EquivalenceClass * equivClass)",3, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::nodes_end( const EquivalenceClass * equivClass)",3, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::size( const EquivalenceClass * equivClass)",3, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::child_begin( NodeRef node)",5, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::GraphTraits<constEquivalenceClass*>::child_end( NodeRef node)",5, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::DOTGraphTraits<constEquivalenceClass*>::DOTGraphTraits( bool = false)",1, 37, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::DOTGraphTraits<constEquivalenceClass*>::getGraphName( const EquivalenceClass * equivClass)",4, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::DOTGraphTraits<constEquivalenceClass*>::getNodeLabel( EquivalenceClassVizNode node , const EquivalenceClass * equivClass) const",4, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"llvm::DOTGraphTraits<constEquivalenceClass*>::getEdgeAttributes( EquivalenceClassVizNode node , EquivalenceClassVizIterator iter , const EquivalenceClass * equivClass)",12, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"getUnresolvedType( GSBUnresolvedType type , TypeArrayView<GenericTypeParamType> genericParams)",10, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::isAcceptableStorageKind( Kind kind , StorageKind storageKind)",68, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getOpaqueStorage1() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getOpaqueStorage2() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getOpaqueStorage3() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::isInferredRequirement() const",25, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::classifyDiagKind() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::isDerivedRequirement() const",26, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::shouldDiagnoseRedundancy( bool primary) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::isSelfDerivedSource( GenericSignatureBuilder & builder , Type type , bool & derivedViaConcrete) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"replaceSelfWithType( Type selfType , Type depTy)",10, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"isSelfDerivedProtocolRequirementInProtocol( const RequirementSource * source , ProtocolDecl * selfProto , GenericSignatureBuilder & builder)",24, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getMinimalConformanceSource( GenericSignatureBuilder & builder , Type currentType , ProtocolDecl * proto , bool & derivedViaConcrete) const",155, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::forAbstract( GenericSignatureBuilder & builder , Type rootType)",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::forExplicit( GenericSignatureBuilder & builder , Type rootType , GenericSignatureBuilder :: WrittenRequirementLoc writtenLoc)",10, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::forInferred( GenericSignatureBuilder & builder , Type rootType , const TypeRepr * typeRepr)",11, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::forRequirementSignature( GenericSignatureBuilder & builder , Type rootType , ProtocolDecl * protocol)",12, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::forNestedTypeNameMatch( GenericSignatureBuilder & builder , Type rootType)",10, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::forConcreteTypeBinding( GenericSignatureBuilder & builder , Type rootType)",10, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::viaProtocolRequirement( GenericSignatureBuilder & builder , Type dependentType , ProtocolDecl * protocol , bool inferred , GenericSignatureBuilder :: WrittenRequirementLoc writtenLoc) const",18, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::viaSuperclass( GenericSignatureBuilder & builder , ProtocolConformanceRef conformance) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::viaConcrete( GenericSignatureBuilder & builder , ProtocolConformanceRef conformance) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::viaParent( GenericSignatureBuilder & builder , AssociatedTypeDecl * assocType) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::viaDerived( GenericSignatureBuilder & builder) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::viaEquivalentType( GenericSignatureBuilder & builder , Type newType) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::withoutRedundantSubpath( GenericSignatureBuilder & builder , const RequirementSource * start , const RequirementSource * end) const",63, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getRoot() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getRootType() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getAffectedType() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::visitPotentialArchetypesAlongPath( llvm :: function_ref<bool(Type,const RequirementSource*)> visitor) const",50, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getStoredType() const",13, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getProtocolDecl() const",19, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::getLoc() const",25, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"sourcePathLength( const RequirementSource * source)",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::compare( const RequirementSource * other) const",17, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::dump( llvm :: raw_ostream & out , SourceManager * srcMgr , unsigned indent) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::print() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RequirementSource::print( llvm :: raw_ostream & out , SourceManager * srcMgr) const",102, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"formProtocolRelativeType( ProtocolDecl * proto , Type baseType , Type type)",14, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"FloatingRequirementSource::getSource( GenericSignatureBuilder & builder , Type type) const",40, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"FloatingRequirementSource::getLoc() const",22, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"FloatingRequirementSource::isExplicit() const",56, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"FloatingRequirementSource::asInferred( const TypeRepr * typeRepr) const",18, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"FloatingRequirementSource::isRecursive( Type rootType , GenericSignatureBuilder & builder) const",21, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::PotentialArchetype::~PotentialArchetype()",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::PotentialArchetype::getDebugName() const",32, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::PotentialArchetype::getNestingDepth() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::addMember( PotentialArchetype * pa)",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::ResolvedType( EquivalenceClass * equivClass)",2, 41, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::ResolvedType( PotentialArchetype * pa)",2, 67, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::ResolvedType( Type type , EquivalenceClass * equivClass)",5, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::forUnresolved( EquivalenceClass * equivClass)",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::forConcrete( Type concreteType)",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::operator bool() const",1, 60, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::getAsConcreteType() const",5, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::getPotentialArchetypeIfKnown() const",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::getEquivalenceClass( GenericSignatureBuilder & builder) const",9, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::getEquivalenceClassIfPresent() const",7, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::getUnresolvedEquivClass() const",4, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::ResolvedType::getUnresolvedType() const",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::recordConformanceConstraint( GenericSignatureBuilder & builder , ResolvedType type , ProtocolDecl * proto , FloatingRequirementSource source)",31, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"Constraint<T>::isSubjectEqualTo( Type type) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"Constraint<T>::isSubjectEqualTo( const PotentialArchetype * pa) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"Constraint<T>::hasSameSubjectAs( const Constraint<T> & other) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::findAnyConcreteConstraintAsWritten( Type preferredType) const",17, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::findAnySuperclassConstraintAsWritten( Type preferredType) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::isConformanceSatisfiedBySuperclass( ProtocolDecl * proto) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"compareAssociatedTypes( AssociatedTypeDecl * assocType1 , AssociatedTypeDecl * assocType2)",27, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::lookupNestedType( GenericSignatureBuilder & builder , Identifier name , SmallVectorImpl<TypeDecl*> * otherConcreteTypes)",154, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::getAnchor( GenericSignatureBuilder & builder , TypeArrayView<GenericTypeParamType> genericParams)",61, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::getTypeInContext( GenericSignatureBuilder & builder , GenericEnvironment * genericEnv)",129, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::dump( llvm :: raw_ostream & out , GenericSignatureBuilder * builder) const",88, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::dump( GenericSignatureBuilder * builder) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"DelayedRequirement::dump( llvm :: raw_ostream & out) const",26, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"DelayedRequirement::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::handleUnresolvedRequirement( RequirementKind kind , UnresolvedType lhs , UnresolvedRequirementRHS rhs , FloatingRequirementSource source , EquivalenceClass * unresolvedEquivClass , UnresolvedHandlingKind unresolvedHandling)",40, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addConditionalRequirements( ProtocolConformanceRef conformance , ModuleDecl * inferForModule , SourceLoc loc)",23, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::resolveConcreteConformance( ResolvedType type , ProtocolDecl * proto)",41, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::resolveSuperConformance( ResolvedType type , ProtocolDecl * proto)",32, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"ResolvedType::realizePotentialArchetype( GenericSignatureBuilder & builder)",5, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"ResolvedType::getDependentType( GenericSignatureBuilder & builder) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"maybeAddSameTypeRequirementForNestedType( ResolvedType nested , const RequirementSource * superSource , GenericSignatureBuilder & builder)",35, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"PotentialArchetype::getOrCreateEquivalenceClass( GenericSignatureBuilder & builder) const",19, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"PotentialArchetype::getRepresentative() const",22, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"swift::compareDependentTypes( Type type1 , Type type2)",36, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"compareDependentPaths( ArrayRef<AssociatedTypeDecl*> path1 , ArrayRef<AssociatedTypeDecl*> path2)",16, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"SameTypeConflictCheckedLater::operator ( )( Type type1 , Type type2) const",1, 54, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"concretizeNestedTypeFromConcreteParent( GenericSignatureBuilder :: PotentialArchetype * parent , GenericSignatureBuilder :: PotentialArchetype * nestedPA , GenericSignatureBuilder & builder)",56, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"PotentialArchetype::updateNestedTypeForConformance( GenericSignatureBuilder & builder , AssociatedTypeDecl * assocType , ArchetypeResolutionKind kind)",78, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"ArchetypeType::resolveNestedType( std :: pair<Identifier,Type> & nested) const",23, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::PotentialArchetype::getDependentType( TypeArrayView<GenericTypeParamType> genericParams) const",25, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"PotentialArchetype::getASTContext() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::PotentialArchetype::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::PotentialArchetype::dump( llvm :: raw_ostream & Out , SourceManager * SrcMgr , unsigned Indent) const",96, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::RewritePath( Optional<GenericParamKey> base , RelativeRewritePath path , PathOrder order)",15, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::createPath( Type type)",5, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::createPath( Type type , SmallVectorImpl<AssociatedTypeDecl*> & path)",12, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::commonPath( const RewritePath & other) const",17, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"formDependentType( GenericTypeParamType * base , RelativeRewritePath path)",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"formDependentType( ASTContext & ctx , GenericParamKey genericParam , RelativeRewritePath path)",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::formDependentType( ASTContext & ctx , AnchorPathCache * anchorPathCache) const",18, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::compare( const RewritePath & other) const",13, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewritePath::print( llvm :: raw_ostream & out) const",19, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::~RewriteTreeNode()",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"OrderTreeRewriteNode::compare( AssociatedTypeDecl * lhs , AssociatedTypeDecl * rhs) const",8, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"OrderTreeRewriteNode::operator ( )( RewriteTreeNode * lhs , AssociatedTypeDecl * rhs) const",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"OrderTreeRewriteNode::operator ( )( AssociatedTypeDecl * lhs , RewriteTreeNode * rhs) const",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"OrderTreeRewriteNode::operator ( )( RewriteTreeNode * lhs , RewriteTreeNode * rhs) const",3, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::addRewriteRule( RelativeRewritePath matchPath , RewritePath replacementPath)",43, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::enumerateRewritePathsImpl( RelativeRewritePath matchPath , llvm :: function_ref<void(unsigned,RewritePath)> callback , unsigned depth) const",28, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::bestRewritePath( GenericParamKey base , RelativeRewritePath path , unsigned prefixLength)",30, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::mergeInto( RewriteTreeNode * other)",13, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::enumerateRulesRec( llvm :: function_ref<EnumerateCallback> & fn , bool temporarilyDisableVisitedRule , llvm :: SmallVectorImpl<AssociatedTypeDecl*> & lhs)",63, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"RewriteTreeNode::dump( llvm :: raw_ostream & out , bool lastChild) const",37, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::Implementation::getRewriteTreeRootIfPresent( CanType anchor)",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::Implementation::getOrCreateRewriteTreeRoot( CanType anchor)",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::Implementation::minimizeRewriteTree( GenericSignatureBuilder & builder)",17, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::Implementation::minimizeRewriteTreeRhs( GenericSignatureBuilder & builder)",55, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::Implementation::removeRewriteTreeRedundancies( GenericSignatureBuilder & builder)",37, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addSameTypeRewriteRule( CanType type1 , CanType type2)",49, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::getCanonicalTypeParameter( Type type)",62, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::EquivalenceClass( PotentialArchetype * representative)",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"EquivalenceClass::modified( GenericSignatureBuilder & builder)",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::GenericSignatureBuilder( ASTContext & ctx)",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::GenericSignatureBuilder( GenericSignatureBuilder && other)",13, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::getLookupConformanceFn()",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::lookupConformance( CanType dependentType , Type conformingReplacementType , ProtocolDecl * conformedProtocol)",17, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::getLazyResolver() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"resolveDependentMemberTypes( GenericSignatureBuilder & builder , Type type)",40, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::realizePotentialArchetype( UnresolvedType & type)",13, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"substituteConcreteType( GenericSignatureBuilder & builder , PotentialArchetype * basePA , TypeDecl * concreteDecl)",49, 3, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::maybeResolveEquivalenceClass( Type type , ArchetypeResolutionKind resolutionKind , bool wantExactPotentialArchetype)",108, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::resolveEquivalenceClass( Type type , ArchetypeResolutionKind resolutionKind)",10, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::resolve( UnresolvedType paOrT , FloatingRequirementSource source)",16, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::areInSameEquivalenceClass( Type type1 , Type type2)",5, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::getGenericParams() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addGenericParameter( GenericTypeParamDecl * GenericParam)",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addGenericParameterRequirements( GenericTypeParamDecl * GenericParam)",10, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addGenericParameter( GenericTypeParamType * GenericParam)",16, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"visitInherited( llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl , llvm :: function_ref<ConstraintResult(Type,const TypeRepr*)> visitType)",49, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::expandConformanceRequirement( ResolvedType selfType , ProtocolDecl * proto , const RequirementSource * source , bool onlySameTypeConstraints)",331, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addConformanceRequirement( ResolvedType type , ProtocolDecl * proto , FloatingRequirementSource source)",15, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addLayoutRequirementDirect( ResolvedType type , LayoutConstraint layout , FloatingRequirementSource source)",29, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addLayoutRequirement( UnresolvedType subject , LayoutConstraint layout , FloatingRequirementSource source , UnresolvedHandlingKind unresolvedHandling)",36, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::updateSuperclass( ResolvedType type , Type superclass , FloatingRequirementSource source)",57, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addSuperclassRequirementDirect( ResolvedType type , Type superclass , FloatingRequirementSource source)",20, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"toUnresolvedRequirementRHS( GenericSignatureBuilder :: UnresolvedType unresolved)",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addTypeRequirement( UnresolvedType subject , UnresolvedType constraint , FloatingRequirementSource source , UnresolvedHandlingKind unresolvedHandling , ModuleDecl * inferForModule)",123, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addedNestedType( PotentialArchetype * nestedPA)",35, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addSameTypeRequirementBetweenTypeParameters( ResolvedType type1 , ResolvedType type2 , const RequirementSource * source)",225, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addSameTypeRequirementToConcrete( ResolvedType type , Type concrete , const RequirementSource * source)",41, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addSameTypeRequirementBetweenConcrete( Type type1 , Type type2 , FloatingRequirementSource source , llvm :: function_ref<void(Type,Type)> diagnoseMismatch)",50, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addSameTypeRequirement( UnresolvedType paOrT1 , UnresolvedType paOrT2 , FloatingRequirementSource source , UnresolvedHandlingKind unresolvedHandling)",14, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addSameTypeRequirement( UnresolvedType paOrT1 , UnresolvedType paOrT2 , FloatingRequirementSource source , UnresolvedHandlingKind unresolvedHandling , llvm :: function_ref<void(Type,Type)> diagnoseMismatch)",27, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addSameTypeRequirementDirect( ResolvedType type1 , ResolvedType type2 , FloatingRequirementSource source , llvm :: function_ref<void(Type,Type)> diagnoseMismatch)",29, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addInheritedRequirements( TypeDecl * decl , UnresolvedType type , const RequirementSource * parentSource , ModuleDecl * inferForModule)",51, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addRequirement( const Requirement & req , FloatingRequirementSource source , ModuleDecl * inferForModule)",5, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addRequirement( const Requirement & req , const RequirementRepr * reqRepr , FloatingRequirementSource source , const SubstitutionMap * subMap , ModuleDecl * inferForModule)",76, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::InferRequirementsWalker::InferRequirementsWalker( ModuleDecl & module , GenericSignatureBuilder & builder , FloatingRequirementSource source)",4, 59, 6, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::InferRequirementsWalker::walkToTypePre( Type ty)",8, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::InferRequirementsWalker::walkToTypePost( Type ty)",40, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::inferRequirements( ModuleDecl & module , Type type , const TypeRepr * typeRepr , FloatingRequirementSource source)",12, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::inferRequirements( ModuleDecl & module , ParameterList * params)",10, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"swift::operator <( const Constraint<T> & lhs , const Constraint<T> & rhs)",12, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"swift::operator ==( const Constraint<T> & lhs , const Constraint<T> & rhs)",5, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"swift::operator ==( const Constraint<Type> & lhs , const Constraint<Type> & rhs)",5, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"findRepresentativeConstraint( ArrayRef<Constraint<T>> constraints , llvm :: function_ref<bool(const Constraint<T>&)> isSuitableRepresentative)",59, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"expandSameTypeConstraints( GenericSignatureBuilder & builder , EquivalenceClass * equivClass)",50, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::finalize( SourceLoc loc , TypeArrayView<GenericTypeParamType> genericParams , bool allowConcreteGenericParams)",223, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"asUnresolvedType( GenericSignatureBuilder :: UnresolvedRequirementRHS rhs)",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::processDelayedRequirements()",80, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::checkConstraintList( TypeArrayView<GenericTypeParamType> genericParams , std :: vector<Constraint<T>> & constraints , llvm :: function_ref<bool(const Constraint<T>&)> isSuitableRepresentative , llvm :: function_ref<ConstraintRelation(const Constraint<T>&)> checkConstraint , Optional<Diag<unsigned,Type,T,T>> conflictingDiag , Diag<Type,T> redundancyDiag , Diag<unsigned,Type,T> otherNoteDiag)",19, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"removeSelfDerived( GenericSignatureBuilder & builder , std :: vector<Constraint<T>> & constraints , ProtocolDecl * proto , bool dropDerivedViaConcrete = true , bool allCanBeSelfDerived = false)",76, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::checkConstraintList( TypeArrayView<GenericTypeParamType> genericParams , std :: vector<Constraint<T>> & constraints , llvm :: function_ref<bool(const Constraint<T>&)> isSuitableRepresentative , llvm :: function_ref<ConstraintRelation(const Constraint<T>&)> checkConstraint , Optional<Diag<unsigned,Type,DiagT,DiagT>> conflictingDiag , Diag<Type,DiagT> redundancyDiag , Diag<unsigned,Type,DiagT> otherNoteDiag , llvm :: function_ref<DiagT(const T&)> diagValue , bool removeSelfDerived)",129, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"isRedundantlyInheritableObjCProtocol( ProtocolDecl * proto , const RequirementSource * source)",29, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::checkConformanceConstraints( TypeArrayView<GenericTypeParamType> genericParams , EquivalenceClass * equivClass)",46, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"swift::operator <( const DerivedSameTypeComponent & lhs , const DerivedSameTypeComponent & rhs)",5, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"findRepresentative( SmallVectorImpl<unsigned> & parents , unsigned index)",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"unionSets( SmallVectorImpl<unsigned> & parents , unsigned index1 , unsigned index2 , unsigned successThreshold = 0)",17, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"computeDerivedSameTypeComponents( GenericSignatureBuilder & builder , EquivalenceClass * equivClass , llvm :: SmallDenseMap<CanType,unsigned> & componentOf)",93, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"IntercomponentEdge::IntercomponentEdge( unsigned source , unsigned target , const Constraint<Type> & constraint)",7, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"IntercomponentEdge::operator <( const IntercomponentEdge & lhs , const IntercomponentEdge & rhs)",15, 6, 4, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"IntercomponentEdge::dump() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"removalDisconnectsEquivalenceClass( EquivalenceClass * equivClass , llvm :: SmallDenseMap<CanType,unsigned> & componentOf , std :: vector<IntercomponentEdge> & sameTypeEdges , unsigned edgeIndex , CanType fromDepType , CanType toDepType)",42, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"takeMemberOfDependentMemberType( Type & type)",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"isSelfDerivedNestedTypeNameMatchEdge( GenericSignatureBuilder & builder , EquivalenceClass * equivClass , llvm :: SmallDenseMap<CanType,unsigned> & componentOf , std :: vector<IntercomponentEdge> & sameTypeEdges , unsigned edgeIndex)",37, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"collapseSameTypeComponentsThroughDelayedRequirements( GenericSignatureBuilder & builder , EquivalenceClass * equivClass , llvm :: SmallDenseMap<CanType,unsigned> & componentOf , SmallVectorImpl<unsigned> & collapsedParents , unsigned & remainingComponents)",70, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"collapseSameTypeComponents( GenericSignatureBuilder & builder , EquivalenceClass * equivClass , llvm :: SmallDenseMap<CanType,unsigned> & componentOf , std :: vector<IntercomponentEdge> & sameTypeEdges)",102, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::checkSameTypeConstraints( TypeArrayView<GenericTypeParamType> genericParams , EquivalenceClass * equivClass)",283, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::checkConcreteTypeConstraints( TypeArrayView<GenericTypeParamType> genericParams , EquivalenceClass * equivClass)",37, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::checkSuperclassConstraints( TypeArrayView<GenericTypeParamType> genericParams , EquivalenceClass * equivClass)",84, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::checkLayoutConstraints( TypeArrayView<GenericTypeParamType> genericParams , EquivalenceClass * equivClass)",24, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"getBestConstraintSource( ArrayRef<Constraint<T>> constraints , llvm :: function_ref<bool(const T&)> matches)",12, 4, 2, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"compareSameTypeComponents( const SameTypeComponentRef * lhsPtr , const SameTypeComponentRef * rhsPtr)",11, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::enumerateRequirements( TypeArrayView<GenericTypeParamType> genericParams , llvm :: function_ref<void(RequirementKind kind,Type type,RequirementRHS constraint,const RequirementSource*source)> f)",140, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::dump()",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::dump( llvm :: raw_ostream & out)",45, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::addGenericSignature( GenericSignature * sig)",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"collectRequirements( GenericSignatureBuilder & builder , TypeArrayView<GenericTypeParamType> params , SmallVectorImpl<Requirement> & requirements)",46, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::computeGenericSignature( SourceLoc loc , bool allowConcreteGenericParams , bool allowBuilderToMove) &&",34, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::computeRequirementSignature( ProtocolDecl * proto)",27, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::verifyGenericSignature( ASTContext & context , GenericSignature * sig)",53, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignatureBuilder.cpp,"GenericSignatureBuilder::verifyGenericSignaturesInModule( ModuleDecl * module)",24, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Stmt::operator new( size_t Bytes , ASTContext & C , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Stmt::getKindName( StmtKind K)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"isOverriddenFromStmt( ReturnType(Class::*)() const)",3, 4, 2, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"isOverriddenFromStmt( ReturnType(Stmt::*)() const)",3, 4, 2, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Dispatch<true>::getStartLoc( const T * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Dispatch<true>::getEndLoc( const T * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Dispatch<true>::getSourceRange( const T * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Dispatch<false>::getStartLoc( const T * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Dispatch<false>::getEndLoc( const T * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Dispatch<false>::getSourceRange( const T * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"getSourceRangeImpl( const T * S)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Stmt::getSourceRange() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"getStartLocImpl( const T * S)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Stmt::getStartLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"getEndLocImpl( const T * S)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"Stmt::getEndLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"BraceStmt::BraceStmt( SourceLoc lbloc , ArrayRef<ASTNode> elts , SourceLoc rbloc , Optional<bool> implicit)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"BraceStmt::create( ASTContext & ctx , SourceLoc lbloc , ArrayRef<ASTNode> elts , SourceLoc rbloc , Optional<bool> implicit)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"ReturnStmt::getStartLoc() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"ReturnStmt::getEndLoc() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"YieldStmt::create( const ASTContext & ctx , SourceLoc yieldLoc , SourceLoc lpLoc , ArrayRef<Expr*> yields , SourceLoc rpLoc , Optional<bool> implicit)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"YieldStmt::getEndLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"ThrowStmt::getEndLoc() const",1, 72, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"DeferStmt::getEndLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"DeferStmt::getBodyAsWritten() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"LabeledStmt::isPossibleContinueTarget() const",23, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"LabeledStmt::requiresLabelOnJump() const",21, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"ForEachStmt::setPattern( Pattern * p)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"CatchStmt::setErrorPattern( Pattern * pattern)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"DoCatchStmt::create( ASTContext & ctx , LabeledStmtInfo labelInfo , SourceLoc doLoc , Stmt * body , ArrayRef<CatchStmt*> catches , Optional<bool> implicit)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"DoCatchStmt::isSyntacticallyExhaustive() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"LabeledConditionalStmt::setCond( StmtCondition e)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"CatchStmt::isSyntacticallyExhaustive() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"PoundAvailableInfo::create( ASTContext & ctx , SourceLoc PoundLoc , ArrayRef<AvailabilitySpec*> queries , SourceLoc RParenLoc)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"PoundAvailableInfo::getEndLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"StmtConditionElement::getSourceRange() const",23, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"StmtConditionElement::getStartLoc() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"StmtConditionElement::getEndLoc() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"exprToCond( Expr * C , ASTContext & Ctx)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"IfStmt::IfStmt( SourceLoc IfLoc , Expr * Cond , Stmt * Then , SourceLoc ElseLoc , Stmt * Else , Optional<bool> implicit , ASTContext & Ctx)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"GuardStmt::GuardStmt( SourceLoc GuardLoc , Expr * Cond , Stmt * Body , Optional<bool> implicit , ASTContext & Ctx)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"RepeatWhileStmt::getEndLoc() const",1, 75, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"CaseLabelItem::getSourceRange() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"CaseLabelItem::getStartLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"CaseLabelItem::getEndLoc() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"CaseStmt::CaseStmt( SourceLoc CaseLoc , ArrayRef<CaseLabelItem> CaseLabelItems , bool HasBoundDecls , SourceLoc UnknownAttrLoc , SourceLoc ColonLoc , Stmt * Body , Optional<bool> Implicit)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"CaseStmt::create( ASTContext & C , SourceLoc CaseLoc , ArrayRef<CaseLabelItem> CaseLabelItems , bool HasBoundDecls , SourceLoc UnknownAttrLoc , SourceLoc ColonLoc , Stmt * Body , Optional<bool> Implicit)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"SwitchStmt::create( LabeledStmtInfo LabelInfo , SourceLoc SwitchLoc , Expr * SubjectExpr , SourceLoc LBraceLoc , ArrayRef<ASTNode> Cases , SourceLoc RBraceLoc , ASTContext & C)",23, 2, 0, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"StmtTraceFormatter::traceName( const void * Entity , raw_ostream & OS) const",6, 4, 2, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"StmtTraceFormatter::traceLoc( const void * Entity , SourceManager * SM , clang :: SourceManager * CSM , raw_ostream & OS) const",7, 4, 2, 0
repos/cpp/swift/lib/AST/Stmt.cpp,"FrontendStatsTracer::getTraceFormatter<constStmt*>()",3, 2, 0, 0
repos/cpp/swift/lib/AST/RequirementEnvironment.cpp,"RequirementEnvironment::RequirementEnvironment( DeclContext * conformanceDC , GenericSignature * reqSig , ProtocolDecl * proto , ClassDecl * covariantSelf , ProtocolConformance * conformance)",187, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"Witness::Witness( ValueDecl * decl , SubstitutionMap substitutions , GenericEnvironment * syntheticEnv , SubstitutionMap reqToSynthesizedEnvSubs)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"Witness::dump() const",1, 51, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"Witness::dump( llvm :: raw_ostream & out) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::ProtocolConformanceRef( ProtocolDecl * protocol , ProtocolConformance * conf)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::getRequirement() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::subst( Type origType , SubstitutionMap subMap) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::subst( Type origType , TypeSubstitutionFn subs , LookupConformanceFn conformances) const",38, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::getTypeWitnessByName( Type type , ProtocolConformanceRef conformance , Identifier name , LazyResolver * resolver)",35, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::operator new( size_t bytes , ASTContext & context , AllocationArena arena , unsigned alignment)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getProtocol() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getDeclContext() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getState() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getSourceKind() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getImplyingConformance() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::hasTypeWitness( AssociatedTypeDecl * assocType , LazyResolver * resolver) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getTypeWitnessAndDecl( AssociatedTypeDecl * assocType , LazyResolver * resolver , SubstOptions options) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getTypeWitness( AssociatedTypeDecl * assocType , LazyResolver * resolver , SubstOptions options) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getWitnessDeclRef( ValueDecl * requirement , LazyResolver * resolver) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getWitnessDecl( ValueDecl * requirement , LazyResolver * resolver) const",21, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::usesDefaultDefinition( AssociatedTypeDecl * requirement) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getGenericEnvironment() const",20, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getGenericSignature() const",18, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getSubstitutions( ModuleDecl * M) const",41, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"RootProtocolConformance::isInvalid() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"RootProtocolConformance::getLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"RootProtocolConformance::isWeakImported( ModuleDecl * fromModule) const",22, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"RootProtocolConformance::hasWitness( ValueDecl * requirement) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::isRetroactive() const",29, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::isSynthesizedNonUnique() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::isResilient() const",16, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getConditionalRequirementsIfAvailable() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getConditionalRequirements() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::getConditionalRequirementsIfAvailable() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::getConditionalRequirements() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::getInheritedConformanceRef( ProtocolDecl * base) const",29, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::differenceAndStoreConditionalRequirements() const",84, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::setSignatureConformances( ArrayRef<ProtocolConformanceRef> conformances)",26, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::populateSignatureConformances()",84, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::resolveLazyInfo() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::setLazyLoader( LazyConformanceLoader * loader , uint64_t contextData)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"PrettyStackTraceRequirement::PrettyStackTraceRequirement( const char * action , const ProtocolConformance * conformance , ValueDecl * requirement)",4, 79, 6, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"PrettyStackTraceRequirement::print( llvm :: raw_ostream & out) const",7, 6, 4, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::hasTypeWitness( AssociatedTypeDecl * assocType , LazyResolver * resolver) const",18, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::getTypeWitnessAndDecl( AssociatedTypeDecl * assocType , LazyResolver * resolver , SubstOptions options) const",43, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::setTypeWitness( AssociatedTypeDecl * assocType , Type type , TypeDecl * typeDecl) const",12, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getAssociatedType( Type assocType , LazyResolver * resolver) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::getAssociatedType( Type conformingType , Type assocType , LazyResolver * resolver) const",27, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::getAssociatedConformance( Type conformingType , Type assocType , ProtocolDecl * protocol , LazyResolver * resolver) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getAssociatedConformance( Type assocType , ProtocolDecl * protocol , LazyResolver * resolver) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::getAssociatedConformance( Type assocType , ProtocolDecl * protocol , LazyResolver * resolver) const",31, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"RootProtocolConformance::getWitness( ValueDecl * requirement , LazyResolver * resolver) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::getWitness( ValueDecl * requirement , LazyResolver * resolver) const",23, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"SelfProtocolConformance::getWitness( ValueDecl * requirement , LazyResolver * resolver) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"RootProtocolConformance::getWitnessDeclRef( ValueDecl * requirement , LazyResolver * resolver) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NormalProtocolConformance::setWitness( ValueDecl * requirement , Witness witness) const",13, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"SpecializedProtocolConformance::SpecializedProtocolConformance( Type conformingType , ProtocolConformance * genericConformance , SubstitutionMap substitutions)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"SpecializedProtocolConformance::computeConditionalRequirements() const",30, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"SpecializedProtocolConformance::hasTypeWitness( AssociatedTypeDecl * assocType , LazyResolver * resolver) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"SpecializedProtocolConformance::getTypeWitnessAndDecl( AssociatedTypeDecl * assocType , LazyResolver * resolver , SubstOptions options) const",53, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"SpecializedProtocolConformance::getAssociatedConformance( Type assocType , ProtocolDecl * protocol , LazyResolver * resolver) const",15, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"SpecializedProtocolConformance::getWitnessDeclRef( ValueDecl * requirement , LazyResolver * resolver) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"InheritedProtocolConformance::getAssociatedConformance( Type assocType , ProtocolDecl * protocol , LazyResolver * resolver) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"InheritedProtocolConformance::getWitnessDeclRef( ValueDecl * requirement , LazyResolver * resolver) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getRootNormalConformance() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getRootConformance() const",18, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::isVisibleFrom( const DeclContext * dc) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::subst( SubstitutionMap subMap) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::subst( TypeSubstitutionFn subs , LookupConformanceFn conformances) const",61, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getInheritedConformance( ProtocolDecl * protocol) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NominalTypeDecl::prepareConformanceTable() const",50, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NominalTypeDecl::lookupConformance( ModuleDecl * module , ProtocolDecl * protocol , SmallVectorImpl<ProtocolConformance*> & conformances) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NominalTypeDecl::getAllProtocols() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NominalTypeDecl::getAllConformances( bool sorted) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NominalTypeDecl::getImplicitProtocols( SmallVectorImpl<ProtocolDecl*> & protocols)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NominalTypeDecl::registerProtocolConformance( ProtocolConformance * conformance)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"NominalTypeDecl::getSatisfiedProtocolRequirementsForMember( const ValueDecl * member , bool sorted) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"DeclContext::getLocalProtocols( ConformanceLookupKind lookupKind , SmallVectorImpl<ConformanceDiagnostic> * diagnostics , bool sorted) const",29, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"DeclContext::getLocalConformances( ConformanceLookupKind lookupKind , SmallVectorImpl<ConformanceDiagnostic> * diagnostics , bool sorted) const",37, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::isCanonical() const",31, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformance::getCanonicalConformance()",33, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::isCanonical() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceRef::getCanonicalConformanceRef() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceTraceFormatter::traceName( const void * Entity , raw_ostream & OS) const",7, 4, 2, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"ProtocolConformanceTraceFormatter::traceLoc( const void * Entity , SourceManager * SM , clang :: SourceManager * CSM , raw_ostream & OS) const",13, 4, 2, 0
repos/cpp/swift/lib/AST/ProtocolConformance.cpp,"FrontendStatsTracer::getTraceFormatter<constProtocolConformance*>()",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"swift::Demangle::getTypeForMangling( ASTContext & ctx , StringRef mangling)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createBuiltinType( const std :: string & mangledName)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createNominalTypeDecl( StringRef mangledName)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createProtocolDecl( const Demangle :: NodePointer & node)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createNominalType( NominalTypeDecl * decl)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createNominalType( NominalTypeDecl * decl , Type parent)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createBoundGenericType( NominalTypeDecl * decl , ArrayRef<Type> args)",36, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createBoundGenericType( NominalTypeDecl * decl , ArrayRef<Type> args , Type parent)",96, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createTupleType( ArrayRef<Type> eltTypes , StringRef labels , bool isVariadic)",21, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createFunctionType( ArrayRef<Demangle::FunctionParam<Type>> params , Type output , FunctionTypeFlags flags)",50, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createProtocolCompositionType( ArrayRef<ProtocolDecl*> protocols , Type superclass , bool isClassBound)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createExistentialMetatypeType( Type instance)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createMetatypeType( Type instance , bool wasAbstract)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createGenericTypeParameterType( unsigned depth , unsigned index)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createDependentMemberType( StringRef member , Type base , ProtocolDecl * protocol)",16, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createSILBoxType( Type base)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createObjCClassType( StringRef name)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createObjCProtocolDecl( StringRef name)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createForeignClassType( StringRef mangledName)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::getUnnamedForeignClassType()",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::getOpaqueType()",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::validateNominalParent( NominalTypeDecl * decl , Type parent)",18, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::checkTypeRepr( TypeRepr * repr)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::getAcceptableNominalTypeCandidate( ValueDecl * decl , Demangle :: Node :: Kind kind)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::getNotionalDC()",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::createNominalTypeDecl( const Demangle :: NodePointer & node)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::findModule( const Demangle :: NodePointer & node)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::findModuleNode( const Demangle :: NodePointer & node)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::getForeignModuleKind( const Demangle :: NodePointer & node)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::findDeclContext( const Demangle :: NodePointer & node)",82, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::findNominalTypeDecl( DeclContext * dc , Identifier name , Identifier privateDiscriminator , Demangle :: Node :: Kind kind)",29, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"getClangTypeKindForNodeKind( Demangle :: Node :: Kind kind)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDemangler.cpp,"ASTBuilder::findForeignNominalTypeDecl( StringRef name , StringRef relatedEntityKind , ForeignModuleKind foreignKind , Demangle :: Node :: Kind kind)",67, 2, 0, 0
repos/cpp/swift/lib/AST/AvailabilitySpec.cpp,"AvailabilitySpec::getSourceRange() const",13, 2, 0, 0
repos/cpp/swift/lib/AST/AvailabilitySpec.cpp,"AvailabilitySpec::operator new( size_t Bytes , ASTContext & C , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/AvailabilitySpec.cpp,"PlatformVersionConstraintAvailabilitySpec::getSourceRange() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/AvailabilitySpec.cpp,"PlatformVersionConstraintAvailabilitySpec::print( raw_ostream & OS , unsigned Indent) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/AvailabilitySpec.cpp,"LanguageVersionConstraintAvailabilitySpec::getSourceRange() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/AvailabilitySpec.cpp,"LanguageVersionConstraintAvailabilitySpec::print( raw_ostream & OS , unsigned Indent) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/AvailabilitySpec.cpp,"OtherPlatformAvailabilitySpec::print( raw_ostream & OS , unsigned Indent) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"getCodeForAccessorKind( AccessorKind kind)",22, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleClosureEntity( const AbstractClosureExpr * closure , SymbolKind SKind)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleEntity( const ValueDecl * decl , bool isCurried , SymbolKind SKind)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleDestructorEntity( const DestructorDecl * decl , bool isDeallocating , SymbolKind SKind)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleConstructorEntity( const ConstructorDecl * ctor , bool isAllocating , bool isCurried , SymbolKind SKind)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleIVarInitDestroyEntity( const ClassDecl * decl , bool isDestroyer , SymbolKind SKind)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleAccessorEntity( AccessorKind kind , const AbstractStorageDecl * decl , bool isStatic , SymbolKind SKind)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleGlobalGetterEntity( const ValueDecl * decl , SymbolKind SKind)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleDefaultArgumentEntity( const DeclContext * func , unsigned index , SymbolKind SKind)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleInitializerEntity( const VarDecl * var , SymbolKind SKind)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleNominalType( const NominalTypeDecl * decl)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleVTableThunk( const FuncDecl * Base , const FuncDecl * Derived)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleConstructorVTableThunk( const ConstructorDecl * Base , const ConstructorDecl * Derived , bool isAllocating)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleWitnessTable( const RootProtocolConformance * C)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleWitnessThunk( const ProtocolConformance * Conformance , const ValueDecl * Requirement)",23, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleClosureWitnessThunk( const ProtocolConformance * Conformance , const AbstractClosureExpr * Closure)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleGlobalVariableFull( const VarDecl * decl)",16, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleKeyPathGetterThunkHelper( const AbstractStorageDecl * property , GenericSignature * signature , CanType baseType , SubstitutionMap subs , ResilienceExpansion expansion)",23, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleKeyPathSetterThunkHelper( const AbstractStorageDecl * property , GenericSignature * signature , CanType baseType , SubstitutionMap subs , ResilienceExpansion expansion)",23, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleKeyPathEqualsHelper( ArrayRef<CanType> indices , GenericSignature * signature , ResilienceExpansion expansion)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleKeyPathHashHelper( ArrayRef<CanType> indices , GenericSignature * signature , ResilienceExpansion expansion)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleGlobalInit( const VarDecl * decl , int counter , bool isInitFunc)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleReabstractionThunkHelper( CanSILFunctionType ThunkType , Type FromType , Type ToType , ModuleDecl * Module)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleTypeForDebugger( Type Ty , const DeclContext * DC)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleDeclType( const ValueDecl * decl)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"isPrivate( const NominalTypeDecl * Nominal)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleObjCRuntimeName( const NominalTypeDecl * Nominal)",65, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleTypeAsContextUSR( const NominalTypeDecl * type)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleDeclAsUSR( const ValueDecl * Decl , StringRef USRPrefix)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::mangleAccessorEntityAsUSR( AccessorKind kind , const AbstractStorageDecl * decl , StringRef USRPrefix)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendSymbolKind( SymbolKind SKind)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"getUnnamedParamIndex( const ParameterList * ParamList , const ParamDecl * D , unsigned & UnnamedIndex)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"getUnnamedParamIndex( const ParamDecl * D)",24, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"getPrivateDiscriminatorIfNecessary( const ValueDecl * decl)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendDeclName( const ValueDecl * decl)",60, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"getMetatypeRepresentationOp( MetatypeRepresentation Rep)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"isStdlibType( const TypeDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"shouldMangleAsGeneric( Type type)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendType( Type type)",299, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendAssocType( DependentMemberType * DepTy , bool & isAssocTypeAtDepth)",28, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendOpWithGenericParamIndex( StringRef Op , const GenericTypeParamType * paramTy)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::bindGenericParameters( CanGenericSignature sig)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::bindGenericParameters( const DeclContext * DC)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendBoundGenericArgs( DeclContext * dc , SubstitutionMap subs , bool & isFirstArgList)",46, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendBoundGenericArgs( Type type , bool & isFirstArgList)",32, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"isRetroactiveConformance( const RootProtocolConformance * root)",22, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"containsRetroactiveConformance( const ProtocolConformance * conformance , ModuleDecl * module)",18, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendRetroactiveConformances( Type type)",38, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"getParamConvention( ParameterConvention conv)",16, 3, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"getResultConvention( ResultConvention conv)",10, 3, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendImplFunctionType( SILFunctionType * fn)",67, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::getSpecialManglingContext( const ValueDecl * decl)",36, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendContextOf( const ValueDecl * decl)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"FindFirstVariable::visitNamedPattern( NamedPattern * P)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"FindFirstVariable::visitTuplePattern( TuplePattern * P)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"FindFirstVariable::visitParenPattern( ParenPattern * P)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"FindFirstVariable::visitVarPattern( VarPattern * P)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"FindFirstVariable::visitTypedPattern( TypedPattern * P)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"FindFirstVariable::visitAnyPattern( AnyPattern * P)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"findFirstVariable( PatternBindingDecl * binding)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendContext( const DeclContext * ctx)",125, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendModule( const ModuleDecl * module)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendProtocolName( const ProtocolDecl * protocol , bool allowStandardSubstitution)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::getClangDeclForMangling( const ValueDecl * vd)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendSymbolicReference( SymbolicReferent referent)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendAnyGenericType( const GenericTypeDecl * decl)",91, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendFunction( AnyFunctionType * fn , bool isFunctionMangling)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendFunctionType( AnyFunctionType * fn , bool isAutoClosure)",36, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendFunctionSignature( AnyFunctionType * fn)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendFunctionInputType( ArrayRef<AnyFunctionType::Param> params)",35, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendFunctionResultType( Type resultType)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendTypeList( Type listTy)",18, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendTypeListElement( Identifier name , Type elementType , ParameterTypeFlags flags)",26, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendGenericSignature( const GenericSignature * sig , GenericSignature * contextSig)",56, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendRequirement( const Requirement & reqt)",70, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendGenericSignatureParts( TypeArrayView<GenericTypeParamType> params , unsigned initialParamDepth , ArrayRef<Requirement> requirements)",50, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendAssociatedTypeName( DependentMemberType * dmt)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendClosureEntity( const SerializedAbstractClosureExpr * closure)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendClosureEntity( const AbstractClosureExpr * closure)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendClosureComponents( Type Ty , unsigned discriminator , bool isImplicit , const DeclContext * parentContext)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendDefaultArgumentEntity( const DeclContext * func , unsigned index)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendInitializerEntity( const VarDecl * var)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"isMethodDecl( const Decl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::getDeclTypeForMangling( const ValueDecl * decl , GenericSignature * & genericSig , GenericSignature * & parentGenericSig)",40, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendDeclType( const ValueDecl * decl , bool isFunctionMangling)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::tryAppendStandardSubstitution( const GenericTypeDecl * decl)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendConstructorEntity( const ConstructorDecl * ctor , bool isAllocating)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendDestructorEntity( const DestructorDecl * dtor , bool isDeallocating)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendAccessorEntity( StringRef accessorKindCode , const AbstractStorageDecl * decl , bool isStatic)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendEntity( const ValueDecl * decl , StringRef EntityOp , bool isStatic)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendEntity( const ValueDecl * decl)",26, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendProtocolConformance( const ProtocolConformance * conformance)",32, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendProtocolConformanceRef( const RootProtocolConformance * conformance)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"conformanceRequirementIndex( const ConformanceAccessPath :: Entry & entry , ArrayRef<Requirement> requirements)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendDependentProtocolConformance( const ConformanceAccessPath & path)",48, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendConcreteProtocolConformance( const ProtocolConformance * conformance)",49, 2, 0, 0
repos/cpp/swift/lib/AST/ASTMangler.cpp,"ASTMangler::appendOpParamForLayoutConstraint( LayoutConstraint layout)",37, 2, 0, 0
repos/cpp/swift/lib/AST/CaptureInfo.cpp,"CaptureInfo::hasLocalCaptures() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/CaptureInfo.cpp,"CaptureInfo::getLocalCaptures( SmallVectorImpl<CapturedValue> & Result) const",14, 2, 0, 0
repos/cpp/swift/lib/AST/CaptureInfo.cpp,"CaptureInfo::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/CaptureInfo.cpp,"CaptureInfo::print( raw_ostream & OS) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"DocComment::operator new( size_t Bytes , swift :: markup :: MarkupContext & MC , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"extractParamOutlineItem( swift :: markup :: MarkupContext & MC , swift :: markup :: MarkupASTNode * Node)",38, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"extractParameterOutline( swift :: markup :: MarkupContext & MC , swift :: markup :: List * L , SmallVectorImpl<swift::markup::ParamField*> & ParamFields)",74, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"extractSeparatedParams( swift :: markup :: MarkupContext & MC , swift :: markup :: List * L , SmallVectorImpl<swift::markup::ParamField*> & ParamFields)",63, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"extractSimpleField( swift :: markup :: MarkupContext & MC , swift :: markup :: List * L , swift :: markup :: CommentParts & Parts , SmallVectorImpl<const swift::markup::MarkupASTNode*> & BodyNodes)",74, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"swift::extractCommentParts( swift :: markup :: MarkupContext & MC , swift :: markup :: MarkupASTNode * Node)",49, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"swift::getSingleDocComment( swift :: markup :: MarkupContext & MC , const Decl * D)",12, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"getAnyBaseClassDocComment( swift :: markup :: MarkupContext & MC , const ClassDecl * CD , const Decl * D)",50, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"getProtocolRequirementDocComment( swift :: markup :: MarkupContext & MC , const ProtocolDecl * ProtoExt , const Decl * D)",37, 2, 0, 0
repos/cpp/swift/lib/AST/DocComment.cpp,"swift::getCascadingDocComment( swift :: markup :: MarkupContext & MC , const Decl * D)",17, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::getLayoutConstraint( Identifier ID , ASTContext & Ctx)",28, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::getName() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::getName( LayoutConstraintKind Kind)",22, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::Profile( llvm :: FoldingSetNodeID & ID , LayoutConstraintKind Kind , unsigned SizeInBits , unsigned Alignment)",8, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isKnownLayout( LayoutConstraintKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isFixedSizeTrivial( LayoutConstraintKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isKnownSizeTrivial( LayoutConstraintKind Kind)",4, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isAddressOnlyTrivial( LayoutConstraintKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isTrivial( LayoutConstraintKind Kind)",4, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isRefCountedObject( LayoutConstraintKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isNativeRefCountedObject( LayoutConstraintKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isAnyRefCountedObject( LayoutConstraintKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isClass( LayoutConstraintKind Kind)",4, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isNativeClass( LayoutConstraintKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isRefCounted( LayoutConstraintKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::isNativeRefCounted( LayoutConstraintKind Kind)",4, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintInfo::operator new( size_t bytes , const ASTContext & ctx , AllocationArena arena , unsigned alignment)",5, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraintLoc::getSourceRange() const",1, 77, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::mergeKnownSizeTrivialConstraints( LayoutConstraint LHS , LayoutConstraint RHS)",30, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraint::merge( LayoutConstraint Other)",48, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraint::getLayoutConstraint( LayoutConstraintKind Kind)",23, 2, 0, 0
repos/cpp/swift/lib/AST/LayoutConstraint.cpp,"swift::LayoutConstraint::getUnknownLayout()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"swift::getFunctionRefKindStr( FunctionRefKind refKind)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::operator new( size_t Bytes , ASTContext & C , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getKindName( ExprKind K)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"isOverriddenFromExpr( ReturnType(Class::*)() const)",3, 4, 2, 0
repos/cpp/swift/lib/AST/Expr.cpp,"isOverriddenFromExpr( ReturnType(Expr::*)() const)",3, 4, 2, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Dispatch<true>::getStartLoc( const T * E)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Dispatch<true>::getEndLoc( const T * E)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Dispatch<true>::getLoc( const T * E)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Dispatch<true>::getSourceRange( const T * E)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Dispatch<false>::getStartLoc( const T * E)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Dispatch<false>::getEndLoc( const T * E)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Dispatch<false>::getLoc( const T * E)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Dispatch<false>::getSourceRange( const T * E)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::setType( Type T)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"getSourceRangeImpl( const T * E)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getSourceRange() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"getStartLocImpl( const T * E)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getStartLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"getEndLocImpl( const T * E)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getEndLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"getLocImpl( const T * E)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getSemanticsProvidingExpr()",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getValueProvidingExpr()",11, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getMemberOperatorRef()",17, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getReferencedDecl() const",146, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::forEachImmediateChildExpr( llvm :: function_ref<Expr*(Expr*)> callback)",33, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::forEachChildExpr( llvm :: function_ref<Expr*(Expr*)> callback)",26, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::isTypeReference( llvm :: function_ref<Type(const Expr*)> getType) const",33, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::isStaticallyDerivedMetatype( llvm :: function_ref<Type(const Expr*)> getType) const",21, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::isSuperExpr() const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::canAppendPostfixExpression( bool appendingPostfixOperator) const",159, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getParentMap()",21, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getDepthMap()",26, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::getPreorderIndexMap()",21, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"shallowCloneImpl( const NilLiteralExpr * E , ASTContext & Ctx , llvm :: function_ref<Type(const Expr*)> getType)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"shallowCloneImpl( const IntegerLiteralExpr * E , ASTContext & Ctx , llvm :: function_ref<Type(const Expr*)> getType)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"shallowCloneImpl( const FloatLiteralExpr * E , ASTContext & Ctx , llvm :: function_ref<Type(const Expr*)> getType)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"shallowCloneImpl( const BooleanLiteralExpr * E , ASTContext & Ctx , llvm :: function_ref<Type(const Expr*)> getType)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"shallowCloneImpl( const StringLiteralExpr * E , ASTContext & Ctx , llvm :: function_ref<Type(const Expr*)> getType)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"shallowCloneImpl( const InterpolatedStringLiteralExpr * E , ASTContext & Ctx , llvm :: function_ref<Type(const Expr*)> getType)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"shallowCloneImpl( const MagicIdentifierLiteralExpr * E , ASTContext & Ctx , llvm :: function_ref<Type(const Expr*)> getType)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"shallowCloneImpl( const ObjectLiteralExpr * E , ASTContext & Ctx , llvm :: function_ref<Type(const Expr*)> getType)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"LiteralExpr::shallowClone( ASTContext & Ctx , llvm :: function_ref<void(Expr*,Type)> setType , llvm :: function_ref<Type(const Expr*)> getType) const",26, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"IntegerLiteralExpr::createFromUnsigned( ASTContext & C , unsigned value)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"IntegerLiteralExpr::getRawValue() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"IntegerLiteralExpr::getValue() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"BuiltinIntegerWidth::parse( StringRef text , unsigned radix , bool negate , bool * hadError) const",64, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"getFloatLiteralValue( bool IsNegative , StringRef Text , const llvm :: fltSemantics & Semantics)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"FloatLiteralExpr::getValue( StringRef Text , const llvm :: fltSemantics & Semantics , bool Negative)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"FloatLiteralExpr::getValue() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"StringLiteralExpr::StringLiteralExpr( StringRef Val , SourceRange Range , bool Implicit)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"getArgumentLabelsFromArgument( Expr * arg , SmallVectorImpl<Identifier> & scratch , SmallVectorImpl<SourceLoc> * sourceLocs = nullptr , bool * hasTrailingClosure = nullptr , llvm :: function_ref<Type(const Expr*)> getType = [ ](const Expr*E) -> Type { return E -> getType() ; })",57, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"computeSingleArgumentType( ASTContext & ctx , Expr * arg , bool implicit , llvm :: function_ref<Type(const Expr*)> getType)",29, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"packSingleArgument( ASTContext & ctx , SourceLoc lParenLoc , ArrayRef<Expr*> args , ArrayRef<Identifier> & argLabels , ArrayRef<SourceLoc> & argLabelLocs , SourceLoc rParenLoc , Expr * trailingClosure , bool implicit , SmallVectorImpl<Identifier> & argLabelsScratch , SmallVectorImpl<SourceLoc> & argLabelLocsScratch , llvm :: function_ref<Type(const Expr*)> getType = [ ](const Expr*E) -> Type { return E -> getType() ; })",89, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ObjectLiteralExpr::ObjectLiteralExpr( SourceLoc PoundLoc , LiteralKind LitKind , Expr * Arg , ArrayRef<Identifier> argLabels , ArrayRef<SourceLoc> argLabelLocs , bool hasTrailingClosure , bool implicit)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ObjectLiteralExpr::create( ASTContext & ctx , SourceLoc poundLoc , LiteralKind kind , Expr * arg , bool implicit , llvm :: function_ref<Type(const Expr*)> getType)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ObjectLiteralExpr::create( ASTContext & ctx , SourceLoc poundLoc , LiteralKind kind , SourceLoc lParenLoc , ArrayRef<Expr*> args , ArrayRef<Identifier> argLabels , ArrayRef<SourceLoc> argLabelLocs , SourceLoc rParenLoc , Expr * trailingClosure , bool implicit)",24, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ObjectLiteralExpr::getLiteralKindRawName() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ObjectLiteralExpr::getLiteralKindPlainName() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"OtherConstructorDeclRefExpr::getDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"MemberRefExpr::MemberRefExpr( Expr * base , SourceLoc dotLoc , ConcreteDeclRef member , DeclNameLoc nameLoc , bool Implicit , AccessSemantics semantics)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"OverloadSetRefExpr::getBaseType() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"OverloadSetRefExpr::hasBaseObject() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"InOutExpr::InOutExpr( SourceLoc operLoc , Expr * subExpr , Type baseType , bool isImplicit)",5, 42, 4, 0
repos/cpp/swift/lib/AST/Expr.cpp,"SequenceExpr::create( ASTContext & ctx , ArrayRef<Expr*> elements)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ErasureExpr::create( ASTContext & ctx , Expr * subExpr , Type type , ArrayRef<ProtocolConformanceRef> conformances)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"UnresolvedSpecializeExpr::create( ASTContext & ctx , Expr * SubExpr , SourceLoc LAngleLoc , ArrayRef<TypeLoc> UnresolvedParams , SourceLoc RAngleLoc)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"CaptureListExpr::create( ASTContext & ctx , ArrayRef<CaptureListEntry> captureList , ClosureExpr * closureBody)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TupleShuffleExpr::create( ASTContext & ctx , Expr * subExpr , ArrayRef<int> elementMapping , TypeImpact typeImpact , ConcreteDeclRef defaultArgsOwner , ArrayRef<unsigned> VariadicArgs , Type VarargsArrayTy , ArrayRef<Expr*> CallerDefaultArgs , Type ty)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TupleExpr::getSourceRange() const",39, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TupleExpr::TupleExpr( SourceLoc LParenLoc , ArrayRef<Expr*> SubExprs , ArrayRef<Identifier> ElementNames , ArrayRef<SourceLoc> ElementNameLocs , SourceLoc RParenLoc , bool HasTrailingClosure , bool Implicit , Type Ty)",34, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TupleExpr::create( ASTContext & ctx , SourceLoc LParenLoc , ArrayRef<Expr*> SubExprs , ArrayRef<Identifier> ElementNames , ArrayRef<SourceLoc> ElementNameLocs , SourceLoc RParenLoc , bool HasTrailingClosure , bool Implicit , Type Ty)",28, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TupleExpr::createEmpty( ASTContext & ctx , SourceLoc LParenLoc , SourceLoc RParenLoc , bool Implicit)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TupleExpr::createImplicit( ASTContext & ctx , ArrayRef<Expr*> SubExprs , ArrayRef<Identifier> ElementNames)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ArrayExpr::create( ASTContext & C , SourceLoc LBracketLoc , ArrayRef<Expr*> Elements , ArrayRef<SourceLoc> CommaLocs , SourceLoc RBracketLoc , Type Ty)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"DictionaryExpr::create( ASTContext & C , SourceLoc LBracketLoc , ArrayRef<Expr*> Elements , ArrayRef<SourceLoc> CommaLocs , SourceLoc RBracketLoc , Type Ty)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"getCalledValue( Expr * E)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ApplyExpr::getCalledValue() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"SubscriptExpr::SubscriptExpr( Expr * base , Expr * index , ArrayRef<Identifier> argLabels , ArrayRef<SourceLoc> argLabelLocs , bool hasTrailingClosure , ConcreteDeclRef decl , bool implicit , AccessSemantics semantics)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"SubscriptExpr::create( ASTContext & ctx , Expr * base , Expr * index , ConcreteDeclRef decl , bool implicit , AccessSemantics semantics , llvm :: function_ref<Type(const Expr*)> getType)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"SubscriptExpr::create( ASTContext & ctx , Expr * base , SourceLoc lSquareLoc , ArrayRef<Expr*> indexArgs , ArrayRef<Identifier> indexArgLabels , ArrayRef<SourceLoc> indexArgLabelLocs , SourceLoc rSquareLoc , Expr * trailingClosure , ConcreteDeclRef decl , bool implicit , AccessSemantics semantics)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"DynamicSubscriptExpr::DynamicSubscriptExpr( Expr * base , Expr * index , ArrayRef<Identifier> argLabels , ArrayRef<SourceLoc> argLabelLocs , bool hasTrailingClosure , ConcreteDeclRef member , bool implicit)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"DynamicSubscriptExpr::create( ASTContext & ctx , Expr * base , Expr * index , ConcreteDeclRef decl , bool implicit , llvm :: function_ref<Type(const Expr*)> getType)",19, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"DynamicSubscriptExpr::create( ASTContext & ctx , Expr * base , SourceLoc lSquareLoc , ArrayRef<Expr*> indexArgs , ArrayRef<Identifier> indexArgLabels , ArrayRef<SourceLoc> indexArgLabelLocs , SourceLoc rSquareLoc , Expr * trailingClosure , ConcreteDeclRef decl , bool implicit)",25, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"UnresolvedMemberExpr::UnresolvedMemberExpr( SourceLoc dotLoc , DeclNameLoc nameLoc , DeclName name , Expr * argument , ArrayRef<Identifier> argLabels , ArrayRef<SourceLoc> argLabelLocs , bool hasTrailingClosure , bool implicit)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"UnresolvedMemberExpr::create( ASTContext & ctx , SourceLoc dotLoc , DeclNameLoc nameLoc , DeclName name , bool implicit)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"UnresolvedMemberExpr::create( ASTContext & ctx , SourceLoc dotLoc , DeclNameLoc nameLoc , DeclName name , SourceLoc lParenLoc , ArrayRef<Expr*> args , ArrayRef<Identifier> argLabels , ArrayRef<SourceLoc> argLabelLocs , SourceLoc rParenLoc , Expr * trailingClosure , bool implicit)",26, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ApplyExpr::getArgumentLabels( SmallVectorImpl<Identifier> & scratch) const",23, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ApplyExpr::hasTrailingClosure() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"CallExpr::CallExpr( Expr * fn , Expr * arg , bool Implicit , ArrayRef<Identifier> argLabels , ArrayRef<SourceLoc> argLabelLocs , bool hasTrailingClosure , Type ty)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"CallExpr::create( ASTContext & ctx , Expr * fn , Expr * arg , ArrayRef<Identifier> argLabels , ArrayRef<SourceLoc> argLabelLocs , bool hasTrailingClosure , bool implicit , Type type , llvm :: function_ref<Type(const Expr*)> getType)",23, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"CallExpr::create( ASTContext & ctx , Expr * fn , SourceLoc lParenLoc , ArrayRef<Expr*> args , ArrayRef<Identifier> argLabels , ArrayRef<SourceLoc> argLabelLocs , SourceLoc rParenLoc , Expr * trailingClosure , bool implicit , llvm :: function_ref<Type(const Expr*)> getType)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"CallExpr::getDirectCallee() const",18, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"RebindSelfInConstructorExpr::RebindSelfInConstructorExpr( Expr * SubExpr , VarDecl * Self)",6, 3, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"RebindSelfInConstructorExpr::getCalledConstructor( bool & isChainToSuper) const",52, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"AbstractClosureExpr::setParameterList( ParameterList * P)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"AbstractClosureExpr::getResultType( llvm :: function_ref<Type(const Expr*)> getType) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"AbstractClosureExpr::isBodyThrowing() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"AbstractClosureExpr::hasSingleExpressionBody() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ClosureExpr::getSingleExpressionBody() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ClosureExpr::setSingleExpressionBody( Expr * NewBody)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ClosureExpr::hasEmptyBody() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"AutoClosureExpr::setBody( Expr * E)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"AutoClosureExpr::getSingleExpressionBody() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TypeExpr::TypeExpr( TypeLoc TyLoc)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TypeExpr::TypeExpr( Type Ty)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TypeExpr::getInstanceType( llvm :: function_ref<bool(const Expr*)> hasType , llvm :: function_ref<Type(const Expr*)> getType) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TypeExpr::createForDecl( SourceLoc Loc , TypeDecl * Decl , DeclContext * DC , bool isImplicit)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TypeExpr::createForMemberDecl( SourceLoc ParentNameLoc , TypeDecl * Parent , SourceLoc NameLoc , TypeDecl * Decl)",26, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TypeExpr::createForMemberDecl( IdentTypeRepr * ParentTR , SourceLoc NameLoc , TypeDecl * Decl)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TypeExpr::createForSpecializedDecl( IdentTypeRepr * ParentTR , ArrayRef<TypeRepr*> Args , SourceRange AngleLocs , ASTContext & C)",51, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TypeExpr::createImplicitHack( SourceLoc Loc , Type Ty , ASTContext & C)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"Expr::isSelfExprOf( const AbstractFunctionDecl * AFD , bool sameBase) const",17, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"OpenExistentialExpr::getOpenedArchetype() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"KeyPathExpr::KeyPathExpr( ASTContext & C , SourceLoc keywordLoc , SourceLoc lParenLoc , ArrayRef<Component> components , SourceLoc rParenLoc , bool isImplicit)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"KeyPathExpr::resolveComponents( ASTContext & C , ArrayRef<KeyPathExpr::Component> resolvedComponents)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"KeyPathExpr::Component::forSubscript( ASTContext & ctx , ConcreteDeclRef subscript , SourceLoc lSquareLoc , ArrayRef<Expr*> indexArgs , ArrayRef<Identifier> indexArgLabels , ArrayRef<SourceLoc> indexArgLabelLocs , SourceLoc rSquareLoc , Expr * trailingClosure , Type elementType , ArrayRef<ProtocolConformanceRef> indexHashables)",23, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"KeyPathExpr::Component::forUnresolvedSubscript( ASTContext & ctx , SourceLoc lSquareLoc , ArrayRef<Expr*> indexArgs , ArrayRef<Identifier> indexArgLabels , ArrayRef<SourceLoc> indexArgLabelLocs , SourceLoc rSquareLoc , Expr * trailingClosure)",18, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"KeyPathExpr::Component::Component( ASTContext * ctxForCopyingLabels , DeclNameOrRef decl , Expr * indexExpr , ArrayRef<Identifier> subscriptLabels , ArrayRef<ProtocolConformanceRef> indexHashables , Kind kind , Type type , SourceLoc loc)",18, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"KeyPathExpr::Component::forSubscriptWithPrebuiltIndexExpr( ConcreteDeclRef subscript , Expr * index , ArrayRef<Identifier> labels , Type elementType , SourceLoc loc , ArrayRef<ProtocolConformanceRef> indexHashables)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"KeyPathExpr::Component::setSubscriptIndexHashableConformances( ArrayRef<ProtocolConformanceRef> hashables)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"InterpolatedStringLiteralExpr::forEachSegment( ASTContext & Ctx , llvm :: function_ref<void(bool,CallExpr*)> callback)",32, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TapExpr::TapExpr( Expr * SubExpr , BraceStmt * Body)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"TapExpr::getVar() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ExprTraceFormatter::traceName( const void * Entity , raw_ostream & OS) const",6, 4, 2, 0
repos/cpp/swift/lib/AST/Expr.cpp,"ExprTraceFormatter::traceLoc( const void * Entity , SourceManager * SM , clang :: SourceManager * CSM , raw_ostream & OS) const",7, 4, 2, 0
repos/cpp/swift/lib/AST/Expr.cpp,"FrontendStatsTracer::getTraceFormatter<constExpr*>()",3, 2, 0, 0
repos/cpp/swift/lib/AST/ConcreteDeclRef.cpp,"ConcreteDeclRef::getOverriddenDecl() const",19, 2, 0, 0
repos/cpp/swift/lib/AST/ConcreteDeclRef.cpp,"ConcreteDeclRef::dump( raw_ostream & os)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ConcreteDeclRef.cpp,"ConcreteDeclRef::dump()",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"RequirementRepr::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"RequirementRepr::printImpl( ASTPrinter & out , bool AsWritten) const",34, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"RequirementRepr::print( raw_ostream & out) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"RequirementRepr::print( ASTPrinter & out) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"GenericParamList::print( llvm :: raw_ostream & OS)",22, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"GenericParamList::dump()",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"printGenericParameters( raw_ostream & OS , GenericParamList * Params)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getSILFunctionTypeRepresentationString( SILFunctionType :: Representation value)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"swift::getReadImplKindName( ReadImplKind kind)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"swift::getWriteImplKindName( WriteImplKind kind)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"swift::getReadWriteImplKindName( ReadWriteImplKind kind)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getImportKindString( ImportKind value)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getForeignErrorConventionKindString( ForeignErrorConvention :: Kind value)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getDefaultArgumentKindString( DefaultArgumentKind value)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getAccessorKindString( AccessorKind value)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getMagicIdentifierLiteralExprKindString( MagicIdentifierLiteralExpr :: Kind value)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getObjCSelectorExprKindString( ObjCSelectorExpr :: ObjCSelectorKind value)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getAccessSemanticsString( AccessSemantics value)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getMetatypeRepresentationString( MetatypeRepresentation value)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getStringLiteralExprEncodingString( StringLiteralExpr :: Encoding value)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getCtorInitializerKindString( CtorInitializerKind value)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getOptionalTypeKindString( OptionalTypeKind value)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"getAssociativityString( Associativity value)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"printName( raw_ostream & os , DeclName name)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::PrintPattern( raw_ostream & os , unsigned indent = 0)",2, 35, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::printRec( Decl * D)",1, 56, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::printRec( Expr * E)",1, 56, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::printRec( Stmt * S , const ASTContext & Ctx)",1, 85, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::printRec( const Pattern * P)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::printCommon( Pattern * P , const char * Name)",15, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitParenPattern( ParenPattern * P)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitTuplePattern( TuplePattern * P)",17, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitNamedPattern( NamedPattern * P)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitAnyPattern( AnyPattern * P)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitTypedPattern( TypedPattern * P)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitIsPattern( IsPattern * P)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitExprPattern( ExprPattern * P)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitVarPattern( VarPattern * P)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitEnumElementPattern( EnumElementPattern * P)",12, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitOptionalSomePattern( OptionalSomePattern * P)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::visitBoolPattern( BoolPattern * P)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::PrintDecl( raw_ostream & os , unsigned indent = 0)",2, 35, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printRec( Decl * D)",1, 67, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printRec( Expr * E)",1, 54, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printRec( Stmt * S , const ASTContext & Ctx)",1, 83, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printRec( Pattern * P)",1, 71, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printField( StringRef name , const T & value)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printCommon( Decl * D , const char * Name , TerminalColor Color = DeclColor)",19, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printInherited( ArrayRef<TypeLoc> Inherited)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitImportDecl( ImportDecl * ID)",17, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitExtensionDecl( ExtensionDecl * ED)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printDeclName( const ValueDecl * D)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitTypeAliasDecl( TypeAliasDecl * TAD)",12, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printAbstractTypeParamCommon( AbstractTypeParamDecl * decl , const char * name)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitGenericTypeParamDecl( GenericTypeParamDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitAssociatedTypeDecl( AssociatedTypeDecl * decl)",24, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitProtocolDecl( ProtocolDecl * PD)",25, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printCommon( ValueDecl * VD , const char * Name , TerminalColor Color = DeclColor)",59, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printCommon( NominalTypeDecl * NTD , const char * Name , TerminalColor Color = DeclColor)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitSourceFile( const SourceFile & SF)",15, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitVarDecl( VarDecl * VD)",14, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printStorageImpl( AbstractStorageDecl * D)",17, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printAccessors( AbstractStorageDecl * D)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitParamDecl( ParamDecl * PD)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitEnumCaseDecl( EnumCaseDecl * ECD)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitEnumDecl( EnumDecl * ED)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitEnumElementDecl( EnumElementDecl * EED)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitStructDecl( StructDecl * SD)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitClassDecl( ClassDecl * CD)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitPatternBindingDecl( PatternBindingDecl * PBD)",13, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitSubscriptDecl( SubscriptDecl * SD)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printCommonAFD( AbstractFunctionDecl * D , const char * Type)",23, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printParameter( const ParamDecl * P)",57, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printParameterList( const ParameterList * params , const ASTContext * ctx = nullptr)",25, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printAbstractFunctionDecl( AbstractFunctionDecl * D)",28, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printCommonFD( FuncDecl * FD , const char * type)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitFuncDecl( FuncDecl * FD)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitAccessorDecl( AccessorDecl * AD)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitConstructorDecl( ConstructorDecl * CD)",12, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitDestructorDecl( DestructorDecl * DD)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitTopLevelCodeDecl( TopLevelCodeDecl * TLCD)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printASTNodes( const ArrayRef<ASTNode> & Elements , const ASTContext & Ctx , StringRef Name)",15, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitIfConfigDecl( IfConfigDecl * ICD)",23, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitPoundDiagnosticDecl( PoundDiagnosticDecl * PDD)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitPrecedenceGroupDecl( PrecedenceGroupDecl * PGD)",25, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printOperatorIdentifiers( OperatorDecl * OD)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitInfixOperatorDecl( InfixOperatorDecl * IOD)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitPrefixOperatorDecl( PrefixOperatorDecl * POD)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitPostfixOperatorDecl( PostfixOperatorDecl * POD)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitModuleDecl( ModuleDecl * MD)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::visitMissingMemberDecl( MissingMemberDecl * MMD)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"ParameterList::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"ParameterList::dump( raw_ostream & OS , unsigned Indent) const",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Decl::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Decl::dump( const char * filename) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Decl::dump( raw_ostream & OS , unsigned Indent) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"swift::printContext( raw_ostream & os , DeclContext * dc)",69, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"ValueDecl::printRef() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"ValueDecl::dumpRef( raw_ostream & os) const",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"ValueDecl::dumpRef() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"SourceFile::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"SourceFile::dump( llvm :: raw_ostream & OS) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Pattern::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::PrintStmt( raw_ostream & os , const ASTContext * ctx , unsigned indent)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::printRec( Stmt * S)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::printRec( Decl * D)",1, 54, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::printRec( Expr * E)",1, 54, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::printRec( const Pattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::printRec( StmtConditionElement C)",40, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::printCommon( Stmt * S , const char * Name)",22, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitBraceStmt( BraceStmt * S)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::printASTNodes( const ArrayRef<ASTNode> & Elements)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitReturnStmt( ReturnStmt * S)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitYieldStmt( YieldStmt * S)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitDeferStmt( DeferStmt * S)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitIfStmt( IfStmt * S)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitGuardStmt( GuardStmt * S)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitDoStmt( DoStmt * S)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitWhileStmt( WhileStmt * S)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitRepeatWhileStmt( RepeatWhileStmt * S)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitForEachStmt( ForEachStmt * S)",26, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitBreakStmt( BreakStmt * S)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitContinueStmt( ContinueStmt * S)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitFallthroughStmt( FallthroughStmt * S)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitSwitchStmt( SwitchStmt * S)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitCaseStmt( CaseStmt * S)",25, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitFailStmt( FailStmt * S)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitThrowStmt( ThrowStmt * S)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitPoundAssertStmt( PoundAssertStmt * S)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitDoCatchStmt( DoCatchStmt * S)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitCatches( ArrayRef<CatchStmt*> clauses)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintStmt::visitCatchStmt( CatchStmt * clause)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Stmt::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Stmt::dump( raw_ostream & OS , const ASTContext * Ctx , unsigned Indent) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::PrintExpr( raw_ostream & os , llvm :: function_ref<Type(const Expr*)> getTypeOfExpr , llvm :: function_ref<Type(const TypeLoc&)> getTypeOfTypeLoc , unsigned indent)",6, 62, 8, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printRec( Expr * E)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printRecLabeled( Expr * E , StringRef label)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printRec( Decl * D)",1, 54, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printRec( Stmt * S , const ASTContext & Ctx)",1, 83, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printRec( const Pattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printRec( ProtocolConformanceRef conf)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printDeclRef( ConcreteDeclRef declRef)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printCommon( Expr * E , const char * C)",31, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printSemanticExpr( Expr * semanticExpr)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitErrorExpr( ErrorExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitCodeCompletionExpr( CodeCompletionExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitNilLiteralExpr( NilLiteralExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitIntegerLiteralExpr( IntegerLiteralExpr * E)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitFloatLiteralExpr( FloatLiteralExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitBooleanLiteralExpr( BooleanLiteralExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitStringLiteralExpr( StringLiteralExpr * E)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitInterpolatedStringLiteralExpr( InterpolatedStringLiteralExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitMagicIdentifierLiteralExpr( MagicIdentifierLiteralExpr * E)",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitObjectLiteralExpr( ObjectLiteralExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDiscardAssignmentExpr( DiscardAssignmentExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDeclRefExpr( DeclRefExpr * E)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitSuperRefExpr( SuperRefExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitTypeExpr( TypeExpr * E)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitOtherConstructorDeclRefExpr( OtherConstructorDeclRefExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitOverloadedDeclRefExpr( OverloadedDeclRefExpr * E)",17, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitUnresolvedDeclRefExpr( UnresolvedDeclRefExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitUnresolvedSpecializeExpr( UnresolvedSpecializeExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitMemberRefExpr( MemberRefExpr * E)",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDynamicMemberRefExpr( DynamicMemberRefExpr * E)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitUnresolvedMemberExpr( UnresolvedMemberExpr * E)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDotSelfExpr( DotSelfExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitParenExpr( ParenExpr * E)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitTupleExpr( TupleExpr * E)",25, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitArrayExpr( ArrayExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDictionaryExpr( DictionaryExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitSubscriptExpr( SubscriptExpr * E)",18, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitKeyPathApplicationExpr( KeyPathApplicationExpr * E)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDynamicSubscriptExpr( DynamicSubscriptExpr * E)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitUnresolvedDotExpr( UnresolvedDotExpr * E)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitTupleElementExpr( TupleElementExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitTupleShuffleExpr( TupleShuffleExpr * E)",36, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitUnresolvedTypeConversionExpr( UnresolvedTypeConversionExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitFunctionConversionExpr( FunctionConversionExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitCovariantFunctionConversionExpr( CovariantFunctionConversionExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitCovariantReturnConversionExpr( CovariantReturnConversionExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitImplicitlyUnwrappedFunctionConversionExpr( ImplicitlyUnwrappedFunctionConversionExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitErasureExpr( ErasureExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitAnyHashableErasureExpr( AnyHashableErasureExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitConditionalBridgeFromObjCExpr( ConditionalBridgeFromObjCExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitBridgeFromObjCExpr( BridgeFromObjCExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitBridgeToObjCExpr( BridgeToObjCExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitLoadExpr( LoadExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitMetatypeConversionExpr( MetatypeConversionExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitCollectionUpcastConversionExpr( CollectionUpcastConversionExpr * E)",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDerivedToBaseExpr( DerivedToBaseExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitArchetypeToSuperExpr( ArchetypeToSuperExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitInjectIntoOptionalExpr( InjectIntoOptionalExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitClassMetatypeToObjectExpr( ClassMetatypeToObjectExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitExistentialMetatypeToObjectExpr( ExistentialMetatypeToObjectExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitProtocolMetatypeToObjectExpr( ProtocolMetatypeToObjectExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitInOutToPointerExpr( InOutToPointerExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitArrayToPointerExpr( ArrayToPointerExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitStringToPointerExpr( StringToPointerExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitPointerToPointerExpr( PointerToPointerExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitForeignObjectConversionExpr( ForeignObjectConversionExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitUnevaluatedInstanceExpr( UnevaluatedInstanceExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitInOutExpr( InOutExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitVarargExpansionExpr( VarargExpansionExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitForceTryExpr( ForceTryExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitOptionalTryExpr( OptionalTryExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitTryExpr( TryExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitSequenceExpr( SequenceExpr * E)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitCaptureListExpr( CaptureListExpr * E)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printClosure( AbstractClosureExpr * E , char const * name)",16, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitClosureExpr( ClosureExpr * E)",18, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitAutoClosureExpr( AutoClosureExpr * E)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDynamicTypeExpr( DynamicTypeExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitOpaqueValueExpr( OpaqueValueExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printArgumentLabels( ArrayRef<Identifier> argLabels)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printApplyExpr( ApplyExpr * E , const char * NodeName)",17, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitCallExpr( CallExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitPrefixUnaryExpr( PrefixUnaryExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitPostfixUnaryExpr( PostfixUnaryExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitBinaryExpr( BinaryExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDotSyntaxCallExpr( DotSyntaxCallExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitConstructorRefCallExpr( ConstructorRefCallExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitDotSyntaxBaseIgnoredExpr( DotSyntaxBaseIgnoredExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printExplicitCastExpr( ExplicitCastExpr * E , const char * name)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitForcedCheckedCastExpr( ForcedCheckedCastExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitConditionalCheckedCastExpr( ConditionalCheckedCastExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitIsExpr( IsExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitCoerceExpr( CoerceExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitArrowExpr( ArrowExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitRebindSelfInConstructorExpr( RebindSelfInConstructorExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitIfExpr( IfExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitAssignExpr( AssignExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitEnumIsCaseExpr( EnumIsCaseExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitUnresolvedPatternExpr( UnresolvedPatternExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitBindOptionalExpr( BindOptionalExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitOptionalEvaluationExpr( OptionalEvaluationExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitForceValueExpr( ForceValueExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitOpenExistentialExpr( OpenExistentialExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitMakeTemporarilyEscapableExpr( MakeTemporarilyEscapableExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitEditorPlaceholderExpr( EditorPlaceholderExpr * E)",13, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitLazyInitializerExpr( LazyInitializerExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitObjCSelectorExpr( ObjCSelectorExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitKeyPathExpr( KeyPathExpr * E)",80, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitKeyPathDotExpr( KeyPathDotExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::visitTapExpr( TapExpr * E)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Expr::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Expr::dump( raw_ostream & OS , llvm :: function_ref<Type(const Expr*)> getTypeOfExpr , llvm :: function_ref<Type(const TypeLoc&)> getTypeOfTypeLoc , unsigned Indent) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Expr::dump( raw_ostream & OS , unsigned Indent) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Expr::print( ASTPrinter & Printer , const PrintOptions & Opts) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::PrintTypeRepr( raw_ostream & os , unsigned indent)",2, 33, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::printRec( Decl * D)",1, 54, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::printRec( Expr * E)",1, 54, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::printRec( TypeRepr * T)",1, 73, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::printCommon( const char * Name)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitErrorTypeRepr( ErrorTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitAttributedTypeRepr( AttributedTypeRepr * T)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitIdentTypeRepr( IdentTypeRepr * T)",23, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitFunctionTypeRepr( FunctionTypeRepr * T)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitArrayTypeRepr( ArrayTypeRepr * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitDictionaryTypeRepr( DictionaryTypeRepr * T)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitTupleTypeRepr( TupleTypeRepr * T)",21, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitCompositionTypeRepr( CompositionTypeRepr * T)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitMetatypeTypeRepr( MetatypeTypeRepr * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitProtocolTypeRepr( ProtocolTypeRepr * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitInOutTypeRepr( InOutTypeRepr * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitSharedTypeRepr( SharedTypeRepr * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintTypeRepr::visitOwnedTypeRepr( OwnedTypeRepr * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintDecl::printRec( TypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintExpr::printRec( TypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintPattern::printRec( TypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"TypeRepr::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"dumpProtocolConformanceRefRec( const ProtocolConformanceRef conformance , llvm :: raw_ostream & out , unsigned indent , llvm :: SmallPtrSetImpl<const ProtocolConformance*> & visited)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"dumpProtocolConformanceRec( const ProtocolConformance * conformance , llvm :: raw_ostream & out , unsigned indent , llvm :: SmallPtrSetImpl<const ProtocolConformance*> & visited)",127, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"dumpSubstitutionMapRec( SubstitutionMap map , llvm :: raw_ostream & out , SubstitutionMap :: DumpStyle style , unsigned indent , llvm :: SmallPtrSetImpl<const ProtocolConformance*> & visited)",62, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"ProtocolConformanceRef::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"ProtocolConformanceRef::dump( llvm :: raw_ostream & out , unsigned indent) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"ProtocolConformance::dump() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"ProtocolConformance::dump( llvm :: raw_ostream & out , unsigned indent) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"SubstitutionMap::dump( llvm :: raw_ostream & out , DumpStyle style , unsigned indent) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"SubstitutionMap::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printCommon( StringRef label , StringRef name)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printFlag( StringRef name)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printFlag( bool isSet , StringRef name)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printField( StringRef name , const T & value)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::dumpParameterFlags( ParameterTypeFlags paramFlags)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::PrintType( raw_ostream & os , unsigned indent)",1, 77, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printRec( Type type)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printRec( StringRef label , Type type)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitErrorType( ErrorType * T , StringRef label)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitBuiltinIntegerType( BuiltinIntegerType * T , StringRef label)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitBuiltinFloatType( BuiltinFloatType * T , StringRef label)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitBuiltinVectorType( BuiltinVectorType * T , StringRef label)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitNameAliasType( NameAliasType * T , StringRef label)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitParenType( ParenType * T , StringRef label)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitTupleType( TupleType * T , StringRef label)",17, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitEnumType( EnumType * T , StringRef label)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitStructType( StructType * T , StringRef label)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitClassType( ClassType * T , StringRef label)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitProtocolType( ProtocolType * T , StringRef label)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitMetatypeType( MetatypeType * T , StringRef label)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitExistentialMetatypeType( ExistentialMetatypeType * T , StringRef label)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitModuleType( ModuleType * T , StringRef label)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitDynamicSelfType( DynamicSelfType * T , StringRef label)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printArchetypeCommon( ArchetypeType * T , StringRef className , StringRef label)",15, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printArchetypeNestedTypes( ArchetypeType * T)",18, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitPrimaryArchetypeType( PrimaryArchetypeType * T , StringRef label)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitNestedArchetypeType( NestedArchetypeType * T , StringRef label)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitOpenedArchetypeType( OpenedArchetypeType * T , StringRef label)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitGenericTypeParamType( GenericTypeParamType * T , StringRef label)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitDependentMemberType( DependentMemberType * T , StringRef label)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printAnyFunctionParams( ArrayRef<AnyFunctionType::Param> params , StringRef label)",18, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::printAnyFunctionTypeCommon( AnyFunctionType * T , StringRef label , StringRef name)",19, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitFunctionType( FunctionType * T , StringRef label)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitGenericFunctionType( GenericFunctionType * T , StringRef label)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitSILFunctionType( SILFunctionType * T , StringRef label)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitSILBlockStorageType( SILBlockStorageType * T , StringRef label)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitSILBoxType( SILBoxType * T , StringRef label)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitArraySliceType( ArraySliceType * T , StringRef label)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitOptionalType( OptionalType * T , StringRef label)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitDictionaryType( DictionaryType * T , StringRef label)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitProtocolCompositionType( ProtocolCompositionType * T , StringRef label)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitLValueType( LValueType * T , StringRef label)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitInOutType( InOutType * T , StringRef label)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitUnboundGenericType( UnboundGenericType * T , StringRef label)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitBoundGenericClassType( BoundGenericClassType * T , StringRef label)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitBoundGenericStructType( BoundGenericStructType * T , StringRef label)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitBoundGenericEnumType( BoundGenericEnumType * T , StringRef label)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"PrintType::visitTypeVariableType( TypeVariableType * T , StringRef label)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Type::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"Type::dump( raw_ostream & os , unsigned indent) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"TypeBase::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"TypeBase::dump( raw_ostream & os , unsigned indent) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"GenericEnvironment::dump( raw_ostream & os) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTDumper.cpp,"GenericEnvironment::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"QueryTypeSubstitutionMap::operator ( )( SubstitutableType * type) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"QueryTypeSubstitutionMapOrIdentity::operator ( )( SubstitutableType * type) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"QuerySubstitutionMap::operator ( )( SubstitutableType * type) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeLoc::setType( Type Ty)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeLoc::isError() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeLoc::getSourceRange() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeLoc::clone( ASTContext & ctx) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeLoc::getLoc() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::operator new( size_t bytes , const ASTContext & ctx , AllocationArena arena , unsigned alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"CanType::getAnyNominal() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"CanType::getAnyGeneric() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isEqual( Type Other)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::hasReferenceSemantics()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isUninhabited()",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isStructurallyUninhabited()",10, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isAny()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isAnyClassReferenceType()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"CanType::isReferenceTypeImpl( CanType type , bool functionsCount)",74, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::allowsOwnership()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ExistentialLayout::ExistentialLayout( ProtocolType * type)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ExistentialLayout::ExistentialLayout( ProtocolCompositionType * type)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getExistentialLayout()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"CanType::getExistentialLayout()",7, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ExistentialLayout::requiresClass() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ExistentialLayout::getSuperclass() const",19, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ExistentialLayout::isAnyObject() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isObjCExistentialType()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"CanType::isObjCExistentialTypeImpl( CanType type)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isSpecialized()",13, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::hasOpenedExistential( OpenedArchetypeType * opened)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getOpenedExistentials( SmallVectorImpl<OpenedArchetypeType*> & opened)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::eraseOpenedExistential( OpenedArchetypeType * opened)",26, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::eraseDynamicSelfType()",10, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::addCurriedSelfType( const DeclContext * dc)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getTypeVariables( SmallVectorImpl<TypeVariableType*> & typeVariables)",19, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"isLegalSILType( CanType type)",30, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isLegalSILType()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"isLegalFormalType( CanType type)",29, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isLegalFormalType()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isVoid()",5, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isBool()",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isAssignableType()",11, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getRValueType()",11, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getOptionalObjectType()",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"CanType::getOptionalObjectTypeImpl( CanType type)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getAnyPointerElementType( PointerTypeKind & PTK)",28, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::lookThroughAllOptionalTypes()",7, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::lookThroughAllOptionalTypes( SmallVectorImpl<Type> & optionals)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isAnyObject()",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ExistentialLayout::isErrorExistential() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ExistentialLayout::isExistentialWithError( ASTContext & ctx) const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ExistentialLayout::getLayoutConstraint() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isExistentialWithError()",10, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::removeArgumentLabels( unsigned numArgumentLabels)",23, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getWithoutParens()",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::replaceCovariantResultType( Type newResultType , unsigned uncurryLevel)",28, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"swift::computeDefaultMap( ArrayRef<AnyFunctionType::Param> params , const ValueDecl * paramOwner , bool skipCurriedSelf)",51, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"swift::getParamListAsString( ArrayRef<AnyFunctionType::Param> params)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"rebuildSelfTypeWithObjectType( AnyFunctionType :: Param selfParam , Type objectTy)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::replaceSelfParameterType( Type newSelf)",18, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getMetatypeInstanceType()",7, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"addProtocols( Type T , SmallVectorImpl<ProtocolDecl*> & Protocols , Type & Superclass , bool & HasExplicitAnyObject)",23, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"addMinimumProtocols( Type T , SmallVectorImpl<ProtocolDecl*> & Protocols , llvm :: SmallDenseMap<ProtocolDecl*,unsigned> & Known , llvm :: SmallPtrSetImpl<ProtocolDecl*> & Visited , SmallVector<ProtocolDecl*,16> & Stack , bool & ZappedAny)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ProtocolType::visitAllProtocols( ArrayRef<ProtocolDecl*> protocols , llvm :: function_ref<bool(ProtocolDecl*)> fn)",30, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ProtocolType::canonicalizeProtocols( SmallVectorImpl<ProtocolDecl*> & protocols)",46, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"getCanonicalParams( AnyFunctionType * funcType , CanGenericSignature genericSig , SmallVectorImpl<AnyFunctionType::Param> & canParams)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::computeCanonicalType()",191, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getCanonicalType( GenericSignature * sig)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::reconstituteSugar( bool Recursive)",19, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ParenType::ParenType( Type baseType , RecursiveTypeProperties properties , ParameterTypeFlags flags)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"SugarType::getSinglyDesugaredTypeSlow()",40, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"NameAliasType::getInnermostGenericArgs() const",21, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"GenericTypeParamType::getDepth() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"GenericTypeParamType::getIndex() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"GenericTypeParamType::getName() const",25, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"BuiltinFloatType::getAPFloatSemantics() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::mayHaveSuperclass()",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::satisfiesClassConstraint()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getSuperclass( bool useArchetypes)",40, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isExactSuperclassOf( Type ty)",18, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isBindableTo( Type b)",210, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isBindableToSuperclassOf( Type ty)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"isBridgeableObjectType( CanType type)",41, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"hasRetainablePointerRepresentation( CanType type)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::hasRetainablePointerRepresentation()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isBridgeableObjectType()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isPotentiallyBridgedValueType()",16, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"getObjCObjectRepresentable( Type type , const DeclContext * dc)",62, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"getForeignRepresentable( Type type , ForeignLanguage language , const DeclContext * dc)",255, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getForeignRepresentableIn( ForeignLanguage language , const DeclContext * dc)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isRepresentableIn( ForeignLanguage language , const DeclContext * dc)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::isTriviallyRepresentableIn( ForeignLanguage language , const DeclContext * dc)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"isABICompatibleEvenAddingOptional( CanType t1 , CanType t2)",24, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"matchesFunctionType( CanAnyFunctionType fn1 , CanAnyFunctionType fn2 , TypeMatchOptions matchMode , OptionalUnwrapping insideOptional , llvm :: function_ref<bool()> paramsAndResultMatch)",34, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"matches( CanType t1 , CanType t2 , TypeMatchOptions matchMode , ParameterPosition paramPosition , OptionalUnwrapping insideOptional)",114, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::matches( Type other , TypeMatchOptions matchMode)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::matchesParameter( Type other , TypeMatchOptions matchMode)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::matchesFunctionType( Type other , TypeMatchOptions matchMode , llvm :: function_ref<bool()> paramsAndResultMatch)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TupleType::getNamedElementId( Identifier I) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::ArchetypeType( TypeKind Kind , const ASTContext & Ctx , RecursiveTypeProperties properties , Type InterfaceType , ArrayRef<ProtocolDecl*> ConformsTo , Type Superclass , LayoutConstraint Layout)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::getPrimary() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"PrimaryArchetypeType::PrimaryArchetypeType( const ASTContext & Ctx , GenericEnvironment * GenericEnv , Type InterfaceType , ArrayRef<ProtocolDecl*> ConformsTo , Type Superclass , LayoutConstraint Layout)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"OpenedArchetypeType::OpenedArchetypeType( const ASTContext & Ctx , Type Existential , ArrayRef<ProtocolDecl*> ConformsTo , Type Superclass , LayoutConstraint Layout , UUID uuid)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"NestedArchetypeType::NestedArchetypeType( const ASTContext & Ctx , ArchetypeType * Parent , Type InterfaceType , ArrayRef<ProtocolDecl*> ConformsTo , Type Superclass , LayoutConstraint Layout)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"NestedArchetypeType::getNew( const ASTContext & Ctx , ArchetypeType * Parent , DependentMemberType * InterfaceType , SmallVectorImpl<ProtocolDecl*> & ConformsTo , Type Superclass , LayoutConstraint Layout)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"PrimaryArchetypeType::getNew( const ASTContext & Ctx , GenericEnvironment * GenericEnv , GenericTypeParamType * InterfaceType , SmallVectorImpl<ProtocolDecl*> & ConformsTo , Type Superclass , LayoutConstraint Layout)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::requiresClass() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"OrderArchetypeByName::operator ( )( std :: pair<Identifier,Type> X , std :: pair<Identifier,Type> Y) const",4, 6, 4, 0
repos/cpp/swift/lib/AST/Type.cpp,"OrderArchetypeByName::operator ( )( std :: pair<Identifier,Type> X , Identifier Y) const",4, 6, 4, 0
repos/cpp/swift/lib/AST/Type.cpp,"OrderArchetypeByName::operator ( )( Identifier X , std :: pair<Identifier,Type> Y) const",4, 6, 4, 0
repos/cpp/swift/lib/AST/Type.cpp,"OrderArchetypeByName::operator ( )( Identifier X , Identifier Y) const",3, 6, 4, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::populateNestedTypes() const",22, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::getNestedType( Identifier Name) const",16, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::getNestedTypeIfKnown( Identifier Name) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::hasNestedType( Identifier Name) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::getAllNestedTypes( bool resolveTypes) const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::setNestedTypes( ASTContext & Ctx , ArrayRef<std::pair<Identifier,Type>> Nested)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::registerNestedType( Identifier name , Type nested)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"collectFullName( const ArchetypeType * Archetype , SmallVectorImpl<char> & Result)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"NestedArchetypeType::getAssocType() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::getName() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ArchetypeType::getFullName() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ProtocolCompositionType::Profile( llvm :: FoldingSetNodeID & ID , ArrayRef<Type> Members , bool HasExplicitAnyObject)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ProtocolType::requiresClass()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ProtocolCompositionType::requiresClass()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"ProtocolCompositionType::get( const ASTContext & C , ArrayRef<Type> Members , bool HasExplicitAnyObject)",41, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"GenericFunctionType::substGenericArgs( SubstitutionMap subs)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"getMemberForBaseType( LookupConformanceFn lookupConformances , Type origBase , Type substBase , AssociatedTypeDecl * assocType , Identifier name , SubstOptions options)",95, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"LookUpConformanceInModule::operator ( )( CanType dependentType , Type conformingReplacementType , ProtocolDecl * conformedProtocol) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"LookUpConformanceInSubstitutionMap::operator ( )( CanType dependentType , Type conformingReplacementType , ProtocolDecl * conformedProtocol) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"MakeAbstractConformanceForGenericType::operator ( )( CanType dependentType , Type conformingReplacementType , ProtocolDecl * conformedProtocol) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"LookUpConformanceInSignature::operator ( )( CanType dependentType , Type conformingReplacementType , ProtocolDecl * conformedProtocol) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"DependentMemberType::substBaseType( ModuleDecl * module , Type substBase , LazyResolver * resolver)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"DependentMemberType::substBaseType( Type substBase , LookupConformanceFn lookupConformance)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"substGenericFunctionType( GenericFunctionType * genericFnType , TypeSubstitutionFn substitutions , LookupConformanceFn lookupConformances , SubstOptions options)",90, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"substType( Type derivedType , TypeSubstitutionFn substitutions , LookupConformanceFn lookupConformances , SubstOptions options)",97, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"Type::subst( SubstitutionMap substitutions , SubstOptions options) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"Type::subst( TypeSubstitutionFn substitutions , LookupConformanceFn conformances , SubstOptions options) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"Type::substDependentTypesWithErrorTypes() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::findUnresolvedDependentMemberType()",16, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"getConcreteTypeForSuperclassTraversing( Type t)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getSuperclassForDecl( const ClassDecl * baseClass , bool useArchetypes)",28, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getContextSubstitutions( const DeclContext * dc , GenericEnvironment * genericEnv)",85, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getContextSubstitutionMap( ModuleDecl * module , const DeclContext * dc , GenericEnvironment * genericEnv)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getMemberSubstitutions( const ValueDecl * member , GenericEnvironment * genericEnv)",33, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getMemberSubstitutionMap( ModuleDecl * module , const ValueDecl * member , GenericEnvironment * genericEnv)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getTypeOfMember( ModuleDecl * module , const ValueDecl * member , Type memberType)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::adjustSuperclassMemberDeclType( const ValueDecl * baseDecl , const ValueDecl * derivedDecl , Type memberType)",28, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"DependentMemberType::getName() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"transformSILResult( SILResultInfo & result , bool & changed , llvm :: function_ref<Optional<Type>(TypeBase*)> fn)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"transformSILYield( SILYieldInfo & yield , bool & changed , llvm :: function_ref<Optional<Type>(TypeBase*)> fn)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"transformSILParameter( SILParameterInfo & param , bool & changed , llvm :: function_ref<Optional<Type>(TypeBase*)> fn)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"Type::transform( llvm :: function_ref<Type(Type)> fn) const",14, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"Type::transformRec( llvm :: function_ref<Optional<Type>(TypeBase*)> fn) const",488, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"Type::findIf( llvm :: function_ref<bool(Type)> pred) const",15, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::canBeClass()",26, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"Type::isPrivateStdlibType( bool treatNonBuiltinProtocolsAsPublic) const",34, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"UnownedStorageType::isLoadable( ResilienceExpansion resilience) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"getClassReferenceCounting( ClassDecl * theClass)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::getReferenceCounting()",94, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"SILBoxType::Profile( llvm :: FoldingSetNodeID & id , SILLayout * Layout , SubstitutionMap Substitutions)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"getRecursivePropertiesOfMap( SubstitutionMap subMap)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"SILBoxType::SILBoxType( ASTContext & C , SILLayout * Layout , SubstitutionMap Substitutions)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Type.cpp,"TypeBase::openAnyExistentialType( OpenedArchetypeType * & opened)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"swift::operator < <( llvm :: raw_ostream & OS , PatternKind kind)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::getKindName( PatternKind K)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::getSourceRange() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::setDelayedInterfaceType( Type interfaceTy , DeclContext * dc)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::getType() const",21, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::getLoc() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::collectVariables( SmallVectorImpl<VarDecl*> & variables) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::getSingleVar() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"WalkToVarDecls::WalkToVarDecls( const std :: function<void(VarDecl*)> & fn)",2, 16, 4, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"WalkToVarDecls::walkToPatternPost( Pattern * P)",6, 6, 4, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"WalkToVarDecls::walkToExprPre( Expr * E)",6, 6, 4, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"WalkToVarDecls::walkToStmtPre( Stmt * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"WalkToVarDecls::walkToTypeLocPre( TypeLoc & TL)",1, 66, 4, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"WalkToVarDecls::walkToTypeReprPre( TypeRepr * T)",1, 67, 4, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"WalkToVarDecls::walkToParameterListPre( ParameterList * PL)",1, 78, 4, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"WalkToVarDecls::walkToDeclPre( Decl * D)",1, 59, 4, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::forEachVariable( llvm :: function_ref<void(VarDecl*)> fn) const",42, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::forEachNode( llvm :: function_ref<void(Pattern*)> f)",39, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::hasStorage() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"isIrrefutableExprPattern( const ExprPattern * EP)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::isRefutablePattern() const",28, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::operator new( size_t numBytes , const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"Pattern::getBoundName() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"NamedPattern::getBoundName() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"TuplePattern::create( ASTContext & C , SourceLoc lp , ArrayRef<TuplePatternElt> elts , SourceLoc rp , Optional<bool> implicit)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"TuplePattern::createSimple( ASTContext & C , SourceLoc lp , ArrayRef<TuplePatternElt> elements , SourceLoc rp , Optional<bool> implicit)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"TuplePattern::getSourceRange() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"TypedPattern::TypedPattern( Pattern * pattern , TypeRepr * tr , Optional<bool> implicit)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"TypedPattern::getTypeLoc() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"TypedPattern::getLoc() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"TypedPattern::getSourceRange() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"ExprPattern::ExprPattern( Expr * e , bool isResolved , Expr * matchExpr , VarDecl * matchVar , Optional<bool> implicit)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"ExprPattern::getLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"ExprPattern::getSourceRange() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"PatternTraceFormatter::traceName( const void * Entity , raw_ostream & OS) const",8, 4, 2, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"PatternTraceFormatter::traceLoc( const void * Entity , SourceManager * SM , clang :: SourceManager * CSM , raw_ostream & OS) const",7, 4, 2, 0
repos/cpp/swift/lib/AST/Pattern.cpp,"FrontendStatsTracer::getTraceFormatter<constPattern*>()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"BuiltinInfo::isReadNone() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"IntrinsicInfo::hasAttribute( llvm :: Attribute :: AttrKind Kind) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"swift::getBuiltinType( ASTContext & Context , StringRef Name)",71, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"swift::getBuiltinBaseName( ASTContext & C , StringRef Name , SmallVectorImpl<Type> & Types)",19, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getBuiltinFunction( Identifier Id , ArrayRef<Type> argTypes , Type ResType , FunctionType :: ExtInfo Info = FunctionType :: ExtInfo())",35, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getBuiltinGenericFunction( Identifier Id , ArrayRef<AnyFunctionType::Param> ArgParamTypes , Type ResType , GenericParamList * GenericParams , GenericEnvironment * Env)",47, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getGepRawOperation( Identifier Id , Type ArgType)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getStringObjectOrOperation( Identifier Id , Type ArgType)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getBinaryOperation( Identifier Id , Type ArgType)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getBinaryOperationWithOverflow( Identifier Id , Type ArgType)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getUnaryOperation( Identifier Id , Type ArgType)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getBinaryPredicate( Identifier Id , Type ArgType)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getCastOperation( ASTContext & Context , Identifier Id , BuiltinValueKind VK , ArrayRef<Type> Types)",129, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"createGenericParam( ASTContext & ctx , const char * name , unsigned index)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getGenericParams( ASTContext & ctx , unsigned numParameters , SmallVectorImpl<GenericTypeParamDecl*> & genericParams)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"BuiltinGenericSignatureBuilder::BuiltinGenericSignatureBuilder( ASTContext & ctx , unsigned numGenericParams = 1)",14, 6, 4, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"BuiltinGenericSignatureBuilder::addParameter( const G & generator , ValueOwnership ownership = ValueOwnership :: Default)",6, 6, 4, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"BuiltinGenericSignatureBuilder::setResult( const G & generator)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"BuiltinGenericSignatureBuilder::build( Identifier name)",6, 6, 4, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"BuiltinGenericSignatureBuilder::ConcreteGenerator::build( BuiltinGenericSignatureBuilder & builder) const",3, 8, 6, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"BuiltinGenericSignatureBuilder::ParameterGenerator::build( BuiltinGenericSignatureBuilder & builder) const",3, 8, 6, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"BuiltinGenericSignatureBuilder::LambdaGenerator::build( BuiltinGenericSignatureBuilder & builder) const",3, 8, 6, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"BuiltinGenericSignatureBuilder::MetatypeGenerator::build( BuiltinGenericSignatureBuilder & builder) const",3, 8, 6, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"makeConcrete( Type type)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"makeGenericParam( unsigned index = 0)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"makeTuple( const Gs & ... elementGenerators)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"makeBoundGenericType( NominalTypeDecl * decl , const Gs & ... argumentGenerators)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"makeMetatype( const T & object , Optional<MetatypeRepresentation> repr = None)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getRefCountingOperation( ASTContext & Context , Identifier Id)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getLoadOperation( ASTContext & Context , Identifier Id)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getStoreOperation( ASTContext & Context , Identifier Id)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getDestroyOperation( ASTContext & Context , Identifier Id)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getDestroyArrayOperation( ASTContext & Context , Identifier Id)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getTransferArrayOperation( ASTContext & Context , Identifier Id)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getIsUniqueOperation( ASTContext & Context , Identifier Id)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getBindMemoryOperation( ASTContext & Context , Identifier Id)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getAllocWithTailElemsOperation( ASTContext & Context , Identifier Id , int NumTailTypes)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getProjectTailElemsOperation( ASTContext & Context , Identifier Id)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getGepOperation( ASTContext & Context , Identifier Id , Type ArgType)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getGetTailAddrOperation( ASTContext & Context , Identifier Id , Type ArgType)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getBeginUnpairedAccessOperation( ASTContext & Context , Identifier Id)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getPerformInstantaneousReadAccessOperation( ASTContext & Context , Identifier Id)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getEndUnpairedAccessOperation( ASTContext & Context , Identifier Id)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getSizeOrAlignOfOperation( ASTContext & Context , Identifier Id)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getIsPODOperation( ASTContext & Context , Identifier Id)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getIsBitwiseTakable( ASTContext & Context , Identifier Id)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getIsOptionalOperation( ASTContext & Context , Identifier Id)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getIsSameMetatypeOperation( ASTContext & Context , Identifier Id)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getAllocOperation( ASTContext & Context , Identifier Id)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getDeallocOperation( ASTContext & Context , Identifier Id)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getFenceOperation( ASTContext & Context , Identifier Id)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getVoidErrorOperation( ASTContext & Context , Identifier Id)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getUnexpectedErrorOperation( ASTContext & Context , Identifier Id)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getCmpXChgOperation( ASTContext & Context , Identifier Id , Type T)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getAtomicRMWOperation( ASTContext & Context , Identifier Id , Type T)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getAtomicLoadOperation( ASTContext & Context , Identifier Id , Type T)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getAtomicStoreOperation( ASTContext & Context , Identifier Id , Type T)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getNativeObjectCast( ASTContext & Context , Identifier Id , BuiltinValueKind BV)",35, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getCastToBridgeObjectOperation( ASTContext & C , Identifier Id)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getCastFromBridgeObjectOperation( ASTContext & C , Identifier Id , BuiltinValueKind BV)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getClassifyBridgeObject( ASTContext & C , Identifier Id)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getValueToBridgeObject( ASTContext & C , Identifier Id)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getUnsafeGuaranteed( ASTContext & C , Identifier Id)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getUnsafeGuaranteedEnd( ASTContext & C , Identifier Id)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getOnFastPath( ASTContext & Context , Identifier Id)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getCastReferenceOperation( ASTContext & ctx , Identifier name)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getReinterpretCastOperation( ASTContext & ctx , Identifier name)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getZeroInitializerOperation( ASTContext & Context , Identifier Id)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getGetObjCTypeEncodingOperation( ASTContext & Context , Identifier Id)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getPoundAssert( ASTContext & Context , Identifier Id)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getTSanInoutAccess( ASTContext & Context , Identifier Id)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getAddressOfOperation( ASTContext & Context , Identifier Id)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getAddressOfBorrowOperation( ASTContext & Context , Identifier Id)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getTypeJoinOperation( ASTContext & Context , Identifier Id)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getTypeJoinInoutOperation( ASTContext & Context , Identifier Id)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getTypeJoinMetaOperation( ASTContext & Context , Identifier Id)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getCanBeObjCClassOperation( ASTContext & Context , Identifier Id)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getCondFailOperation( ASTContext & C , Identifier Id)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getAssertConfOperation( ASTContext & C , Identifier Id)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getFixLifetimeOperation( ASTContext & C , Identifier Id)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getExtractElementOperation( ASTContext & Context , Identifier Id , Type FirstTy , Type SecondTy)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getInsertElementOperation( ASTContext & Context , Identifier Id , Type FirstTy , Type SecondTy , Type ThirdTy)",19, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getStaticReportOperation( ASTContext & Context , Identifier Id)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getCheckedTruncOperation( ASTContext & Context , Identifier Id , Type InputTy , Type OutputTy , bool AllowLiteral)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getIntToFPWithOverflowOperation( ASTContext & Context , Identifier Id , Type InputTy , Type OutputTy)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getUnreachableOperation( ASTContext & Context , Identifier Id)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getOnceOperation( ASTContext & Context , Identifier Id , bool withContext)",19, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"isBuiltinTypeOverloaded( Type T , OverloadedBuiltinKind OK)",30, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"swift::getLLVMIntrinsicID( StringRef InName)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"swift::getLLVMIntrinsicIDForBuiltinWithOverflow( BuiltinValueKind ID)",18, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"DecodeIntrinsicType( ArrayRef<llvm::Intrinsic::IITDescriptor> & Table , ArrayRef<Type> Tys , ASTContext & Context)",49, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"getSwiftFunctionTypeForIntrinsic( llvm :: Intrinsic :: ID ID , ArrayRef<Type> TypeArgs , ASTContext & Context , SmallVectorImpl<Type> & ArgElts , Type & ResultTy)",35, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"isValidFenceOrdering( StringRef Ordering)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"isValidRMWOrdering( StringRef Ordering)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"isValidLoadOrdering( StringRef Ordering)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"isValidStoreOrdering( StringRef Ordering)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"swift::decodeLLVMAtomicOrdering( StringRef O)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"isUnknownOrUnordered( llvm :: AtomicOrdering ordering)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"isValidCmpXChgOrdering( StringRef SuccessString , StringRef FailureString)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"swift::getBuiltinValueDecl( ASTContext & Context , Identifier Id)",453, 2, 0, 0
repos/cpp/swift/lib/AST/Builtins.cpp,"swift::getBuiltinName( BuiltinValueKind ID)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleLoader.cpp,"swift::DependencyTracker::DependencyTracker( bool TrackSystemDeps)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleLoader.cpp,"swift::DependencyTracker::addDependency( StringRef File , bool IsSystem)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleLoader.cpp,"swift::DependencyTracker::getDependencies() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleLoader.cpp,"swift::DependencyTracker::getClangCollector()",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclNameLoc.cpp,"DeclNameLoc::DeclNameLoc( ASTContext & ctx , SourceLoc baseNameLoc , SourceLoc lParenLoc , ArrayRef<SourceLoc> argumentLabelLocs , SourceLoc rParenLoc)",18, 2, 0, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"TypeWalker::anchor()",1, 29, 0, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitErrorType( ErrorType * ty)",1, 55, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitUnresolvedType( UnresolvedType * ty)",1, 65, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitBuiltinType( BuiltinType * ty)",1, 59, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitNameAliasType( NameAliasType * ty)",11, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitSILTokenType( SILTokenType * ty)",1, 61, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitParenType( ParenType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitTupleType( TupleType * ty)",6, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitReferenceStorageType( ReferenceStorageType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitNominalType( NominalType * ty)",5, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitAnyMetatypeType( AnyMetatypeType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitModuleType( ModuleType * ty)",1, 57, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitDynamicSelfType( DynamicSelfType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitSubstitutableType( SubstitutableType * ty)",1, 71, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitDependentMemberType( DependentMemberType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitAnyFunctionType( AnyFunctionType * ty)",8, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitGenericFunctionType( GenericFunctionType * ty)",23, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitSILFunctionType( SILFunctionType * ty)",12, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitUnarySyntaxSugarType( UnarySyntaxSugarType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitDictionaryType( DictionaryType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitProtocolCompositionType( ProtocolCompositionType * ty)",6, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitLValueType( LValueType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitInOutType( InOutType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitUnboundGenericType( UnboundGenericType * ty)",5, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitBoundGenericType( BoundGenericType * ty)",11, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitTypeVariableType( TypeVariableType * ty)",1, 69, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitSILBlockStorageType( SILBlockStorageType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::visitSILBoxType( SILBoxType * ty)",7, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::Traversal( TypeWalker & walker)",1, 61, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Traversal::doIt( Type ty)",27, 4, 2, 0
repos/cpp/swift/lib/AST/TypeWalker.cpp,"Type::walk( TypeWalker & walker) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/InlinableText.cpp,"getEffectiveEndLoc( SourceManager & sourceMgr , const IfConfigClause * clause , const IfConfigDecl * decl)",12, 2, 0, 0
repos/cpp/swift/lib/AST/InlinableText.cpp,"ExtractInactiveRanges::ExtractInactiveRanges( SourceManager & sourceMgr)",2, 30, 2, 0
repos/cpp/swift/lib/AST/InlinableText.cpp,"ExtractInactiveRanges::addRange( SourceLoc start , SourceLoc end)",4, 4, 2, 0
repos/cpp/swift/lib/AST/InlinableText.cpp,"ExtractInactiveRanges::walkToDeclPre( Decl * d)",37, 4, 2, 0
repos/cpp/swift/lib/AST/InlinableText.cpp,"ExtractInactiveRanges::getSortedRanges()",8, 4, 2, 0
repos/cpp/swift/lib/AST/InlinableText.cpp,"swift::extractInlinableText( SourceManager & sourceMgr , ASTNode node , SmallVectorImpl<char> & scratch)",38, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"getCommentKind( StringRef Comment)",21, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"SingleRawComment::SingleRawComment( CharSourceRange Range , const SourceManager & SourceMgr)",9, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"SingleRawComment::SingleRawComment( StringRef RawText , unsigned StartColumn)",3, 60, 4, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"addCommentToList( SmallVectorImpl<SingleRawComment> & Comments , const SingleRawComment & SRC)",30, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"toRawComment( ASTContext & Context , CharSourceRange Range)",27, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"Decl::getRawComment() const",30, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"getGroupDecl( const Decl * D)",11, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"Decl::getGroupName() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"Decl::getSourceFileName() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"Decl::getSourceOrder() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"extractBriefComment( ASTContext & Context , RawComment RC , const Decl * D)",24, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"Decl::getBriefComment() const",16, 2, 0, 0
repos/cpp/swift/lib/AST/RawComment.cpp,"RawComment::getCharSourceRange()",14, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"AttributeBase::operator new( size_t Bytes , ASTContext & C , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"swift::getAccessLevelSpelling( AccessLevel value)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"TypeAttributes::getAttrKindFromString( StringRef Str)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"TypeAttributes::getAttrName( TypeAttrKind kind)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttribute::getAttrKindFromString( StringRef Str)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttribute::canAttributeAppearOnDecl( DeclAttrKind DK , const Decl * D)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttribute::canAttributeAppearOnDeclKind( DeclAttrKind DAK , DeclKind DK)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttributes::isUnavailableInSwiftVersion( const version :: Version & effectiveVersion) const",22, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttributes::getUnavailable( const ASTContext & ctx) const",31, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttributes::getDeprecated( const ASTContext & ctx) const",37, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttributes::dump( const Decl * D) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"isShortAvailable( const DeclAttribute * DA)",32, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"printShortFormAvailable( ArrayRef<const DeclAttribute*> Attrs , ASTPrinter & Printer , const PrintOptions & Options)",24, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttributes::print( ASTPrinter & Printer , const PrintOptions & Options , const Decl * D) const",54, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttributes::getStartLoc( bool forModifiers) const",13, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttribute::printImpl( ASTPrinter & Printer , const PrintOptions & Options , const Decl * D) const",227, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttribute::print( ASTPrinter & Printer , const PrintOptions & Options , const Decl * D) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttribute::print( llvm :: raw_ostream & OS , const Decl * D) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttribute::getOptions( DeclAttrKind DK)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DeclAttribute::getAttrName() const",86, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::ObjCAttr( SourceLoc atLoc , SourceRange baseRange , Optional<ObjCSelector> name , SourceRange parenRange , ArrayRef<SourceLoc> nameLocs)",24, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::create( ASTContext & Ctx , Optional<ObjCSelector> name , bool isNameImplicit)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::createUnnamed( ASTContext & Ctx , SourceLoc AtLoc , SourceLoc ObjCLoc)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::createUnnamedImplicit( ASTContext & Ctx)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::createNullary( ASTContext & Ctx , SourceLoc AtLoc , SourceLoc ObjCLoc , SourceLoc LParenLoc , SourceLoc NameLoc , Identifier Name , SourceLoc RParenLoc)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::createNullary( ASTContext & Ctx , Identifier Name , bool isNameImplicit)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::createSelector( ASTContext & Ctx , SourceLoc AtLoc , SourceLoc ObjCLoc , SourceLoc LParenLoc , ArrayRef<SourceLoc> NameLocs , ArrayRef<Identifier> Names , SourceLoc RParenLoc)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::createSelector( ASTContext & Ctx , ArrayRef<Identifier> Names , bool isNameImplicit)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::getNameLocs() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::getLParenLoc() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::getRParenLoc() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ObjCAttr::clone( ASTContext & context) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"PrivateImportAttr::PrivateImportAttr( SourceLoc atLoc , SourceRange baseRange , StringRef sourceFile , SourceRange parenRange)",5, 32, 4, 0
repos/cpp/swift/lib/AST/Attr.cpp,"PrivateImportAttr::create( ASTContext & Ctxt , SourceLoc AtLoc , SourceLoc PrivateLoc , SourceLoc LParenLoc , StringRef sourceFile , SourceLoc RParenLoc)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DynamicReplacementAttr::DynamicReplacementAttr( SourceLoc atLoc , SourceRange baseRange , DeclName name , SourceRange parenRange)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DynamicReplacementAttr::create( ASTContext & Ctx , SourceLoc AtLoc , SourceLoc DynReplLoc , SourceLoc LParenLoc , DeclName ReplacedFunction , SourceLoc RParenLoc)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DynamicReplacementAttr::create( ASTContext & Ctx , DeclName name)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DynamicReplacementAttr::create( ASTContext & Ctx , DeclName name , AbstractFunctionDecl * f)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DynamicReplacementAttr::getLParenLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"DynamicReplacementAttr::getRParenLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"AvailableAttr::createPlatformAgnostic( ASTContext & C , StringRef Message , StringRef Rename , PlatformAgnosticAvailabilityKind Kind , llvm :: VersionTuple Obsoleted)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"AvailableAttr::isActivePlatform( const ASTContext & ctx) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"AvailableAttr::isLanguageVersionSpecific() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"AvailableAttr::isUnconditionallyUnavailable() const",14, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"AvailableAttr::isUnconditionallyDeprecated() const",14, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"AvailableAttr::getVersionAvailability( const ASTContext & ctx) const",32, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"AvailableAttr::isUnavailable( const Decl * D)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"SpecializeAttr::SpecializeAttr( SourceLoc atLoc , SourceRange range , TrailingWhereClause * clause , bool exported , SpecializationKind kind)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"SpecializeAttr::SpecializeAttr( SourceLoc atLoc , SourceRange range , ArrayRef<Requirement> requirements , bool exported , SpecializationKind kind)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"SpecializeAttr::setRequirements( ASTContext & Ctx , ArrayRef<Requirement> requirements)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"SpecializeAttr::getRequirements() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"SpecializeAttr::getTrailingWhereClause() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"SpecializeAttr::create( ASTContext & Ctx , SourceLoc atLoc , SourceRange range , TrailingWhereClause * clause , bool exported , SpecializationKind kind)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"SpecializeAttr::create( ASTContext & Ctx , SourceLoc atLoc , SourceRange range , ArrayRef<Requirement> requirements , bool exported , SpecializationKind kind)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ImplementsAttr::ImplementsAttr( SourceLoc atLoc , SourceRange range , TypeLoc ProtocolType , DeclName MemberName , DeclNameLoc MemberNameLoc)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ImplementsAttr::create( ASTContext & Ctx , SourceLoc atLoc , SourceRange range , TypeLoc ProtocolType , DeclName MemberName , DeclNameLoc MemberNameLoc)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ImplementsAttr::getProtocolType() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Attr.cpp,"ImplementsAttr::getProtocolType()",3, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"StoredDiagnosticInfo::StoredDiagnosticInfo( DiagnosticKind k , bool firstBadToken , bool fatal)",3, 73, 6, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"StoredDiagnosticInfo::StoredDiagnosticInfo( DiagnosticKind k , DiagnosticOptions opts)",4, 66, 29, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticState::DiagnosticState()",4, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"toCharSourceRange( SourceManager & SM , SourceRange SR)",3, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"toCharSourceRange( SourceManager & SM , SourceLoc Start , SourceLoc End)",4, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"extractCharAfter( SourceManager & SM , SourceLoc Loc)",4, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"extractCharBefore( SourceManager & SM , SourceLoc Loc)",10, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"InFlightDiagnostic::highlight( SourceRange R)",7, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"InFlightDiagnostic::highlightChars( SourceLoc Start , SourceLoc End)",8, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"InFlightDiagnostic::fixItInsertAfter( SourceLoc L , StringRef Str)",5, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"InFlightDiagnostic::fixItRemove( SourceRange R)",22, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"InFlightDiagnostic::fixItReplace( SourceRange R , StringRef Str)",25, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"InFlightDiagnostic::fixItReplaceChars( SourceLoc Start , SourceLoc End , StringRef Str)",9, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"InFlightDiagnostic::fixItExchange( SourceRange R1 , SourceRange R2)",18, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"InFlightDiagnostic::flush()",8, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticEngine::isDiagnosticPointsToFirstBadToken( DiagID ID) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticEngine::finishProcessing()",7, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"skipToDelimiter( StringRef & Text , char Delim , bool * FoundDelim = nullptr)",29, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"formatSelectionArgument( StringRef ModifierArguments , ArrayRef<DiagnosticArgument> Args , unsigned SelectedIndex , DiagnosticFormatOptions FormatOpts , llvm :: raw_ostream & Out)",18, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"isInterestingTypealias( Type type)",31, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"shouldShowAKA( Type type , StringRef typeName)",22, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"formatDiagnosticArgument( StringRef Modifier , StringRef ModifierArguments , ArrayRef<DiagnosticArgument> Args , unsigned ArgIndex , DiagnosticFormatOptions FormatOpts , llvm :: raw_ostream & Out)",141, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticEngine::formatDiagnosticText( llvm :: raw_ostream & Out , StringRef InText , ArrayRef<DiagnosticArgument> Args , DiagnosticFormatOptions FormatOpts)",58, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"toDiagnosticKind( DiagnosticState :: Behavior behavior)",19, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticState::determineBehavior( DiagID id)",65, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticEngine::flushActiveDiagnostic()",9, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticEngine::emitTentativeDiagnostics()",6, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticEngine::emitDiagnostic( const Diagnostic & diagnostic)",130, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticEngine::diagnosticStringFor( const DiagID id)",3, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticSuppression::DiagnosticSuppression( DiagnosticEngine & diags)",5, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticEngine.cpp,"DiagnosticSuppression::~DiagnosticSuppression()",4, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"DiagnosticConsumer::getRawLoc( SourceLoc loc)",3, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"hasDuplicateFileNames( ArrayRef<FileSpecificDiagnosticConsumer::Subconsumer> subconsumers)",18, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"FileSpecificDiagnosticConsumer::consolidateSubconsumers( SmallVectorImpl<Subconsumer> & subconsumers)",12, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"FileSpecificDiagnosticConsumer::FileSpecificDiagnosticConsumer( SmallVectorImpl<Subconsumer> & subconsumers)",8, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"FileSpecificDiagnosticConsumer::computeConsumersOrderedByRange( SourceManager & SM)",34, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"FileSpecificDiagnosticConsumer::subconsumerForLocation( SourceManager & SM , SourceLoc loc)",49, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"FileSpecificDiagnosticConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",27, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"FileSpecificDiagnosticConsumer::finishProcessing()",12, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"FileSpecificDiagnosticConsumer::tellSubconsumersToInformDriverOfIncompleteBatchModeCompilation()",7, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"NullDiagnosticConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",11, 2, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"ForwardingDiagnosticConsumer::ForwardingDiagnosticConsumer( DiagnosticEngine & Target)",2, 28, 0, 0
repos/cpp/swift/lib/AST/DiagnosticConsumer.cpp,"ForwardingDiagnosticConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",14, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::TypeJoin( CanType First)",4, 4, 2, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitType( CanType second)",3, 4, 2, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::join( CanType first , CanType second)",35, 4, 2, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::getSuperclassJoin( CanType first , CanType second)",33, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitErrorType( CanType second)",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitTupleType( CanType second)",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitEnumType( CanType second)",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitStructType( CanType second)",11, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitClassType( CanType second)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitBoundGenericClassType( CanType second)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"joinOptional( CanType first , CanType second)",17, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitBoundGenericEnumType( CanType second)",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitBoundGenericStructType( CanType second)",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitMetatypeType( CanType second)",17, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitExistentialMetatypeType( CanType second)",17, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitModuleType( CanType second)",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitDynamicSelfType( CanType second)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitArchetypeType( CanType second)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitGenericTypeParamType( CanType second)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitDependentMemberType( CanType second)",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitFunctionType( CanType second)",40, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitGenericFunctionType( CanType second)",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::computeProtocolCompositionJoin( ArrayRef<Type> firstMembers , ArrayRef<Type> secondMembers)",22, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitProtocolCompositionType( CanType second)",30, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitProtocolType( CanType second)",39, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitLValueType( CanType second)",1, 76, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitInOutType( CanType second)",1, 75, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"TypeJoin::visitBuiltinType( CanType second)",6, 2, 0, 0
repos/cpp/swift/lib/AST/TypeJoinMeet.cpp,"Type::join( Type first , Type second)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Parameter.cpp,"ParameterList::create( const ASTContext & C , SourceLoc LParenLoc , ArrayRef<ParamDecl*> params , SourceLoc RParenLoc)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Parameter.cpp,"ParameterList::setDeclContextOfParamDecls( DeclContext * DC)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Parameter.cpp,"ParameterList::clone( const ASTContext & C , OptionSet<CloneFlags> options) const",36, 2, 0, 0
repos/cpp/swift/lib/AST/Parameter.cpp,"ParameterList::getParams( SmallVectorImpl<AnyFunctionType::Param> & params) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Parameter.cpp,"ParameterList::getParams( SmallVectorImpl<AnyFunctionType::Param> & params , llvm :: function_ref<Type(ParamDecl*)> getType) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Parameter.cpp,"ParameterList::getSourceRange() const",15, 2, 0, 0
repos/cpp/swift/lib/AST/SyntaxASTMap.cpp,"SyntaxASTMap::recordSyntaxMapping( RC<syntax::SyntaxData> FromNode , ASTNode ToNode)",8, 2, 0, 0
repos/cpp/swift/lib/AST/SyntaxASTMap.cpp,"SyntaxASTMap::getNodeForSyntax( syntax :: Syntax SyntaxNode) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/SyntaxASTMap.cpp,"SyntaxASTMap::clearSyntaxMap()",3, 2, 0, 0
repos/cpp/swift/lib/AST/SyntaxASTMap.cpp,"SyntaxASTMap::dumpSyntaxMap() const",23, 2, 0, 0
repos/cpp/swift/lib/AST/SwiftNameTranslation.cpp,"swift::objc_translation::getNameForObjC( const ValueDecl * VD , CustomNamesOnly_t customNamesOnly)",25, 2, 0, 0
repos/cpp/swift/lib/AST/SwiftNameTranslation.cpp,"swift::objc_translation::printSwiftEnumElemNameInObjC( const EnumElementDecl * EL , llvm :: raw_ostream & OS , Identifier PreferredName)",18, 2, 0, 0
repos/cpp/swift/lib/AST/SwiftNameTranslation.cpp,"swift::objc_translation::getObjCNameForSwiftDecl( const ValueDecl * VD , DeclName PreferredName)",33, 2, 0, 0
repos/cpp/swift/lib/AST/SwiftNameTranslation.cpp,"swift::objc_translation::isVisibleToObjC( const ValueDecl * VD , AccessLevel minRequiredAccess , bool checkParent)",16, 2, 0, 0
repos/cpp/swift/lib/AST/ASTNode.cpp,"ASTNode::getSourceRange() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTNode.cpp,"ASTNode::getStartLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTNode.cpp,"ASTNode::getEndLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTNode.cpp,"ASTNode::getAsDeclContext() const",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTNode.cpp,"ASTNode::isImplicit() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTNode.cpp,"ASTNode::walk( ASTWalker & Walker)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"ASTWalker::anchor()",1, 28, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::SetParentRAII::SetParentRAII( ASTWalker & walker , T * newParent)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::SetParentRAII::~SetParentRAII()",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visit( Expr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visit( Stmt * S)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visit( Pattern * P)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visit( Decl * D)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visit( TypeRepr * T)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visit( ParameterList * PL)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitImportDecl( ImportDecl * ID)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitExtensionDecl( ExtensionDecl * ED)",19, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitPatternBindingDecl( PatternBindingDecl * PBD)",22, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitEnumCaseDecl( EnumCaseDecl * ECD)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTopLevelCodeDecl( TopLevelCodeDecl * TLCD)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitIfConfigDecl( IfConfigDecl * ICD)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitPoundDiagnosticDecl( PoundDiagnosticDecl * PDD)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOperatorDecl( OperatorDecl * OD)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitPrecedenceGroupDecl( PrecedenceGroupDecl * PGD)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTypeAliasDecl( TypeAliasDecl * TAD)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitAbstractTypeParamDecl( AbstractTypeParamDecl * TPD)",16, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitNominalTypeDecl( NominalTypeDecl * NTD)",34, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitModuleDecl( ModuleDecl * MD)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitVarDecl( VarDecl * VD)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitSubscriptDecl( SubscriptDecl * SD)",19, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitMissingMemberDecl( MissingMemberDecl * MMD)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitAbstractFunctionDecl( AbstractFunctionDecl * AFD)",50, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitEnumElementDecl( EnumElementDecl * ED)",22, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitGenericParamList( GenericParamList * GPL)",15, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitErrorExpr( ErrorExpr * E)",1, 51, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitCodeCompletionExpr( CodeCompletionExpr * E)",1, 69, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitLiteralExpr( LiteralExpr * E)",1, 55, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDiscardAssignmentExpr( DiscardAssignmentExpr * E)",1, 75, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTypeExpr( TypeExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitSuperRefExpr( SuperRefExpr * E)",1, 57, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOtherConstructorDeclRefExpr( OtherConstructorDeclRefExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOverloadedDeclRefExpr( OverloadedDeclRefExpr * E)",1, 75, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitUnresolvedDeclRefExpr( UnresolvedDeclRefExpr * E)",1, 75, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitUnresolvedMemberExpr( UnresolvedMemberExpr * E)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOpaqueValueExpr( OpaqueValueExpr * E)",1, 63, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitInterpolatedStringLiteralExpr( InterpolatedStringLiteralExpr * E)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitObjectLiteralExpr( ObjectLiteralExpr * E)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitCollectionExpr( CollectionExpr * E)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDeclRefExpr( DeclRefExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitMemberRefExpr( MemberRefExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDynamicMemberRefExpr( DynamicMemberRefExpr * E)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitAnyTryExpr( AnyTryExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitIdentityExpr( IdentityExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTupleExpr( TupleExpr * E)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitSubscriptExpr( SubscriptExpr * E)",13, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitKeyPathApplicationExpr( KeyPathApplicationExpr * E)",13, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDynamicSubscriptExpr( DynamicSubscriptExpr * E)",13, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitUnresolvedDotExpr( UnresolvedDotExpr * E)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitUnresolvedSpecializeExpr( UnresolvedSpecializeExpr * E)",16, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTupleElementExpr( TupleElementExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitImplicitConversionExpr( ImplicitConversionExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitCollectionUpcastConversionExpr( CollectionUpcastConversionExpr * E)",31, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTupleShuffleExpr( TupleShuffleExpr * E)",16, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTryExpr( TryExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitForceTryExpr( ForceTryExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOptionalTryExpr( OptionalTryExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitInOutExpr( InOutExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitVarargExpansionExpr( VarargExpansionExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitSequenceExpr( SequenceExpr * E)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDynamicTypeExpr( DynamicTypeExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitCaptureListExpr( CaptureListExpr * expr)",13, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitClosureExpr( ClosureExpr * expr)",23, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitAutoClosureExpr( AutoClosureExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitApplyExpr( ApplyExpr * E)",20, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitSelfApplyExpr( SelfApplyExpr * E)",15, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDotSyntaxBaseIgnoredExpr( DotSyntaxBaseIgnoredExpr * E)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitExplicitCastExpr( ExplicitCastExpr * E)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitArrowExpr( ArrowExpr * E)",13, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitRebindSelfInConstructorExpr( RebindSelfInConstructorExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitAssignExpr( AssignExpr * AE)",15, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitEnumIsCaseExpr( EnumIsCaseExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitIfExpr( IfExpr * E)",19, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitUnresolvedPatternExpr( UnresolvedPatternExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitBindOptionalExpr( BindOptionalExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOptionalEvaluationExpr( OptionalEvaluationExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitForceValueExpr( ForceValueExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOpenExistentialExpr( OpenExistentialExpr * E)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitMakeTemporarilyEscapableExpr( MakeTemporarilyEscapableExpr * E)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitEditorPlaceholderExpr( EditorPlaceholderExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitLazyInitializerExpr( LazyInitializerExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitObjCSelectorExpr( ObjCSelectorExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitKeyPathExpr( KeyPathExpr * E)",82, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitKeyPathDotExpr( KeyPathDotExpr * E)",1, 61, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTapExpr( TapExpr * E)",21, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitParameterList( ParameterList * PL)",24, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::Traversal( ASTWalker & walker)",1, 51, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::doIt( Expr * E)",15, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::doIt( Stmt * S)",15, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::shouldSkip( Decl * D)",18, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::doIt( Decl * D)",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::doIt( Pattern * P)",15, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::doIt( const StmtCondition & C)",27, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::doIt( TypeLoc & TL)",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::doIt( TypeRepr * T)",13, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::doIt( RequirementRepr & Req)",17, 4, 2, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitBreakStmt( BreakStmt * BS)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitContinueStmt( ContinueStmt * CS)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitFallthroughStmt( FallthroughStmt * CS)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitFailStmt( FailStmt * FS)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitThrowStmt( ThrowStmt * TS)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitPoundAssertStmt( PoundAssertStmt * S)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitBraceStmt( BraceStmt * BS)",24, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitReturnStmt( ReturnStmt * RS)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitYieldStmt( YieldStmt * YS)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDeferStmt( DeferStmt * DS)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitIfStmt( IfStmt * IS)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitGuardStmt( GuardStmt * US)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDoStmt( DoStmt * DS)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDoCatchStmt( DoCatchStmt * stmt)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitCatchStmt( CatchStmt * stmt)",26, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitWhileStmt( WhileStmt * WS)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitRepeatWhileStmt( RepeatWhileStmt * RWS)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitForEachStmt( ForEachStmt * S)",44, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitSwitchStmt( SwitchStmt * S)",24, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitCaseStmt( CaseStmt * S)",21, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitParenPattern( ParenPattern * P)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTuplePattern( TuplePattern * P)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitNamedPattern( NamedPattern * P)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitAnyPattern( AnyPattern * P)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTypedPattern( TypedPattern * P)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitIsPattern( IsPattern * P)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitEnumElementPattern( EnumElementPattern * P)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitExprPattern( ExprPattern * P)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitVarPattern( VarPattern * P)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOptionalSomePattern( OptionalSomePattern * P)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitBoolPattern( BoolPattern * P)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitErrorTypeRepr( ErrorTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitAttributedTypeRepr( AttributedTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitSimpleIdentTypeRepr( SimpleIdentTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitGenericIdentTypeRepr( GenericIdentTypeRepr * T)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitCompoundIdentTypeRepr( CompoundIdentTypeRepr * T)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitFunctionTypeRepr( FunctionTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitArrayTypeRepr( ArrayTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitDictionaryTypeRepr( DictionaryTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOptionalTypeRepr( OptionalTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitImplicitlyUnwrappedOptionalTypeRepr( ImplicitlyUnwrappedOptionalTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitTupleTypeRepr( TupleTypeRepr * T)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitCompositionTypeRepr( CompositionTypeRepr * T)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitMetatypeTypeRepr( MetatypeTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitProtocolTypeRepr( ProtocolTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitInOutTypeRepr( InOutTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitSharedTypeRepr( SharedTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitOwnedTypeRepr( OwnedTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitFixedTypeRepr( FixedTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Traversal::visitSILBoxTypeRepr( SILBoxTypeRepr * T)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Expr::walk( ASTWalker & walker)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Stmt::walk( ASTWalker & walker)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Pattern::walk( ASTWalker & walker)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"TypeRepr::walk( ASTWalker & walker)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"StmtConditionElement::walk( ASTWalker & walker)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTWalker.cpp,"Decl::walk( ASTWalker & walker)",3, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"AccessLevelRequest::evaluate( Evaluator & evaluator , ValueDecl * D) const",85, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"AccessLevelRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"AccessLevelRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"AccessLevelRequest::getCachedResult() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"AccessLevelRequest::cacheResult( AccessLevel value) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"SetterAccessLevelRequest::evaluate( Evaluator & evaluator , AbstractStorageDecl * ASD) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"SetterAccessLevelRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"SetterAccessLevelRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"SetterAccessLevelRequest::getCachedResult() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"SetterAccessLevelRequest::cacheResult( AccessLevel value) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"DefaultAndMaxAccessLevelRequest::evaluate( Evaluator & evaluator , ExtensionDecl * ED) const",67, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"DefaultAndMaxAccessLevelRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"DefaultAndMaxAccessLevelRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"DefaultAndMaxAccessLevelRequest::getCachedResult() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"DefaultAndMaxAccessLevelRequest::cacheResult( std :: pair<AccessLevel,AccessLevel> value) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/AccessRequests.cpp,"swift::registerAccessRequestFunctions( Evaluator & evaluator)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"SortCanType::operator ( )( CanType lhs , CanType rhs) const",3, 6, 4, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"isOverloadable( const ValueDecl * VD)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"isValidOverload( CanTypeSet & overloads , const ValueDecl * VD)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"isValidOverload( NamedCanTypeSet & overloads , const ValueDecl * VD)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"updateOverloadSet( CanTypeSet & overloads , ArrayRef<ValueDecl*> decls)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"updateOverloadSet( NamedCanTypeSet & overloads , ArrayRef<ValueDecl*> decls)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"recordImportDecls( LazyResolver * typeResolver , SmallVectorImpl<ValueDecl*> & results , ArrayRef<ValueDecl*> newDecls , OverloadSetTy & overloads , ResolutionKind resolutionKind)",43, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"lookupInModule( ModuleDecl * module , ModuleDecl :: AccessPathTy accessPath , SmallVectorImpl<ValueDecl*> & decls , ResolutionKind resolutionKind , bool canReturnEarly , LazyResolver * typeResolver , ModuleLookupCache & cache , const DeclContext * moduleScopeContext , bool respectAccessControl , ArrayRef<ModuleDecl::ImportedModule> extraImports , CallbackTy callback)",106, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"namelookup::lookupInModule( ModuleDecl * startModule , ModuleDecl :: AccessPathTy topAccessPath , DeclName name , SmallVectorImpl<ValueDecl*> & decls , NLKind lookupKind , ResolutionKind resolutionKind , LazyResolver * typeResolver , const DeclContext * moduleScopeContext , ArrayRef<ModuleDecl::ImportedModule> extraImports)",23, 2, 0, 0
repos/cpp/swift/lib/AST/ModuleNameLookup.cpp,"namelookup::lookupVisibleDeclsInModule( ModuleDecl * M , ModuleDecl :: AccessPathTy accessPath , SmallVectorImpl<ValueDecl*> & decls , NLKind lookupKind , ResolutionKind resolutionKind , LazyResolver * typeResolver , const DeclContext * moduleScopeContext , ArrayRef<ModuleDecl::ImportedModule> extraImports)",23, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::operator new( size_t Bytes , ASTContext & C , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getASTContext() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getSelfTypeDecl() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getSelfNominalTypeDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getSelfClassDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getSelfEnumDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getSelfStructDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getSelfProtocolDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getExtendedProtocolDecl() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getProtocolSelfType() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getDeclaredTypeInContext() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getDeclaredInterfaceType() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::forEachGenericContext( llvm :: function_ref<void(GenericParamList*)> fn) const",22, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getGenericContextDepth() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getGenericSignatureOfContext() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getGenericEnvironmentOfContext() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::contextHasLazyGenericEnvironment() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::mapTypeIntoContext( Type type) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getLocalContext()",7, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getInnermostMethodContext()",15, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::isTypeContext() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getInnermostTypeContext()",10, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getInnermostDeclarationDeclContext()",9, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getParentForLookup() const",15, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getParentModule() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getParentSourceFile() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getModuleScopeContext() const",14, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::isGenericContext() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getResilienceExpansion() const",58, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::isInnermostContextGeneric() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::isCascadingContextForLookup( bool functionsAreNonCascading) const",41, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getSyntacticDepth() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getSemanticDepth() const",15, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::walkContext( ASTWalker & Walker)",26, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::dumpContext() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"AccessScope::dump() const",35, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"getLineNumber( DCType * DC)",8, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::printContext( raw_ostream & OS , unsigned indent) const",126, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::getDecl() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::getASTContext() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::getCurrentMembersWithoutLoading() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::getMembers() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::addMember( Decl * member , Decl * Hint)",24, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::addMemberSilently( Decl * member , Decl * hint) const",23, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::setMemberLoader( LazyMemberLoader * loader , uint64_t contextData)",18, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::loadAllMembers() const",22, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::wasDeserialized() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::classof( const Decl * D)",9, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"IterableDeclContext::castDeclToIterableDeclContext( const Decl * D)",11, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"getPrivateDeclContext( const DeclContext * DC , const SourceFile * useSF)",19, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"AccessScope::AccessScope( const DeclContext * DC , bool isPrivate)",9, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"AccessScope::isFileScope() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"AccessScope::accessLevelForDiagnostics() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"AccessScope::allowsPrivateAccess( const DeclContext * useDC , const DeclContext * sourceDC)",33, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"Decl::getDeclContextForModule() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"DeclContext::getContextKind() const",32, 2, 0, 0
repos/cpp/swift/lib/AST/DeclContext.cpp,"verify_DeclContext_is_start_of_node()",18, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"BuiltinUnit::getCache() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"BuiltinUnit::LookupCache::lookupValue( Identifier Name , NLKind LookupKind , const BuiltinUnit & M , SmallVectorImpl<ValueDecl*> & Result)",26, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"BuiltinUnit::BuiltinUnit( ModuleDecl & M)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::LookupCache::DeclMap::add( ValueDecl * VD)",4, 6, 4, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::LookupCache::DeclMap::clear()",3, 6, 4, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::LookupCache::DeclMap::begin() const",1, 80, 4, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::LookupCache::DeclMap::end() const",1, 76, 4, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::LookupCache::DeclMap::find( DeclName Name) const",3, 6, 4, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getCache() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceLookupCache::doPopulateCache( Range decls , bool onlyOperators)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceLookupCache::populateMemberCache( const SourceFile & SF)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceLookupCache::addToMemberCache( DeclRange decls)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceLookupCache::LookupCache( const SourceFile & SF)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceLookupCache::lookupValue( AccessPathTy AccessPath , DeclName Name , NLKind LookupKind , SmallVectorImpl<ValueDecl*> & Result)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceLookupCache::lookupVisibleDecls( AccessPathTy AccessPath , VisibleDeclConsumer & Consumer , NLKind LookupKind)",24, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceLookupCache::lookupClassMembers( AccessPathTy accessPath , VisibleDeclConsumer & consumer , const SourceFile & SF)",34, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceLookupCache::lookupClassMember( AccessPathTy accessPath , DeclName name , SmallVectorImpl<ValueDecl*> & results , const SourceFile & SF)",24, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceLookupCache::invalidate()",9, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::ModuleDecl( Identifier name , ASTContext & ctx)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::isClangModule() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::addFile( FileUnit & newFile)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::removeFile( FileUnit & existingFile)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::lookupValue( AccessPathTy AccessPath , DeclName Name , NLKind LookupKind , SmallVectorImpl<ValueDecl*> & Result) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::lookupLocalType( StringRef MangledName) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::lookupMember( SmallVectorImpl<ValueDecl*> & results , DeclContext * container , DeclName name , Identifier privateDiscriminator) const",58, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::lookupObjCMethods( ObjCSelector selector , SmallVectorImpl<AbstractFunctionDecl*> & results) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"BuiltinUnit::lookupValue( ModuleDecl :: AccessPathTy accessPath , DeclName name , NLKind lookupKind , SmallVectorImpl<ValueDecl*> & result) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"BuiltinUnit::lookupObjCMethods( ObjCSelector selector , SmallVectorImpl<AbstractFunctionDecl*> & results) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::lookupValue( ModuleDecl :: AccessPathTy accessPath , DeclName name , NLKind lookupKind , SmallVectorImpl<ValueDecl*> & result) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::lookupVisibleDecls( AccessPathTy AccessPath , VisibleDeclConsumer & Consumer , NLKind LookupKind) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::lookupVisibleDecls( ModuleDecl :: AccessPathTy AccessPath , VisibleDeclConsumer & Consumer , NLKind LookupKind) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::lookupClassMembers( AccessPathTy accessPath , VisibleDeclConsumer & consumer) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::lookupClassMembers( ModuleDecl :: AccessPathTy accessPath , VisibleDeclConsumer & consumer) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::lookupClassMember( AccessPathTy accessPath , DeclName name , SmallVectorImpl<ValueDecl*> & results) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::lookupClassMember( ModuleDecl :: AccessPathTy accessPath , DeclName name , SmallVectorImpl<ValueDecl*> & results) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::lookupObjCMethods( ObjCSelector selector , SmallVectorImpl<AbstractFunctionDecl*> & results) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::getLocalTypeDecls( SmallVectorImpl<TypeDecl*> & Results) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::getTopLevelDecls( SmallVectorImpl<Decl*> & Results) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getTopLevelDecls( SmallVectorImpl<Decl*> & Results) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::getPrecedenceGroups( SmallVectorImpl<PrecedenceGroupDecl*> & Results) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getPrecedenceGroups( SmallVectorImpl<PrecedenceGroupDecl*> & Results) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getLocalTypeDecls( SmallVectorImpl<TypeDecl*> & Results) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::getDisplayDecls( SmallVectorImpl<Decl*> & Results) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::lookupExistentialConformance( Type type , ProtocolDecl * protocol)",58, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::lookupConformance( Type type , ProtocolDecl * protocol)",110, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"OperatorLookup<PrefixOperatorDecl>::lookup( T & container , Identifier name)",4, 6, 4, 0
repos/cpp/swift/lib/AST/Module.cpp,"OperatorLookup<InfixOperatorDecl>::lookup( T & container , Identifier name)",4, 6, 4, 0
repos/cpp/swift/lib/AST/Module.cpp,"OperatorLookup<PostfixOperatorDecl>::lookup( T & container , Identifier name)",4, 6, 4, 0
repos/cpp/swift/lib/AST/Module.cpp,"OperatorLookup<PrecedenceGroupDecl>::lookup( T & container , Identifier name)",3, 6, 4, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::Impl::getImportsForSourceFile( const SourceFile & SF)",3, 4, 2, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::SourceFileSyntaxInfo::SourceFileSyntaxInfo( bool Enable)",1, 55, 2, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::hasSyntaxRoot() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getSyntaxRoot() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::setSyntaxRoot( syntax :: SourceFileSyntax && Root)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"checkOperatorConflicts( const SourceFile & SF , SourceLoc loc , ImportedOperatorsMap<OP_DECL> & importedOperators)",19, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"checkOperatorConflicts( const SourceFile & SF , SourceLoc loc , ImportedOperatorsMap<PrecedenceGroupDecl> & importedGroups)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"lookupOperatorDeclForName( const FileUnit & File , SourceLoc Loc , Identifier Name , bool includePrivate , OperatorMap<OP_DECL*> SourceFile :: * OP_MAP)",71, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"lookupOperatorDeclForName( ModuleDecl * M , SourceLoc Loc , Identifier Name , OperatorMap<OP_DECL*> SourceFile :: * OP_MAP)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::getImportedModules( SmallVectorImpl<ImportedModule> & modules , ModuleDecl :: ImportFilter filter) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getImportedModules( SmallVectorImpl<ModuleDecl::ImportedModule> & modules , ModuleDecl :: ImportFilter filter) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::getImportedModulesForLookup( SmallVectorImpl<ImportedModule> & modules) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::isSameAccessPath( AccessPathTy lhs , AccessPathTy rhs)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::ReverseFullNameIterator::ReverseFullNameIterator( const ModuleDecl * M)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::ReverseFullNameIterator::operator *() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::ReverseFullNameIterator::operator ++()",17, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::ReverseFullNameIterator::printForward( raw_ostream & out) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::removeDuplicateImports( SmallVectorImpl<ImportedModule> & imports)",26, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::getModuleFilename() const",21, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::isStdlibModule() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::isSwiftShimsModule() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::isOnoneSupportModule() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::isBuiltinModule() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::registerMainClass( ClassDecl * mainClass , SourceLoc diagLoc)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::registerEntryPointFile( FileUnit * file , SourceLoc diagLoc , Optional<ArtificialMainKind> kind)",73, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::isSystemModule() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"forAllImportedModules( ModuleDecl * topLevel , ModuleDecl :: AccessPathTy thisPath , llvm :: function_ref<bool(ModuleDecl::ImportedModule)> fn)",47, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::forAllVisibleModules( AccessPathTy thisPath , llvm :: function_ref<bool(ImportedModule)> fn)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"FileUnit::forAllVisibleModules( llvm :: function_ref<bool(ModuleDecl::ImportedModule)> fn)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::collectLinkLibraries( LinkLibraryCallback callback)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::collectLinkLibraries( ModuleDecl :: LinkLibraryCallback callback) const",17, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::walk( ASTWalker & Walker)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleDecl::findUnderlyingClangModule() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::print( raw_ostream & OS , const PrintOptions & PO)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::print( ASTPrinter & Printer , const PrintOptions & PO)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::addImports( ArrayRef<ImportedModuleDesc> IM)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::hasTestableOrPrivateImport( AccessLevel accessLevel , const swift :: ValueDecl * ofDecl , SourceFile :: ImportQueryKind queryKind) const",61, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::clearLookupCache()",8, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::cacheVisibleDecls( SmallVectorImpl<ValueDecl*> && globals) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getCachedVisibleDecls() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"performAutoImport( SourceFile & SF , SourceFile :: ImplicitModuleImportKind implicitModuleImportKind)",29, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::SourceFile( ModuleDecl & M , SourceFileKind K , Optional<unsigned> bufferID , ImplicitModuleImportKind ModImpKind , bool KeepParsedTokens , bool BuildSyntaxTree)",19, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getTokenVector()",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getAllTokens() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::shouldCollectToken() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::shouldBuildSyntaxTree() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::canBeParsedInFull() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"FileUnit::walk( ASTWalker & walker)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::walk( ASTWalker & walker)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getFilename() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getScope()",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getDiscriminatorForPrivateValue( const ValueDecl * D) const",39, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::getTypeRefinementContext()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::setTypeRefinementContext( TypeRefinementContext * Root)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFile::createReferencedNameTracker()",4, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"FileUnit::anchor()",1, 27, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"FileUnit::operator new( size_t Bytes , ASTContext & C , unsigned Alignment)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"LoadedFile::getFilename() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"getClangModule( llvm :: PointerUnion<const ModuleDecl*,const void*> Union)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleEntity::getName() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleEntity::getFullName() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleEntity::isSystemModule() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleEntity::isBuiltinModule() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleEntity::getAsSwiftModule() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"ModuleEntity::getAsClangModule() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFileTraceFormatter::traceName( const void * Entity , raw_ostream & OS) const",6, 4, 2, 0
repos/cpp/swift/lib/AST/Module.cpp,"SourceFileTraceFormatter::traceLoc( const void * Entity , SourceManager * SM , clang :: SourceManager * CSM , raw_ostream & OS) const",4, 4, 2, 0
repos/cpp/swift/lib/AST/Module.cpp,"FrontendStatsTracer::getTraceFormatter<constSourceFile*>()",3, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"getUSRSpacePrefix()",3, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"ide::printTypeUSR( Type Ty , raw_ostream & OS)",6, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"ide::printDeclTypeUSR( const ValueDecl * D , raw_ostream & OS)",6, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"printObjCUSRFragment( const ValueDecl * D , StringRef ObjCName , const ExtensionDecl * ExtContextD , raw_ostream & OS)",39, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"printObjCUSRContext( const Decl * D , raw_ostream & OS)",11, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"printObjCUSRForAccessor( const AbstractStorageDecl * ASD , AccessorKind Kind , raw_ostream & OS)",23, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"printObjCUSR( const ValueDecl * D , raw_ostream & OS)",15, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"shouldUseObjCUSR( const Decl * D)",25, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"swift::USRGenerationRequest::evaluate( Evaluator & evaluator , const ValueDecl * D) const",83, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"ide::printModuleUSR( ModuleEntity Mod , raw_ostream & OS)",10, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"ide::printDeclUSR( const ValueDecl * D , raw_ostream & OS)",9, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"ide::printAccessorUSR( const AbstractStorageDecl * D , AccessorKind AccKind , llvm :: raw_ostream & OS)",27, 2, 0, 0
repos/cpp/swift/lib/AST/USRGeneration.cpp,"ide::printExtensionUSR( const ExtensionDecl * ED , raw_ostream & OS)",23, 2, 0, 0
repos/cpp/swift/lib/AST/SILLayout.cpp,"anyMutable( ArrayRef<SILField> Fields)",7, 2, 0, 0
repos/cpp/swift/lib/AST/SILLayout.cpp,"verifyFields( CanGenericSignature Sig , ArrayRef<SILField> Fields)",24, 2, 0, 0
repos/cpp/swift/lib/AST/SILLayout.cpp,"SILLayout::SILLayout( CanGenericSignature Sig , ArrayRef<SILField> Fields)",13, 2, 0, 0
repos/cpp/swift/lib/AST/SILLayout.cpp,"SILLayout::Profile( llvm :: FoldingSetNodeID & id , CanGenericSignature Generics , ArrayRef<SILField> Fields)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"dispatchVisitPreExprHelper( Verifier & V , typename std :: enable_if<is_apply_expr<typename std::remove_pointer<Kind>::type>::value,Kind> :: type node)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"dispatchVisitPreExprHelper( Verifier & V , typename std :: enable_if<is_subscript_expr<typename std::remove_pointer<Kind>::type>::value,Kind> :: type node)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"dispatchVisitPreExprHelper( Verifier & V , typename std :: enable_if<is_autoclosure_expr<typename std::remove_pointer<Kind>::type>::value,Kind> :: type node)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"dispatchVisitPreExprHelper( Verifier & V , typename std :: enable_if<!is_apply_subscript_or_autoclosure_expr<typename std::remove_pointer<Kind>::type>::value,Kind> :: type node)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"LazyGenericEnvironment::operator bool() const",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"LazyGenericEnvironment::isLazy() const",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"LazyGenericEnvironment::containsPrimaryArchetype( PrimaryArchetypeType * archetype) const",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"getOverriddenDeclIfAvailable( T * decl)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::Verifier( PointerUnion<ModuleDecl*,SourceFile*> M , DeclContext * DC)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::Verifier( ModuleDecl * M , DeclContext * DC)",2, 69, 6, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::Verifier( SourceFile & SF , DeclContext * DC)",1, 67, 2, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::forDecl( const Decl * D)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::walkToExprPre( Expr * E)",17, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::walkToExprPost( Expr * E)",17, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::walkToStmtPre( Stmt * S)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::walkToStmtPost( Stmt * S)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::walkToPatternPre( Pattern * P)",12, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::walkToPatternPost( Pattern * P)",12, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::walkToDeclPre( Decl * D)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::walkToDeclPost( Decl * D)",12, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::dispatchVisitPre( T node)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::dispatchVisitPreExpr( T node)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::dispatchVisitPreStmt( T node)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::dispatchVisitPrePattern( T node)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::dispatchVisitPost( T node)",34, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( Expr * E)",1, 48, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( Stmt * S)",1, 48, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( Pattern * S)",1, 51, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( Decl * S)",1, 48, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( TypeAliasDecl * typealias)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerifyChecked( Expr * E)",13, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerifyChecked( Stmt * S)",1, 55, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerifyChecked( Pattern * S)",1, 66, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerifyChecked( Decl * S)",1, 55, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( AbstractFunctionDecl * afd)",20, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::cleanup( Expr * E)",1, 30, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::cleanup( Stmt * S)",1, 30, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::cleanup( Pattern * P)",1, 33, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::cleanup( Decl * D)",1, 30, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( Expr * E)",1, 34, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( Stmt * S)",1, 34, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( Pattern * P)",1, 37, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( Decl * D)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsedBase( T ASTNode)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyBound( Expr * E)",1, 33, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyBound( Stmt * S)",1, 33, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyBound( Pattern * P)",1, 36, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyBound( Decl * D)",1, 33, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyCheckedAlways( Expr * E)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyCheckedAlways( Stmt * S)",1, 41, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyCheckedAlways( Pattern * P)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyCheckedAlways( Decl * D)",2, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyCheckedAlwaysBase( T ASTNode)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( Expr * E)",15, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( Stmt * S)",1, 35, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( Pattern * P)",1, 39, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( Decl * D)",1, 35, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( Type type)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( Type type , llvm :: SmallPtrSetImpl<ArchetypeType*> & visitedArchetypes)",83, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyCheckedBase( T ASTNode)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::pushScope( DeclContext * scope)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::pushScope( BraceStmt * scope)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::popScope( DeclContext * scope)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::popScope( BraceStmt * scope)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::pushFunction( DeclContext * functionScope)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::popFunction( DeclContext * functionScope)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( BraceStmt * BS)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::cleanup( BraceStmt * BS)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( OpenExistentialExpr * expr)",15, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::cleanup( OpenExistentialExpr * expr)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( MakeTemporarilyEscapableExpr * expr)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::cleanup( MakeTemporarilyEscapableExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( OptionalEvaluationExpr * expr)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::cleanup( OptionalEvaluationExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerify( CollectionUpcastConversionExpr * expr)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::cleanup( CollectionUpcastConversionExpr * expr)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::getCanonicalDeclContext( DeclContext * DC)",12, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::getClosureDiscriminators( AbstractClosureExpr * closure)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyCheckedAlways( ValueDecl * D)",45, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyCheckedAlways( NominalTypeDecl * D)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerifyChecked( ThrowStmt * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ThrowStmt * S)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerifyChecked( CatchStmt * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( CatchStmt * S)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldVerifyChecked( ReturnStmt * S)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ReturnStmt * S)",24, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( DeferStmt * S)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( FailStmt * S)",19, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkConditionElement( const StmtConditionElement & elt)",21, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkCondition( StmtCondition C)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( IfStmt * S)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( GuardStmt * S)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( WhileStmt * S)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkAssignDest( Expr * Dest)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( DeclRefExpr * E)",19, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( AssignExpr * S)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( EnumIsCaseExpr * E)",19, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( TupleExpr * E)",17, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( InOutExpr * E)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( AbstractClosureExpr * E)",15, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( AbstractClosureExpr * E)",60, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( MetatypeConversionExpr * E)",18, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ClassMetatypeToObjectExpr * E)",20, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ExistentialMetatypeToObjectExpr * E)",29, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ProtocolMetatypeToObjectExpr * E)",38, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( PointerToPointerExpr * E)",14, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( InOutToPointerExpr * E)",32, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ArrayToPointerExpr * E)",30, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( StringToPointerExpr * E)",27, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( CollectionUpcastConversionExpr * E)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( DerivedToBaseExpr * E)",24, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ErasureExpr * E)",137, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( AnyHashableErasureExpr * E)",26, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( TupleElementExpr * E)",27, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::maybeRecordValidPointerConversion( Expr * Base , Expr * Arg)",88, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ApplyExpr * E)",57, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( MemberRefExpr * E)",37, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( DynamicMemberRefExpr * E)",15, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( SubscriptExpr * E)",21, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( DynamicSubscriptExpr * E)",16, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkOptionalObjectType( Type optionalType , Type objectType , Expr * E)",15, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( OptionalEvaluationExpr * E)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( BindOptionalExpr * E)",14, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( CheckedCastExpr * E)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( CoerceExpr * E)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( IdentityExpr * E)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( AnyTryExpr * E)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( OptionalTryExpr * E)",20, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( TupleShuffleExpr * E)",58, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( DynamicTypeExpr * E)",13, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( InjectIntoOptionalExpr * E)",16, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( IfExpr * E)",14, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( SuperRefExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( TypeExpr * expr)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ForceValueExpr * E)",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( OpaqueValueExpr * E)",17, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( MakeTemporarilyEscapableExpr * E)",57, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( KeyPathApplicationExpr * E)",101, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( LoadExpr * E)",13, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ValueDecl * VD)",31, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::shouldWalkIntoLazyInitializers()",6, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( PatternBindingDecl * binding)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( AbstractStorageDecl * ASD)",57, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( VarDecl * var)",102, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::dumpRef( Decl * decl)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyConformance( Type type , ProtocolConformanceRef conformance)",22, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( SubstitutionMap substitutions)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyConformance( Decl * decl , ProtocolConformance * conformance)",155, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyGenericEnvironment( Decl * D , GenericSignature * sig , GenericEnvironment * env)",18, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( GenericTypeDecl * generic)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( NominalTypeDecl * nominal)",14, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyCheckedAlways( GenericTypeParamDecl * GTPD)",48, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ExtensionDecl * ext)",8, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( EnumElementDecl * UED)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( AbstractFunctionDecl * AFD)",34, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( ConstructorDecl * CD)",13, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ProtocolDecl * PD)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ConstructorDecl * CD)",76, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( DestructorDecl * DD)",18, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( AbstractFunctionDecl * AFD)",94, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( DestructorDecl * DD)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( FuncDecl * FD)",65, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( AccessorDecl * FD)",47, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( FuncDecl * FD)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( AccessorDecl * FD)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( ClassDecl * CD)",24, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( AssociatedTypeDecl * ATD)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyParsed( TuplePattern * TP)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::verifyChecked( TuplePattern * TP)",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::lookThroughLValue( Type & type , bool & isInOut)",25, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSameLValueness( Type & T0 , Type & T1 , const char * what)",19, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkLValue( Type T , const char * what)",10, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkMetatypeType( Type type , const char * what)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSameType( Type T0 , Type T1 , const char * what)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkTrivialSubtype( Type srcTy , Type destTy , const char * what)",37, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSameOrSubType( Type T0 , Type T1 , const char * what)",21, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkExceptionTypeExists( const char * where)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::isGoodSourceRange( SourceRange SR)",7, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSourceRangesBase( T ASTNode)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSourceRanges( Expr * E)",25, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSourceRanges( Stmt * S)",23, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSourceRanges( IfConfigDecl * ICD)",61, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSourceRanges( Pattern * P)",23, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::assertValidRegion( Decl * D)",9, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSourceRanges( ParamDecl * PD)",3, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSourceRanges( Decl * D)",17, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkSourceRanges( SourceRange Current , ASTWalker :: ParentTy Parent , llvm :: function_ref<void()> printEntity)",53, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkErrors( Expr * E)",1, 33, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkErrors( Stmt * S)",1, 33, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkErrors( Pattern * P)",1, 36, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkErrors( Decl * D)",1, 33, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"Verifier::checkErrors( ValueDecl * D)",11, 6, 4, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"swift::verify( SourceFile & SF)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"swift::shouldVerify( const Decl * D , const ASTContext & Context)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTVerifier.cpp,"swift::verify( Decl * D)",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::numTrailingObjects( OverloadToken<Type>) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::getContextTypes()",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::getContextTypes() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::getGenericParams() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::GenericEnvironment( GenericSignature * signature , GenericSignatureBuilder * builder)",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::setOwningDeclContext( DeclContext * newOwningDC)",28, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::addMapping( GenericParamKey key , Type contextType)",12, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::getMappingIfPresent( GenericParamKey key) const",13, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::mapTypeIntoContext( GenericEnvironment * env , Type type)",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"MapTypeOutOfContext::operator ( )( SubstitutableType * type) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"TypeBase::mapTypeOutOfContext()",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"QueryInterfaceTypeSubstitutions::operator ( )( SubstitutableType * type) const",35, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::mapTypeIntoContext( Type type , LookupConformanceFn lookupConformance) const",15, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::mapTypeIntoContext( Type type) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::mapTypeIntoContext( GenericTypeParamType * type) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::getSugaredType( GenericTypeParamType * type) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::getSugaredType( Type type) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::getForwardingSubstitutionMap() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::mapConformanceRefIntoContext( GenericEnvironment * genericEnv , Type conformingType , ProtocolConformanceRef conformance)",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericEnvironment.cpp,"GenericEnvironment::mapConformanceRefIntoContext( Type conformingInterfaceType , ProtocolConformanceRef conformance) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"llvm::operator < <( raw_ostream & OS , Identifier I)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"llvm::operator < <( raw_ostream & OS , DeclBaseName D)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"llvm::operator < <( raw_ostream & OS , DeclName I)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"llvm::operator < <( raw_ostream & OS , swift :: ObjCSelector S)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"Identifier::isOperatorSlow() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"Identifier::compare( Identifier other) const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"DeclName::compare( DeclName other) const",19, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"equals( ArrayRef<Identifier> idents , ArrayRef<StringRef> strings)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"DeclName::isCompoundName( DeclBaseName baseName , ArrayRef<StringRef> argNames) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"DeclName::isCompoundName( StringRef baseName , ArrayRef<StringRef> argNames) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"DeclName::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"DeclName::getString( llvm :: SmallVectorImpl<char> & scratch , bool skipEmptyArgumentNames) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"DeclName::print( llvm :: raw_ostream & os , bool skipEmptyArgumentNames) const",35, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"DeclName::printPretty( llvm :: raw_ostream & os) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"ObjCSelector::ObjCSelector( ASTContext & ctx , unsigned numArgs , ArrayRef<Identifier> pieces)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"ObjCSelector::getString( llvm :: SmallVectorImpl<char> & scratch) const",14, 2, 0, 0
repos/cpp/swift/lib/AST/Identifier.cpp,"ObjCSelector::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Availability.cpp,"mergeIntoInferredVersion( const Optional<llvm::VersionTuple> & Version , Optional<llvm::VersionTuple> & Inferred , MergeFunction Merge)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Availability.cpp,"mergeWithInferredAvailability( const AvailableAttr * Attr , InferredAvailability & Inferred)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Availability.cpp,"createAvailableAttr( PlatformKind Platform , const InferredAvailability & Inferred , ASTContext & Context)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Availability.cpp,"AvailabilityInference::applyInferredAvailableAttrs( Decl * ToDecl , ArrayRef<const Decl*> InferredFromDecls , ASTContext & Context)",25, 2, 0, 0
repos/cpp/swift/lib/AST/Availability.cpp,"AvailabilityInference::annotatedAvailableRange( const Decl * D , ASTContext & Ctx)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Availability.cpp,"AvailabilityInference::availableRange( const Decl * D , ASTContext & Ctx)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Availability.cpp,"AvailabilityInferenceTypeWalker::AvailabilityInferenceTypeWalker( ASTContext & AC)",1, 62, 2, 0
repos/cpp/swift/lib/AST/Availability.cpp,"AvailabilityInferenceTypeWalker::walkToTypePre( Type ty)",8, 4, 2, 0
repos/cpp/swift/lib/AST/Availability.cpp,"AvailabilityInference::inferForType( Type t)",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeRepr::getLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeRepr::getStartLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeRepr::getEndLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeRepr::getSourceRange() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeRepr::operator new( size_t Bytes , const ASTContext & C , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"ComponentIdentTypeRepr::getIdentifier() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"printTypeRepr( const TypeRepr * TyR , ASTPrinter & Printer , const PrintOptions & Opts)",7, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeRepr::print( raw_ostream & OS , const PrintOptions & Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeRepr::print( ASTPrinter & Printer , const PrintOptions & Opts) const",16, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::CloneVisitor( const ASTContext & ctx)",1, 64, 4, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitErrorTypeRepr( ErrorTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitAttributedTypeRepr( AttributedTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitSimpleIdentTypeRepr( SimpleIdentTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitGenericIdentTypeRepr( GenericIdentTypeRepr * T)",10, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitCompoundIdentTypeRepr( CompoundIdentTypeRepr * T)",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitFunctionTypeRepr( FunctionTypeRepr * T)",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitArrayTypeRepr( ArrayTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitDictionaryTypeRepr( DictionaryTypeRepr * T)",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitOptionalTypeRepr( OptionalTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitImplicitlyUnwrappedOptionalTypeRepr( ImplicitlyUnwrappedOptionalTypeRepr * T)",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitTupleTypeRepr( TupleTypeRepr * T)",12, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitCompositionTypeRepr( CompositionTypeRepr * T)",11, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitMetatypeTypeRepr( MetatypeTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitProtocolTypeRepr( ProtocolTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitInOutTypeRepr( InOutTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitSharedTypeRepr( SharedTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitOwnedTypeRepr( OwnedTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitFixedTypeRepr( FixedTypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CloneVisitor::visitSILBoxTypeRepr( SILBoxTypeRepr * type)",18, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeRepr::clone( const ASTContext & ctx) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"ErrorTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"AttributedTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"AttributedTypeRepr::printAttrs( llvm :: raw_ostream & OS) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"AttributedTypeRepr::printAttrs( ASTPrinter & Printer , const PrintOptions & Options) const",28, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"IdentTypeRepr::create( ASTContext & C , ArrayRef<ComponentIdentTypeRepr*> Components)",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"printGenericArgs( ASTPrinter & Printer , const PrintOptions & Opts , ArrayRef<TypeRepr*> Args)",10, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"ComponentIdentTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",14, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CompoundIdentTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"FunctionTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",14, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"ArrayTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"DictionaryTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"OptionalTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"ImplicitlyUnwrappedOptionalTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TupleTypeRepr::TupleTypeRepr( ArrayRef<TupleTypeReprElement> Elements , SourceRange Parens , SourceLoc Ellipsis , unsigned EllipsisIdx)",16, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TupleTypeRepr::create( const ASTContext & C , ArrayRef<TupleTypeReprElement> Elements , SourceRange Parens , SourceLoc Ellipsis , unsigned EllipsisIdx)",14, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TupleTypeRepr::createEmpty( const ASTContext & C , SourceRange Parens)",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"GenericIdentTypeRepr::create( const ASTContext & C , SourceLoc Loc , Identifier Id , ArrayRef<TypeRepr*> GenericArgs , SourceRange AngleBrackets)",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CompoundIdentTypeRepr::create( const ASTContext & C , ArrayRef<ComponentIdentTypeRepr*> Components)",6, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"SILBoxTypeRepr::create( ASTContext & C , GenericParamList * GenericParams , SourceLoc LBraceLoc , ArrayRef<Field> Fields , SourceLoc RBraceLoc , SourceLoc ArgLAngleLoc , ArrayRef<TypeRepr*> GenericArgs , SourceLoc ArgRAngleLoc)",12, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"FunctionTypeRepr::getStartLocImpl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"SILBoxTypeRepr::getStartLocImpl() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"SILBoxTypeRepr::getEndLocImpl() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"SILBoxTypeRepr::getLocImpl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TupleTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",35, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CompositionTypeRepr::create( const ASTContext & C , ArrayRef<TypeRepr*> Types , SourceLoc FirstTypeLoc , SourceRange CompositionRange)",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"CompositionTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"MetatypeTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"ProtocolTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"SpecifierTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",19, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"FixedTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"SILBoxTypeRepr::printImpl( ASTPrinter & Printer , const PrintOptions & Opts) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeReprTraceFormatter::traceName( const void * Entity , raw_ostream & OS) const",6, 4, 2, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"TypeReprTraceFormatter::traceLoc( const void * Entity , SourceManager * SM , clang :: SourceManager * CSM , raw_ostream & OS) const",7, 4, 2, 0
repos/cpp/swift/lib/AST/TypeRepr.cpp,"FrontendStatsTracer::getTraceFormatter<constTypeRepr*>()",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"ConformanceAccessPath::print( raw_ostream & out) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"ConformanceAccessPath::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::GenericSignature( TypeArrayView<GenericTypeParamType> params , ArrayRef<Requirement> requirements , bool isKnownCanonical)",38, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getInnermostGenericParams() const",14, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::forEachParam( llvm :: function_ref<void(GenericTypeParamType*,bool)> callback) const",37, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::areAllParamsConcrete() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getASTContext( TypeArrayView<GenericTypeParamType> params , ArrayRef<swift::Requirement> requirements)",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getGenericSignatureBuilder()",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::isCanonical() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"getRequirementKindOrder( RequirementKind kind)",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getCanonical( TypeArrayView<GenericTypeParamType> params , ArrayRef<Requirement> requirements , bool skipValidation)",128, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getCanonicalSignature() const",28, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::createGenericEnvironment()",4, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getASTContext() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::lookupConformance( CanType type , ProtocolDecl * proto) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::requiresClass( Type type)",29, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getSuperclassBound( Type type)",17, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getConformsTo( Type type)",24, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::conformsToProtocol( Type type , ProtocolDecl * proto)",17, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::isConcreteType( Type type)",3, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getConcreteType( Type type)",12, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getLayoutConstraint( Type type)",12, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::areSameTypeParameterInContext( Type type1 , Type type2)",22, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::isRequirementSatisfied( Requirement requirement)",60, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::requirementsNotSatisfiedBy( GenericSignature * otherSig)",22, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::isCanonicalTypeInContext( Type type)",14, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::isCanonicalTypeInContext( Type type , GenericSignatureBuilder & builder)",27, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getCanonicalTypeInContext( Type type , GenericSignatureBuilder & builder)",34, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getCanonicalTypeInContext( Type type)",11, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"CanGenericSignature::getGenericEnvironment() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"CanGenericSignature::getGenericParams() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"eraseAssociatedTypes( Type type)",7, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"hasConformanceInSignature( ArrayRef<Requirement> requirements , Type subjectType , ProtocolDecl * proto)",15, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"hasNonCanonicalSelfProtocolRequirement( const RequirementSource * source , ProtocolDecl * conformingProto)",29, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"getBestRequirementSource( GenericSignatureBuilder & builder , ArrayRef<GSBConstraint<ProtocolDecl*>> constraints)",41, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::buildConformanceAccessPath( SmallVectorImpl<ConformanceAccessPath::Entry> & path , ArrayRef<Requirement> reqs , const void * opaqueSource , ProtocolDecl * conformingProto , Type rootType , ProtocolDecl * requirementSignatureProto)",139, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getConformanceAccessPath( Type type , ProtocolDecl * protocol)",33, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericParamKey::findIndexIn( TypeArrayView<GenericTypeParamType> genericParams) const",19, 2, 0, 0
repos/cpp/swift/lib/AST/GenericSignature.cpp,"GenericSignature::getGenericParamOrdinal( GenericTypeParamType * param)",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"swift::simple_display( llvm :: raw_ostream & out , const llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> & value)",11, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"swift::simple_display( llvm :: raw_ostream & out , const TypeResolutionStage & value)",16, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"InheritedTypeRequest::getTypeLoc( llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl , unsigned index) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"InheritedTypeRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"InheritedTypeRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"InheritedTypeRequest::isCached() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"InheritedTypeRequest::getCachedResult() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"InheritedTypeRequest::cacheResult( Type value) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"SuperclassTypeRequest::diagnoseCycle( DiagnosticEngine & diags) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"SuperclassTypeRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"SuperclassTypeRequest::isCached() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"SuperclassTypeRequest::getCachedResult() const",13, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"SuperclassTypeRequest::cacheResult( Type value) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"EnumRawTypeRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"EnumRawTypeRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"EnumRawTypeRequest::isCached() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"EnumRawTypeRequest::getCachedResult() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"EnumRawTypeRequest::cacheResult( Type value) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"OverriddenDeclsRequest::diagnoseCycle( DiagnosticEngine & diags) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"OverriddenDeclsRequest::noteCycleStep( DiagnosticEngine & diags) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"IsObjCRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"IsObjCRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"IsObjCRequest::getCachedResult() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"IsObjCRequest::cacheResult( bool value) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"IsDynamicRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"IsDynamicRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"IsDynamicRequest::getCachedResult() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"IsDynamicRequest::cacheResult( bool value) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"WhereClauseOwner::WhereClauseOwner( Decl * decl)",2, 58, 2, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"WhereClauseOwner::getLoc() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"swift::simple_display( llvm :: raw_ostream & out , const WhereClauseOwner & owner)",10, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"RequirementRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"RequirementRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"RequirementRequest::getRequirements( WhereClauseOwner owner)",35, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"RequirementRequest::visitRequirements( WhereClauseOwner owner , TypeResolutionStage stage , llvm :: function_ref<bool(Requirement,RequirementRepr*)> callback)",24, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"RequirementRequest::getRequirement() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"RequirementRequest::isCached() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"RequirementRequest::getCachedResult() const",31, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"RequirementRequest::cacheResult( Requirement value) const",21, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"USRGenerationRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/TypeCheckRequests.cpp,"USRGenerationRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClangNode::getAsMacro() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClangNode::getLocation() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClangNode::getSourceRange() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClangNode::getClangModule() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::operator new( size_t Bytes , const ASTContext & C , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ModuleDecl::operator new( size_t Bytes , const ASTContext & C , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getKindName( DeclKind K)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getDescriptiveKind() const",116, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getDescriptiveKindName( DescriptiveDeclKind K)",57, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"swift::operator < <( llvm :: raw_ostream & OS , StaticSpellingKind SSK)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"swift::operator < <( llvm :: raw_ostream & OS , ReferenceOwnership RO)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getInnermostDeclContext() const",14, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::setDeclContext( DeclContext * DC)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::isUserAccessible() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::canHaveComment() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getModuleContext() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getDiags() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getSourceRange() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getSourceRangeIncludingAttrs() const",43, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getLoc() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::isTransparent() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::isTransparent() const",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::isPrivateStdlibDecl( bool treatNonBuiltinProtocolsAsPublic) const",72, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::isWeakImported( ModuleDecl * fromModule) const",28, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericParamList::GenericParamList( SourceLoc LAngleLoc , ArrayRef<GenericTypeParamDecl*> Params , SourceLoc WhereLoc , MutableArrayRef<RequirementRepr> Requirements , SourceLoc RAngleLoc)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericParamList::create( ASTContext & Context , SourceLoc LAngleLoc , ArrayRef<GenericTypeParamDecl*> Params , SourceLoc RAngleLoc)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericParamList::create( const ASTContext & Context , SourceLoc LAngleLoc , ArrayRef<GenericTypeParamDecl*> Params , SourceLoc WhereLoc , ArrayRef<RequirementRepr> Requirements , SourceLoc RAngleLoc)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericParamList::clone( DeclContext * dc) const",58, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericParamList::addTrailingWhereClause( ASTContext & ctx , SourceLoc trailingWhereLoc , ArrayRef<RequirementRepr> trailingRequirements)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericParamList::setDepth( unsigned depth)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TrailingWhereClause::TrailingWhereClause( SourceLoc whereLoc , ArrayRef<RequirementRepr> requirements)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TrailingWhereClause::create( ASTContext & ctx , SourceLoc whereLoc , ArrayRef<RequirementRepr> requirements)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::getInnermostGenericParamTypes() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::getGenericRequirements() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::setGenericParams( GenericParamList * params)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::getGenericSignature() const",19, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::getGenericEnvironment() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::hasLazyGenericEnvironment() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::setGenericEnvironment( GenericEnvironment * genericEnv)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::getLazyGenericEnvironmentSlow() const",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::setLazyGenericEnvironment( LazyMemberLoader * lazyLoader , GenericSignature * genericSig , uint64_t genericEnvData)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericContext::getGenericTrailingWhereClauseSourceRange() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ImportDecl::create( ASTContext & Ctx , DeclContext * DC , SourceLoc ImportLoc , ImportKind Kind , SourceLoc KindLoc , ArrayRef<AccessPathElement> Path , ClangNode ClangN)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ImportDecl::ImportDecl( DeclContext * DC , SourceLoc ImportLoc , ImportKind K , SourceLoc KindLoc , ArrayRef<AccessPathElement> Path)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ImportDecl::getBestImportKind( const ValueDecl * VD)",55, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ImportDecl::findBestImportKind( ArrayRef<ValueDecl*> Decls)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::setConformanceLoader( LazyMemberLoader * lazyLoader , uint64_t contextData)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::takeConformanceLoaderSlow()",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::ExtensionDecl( SourceLoc extensionLoc , TypeLoc extendedType , MutableArrayRef<TypeLoc> inherited , DeclContext * parent , TrailingWhereClause * trailingWhereClause)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::create( ASTContext & ctx , SourceLoc extensionLoc , TypeLoc extendedType , MutableArrayRef<TypeLoc> inherited , DeclContext * parent , TrailingWhereClause * trailingWhereClause , ClangNode clangNode)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::setConformanceLoader( LazyMemberLoader * lazyLoader , uint64_t contextData)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::takeConformanceLoaderSlow()",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::getExtendedNominal() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::isConstrainedExtension() const",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::isEquivalentToExtendedContext() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::getDefaultAccessLevel() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::getMaxAccessLevel() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"cloneGenericParams( ASTContext & ctx , ExtensionDecl * ext , GenericParamList * fromParams)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"createExtensionGenericParams( ASTContext & ctx , ExtensionDecl * ext , NominalTypeDecl * nominal)",18, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ExtensionDecl::createGenericParamsIfMissing( NominalTypeDecl * nominal)",54, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::PatternBindingDecl( SourceLoc StaticLoc , StaticSpellingKind StaticSpelling , SourceLoc VarLoc , unsigned NumPatternEntries , DeclContext * Parent)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::create( ASTContext & Ctx , SourceLoc StaticLoc , StaticSpellingKind StaticSpelling , SourceLoc VarLoc , Pattern * Pat , SourceLoc EqualLoc , Expr * E , DeclContext * Parent)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::createImplicit( ASTContext & Ctx , StaticSpellingKind StaticSpelling , Pattern * Pat , Expr * E , DeclContext * Parent , SourceLoc VarLoc)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::create( ASTContext & Ctx , SourceLoc StaticLoc , StaticSpellingKind StaticSpelling , SourceLoc VarLoc , ArrayRef<PatternBindingEntry> PatternList , DeclContext * Parent)",29, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::createDeserialized( ASTContext & Ctx , SourceLoc StaticLoc , StaticSpellingKind StaticSpelling , SourceLoc VarLoc , unsigned NumPatternEntries , DeclContext * Parent)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingInitializer::getImplicitSelfDecl()",23, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingInitializer::getInitializedLazyVar() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"patternContainsVarDeclBinding( const Pattern * P , const VarDecl * VD)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::getPatternEntryIndexForVarDecl( const VarDecl * VD) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingEntry::getOrigInitRange() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingEntry::setInit( Expr * E)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingEntry::getAnchoringVarDecl() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingEntry::getSourceRange( bool omitAccessors) const",22, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingEntry::hasInitStringRepresentation() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingEntry::getInitStringRepresentation( SmallVectorImpl<char> & scratch) const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::getSourceRange() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getCorrectStaticSpellingForDecl( const Decl * D)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::getCorrectStaticSpelling() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::hasStorage() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::setPattern( unsigned i , Pattern * P , DeclContext * InitContext)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::getSingleVar() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::isInitExposedToClients() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"isDefaultInitializable( const TypeRepr * typeRepr)",34, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Pattern::isNeverDefaultInitializable() const",14, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PatternBindingDecl::isDefaultInitializable( unsigned i) const",34, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TopLevelCodeDecl::getStartLoc() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TopLevelCodeDecl::getSourceRange() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"IfConfigDecl::getSourceRange() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"isPolymorphic( const AbstractStorageDecl * storage)",22, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"isDirectToStorageAccess( const AccessorDecl * accessor , const VarDecl * var , bool isAccessOnSelf)",25, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getAccessSemanticsFromContext( const DeclContext * UseDC , bool isAccessOnSelf) const",15, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getDirectReadAccessStrategy( const AbstractStorageDecl * storage)",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getDirectWriteAccessStrategy( const AbstractStorageDecl * storage)",28, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getDirectReadWriteAccessStrategy( const AbstractStorageDecl * storage)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getOpaqueReadAccessStrategy( const AbstractStorageDecl * storage , bool dispatch)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getOpaqueWriteAccessStrategy( const AbstractStorageDecl * storage , bool dispatch)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getOpaqueReadWriteAccessStrategy( const AbstractStorageDecl * storage , bool dispatch)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getOpaqueAccessStrategy( const AbstractStorageDecl * storage , AccessKind accessKind , bool dispatch)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::getAccessStrategy( AccessSemantics semantics , AccessKind accessKind , ModuleDecl * module , ResilienceExpansion expansion) const",60, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::requiresOpaqueAccessor( AccessorKind kind) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::requiresOpaqueModifyCoroutine() const",24, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::visitExpectedOpaqueAccessors( llvm :: function_ref<void(AccessorKind)> visit) const",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::visitOpaqueAccessors( llvm :: function_ref<void(AccessorDecl*)> visit) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"hasPrivateOrFilePrivateFormalAccess( const ValueDecl * D)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"isInPrivateOrLocalContext( const ValueDecl * D)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::isOutermostPrivateOrFilePrivateScope() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::isFormallyResilient() const",19, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::isResilient() const",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::isResilient( ModuleDecl * M , ResilienceExpansion expansion) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"isValidKeyPathComponent( AbstractStorageDecl * decl)",23, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::computeIsValidKeyPathComponent()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::isInstanceMember() const",63, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getLocalDiscriminator() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::setLocalDiscriminator( unsigned index)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getOverriddenDecl() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::overriddenDeclsComputed() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"swift::conflicting( const OverloadSignature & sig1 , const OverloadSignature & sig2 , bool skipProtocolExtensionCheck)",30, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"swift::conflicting( ASTContext & ctx , const OverloadSignature & sig1 , CanType sig1Type , const OverloadSignature & sig2 , CanType sig2Type , bool * wouldConflictInSwift5 , bool skipProtocolExtensionCheck)",60, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"mapSignatureType( ASTContext & ctx , Type type)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"mapSignatureParamType( ASTContext & ctx , Type type)",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"mapSignatureExtInfo( AnyFunctionType :: ExtInfo info , bool topLevelFunction)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"mapSignatureFunctionType( ASTContext & ctx , Type type , bool topLevelFunction , bool isMethod , bool isInitializer , unsigned curryLevels)",48, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getOverloadSignature() const",23, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getOverloadSignatureType() const",37, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getOverriddenDecls() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::setOverriddenDecls( ArrayRef<ValueDecl*> overridden)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::isObjC() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::setIsObjC( bool value)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::isDynamic() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::setIsDynamic( bool value)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::canBeAccessedByDynamicLookup() const",26, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getSatisfiedProtocolRequirements( bool Sorted) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::isProtocolRequirement() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::hasInterfaceType() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getInterfaceType() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::setInterfaceType( Type type)",23, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::hasValidSignature() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getObjCRuntimeName( bool skipIsObjCResolution) const",27, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::canInferObjCFromRequirement( ValueDecl * requirement)",34, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getAttributeInsertionLoc( bool forModifier) const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::isUsableFromInline() const",30, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getTestableOrPrivateImportsAccess( const ValueDecl * decl)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getAdjustedFormalAccess( const ValueDecl * VD , AccessLevel access , const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getAdjustedFormalAccess( const ValueDecl * VD , const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getEffectiveAccess() const",57, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getFormalAccess() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::hasOpenAccess( const DeclContext * useDC) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getAccessScopeForFormalAccess( const ValueDecl * VD , AccessLevel formalAccess , const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",56, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::getFormalAccessScope( const DeclContext * useDC , bool treatUsableFromInlineAsPublic) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"checkAccessUsingAccessScopes( const DeclContext * useDC , const ValueDecl * VD , AccessLevel access)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"checkAccess( const DeclContext * useDC , const ValueDecl * VD , AccessLevel access , bool forConformance)",60, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::isAccessibleFrom( const DeclContext * useDC , bool forConformance) const",18, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::isSetterAccessibleFrom( const DeclContext * DC , bool forConformance) const",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ValueDecl::copyFormalAccessFrom( const ValueDecl * source , bool sourceIsParentContext)",30, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeDecl::getDeclaredInterfaceType() const",22, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeDecl::compare( const TypeDecl * type1 , const TypeDecl * type2)",40, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::isFormallyResilient() const",26, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::isResilient() const",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::isResilient( ModuleDecl * M , ResilienceExpansion expansion) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::computeType()",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"computeNominalType( NominalTypeDecl * decl , DeclTypeKind kind)",45, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::getDeclaredType() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::getDeclaredTypeInContext() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::getDeclaredInterfaceType() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::prepareExtensions()",15, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::getExtensions()",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::addExtension( ExtensionDecl * extension)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::getStoredProperties( bool skipInaccessible) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::isOptionalDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"NominalTypeDecl::getKeyPathTypeKind() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericTypeDecl::GenericTypeDecl( DeclKind K , DeclContext * DC , Identifier name , SourceLoc nameLoc , MutableArrayRef<TypeLoc> inherited , GenericParamList * GenericParams)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeAliasDecl::TypeAliasDecl( SourceLoc TypeAliasLoc , SourceLoc EqualLoc , Identifier Name , SourceLoc NameLoc , GenericParamList * GenericParams , DeclContext * DC)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeAliasDecl::getSourceRange() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeAliasDecl::setUnderlyingType( Type underlying)",29, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeAliasDecl::getUnboundGenericType() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractTypeParamDecl::getSuperclass() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractTypeParamDecl::getConformingProtocols() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericTypeParamDecl::GenericTypeParamDecl( DeclContext * dc , Identifier name , SourceLoc nameLoc , unsigned depth , unsigned index)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"GenericTypeParamDecl::getSourceRange() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AssociatedTypeDecl::AssociatedTypeDecl( DeclContext * dc , SourceLoc keywordLoc , Identifier name , SourceLoc nameLoc , TypeLoc defaultDefinition , TrailingWhereClause * trailingWhere)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AssociatedTypeDecl::AssociatedTypeDecl( DeclContext * dc , SourceLoc keywordLoc , Identifier name , SourceLoc nameLoc , TrailingWhereClause * trailingWhere , LazyMemberLoader * definitionResolver , uint64_t resolverData)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AssociatedTypeDecl::computeType()",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AssociatedTypeDecl::getDefaultDefinitionLoc()",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AssociatedTypeDecl::getSourceRange() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AssociatedTypeDecl::getOverriddenDecls() const",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getAssociatedTypeAnchor( const AssociatedTypeDecl * ATD , llvm :: SmallSet<const AssociatedTypeDecl*,8> & searched)",24, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AssociatedTypeDecl::getAssociatedTypeAnchor() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumDecl::EnumDecl( SourceLoc EnumLoc , Identifier Name , SourceLoc NameLoc , MutableArrayRef<TypeLoc> Inherited , GenericParamList * GenericParams , DeclContext * Parent)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumDecl::getRawType() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"StructDecl::StructDecl( SourceLoc StructLoc , Identifier Name , SourceLoc NameLoc , MutableArrayRef<TypeLoc> Inherited , GenericParamList * GenericParams , DeclContext * Parent)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::ClassDecl( SourceLoc ClassLoc , Identifier Name , SourceLoc NameLoc , MutableArrayRef<TypeLoc> Inherited , GenericParamList * GenericParams , DeclContext * Parent)",18, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::hasResilientMetadata() const",18, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::hasResilientMetadata( ModuleDecl * M , ResilienceExpansion expansion) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::getDestructor()",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::addImplicitDestructor()",30, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::hasMissingDesignatedInitializers() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::hasMissingVTableEntries() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::inheritsSuperclassInitializers( LazyResolver * resolver)",26, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::checkObjCAncestry() const",47, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::hasObjCMembersSlow()",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::getMetaclassKind() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"mangleObjCRuntimeName( const NominalTypeDecl * nominal , llvm :: SmallVectorImpl<char> & buffer)",14, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::getObjCRuntimeName( llvm :: SmallVectorImpl<char> & buffer) const",18, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::getArtificialMainKind() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::findOverridingDecl( const AbstractFunctionDecl * Method) const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::isOverridingDecl( const AbstractFunctionDecl * Method) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::findImplementingMethod( const AbstractFunctionDecl * Method) const",22, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumCaseDecl::create( SourceLoc CaseLoc , ArrayRef<EnumElementDecl*> Elements , DeclContext * DC)",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumDecl::getElement( Identifier Name) const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumDecl::hasPotentiallyUnavailableCaseValue() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumDecl::hasOnlyCasesWithoutAssociatedValues() const",34, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumDecl::isFormallyExhaustive( const DeclContext * useDC) const",47, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumDecl::isEffectivelyExhaustive( ModuleDecl * M , ResilienceExpansion expansion) const",15, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::ProtocolDecl( DeclContext * DC , SourceLoc ProtocolLoc , SourceLoc NameLoc , Identifier Name , MutableArrayRef<TypeLoc> Inherited , TrailingWhereClause * TrailingWhere)",18, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::getInheritedProtocols() const",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::getAssociatedTypeMembers() const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::getSuperclass() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::getSuperclassDecl() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::setSuperclass( Type superclass)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::walkInheritedProtocols( llvm :: function_ref<TypeWalker::Action(ProtocolDecl*)> fn) const",34, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::inheritsFrom( const ProtocolDecl * super) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::requiresClassSlow()",36, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::requiresSelfConformanceWitnessTable() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::existentialConformsToSelfSlow()",38, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"findProtocolSelfReferences( const ProtocolDecl * proto , Type type , bool skipAssocTypes)",78, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"findProtocolSelfReferences( const ProtocolDecl * protocol , GenericSignature * genericSig)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::findProtocolSelfReferences( const ValueDecl * value , bool allowCovariantParameters , bool skipAssocTypes) const",62, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::isAvailableInExistential( const ValueDecl * decl) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::existentialTypeSupportedSlow( LazyResolver * resolver)",41, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::getObjCRuntimeName( llvm :: SmallVectorImpl<char> & buffer) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::createGenericParamsIfMissing()",21, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::computeRequirementSignature()",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ProtocolDecl::setRequirementSignature( ArrayRef<Requirement> requirements)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::overwriteImplInfo( StorageImplInfo implInfo)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::setAccessors( StorageImplInfo implInfo , SourceLoc lbraceLoc , ArrayRef<AccessorDecl*> accessors , SourceLoc rbraceLoc)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::AccessorRecord::create( ASTContext & ctx , SourceRange braces , StorageImplInfo storageInfo , ArrayRef<AccessorDecl*> accessors)",45, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::AccessorRecord::AccessorRecord( SourceRange braces , StorageImplInfo implInfo , ArrayRef<AccessorDecl*> accessors , AccessorIndex accessorsCapacity)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::AccessorRecord::addOpaqueAccessor( AccessorDecl * decl)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::AccessorRecord::registerAccessor( AccessorDecl * decl , AccessorIndex index)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::getSetterFormalAccess() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"isAccessor( AccessorDecl * accessor , AccessorKind kind , AbstractStorageDecl * storage)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::setComputedSetter( AccessorDecl * setter)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::setSynthesizedGetter( AccessorDecl * accessor)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::setSynthesizedReadCoroutine( AccessorDecl * accessor)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::setSynthesizedSetter( AccessorDecl * accessor)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::setSynthesizedModifyCoroutine( AccessorDecl * accessor)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"getNameFromObjcAttribute( const ObjCAttr * attr , DeclName preferredName)",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::getObjCGetterSelector( Identifier preferredName) const",28, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::getObjCSetterSelector( Identifier preferredName) const",37, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::getOverrideLoc() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractStorageDecl::getValueInterfaceType() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::getType() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::setType( Type t)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::markInvalid()",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::isSettable( const DeclContext * UseDC , const DeclRefExpr * base) const",66, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::isLazilyInitializedGlobal() const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"SubscriptDecl::isSettable() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::getSourceRange() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::getTypeSourceRangeForDiagnostics() const",19, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"isVarInPattern( const VarDecl * VD , Pattern * P)",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::getParentPattern() const",33, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::isSelfParameter() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::setSpecifier( Specifier specifier)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::isAnonClosureParam() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::getCorrectStaticSpelling() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::getObjCPropertyName() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::getDefaultObjCGetterSelector( ASTContext & ctx , Identifier propertyName)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::getDefaultObjCSetterSelector( ASTContext & ctx , Identifier propertyName)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"VarDecl::emitLetToVarNoteIfSimple( DeclContext * UseDC) const",49, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ParamDecl::ParamDecl( Specifier specifier , SourceLoc specifierLoc , SourceLoc argumentNameLoc , Identifier argumentName , SourceLoc parameterNameLoc , Identifier parameterName , DeclContext * dc)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ParamDecl::ParamDecl( ParamDecl * PD , bool withTypes)",22, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"DeclContext::getSelfTypeInContext() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"DeclContext::getSelfInterfaceType() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ParamDecl::getSourceRange() const",37, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ParamDecl::getVarargBaseTy( Type VarArgT)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ParamDecl::setDefaultValue( Expr * E)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ParamDecl::setDefaultArgumentInitContext( Initializer * initContext)",4, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ParamDecl::getDefaultValueStringRepresentation( SmallVectorImpl<char> & scratch) const",29, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ParamDecl::setDefaultValueStringRepresentation( StringRef stringRepresentation)",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"DefaultArgumentInitializer::changeFunction( DeclContext * parent , ParameterList * paramList)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"isIntegralType( Type type)",26, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"SubscriptDecl::setIndices( ParameterList * p)",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"SubscriptDecl::getElementInterfaceType() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"SubscriptDecl::computeType()",15, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"SubscriptDecl::getObjCSubscriptKind() const",14, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"SubscriptDecl::getSourceRange() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"SubscriptDecl::getSignatureSourceRange() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::getEffectiveFullName() const",38, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"swift::getParameterAt( ValueDecl * source , unsigned index)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::getMethodInterfaceType() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::argumentNameIsAPIByDefault() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::getBodySourceRange() const",21, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::getSignatureSourceRange() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::getObjCSelector( DeclName preferredName , bool skipIsObjCResolution) const",146, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::isObjCInstanceMethod() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"requiresNewVTableEntry( const AbstractFunctionDecl * decl)",60, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::computeNeedsNewVTableEntry()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::getImplicitSelfDecl( bool createIfNeeded)",29, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::computeSelfDeclType()",23, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::setParameters( ParameterList * BodyParams)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::computeType( AnyFunctionType :: ExtInfo info)",67, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::hasInlinableBodyText() const",15, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AbstractFunctionDecl::getInlinableBodyText( SmallVectorImpl<char> & scratch) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::createImpl( ASTContext & Context , SourceLoc StaticLoc , StaticSpellingKind StaticSpelling , SourceLoc FuncLoc , DeclName Name , SourceLoc NameLoc , bool Throws , SourceLoc ThrowsLoc , GenericParamList * GenericParams , DeclContext * Parent , ClangNode ClangN)",26, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::createDeserialized( ASTContext & Context , SourceLoc StaticLoc , StaticSpellingKind StaticSpelling , SourceLoc FuncLoc , DeclName Name , SourceLoc NameLoc , bool Throws , SourceLoc ThrowsLoc , GenericParamList * GenericParams , DeclContext * Parent)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::create( ASTContext & Context , SourceLoc StaticLoc , StaticSpellingKind StaticSpelling , SourceLoc FuncLoc , DeclName Name , SourceLoc NameLoc , bool Throws , SourceLoc ThrowsLoc , GenericParamList * GenericParams , ParameterList * BodyParams , TypeLoc FnRetType , DeclContext * Parent , ClangNode ClangN)",17, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AccessorDecl::createImpl( ASTContext & ctx , SourceLoc declLoc , SourceLoc accessorKeywordLoc , AccessorKind accessorKind , AbstractStorageDecl * storage , SourceLoc staticLoc , StaticSpellingKind staticSpelling , bool throws , SourceLoc throwsLoc , GenericParamList * genericParams , DeclContext * parent , ClangNode clangNode)",28, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AccessorDecl::createDeserialized( ASTContext & ctx , SourceLoc declLoc , SourceLoc accessorKeywordLoc , AccessorKind accessorKind , AbstractStorageDecl * storage , SourceLoc staticLoc , StaticSpellingKind staticSpelling , bool throws , SourceLoc throwsLoc , GenericParamList * genericParams , DeclContext * parent)",15, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AccessorDecl::create( ASTContext & ctx , SourceLoc declLoc , SourceLoc accessorKeywordLoc , AccessorKind accessorKind , AbstractStorageDecl * storage , SourceLoc staticLoc , StaticSpellingKind staticSpelling , bool throws , SourceLoc throwsLoc , GenericParamList * genericParams , ParameterList * bodyParams , TypeLoc fnRetType , DeclContext * parent , ClangNode clangNode)",21, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AccessorDecl::isAssumedNonMutating() const",16, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"AccessorDecl::isExplicitNonMutating() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::getCorrectStaticSpelling() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::getResultInterfaceType() const",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::isUnaryOperator() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::isBinaryOperator() const",9, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ConstructorDecl::ConstructorDecl( DeclName Name , SourceLoc ConstructorLoc , OptionalTypeKind Failability , SourceLoc FailabilityLoc , bool Throws , SourceLoc ThrowsLoc , ParameterList * BodyParams , GenericParamList * GenericParams , DeclContext * Parent)",24, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ConstructorDecl::isObjCZeroParameterWithLongSelector() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"DestructorDecl::DestructorDecl( SourceLoc DestructorLoc , DeclContext * Parent)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"DestructorDecl::getObjCSelector() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::getSourceRange() const",37, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumElementDecl::getSourceRange() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumElementDecl::computeType()",27, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumElementDecl::getArgumentInterfaceType() const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"EnumElementDecl::getParentCase() const",11, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ConstructorDecl::getSourceRange() const",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ConstructorDecl::getResultInterfaceType() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ConstructorDecl::getInitializerInterfaceType()",20, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ConstructorDecl::getDelegatingOrChainedInitKind( DiagnosticEngine * diags , ApplyExpr ** init) const",158, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"DestructorDecl::getSourceRange() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"swift::getAssociativitySpelling( Associativity value)",8, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PrecedenceGroupDecl::create( DeclContext * dc , SourceLoc precedenceGroupLoc , SourceLoc nameLoc , Identifier name , SourceLoc lbraceLoc , SourceLoc associativityKeywordLoc , SourceLoc associativityValueLoc , Associativity associativity , SourceLoc assignmentKeywordLoc , SourceLoc assignmentValueLoc , bool isAssignment , SourceLoc higherThanLoc , ArrayRef<Relation> higherThan , SourceLoc lowerThanLoc , ArrayRef<Relation> lowerThan , SourceLoc rbraceLoc)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"PrecedenceGroupDecl::PrecedenceGroupDecl( DeclContext * dc , SourceLoc precedenceGroupLoc , SourceLoc nameLoc , Identifier name , SourceLoc lbraceLoc , SourceLoc associativityKeywordLoc , SourceLoc associativityValueLoc , Associativity associativity , SourceLoc assignmentKeywordLoc , SourceLoc assignmentValueLoc , bool isAssignment , SourceLoc higherThanLoc , ArrayRef<Relation> higherThan , SourceLoc lowerThanLoc , ArrayRef<Relation> lowerThan , SourceLoc rbraceLoc)",32, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::isDeferBody() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FuncDecl::isPotentialIBActionTarget() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeBase::getSwiftNewtypeUnderlyingType()",18, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::getSuperclass() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::getSuperclassDecl() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"ClassDecl::setSuperclass( Type superclass)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::getClangNodeImpl() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"Decl::setClangNode( ClangNode Node)",13, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"DeclTraceFormatter::traceName( const void * Entity , raw_ostream & OS) const",12, 4, 2, 0
repos/cpp/swift/lib/AST/Decl.cpp,"DeclTraceFormatter::traceLoc( const void * Entity , SourceManager * SM , clang :: SourceManager * CSM , raw_ostream & OS) const",7, 4, 2, 0
repos/cpp/swift/lib/AST/Decl.cpp,"FrontendStatsTracer::getTraceFormatter<constDecl*>()",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeOrExtensionDecl::TypeOrExtensionDecl( NominalTypeDecl * D)",1, 74, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeOrExtensionDecl::TypeOrExtensionDecl( ExtensionDecl * D)",1, 72, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeOrExtensionDecl::getAsDecl() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeOrExtensionDecl::getAsDeclContext() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeOrExtensionDecl::getBaseNominal() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"TypeOrExtensionDecl::isNull() const",1, 67, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"swift::simple_display( llvm :: raw_ostream & out , const Decl * decl)",18, 2, 0, 0
repos/cpp/swift/lib/AST/Decl.cpp,"swift::simple_display( llvm :: raw_ostream & out , const ValueDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"InheritedDeclsReferencedRequest::getTypeLoc( llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl , unsigned index) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"InheritedDeclsReferencedRequest::diagnoseCycle( DiagnosticEngine & diags) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"InheritedDeclsReferencedRequest::noteCycleStep( DiagnosticEngine & diags) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"UnderlyingTypeDeclsReferencedRequest::diagnoseCycle( DiagnosticEngine & diags) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"UnderlyingTypeDeclsReferencedRequest::noteCycleStep( DiagnosticEngine & diags) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"SuperclassDeclRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"SuperclassDeclRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"ExtendedNominalRequest::getCachedResult() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"ExtendedNominalRequest::cacheResult( NominalTypeDecl * value) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"ExtendedNominalRequest::diagnoseCycle( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"ExtendedNominalRequest::noteCycleStep( DiagnosticEngine & diags) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"SelfBoundsFromWhereClauseRequest::diagnoseCycle( DiagnosticEngine & diags) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"SelfBoundsFromWhereClauseRequest::noteCycleStep( DiagnosticEngine & diags) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"TypeDeclsFromWhereClauseRequest::diagnoseCycle( DiagnosticEngine & diags) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"TypeDeclsFromWhereClauseRequest::noteCycleStep( DiagnosticEngine & diags) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookupRequests.cpp,"swift::registerNameLookupRequestFunctions( Evaluator & evaluator)",4, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"VisibleDeclConsumer::anchor()",1, 38, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"VectorDeclConsumer::anchor()",1, 37, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"NamedDeclConsumer::anchor()",1, 36, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"LookupResultEntry::getBaseDecl() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"DebuggerClient::anchor()",1, 33, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"AccessFilteringDeclConsumer::foundDecl( ValueDecl * D , DeclVisibilityKind reason)",10, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"forAllVisibleModules( const DeclContext * DC , const Fn & fn)",7, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::removeOverriddenDecls( SmallVectorImpl<ValueDecl*> & decls)",54, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"compareConstructors( ConstructorDecl * ctor1 , ConstructorDecl * ctor2 , const swift :: ASTContext & ctx)",24, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"recordShadowedDeclsAfterSignatureMatch( ArrayRef<ValueDecl*> decls , const ModuleDecl * curModule , llvm :: SmallPtrSetImpl<ValueDecl*> & shadowed)",104, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"recordShadowDeclsAfterObjCInitMatch( ArrayRef<ConstructorDecl*> ctors , llvm :: SmallPtrSetImpl<ValueDecl*> & shadowed)",22, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"recordShadowedDecls( ArrayRef<ValueDecl*> decls , const ModuleDecl * curModule , llvm :: SmallPtrSetImpl<ValueDecl*> & shadowed)",70, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::removeShadowedDecls( SmallVectorImpl<ValueDecl*> & decls , const ModuleDecl * curModule)",51, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"matchDiscriminator( Identifier discriminator , const ValueDecl * value)",15, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"matchDiscriminator( Identifier discriminator , LookupResultEntry lookupResult)",4, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"filterForDiscriminator( SmallVectorImpl<Result> & results , DebuggerClient * debugClient)",24, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"recordLookupOfTopLevelName( DeclContext * topLevelContext , DeclName name , bool isCascading)",11, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"getLocalDeclVisibilityKind( const ASTScope * scope)",40, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"SelfBoundsFromWhereClauseRequest::evaluate( Evaluator & evaluator , llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl) const",53, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::getSelfBoundsFromWhereClause( llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl)",9, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"populateLookupDeclsFromContext( DeclContext * dc , SmallVectorImpl<NominalTypeDecl*> & lookupDecls)",17, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"TypeDeclsFromWhereClauseRequest::evaluate( Evaluator & evaluator , ExtensionDecl * ext) const",35, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"shouldLookupMembers( D * decl , SourceLoc loc)",28, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"UnqualifiedLookup::UnqualifiedLookup( DeclName Name , DeclContext * DC , LazyResolver * TypeResolver , SourceLoc Loc , Options options)",499, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"UnqualifiedLookup::getSingleTypeResult()",5, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"LazyMemberLoader::anchor()",1, 35, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"LazyConformanceLoader::anchor()",1, 40, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::MemberLookupTable::begin()",1, 46, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::MemberLookupTable::end()",1, 42, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::MemberLookupTable::find( DeclName name)",3, 4, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::MemberLookupTable::dump( llvm :: raw_ostream & os) const",18, 4, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::MemberLookupTable::LLVM_ATTRIBUTE_DEPRECATED( void dump() const LLVM_ATTRIBUTE_USED , "only for use within the debugger")",4, 4, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::MemberLookupTable::clear()",11, 4, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::MemberLookupTable::operator new( size_t Bytes , ASTContext & C , unsigned Alignment = alignof(MemberLookupTable))",4, 4, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::MemberLookupTable::operator new( size_t Bytes , void * Mem)",4, 4, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"ClassDecl::ObjCMethodLookupTable::operator new( size_t Bytes , ASTContext & C , unsigned Alignment = alignof(MemberLookupTable))",4, 4, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"ClassDecl::ObjCMethodLookupTable::operator new( size_t Bytes , void * Mem)",4, 4, 2, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"MemberLookupTable::MemberLookupTable( ASTContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"MemberLookupTable::addMember( Decl * member)",28, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"MemberLookupTable::addMembers( DeclRange members)",5, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"MemberLookupTable::updateLookupTable( NominalTypeDecl * nominal)",15, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"NominalTypeDecl::addedMember( Decl * member)",6, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"NominalTypeDecl::addedExtension( ExtensionDecl * ext)",4, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"ExtensionDecl::addedMember( Decl * member)",17, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"populateLookupTableEntryFromLazyIDCLoader( ASTContext & ctx , MemberLookupTable & LookupTable , DeclName name , IterableDeclContext * IDC)",28, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"populateLookupTableEntryFromCurrentMembersWithoutLoading( ASTContext & ctx , MemberLookupTable & LookupTable , DeclName name , IterableDeclContext * IDC)",11, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"populateLookupTableEntryFromExtensions( ASTContext & ctx , MemberLookupTable & table , NominalTypeDecl * nominal , DeclName name , bool ignoreNewExtensions)",20, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"NominalTypeDecl::isLookupTablePopulated() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"NominalTypeDecl::setLookupTablePopulated( bool value)",3, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"NominalTypeDecl::prepareLookupTable( bool ignoreNewExtensions)",41, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"NominalTypeDecl::makeMemberVisible( ValueDecl * member)",8, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"maybeFilterOutAttrImplements( TinyPtrVector<ValueDecl*> decls , DeclName name , bool includeAttrImplements)",19, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"NominalTypeDecl::lookupDirect( DeclName name , OptionSet<LookupDirectFlags> flags)",102, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"ClassDecl::createObjCMethodLookup()",11, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"ClassDecl::lookupDirect( ObjCSelector selector , bool isInstance)",17, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"ClassDecl::recordObjCMethod( AbstractFunctionDecl * method , ObjCSelector selector)",29, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"configureLookup( const DeclContext * dc , NLOptions & options , ReferencedNameTracker * & tracker , bool & isLookupCascading)",45, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"isAcceptableLookupResult( const DeclContext * dc , NLOptions options , ValueDecl * decl , bool onlyCompleteObjectInits)",27, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"finishLookup( const DeclContext * dc , NLOptions options , SmallVectorImpl<ValueDecl*> & decls)",17, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"extractDirectlyReferencedNominalTypes( Type type , SmallVectorImpl<NominalTypeDecl*> & decls)",46, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"DeclContext::lookupQualified( Type type , DeclName member , NLOptions options , LazyResolver * typeResolver , SmallVectorImpl<ValueDecl*> & decls) const",22, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"DeclContext::lookupQualified( ArrayRef<NominalTypeDecl*> typeDecls , DeclName member , NLOptions options , SmallVectorImpl<ValueDecl*> & decls) const",131, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"DeclContext::lookupQualified( ModuleDecl * module , DeclName member , NLOptions options , SmallVectorImpl<ValueDecl*> & decls) const",51, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"DeclContext::lookupAnyObject( DeclName member , NLOptions options , SmallVectorImpl<ValueDecl*> & decls) const",54, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"DeclContext::lookupAllObjCMethods( ObjCSelector selector , SmallVectorImpl<AbstractFunctionDecl*> & results) const",17, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"resolveTypeDeclsToNominal( Evaluator & evaluator , ASTContext & ctx , ArrayRef<TypeDecl*> typeDecls , SmallVectorImpl<ModuleDecl*> & modulesFound , bool & anyObject , llvm :: SmallPtrSetImpl<TypeAliasDecl*> & typealiases)",68, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"resolveTypeDeclsToNominal( Evaluator & evaluator , ASTContext & ctx , ArrayRef<TypeDecl*> typeDecls , SmallVectorImpl<ModuleDecl*> & modulesFound , bool & anyObject)",9, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"directReferencesForUnqualifiedTypeLookup( ASTContext & ctx , DeclName name , SourceLoc loc , DeclContext * dc)",12, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"directReferencesForQualifiedTypeLookup( Evaluator & evaluator , ASTContext & ctx , ArrayRef<TypeDecl*> baseTypes , DeclName name , DeclContext * dc)",42, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"directReferencesForIdentTypeRepr( Evaluator & evaluator , ASTContext & ctx , IdentTypeRepr * ident , DeclContext * dc)",39, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"directReferencesForTypeRepr( Evaluator & evaluator , ASTContext & ctx , TypeRepr * typeRepr , DeclContext * dc)",63, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"directReferencesForType( Type type)",28, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"InheritedDeclsReferencedRequest::evaluate( Evaluator & evaluator , llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl , unsigned index) const",28, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"UnderlyingTypeDeclsReferencedRequest::evaluate( Evaluator & evaluator , TypeAliasDecl * typealias) const",18, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"SuperclassDeclRequest::evaluate( Evaluator & evaluator , NominalTypeDecl * subject) const",35, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"ExtendedNominalRequest::evaluate( Evaluator & evaluator , ExtensionDecl * ext) const",24, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::getDirectlyInheritedNominalTypeDecls( llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl , unsigned i , llvm :: SmallVectorImpl<std::pair<SourceLoc,NominalTypeDecl*>> & result , bool & anyObject)",35, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"swift::getDirectlyInheritedNominalTypeDecls( llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl , bool & anyObject)",29, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::checkPattern( const Pattern * Pat , DeclVisibilityKind Reason)",36, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::checkParameterList( const ParameterList * params)",5, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::checkGenericParams( GenericParamList * Params)",7, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::checkSourceFile( const SourceFile & SF)",5, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::checkStmtCondition( const StmtCondition & Cond)",12, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitIfStmt( IfStmt * S)",13, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitGuardStmt( GuardStmt * S)",10, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitWhileStmt( WhileStmt * S)",7, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitRepeatWhileStmt( RepeatWhileStmt * S)",3, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitDoStmt( DoStmt * S)",3, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitForEachStmt( ForEachStmt * S)",7, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitBraceStmt( BraceStmt * S , bool isTopLevelCode)",20, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitSwitchStmt( SwitchStmt * S)",7, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitCaseStmt( CaseStmt * S)",20, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitDoCatchStmt( DoCatchStmt * S)",6, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitCatchClauses( ArrayRef<CatchStmt*> clauses)",6, 2, 0, 0
repos/cpp/swift/lib/AST/NameLookup.cpp,"FindLocalVal::visitCatchStmt( CatchStmt * S)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::getActiveContinuation() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::getHistoricalContinuation() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::addActiveContinuation( const ASTScope * newContinuation) const",39, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::removeActiveContinuation() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::clearActiveContinuation() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::ASTScope( const ASTScope * parent , ArrayRef<ASTScope*> children)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"shouldSkipBraceStmtElement( ASTNode element)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"hasAccessors( AbstractStorageDecl * asd)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::expand() const",409, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::isExpanded() const",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::createRoot( SourceFile * sourceFile)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"getParameter( AbstractFunctionDecl * func , unsigned listIndex , unsigned paramIndex)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"findNextParameter( AbstractFunctionDecl * func , unsigned listIndex , unsigned paramIndex)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"parentDirectDescendedFromAbstractStorageDecl( const ASTScope * parent , const AbstractStorageDecl * decl)",43, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"parentDirectDescendedFromAbstractFunctionDecl( const ASTScope * parent , const AbstractFunctionDecl * decl)",43, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"parentDirectDescendedFromTypeDecl( const ASTScope * parent , const TypeDecl * decl)",42, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::createIfNeeded( const ASTScope * parent , Decl * decl)",218, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::createIfNeeded( const ASTScope * parent , Stmt * stmt)",75, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"findClosures( Expr * expr , SmallVectorImpl<ClosureExpr*> & closures)",40, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::createIfNeeded( const ASTScope * parent , Expr * expr)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::createIfNeeded( const ASTScope * parent , ArrayRef<Expr*> exprs)",21, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::createIfNeeded( const ASTScope * parent , ASTNode node)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::canStealContinuation() const",52, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::enumerateContinuationScopes( llvm :: function_ref<bool(ASTScope*)> addChild) const",51, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::getASTContext() const",56, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::getSourceFileScope() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::getSourceFile() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::getSourceRangeImpl() const",258, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::findInnermostEnclosingScope( SourceLoc loc) const",43, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::getDeclContext() const",64, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::getInnermostEnclosingDeclContext() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::getLocalBindings() const",113, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::expandAll() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::print( llvm :: raw_ostream & out , unsigned level , bool lastChild , bool printChildren) const",252, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTScope.cpp,"ASTScope::operator new( size_t bytes , const ASTContext & ctx , unsigned alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::ConformanceSource::getDeclContext() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::ConformanceEntry::getProtocol() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::ConformanceEntry::operator new( size_t Bytes , ASTContext & C , unsigned Alignment)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::ConformanceEntry::markSupersededBy( ConformanceLookupTable & table , ConformanceEntry * entry , bool diagnose)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::ConformanceEntry::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::ConformanceEntry::dump( raw_ostream & os , unsigned indent) const",40, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::operator new( size_t Bytes , ASTContext & C , unsigned Alignment)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::ConformanceLookupTable( ASTContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::destroy()",3, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::forEachInStage( ConformanceStage stage , NominalTypeDecl * nominal , NominalFunc nominalFunc , ExtensionFunc extensionFunc)",64, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::inheritConformances( ClassDecl * classDecl , ClassDecl * superclassDecl , ExtensionDecl * superclassExt)",54, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::updateLookupTable( NominalTypeDecl * nominal , ConformanceStage stage)",129, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::loadAllConformances( DeclContext * dc , ArrayRef<ProtocolConformance*> conformances)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::addProtocol( ProtocolDecl * protocol , SourceLoc loc , ConformanceSource source)",54, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::addInheritedProtocols( llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl , ConformanceSource source)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::expandImpliedConformances( NominalTypeDecl * nominal , DeclContext * dc)",33, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"isReplaceable( ConformanceEntryKind kind)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::compareConformances( ConformanceEntry * lhs , ConformanceEntry * rhs , bool & diagnoseSuperseded)",149, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::resolveConformances( ProtocolDecl * protocol)",61, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::getConformingContext( NominalTypeDecl * nominal , ConformanceEntry * entry)",41, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::getConformance( NominalTypeDecl * nominal , ConformanceEntry * entry)",105, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::addSynthesizedConformance( NominalTypeDecl * nominal , ProtocolDecl * protocol)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::registerProtocolConformance( ProtocolConformance * conformance , bool synthesized)",39, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::lookupConformance( ModuleDecl * module , NominalTypeDecl * nominal , ProtocolDecl * protocol , SmallVectorImpl<ProtocolConformance*> & conformances)",29, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::lookupConformances( NominalTypeDecl * nominal , DeclContext * dc , ConformanceLookupKind lookupKind , SmallVectorImpl<ProtocolDecl*> * protocols , SmallVectorImpl<ProtocolConformance*> * conformances , SmallVectorImpl<ConformanceDiagnostic> * diagnostics)",69, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::getAllProtocols( NominalTypeDecl * nominal , SmallVectorImpl<ProtocolDecl*> & scratch)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::compareProtocolConformances( ProtocolConformance * const * lhsPtr , ProtocolConformance * const * rhsPtr)",35, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::getAllConformances( NominalTypeDecl * nominal , bool sorted , SmallVectorImpl<ProtocolConformance*> & scratch)",21, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::getImplicitProtocols( NominalTypeDecl * nominal , SmallVectorImpl<ProtocolDecl*> & protocols)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::getSatisfiedProtocolRequirementsForMember( const ValueDecl * member , NominalTypeDecl * nominal , bool sorted)",41, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ConformanceLookupTable.cpp,"ConformanceLookupTable::dump( raw_ostream & os) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintOptions::setBaseType( Type T)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintOptions::initForSynthesizedExtension( TypeOrExtensionDecl D)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintOptions::clearSynthesizedExtension()",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"isPublicOrUsableFromInline( const ValueDecl * VD)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"isPublicOrUsableFromInline( Type ty)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"contributesToParentTypeStorage( const AbstractStorageDecl * ASD)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintOptions::printParseableInterfaceFile()",89, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeTransformContext::TypeTransformContext( Type T)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeTransformContext::TypeTransformContext( TypeOrExtensionDecl D)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeTransformContext::getDecl() const",1, 75, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeTransformContext::getDeclContext() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeTransformContext::getBaseType() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeTransformContext::isPrintingSynthesizedExtension() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::sanitizeUtf8( StringRef Text)",24, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::findConformancesWithDocComment( ValueDecl * VD)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::anchor()",1, 29, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::printIndent()",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::printTextImpl( StringRef Text)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::printTypeRef( Type T , const TypeDecl * RefTo , Identifier Name)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::printModuleRef( ModuleEntity Mod , Identifier Name)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::callPrintDeclPre( const Decl * D , Optional<BracketOptions> Bracket)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::operator < <( unsigned long long N)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::operator < <( UUID UU)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::operator < <( DeclName name)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"swift::operator < <( llvm :: raw_ostream & OS , tok keyword)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"swift::getKeywordLen( tok keyword)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"swift::getCodePlaceholder()",1, 61, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"operator < <( ASTPrinter & printer , tok keyword)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"escapeKeywordInContext( StringRef keyword , PrintNameContext context)",20, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ASTPrinter::printName( Identifier Name , PrintNameContext Context)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"StreamPrinter::printText( StringRef Text)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"willUseTypeReprPrinting( TypeLoc tyLoc , Type currentType , PrintOptions options)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::IndentRAII::IndentRAII( PrintAST & self , bool DoIndent = true)",5, 6, 4, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::IndentRAII::~IndentRAII()",4, 6, 4, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::indent()",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::recordDeclLoc( Decl * decl , const FnTy & NameFn , llvm :: function_ref<void()> ParamFn = [ ] { })",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printSourceRange( CharSourceRange Range , ASTContext & Ctx)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printClangDocumentationComment( const clang :: Decl * D)",26, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printRawComment( RawComment RC)",17, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printSwiftDocumentationComment( const Decl * D)",16, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printDocumentationComment( const Decl * D)",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printStaticKeyword( StaticSpellingKind StaticSpelling)",12, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printAccess( AccessLevel access , StringRef suffix = "")",22, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printAccess( const ValueDecl * D)",22, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printTypeWithOptions( Type T , PrintOptions options)",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printType( Type T)",1, 63, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printTransformedTypeWithOptions( Type T , PrintOptions options)",26, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printTransformedType( Type T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printTypeLocWithOptions( const TypeLoc & TL , PrintOptions options)",16, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printTypeLoc( const TypeLoc & TL)",1, 81, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printTypeLocForImplicitlyUnwrappedOptional( TypeLoc TL)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printContextIfNeeded( const Decl * decl)",21, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::PrintAST( ASTPrinter & Printer , const PrintOptions & Options)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visit( Decl * D)",58, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"getCorrectStaticSpelling( const Decl * D)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"hasMutatingGetter( const AbstractStorageDecl * ASD)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"hasNonMutatingSetter( const AbstractStorageDecl * ASD)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"hasLessAccessibleSetter( const AbstractStorageDecl * ASD)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printAttributes( const Decl * D)",60, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printTypedPattern( const TypedPattern * TP)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printPattern( const Pattern * pattern)",85, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"getDepthOfType( Type ty)",31, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"bestRequirementPrintLocation( ProtocolDecl * proto , const Requirement & req)",84, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printInheritedFromRequirementSignature( ProtocolDecl * proto , Decl * attachingTo)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printWhereClauseFromRequirementSignature( ProtocolDecl * proto , Decl * attachingTo)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printTrailingWhereClause( TrailingWhereClause * whereClause)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"getDepthOfRequirement( const Requirement & req)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"getRequirementsAtDepth( const GenericSignature * genericSig , unsigned depth , SmallVectorImpl<Requirement> & result)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printGenericSignature( const GenericSignature * genericSig , unsigned flags)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printGenericSignature( const GenericSignature * genericSig , unsigned flags , llvm :: function_ref<bool(const Requirement&)> filter)",47, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printSingleDepthOfGenericSignature( TypeArrayView<GenericTypeParamType> genericParams , ArrayRef<Requirement> requirements , unsigned flags , llvm :: function_ref<bool(const Requirement&)> filter)",120, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printRequirement( const Requirement & req)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::shouldPrintPattern( const Pattern * P)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printPatternType( const Pattern * P)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ShouldPrintChecker::shouldPrint( const Pattern * P , const PrintOptions & Options)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ShouldPrintChecker::shouldPrint( const Decl * D , const PrintOptions & Options)",113, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::shouldPrint( const Decl * D , bool Notify)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printBraceStmt( const BraceStmt * stmt , bool newlineIfEmpty)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printBodyIfNecessary( const AbstractFunctionDecl * decl)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"getAccessorLabel( AccessorDecl * accessor)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printMutatingModifiersIfNeeded( const AccessorDecl * accessor)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printAccessors( const AbstractStorageDecl * ASD)",189, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printMembersOfDecl( Decl * D , bool needComma , bool openBracket , bool closeBracket)",28, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printMembers( ArrayRef<Decl*> members , bool needComma , bool openBracket , bool closeBracket)",30, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printGenericDeclGenericParams( GenericContext * decl)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printGenericDeclGenericRequirements( GenericContext * decl)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printInherited( const Decl * decl)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"getModuleEntities( const clang :: Module * ClangMod , SmallVectorImpl<ModuleEntity> & ModuleEnts)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"getModuleEntities( ImportDecl * Import , SmallVectorImpl<ModuleEntity> & ModuleEnts)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitImportDecl( ImportDecl * decl)",45, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"printExtendedTypeName( Type ExtendedType , ASTPrinter & Printer , PrintOptions Options)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printSynthesizedExtension( Type ExtendedType , ExtensionDecl * ExtDecl)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printExtension( ExtensionDecl * decl)",34, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitExtensionDecl( ExtensionDecl * decl)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitPatternBindingDecl( PatternBindingDecl * decl)",68, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitTopLevelCodeDecl( TopLevelCodeDecl * decl)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitIfConfigDecl( IfConfigDecl * ICD)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitPoundDiagnosticDecl( PoundDiagnosticDecl * PDD)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitTypeAliasDecl( TypeAliasDecl * decl)",26, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitGenericTypeParamDecl( GenericTypeParamDecl * decl)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitAssociatedTypeDecl( AssociatedTypeDecl * decl)",32, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitEnumDecl( EnumDecl * decl)",27, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitStructDecl( StructDecl * decl)",27, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitClassDecl( ClassDecl * decl)",29, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitProtocolDecl( ProtocolDecl * decl)",41, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"isStructOrClassContext( DeclContext * dc)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"printParameterFlags( ASTPrinter & printer , PrintOptions options , ParameterTypeFlags flags)",22, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitVarDecl( VarDecl * decl)",50, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitParamDecl( ParamDecl * decl)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printOneParameter( const ParamDecl * param , ParameterTypeFlags paramFlags , bool ArgNameIsAPIByDefault)",108, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printParameterList( ParameterList * PL , ArrayRef<AnyFunctionType::Param> params , bool isAPINameByDefault)",16, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printFunctionParameters( AbstractFunctionDecl * AFD)",28, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printASTNodes( const ArrayRef<ASTNode> & Elements , bool NeedIndent)",20, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitAccessorDecl( AccessorDecl * decl)",35, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitFuncDecl( FuncDecl * decl)",71, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::printEnumElement( EnumElementDecl * elt)",55, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitEnumCaseDecl( EnumCaseDecl * decl)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitEnumElementDecl( EnumElementDecl * decl)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitSubscriptDecl( SubscriptDecl * decl)",31, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitConstructorDecl( ConstructorDecl * decl)",55, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitDestructorDecl( DestructorDecl * decl)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitInfixOperatorDecl( InfixOperatorDecl * decl)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitPrecedenceGroupDecl( PrecedenceGroupDecl * decl)",62, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitPrefixOperatorDecl( PrefixOperatorDecl * decl)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitPostfixOperatorDecl( PostfixOperatorDecl * decl)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitModuleDecl( ModuleDecl * decl)",1, 53, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitMissingMemberDecl( MissingMemberDecl * decl)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitBraceStmt( BraceStmt * stmt)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitReturnStmt( ReturnStmt * stmt)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitYieldStmt( YieldStmt * stmt)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitThrowStmt( ThrowStmt * stmt)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitPoundAssertStmt( PoundAssertStmt * stmt)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitDeferStmt( DeferStmt * stmt)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitIfStmt( IfStmt * stmt)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitGuardStmt( GuardStmt * stmt)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitWhileStmt( WhileStmt * stmt)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitRepeatWhileStmt( RepeatWhileStmt * stmt)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitDoStmt( DoStmt * stmt)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitDoCatchStmt( DoCatchStmt * stmt)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitCatchStmt( CatchStmt * stmt)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitForEachStmt( ForEachStmt * stmt)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitBreakStmt( BreakStmt * stmt)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitContinueStmt( ContinueStmt * stmt)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitFallthroughStmt( FallthroughStmt * stmt)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitSwitchStmt( SwitchStmt * stmt)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitCaseStmt( CaseStmt * CS)",24, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"PrintAST::visitFailStmt( FailStmt * stmt)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Decl::print( raw_ostream & os) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Decl::print( raw_ostream & OS , const PrintOptions & Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Decl::print( ASTPrinter & Printer , const PrintOptions & Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Decl::shouldPrintInContext( const PrintOptions & PO) const",42, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Pattern::print( llvm :: raw_ostream & OS , const PrintOptions & Options) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printGenericArgs( ArrayRef<Type> Args)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printWithParensIfNotSimple( Type T)",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printModuleContext( T * Ty)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printTypeDeclName( T * Ty)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::isLLDBExpressionModule( ModuleDecl * M)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::shouldPrintFullyQualified( TypeBase * T)",36, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::TypePrinter( ASTPrinter & Printer , const PrintOptions & PO)",2, 41, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visit( Type T)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitErrorType( ErrorType * T)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitUnresolvedType( UnresolvedType * T)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBuiltinRawPointerType( BuiltinRawPointerType * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBuiltinNativeObjectType( BuiltinNativeObjectType * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBuiltinUnknownObjectType( BuiltinUnknownObjectType * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBuiltinBridgeObjectType( BuiltinBridgeObjectType * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBuiltinUnsafeValueBufferType( BuiltinUnsafeValueBufferType * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBuiltinIntegerLiteralType( BuiltinIntegerLiteralType * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBuiltinVectorType( BuiltinVectorType * T)",17, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBuiltinIntegerType( BuiltinIntegerType * T)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBuiltinFloatType( BuiltinFloatType * T)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitSILTokenType( SILTokenType * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitNameAliasType( NameAliasType * T)",14, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitParenType( ParenType * T)",6, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitTupleType( TupleType * T)",32, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitUnboundGenericType( UnboundGenericType * T)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitBoundGenericType( BoundGenericType * T)",34, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitParentType( Type T)",9, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitEnumType( EnumType * T)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitStructType( StructType * T)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitClassType( ClassType * T)",10, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitAnyMetatypeType( AnyMetatypeType * T)",18, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitModuleType( ModuleType * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitDynamicSelfType( DynamicSelfType * T)",21, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printFunctionExtInfo( AnyFunctionType :: ExtInfo info)",42, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printFunctionExtInfo( SILFunctionType :: ExtInfo info , Optional<ProtocolConformanceRef> witnessMethodConformance)",51, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitAnyFunctionTypeParams( ArrayRef<AnyFunctionType::Param> Params , bool printLabels)",28, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitFunctionType( FunctionType * T)",20, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printGenericSignature( const GenericSignature * genericSig , unsigned flags)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitGenericFunctionType( GenericFunctionType * T)",22, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printSILCoroutineKind( SILCoroutineKind kind)",13, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printCalleeConvention( ParameterConvention conv)",19, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitSILFunctionType( SILFunctionType * T)",48, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitSILBlockStorageType( SILBlockStorageType * T)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitSILBoxType( SILBoxType * T)",42, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitArraySliceType( ArraySliceType * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitDictionaryType( DictionaryType * T)",7, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitOptionalType( OptionalType * T)",16, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitProtocolType( ProtocolType * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitProtocolCompositionType( ProtocolCompositionType * T)",13, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitLValueType( LValueType * T)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitInOutType( InOutType * T)",4, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitOpenedArchetypeType( OpenedArchetypeType * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::printArchetypeCommon( ArchetypeType * T)",19, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitNestedArchetypeType( NestedArchetypeType * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitPrimaryArchetypeType( PrimaryArchetypeType * T)",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitGenericTypeParamType( GenericTypeParamType * T)",33, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitDependentMemberType( DependentMemberType * T)",5, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypePrinter::visitTypeVariableType( TypeVariableType * T)",8, 4, 2, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Type::print( raw_ostream & OS , const PrintOptions & PO) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Type::print( ASTPrinter & Printer , const PrintOptions & PO) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"AnyFunctionType::printParams( raw_ostream & OS , const PrintOptions & PO) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"AnyFunctionType::printParams( ASTPrinter & Printer , const PrintOptions & PO) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"LayoutConstraintInfo::print( raw_ostream & OS , const PrintOptions & PO) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"LayoutConstraint::print( raw_ostream & OS , const PrintOptions & PO) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"LayoutConstraintInfo::print( ASTPrinter & Printer , const PrintOptions & PO) const",21, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"GenericSignature::print( raw_ostream & OS , PrintOptions Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"GenericSignature::print( ASTPrinter & Printer , PrintOptions Opts) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"GenericSignature::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Requirement::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Requirement::dump( raw_ostream & out) const",23, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Requirement::print( raw_ostream & os , const PrintOptions & opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Requirement::print( ASTPrinter & printer , const PrintOptions & opts) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"GenericSignature::getAsString() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"getStringForParameterConvention( ParameterConvention conv)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"swift::getCheckedCastKindName( CheckedCastKind kind)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"SILParameterInfo::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"SILParameterInfo::print( raw_ostream & OS , const PrintOptions & Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"SILParameterInfo::print( ASTPrinter & Printer , const PrintOptions & Opts) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"getStringForResultConvention( ResultConvention conv)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"SILResultInfo::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"SILResultInfo::print( raw_ostream & OS , const PrintOptions & Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"SILResultInfo::print( ASTPrinter & Printer , const PrintOptions & Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Type::getString( const PrintOptions & PO) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeBase::getString( const PrintOptions & PO) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"Type::getStringAsComponent( const PrintOptions & PO) const",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeBase::getStringAsComponent( const PrintOptions & PO) const",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeBase::dumpPrint() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeBase::print( raw_ostream & OS , const PrintOptions & PO) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"TypeBase::print( ASTPrinter & Printer , const PrintOptions & PO) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"LayoutConstraint::getString( const PrintOptions & PO) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"LayoutConstraintInfo::getString( const PrintOptions & PO) const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"ProtocolConformance::printName( llvm :: raw_ostream & os , const PrintOptions & PO) const",51, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"swift::printEnumElementsAsCases( llvm :: DenseSet<EnumElementDecl*> & UnhandledElements , llvm :: raw_ostream & OS)",41, 2, 0, 0
repos/cpp/swift/lib/AST/ASTPrinter.cpp,"swift::getInheritedForPrinting( const Decl * decl , llvm :: function_ref<bool(const Decl*)> shouldPrint , llvm :: SmallVectorImpl<TypeLoc> & Results)",40, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::TypeRefinementContext( ASTContext & Ctx , IntroNode Node , TypeRefinementContext * Parent , SourceRange SrcRange , const AvailabilityContext & Info)",12, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::createRoot( SourceFile * SF , const AvailabilityContext & Info)",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::createForDecl( ASTContext & Ctx , Decl * D , TypeRefinementContext * Parent , const AvailabilityContext & Info , SourceRange SrcRange)",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::createForIfStmtThen( ASTContext & Ctx , IfStmt * S , TypeRefinementContext * Parent , const AvailabilityContext & Info)",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::createForIfStmtElse( ASTContext & Ctx , IfStmt * S , TypeRefinementContext * Parent , const AvailabilityContext & Info)",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::createForConditionFollowingQuery( ASTContext & Ctx , PoundAvailableInfo * PAI , const StmtConditionElement & LastElement , TypeRefinementContext * Parent , const AvailabilityContext & Info)",11, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::createForGuardStmtFallthrough( ASTContext & Ctx , GuardStmt * RS , BraceStmt * ContainingBraceStmt , TypeRefinementContext * Parent , const AvailabilityContext & Info)",13, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::createForGuardStmtElse( ASTContext & Ctx , GuardStmt * RS , TypeRefinementContext * Parent , const AvailabilityContext & Info)",9, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::createForWhileStmtBody( ASTContext & Ctx , WhileStmt * S , TypeRefinementContext * Parent , const AvailabilityContext & Info)",8, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::operator new( size_t Bytes , ASTContext & C , unsigned Alignment)",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::findMostRefinedSubContext( SourceLoc Loc , SourceManager & SM)",19, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::dump( SourceManager & SrcMgr) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::dump( raw_ostream & OS , SourceManager & SrcMgr) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::getIntroductionLoc() const",26, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"getAvailabilityConditionVersionSourceRange( const PoundAvailableInfo * PAI , PlatformKind Platform , const llvm :: VersionTuple & Version)",17, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"getAvailabilityConditionVersionSourceRange( const MutableArrayRef<StmtConditionElement> & Conds , PlatformKind Platform , const llvm :: VersionTuple & Version)",18, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"getAvailabilityConditionVersionSourceRange( const DeclAttributes & DeclAttrs , PlatformKind Platform , const llvm :: VersionTuple & Version)",20, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::getAvailabilityConditionVersionSourceRange( PlatformKind Platform , const llvm :: VersionTuple & Version) const",32, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::print( raw_ostream & OS , SourceManager & SrcMgr , unsigned Indent) const",30, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::getReason() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/TypeRefinementContext.cpp,"TypeRefinementContext::getReasonName( Reason R)",29, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::Storage::Storage( GenericSignature * genericSig , ArrayRef<Type> replacementTypes , ArrayRef<ProtocolConformanceRef> conformances)",16, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::SubstitutionMap( GenericSignature * genericSig , ArrayRef<Type> replacementTypes , ArrayRef<ProtocolConformanceRef> conformances)",5, 74, 3, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getReplacementTypesBuffer() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getReplacementTypesBuffer()",3, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getConformancesBuffer()",4, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getConformances() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getReplacementTypes() const",14, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getGenericSignature() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::empty() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::hasAnySubstitutableParams() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::hasArchetypes() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::hasOpenedExistential() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::hasDynamicSelf() const",7, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::isCanonical() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getCanonical() const",21, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::get( GenericSignature * genericSig , SubstitutionMap substitutions)",15, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::get( GenericSignature * genericSig , TypeSubstitutionFn subs , LookupConformanceFn lookupConformance)",41, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::lookupSubstitution( CanSubstitutableType type) const",70, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::lookupConformance( CanType type , ProtocolDecl * proto) const",131, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::mapReplacementTypesOutOfContext() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::subst( SubstitutionMap subMap) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::subst( TypeSubstitutionFn subs , LookupConformanceFn conformances) const",43, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getProtocolSubstitutions( ProtocolDecl * protocol , Type selfType , ProtocolConformanceRef conformance)",25, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getOverrideSubstitutions( const ValueDecl * baseDecl , const ValueDecl * derivedDecl , Optional<SubstitutionMap> derivedSubs)",29, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::getOverrideSubstitutions( const ClassDecl * baseClass , const ClassDecl * derivedClass , GenericSignature * baseSig , GenericSignature * derivedSig , Optional<SubstitutionMap> derivedSubs)",44, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::combineSubstitutionMaps( SubstitutionMap firstSubMap , SubstitutionMap secondSubMap , CombineSubstitutionMaps how , unsigned firstDepthOrIndex , unsigned secondDepthOrIndex , GenericSignature * genericSig)",47, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::verify() const",56, 2, 0, 0
repos/cpp/swift/lib/AST/SubstitutionMap.cpp,"SubstitutionMap::profile( llvm :: FoldingSetNodeID & id) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ModuleLoader::anchor()",1, 31, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ClangModuleLoader::anchor()",1, 36, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"swift::getProtocolName( KnownProtocolKind kind)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::Implementation::Arena::~Arena()",19, 6, 4, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::Implementation::ConstraintSolverArena::ConstraintSolverArena( llvm :: BumpPtrAllocator & allocator)",2, 33, 4, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::Implementation::getArena( AllocationArena arena)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::Implementation::Implementation()",3, 51, 6, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::Implementation::~Implementation()",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ConstraintCheckerArenaRAII::ConstraintCheckerArenaRAII( ASTContext & self , llvm :: BumpPtrAllocator & allocator)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ConstraintCheckerArenaRAII::~ConstraintCheckerArenaRAII()",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"createBuiltinModule( ASTContext & ctx)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getImpl() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::operator delete( void * Data)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::get( LangOptions & langOpts , SearchPathOptions & SearchPathOpts , SourceManager & SourceMgr , DiagnosticEngine & Diags)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::ASTContext( LangOptions & langOpts , SearchPathOptions & SearchPathOpts , SourceManager & SourceMgr , DiagnosticEngine & Diags)",60, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::~ASTContext()",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getAllocator( AllocationArena arena) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::setStatsReporter( UnifiedStatsReporter * stats)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getSyntaxArena() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getLazyResolver() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::setLazyResolver( LazyResolver * resolver)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::addLazyParser( LazyMemberParser * lazyParser)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::removeLazyParser( LazyMemberParser * lazyParser)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getIdentifier( StringRef Str) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::lookupInSwiftModule( StringRef name , SmallVectorImpl<ValueDecl*> & results) const",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"findStdlibType( const ASTContext & ctx , StringRef name , unsigned genericParams)",16, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getPlusFunctionOnRangeReplaceableCollection() const",22, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getPlusFunctionOnString() const",30, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getExceptionType() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getErrorDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getOptionalSomeDecl() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getOptionalNoneDecl() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"getPointeeProperty( VarDecl * & cache , NominalTypeDecl *(ASTContext::*getNominal)() const , const ASTContext & ctx)",26, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getPointerPointeePropertyDecl( PointerTypeKind ptrKind) const",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getAnyObjectType() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getNeverType() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getVoidDecl() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getObjCBoolDecl() const",20, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getProtocol( KnownProtocolKind kind) const",39, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"findLibraryIntrinsic( const ASTContext & ctx , StringRef name)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"getIntrinsicCandidateType( FuncDecl * fn , bool allowTypeMembers)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"isBuiltinInt1Type( Type type)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"isBuiltinWordType( Type type)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"lookupOperatorFunc( const ASTContext & ctx , StringRef oper , Type contextType , llvm :: function_ref<bool(FunctionType*)> pred)",29, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getBoolBuiltinInitDecl() const",22, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getEqualIntDecl() const",20, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getHashValueForDecl() const",24, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getArrayAppendElementDecl() const",45, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getArrayReserveCapacityDecl() const",56, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getUnimplementedInitializerDecl() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getUndefinedDecl() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getIsOSVersionAtLeastDecl() const",32, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"isHigherPrecedenceThan( PrecedenceGroupDecl * a , PrecedenceGroupDecl * b)",51, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"computeAssociativity( AssociativityCacheType & cache , PrecedenceGroupDecl * left , PrecedenceGroupDecl * right)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::associateInfixOperators( PrecedenceGroupDecl * left , PrecedenceGroupDecl * right) const",24, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"findLibraryFunction( const ASTContext & ctx , FuncDecl * & cache , StringRef name)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::hasOptionalIntrinsics() const",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::hasPointerArgumentIntrinsics() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::hasArrayLiteralIntrinsics() const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::addExternalDecl( Decl * decl)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::addSynthesizedDecl( Decl * decl)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::addCleanup( std :: function<void(void)> cleanup)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::hadError() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"getArena( RecursiveTypeProperties properties)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::addSearchPath( StringRef searchPath , bool isFramework , bool isSystem)",16, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::addModuleLoader( std :: unique_ptr<ModuleLoader> loader , bool IsClang)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::loadExtensions( NominalTypeDecl * nominal , unsigned previousGeneration)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::loadObjCMethods( ClassDecl * classDecl , ObjCSelector selector , bool isInstanceMethod , unsigned previousGeneration , llvm :: TinyPtrVector<AbstractFunctionDecl*> & methods)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::verifyAllLoadedModules() const",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getClangModuleLoader() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"recordKnownProtocol( ModuleDecl * Stdlib , StringRef Name , KnownProtocolKind Kind)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::recordKnownProtocols( ModuleDecl * Stdlib)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getLoadedModule( ArrayRef<std::pair<Identifier,SourceLoc>> ModulePath) const",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getLoadedModule( Identifier ModuleName) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getVisibleTopLevelClangModules( SmallVectorImpl<clang::Module*> & Modules) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::registerGenericSignatureBuilder( GenericSignature * sig , GenericSignatureBuilder && builder)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getOrCreateGenericSignatureBuilder( CanGenericSignature sig)",79, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getOrCreateCanonicalGenericEnvironment( GenericSignatureBuilder * builder , GenericSignature * sig)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"OverriddenDeclsRequest::getCachedResult() const",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"OverriddenDeclsRequest::cacheResult( llvm :: TinyPtrVector<ValueDecl*> value) const",23, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolDecl::getDefaultWitness( ValueDecl * requirement) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolDecl::setDefaultWitness( ValueDecl * requirement , Witness witness)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolDecl::getDefaultTypeWitness( AssociatedTypeDecl * assocType) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolDecl::setDefaultTypeWitness( AssociatedTypeDecl * assocType , Type witness)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolDecl::getDefaultAssociatedConformanceWitness( CanType association , ProtocolDecl * requirement) const",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolDecl::setDefaultAssociatedConformanceWitness( CanType association , ProtocolDecl * requirement , ProtocolConformanceRef conformance)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::canImportModule( std :: pair<Identifier,SourceLoc> ModulePath)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getModule( ArrayRef<std::pair<Identifier,SourceLoc>> ModulePath)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getModuleByName( StringRef ModuleName)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getStdlibModule( bool loadIfAbsent)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getRawComment( const Decl * D)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::setRawComment( const Decl * D , RawComment RC)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getBriefComment( const Decl * D)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::setBriefComment( const Decl * D , StringRef Comment)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getConformance( Type conformingType , ProtocolDecl * protocol , SourceLoc loc , DeclContext * dc , ProtocolConformanceState state)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getSelfConformance( ProtocolDecl * protocol)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"collapseSpecializedConformance( Type type , ProtocolConformance * conformance , SubstitutionMap substitutions)",27, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getSpecializedConformance( Type type , ProtocolConformance * generic , SubstitutionMap substitutions)",34, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getInheritedConformance( Type type , ProtocolConformance * inherited)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getOrCreateLazyContextData( const DeclContext * dc , LazyMemberLoader * lazyLoader)",25, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::hasUnparsedMembers( const IterableDeclContext * IDC) const",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::parseMembers( IterableDeclContext * IDC)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getOrCreateLazyIterableContextData( const IterableDeclContext * idc , LazyMemberLoader * lazyLoader)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getOrCreateLazyGenericContextData( const GenericContext * dc , LazyMemberLoader * lazyLoader)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::addDelayedConformanceDiag( NormalProtocolConformance * conformance , DelayedConformanceDiag fn)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::addDelayedMissingWitnesses( NormalProtocolConformance * conformance , ArrayRef<ValueDecl*> witnesses)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::takeDelayedMissingWitnesses( NormalProtocolConformance * conformance)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::takeDelayedConformanceDiags( NormalProtocolConformance * conformance)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getTotalMemory() const",29, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getSolverMemory() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::Implementation::Arena::getTotalMemory() const",24, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"OrderDeclarations::OrderDeclarations( SourceManager & srcMgr)",1, 66, 4, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"OrderDeclarations::operator ( )( ValueDecl * lhs , ValueDecl * rhs) const",28, 6, 4, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"OrderDeclarationsWithSourceFileAndClassBias::OrderDeclarationsWithSourceFileAndClassBias( SourceManager & srcMgr , SourceFile & sf)",3, 35, 4, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"OrderDeclarationsWithSourceFileAndClassBias::operator ( )( ValueDecl * lhs , ValueDecl * rhs) const",20, 6, 4, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"swift::getObjCMethodDiagInfo( AbstractFunctionDecl * member)",35, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"swift::fixDeclarationName( InFlightDiagnostic & diag , ValueDecl * decl , DeclName targetName)",67, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"swift::fixDeclarationObjCName( InFlightDiagnostic & diag , ValueDecl * decl , Optional<ObjCSelector> targetNameOpt , bool ignoreImpliedName)",76, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::diagnoseAttrsRequiringFoundation( SourceFile & SF)",28, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::recordObjCMethod( AbstractFunctionDecl * func)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"lookupObjCMethodInClass( ClassDecl * classDecl , ObjCSelector selector , bool isInstanceMethod , bool isInitializer , SourceManager & srcMgr , bool inheritingInits = true)",51, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AbstractFunctionDecl::setForeignErrorConvention( const ForeignErrorConvention & conv)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AbstractFunctionDecl::getForeignErrorConvention() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::diagnoseUnintendedObjCMethodOverrides( SourceFile & sf)",101, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::recordObjCMethodConflict( ClassDecl * classDecl , ObjCSelector selector , bool isInstance)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"getObjCMethodConflictDecls( const ObjCMethodConflict & conflict)",7, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"removeValidObjCConflictingMethods( MutableArrayRef<AbstractFunctionDecl*> & methods)",26, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"shouldAssociateConflictWithSourceFile( SourceFile & sf , ArrayRef<AbstractFunctionDecl*> methods)",24, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::diagnoseObjCMethodConflicts( SourceFile & sf)",102, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::recordObjCUnsatisfiedOptReq( DeclContext * dc , AbstractFunctionDecl * req)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"getDeclContextLoc( DeclContext * dc)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::diagnoseObjCUnsatisfiedOptReqConflicts( SourceFile & sf)",114, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"swift::getKnownFoundationEntity( StringRef name)",6, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getSwiftName( KnownFoundationEntity kind)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"NameAliasType::NameAliasType( TypeAliasDecl * typealias , Type parent , SubstitutionMap substitutions , Type underlying , RecursiveTypeProperties properties)",22, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"NameAliasType::get( TypeAliasDecl * typealias , Type parent , SubstitutionMap substitutions , Type underlying)",45, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"NameAliasType::Profile( llvm :: FoldingSetNodeID & id) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"NameAliasType::Profile( llvm :: FoldingSetNodeID & id , TypeAliasDecl * typealias , Type parent , SubstitutionMap substitutions , Type underlying)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ErrorType::get( const ASTContext & C)",1, 68, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ErrorType::get( Type originalType)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"BuiltinIntegerType::get( BuiltinIntegerWidth BitWidth , const ASTContext & C)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"BuiltinVectorType::get( const ASTContext & context , Type elementType , unsigned numElements)",18, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ParenType::get( const ASTContext & C , Type underlying , ParameterTypeFlags fl)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"TupleType::getEmpty( const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"TupleType::Profile( llvm :: FoldingSetNodeID & ID , ArrayRef<TupleTypeElt> Fields)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"TupleType::get( ArrayRef<TupleTypeElt> Fields , const ASTContext & C)",54, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"TupleTypeElt::TupleTypeElt( Type ty , Identifier name , ParameterTypeFlags fl)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"TupleTypeElt::getType() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AnyFunctionType::Param::getOldType() const",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"swift::computeSelfParam( AbstractFunctionDecl * AFD , bool isInitializingCtor , bool wantDynamicSelf)",80, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"UnboundGenericType::Profile( llvm :: FoldingSetNodeID & ID , GenericTypeDecl * TheDecl , Type Parent)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"UnboundGenericType::get( GenericTypeDecl * TheDecl , Type Parent , const ASTContext & C)",18, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"BoundGenericType::Profile( llvm :: FoldingSetNodeID & ID , NominalTypeDecl * TheDecl , Type Parent , ArrayRef<Type> GenericArgs)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"BoundGenericType::BoundGenericType( TypeKind theKind , NominalTypeDecl * theDecl , Type parent , ArrayRef<Type> genericArgs , const ASTContext * context , RecursiveTypeProperties properties)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"BoundGenericType::get( NominalTypeDecl * TheDecl , Type Parent , ArrayRef<Type> GenericArgs)",59, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"NominalType::get( NominalTypeDecl * D , Type Parent , const ASTContext & C)",23, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"EnumType::EnumType( EnumDecl * TheDecl , Type Parent , const ASTContext & C , RecursiveTypeProperties properties)",3, 69, 2, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"EnumType::get( EnumDecl * D , Type Parent , const ASTContext & C)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"EnumType::Profile( llvm :: FoldingSetNodeID & ID , EnumDecl * D , Type Parent)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"StructType::StructType( StructDecl * TheDecl , Type Parent , const ASTContext & C , RecursiveTypeProperties properties)",3, 71, 2, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"StructType::get( StructDecl * D , Type Parent , const ASTContext & C)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"StructType::Profile( llvm :: FoldingSetNodeID & ID , StructDecl * D , Type Parent)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ClassType::ClassType( ClassDecl * TheDecl , Type Parent , const ASTContext & C , RecursiveTypeProperties properties)",3, 70, 2, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ClassType::get( ClassDecl * D , Type Parent , const ASTContext & C)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ClassType::Profile( llvm :: FoldingSetNodeID & ID , ClassDecl * D , Type Parent)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolCompositionType::build( const ASTContext & C , ArrayRef<Type> Members , bool HasExplicitAnyObject)",33, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ReferenceStorageType::get( Type T , ReferenceOwnership ownership , const ASTContext & C)",33, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AnyMetatypeType::AnyMetatypeType( TypeKind kind , const ASTContext * C , RecursiveTypeProperties properties , Type instanceType , Optional<MetatypeRepresentation> repr)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"MetatypeType::get( Type T , Optional<MetatypeRepresentation> Repr , const ASTContext & Ctx)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"MetatypeType::MetatypeType( Type T , const ASTContext * C , RecursiveTypeProperties properties , Optional<MetatypeRepresentation> repr)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ExistentialMetatypeType::get( Type T , Optional<MetatypeRepresentation> repr , const ASTContext & ctx)",17, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ExistentialMetatypeType::ExistentialMetatypeType( Type T , const ASTContext * C , RecursiveTypeProperties properties , Optional<MetatypeRepresentation> repr)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ModuleType::get( ModuleDecl * M)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"DynamicSelfType::get( Type selfType , const ASTContext & ctx)",16, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"getFunctionRecursiveProperties( ArrayRef<AnyFunctionType::Param> params , Type result)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"isFunctionTypeCanonical( ArrayRef<AnyFunctionType::Param> params , Type result)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"getGenericFunctionRecursiveProperties( ArrayRef<AnyFunctionType::Param> params , Type result)",18, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"isGenericFunctionTypeCanonical( GenericSignature * sig , ArrayRef<AnyFunctionType::Param> params , Type result)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AnyFunctionType::withExtInfo( ExtInfo info) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AnyFunctionType::decomposeInput( Type type , SmallVectorImpl<AnyFunctionType::Param> & result)",30, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AnyFunctionType::Param::getParameterType( bool forCanonical , ASTContext * ctx) const",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AnyFunctionType::composeInput( ASTContext & ctx , ArrayRef<Param> params , bool canonicalVararg)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AnyFunctionType::equalParams( ArrayRef<AnyFunctionType::Param> a , ArrayRef<AnyFunctionType::Param> b)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AnyFunctionType::equalParams( CanParamArrayRef a , CanParamArrayRef b)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"AnyFunctionType::relabelParams( MutableArrayRef<Param> params , ArrayRef<Identifier> labels)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"profileParams( llvm :: FoldingSetNodeID & ID , ArrayRef<AnyFunctionType::Param> params)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"FunctionType::Profile( llvm :: FoldingSetNodeID & ID , ArrayRef<AnyFunctionType::Param> params , Type result , ExtInfo info)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"FunctionType::get( ArrayRef<AnyFunctionType::Param> params , Type result , ExtInfo info)",28, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"FunctionType::FunctionType( ArrayRef<AnyFunctionType::Param> params , Type output , ExtInfo info , const ASTContext * ctx , RecursiveTypeProperties properties)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericFunctionType::Profile( llvm :: FoldingSetNodeID & ID , GenericSignature * sig , ArrayRef<AnyFunctionType::Param> params , Type result , ExtInfo info)",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericFunctionType::get( GenericSignature * sig , ArrayRef<Param> params , Type result , ExtInfo info)",42, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericFunctionType::GenericFunctionType( GenericSignature * sig , ArrayRef<AnyFunctionType::Param> params , Type result , ExtInfo info , const ASTContext * ctx , RecursiveTypeProperties properties)",12, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericTypeParamType::get( unsigned depth , unsigned index , const ASTContext & ctx)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericFunctionType::getGenericParams() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericFunctionType::getRequirements() const",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"SILFunctionType::Profile( llvm :: FoldingSetNodeID & id , GenericSignature * genericParams , ExtInfo info , SILCoroutineKind coroutineKind , ParameterConvention calleeConvention , ArrayRef<SILParameterInfo> params , ArrayRef<SILYieldInfo> yields , ArrayRef<SILResultInfo> results , Optional<SILResultInfo> errorResult , Optional<ProtocolConformanceRef> conformance)",30, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"SILFunctionType::SILFunctionType( GenericSignature * genericSig , ExtInfo ext , SILCoroutineKind coroutineKind , ParameterConvention calleeConvention , ArrayRef<SILParameterInfo> params , ArrayRef<SILYieldInfo> yields , ArrayRef<SILResultInfo> normalResults , Optional<SILResultInfo> errorResult , const ASTContext & ctx , RecursiveTypeProperties properties , Optional<ProtocolConformanceRef> witnessMethodConformance)",108, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"SILBlockStorageType::get( CanType captureType)",13, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"SILFunctionType::get( GenericSignature * genericSig , ExtInfo ext , SILCoroutineKind coroutineKind , ParameterConvention callee , ArrayRef<SILParameterInfo> params , ArrayRef<SILYieldInfo> yields , ArrayRef<SILResultInfo> normalResults , Optional<SILResultInfo> errorResult , const ASTContext & ctx , Optional<ProtocolConformanceRef> witnessMethodConformance)",62, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ArraySliceType::get( Type base)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"DictionaryType::get( Type keyType , Type valueType)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"OptionalType::get( Type base)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolType::get( ProtocolDecl * D , Type Parent , const ASTContext & C)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolType::ProtocolType( ProtocolDecl * TheDecl , Type Parent , const ASTContext & Ctx , RecursiveTypeProperties properties)",4, 75, 2, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ProtocolType::Profile( llvm :: FoldingSetNodeID & ID , ProtocolDecl * D , Type Parent)",5, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"LValueType::get( Type objectTy)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"InOutType::get( Type objectTy)",18, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"DependentMemberType::get( Type base , Identifier name)",16, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"DependentMemberType::get( Type base , AssociatedTypeDecl * assocType)",18, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"OpenedArchetypeType::get( Type existential , Optional<UUID> knownID)",45, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"OpenedArchetypeType::getAny( Type existential)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"TypeLoc::setInvalidType( ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"raw_capturing_ostream::raw_capturing_ostream( CapturingTypeCheckerDebugConsumer & Listener)",2, 30, 2, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"raw_capturing_ostream::~raw_capturing_ostream()",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"raw_capturing_ostream::write_impl( const char * Ptr , size_t Size)",11, 4, 2, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"raw_capturing_ostream::current_pos() const",3, 4, 2, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"TypeCheckerDebugConsumer::~TypeCheckerDebugConsumer()",1, 58, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"CapturingTypeCheckerDebugConsumer::CapturingTypeCheckerDebugConsumer()",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"SubstitutionMap::Storage::Profile( llvm :: FoldingSetNodeID & id , GenericSignature * genericSig , ArrayRef<Type> replacementTypes , ArrayRef<ProtocolConformanceRef> conformances)",26, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"SubstitutionMap::Storage::get( GenericSignature * genericSig , ArrayRef<Type> replacementTypes , ArrayRef<ProtocolConformanceRef> conformances)",43, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericSignature::Profile( llvm :: FoldingSetNodeID & ID , TypeArrayView<GenericTypeParamType> genericParams , ArrayRef<Requirement> requirements)",15, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericSignature::get( ArrayRef<GenericTypeParamType*> params , ArrayRef<Requirement> requirements , bool isKnownCanonical)",9, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericSignature::get( TypeArrayView<GenericTypeParamType> params , ArrayRef<Requirement> requirements , bool isKnownCanonical)",33, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"GenericEnvironment::getIncomplete( GenericSignature * signature , GenericSignatureBuilder * builder)",11, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"DeclName::CompoundDeclName::Profile( llvm :: FoldingSetNodeID & id , DeclBaseName baseName , ArrayRef<Identifier> argumentNames)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"DeclName::initialize( ASTContext & C , DeclBaseName baseName , ArrayRef<Identifier> argumentNames)",26, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"DeclName::DeclName( ASTContext & C , DeclBaseName baseName , ParameterList * paramList)",8, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"findUnderlyingTypeInModule( ASTContext & ctx , Identifier name , ModuleDecl * module)",20, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ForeignRepresentationInfo::isRepresentableAsOptional() const",29, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getForeignRepresentationInfo( NominalTypeDecl * nominal , ForeignLanguage language , const DeclContext * dc)",180, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::isTypeBridgedInExternalModule( NominalTypeDecl * nominal) const",35, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::isObjCClassWithMultipleSwiftBridgedTypes( Type t)",14, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getBridgedToObjC( const DeclContext * dc , Type type , Type * bridgedValueType) const",74, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getSingleGenericParameterSignature() const",10, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"ASTContext::getExistentialSignature( CanType existential , ModuleDecl * mod)",28, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"SILLayout::get( ASTContext & C , CanGenericSignature Generics , ArrayRef<SILField> Fields)",22, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"SILBoxType::get( ASTContext & C , SILLayout * Layout , SubstitutionMap Substitutions)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"SILBoxType::get( CanType boxedType)",19, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"LayoutConstraint::getLayoutConstraint( LayoutConstraintKind Kind , ASTContext & C)",4, 2, 0, 0
repos/cpp/swift/lib/AST/ASTContext.cpp,"LayoutConstraint::getLayoutConstraint( LayoutConstraintKind Kind , unsigned SizeInBits , unsigned Alignment , ASTContext & C)",29, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTraceDecl::print( llvm :: raw_ostream & out) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"swift::printDeclDescription( llvm :: raw_ostream & out , const Decl * D , ASTContext & Context , bool addNewline)",63, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTraceExpr::print( llvm :: raw_ostream & out) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"swift::printExprDescription( llvm :: raw_ostream & out , Expr * E , ASTContext & Context , bool addNewline)",6, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTraceStmt::print( llvm :: raw_ostream & out) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"swift::printStmtDescription( llvm :: raw_ostream & out , Stmt * S , ASTContext & Context , bool addNewline)",6, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTracePattern::print( llvm :: raw_ostream & out) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"swift::printPatternDescription( llvm :: raw_ostream & out , Pattern * P , ASTContext & Context , bool addNewline)",6, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"InterestingDeclForType::visitType( TypeBase * type)",3, 6, 4, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"InterestingDeclForType::visitUnboundGenericType( UnboundGenericType * type)",3, 6, 4, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"InterestingDeclForType::visitBoundGenericType( BoundGenericType * type)",3, 6, 4, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"InterestingDeclForType::visitNominalType( NominalType * type)",3, 6, 4, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"InterestingDeclForType::visitNameAliasType( NameAliasType * type)",3, 6, 4, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTraceType::print( llvm :: raw_ostream & out) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"swift::printTypeDescription( llvm :: raw_ostream & out , Type type , ASTContext & Context , bool addNewline)",12, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTraceTypeRepr::print( llvm :: raw_ostream & out) const",9, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTraceConformance::print( llvm :: raw_ostream & out) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"swift::printConformanceDescription( llvm :: raw_ostream & out , const ProtocolConformance * conformance , ASTContext & ctxt , bool addNewline)",14, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"swift::printSourceLocDescription( llvm :: raw_ostream & out , SourceLoc loc , ASTContext & ctx , bool addNewline)",6, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTraceLocation::print( llvm :: raw_ostream & out) const",4, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTraceGenericSignature::print( llvm :: raw_ostream & out) const",8, 2, 0, 0
repos/cpp/swift/lib/AST/PrettyStackTrace.cpp,"PrettyStackTraceSelector::print( llvm :: raw_ostream & out) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/PlatformKind.cpp,"swift::platformString( PlatformKind platform)",11, 2, 0, 0
repos/cpp/swift/lib/AST/PlatformKind.cpp,"swift::prettyPlatformString( PlatformKind platform)",11, 2, 0, 0
repos/cpp/swift/lib/AST/PlatformKind.cpp,"swift::platformFromString( StringRef Name)",10, 2, 0, 0
repos/cpp/swift/lib/AST/PlatformKind.cpp,"swift::isPlatformActive( PlatformKind Platform , LangOptions & LangOpts)",28, 2, 0, 0
repos/cpp/swift/lib/AST/PlatformKind.cpp,"swift::targetPlatform( LangOptions & LangOpts)",27, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"AnyRequest::HolderBase::~HolderBase()",1, 42, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"AnyRequest::getAsString() const",8, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::getAbstractRequestFunction( uint8_t zoneID , uint8_t requestID) const",12, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::registerRequestFunctions( uint8_t zoneID , ArrayRef<AbstractRequestFunction*> functions)",11, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::Evaluator( DiagnosticEngine & diags , CycleDiagnosticKind shouldDiagnoseCycles)",3, 65, 2, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::emitRequestEvaluatorGraphViz( llvm :: StringRef graphVizPath)",5, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::checkDependency( const AnyRequest & request)",33, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::diagnoseCycle( const AnyRequest & request)",10, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::printDependencies( const AnyRequest & request , llvm :: raw_ostream & out , llvm :: DenseSet<AnyRequest> & visitedAnywhere , llvm :: SmallVectorImpl<AnyRequest> & visitedAlongPath , llvm :: ArrayRef<AnyRequest> highlightPath , std :: string & prefixStr , bool lastChild) const",83, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::dumpDependencies( const AnyRequest & request) const",3, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::printDependenciesGraphviz( llvm :: raw_ostream & out) const",84, 2, 0, 0
repos/cpp/swift/lib/AST/Evaluator.cpp,"Evaluator::dumpDependenciesGraphviz() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"HeaderImportCallbacks::HeaderImportCallbacks( ClangImporter :: Implementation & impl)",2, 22, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"HeaderImportCallbacks::handleImport( const clang :: Module * imported)",6, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"HeaderImportCallbacks::InclusionDirective( clang :: SourceLocation HashLoc , const clang :: Token & IncludeTok , StringRef FileName , bool IsAngled , clang :: CharSourceRange FilenameRange , const clang :: FileEntry * File , StringRef SearchPath , StringRef RelativePath , const clang :: Module * Imported , clang :: SrcMgr :: CharacteristicKind FileType)",12, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"HeaderImportCallbacks::moduleImport( clang :: SourceLocation ImportLoc , clang :: ModuleIdPath Path , const clang :: Module * Imported)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"PCHDeserializationCallbacks::PCHDeserializationCallbacks( ClangImporter :: Implementation & impl)",2, 22, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"PCHDeserializationCallbacks::ModuleImportRead( clang :: serialization :: SubmoduleID ID , clang :: SourceLocation ImportLoc)",6, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"HeaderParsingASTConsumer::HeaderParsingASTConsumer( ClangImporter :: Implementation & impl)",2, 30, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"HeaderParsingASTConsumer::HandleTopLevelDeclInObjCContainer( clang :: DeclGroupRef decls)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"HeaderParsingASTConsumer::getAdditionalParsedDecls()",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"HeaderParsingASTConsumer::GetASTDeserializationListener()",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"HeaderParsingASTConsumer::reset()",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ParsingAction::ParsingAction( ASTContext & ctx , ClangImporter & importer , ClangImporter :: Implementation & impl , const ClangImporterOptions & importerOpts , std :: string swiftPCHHash)",7, 38, 6, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ParsingAction::CreateASTConsumer( clang :: CompilerInstance & CI , StringRef InFile)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ParsingAction::BeginSourceFileAction( clang :: CompilerInstance & CI)",25, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"StdStringMemBuffer::StdStringMemBuffer( std :: string && source , StringRef name)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"StdStringMemBuffer::getBufferIdentifier() const",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"StdStringMemBuffer::getBufferKind() const",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ZeroFilledMemoryBuffer::ZeroFilledMemoryBuffer( size_t size , StringRef name)",13, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ZeroFilledMemoryBuffer::~ZeroFilledMemoryBuffer()",7, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ZeroFilledMemoryBuffer::getBufferIdentifier() const",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ZeroFilledMemoryBuffer::getBufferKind() const",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"BridgingPPTracker::BridgingPPTracker( ClangImporter :: Implementation & Impl)",2, 20, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"BridgingPPTracker::getNumModuleIdentifiers( const clang :: Module * Mod)",8, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"BridgingPPTracker::InclusionDirective( clang :: SourceLocation HashLoc , const clang :: Token & IncludeTok , StringRef FileName , bool IsAngled , clang :: CharSourceRange FilenameRange , const clang :: FileEntry * File , StringRef SearchPath , StringRef RelativePath , const clang :: Module * Imported , clang :: SrcMgr :: CharacteristicKind FileType)",21, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"BridgingPPTracker::moduleImport( clang :: SourceLocation ImportLoc , clang :: ModuleIdPath Path , const clang :: Module * Imported)",10, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"BridgingPPTracker::handleImport( clang :: SourceLocation ImportLoc , ArrayRef<clang::SourceLocation> IdLocs , const clang :: Module * Imported)",11, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"BridgingPPTracker::MacroDefined( const clang :: Token & MacroNameTok , const clang :: MacroDirective * MD)",4, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporterDependencyCollector::ClangImporterDependencyCollector( bool TrackSystemDeps)",2, 42, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporterDependencyCollector::excludePath( StringRef filename)",3, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporterDependencyCollector::isClangImporterSpecialName( StringRef Filename)",5, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporterDependencyCollector::needSystemDependencies()",1, 69, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporterDependencyCollector::sawDependency( StringRef Filename , bool FromClangModule , bool IsSystem , bool IsClangModuleFile , bool IsMissing)",15, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::createDependencyCollector( bool TrackSystemDeps)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::addBridgeHeaderTopLevelDecls( clang :: Decl * D)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::shouldIgnoreBridgeHeaderTopLevelDecl( clang :: Decl * D)",15, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::ClangImporter( ASTContext & ctx , const ClangImporterOptions & clangImporterOpts , DependencyTracker * tracker)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::~ClangImporter()",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::setTypeResolver( LazyResolver & resolver)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::clearTypeResolver()",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"getNormalInvocationArguments( std :: vector<std::string> & invocationArgStrs , ASTContext & ctx , const ClangImporterOptions & importerOpts)",209, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"getEmbedBitcodeInvocationArguments( std :: vector<std::string> & invocationArgStrs , ASTContext & ctx , const ClangImporterOptions & importerOpts)",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"addCommonInvocationArguments( std :: vector<std::string> & invocationArgStrs , ASTContext & ctx , const ClangImporterOptions & importerOpts)",65, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::canReadPCH( StringRef PCHFilename)",83, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getPCHFilename( const ClangImporterOptions & ImporterOptions , StringRef SwiftPCHHash , bool & isExplicit)",26, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getOrCreatePCH( const ClangImporterOptions & ImporterOptions , StringRef SwiftPCHHash)",26, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::create( ASTContext & ctx , const ClangImporterOptions & importerOpts , std :: string swiftPCHHash , DependencyTracker * tracker)",260, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::addSearchPath( StringRef newSearchPath , bool isFramework , bool isSystem)",33, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::getNextIncludeLoc()",19, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::importHeader( ModuleDecl * adapter , StringRef headerName , SourceLoc diagLoc , bool trackParsedSymbols , std :: unique_ptr<llvm::MemoryBuffer> sourceBuffer , bool implicitImport)",116, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::importHeader( StringRef header , ModuleDecl * adapter , off_t expectedSize , time_t expectedModTime , StringRef cachedContents , SourceLoc diagLoc)",24, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::importBridgingHeader( StringRef header , ModuleDecl * adapter , SourceLoc diagLoc , bool trackParsedSymbols , bool implicitImport)",34, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getBridgingHeaderContents( StringRef headerPath , off_t & fileSize , time_t & fileModTime)",56, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::emitBridgingPCH( StringRef headerPath , StringRef outputPCHPath)",41, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::collectSubModuleNames( ArrayRef<std::pair<Identifier,SourceLoc>> path , std :: vector<std::string> & names)",20, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::isModuleImported( const clang :: Module * M)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::canImportModule( std :: pair<Identifier,SourceLoc> moduleID)",17, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::loadModule( SourceLoc importLoc , ArrayRef<std::pair<Identifier,SourceLoc>> path)",93, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::finishLoadingClangModule( const clang :: Module * clangModule , bool findAdapter)",55, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::handleDeferredImports()",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getImportedHeaderModule() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"PlatformAvailability::PlatformAvailability( LangOptions & langOpts)",61, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::Implementation( ASTContext & ctx , const ClangImporterOptions & opts)",13, 24, 6, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::~Implementation()",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::getWrapperForModule( const clang :: Module * underlying)",20, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::getClangModuleForDecl( const clang :: Decl * D , bool allowForwardDeclaration)",15, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::exportSourceLoc( SourceLoc loc)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::importSourceLoc( clang :: SourceLocation loc)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::importSourceRange( clang :: SourceRange loc)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::exportName( Identifier name)",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::importIdentifier( const clang :: IdentifierInfo * identifier , StringRef removePrefix)",17, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::importSelector( clang :: Selector selector)",22, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::exportSelector( DeclName name , bool allowSimpleName)",23, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::exportSelector( ObjCSelector selector)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"isPotentiallyConflictingSetter( const clang :: ObjCProtocolDecl * proto , const clang :: ObjCMethodDecl * method)",17, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"importer::shouldSuppressDeclImport( const clang :: Decl * decl)",67, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::lookupTypedef( clang :: DeclarationName name)",16, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"isDeclaredInModule( const ClangModuleUnit * ModuleFilter , const Decl * VD)",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"getClangOwningModule( ClangNode Node , const clang :: ASTContext & ClangCtx)",16, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"getClangTopLevelOwningModule( ClangNode Node , const clang :: ASTContext & ClangCtx)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"isVisibleFromModule( const ClangModuleUnit * ModuleFilter , ValueDecl * VD)",87, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangVectorDeclConsumer::FoundDecl( clang :: NamedDecl * ND , clang :: NamedDecl * Hiding , clang :: DeclContext * Ctx , bool InBaseClass)",10, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangVectorDeclConsumer::getResults()",3, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"FilteringVisibleDeclConsumer::FilteringVisibleDeclConsumer( swift :: VisibleDeclConsumer & consumer , const ClangModuleUnit * CMU)",5, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"FilteringVisibleDeclConsumer::foundDecl( ValueDecl * VD , DeclVisibilityKind Reason)",4, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"FilteringDeclaredDeclConsumer::FilteringDeclaredDeclConsumer( swift :: VisibleDeclConsumer & consumer , const ClangModuleUnit * CMU)",5, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"FilteringDeclaredDeclConsumer::foundDecl( ValueDecl * VD , DeclVisibilityKind Reason)",4, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"DarwinLegacyFilterDeclConsumer::shouldDiscard( ValueDecl * VD)",43, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"DarwinLegacyFilterDeclConsumer::DarwinLegacyFilterDeclConsumer( swift :: VisibleDeclConsumer & consumer , clang :: ASTContext & clangASTContext)",3, 68, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"DarwinLegacyFilterDeclConsumer::needsFiltering( const clang :: Module * topLevelModule)",4, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"DarwinLegacyFilterDeclConsumer::foundDecl( ValueDecl * VD , DeclVisibilityKind Reason)",4, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"getClangNodeForMacroDefinition( clang :: MacroDefinition & M)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::lookupBridgingHeaderDecls( llvm :: function_ref<bool(ClangNode)> filter , llvm :: function_ref<void(Decl*)> receiver) const",30, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::lookupDeclsFromHeader( StringRef Filename , llvm :: function_ref<bool(ClangNode)> filter , llvm :: function_ref<void(Decl*)> receiver) const",86, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::lookupValue( DeclName name , VisibleDeclConsumer & consumer)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::lookupTypeDecl( StringRef rawName , ClangTypeKind kind , llvm :: function_ref<void(TypeDecl*)> receiver)",35, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::lookupRelatedEntity( StringRef rawName , ClangTypeKind kind , StringRef relatedEntityKind , llvm :: function_ref<void(TypeDecl*)> receiver)",29, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::lookupVisibleDecls( ModuleDecl :: AccessPathTy accessPath , VisibleDeclConsumer & consumer , NLKind lookupKind) const",25, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"VectorDeclPtrConsumer::VectorDeclPtrConsumer( SmallVectorImpl<Decl*> & Decls)",2, 24, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"VectorDeclPtrConsumer::foundDecl( ValueDecl * VD , DeclVisibilityKind Reason)",3, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::getTopLevelDecls( SmallVectorImpl<Decl*> & results) const",72, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"swift::createImportDecl( ASTContext & Ctx , DeclContext * DC , ClangNode ClangN , ArrayRef<clang::Module*> Exported)",29, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"getImportDecls( ClangModuleUnit * ClangUnit , const clang :: Module * M , SmallVectorImpl<Decl*> & Results)",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::getDisplayDecls( SmallVectorImpl<Decl*> & results) const",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::lookupValue( ModuleDecl :: AccessPathTy accessPath , DeclName name , NLKind lookupKind , SmallVectorImpl<ValueDecl*> & results) const",28, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"isVisibleClangEntry( clang :: ASTContext & ctx , SwiftLookupTable :: SingleEntry entry)",22, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::lookupNestedType( Identifier name , const NominalTypeDecl * baseType) const",86, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::loadExtensions( NominalTypeDecl * nominal , unsigned previousGeneration)",40, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::loadObjCMethods( ClassDecl * classDecl , ObjCSelector selector , bool isInstanceMethod , unsigned previousGeneration , llvm :: TinyPtrVector<AbstractFunctionDecl*> & methods)",58, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::lookupClassMember( ModuleDecl :: AccessPathTy accessPath , DeclName name , SmallVectorImpl<ValueDecl*> & results) const",15, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::lookupClassMembers( ModuleDecl :: AccessPathTy accessPath , VisibleDeclConsumer & consumer) const",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::lookupObjCMethods( ObjCSelector selector , SmallVectorImpl<AbstractFunctionDecl*> & results) const",54, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::collectLinkLibraries( ModuleDecl :: LinkLibraryCallback callback) const",19, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::getFilename() const",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getTargetInfo() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getClangASTContext() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getClangPreprocessor() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getClangInstance() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getClangOwningModule( ClangNode Node) const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::getClangOwningModule( ClangNode Node) const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::hasTypedef( const clang :: Decl * typeDecl) const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getClangSema() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getClangCodeGenOpts() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getClangModuleHash() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::importDeclCached( const clang :: NamedDecl * ClangDecl)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::printStatistics() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::verifyAllModules()",20, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::ClangModuleUnit( ModuleDecl & M , ClangImporter :: Implementation & owner , const clang :: Module * clangModule)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::hasClangModule( ModuleDecl * M)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::isTopLevel() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::isSystemModule() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::getClangASTContext() const",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::getExportedModuleName() const",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::getAdapterModule() const",35, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::getImportedModules( SmallVectorImpl<ModuleDecl::ImportedModule> & imports , ModuleDecl :: ImportFilter filter) const",96, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangModuleUnit::getImportedModulesForLookup( SmallVectorImpl<ModuleDecl::ImportedModule> & imports) const",77, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::getMangledName( raw_ostream & os , const clang :: NamedDecl * clangDecl) const",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::findLookupTable( const clang :: Module * clangModule)",16, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::forEachLookupTable( llvm :: function_ref<bool(SwiftLookupTable&table)> fn)",19, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::lookupValue( SwiftLookupTable & table , DeclName name , VisibleDeclConsumer & consumer)",94, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::lookupVisibleDecls( SwiftLookupTable & table , VisibleDeclConsumer & consumer)",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::lookupObjCMembers( SwiftLookupTable & table , DeclName name , VisibleDeclConsumer & consumer)",37, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::lookupAllObjCMembers( SwiftLookupTable & table , VisibleDeclConsumer & consumer)",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::loadNamedMembers( const IterableDeclContext * IDC , DeclBaseName N , uint64_t contextData)",81, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::getEffectiveClangContext( const NominalTypeDecl * nominal)",44, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::dumpSwiftLookupTables()",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::Implementation::dumpSwiftLookupTables()",18, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::importName( const clang :: NamedDecl * D , clang :: DeclarationName preferredName)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangImporter.cpp,"ClangImporter::isInOverlayModuleForImportedModule( const DeclContext * overlayDC , const DeclContext * importedDC)",20, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"parseNumericLiteral( ClangImporter :: Implementation & impl , const clang :: Token & tok)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"isInSystemModule( DeclContext * D)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"createMacroConstant( ClangImporter :: Implementation & Impl , const clang :: MacroInfo * macro , Identifier name , DeclContext * dc , Type type , const clang :: APValue & value , ConstantConvertKind convertKind , bool isStatic , ClangNode ClangN)",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"importNumericLiteral( ClangImporter :: Implementation & Impl , DeclContext * DC , const clang :: MacroInfo * MI , Identifier name , const clang :: Token * signTok , const clang :: Token & tok , ClangNode ClangN , clang :: QualType castType)",86, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"isStringToken( const clang :: Token & tok)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"importStringLiteral( ClangImporter :: Implementation & Impl , DeclContext * DC , const clang :: MacroInfo * MI , Identifier name , const clang :: Token & tok , MappedStringLiteralKind kind , ClangNode ClangN)",26, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"importLiteral( ClangImporter :: Implementation & Impl , DeclContext * DC , const clang :: MacroInfo * MI , Identifier name , const clang :: Token & tok , ClangNode ClangN , clang :: QualType castType)",22, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"importNil( ClangImporter :: Implementation & Impl , DeclContext * DC , Identifier name , ClangNode clangN)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"isSignToken( const clang :: Token & tok)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"builtinTypeForToken( const clang :: Token & tok , const clang :: ASTContext & context)",37, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"getIntegerConstantForMacroToken( ClangImporter :: Implementation & impl , DeclContext * DC , const clang :: Token & token)",53, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"importMacro( ClangImporter :: Implementation & impl , DeclContext * DC , Identifier name , const clang :: MacroInfo * macro , ClangNode ClangN , clang :: QualType castType)",312, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportMacro.cpp,"ClangImporter::Implementation::importMacro( Identifier name , ClangNode macroNode)",69, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagRenderer::ClangDiagRenderer( const clang :: LangOptions & langOpts , clang :: DiagnosticOptions * diagOpts , decltype(callback) fn)",5, 25, 7, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagRenderer::shouldSuppressDiagInSwiftBuffers( clang :: DiagOrStoredDiag info)",12, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagRenderer::isInSwiftBuffers( clang :: FullSourceLoc loc)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagRenderer::emitDiagnosticMessage( clang :: FullSourceLoc Loc , clang :: PresumedLoc PLoc , clang :: DiagnosticsEngine :: Level Level , StringRef Message , ArrayRef<clang::CharSourceRange> Ranges , clang :: DiagOrStoredDiag Info)",20, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagRenderer::emitDiagnosticLoc( clang :: FullSourceLoc Loc , clang :: PresumedLoc PLoc , clang :: DiagnosticsEngine :: Level Level , ArrayRef<clang::CharSourceRange> Ranges)",3, 80, 27, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagRenderer::emitCodeContext( clang :: FullSourceLoc Loc , clang :: DiagnosticsEngine :: Level Level , SmallVectorImpl<clang::CharSourceRange> & Ranges , ArrayRef<clang::FixItHint> Hints)",4, 71, 25, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagRenderer::emitNote( clang :: FullSourceLoc Loc , StringRef Message)",9, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagnosticConsumer::ClangDiagnosticConsumer( ClangImporter :: Implementation & impl , clang :: DiagnosticOptions & clangDiagOptions , bool dumpToStderr)",6, 54, 2, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"findEndOfLine( SourceManager & SM , SourceLoc loc , unsigned bufferID)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagnosticConsumer::resolveSourceLocation( const clang :: SourceManager & clangSrcMgr , clang :: SourceLocation clangLoc)",62, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangDiagnosticConsumer.cpp,"ClangDiagnosticConsumer::HandleDiagnostic( clang :: DiagnosticsEngine :: Level clangDiagLevel , const clang :: Diagnostic & clangDiag)",81, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"isNonNullarySelector( clang :: Selector selector , ArrayRef<StringRef> pieces)",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"shouldMakeSelectorNonVariadic( clang :: Selector selector)",22, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"isBlockParameter( const clang :: ParmVarDecl * param)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"isErrorOutParameter( const clang :: ParmVarDecl * param , ForeignErrorConvention :: IsOwned_t & isErrorOwned)",35, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"isBoolType( clang :: ASTContext & ctx , clang :: QualType type)",23, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"isIntegerType( clang :: QualType clangType)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"canImportAsOptional( clang :: ASTContext & ctx , clang :: QualType type)",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"classifyMethodErrorHandling( const clang :: ObjCMethodDecl * clangDecl , OptionalTypeKind resultOptionality)",57, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"getResultOptionality( const clang :: ObjCMethodDecl * method)",16, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"isSwiftReservedName( StringRef name)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"shouldLowercaseValueName( StringRef name)",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"printFullContextPrefix( ImportedName name , ImportNameVersion version , llvm :: raw_ostream & os , ClangImporter :: Implementation & Impl)",32, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"ClangImporter::Implementation::printSwiftName( ImportedName name , ImportNameVersion version , bool fullyQualified , llvm :: raw_ostream & os)",65, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"getClangDeclContextName( const clang :: DeclContext * dc)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"mergeOverriddenNames( ASTContext & ctx , const DeclType * decl , SmallVectorImpl<std::pair<const DeclType*,ImportedName>> & overriddenNames)",39, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"stripLeadingK( StringRef name)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"importer::stripNotification( StringRef name)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"moduleIsInferImportAsMember( const clang :: NamedDecl * decl , clang :: Sema & clangSema)",26, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"matchFactoryAsInitName( const clang :: ObjCMethodDecl * method)",26, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"determineCtorInitializerKind( const clang :: ObjCMethodDecl * method)",26, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"checkVersionedSwiftName( VersionedSwiftNameInfo info , llvm :: VersionTuple bestSoFar , ImportNameVersion requestedVersion)",28, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"findSwiftNameAttr( const clang :: Decl * decl , ImportNameVersion version)",113, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"getFactoryAsInit( const clang :: ObjCInterfaceDecl * classDecl , const clang :: ObjCMethodDecl * method , ImportNameVersion version)",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"shouldImportAsInitializer( const clang :: ObjCMethodDecl * method , ImportNameVersion version , unsigned & prefixLength , CtorInitializerKind & kind)",49, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"omitNeedlessWordsInFunctionName( StringRef & baseName , SmallVectorImpl<StringRef> & argumentNames , ArrayRef<const clang::ParmVarDecl*> params , clang :: QualType resultType , const clang :: DeclContext * dc , const SmallBitVector & nonNullArgs , Optional<unsigned> errorParamIndex , bool returnsSelf , bool isInstanceMethod , NameImporter & nameImporter)",64, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"determineSwiftNewtypeBaseName( StringRef baseName , StringRef newtypeName , bool & strippedPrefix)",23, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"NameImporter::determineEffectiveContext( const clang :: NamedDecl * decl , const clang :: DeclContext * dc , ImportNameVersion version)",47, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"NameImporter::hasNamingConflict( const clang :: NamedDecl * decl , const clang :: IdentifierInfo * proposedName , const clang :: TypedefNameDecl * cfTypedef)",68, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"shouldBeSwiftPrivate( NameImporter & nameImporter , const clang :: NamedDecl * decl , ImportNameVersion version)",31, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"NameImporter::considerErrorImport( const clang :: ObjCMethodDecl * clangDecl , StringRef & baseName , SmallVectorImpl<StringRef> & paramNames , ArrayRef<const clang::ParmVarDecl*> params , bool isInitializer , bool hasCustomName)",98, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"NameImporter::hasErrorMethodNameCollision( const clang :: ObjCMethodDecl * method , unsigned paramIndex , StringRef suffixToStrip)",42, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"suppressFactoryMethodAsInit( const clang :: ObjCMethodDecl * method , ImportNameVersion version , CtorInitializerKind initKind)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"NameImporter::importNameImpl( const clang :: NamedDecl * D , ImportNameVersion version , clang :: DeclarationName givenName)",539, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"shouldIgnoreMacro( StringRef name , const clang :: MacroInfo * macro)",24, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"ClangImporter::shouldIgnoreMacro( StringRef Name , const clang :: MacroInfo * Macro)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"NameImporter::importMacroName( const clang :: IdentifierInfo * clangIdentifier , const clang :: MacroInfo * macro)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"NameImporter::importName( const clang :: NamedDecl * decl , ImportNameVersion version , clang :: DeclarationName givenName)",14, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"NameImporter::forEachDistinctImportName( const clang :: NamedDecl * decl , ImportNameVersion activeVersion , llvm :: function_ref<bool(ImportedName,ImportNameVersion)> action)",33, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportName.cpp,"NameImporter::getAllPropertyNames( clang :: ObjCInterfaceDecl * classDecl , bool forInstance)",67, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportEnumInfo.cpp,"getBestExtensibilityAttr( clang :: Preprocessor & pp , const clang :: EnumDecl * decl)",17, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportEnumInfo.cpp,"EnumInfo::classifyEnum( const clang :: EnumDecl * decl , clang :: Preprocessor & pp)",75, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportEnumInfo.cpp,"importer::getCommonWordPrefix( StringRef a , StringRef b , bool & followedByNonIdentifier)",27, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportEnumInfo.cpp,"importer::getCommonPluralPrefix( StringRef singular , StringRef plural)",41, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportEnumInfo.cpp,"EnumInfo::determineConstantNamePrefix( const clang :: EnumDecl * decl)",123, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportEnumInfo.cpp,"EnumInfoCache::getEnumInfo( const clang :: EnumDecl * decl)",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"isImportedCFPointer( clang :: QualType clangType , Type type)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::isOverAligned( const clang :: TypeDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::isOverAligned( clang :: QualType type)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ImportHint::operator ImportHintKind() const",1, 53, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ImportHint::ImportHint( ImportHintKind kind)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ImportHint::ImportHint( ImportHintKind kind , Type bridgedType)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"canImportAsOptional( ImportHint hint)",22, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ImportResult::ImportResult( Type type = Type() , ImportHint hint = ImportHint :: None)",3, 42, 8, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ImportResult::ImportResult( TypeBase * type , ImportHint hint = ImportHint :: None)",3, 42, 8, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ImportResult::operator bool() const",1, 67, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"getOptionalKind( ImportTypeKind kind , OptionalTypeKind OptKind)",8, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::SwiftTypeConverter( ClangImporter :: Implementation & impl , bool allowNSUIntegerAsInt , Bridgeability bridging)",5, 30, 6, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::Visit( clang :: QualType type)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::unwrapCType( Type T)",8, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitBuiltinType( const clang :: BuiltinType * type)",112, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitComplexType( const clang :: ComplexType * type)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitAtomicType( const clang :: AtomicType * type)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitMemberPointerType( const clang :: MemberPointerType * type)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitPointerType( const clang :: PointerType * type)",95, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitBlockPointerType( const clang :: BlockPointerType * type)",15, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitReferenceType( const clang :: ReferenceType * type)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitMemberPointer( const clang :: MemberPointerType * type)",6, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitArrayType( const clang :: ArrayType * type)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitConstantArrayType( const clang :: ConstantArrayType * type)",28, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitVectorType( const clang :: VectorType * type)",32, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitFunctionProtoType( const clang :: FunctionProtoType * type)",33, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitFunctionNoProtoType( const clang :: FunctionNoProtoType * type)",10, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitParenType( const clang :: ParenType * type)",8, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::importObjCTypeParamDecl( const clang :: ObjCTypeParamDecl * objcTypeParamDecl)",33, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitObjCTypeParamType( const clang :: ObjCTypeParamType * type)",10, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitTypedefType( const clang :: TypedefType * type)",121, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitAttributedType( const clang :: AttributedType * type)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitDecayedType( const clang :: DecayedType * type)",7, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitRecordType( const clang :: RecordType * type)",8, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::getBridgedNSErrorCode( TypeDecl * decl)",22, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::getAdjustedTypeDeclReferenceType( TypeDecl * type)",10, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitEnumType( const clang :: EnumType * type)",35, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitObjCObjectType( const clang :: ObjCObjectType * type)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::mapSwiftBridgeAttr( const clang :: NamedDecl * clangDecl)",25, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"SwiftTypeConverter::VisitObjCObjectPointerType( const clang :: ObjCObjectPointerType * type)",218, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"canBridgeTypes( ImportTypeKind importKind)",24, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"isCFAudited( ImportTypeKind importKind)",24, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"getUnmanagedType( ClangImporter :: Implementation & impl , Type payloadType)",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"isNSString( Type type)",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"adjustTypeForConcreteImport( ClangImporter :: Implementation & impl , clang :: QualType clangType , Type importedType , ImportTypeKind importKind , ImportHint hint , bool allowNSUIntegerAsInt , Bridgeability bridging , OptionalTypeKind optKind , bool resugarNSErrorPointer)",237, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::importType( clang :: QualType type , ImportTypeKind importKind , bool allowNSUIntegerAsInt , Bridgeability bridging , OptionalTypeKind optionality , bool resugarNSErrorPointer)",52, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::importTypeIgnoreIUO( clang :: QualType type , ImportTypeKind importKind , bool allowNSUIntegerAsInt , Bridgeability bridging , OptionalTypeKind optionality , bool resugarNSErrorPointer)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::shouldImportGlobalAsLet( clang :: QualType type)",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"nameContainsUnsigned( StringRef name)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::shouldAllowNSUIntegerAsInt( bool isFromSystemModule , const clang :: NamedDecl * decl)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::importPropertyType( const clang :: ObjCPropertyDecl * decl , bool isFromSystemModule)",37, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"applyNoEscape( Type type)",14, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::importFunctionReturnType( DeclContext * dc , const clang :: FunctionDecl * clangDecl , bool allowNSUIntegerAsInt)",38, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::importFunctionType( DeclContext * dc , const clang :: FunctionDecl * clangDecl , ArrayRef<const clang::ParmVarDecl*> params , bool isVariadic , bool isFromSystemModule , DeclName name , ParameterList * & parameterList)",25, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::importFunctionParameterList( DeclContext * dc , const clang :: FunctionDecl * clangDecl , ArrayRef<const clang::ParmVarDecl*> params , bool isVariadic , bool allowNSUIntegerAsInt , ArrayRef<Identifier> argNames)",88, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"isObjCMethodResultAudited( const clang :: Decl * decl)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::inferDefaultArgument( clang :: QualType type , OptionalTypeKind clangOptionality , DeclBaseName baseName , unsigned numParams , StringRef argumentLabel , bool isFirstParameter , bool isLastParameter , NameImporter & nameImporter)",86, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"adjustResultTypeForThrowingFunction( ForeignErrorConvention :: Info errorInfo , ImportedType importedType)",34, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"getForeignErrorInfo( ForeignErrorConvention :: Info errorInfo , CanType errorParamTy , CanType origResultTy)",28, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"mapGenericArgs( const DeclContext * fromDC , const DeclContext * toDC , Type type)",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::importMethodType( const DeclContext * dc , const clang :: ObjCMethodDecl * clangDecl , ArrayRef<const clang::ParmVarDecl*> params , bool isVariadic , bool isFromSystemModule , ParameterList ** bodyParams , ImportedName importedName , Optional<ForeignErrorConvention> & foreignErrorInfo , SpecialMethodKind kind)",297, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::importAccessorMethodType( const DeclContext * dc , const clang :: ObjCPropertyDecl * property , const clang :: ObjCMethodDecl * clangDecl , bool isFromSystemModule , ImportedName functionName , swift :: ParameterList ** params)",59, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::getStdlibModule()",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::getNamedModule( StringRef name)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"tryLoadModule( ASTContext & C , Identifier moduleName , bool importForwardDeclarations , llvm :: DenseMap<Identifier,ModuleDecl*> & checkedModules)",22, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::tryLoadFoundationModule()",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::tryLoadSIMDModule()",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::getNamedSwiftType( ModuleDecl * module , StringRef name)",40, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::getNamedSwiftType( StringRef moduleName , StringRef name)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::getNamedSwiftTypeSpecialization( ModuleDecl * module , StringRef name , ArrayRef<Type> args)",25, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::importDeclByName( StringRef name)",24, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::getNSObjectType()",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::matchesHashableBound( Type type)",32, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"getNamedProtocolType( ClangImporter :: Implementation & impl , StringRef name)",25, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::getSugaredTypeReference( TypeDecl * type)",16, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::getNSCopyingType()",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportType.cpp,"ClangImporter::Implementation::getNSObjectProtocolType()",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"getDefaultMakeStructRawValuedOptions()",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"isInSystemModule( DeclContext * D)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"getOverridableAccessLevel( const DeclContext * dc)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"createTypedNamedPattern( VarDecl * decl)",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"createVarWithPattern( ASTContext & ctx , DeclContext * dc , Identifier name , Type ty , VarDecl :: Specifier specifier , bool isImplicit , AccessLevel access , AccessLevel setterAccess)",28, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"createFuncOrAccessor( ASTContext & ctx , SourceLoc funcLoc , Optional<AccessorInfo> accessorInfo , DeclName name , SourceLoc nameLoc , ParameterList * bodyParams , Type resultTy , bool throws , DeclContext * dc , ClangNode clangNode)",31, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeComputed( AbstractStorageDecl * storage , AccessorDecl * getter , AccessorDecl * setter)",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"verifyNameMapping( MappedTypeNameKind NameMapping , StringRef left , StringRef right)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"getSwiftStdlibType( const clang :: TypedefNameDecl * D , Identifier Name , ClangImporter :: Implementation & Impl , bool * IsError , MappedTypeNameKind & NameMapping)",175, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"isNSDictionaryMethod( const clang :: ObjCMethodDecl * MD , clang :: Selector cmd)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeEnumRawValueConstructor( ClangImporter :: Implementation & Impl , EnumDecl * enumDecl)",75, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeEnumRawValueGetter( ClangImporter :: Implementation & Impl , EnumDecl * enumDecl , VarDecl * rawValueDecl)",67, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeStructRawValueGetter( ClangImporter :: Implementation & Impl , StructDecl * structDecl , VarDecl * computedVar , VarDecl * storedVar)",69, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeFieldGetterDecl( ClangImporter :: Implementation & Impl , StructDecl * importedDecl , VarDecl * importedFieldDecl , ClangNode clangNode = ClangNode())",29, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeFieldSetterDecl( ClangImporter :: Implementation & Impl , StructDecl * importedDecl , VarDecl * importedFieldDecl , ClangNode clangNode = ClangNode())",36, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeIndirectFieldAccessors( ClangImporter :: Implementation & Impl , const clang :: IndirectFieldDecl * indirectField , ArrayRef<VarDecl*> members , StructDecl * importedStructDecl , VarDecl * importedFieldDecl)",93, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeUnionFieldAccessors( ClangImporter :: Implementation & Impl , StructDecl * importedUnionDecl , VarDecl * importedFieldDecl)",77, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"getAccessorDeclarationName( clang :: ASTContext & Ctx , StructDecl * structDecl , VarDecl * fieldDecl , const char * suffix)",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeBitFieldAccessors( ClangImporter :: Implementation & Impl , clang :: RecordDecl * structDecl , StructDecl * importedStructDecl , clang :: FieldDecl * fieldDecl , VarDecl * importedFieldDecl)",165, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"createDefaultConstructor( ClangImporter :: Implementation & Impl , StructDecl * structDecl)",75, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"createValueConstructor( ClangImporter :: Implementation & Impl , StructDecl * structDecl , ArrayRef<VarDecl*> members , bool wantCtorParamNames , bool wantBody)",120, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"addSynthesizedProtocolAttrs( ClangImporter :: Implementation & Impl , NominalTypeDecl * nominal , ArrayRef<KnownProtocolKind> synthesizedProtocolAttrs)",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"addSynthesizedTypealias( NominalTypeDecl * nominal , Identifier name , Type underlyingType)",15, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeStructRawValued( ClangImporter :: Implementation & Impl , StructDecl * structDecl , Type underlyingType , ArrayRef<KnownProtocolKind> synthesizedProtocolAttrs , MakeStructRawValuedOptions options = getDefaultMakeStructRawValuedOptions() , AccessLevel setterAccess = AccessLevel :: Private)",46, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"createRawValueBridgingConstructor( ClangImporter :: Implementation & Impl , StructDecl * structDecl , VarDecl * computedRawValue , VarDecl * storedRawValue , bool wantLabel , bool wantBody)",58, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"makeStructRawValuedWithBridge( ClangImporter :: Implementation & Impl , StructDecl * structDecl , Type storedUnderlyingType , Type bridgedType , ArrayRef<KnownProtocolKind> synthesizedProtocolAttrs , bool makeUnlabeledValueInit = false)",67, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"buildSubscriptGetterDecl( ClangImporter :: Implementation & Impl , SubscriptDecl * subscript , const FuncDecl * getter , Type elementTy , DeclContext * dc , ParamDecl * index)",37, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"buildSubscriptSetterDecl( ClangImporter :: Implementation & Impl , SubscriptDecl * subscript , const FuncDecl * setter , Type elementInterfaceTy , DeclContext * dc , ParamDecl * index)",51, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"decomposeSubscriptSetter( FuncDecl * setter)",15, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"rectifySubscriptTypes( Type getterType , bool getterIsIUO , Type setterType , bool canUpdateType)",32, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"applyAvailableAttribute( Decl * decl , AvailabilityContext & info , ASTContext & C)",23, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"inferProtocolMemberAvailability( ClangImporter :: Implementation & impl , DeclContext * dc , Decl * member)",24, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"addErrorDomain( NominalTypeDecl * swiftDecl , clang :: NamedDecl * errorDomainDecl , ClangImporter :: Implementation & importer)",60, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"addErrorDomain( NominalTypeDecl * swiftDecl , StringRef errorDomainName , ClangImporter :: Implementation & importer)",23, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"getAccessorPropertyType( const clang :: FunctionDecl * accessor , bool isSetter , Optional<unsigned> selfIndex)",17, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"shouldSuppressGenericParamsImport( const LangOptions & langOpts , const clang :: ObjCInterfaceDecl * decl)",31, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"shouldAlsoImportAsClassMethod( FuncDecl * method)",27, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"classImplementsProtocol( const clang :: ObjCInterfaceDecl * constInterface , const clang :: ObjCProtocolDecl * constProto , bool checkCategories)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"applyPropertyOwnership( VarDecl * prop , clang :: ObjCPropertyDecl :: PropertyAttributeKind attrs)",31, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"isPrintLikeMethod( DeclName name , const DeclContext * dc)",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"APSIntRefDenseMapInfo::getEmptyKey()",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"APSIntRefDenseMapInfo::getTombstoneKey()",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"APSIntRefDenseMapInfo::getHashValue( const llvm :: APSInt * ptrVal)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"APSIntRefDenseMapInfo::isEqual( const llvm :: APSInt * lhs , const llvm :: APSInt * rhs)",6, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::getVersion() const",1, 61, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::getActiveSwiftVersion() const",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::isActiveSwiftVersion() const",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importFullName( const clang :: NamedDecl * D , Optional<ImportedName> & correctSwiftName)",56, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::getClangDeclName( const clang :: TagDecl * decl , Optional<ImportedName> & correctSwiftName)",56, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::isFactoryInit( ImportedName & name)",6, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::SwiftDeclConverter( ClangImporter :: Implementation & impl , ImportNameVersion vers)",3, 38, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::hadForwardDeclaration() const",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitDecl( const clang :: Decl * decl)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitTranslationUnitDecl( const clang :: TranslationUnitDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitNamespaceDecl( const clang :: NamespaceDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitUsingDirectiveDecl( const clang :: UsingDirectiveDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitNamespaceAliasDecl( const clang :: NamespaceAliasDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitLabelDecl( const clang :: LabelDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::markAsVariant( Decl * decl , ImportedName correctSwiftName)",70, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitTypedefNameDecl( const clang :: TypedefNameDecl * Decl)",168, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitUnresolvedUsingTypenameDecl( const clang :: UnresolvedUsingTypenameDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitEnumDecl( const clang :: EnumDecl * decl)",463, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitRecordDecl( const clang :: RecordDecl * decl)",245, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitClassTemplateSpecializationDecl( const clang :: ClassTemplateSpecializationDecl * decl)",6, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitClassTemplatePartialSpecializationDecl( const clang :: ClassTemplatePartialSpecializationDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitTemplateTypeParmDecl( const clang :: TemplateTypeParmDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitEnumConstantDecl( const clang :: EnumConstantDecl * decl)",101, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitUnresolvedUsingValueDecl( const clang :: UnresolvedUsingValueDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitIndirectFieldDecl( const clang :: IndirectFieldDecl * decl)",40, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::getNonSelfParamList( DeclContext * dc , const clang :: FunctionDecl * decl , Optional<unsigned> selfIdx , ArrayRef<Identifier> argNames , bool allowNSUIntegerAsInt , bool isAccessor)",21, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitFunctionDecl( const clang :: FunctionDecl * decl)",31, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importFunctionDecl( const clang :: FunctionDecl * decl , ImportedName importedName , Optional<ImportedName> correctSwiftName , Optional<AccessorInfo> accessorInfo)",69, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::finishFuncDecl( const clang :: FunctionDecl * decl , AbstractFunctionDecl * result)",29, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitCXXMethodDecl( const clang :: CXXMethodDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitFieldDecl( const clang :: FieldDecl * decl)",62, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCIvarDecl( const clang :: ObjCIvarDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCAtDefsFieldDecl( const clang :: ObjCAtDefsFieldDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitVarDecl( const clang :: VarDecl * decl)",78, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitImplicitParamDecl( const clang :: ImplicitParamDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitParmVarDecl( const clang :: ParmVarDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitNonTypeTemplateParmDecl( const clang :: NonTypeTemplateParmDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitTemplateDecl( const clang :: TemplateDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitUsingDecl( const clang :: UsingDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitUsingShadowDecl( const clang :: UsingShadowDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::addObjCAttribute( ValueDecl * decl , Optional<ObjCSelector> name)",20, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::addObjCAttribute( ValueDecl * decl , Identifier name)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCMethodDecl( const clang :: ObjCMethodDecl * decl)",12, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::isMethodAlreadyImported( ObjCSelector selector , bool isInstance , DeclContext * dc , llvm :: function_ref<bool(AbstractFunctionDecl*fn)> filter)",31, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importObjCMethodDecl( const clang :: ObjCMethodDecl * decl , DeclContext * dc , Optional<AccessorInfo> accessorInfo)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::isAcceptableResult( Decl * fn , Optional<AccessorInfo> accessorInfo)",12, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importObjCMethodDecl( const clang :: ObjCMethodDecl * decl , DeclContext * dc , bool forceClassMethod , Optional<AccessorInfo> accessorInfo)",85, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importNonInitObjCMethodDecl( const clang :: ObjCMethodDecl * decl , DeclContext * dc , ImportedName importedName , ObjCSelector selector , bool forceClassMethod , Optional<AccessorInfo> accessorInfo)",186, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCCategoryDecl( const clang :: ObjCCategoryDecl * decl)",44, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::resolveSwiftDeclImpl( const U * decl , Identifier name , ModuleDecl * adapter)",27, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::resolveSwiftDecl( const U * decl , Identifier name , ClangModuleUnit * clangModule)",15, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::hasNativeSwiftDecl( const U * decl , Identifier name , const DeclContext * dc , T * & swiftDecl)",8, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::markMissingSwiftDecl( ValueDecl * VD)",12, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCProtocolDecl( const clang :: ObjCProtocolDecl * decl)",80, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::addInferredAttributes( Decl * decl , unsigned attributes)",9, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCInterfaceDecl( const clang :: ObjCInterfaceDecl * decl)",188, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCImplDecl( const clang :: ObjCImplDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCPropertyDecl( const clang :: ObjCPropertyDecl * decl)",12, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::handlePropertyRedeclaration( VarDecl * original , const clang :: ObjCPropertyDecl * redecl)",44, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importObjCPropertyDecl( const clang :: ObjCPropertyDecl * decl , DeclContext * dc)",145, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCCompatibleAliasDecl( const clang :: ObjCCompatibleAliasDecl * decl)",35, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitLinkageSpecDecl( const clang :: LinkageSpecDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitObjCPropertyImplDecl( const clang :: ObjCPropertyImplDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitFileScopeAsmDecl( const clang :: FileScopeAsmDecl * decl)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitAccessSpecDecl( const clang :: AccessSpecDecl * decl)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitFriendDecl( const clang :: FriendDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitFriendTemplateDecl( const clang :: FriendTemplateDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitStaticAssertDecl( const clang :: StaticAssertDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitBlockDecl( const clang :: BlockDecl * decl)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitClassScopeFunctionSpecializationDecl( const clang :: ClassScopeFunctionSpecializationDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::VisitImportDecl( const clang :: ImportDecl * decl)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"getImmutableCFSuperclassName( const clang :: TypedefNameDecl * decl , clang :: ASTContext & ctx)",21, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"findImmutableCFSuperclass( ClangImporter :: Implementation & impl , const clang :: TypedefNameDecl * decl , CFPointeeInfo subclassInfo)",36, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"findCFSuperclass( ClangImporter :: Implementation & impl , const clang :: TypedefNameDecl * decl , CFPointeeInfo info)",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importCFClassType( const clang :: TypedefNameDecl * decl , Identifier className , CFPointeeInfo info , EffectiveClangContext effectiveContext)",60, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importCompatibilityTypeAlias( const clang :: NamedDecl * decl , ImportedName compatibilityName , ImportedName correctSwiftName)",40, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"inheritanceListContainsProtocol( D decl , const ProtocolDecl * proto)",11, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"conformsToProtocolInOriginalModule( NominalTypeDecl * nominal , const ProtocolDecl * proto , ModuleDecl * foundationModule , LazyResolver * resolver)",35, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importSwiftNewtype( const clang :: TypedefNameDecl * decl , clang :: SwiftNewtypeAttr * newtypeAttr , DeclContext * dc , Identifier name)",159, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importEnumCase( const clang :: EnumConstantDecl * decl , const clang :: EnumDecl * clangEnum , EnumDecl * theEnum , Decl * correctDecl)",59, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importOptionConstant( const clang :: EnumConstantDecl * decl , const clang :: EnumDecl * clangEnum , NominalTypeDecl * theStruct)",36, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importEnumCaseAlias( Identifier name , const clang :: EnumConstantDecl * alias , ValueDecl * original , const clang :: EnumDecl * clangEnum , NominalTypeDecl * importedEnum , DeclContext * importIntoDC)",28, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importAsOptionSetType( DeclContext * dc , Identifier name , const clang :: EnumDecl * decl)",26, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importGlobalAsInitializer( const clang :: FunctionDecl * decl , DeclName name , DeclContext * dc , CtorInitializerKind initKind , Optional<ImportedName> correctSwiftName)",77, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importGlobalAsMethod( const clang :: FunctionDecl * decl , DeclName name , DeclContext * dc , Optional<unsigned> selfIdx , Optional<ImportedName> correctSwiftName , Optional<AccessorInfo> accessorInfo)",97, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::getImplicitProperty( ImportedName importedName , const clang :: FunctionDecl * accessor)",185, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importConstructor( const clang :: ObjCMethodDecl * objcMethod , DeclContext * dc , bool implicit , Optional<CtorInitializerKind> kind , bool required)",50, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::findLatestIntroduction( const clang :: Decl * D)",21, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::existingConstructorIsWorse( const ConstructorDecl * existingCtor , const clang :: ObjCMethodDecl * objcMethod , CtorInitializerKind kind)",59, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importConstructor( const clang :: ObjCMethodDecl * objcMethod , DeclContext * dc , bool implicit , Optional<CtorInitializerKind> kindIn , bool required , ObjCSelector selector , ImportedName importedName , ArrayRef<const clang::ParmVarDecl*> args , bool variadic , bool & redundant)",230, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::recordObjCOverride( AbstractFunctionDecl * decl)",53, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"areParameterTypesEqual( const ParameterList & params1 , const ParameterList & params2)",19, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::recordObjCOverride( SubscriptDecl * subscript)",39, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importSubscript( Decl * decl , const clang :: ObjCMethodDecl * objcMethod)",275, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importAccessor( clang :: ObjCMethodDecl * clangAccessor , AbstractStorageDecl * storage , AccessorKind accessorKind , DeclContext * dc)",16, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::addProtocols( ProtocolDecl * protocol , SmallVectorImpl<ProtocolDecl*> & protocols , llvm :: SmallPtrSetImpl<ProtocolDecl*> & known)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importObjCProtocols( Decl * decl , const clang :: ObjCProtocolList & clangProtocols , SmallVectorImpl<TypeLoc> & inheritedTypes)",21, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::addObjCProtocolConformances( Decl * decl , ArrayRef<ProtocolDecl*> protocols)",33, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importObjCGenericParams( const clang :: ObjCInterfaceDecl * decl , DeclContext * dc)",59, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importMirroredProtocolMembers( const clang :: ObjCContainerDecl * decl , DeclContext * dc , ArrayRef<ProtocolDecl*> protocols , SmallVectorImpl<Decl*> & members , ASTContext & Ctx)",116, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"isMirrorImportSuppressedBy( ClangImporter :: Implementation & importer , const clang :: ObjCMethodDecl * first , const clang :: ObjCMethodDecl * second)",19, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"compareMethodsForMirrorImport( ClangImporter :: Implementation & importer , const clang :: ObjCMethodDecl * first , const clang :: ObjCMethodDecl * second)",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"suppressOverriddenMethods( ClangImporter :: Implementation & importer , const clang :: ObjCMethodDecl * method , MutableArrayRef<MirroredMethodEntry> entries)",29, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importNonOverriddenMirroredMethods( DeclContext * dc , MutableArrayRef<MirroredMethodEntry> entries , SmallVectorImpl<Decl*> & members)",42, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"SwiftDeclConverter::importInheritedConstructors( ClassDecl * classDecl , SmallVectorImpl<Decl*> & newMembers)",111, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::importDeclCached( const clang :: NamedDecl * ClangDecl , ImportNameVersion version)",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"canSkipOverTypedef( ClangImporter :: Implementation & Impl , const clang :: NamedDecl * D , bool & TypedefIsSuperfluous)",43, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::getSwiftNameFromClangName( StringRef replacement)",29, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"importer::isSpecialUIKitStructZeroProperty( const clang :: NamedDecl * decl)",14, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::importAttributes( const clang :: NamedDecl * ClangDecl , Decl * MappedDecl , const clang :: ObjCContainerDecl * NewContext)",231, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::importDeclImpl( const clang :: NamedDecl * ClangDecl , ImportNameVersion version , bool & TypedefIsSuperfluous , bool & HadForwardDeclaration)",130, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::startedImportingEntity()",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"finishTypeWitnesses( NormalProtocolConformance * conformance)",46, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"finishInheritedConformances( NormalProtocolConformance * conformance)",21, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"recursivelySubstituteBaseType( const NormalProtocolConformance * conformance , DependentMemberType * depMemTy)",15, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"finishSignatureConformances( NormalProtocolConformance * conformance)",27, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"finishMissingOptionalWitnesses( NormalProtocolConformance * conformance)",33, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::finishNormalConformance( NormalProtocolConformance * conformance , uint64_t unused)",28, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::importDeclAndCacheImpl( const clang :: NamedDecl * ClangDecl , ImportNameVersion version , bool SuperfluousTypedefsAreTransparent)",44, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::importMirroredDecl( const clang :: NamedDecl * decl , DeclContext * dc , ImportNameVersion version , ProtocolDecl * proto)",59, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::importDeclContextImpl( const clang :: DeclContext * dc)",24, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::buildGenericSignature( GenericParamList * genericParams , DeclContext * dc)",14, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::buildGenericEnvironment( GenericParamList * genericParams , DeclContext * dc)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::importDeclContextOf( const clang :: Decl * decl , EffectiveClangContext context)",94, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::createConstant( Identifier name , DeclContext * dc , Type type , const clang :: APValue & value , ConstantConvertKind convertKind , bool isStatic , ClangNode ClangN)",66, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::createConstant( Identifier name , DeclContext * dc , Type type , StringRef value , ConstantConvertKind convertKind , bool isStatic , ClangNode ClangN)",8, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::createConstant( Identifier name , DeclContext * dc , Type type , Expr * valueExpr , ConstantConvertKind convertKind , bool isStatic , ClangNode ClangN)",97, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::markUnavailable( ValueDecl * decl , StringRef unavailabilityMsgRef)",8, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::createUnavailableDecl( Identifier name , DeclContext * dc , Type type , StringRef UnavailableMessage , bool isStatic , ClangNode ClangN)",18, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::loadAllMembers( Decl * D , uint64_t extra)",16, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::loadAllMembersIntoExtension( Decl * D , uint64_t extra)",46, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"findMemberThatWillLandInAnExtensionContext( Decl * member)",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::addMemberAndAlternatesToExtension( clang :: NamedDecl * decl , ImportedName newName , ImportNameVersion nameVersion , ExtensionDecl * ext)",25, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"figureOutTheDeclarationContextToImportInto( Decl * D , DeclContext * & DC , IterableDeclContext * & IDC)",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"loadMembersOfBaseImportedFromClang( ExtensionDecl * ext)",14, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::loadAllMembersOfObjcContainer( Decl * D , const clang :: ObjCContainerDecl * objcContainer)",23, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::insertMembersAndAlternates( const clang :: NamedDecl * nd , SmallVectorImpl<Decl*> & members)",26, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::collectMembersToAdd( const clang :: ObjCContainerDecl * objcContainer , Decl * D , DeclContext * DC , SmallVectorImpl<Decl*> & members)",33, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::loadAllConformances( const Decl * D , uint64_t contextData , SmallVectorImpl<ProtocolConformance*> & Conformances)",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::Implementation::getSpecialTypedefKind( clang :: TypedefNameDecl * decl)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangImporter::getEnumConstantName( const clang :: EnumConstantDecl * enumConstant)",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangDeclTraceFormatter::traceName( const void * Entity , raw_ostream & OS) const",10, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangDeclTraceFormatter::printClangShortLoc( raw_ostream & OS , clang :: SourceManager * CSM , clang :: SourceLocation L)",10, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"ClangDeclTraceFormatter::traceLoc( const void * Entity , SourceManager * SM , clang :: SourceManager * CSM , raw_ostream & OS) const",12, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/ImportDecl.cpp,"FrontendStatsTracer::getTraceFormatter<constclang::Decl*>()",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::getNonNullArgs( const clang :: Decl * decl , ArrayRef<const clang::ParmVarDecl*> params)",30, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::getDefinitionForClangTypeDecl( const clang :: Decl * D)",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::getClangSubmoduleForDecl( const clang :: Decl * D , bool allowForwardDeclaration)",17, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::getClangDeclContextType( const clang :: DeclContext * dc)",25, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"isCollectionName( StringRef typeName)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::getClangTypeNameForOmission( clang :: ASTContext & ctx , clang :: QualType type)",312, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"retrieveNewTypeAttr( const clang :: TypedefNameDecl * decl)",14, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::getSwiftNewtypeAttr( const clang :: TypedefNameDecl * decl , ImportNameVersion version)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::findSwiftNewtype( const clang :: NamedDecl * decl , clang :: Sema & clangSema , ImportNameVersion version)",38, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::isNSString( const clang :: Type * type)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::isNSString( clang :: QualType qt)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::isNSNotificationGlobal( const clang :: NamedDecl * decl)",25, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::hasNativeSwiftDecl( const clang :: Decl * decl)",30, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::translateNullability( clang :: NullabilityKind kind)",14, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::hasDesignatedInitializers( const clang :: ObjCInterfaceDecl * classDecl)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::isDesignatedInitializer( const clang :: ObjCInterfaceDecl * classDecl , const clang :: ObjCMethodDecl * method)",14, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::isRequiredInitializer( const clang :: ObjCMethodDecl * method)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"isAccessibilityConformingContext( const clang :: DeclContext * ctx)",20, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::shouldImportPropertyAsAccessors( const clang :: ObjCPropertyDecl * prop)",16, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::isInitMethod( const clang :: ObjCMethodDecl * method)",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::isObjCId( const clang :: Decl * decl)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::isUnavailableInSwift( const clang :: Decl * decl , const PlatformAvailability & platformAvailability , bool enableObjCInterop)",32, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/ClangAdapter.cpp,"importer::getParamOptionality( version :: Version swiftVersion , const clang :: ParmVarDecl * param , bool knownNonNull)",24, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"matchesExistingDecl( clang :: Decl * decl , clang :: Decl * existingDecl)",8, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"swift::SwiftLookupTableWriter::SwiftLookupTableWriter( clang :: ModuleFileExtension * extension , clang :: ASTWriter & writer , ASTContext & ctx , const PlatformAvailability & avail , bool inferIAM)",5, 62, 6, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"swift::SwiftLookupTableReader::SwiftLookupTableReader( clang :: ModuleFileExtension * extension , clang :: ASTReader & reader , clang :: serialization :: ModuleFile & moduleFile , std :: function<void()> onRemove , std :: unique_ptr<SerializedBaseNameToEntitiesTable> serializedTable , ArrayRef<clang::serialization::DeclID> categories , std :: unique_ptr<SerializedGlobalsAsMembersTable> globalsAsMembersTable)",13, 67, 8, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"swift::SwiftLookupTableReader::getASTReader() const",1, 60, 2, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"swift::SwiftLookupTableReader::getModuleFile()",1, 75, 2, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"swift::SwiftLookupTableReader::categories() const",3, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SerializedSwiftName::toDeclBaseName( ASTContext & Context) const",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::contextRequiresName( ContextKind kind)",14, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"translateDeclToContext( clang :: NamedDecl * decl)",35, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::translateDeclContext( const clang :: DeclContext * dc)",20, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::translateContext( EffectiveClangContext context)",20, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::resolveContext( StringRef unresolvedName)",17, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::addCategory( clang :: ObjCCategoryDecl * category)",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::resolveUnresolvedEntries( SmallVectorImpl<SingleEntry> & unresolved)",59, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"isGlobalAsMember( SwiftLookupTable :: SingleEntry entry , SwiftLookupTable :: StoredContext context)",34, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::addLocalEntry( SingleEntry newEntry , SmallVectorImpl<uint64_t> & entries)",64, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::addEntry( DeclName name , SingleEntry newEntry , EffectiveClangContext effectiveContext)",51, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::findOrCreate( SerializedSwiftName baseName)",24, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::lookup( SerializedSwiftName baseName , llvm :: Optional<StoredContext> searchContext)",23, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::lookupGlobalsAsMembers( StoredContext context)",27, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::lookupGlobalsAsMembers( EffectiveClangContext context)",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::allGlobalsAsMembers()",23, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::lookup( SerializedSwiftName baseName , EffectiveClangContext searchContext)",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::allBaseNames()",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::lookupObjCMembers( SerializedSwiftName baseName)",31, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::categories()",15, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"printName( clang :: NamedDecl * named , llvm :: raw_ostream & out)",50, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::deserializeAll()",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"printStoredContext( SwiftLookupTable :: StoredContext context , llvm :: raw_ostream & out)",15, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"getEncodedDeclID( uint64_t entry)",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"getEncodedModuleMacroIDs( uint64_t entry)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"printStoredEntry( const SwiftLookupTable * table , uint64_t entry , llvm :: raw_ostream & out)",21, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::dump() const",87, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableWriterInfo::BaseNameToEntitiesTableWriterInfo( SwiftLookupTable & table , clang :: ASTWriter & writer)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableWriterInfo::ComputeHash( key_type_ref key)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableWriterInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",32, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableWriterInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",6, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableWriterInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",41, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableWriterInfo::GlobalsAsMembersTableWriterInfo( SwiftLookupTable & table , clang :: ASTWriter & writer)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableWriterInfo::ComputeHash( key_type_ref key)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableWriterInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",19, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableWriterInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",6, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableWriterInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",28, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTableWriter::writeExtensionContents( clang :: Sema & sema , llvm :: BitstreamWriter & stream)",80, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableReaderInfo::GetInternalKey( external_key_type key)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableReaderInfo::GetExternalKey( internal_key_type key)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableReaderInfo::ComputeHash( internal_key_type key)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableReaderInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableReaderInfo::ReadKeyDataLength( const uint8_t * & data)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableReaderInfo::ReadKey( const uint8_t * data , unsigned length)",18, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"BaseNameToEntitiesTableReaderInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",35, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableReaderInfo::GetInternalKey( external_key_type key)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableReaderInfo::GetExternalKey( internal_key_type key)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableReaderInfo::ComputeHash( internal_key_type key)",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableReaderInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableReaderInfo::ReadKeyDataLength( const uint8_t * & data)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableReaderInfo::ReadKey( const uint8_t * data , unsigned length)",5, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"GlobalsAsMembersTableReaderInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",16, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::mapStoredDecl( uint64_t & entry)",19, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"isPCH( SwiftLookupTableReader & reader)",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::mapStoredMacro( uint64_t & entry , bool assumeModule)",49, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTable::mapStored( uint64_t & entry , bool assumeModule)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTableReader::~SwiftLookupTableReader()",3, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTableReader::create( clang :: ModuleFileExtension * extension , clang :: ASTReader & reader , clang :: serialization :: ModuleFile & moduleFile , std :: function<void()> onRemove , const llvm :: BitstreamCursor & stream)",95, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTableReader::getBaseNames()",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTableReader::lookup( SerializedSwiftName baseName , SmallVectorImpl<SwiftLookupTable::FullTableEntry> & entries)",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTableReader::getGlobalsAsMembersContexts()",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTableReader::lookupGlobalsAsMembers( SwiftLookupTable :: StoredContext context , SmallVectorImpl<uint64_t> & entries)",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftNameLookupExtension::getExtensionMetadata() const",9, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftNameLookupExtension::hashExtension( llvm :: hash_code code) const",7, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"importer::addEntryToLookupTable( SwiftLookupTable & table , clang :: NamedDecl * named , NameImporter & nameImporter)",65, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"getExplicitParentModule( const clang :: Module * module)",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"importer::addMacrosToLookupTable( SwiftLookupTable & table , NameImporter & nameImporter)",85, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"importer::finalizeLookupTable( SwiftLookupTable & table , NameImporter & nameImporter)",18, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftLookupTableWriter::populateTable( SwiftLookupTable & table , NameImporter & nameImporter)",23, 3, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftNameLookupExtension::createExtensionWriter( clang :: ASTWriter & writer)",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/SwiftLookupTable.cpp,"SwiftNameLookupExtension::createExtensionReader( const clang :: ModuleFileExtensionMetadata & metadata , clang :: ASTReader & reader , clang :: serialization :: ModuleFile & mod , const llvm :: BitstreamCursor & stream)",39, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMOptions::getDefault()",1, 51, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"appendUniq( NameBuffer & src , StringRef toAppend)",13, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"skipLeadingUnderscores( StringRef str)",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"formHumbleCamelName( StringRef str , NameBuffer & out)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"formHumbleCamelName( StringRef left , StringRef right , NameBuffer & out)",22, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"hasWord( StringRef s , StringRef matchWord)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"dropWordUniq( StringRef str , StringRef word , NameBuffer & out)",11, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"getSubmodule( const clang :: NamedDecl * decl , clang :: Sema & clangSema)",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"getTopModule( clang :: Module * m)",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"getTopModule( const clang :: NamedDecl * decl , clang :: Sema & clangSema)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::IAMInference( ASTContext & ctx , clang :: Sema & sema , IAMOptions opts)",4, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::importAsTypeID( const clang :: QualType typeIDTy , EffectiveClangContext effectiveDC)",6, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::importAsConstructor( StringRef name , StringRef initSpecifier , ArrayRef<const clang::ParmVarDecl*> params , EffectiveClangContext effectiveDC)",31, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::importAsInstanceProperty( StringRef name , StringRef propSpec , unsigned selfIdx , ArrayRef<const clang::ParmVarDecl*> nonSelfParams , const clang :: FunctionDecl * pairedAccessor , EffectiveClangContext effectiveDC)",12, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::importAsInstanceMethod( StringRef name , unsigned selfIdx , ArrayRef<const clang::ParmVarDecl*> nonSelfParams , EffectiveClangContext effectiveDC)",7, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::importAsStaticProperty( StringRef name , EffectiveClangContext effectiveDC)",5, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::importAsStaticProperty( StringRef name , StringRef propSpec , ArrayRef<const clang::ParmVarDecl*> nonSelfParams , const clang :: FunctionDecl * pairedAccessor , EffectiveClangContext effectiveDC)",12, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::importAsStaticMethod( StringRef name , ArrayRef<const clang::ParmVarDecl*> nonSelfParams , EffectiveClangContext effectiveDC)",7, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::getIdentifier( StringRef str)",5, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::clangLookupTypeDecl( StringRef name)",8, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::clangLookupFunction( StringRef name)",4, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::findTypeAndMatch( StringRef workingName , NameBuffer & outStr)",29, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::findPairedAccessor( StringRef name , StringRef propSpec)",19, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::getHumbleBaseName( StringRef name , bool isInitializer)",8, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::formDeclName( StringRef baseName , bool isInitializer)",3, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::formDeclName( StringRef baseName , bool isInitializer , ArrayRef<const clang::ParmVarDecl*> params , StringRef firstPrefix = "")",68, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::getEffectiveDC( clang :: QualType qt)",38, 4, 2, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"getTypeName( clang :: QualType qt)",15, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::matchTypeName( StringRef str , clang :: QualType qt , NameBuffer & outStr)",22, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::match( StringRef str , StringRef toMatch , NameBuffer & outStr)",29, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"roughlyEqual( clang :: QualType left , clang :: QualType right)",10, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"isValidAsStaticProperty( const clang :: FunctionDecl * getterDecl , const clang :: FunctionDecl * setterDecl = nullptr)",19, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"isValidAsInstanceProperty( const clang :: FunctionDecl * getterDecl , const clang :: FunctionDecl * setterDecl = nullptr)",36, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::validToImportAsProperty( const clang :: FunctionDecl * originalDecl , StringRef propSpec , Optional<unsigned> selfIndex , const clang :: FunctionDecl * & pairedAccessor)",34, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::inferVar( const clang :: VarDecl * varDecl)",27, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::infer( const clang :: NamedDecl * clangDecl)",138, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMInference::clangLookup( StringRef name , clang :: Sema :: LookupNameKind kind)",12, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/IAMInference.cpp,"IAMResult::infer( ASTContext & ctx , clang :: Sema & clangSema , const clang :: NamedDecl * decl , IAMOptions opts)",5, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/CFTypeInfo.cpp,"SortByLengthComparator::operator ( )( StringRef lhs , StringRef rhs) const",4, 6, 4, 0
repos/cpp/swift/lib/ClangImporter/CFTypeInfo.cpp,"isKnownCFTypeName( StringRef name)",4, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/CFTypeInfo.cpp,"CFPointeeInfo::classifyTypedef( const clang :: TypedefNameDecl * typedefDecl)",36, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/CFTypeInfo.cpp,"importer::isCFTypeDecl( const clang :: TypedefNameDecl * Decl)",6, 2, 0, 0
repos/cpp/swift/lib/ClangImporter/CFTypeInfo.cpp,"importer::getCFTypeName( const clang :: TypedefNameDecl * decl)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckRequestFunctions.cpp,"InheritedTypeRequest::evaluate( Evaluator & evaluator , llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> decl , unsigned index , TypeResolutionStage stage) const",53, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckRequestFunctions.cpp,"SuperclassTypeRequest::evaluate( Evaluator & evaluator , NominalTypeDecl * nominalDecl , TypeResolutionStage stage) const",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckRequestFunctions.cpp,"EnumRawTypeRequest::evaluate( Evaluator & evaluator , EnumDecl * enumDecl , TypeResolutionStage stage) const",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckRequestFunctions.cpp,"swift::registerTypeCheckerRequestFunctions( Evaluator & evaluator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"getCaptureLoc( AnyFunctionRef AFR)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"FindCapturedVars::FindCapturedVars( TypeChecker & tc , SmallVectorImpl<CapturedValue> & Captures , SourceLoc & GenericParamCaptureLoc , SourceLoc & DynamicSelfCaptureLoc , DynamicSelfType * & DynamicSelf , AnyFunctionRef AFR)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"FindCapturedVars::checkType( Type type , SourceLoc loc)",84, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"FindCapturedVars::addCapture( CapturedValue capture , SourceLoc Loc)",54, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"FindCapturedVars::shouldWalkIntoLazyInitializers()",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"FindCapturedVars::walkToDeclRefExpr( DeclRefExpr * DRE)",199, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"FindCapturedVars::propagateCaptures( AnyFunctionRef innerClosure , SourceLoc captureLoc)",38, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"FindCapturedVars::walkToDeclPre( Decl * D)",15, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"FindCapturedVars::usesTypeMetadataOfFormalType( Expr * E)",150, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"FindCapturedVars::walkToExprPre( Expr * E)",43, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"TypeChecker::maybeDiagnoseCaptures( Expr * E , AnyFunctionRef AFR)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCaptures.cpp,"TypeChecker::computeCaptures( AnyFunctionRef AFR)",121, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"adjustFunctionTypeForOverride( Type & type)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"dropResultOptionality( Type type , unsigned uncurryLevel)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"swift::getMemberTypeForComparison( ASTContext & ctx , ValueDecl * member , ValueDecl * derivedDecl)",57, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"swift::isOverrideBasedOnType( ValueDecl * decl , Type declTy , ValueDecl * parentDecl , Type parentDeclTy)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"areOverrideCompatibleSimple( ValueDecl * decl , ValueDecl * parentDecl)",57, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"diagnoseMismatchedOptionals( const ValueDecl * member , const ParameterList * params , TypeLoc resultTL , const ValueDecl * parentMember , const ParameterList * parentParams , Type owningTy , bool treatIUOResultAsError)",147, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"noteFixableMismatchedTypes( ValueDecl * decl , const ValueDecl * base)",43, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"operator ++( OverrideCheckingAttempt & attempt)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"diagnoseGeneralOverrideFailure( ValueDecl * decl , ArrayRef<OverrideMatch> matches , OverrideCheckingAttempt attempt)",45, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"parameterTypesMatch( const ValueDecl * derivedDecl , const ValueDecl * baseDecl , TypeMatchOptions matchMode)",53, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverrideMatcher::operator bool() const",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverrideMatcher::isClassOverride() const",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverrideMatcher::isProtocolOverride() const",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverrideMatcher::getDeclComparisonType()",7, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverrideMatcher::getSuperMemberDeclType( ValueDecl * baseDecl) const",10, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverrideMatcher::OverrideMatcher( ValueDecl * decl)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverrideMatcher::match( OverrideCheckingAttempt attempt)",120, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverrideMatcher::checkOverride( ValueDecl * baseDecl , OverrideCheckingAttempt attempt)",243, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"invalidateOverrideAttribute( ValueDecl * decl)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverrideMatcher::checkPotentialOverrides( SmallVectorImpl<OverrideMatch> & matches , OverrideCheckingAttempt attempt)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"swift::checkOverrides( ValueDecl * decl)",91, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"AttributeOverrideChecker::AttributeOverrideChecker( ValueDecl * base , ValueDecl * override)",2, 79, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"AttributeOverrideChecker::visitAvailableAttr( AvailableAttr * attr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"AttributeOverrideChecker::visitRethrowsAttr( RethrowsAttr * attr)",11, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"AttributeOverrideChecker::visitObjCAttr( ObjCAttr * attr)",35, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"swift::overrideRequiresKeyword( ValueDecl * overridden)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"isAvailabilitySafeForOverride( ValueDecl * override , ValueDecl * base)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"isRedundantAccessorOverrideAvailabilityDiagnostic( ValueDecl * override , ValueDecl * base)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"diagnoseOverrideForAvailability( ValueDecl * override , ValueDecl * base)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"checkSingleOverride( ValueDecl * override , ValueDecl * base)",207, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"minimizeOverriddenAssociatedTypes( llvm :: TinyPtrVector<ValueDecl*> & assocTypes)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"compareSimilarAssociatedTypes( ValueDecl * const * lhs , ValueDecl * const * rhs)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"computeOverriddenAssociatedTypes( AssociatedTypeDecl * assocType)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclOverride.cpp,"OverriddenDeclsRequest::evaluate( Evaluator & evaluator , ValueDecl * decl) const",114, 2, 0, 0
repos/cpp/swift/lib/Sema/ResilienceDiagnostics.cpp,"TypeChecker::getFragileFunctionKind( const DeclContext * DC)",45, 2, 0, 0
repos/cpp/swift/lib/Sema/ResilienceDiagnostics.cpp,"TypeChecker::diagnoseInlinableLocalType( const NominalTypeDecl * NTD)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/ResilienceDiagnostics.cpp,"TypeChecker::diagnoseInlinableDeclRef( SourceLoc loc , const ValueDecl * D , const DeclContext * DC , FragileFunctionKind Kind , bool TreatUsableFromInlineAsPublic)",81, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCaseIterable.cpp,"canDeriveConformance( NominalTypeDecl * type)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCaseIterable.cpp,"deriveCaseIterable_enum_getter( AbstractFunctionDecl * funcDecl , void *)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCaseIterable.cpp,"computeAllCasesType( NominalTypeDecl * enumDecl)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCaseIterable.cpp,"deriveCaseIterable_AllCases( DerivedConformance & derived)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCaseIterable.cpp,"DerivedConformance::deriveCaseIterable( ValueDecl * requirement)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCaseIterable.cpp,"DerivedConformance::deriveCaseIterable( AssociatedTypeDecl * assocType)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DiscriminatorFinder::walkToExprPost( Expr * E)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DiscriminatorFinder::getNextDiscriminator()",5, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::DebuggerTestingTransform( ASTContext & Ctx , DiscriminatorFinder & DF)",2, 28, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::walkToDeclPre( Decl * D)",18, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::walkToDeclPost( Decl * D)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::walkToExprPre( Expr * E)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::walkToExprPost( Expr * E)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::getLocalDeclContext( ASTNode N) const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::pushLocalDeclContext( ASTNode N)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::popLocalDeclContext( ASTNode N)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::getCurrentDeclContext() const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::extractDeclOrMemberRef( Expr * E)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"DebuggerTestingTransform::insertCheckExpect( Expr * OriginalExpr , Expr * DstExpr)",84, 4, 2, 0
repos/cpp/swift/lib/Sema/DebuggerTestingTransform.cpp,"swift::performDebuggerTestingTransform( SourceFile & SF)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ConstraintFix::~ConstraintFix()",1, 35, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ConstraintFix::getAnchor() const",1, 77, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ConstraintFix::print( llvm :: raw_ostream & Out) const",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ConstraintFix::dump() const",1, 57, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ForceDowncast::getName() const",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ForceDowncast::diagnose( Expr * expr , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ForceDowncast::create( ConstraintSystem & cs , Type toType , ConstraintLocator * locator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ForceOptional::diagnose( Expr * root , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ForceOptional::create( ConstraintSystem & cs , ConstraintLocator * locator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"UnwrapOptionalBase::diagnose( Expr * root , bool asNote) const",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"UnwrapOptionalBase::create( ConstraintSystem & cs , DeclName member , ConstraintLocator * locator)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"UnwrapOptionalBase::createWithOptionalResult( ConstraintSystem & cs , DeclName member , ConstraintLocator * locator)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"AddAddressOf::diagnose( Expr * root , bool asNote) const",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"AddAddressOf::create( ConstraintSystem & cs , ConstraintLocator * locator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"TreatRValueAsLValue::diagnose( Expr * root , bool asNote) const",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"TreatRValueAsLValue::create( ConstraintSystem & cs , ConstraintLocator * locator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"CoerceToCheckedCast::diagnose( Expr * root , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"CoerceToCheckedCast::create( ConstraintSystem & cs , ConstraintLocator * locator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"MarkExplicitlyEscaping::diagnose( Expr * root , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"MarkExplicitlyEscaping::create( ConstraintSystem & cs , ConstraintLocator * locator , Type convertingTo)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"RelabelArguments::diagnose( Expr * root , bool asNote) const",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"RelabelArguments::create( ConstraintSystem & cs , llvm :: ArrayRef<Identifier> correctLabels , ConstraintLocator * locator)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"MissingConformance::diagnose( Expr * root , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"MissingConformance::create( ConstraintSystem & cs , Type type , ProtocolDecl * protocol , ConstraintLocator * locator)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"SkipSameTypeRequirement::diagnose( Expr * root , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"SkipSameTypeRequirement::create( ConstraintSystem & cs , Type lhs , Type rhs , ConstraintLocator * locator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"SkipSuperclassRequirement::diagnose( Expr * root , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"SkipSuperclassRequirement::create( ConstraintSystem & cs , Type lhs , Type rhs , ConstraintLocator * locator)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ContextualMismatch::diagnose( Expr * root , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"ContextualMismatch::create( ConstraintSystem & cs , Type lhs , Type rhs , ConstraintLocator * locator)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"AutoClosureForwarding::diagnose( Expr * root , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"AutoClosureForwarding::create( ConstraintSystem & cs , ConstraintLocator * locator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"RemoveUnwrap::diagnose( Expr * root , bool asNote) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"RemoveUnwrap::create( ConstraintSystem & cs , Type baseType , ConstraintLocator * locator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"InsertExplicitCall::diagnose( Expr * root , bool asNote) const",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSFix.cpp,"InsertExplicitCall::create( ConstraintSystem & cs , ConstraintLocator * locator)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"substituteInputSugarArgumentType( Type argTy , CanType resultTy , Type & resultSugarTy , bool & uniqueSugarTy)",43, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::substituteInputSugarTypeForResult( ApplyExpr * E)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"getBuiltinPrecedenceGroup( TypeChecker & TC , DeclContext * DC , Identifier name , SourceLoc loc)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"lookupPrecedenceGroupForOperator( TypeChecker & TC , DeclContext * DC , Identifier name , SourceLoc loc)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::lookupPrecedenceGroupForInfixOperator( DeclContext * DC , Expr * E)",57, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::findLHS( DeclContext * DC , Expr * E , Identifier name)",44, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"makeBinOp( TypeChecker & TC , Expr * Op , Expr * LHS , Expr * RHS , PrecedenceGroupDecl * opPrecedence , bool isEndOfSequence)",135, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"PrecedenceBound::PrecedenceBound()",1, 25, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"PrecedenceBound::PrecedenceBound( PrecedenceGroupDecl * decl , bool isStrict)",2, 44, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"PrecedenceBound::shouldConsider( TypeChecker & TC , PrecedenceGroupDecl * group)",8, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"foldSequence( TypeChecker & TC , DeclContext * DC , Expr * LHS , ArrayRef<Expr*> & S , PrecedenceBound precedenceBound)",134, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::requireOptionalIntrinsics( SourceLoc loc)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::requirePointerArgumentIntrinsics( SourceLoc loc)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::requireArrayLiteralIntrinsics( SourceLoc loc)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::buildCheckedRefExpr( VarDecl * value , DeclContext * UseDC , DeclNameLoc loc , bool Implicit)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::buildRefExpr( ArrayRef<ValueDecl*> Decls , DeclContext * UseDC , DeclNameLoc NameLoc , bool Implicit , FunctionRefKind functionRefKind)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::buildAutoClosureExpr( DeclContext * DC , Expr * expr , FunctionType * closureType)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"lookupDefaultLiteralType( TypeChecker & TC , DeclContext * dc , StringRef name)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::getDefaultType( ProtocolDecl * protocol , DeclContext * dc)",107, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExpr.cpp,"TypeChecker::foldSequence( SequenceExpr * expr , DeclContext * dc)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"extractEnumElement( TypeChecker & TC , DeclContext * DC , SourceLoc UseLoc , const VarDecl * constant)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"filterForEnumElement( TypeChecker & TC , DeclContext * DC , SourceLoc UseLoc , bool unqualifiedLookup , LookupResult foundElements)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"lookupUnqualifiedEnumMemberElement( TypeChecker & TC , DeclContext * DC , Identifier name , SourceLoc UseLoc)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"lookupEnumMemberElement( TypeChecker & TC , DeclContext * DC , Type ty , Identifier name , SourceLoc UseLoc)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ExprToIdentTypeRepr::ExprToIdentTypeRepr( decltype(components) & components , ASTContext & C)",2, 38, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ExprToIdentTypeRepr::visitExpr( Expr * e)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ExprToIdentTypeRepr::visitTypeExpr( TypeExpr * te)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ExprToIdentTypeRepr::visitDeclRefExpr( DeclRefExpr * dre)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ExprToIdentTypeRepr::visitUnresolvedDeclRefExpr( UnresolvedDeclRefExpr * udre)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ExprToIdentTypeRepr::visitUnresolvedDotExpr( UnresolvedDotExpr * ude)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ExprToIdentTypeRepr::visitUnresolvedSpecializeExpr( UnresolvedSpecializeExpr * use)",19, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"UnresolvedPatternFinder::UnresolvedPatternFinder( bool & HadUnresolvedPattern)",2, 54, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"UnresolvedPatternFinder::walkToExprPre( Expr * E)",9, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"UnresolvedPatternFinder::hasAny( Expr * E)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::ResolvePattern( TypeChecker & TC , DeclContext * DC)",1, 71, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::getSubExprPattern( Expr * E)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitVarPattern( VarPattern * P)",21, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitOptionalSomePattern( OptionalSomePattern * P)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitTypedPattern( TypedPattern * P)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitExprPattern( ExprPattern * P)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitExpr( Expr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitUnresolvedPatternExpr( UnresolvedPatternExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitDiscardAssignmentExpr( DiscardAssignmentExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitSequenceExpr( SequenceExpr * E)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitParenExpr( ParenExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitTupleExpr( TupleExpr * E)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::convertBindingsToOptionalSome( Expr * E)",33, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitOptionalEvaluationExpr( OptionalEvaluationExpr * E)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitUnresolvedMemberExpr( UnresolvedMemberExpr * ume)",18, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitUnresolvedDotExpr( UnresolvedDotExpr * ude)",39, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitDeclRefExpr( DeclRefExpr * de)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitUnresolvedDeclRefExpr( UnresolvedDeclRefExpr * ude)",26, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"ResolvePattern::visitCallExpr( CallExpr * ce)",65, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"TypeChecker::resolvePattern( Pattern * P , DeclContext * DC , bool isStmtCondition)",62, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"validateTypedPattern( TypeChecker & TC , TypeResolution resolution , TypedPattern * TP , TypeResolutionOptions options)",40, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"validateParameterType( ParamDecl * decl , TypeResolution resolution , TypeResolutionOptions options , TypeChecker & TC)",54, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"requestLayoutForMetadataSources( TypeChecker & tc , Type type)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"TypeChecker::requestRequiredNominalTypeLayoutForParameters( ParameterList * PL)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"TypeChecker::typeCheckParameterList( ParameterList * PL , TypeResolution resolution , TypeResolutionOptions options)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"TypeChecker::typeCheckPattern( Pattern * P , DeclContext * dc , TypeResolutionOptions options)",121, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"TypeChecker::coercePatternToType( Pattern * & P , TypeResolution resolution , Type type , TypeResolutionOptions options , TypeLoc tyLoc)",578, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckPattern.cpp,"TypeChecker::coerceParameterListToType( ParameterList * P , ClosureExpr * CE , AnyFunctionType * FN)",138, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"checkGenericParamList( TypeChecker & tc , GenericSignatureBuilder * builder , GenericParamList * genericParams , GenericSignature * parentSig , TypeResolution resolution)",66, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"TypeChecker::gatherGenericParamBindingsText( ArrayRef<Type> types , TypeArrayView<GenericTypeParamType> genericParams , TypeSubstitutionFn substitutions)",42, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"addGenericParamTypes( GenericParamList * gpList , SmallVectorImpl<GenericTypeParamType*> & params)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"revertDependentTypeLoc( TypeLoc & tl)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"checkGenericFuncSignature( TypeChecker & tc , GenericSignatureBuilder * builder , AbstractFunctionDecl * func , TypeResolution resolution)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"revertGenericFuncSignature( AbstractFunctionDecl * func)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"isSelfDerivedOrConcrete( Type protoSelf , Type type)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"TypeChecker::checkProtocolSelfRequirements( ValueDecl * decl)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"TypeChecker::checkReferencedGenericParams( GenericContext * dc)",171, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"computeGenericFuncSignature( TypeChecker & tc , AbstractFunctionDecl * func)",68, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"TypeChecker::validateGenericFuncSignature( AbstractFunctionDecl * func)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"checkGenericSubscriptSignature( TypeChecker & tc , GenericSignatureBuilder * builder , SubscriptDecl * subscript , TypeResolution resolution)",41, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"revertGenericSubscriptSignature( SubscriptDecl * subscript)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"TypeChecker::validateGenericSubscriptSignature( SubscriptDecl * subscript)",49, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"visitOuterToInner( GenericParamList * genericParams , llvm :: function_ref<void(GenericParamList*)> visitor)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"getExtendedTypeGenericDepth( ExtensionDecl * ext)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"TypeChecker::checkGenericEnvironment( GenericParamList * genericParams , DeclContext * dc , GenericSignature * parentSig , bool allowConcreteGenericParams , ExtensionDecl * ext , llvm :: function_ref<void(GenericSignatureBuilder&)> inferRequirements , bool mustInferRequirements)",83, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"TypeChecker::validateGenericTypeSignature( GenericTypeDecl * typeDecl)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"TypeChecker::checkGenericArguments( DeclContext * dc , SourceLoc loc , SourceLoc noteLoc , Type owner , TypeArrayView<GenericTypeParamType> genericParams , ArrayRef<Requirement> requirements , TypeSubstitutionFn substitutions , LookupConformanceFn conformances , ConformanceCheckOptions conformanceOptions , GenericRequirementsCheckListener * listener , SubstOptions options)",172, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckGeneric.cpp,"RequirementRequest::evaluate( Evaluator & evaluator , WhereClauseOwner owner , unsigned index , TypeResolutionStage stage) const",53, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"swift::shouldDiagnoseObjCReason( ObjCReason reason , ASTContext & ctx)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"swift::getObjCDiagnosticAttrKind( ObjCReason reason)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"describeObjCReason( const ValueDecl * VD , ObjCReason Reason)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"diagnoseTypeNotRepresentableInObjC( const DeclContext * DC , Type T , SourceRange TypeRange)",102, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"diagnoseFunctionParamNotRepresentable( const AbstractFunctionDecl * AFD , unsigned NumParams , unsigned ParamIndex , const ParamDecl * P , ObjCReason Reason)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"isParamListRepresentableInObjC( const AbstractFunctionDecl * AFD , const ParameterList * PL , ObjCReason Reason)",75, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"checkObjCWithGenericParams( const AbstractFunctionDecl * AFD , ObjCReason Reason)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"checkObjCInForeignClassContext( const ValueDecl * VD , ObjCReason Reason)",36, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"checkObjCInExtensionContext( const ValueDecl * value , bool diagnose)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"isBridgedToObjectiveCClass( DeclContext * dc , Type type)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"swift::isRepresentableInObjC( const AbstractFunctionDecl * AFD , ObjCReason Reason , Optional<ForeignErrorConvention> & errorConvention)",333, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"swift::isRepresentableInObjC( const VarDecl * VD , ObjCReason Reason)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"swift::isRepresentableInObjC( const SubscriptDecl * SD , ObjCReason Reason)",57, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"swift::canBeRepresentedInObjC( const ValueDecl * decl)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"getObjectiveCNominalType( Type & cache , Identifier ModuleName , Identifier TypeName , DeclContext * dc)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"TypeChecker::getNSObjectType( DeclContext * dc)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"TypeChecker::getObjCSelectorType( DeclContext * dc)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"checkObjCBridgingFunctions( ModuleDecl * mod , StringRef bridgedTypeName , StringRef forwardConversion , StringRef reverseConversion)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"swift::checkBridgedFunctions( ASTContext & ctx)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"isMemberOfObjCClassExtension( const ValueDecl * VD)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"isMemberOfObjCMembersClass( const ValueDecl * VD)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"shouldMarkClassAsObjC( const ClassDecl * CD)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"shouldMarkAsObjC( const ValueDecl * VD , bool allowImplicit)",145, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"isCIntegerType( Type type)",40, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"isEnumObjC( EnumDecl * enumDecl)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"IsObjCRequest::evaluate( Evaluator & evaluator , ValueDecl * VD) const",109, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"inferObjCName( ValueDecl * decl)",140, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDeclObjC.cpp,"markAsObjC( ValueDecl * D , ObjCReason reason , Optional<ForeignErrorConvention> errorConvention)",128, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::createTypeVariable( ConstraintLocator * locator , unsigned options)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::finalize()",107, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::applySolution( const Solution & solution)",64, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::restoreTypeVariableBindings( unsigned numBindings)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::simplify( bool ContinueAfterFailures)",67, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"truncate( SmallVectorImpl<T> & vec , unsigned newSize)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::SolverState::SolverState( Expr * const expr , ConstraintSystem & cs , FreeTypeVariableBinding allowFreeTypeVariables)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::SolverState::~SolverState()",57, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::SolverScope::SolverScope( ConstraintSystem & cs)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::SolverScope::~SolverScope()",50, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::solveSingle( FreeTypeVariableBinding allowFreeTypeVariables , bool allowFixes)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::Candidate::solve( llvm :: SmallDenseSet<OverloadSetRefExpr*> & shrunkExprs)",110, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::Candidate::applySolutions( llvm :: SmallVectorImpl<Solution> & solutions , llvm :: SmallDenseSet<OverloadSetRefExpr*> & shrunkExprs) const",56, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::shrink( Expr * expr)",341, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::solve( Expr * & expr , Type convertType , ExprTypeCheckListener * listener , SmallVectorImpl<Solution> & solutions , FreeTypeVariableBinding allowFreeTypeVariables)",56, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::solveImpl( Expr * & expr , Type convertType , ExprTypeCheckListener * listener , SmallVectorImpl<Solution> & solutions , FreeTypeVariableBinding allowFreeTypeVariables)",93, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::solve( Expr * const expr , SmallVectorImpl<Solution> & solutions , FreeTypeVariableBinding allowFreeTypeVariables)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::solve( SmallVectorImpl<Solution> & solutions)",78, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::collectDisjunctions( SmallVectorImpl<Constraint*> & disjunctions)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"selectBestBindingDisjunction( ConstraintSystem & cs , SmallVectorImpl<Constraint*> & disjunctions)",50, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::ArgumentInfoCollector::walk( Type argType)",140, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::ArgumentInfoCollector::minimizeLiteralProtocols()",27, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::ArgumentInfoCollector::dump() const",12, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::haveTypeInformationForAllArguments( FunctionType * fnType)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"getUnboundBindOverloadDisjunction( TypeVariableType * tyvar , ConstraintSystem & cs)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::selectApplyDisjunction()",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"isOperatorBindOverload( Constraint * bindOverload)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"getOperatorDesignatedNominalTypes( Constraint * bindOverload)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::sortDesignatedTypes( SmallVectorImpl<NominalTypeDecl*> & nominalTypes , Constraint * bindOverload)",80, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::partitionForDesignatedTypes( ArrayRef<Constraint*> Choices , ConstraintMatchLoop forEachChoice , PartitionAppendCallback appendPartition)",68, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::partitionDisjunction( ArrayRef<Constraint*> Choices , SmallVectorImpl<unsigned> & Ordering , SmallVectorImpl<unsigned> & PartitionBeginning)",93, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"ConstraintSystem::selectDisjunction()",34, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"DisjunctionChoice::attempt( ConstraintSystem & cs) const",10, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"DisjunctionChoice::isGenericOperator() const",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"DisjunctionChoice::isSymmetricOperator() const",14, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSolver.cpp,"DisjunctionChoice::propagateConversionInfo( ConstraintSystem & cs) const",42, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"ConstraintSystem::determineBestBindings()",76, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"findInferableTypeVars( Type type , SmallPtrSetImpl<TypeVariableType*> & typeVars)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"ConstraintSystem::PotentialBindings::addPotentialBinding( PotentialBinding binding , bool allowJoinMeet)",50, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"ConstraintSystem::PotentialBindings::isViable( PotentialBinding & binding) const",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"hasNilLiteralConstraint( TypeVariableType * typeVar , ConstraintSystem & CS)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"ConstraintSystem::getPotentialBindingForRelationalConstraint( PotentialBindings & result , Constraint * constraint , bool & hasDependentMemberRelationalConstraints , bool & hasNonDependentMemberRelationalConstraints , bool & addOptionalSupertypeBindings)",138, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"ConstraintSystem::getPotentialBindings( TypeVariableType * typeVar)",407, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"ConstraintSystem::checkTypeOfBinding( TypeVariableType * typeVar , Type type)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"getOptionalSuperclass( Type type)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"enumerateDirectSupertypes( Type type)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"TypeVarBindingProducer::computeNext()",72, 2, 0, 0
repos/cpp/swift/lib/Sema/CSBindings.cpp,"TypeVariableBinding::attempt( ConstraintSystem & cs) const",32, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"RawValueKey::IntValueTy::IntValueTy( const APInt & bits)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"RawValueKey::RawValueKey( LiteralExpr * expr)",37, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"RawValueKey::RawValueKey( Kind k)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"llvm::DenseMapInfo<RawValueKey>::getEmptyKey()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"llvm::DenseMapInfo<RawValueKey>::getTombstoneKey()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"llvm::DenseMapInfo<RawValueKey>::getHashValue( RawValueKey k)",20, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"llvm::DenseMapInfo<RawValueKey>::isEqual( RawValueKey a , RawValueKey b)",21, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkInheritanceClause( llvm :: PointerUnion<TypeDecl*,ExtensionDecl*> declUnion)",286, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkGenericParams( GenericParamList * genericParams , DeclContext * owningDC , TypeChecker & tc)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"getInheritedForCycleCheck( TypeChecker & tc , ProtocolDecl * proto , ProtocolDecl ** scratch)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"getInheritedForCycleCheck( TypeChecker & tc , ClassDecl * classDecl , ClassDecl ** scratch)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"getInheritedForCycleCheck( TypeChecker & tc , EnumDecl * enumDecl , EnumDecl ** scratch)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkCircularity( TypeChecker & tc , T * decl , Diag<Identifier> circularDiag , DescriptiveDeclKind declKind , SmallVectorImpl<T*> & path)",55, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"setBoundVarsTypeError( Pattern * pattern , ASTContext & ctx)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::handleSILGenericParams( GenericParamList * genericParams , DeclContext * DC)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"buildDefaultInitializer( TypeChecker & tc , Type type)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkRedeclaration( TypeChecker & tc , ValueDecl * current)",244, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"contextAllowsPatternBindingWithoutVariables( DeclContext * dc)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"validatePatternBindingEntry( TypeChecker & tc , PatternBindingDecl * binding , unsigned entryNumber)",87, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"validatePatternBindingEntries( TypeChecker & tc , PatternBindingDecl * binding)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"swift::makeFinal( ASTContext & ctx , ValueDecl * D)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"inferFinalAndDiagnoseIfNeeded( TypeChecker & TC , ValueDecl * D , StaticSpellingKind staticSpelling)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"makeObjCDynamic( ValueDecl * decl)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"isStorageDynamic( Evaluator & evaluator , AccessorDecl * accessor)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"doesAccessorNeedDynamicAttribute( AccessorDecl * accessor , Evaluator & evaluator)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"IsDynamicRequest::evaluate( Evaluator & evaluator , ValueDecl * decl) const",92, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"getAutomaticRawValueExpr( TypeChecker & TC , AutomaticEnumValueKind valueKind , EnumElementDecl * forElt , LiteralExpr * prevValue)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkEnumRawValues( TypeChecker & TC , EnumDecl * ED)",170, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"findNonImplicitRequiredInit( const ConstructorDecl * CD)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"buildHigherThanPath( PrecedenceGroupDecl * last , const llvm :: DenseMap<PrecedenceGroupDecl*,PrecedenceGroupDecl*> & visitedFrom , raw_ostream & out)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"buildLowerThanPath( PrecedenceGroupDecl * start , PrecedenceGroupDecl * target , raw_ostream & out)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkPrecedenceCircularity( TypeChecker & TC , PrecedenceGroupDecl * PGD)",83, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"lookupPrecedenceGroupPrimitive( DeclContext * dc , Identifier name , SourceLoc nameLoc)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::validateDecl( PrecedenceGroupDecl * PGD)",59, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::lookupPrecedenceGroup( DeclContext * dc , Identifier name , SourceLoc nameLoc)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"resolveSingleNominalTypeDecl( DeclContext * DC , SourceLoc loc , Identifier ident , TypeChecker & tc , TypeResolutionFlags flags = TypeResolutionFlags(0))",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkDesignatedTypes( OperatorDecl * OD , ArrayRef<Identifier> identifiers , ArrayRef<SourceLoc> identifierLocs , TypeChecker & TC)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::validateDecl( OperatorDecl * OD)",81, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"doesContextHaveValueSemantics( DeclContext * dc)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"validateSelfAccessKind( TypeChecker & TC , FuncDecl * FD)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"validateAccessorIsMutating( TypeChecker & TC , FuncDecl * accessor)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"computeIsGetterMutating( TypeChecker & TC , AbstractStorageDecl * storage)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"computeIsSetterMutating( TypeChecker & TC , AbstractStorageDecl * storage)",45, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"shouldUseOpaqueReadAccessor( TypeChecker & TC , AbstractStorageDecl * storage)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"validateAbstractStorageDecl( TypeChecker & TC , AbstractStorageDecl * storage)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"finalizeAbstractStorageDecl( TypeChecker & TC , AbstractStorageDecl * storage)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkProtocolSelfRequirements( ProtocolDecl * proto , TypeDecl * source)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::DeclChecker( TypeChecker & TC)",1, 52, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visit( Decl * decl)",32, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitGenericTypeParamDecl( GenericTypeParamDecl * D)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitImportDecl( ImportDecl * ID)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitOperatorDecl( OperatorDecl * OD)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitPrecedenceGroupDecl( PrecedenceGroupDecl * PGD)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitMissingMemberDecl( MissingMemberDecl * MMD)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitBoundVariable( VarDecl * VD)",105, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitBoundVars( Pattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitPatternBindingDecl( PatternBindingDecl * PBD)",142, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitSubscriptDecl( SubscriptDecl * SD)",30, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitTypeAliasDecl( TypeAliasDecl * TAD)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitAssociatedTypeDecl( AssociatedTypeDecl * AT)",23, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::checkUnsupportedNestedType( NominalTypeDecl * NTD)",44, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitEnumDecl( EnumDecl * ED)",35, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitStructDecl( StructDecl * SD)",24, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::propertiesCanBeNSManaged( ClassDecl * classDecl , ArrayRef<VarDecl*> vars)",25, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::checkRequiredInClassInits( ClassDecl * cd)",72, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitClassDecl( ClassDecl * CD)",127, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitProtocolDecl( ProtocolDecl * PD)",68, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitVarDecl( VarDecl * VD)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::requiresDefinition( Decl * decl)",35, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitFuncDecl( FuncDecl * FD)",35, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitModuleDecl( ModuleDecl *)",1, 41, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitEnumCaseDecl( EnumCaseDecl * ECD)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitEnumElementDecl( EnumElementDecl * EED)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitExtensionDecl( ExtensionDecl * ED)",53, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitTopLevelCodeDecl( TopLevelCodeDecl * TLCD)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitIfConfigDecl( IfConfigDecl * ICD)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitPoundDiagnosticDecl( PoundDiagnosticDecl * PDD)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitConstructorDecl( ConstructorDecl * CD)",119, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"DeclChecker::visitDestructorDecl( DestructorDecl * DD)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::isAvailabilitySafeForConformance( ProtocolDecl * proto , ValueDecl * requirement , ValueDecl * witness , DeclContext * dc , AvailabilityContext & requirementInfo)",42, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::typeCheckDecl( Decl * D)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"validateTypealiasType( TypeChecker & tc , TypeAliasDecl * typeAlias)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"bindFuncDeclToOperator( TypeChecker & TC , FuncDecl * FD)",110, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"swift::isMemberOperator( FuncDecl * decl , Type type)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkDynamicSelfReturn( FuncDecl * func , TypeRepr * typeRepr , unsigned optionalDepth)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkDynamicSelfReturn( FuncDecl * func)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"buildAddressorResultType( TypeChecker & TC , AccessorDecl * addressor , Type valueType)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"getTypeLocForFunctionResult( FuncDecl * FD)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::validateDecl( ValueDecl * D)",667, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::validateDeclForNameLookup( ValueDecl * D)",98, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"shouldValidateMemberDuringFinalization( NominalTypeDecl * nominal , ValueDecl * VD)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::requestMemberLayout( ValueDecl * member)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::requestNominalLayout( NominalTypeDecl * nominalDecl)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::requestSuperclassLayout( ClassDecl * classDecl)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"finalizeType( TypeChecker & TC , NominalTypeDecl * nominal)",67, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::finalizeDecl( ValueDecl * decl)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"isPassThroughTypealias( TypeAliasDecl * typealias)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"formExtensionInterfaceType( TypeChecker & tc , ExtensionDecl * ext , Type type , GenericParamList * genericParams , SmallVectorImpl<std::pair<Type,Type>> & sameTypeReqs , bool & mustInferRequirements)",82, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"checkExtensionGenericParams( TypeChecker & tc , ExtensionDecl * ext , Type type , GenericParamList * genericParams)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"isNonGenericTypeAliasType( Type type)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"validateExtendedType( ExtensionDecl * ext , TypeChecker & tc)",64, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::validateExtension( ExtensionDecl * ext)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"buildDefaultInitializerString( TypeChecker & tc , DeclContext * dc , Pattern * pattern)",81, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"diagnoseClassWithoutInitializers( TypeChecker & tc , ClassDecl * classDecl)",113, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::maybeDiagnoseClassWithoutInitializers( ClassDecl * classDecl)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"diagnoseMissingRequiredInitializer( TypeChecker & TC , ClassDecl * classDecl , ConstructorDecl * superInitializer)",88, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::addImplicitConstructors( NominalTypeDecl * decl)",286, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::synthesizeMemberForLookup( NominalTypeDecl * target , DeclName member)",73, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"TypeChecker::defineDefaultConstructor( NominalTypeDecl * decl)",82, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckDecl.cpp,"validateAttributes( TypeChecker & TC , Decl * D)",186, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"isSubstitutableFor( Type type , ArchetypeType * archetype , DeclContext * dc)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"OverloadCandidate::OverloadCandidate( ValueDecl * decl , bool skipCurriedSelf)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"OverloadCandidate::getArgumentLabels( SmallVectorImpl<Identifier> & scratch)",45, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"OverloadCandidate::dump() const",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::dump() const",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::filterList( ClosenessPredicate predicate)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"argumentMismatchIsNearMiss( Type argType , Type paramType)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"isUnresolvedOrTypeVarType( Type ty)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"findGenericSubstitutions( DeclContext * dc , Type paramType , Type actualArgType , TypeSubstitutionMap & archetypesMap)",46, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::evaluateCloseness( OverloadCandidate candidate , ArrayRef<AnyFunctionType::Param> actualArgs)",265, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::collectCalleeCandidates( Expr * fn , bool implicitDotSyntax)",204, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::filterListArgs( ArrayRef<AnyFunctionType::Param> actualArgs)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::filterContextualMemberList( Expr * argExpr)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::CalleeCandidateInfo( Type baseType , ArrayRef<OverloadChoice> overloads , bool hasTrailingClosure , ConstraintSystem & CS , bool selfAlreadyApplied)",65, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::operator =( const CalleeCandidateInfo & CCI)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::suggestPotentialOverloads( SourceLoc loc , bool isResult)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::diagnoseGenericParameterErrors( Expr * badArgExpr)",117, 2, 0, 0
repos/cpp/swift/lib/Sema/CalleeCandidateInfo.cpp,"CalleeCandidateInfo::diagnoseSimpleErrors( const Expr * E)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"LookupResult::filter( llvm :: function_ref<bool(LookupResultEntry,bool)> pred)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"LookupResult::shiftDownResults()",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"LookupResultBuilder::LookupResultBuilder( LookupResult & result , DeclContext * dc , NameLookupOptions options , bool isMemberLookup)",8, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"LookupResultBuilder::shouldFilterResults() const",22, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"LookupResultBuilder::~LookupResultBuilder()",36, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"LookupResultBuilder::add( ValueDecl * found , DeclContext * baseDC , Type foundInType , bool isOuter)",111, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"convertToUnqualifiedLookupOptions( NameLookupOptions options)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypeChecker::lookupUnqualified( DeclContext * dc , DeclName name , SourceLoc loc , NameLookupOptions options)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypeChecker::lookupUnqualifiedType( DeclContext * dc , DeclName name , SourceLoc loc , NameLookupOptions options)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypeChecker::lookupMember( DeclContext * dc , Type type , DeclName name , NameLookupOptions options)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypeChecker::isUnsupportedMemberTypeAccess( Type type , TypeDecl * typeDecl)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypeChecker::lookupMemberType( DeclContext * dc , Type type , Identifier name , NameLookupOptions options)",134, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypeChecker::lookupConstructors( DeclContext * dc , Type type , NameLookupOptions options)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"getCallEditDistance( DeclName writtenName , DeclName correctedName , unsigned maxEditDistance)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"isPlausibleTypo( DeclRefKind refKind , DeclName typedName , ValueDecl * candidate)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypeChecker::performTypoCorrection( DeclContext * DC , DeclRefKind refKind , Type baseTypeOrNull , NameLookupOptions lookupOptions , TypoCorrectionResults & corrections , GenericSignatureBuilder * gsb , unsigned maxResults)",56, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypoCorrectionResults::addAllCandidatesToLookup( LookupResult & lookup) const",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"findExplicitParentForImplicitDecl( ValueDecl * decl)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"noteTypoCorrection( TypeChecker & tc , DeclNameLoc loc , ValueDecl * decl , bool wasClaimed)",36, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypoCorrectionResults::noteAllCandidates() const",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"SyntacticTypoCorrection::addFixits( InFlightDiagnostic & diagnostic) const",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckNameLookup.cpp,"TypoCorrectionResults::claimUniqueCorrection()",31, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceError.cpp,"deriveBodyBridgedNSError_enum_nsErrorDomain( AbstractFunctionDecl * domainDecl , void *)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceError.cpp,"deriveBridgedNSError_enum_nsErrorDomain( DerivedConformance & derived)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceError.cpp,"DerivedConformance::deriveBridgedNSError( ValueDecl * requirement)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckExprObjC.cpp,"TypeChecker::checkObjCKeyPathExpr( DeclContext * dc , KeyPathExpr * expr , bool requireResultType)",399, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintLocator.cpp,"ConstraintLocator::Profile( llvm :: FoldingSetNodeID & id , Expr * anchor , ArrayRef<PathElement> path)",57, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintLocator.cpp,"ConstraintLocator::dump( SourceManager * sm)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintLocator.cpp,"ConstraintLocator::dump( ConstraintSystem * CS)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintLocator.cpp,"ConstraintLocator::dump( SourceManager * sm , raw_ostream & out)",166, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"getActiveAvailableAttribute( const Decl * D , ASTContext & AC)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"hasActiveAvailableAttribute( Decl * D , ASTContext & AC)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::getCurrentTRC()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::pushContext( TypeRefinementContext * TRC , ParentTy PopAfterNode)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::TypeRefinementContextBuilder( TypeRefinementContext * TRC , TypeChecker & TC)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::build( Decl * D)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::build( Stmt * S)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::build( Expr * E)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::walkToDeclPre( Decl * D)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::walkToDeclPost( Decl * D)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::getNewContextForWalkOfDecl( Decl * D)",16, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::buildDeclarationRefinementContext( Decl * D)",32, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::declarationIntroducesNewContext( Decl * D)",24, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::refinementSourceRangeForDecl( Decl * D)",29, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::walkToStmtPre( Stmt * S)",18, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::walkToStmtPost( Stmt * S)",11, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::buildIfStmtRefinementContext( IfStmt * IS)",41, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::buildWhileStmtRefinementContext( WhileStmt * WS)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::buildGuardStmtRefinementContext( GuardStmt * GS)",41, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::buildStmtConditionRefinementContext( StmtCondition Cond)",134, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::bestActiveSpecForQuery( PoundAvailableInfo * available)",25, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::contextForSpec( AvailabilitySpec * Spec)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeRefinementContextBuilder::walkToExprPost( Expr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::buildTypeRefinementContextHierarchy( SourceFile & SF , unsigned StartElem)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::getOrBuildTypeRefinementContext( SourceFile * SF)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::overApproximateAvailabilityAtLocation( SourceLoc loc , const DeclContext * DC , const TypeRefinementContext ** MostRefined)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::isDeclAvailable( const Decl * D , SourceLoc referenceLoc , const DeclContext * referenceDC , AvailabilityContext & OutAvailableInfo)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::checkDeclarationAvailability( const Decl * D , SourceLoc referenceLoc , const DeclContext * referenceDC)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::diagnosePotentialUnavailability( const ValueDecl * D , SourceRange ReferenceRange , const DeclContext * ReferenceDC , const UnavailabilityReason & Reason)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::InnermostAncestorFinder( SourceRange TargetRange , const SourceManager & SM , ASTNode SearchNode , const MatchPredicate & Predicate)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::getInnermostMatchingNode()",1, 81, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToExprPre( Expr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToStmtPre( Stmt * S)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToDeclPre( Decl * D)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToPatternPre( Pattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToTypeReprPre( TypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToRangePre( SourceRange Range)",23, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToExprPost( Expr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToStmtPost( Stmt * S)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToDeclPost( Decl * D)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"InnermostAncestorFinder::walkToNodePost( ASTNode Node)",11, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"findInnermostAncestor( SourceRange ChildRange , const SourceManager & SM , ASTNode SearchRoot , const InnermostAncestorFinder :: MatchPredicate & Predicate)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"findContainingDeclaration( SourceRange ReferenceRange , const DeclContext * ReferenceDC , const SourceManager & SM)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"concreteSyntaxDeclForAvailableAttribute( const Decl * AbstractSyntaxDecl)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"abstractSyntaxDeclForAvailableAttribute( const Decl * ConcreteSyntaxDecl)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"relatedDeclForAvailabilityFixit( const Decl * D)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"ancestorMemberLevelDeclForAvailabilityFixit( const Decl * D)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"isTypeLevelDeclForAvailabilityFixit( const Decl * D)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"ancestorTypeLevelDeclForAvailabilityFixit( const Decl * D)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"findAvailabilityFixItNodes( SourceRange ReferenceRange , const DeclContext * ReferenceDC , const SourceManager & SM , Optional<ASTNode> & FoundVersionCheckNode , const Decl * & FoundMemberLevelDecl , const Decl * & FoundTypeLevelDecl)",82, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"fixAvailabilityForDecl( SourceRange ReferenceRange , const Decl * D , const VersionRange & RequiredRange , TypeChecker & TC)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"fixAvailabilityByNarrowingNearbyVersionCheck( SourceRange ReferenceRange , const DeclContext * ReferenceDC , const VersionRange & RequiredRange , TypeChecker & TC , InFlightDiagnostic & Err)",42, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"fixAvailabilityByAddingVersionCheck( ASTNode NodeToWrap , const VersionRange & RequiredRange , SourceRange ReferenceRange , TypeChecker & TC)",54, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"fixAvailability( SourceRange ReferenceRange , const DeclContext * ReferenceDC , const VersionRange & RequiredRange , TypeChecker & TC)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::diagnosePotentialUnavailability( const Decl * D , DeclName Name , SourceRange ReferenceRange , const DeclContext * ReferenceDC , const UnavailabilityReason & Reason)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::diagnosePotentialAccessorUnavailability( const AccessorDecl * Accessor , SourceRange ReferenceRange , const DeclContext * ReferenceDC , const UnavailabilityReason & Reason , bool ForInout)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::getDeprecated( const Decl * D)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"someEnclosingDeclMatches( SourceRange ReferenceRange , const DeclContext * ReferenceDC , llvm :: function_ref<bool(const Decl*)> Pred)",69, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"isInsideImplicitFunction( SourceRange ReferenceRange , const DeclContext * DC)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"isInsideUnavailableDeclaration( SourceRange ReferenceRange , const DeclContext * ReferenceDC)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"isInsideCompatibleUnavailableDeclaration( SourceRange ReferenceRange , const DeclContext * ReferenceDC , const AvailableAttr * attr)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"isInsideDeprecatedDeclaration( SourceRange ReferenceRange , const DeclContext * ReferenceDC)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"fixItAvailableAttrRename( InFlightDiagnostic & diag , SourceRange referenceRange , const ValueDecl * renamedDecl , const AvailableAttr * attr , const ApplyExpr * call)",329, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"describeRename( ASTContext & ctx , const AvailableAttr * attr , const ValueDecl * D , SmallVectorImpl<char> & nameBuf)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"getAccessorKindAndNameForDiagnostics( const ValueDecl * D)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"TypeChecker::diagnoseIfDeprecated( SourceRange ReferenceRange , const DeclContext * ReferenceDC , const ValueDecl * DeprecatedDecl , const ApplyExpr * Call)",80, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"swift::diagnoseUnavailableOverride( ValueDecl * override , const ValueDecl * base , const AvailableAttr * attr)",50, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"swift::diagnoseExplicitUnavailability( const ValueDecl * D , SourceRange R , const DeclContext * DC , const ApplyExpr * call)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"isSubscriptReturningString( const ValueDecl * D , ASTContext & Context)",58, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"swift::diagnoseExplicitUnavailability( const ValueDecl * D , SourceRange R , const DeclContext * DC , llvm :: function_ref<void(InFlightDiagnostic&)> attachRenameFixIts)",123, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::AvailabilityWalker( TypeChecker & TC , DeclContext * DC)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::walkToExprPre( Expr * E)",48, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::walkToExprPost( Expr * E)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::getEnclosingApplyExpr() const",20, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::walkAssignExpr( AssignExpr * E)",23, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::walkMemberRef( MemberRefExpr * E)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::maybeDiagKeyPath( KeyPathExpr * KP)",23, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::walkInOutExpr( InOutExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::walkInContext( Expr * baseExpr , Expr * E , MemberAccessContext AccessContext)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::maybeDiagStorageAccess( const ValueDecl * VD , SourceRange ReferenceRange , const DeclContext * ReferenceDC) const",38, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::diagAccessorAvailability( AccessorDecl * D , SourceRange ReferenceRange , const DeclContext * ReferenceDC , bool ForInout) const",11, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::diagAvailability( const ValueDecl * D , SourceRange R , const ApplyExpr * call , bool AllowPotentiallyUnavailableProtocol , bool SignalOnPotentialUnavailability , bool ForInout)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"isIntegerOrFloatingPointType( Type ty , DeclContext * DC , TypeChecker & TC)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::diagnoseIncDecRemoval( const ValueDecl * D , SourceRange R , const AvailableAttr * Attr)",59, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"AvailabilityWalker::diagnoseMemoryLayoutMigration( const ValueDecl * D , SourceRange R , const AvailableAttr * Attr , const ApplyExpr * call)",68, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"swift::diagAvailability( TypeChecker & TC , const Expr * E , DeclContext * DC)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAvailability.cpp,"swift::diagnoseDeclAvailability( const ValueDecl * Decl , TypeChecker & TC , DeclContext * DC , SourceRange R , bool AllowPotentiallyUnavailableProtocol , bool SignalOnPotentialUnavailability , bool ForInout)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"isImplicitPromotionToOptional( Expr * E)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"diagSyntacticUseRestrictions( TypeChecker & TC , const Expr * E , const DeclContext * DC , bool isExprStmt)",1422, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"diagRecursivePropertyAccess( TypeChecker & TC , const Expr * E , const DeclContext * DC)",126, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"diagnoseImplicitSelfUseInClosure( TypeChecker & TC , const Expr * E , const DeclContext * DC)",105, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"TypeChecker::getDefaultGenericArgumentsString( SmallVectorImpl<char> & buf , const swift :: GenericTypeDecl * typeDecl , llvm :: function_ref<Type(const GenericTypeParamDecl*)> getPreferredType)",56, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::diagnoseArgumentLabelError( ASTContext & ctx , const Expr * expr , ArrayRef<Identifier> newNames , bool isSubscript , InFlightDiagnostic * existingDiag)",166, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"lookThroughExprsToImmediateDeallocation( const Expr * E)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"diagnoseUnownedImmediateDeallocationImpl( TypeChecker & TC , const VarDecl * varDecl , const Expr * initExpr , SourceLoc diagLoc , SourceRange diagRange)",60, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::diagnoseUnownedImmediateDeallocation( TypeChecker & TC , const AssignExpr * assignExpr)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::diagnoseUnownedImmediateDeallocation( TypeChecker & TC , const Pattern * pattern , SourceLoc equalLoc , const Expr * initExpr)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::fixItOverrideDeclarationTypes( InFlightDiagnostic & diag , ValueDecl * decl , const ValueDecl * base)",157, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::VarDeclUsageChecker( TypeChecker & TC , AbstractFunctionDecl * AFD)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::VarDeclUsageChecker( DiagnosticEngine & Diags)",1, 65, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::VarDeclUsageChecker( TypeChecker & TC , VarDecl * VD)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::suppressDiagnostics()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::isVarDeclPartOfPBDThatHadSomeMutation( VarDecl * VD)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::isVarDeclEverWritten( VarDecl * VD)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::shouldTrackVarDecl( VarDecl * VD)",22, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::addMark( Decl * D , unsigned Flag)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::walkToDeclPre( Decl * D)",73, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::walkToStmtPre( Stmt * S)",37, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::~VarDeclUsageChecker()",210, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::markBaseOfAbstractStorageDeclStore( Expr * base , ConcreteDeclRef decl)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::markStoredOrInOutExpr( Expr * E , unsigned Flags)",78, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::walkToExprPre( Expr * E)",46, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"VarDeclUsageChecker::handleIfConfig( IfConfigDecl * ICD)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::performTopLevelDeclDiagnostics( TypeChecker & TC , TopLevelCodeDecl * TLCD)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::performAbstractFuncDeclDiagnostics( TypeChecker & TC , AbstractFunctionDecl * AFD)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"checkSwitch( TypeChecker & TC , const SwitchStmt * stmt)",55, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::fixItEncloseTrailingClosure( TypeChecker & TC , InFlightDiagnostic & diag , const CallExpr * call , Identifier closureLabel)",44, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"checkStmtConditionTrailingClosure( TypeChecker & TC , const Expr * E)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"checkStmtConditionTrailingClosure( TypeChecker & TC , const Stmt * S)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"parseObjCSelector( ASTContext & ctx , StringRef string)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"ObjCSelectorWalker::isSelectorReferenceAmbiguous( AbstractFunctionDecl * method)",38, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"ObjCSelectorWalker::ObjCSelectorWalker( TypeChecker & tc , const DeclContext * dc , Type selectorTy)",2, 49, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"ObjCSelectorWalker::walkToExprPre( Expr * expr)",285, 4, 2, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"diagDeprecatedObjCSelectors( TypeChecker & tc , const DeclContext * dc , const Expr * expr)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"checkImplicitPromotionsInCondition( const StmtConditionElement & cond , TypeChecker & TC)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"diagnoseUnintendedOptionalBehavior( TypeChecker & TC , const Expr * E , const DeclContext * DC)",373, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"diagnoseDeprecatedWritableKeyPath( TypeChecker & TC , const Expr * E , const DeclContext * DC)",60, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::performSyntacticExprDiagnostics( TypeChecker & TC , const Expr * E , const DeclContext * DC , bool isExprStmt)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::performStmtDiagnostics( TypeChecker & TC , const Stmt * S)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"swift::fixItAccess( InFlightDiagnostic & diag , ValueDecl * VD , AccessLevel desiredAccess , bool isForSetter , bool shouldUseDefaultAccess)",67, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"getTypeNameForOmission( Type type)",111, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"TypeChecker::omitNeedlessWords( AbstractFunctionDecl * afd)",84, 2, 0, 0
repos/cpp/swift/lib/Sema/MiscDiagnostics.cpp,"TypeChecker::omitNeedlessWords( VarDecl * var)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodingKey.cpp,"deriveNilReturn( AbstractFunctionDecl * funcDecl , void *)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodingKey.cpp,"deriveRawValueReturn( AbstractFunctionDecl * funcDecl , void *)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodingKey.cpp,"deriveRawValueInit( AbstractFunctionDecl * initDecl , void *)",36, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodingKey.cpp,"deriveInitDecl( DerivedConformance & derived , Type paramType , Identifier paramName , const Synthesizer & synthesizer)",44, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodingKey.cpp,"deriveProperty( DerivedConformance & derived , Type type , Identifier name , const Synthesizer & synthesizer)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodingKey.cpp,"deriveBodyCodingKey_enum_stringValue( AbstractFunctionDecl * strValDecl , void *)",59, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodingKey.cpp,"deriveBodyCodingKey_init_stringValue( AbstractFunctionDecl * initDecl , void *)",74, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodingKey.cpp,"canSynthesizeCodingKey( DerivedConformance & derived)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodingKey.cpp,"DerivedConformance::deriveCodingKey( ValueDecl * requirement)",138, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"TrackingInfo::TrackingInfo( CanType parent , ValueDecl * parentMember)",2, 77, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"TrackingInfo::getParentType() const",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"TrackingInfo::getParentMember() const",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"TrackingInfo::isBeingExpanded() const",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"TrackingInfo::setBeingExpanded( bool isBeingExpanded)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"WorkItem::WorkItem( unsigned depth , CanType type)",2, 34, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"Path::push_back( const PathElement & elt)",1, 70, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"Path::empty() const",1, 50, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"Path::size() const",1, 50, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"Path::operator [ ]( size_t index) const",1, 80, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"Path::back() const",1, 62, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::CircularityChecker( TypeChecker & tc , NominalTypeDecl * typeDecl)",3, 59, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::getOriginalType() const",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::startExpandingType( CanType type)",11, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::finishExpandingType( CanType type)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::pushFinishExpandingTypeWorkItem( CanType type)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::pushExpandTypeWorkItem( CanType type , unsigned depth)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"TypeChecker::checkDeclCircularity( NominalTypeDecl * decl)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::run()",25, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::expandType( CanType type , unsigned depth)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::expandTuple( CanTupleType tupleType , unsigned depth)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::expandNominal( CanType type , NominalTypeDecl * D , unsigned depth)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::expandStruct( CanType type , StructDecl * S , unsigned depth)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::expandEnum( CanType type , EnumDecl * E , unsigned depth)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::addMember( CanType parentType , ValueDecl * member , Type memberNCType , unsigned parentDepth)",44, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"findCycleIndex( const Path & path)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"getMemberStorageInterfaceType( ValueDecl * member)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"isNonDependentField( const PathElement & elt)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"Path::dump() const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"Path::printCycle( llvm :: raw_ostream & out , size_t cycleIndex) const",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"Path::printInfinite( llvm :: raw_ostream & out) const",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"Path::printSegment( llvm :: raw_ostream & out , size_t begin , size_t end , size_t maxContext , bool printFirstType) const",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"PathElement::dump() const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"PathElement::print( llvm :: raw_ostream & out) const",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::buildPath( CanType parentType , ValueDecl * member , CanType memberType)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::addPathElementsTo( Path & path , CanType targetType)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::addPathElement( Path & path , ValueDecl * member , CanType canMemberType)",43, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::diagnoseCircularity( CanType parentType , ValueDecl * member , CanType memberType)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::diagnoseInfiniteRecursion( CanType parentType , ValueDecl * member , CanType memberType)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckCircularity.cpp,"CircularityChecker::diagnoseNonWellFoundedEnum( EnumDecl * E)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"ContextualizeClosures::ContextualizeClosures( DeclContext * parent , unsigned nextDiscriminator = 0)",3, 66, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"ContextualizeClosures::setContext( TopLevelCodeDecl * parent)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"ContextualizeClosures::hasAutoClosures() const",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"ContextualizeClosures::walkToExprPre( Expr * E)",65, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"ContextualizeClosures::walkToDeclPre( Decl * D)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"getDescriptiveName( AbstractFunctionDecl * AFD)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"FunctionBodyTimer::FunctionBodyTimer( AnyFunctionRef Fn , bool shouldDump , unsigned warnLimit)",3, 72, 8, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"FunctionBodyTimer::~FunctionBodyTimer()",35, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"setAutoClosureDiscriminators( DeclContext * DC , Stmt * S)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::contextualizeInitializer( Initializer * DC , Expr * E)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::contextualizeTopLevelCode( TopLevelContext & TLC , ArrayRef<Decl*> topLevel)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"tryDiagnoseUnnecessaryCastOverOptionSet( ASTContext & Ctx , Expr * E , Type ResultType , ModuleDecl * module)",41, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::AddLabeledStmt::AddLabeledStmt( StmtChecker & SC , LabeledStmt * LS)",17, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::AddLabeledStmt::~AddLabeledStmt()",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::AddSwitchNest::AddSwitchNest( StmtChecker & SC)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::AddSwitchNest::~AddSwitchNest()",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::StmtChecker( TypeChecker & TC , AbstractFunctionDecl * AFD)",3, 46, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::StmtChecker( TypeChecker & TC , ClosureExpr * TheClosure)",3, 46, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::StmtChecker( TypeChecker & TC , DeclContext * DC)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::isInDefer() const",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::typeCheckStmt( StmtTy * & S)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::typeCheckBody( BraceStmt * & S)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitReturnStmt( ReturnStmt * RS)",67, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitYieldStmt( YieldStmt * YS)",63, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitThrowStmt( ThrowStmt * TS)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitPoundAssertStmt( PoundAssertStmt * PA)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitDeferStmt( DeferStmt * DS)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitIfStmt( IfStmt * IS)",18, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitGuardStmt( GuardStmt * GS)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitDoStmt( DoStmt * DS)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitWhileStmt( WhileStmt * WS)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitRepeatWhileStmt( RepeatWhileStmt * RWS)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitForEachStmt( ForEachStmt * S)",145, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitBreakStmt( BreakStmt * S)",51, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitContinueStmt( ContinueStmt * S)",46, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitFallthroughStmt( FallthroughStmt * S)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitSwitchStmt( SwitchStmt * S)",179, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitCaseStmt( CaseStmt * S)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitCatchStmt( CatchStmt * S)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::checkCatchStmt( CatchStmt * S)",15, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitDoCatchStmt( DoCatchStmt * S)",19, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitFailStmt( FailStmt * S)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::typeCheckCatchPattern( CatchStmt * S , DeclContext * DC)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"isDiscardableType( Type type)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"diagnoseIgnoredLiteral( TypeChecker & TC , LiteralExpr * LE)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::checkIgnoredExpr( Expr * E)",213, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"StmtChecker::visitBraceStmt( BraceStmt * BS)",75, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::checkDefaultArguments( ParameterList * params , ValueDecl * VD)",49, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::typeCheckAbstractFunctionBodyUntil( AbstractFunctionDecl * AFD , SourceLoc EndTypeCheckLoc)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::typeCheckAbstractFunctionBody( AbstractFunctionDecl * AFD)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::typeCheckFunctionBodyUntil( FuncDecl * FD , SourceLoc EndTypeCheckLoc)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::constructCallToSuperInit( ConstructorDecl * ctor , ClassDecl * ClDecl)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"checkSuperInit( TypeChecker & tc , ConstructorDecl * fromCtor , ApplyExpr * apply , bool implicitlyGenerated)",50, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"isKnownEndOfConstructor( ASTNode N)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::typeCheckConstructorBodyUntil( ConstructorDecl * ctor , SourceLoc EndTypeCheckLoc)",126, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::typeCheckDestructorBodyUntil( DestructorDecl * DD , SourceLoc EndTypeCheckLoc)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::typeCheckClosureBody( ClosureExpr * closure)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::typeCheckTapBody( TapExpr * expr , DeclContext * DC)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckStmt.cpp,"TypeChecker::typeCheckTopLevelCodeDecl( TopLevelCodeDecl * TLCD)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::forStructural( DeclContext * dc)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::forInterface( DeclContext * dc)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::forInterface( DeclContext * dc , GenericSignature * genericSig)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::forContextual( DeclContext * dc)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::forContextual( DeclContext * dc , GenericEnvironment * genericEnv)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::getGenericSignatureBuilder() const",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::getGenericSignature() const",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::usesArchetypes() const",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::mapTypeIntoContext( Type type) const",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::resolveDependentMemberType( Type baseTy , DeclContext * DC , SourceRange baseRange , ComponentIdentTypeRepr * ref) const",103, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::resolveSelfAssociatedType( Type baseTy , DeclContext * DC , Identifier name) const",47, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::areSameType( Type type1 , Type type2) const",47, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getArraySliceType( SourceLoc loc , Type elementType)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getDictionaryType( SourceLoc loc , Type keyType , Type valueType)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getOptionalType( SourceLoc loc , Type elementType)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"getPointerType( TypeChecker & tc , SourceLoc loc , Type pointeeType , PointerTypeKind kind)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getUnsafePointerType( SourceLoc loc , Type pointeeType)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getUnsafeMutablePointerType( SourceLoc loc , Type pointeeType)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"getStdlibType( TypeChecker & TC , Type & cached , DeclContext * dc , StringRef name)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getStringType( DeclContext * dc)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getSubstringType( DeclContext * dc)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getIntType( DeclContext * dc)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getInt8Type( DeclContext * dc)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getUInt8Type( DeclContext * dc)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getExceptionType( DeclContext * dc , SourceLoc loc)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::getDynamicBridgedThroughObjCClass( DeclContext * dc , Type dynamicType , Type valueType)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::resolveTypeInContext( TypeDecl * typeDecl , DeclContext * foundDC , TypeResolution resolution , TypeResolutionOptions options , bool isSpecialized)",151, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"adjustOptionsForGenericArgs( TypeResolutionOptions options)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"isPointerToVoid( ASTContext & Ctx , Type Ty , bool & IsMutable)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::applyGenericArguments( Type type , SourceLoc loc , TypeResolution resolution , GenericIdentTypeRepr * generic , TypeResolutionOptions options)",117, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::applyUnboundGenericArguments( UnboundGenericType * unboundType , GenericTypeDecl * decl , SourceLoc loc , TypeResolution resolution , ArrayRef<Type> genericArgs)",105, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"diagnoseUnboundGenericType( Type ty , SourceLoc loc)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"maybeDiagnoseBadConformanceRef( DeclContext * dc , Type parentTy , SourceLoc loc , TypeDecl * typeDecl)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"resolveTypeDecl( TypeDecl * typeDecl , SourceLoc loc , DeclContext * foundDC , TypeResolution resolution , GenericIdentTypeRepr * generic , TypeResolutionOptions options)",60, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"getDeclNameFromContext( DeclContext * dc , NominalTypeDecl * nominal)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"diagnoseUnknownType( TypeResolution resolution , Type parentType , SourceRange parentRange , ComponentIdentTypeRepr * comp , TypeResolutionOptions options , NameLookupOptions lookupOptions)",172, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"resolveTopLevelIdentTypeComponent( TypeResolution resolution , ComponentIdentTypeRepr * comp , TypeResolutionOptions options)",114, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"diagnoseAmbiguousMemberType( Type baseTy , SourceRange baseRange , Identifier name , SourceLoc nameLoc , LookupTypeResult & lookup)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"resolveNestedIdentTypeComponent( TypeResolution resolution , Type parentTy , SourceRange parentRange , ComponentIdentTypeRepr * comp , TypeResolutionOptions options)",162, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"resolveIdentTypeComponent( TypeResolution resolution , ArrayRef<ComponentIdentTypeRepr*> components , TypeResolutionOptions options)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"diagnoseAvailability( IdentTypeRepr * IdType , DeclContext * DC , bool AllowPotentiallyUnavailableProtocol)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"applyNonEscapingFromContext( DeclContext * DC , Type ty , TypeResolutionOptions options)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::resolveIdentifierType( TypeResolution resolution , IdentTypeRepr * IdType , TypeResolutionOptions options)",49, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::validateType( TypeLoc & Loc , TypeResolution resolution , TypeResolutionOptions options)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::TypeResolver( TypeResolution resolution)",6, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::diagnose( ArgTypes && ... Args) const",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolution::resolveType( TypeRepr * TyR , TypeResolutionOptions options)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveType( TypeRepr * repr , TypeResolutionOptions options)",90, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"rebuildWithDynamicSelf( ASTContext & Context , Type ty)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveAttributedType( AttributedTypeRepr * repr , TypeResolutionOptions options)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveAttributedType( TypeAttributes & attrs , TypeRepr * repr , TypeResolutionOptions options)",368, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveASTFunctionTypeParams( TupleTypeRepr * inputRepr , TypeResolutionOptions options , bool requiresMappingOut , SmallVectorImpl<AnyFunctionType::Param> & elements)",73, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveASTFunctionType( FunctionTypeRepr * repr , TypeResolutionOptions parentOptions , FunctionType :: ExtInfo extInfo)",67, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveSILBoxType( SILBoxTypeRepr * repr , TypeResolutionOptions options)",76, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveSILFunctionType( FunctionTypeRepr * repr , TypeResolutionOptions options , SILCoroutineKind coroutineKind , SILFunctionType :: ExtInfo extInfo , ParameterConvention callee , TypeRepr * witnessMethodProtocol)",138, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveSILYield( TypeAttributes & attrs , TypeRepr * repr , TypeResolutionOptions options)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveSILParameter( TypeRepr * repr , TypeResolutionOptions options)",51, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveSingleSILResult( TypeRepr * repr , TypeResolutionOptions options , SmallVectorImpl<SILYieldInfo> & yields , SmallVectorImpl<SILResultInfo> & ordinaryResults , Optional<SILResultInfo> & errorResult)",90, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveSILResults( TypeRepr * repr , TypeResolutionOptions options , SmallVectorImpl<SILYieldInfo> & yields , SmallVectorImpl<SILResultInfo> & ordinaryResults , Optional<SILResultInfo> & errorResult)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveSpecifierTypeRepr( SpecifierTypeRepr * repr , TypeResolutionOptions options)",42, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveArrayType( ArrayTypeRepr * repr , TypeResolutionOptions options)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveDictionaryType( DictionaryTypeRepr * repr , TypeResolutionOptions options)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveOptionalType( OptionalTypeRepr * repr , TypeResolutionOptions options)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveImplicitlyUnwrappedOptionalType( ImplicitlyUnwrappedOptionalTypeRepr * repr , TypeResolutionOptions options , bool isDirect)",73, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveTupleType( TupleTypeRepr * repr , TypeResolutionOptions options)",42, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveCompositionType( CompositionTypeRepr * repr , TypeResolutionOptions options)",67, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveMetatypeType( MetatypeTypeRepr * repr , TypeResolutionOptions options)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::buildMetatypeType( MetatypeTypeRepr * repr , Type instanceType , Optional<MetatypeRepresentation> storedRepr)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::resolveProtocolType( ProtocolTypeRepr * repr , TypeResolutionOptions options)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeResolver::buildProtocolType( ProtocolTypeRepr * repr , Type instanceType , Optional<MetatypeRepresentation> storedRepr)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::substMemberTypeWithBase( ModuleDecl * module , TypeDecl * member , Type baseTy , bool useArchetypes)",95, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"UnsupportedProtocolVisitor::UnsupportedProtocolVisitor( TypeChecker & tc , bool checkStatements)",2, 70, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"UnsupportedProtocolVisitor::walkToTypeReprPre( TypeRepr * T)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"UnsupportedProtocolVisitor::walkToStmtPre( Stmt * S)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"UnsupportedProtocolVisitor::walkToDeclPre( Decl * D)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"UnsupportedProtocolVisitor::visitIdentTypeRepr( IdentTypeRepr * T)",35, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"UnsupportedProtocolVisitor::visitRequirements( ArrayRef<RequirementRepr> reqts)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::checkUnsupportedProtocolType( Decl * decl)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::checkUnsupportedProtocolType( Stmt * stmt)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::checkUnsupportedProtocolType( TrailingWhereClause * whereClause)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckType.cpp,"TypeChecker::checkUnsupportedProtocolType( GenericParamList * genericParams)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::Constraint( ConstraintKind kind , ArrayRef<Constraint*> constraints , ConstraintLocator * locator , ArrayRef<TypeVariableType*> typeVars)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::Constraint( ConstraintKind Kind , Type First , Type Second , ConstraintLocator * locator , ArrayRef<TypeVariableType*> typeVars)",59, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::Constraint( ConstraintKind Kind , Type First , Type Second , Type Third , ConstraintLocator * locator , ArrayRef<TypeVariableType*> typeVars)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::Constraint( ConstraintKind kind , Type first , Type second , DeclName member , DeclContext * useDC , FunctionRefKind functionRefKind , ConstraintLocator * locator , ArrayRef<TypeVariableType*> typeVars)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::Constraint( Type type , OverloadChoice choice , DeclContext * useDC , ConstraintLocator * locator , ArrayRef<TypeVariableType*> typeVars)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::Constraint( ConstraintKind kind , ConversionRestrictionKind restriction , Type first , Type second , ConstraintLocator * locator , ArrayRef<TypeVariableType*> typeVars)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::Constraint( ConstraintKind kind , ConstraintFix * fix , Type first , Type second , ConstraintLocator * locator , ArrayRef<TypeVariableType*> typeVars)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::getProtocol() const",7, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::clone( ConstraintSystem & cs) const",47, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::print( llvm :: raw_ostream & Out , SourceManager * sm) const",146, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::dump( SourceManager * sm) const",4, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::dump( ConstraintSystem * CS) const",14, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"swift::constraints::getName( ConversionRestrictionKind kind)",49, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"gatherReferencedTypeVars( Constraint * constraint , SmallVectorImpl<TypeVariableType*> & typeVars)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"uniqueTypeVariables( SmallVectorImpl<TypeVariableType*> & typeVars)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::isExplicitConversion() const",10, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::create( ConstraintSystem & cs , ConstraintKind kind , Type first , Type second , ConstraintLocator * locator)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::create( ConstraintSystem & cs , ConstraintKind kind , Type first , Type second , Type third , ConstraintLocator * locator)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::createMemberOrOuterDisjunction( ConstraintSystem & cs , ConstraintKind kind , Type first , Type second , DeclName member , DeclContext * useDC , FunctionRefKind functionRefKind , ArrayRef<OverloadChoice> outerAlternatives , ConstraintLocator * locator)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::createMember( ConstraintSystem & cs , ConstraintKind kind , Type first , Type second , DeclName member , DeclContext * useDC , FunctionRefKind functionRefKind , ConstraintLocator * locator)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::createBindOverload( ConstraintSystem & cs , Type type , OverloadChoice choice , DeclContext * useDC , ConstraintLocator * locator)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::createRestricted( ConstraintSystem & cs , ConstraintKind kind , ConversionRestrictionKind restriction , Type first , Type second , ConstraintLocator * locator)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::createFixed( ConstraintSystem & cs , ConstraintKind kind , ConstraintFix * fix , Type first , Type second , ConstraintLocator * locator)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::createDisjunction( ConstraintSystem & cs , ArrayRef<Constraint*> constraints , ConstraintLocator * locator , RememberChoice_t rememberChoice)",73, 2, 0, 0
repos/cpp/swift/lib/Sema/Constraint.cpp,"Constraint::operator new( size_t bytes , ConstraintSystem & cs , size_t alignment)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"ComponentStep::Scope::Scope( ComponentStep & component)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"SplitterStep::take( bool prevFailed)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"SplitterStep::resume( bool prevFailed)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"SplitterStep::computeFollowupSteps( SmallVectorImpl<std::unique_ptr<ComponentStep>> & componentSteps)",109, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"SplitterStep::mergePartialSolutions() const",50, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"ComponentStep::take( bool prevFailed)",55, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"ComponentStep::resume( bool prevFailed)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"TypeVariableStep::setup()",16, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"TypeVariableStep::attempt( const TypeVariableBinding & choice)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"TypeVariableStep::resume( bool prevFailed)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"DisjunctionStep::resume( bool prevFailed)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"DisjunctionStep::shouldSkip( const DisjunctionChoice & choice) const",43, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"DisjunctionStep::shouldStopAt( const DisjunctionChoice & choice) const",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"swift::isSIMDOperator( ValueDecl * value)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"DisjunctionStep::shortCircuitDisjunctionAt( Constraint * currentChoice , Constraint * lastSuccessfulChoice) const",57, 2, 0, 0
repos/cpp/swift/lib/Sema/CSStep.cpp,"DisjunctionStep::attempt( const DisjunctionChoice & choice)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::BracePair::BracePair( const SourceRange & BR)",1, 57, 4, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::BracePairPusher::BracePairPusher( BracePairStack & BPS , const SourceRange & BR)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::BracePairPusher::~BracePairPusher()",6, 6, 4, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::BracePairPusher::invalidate()",6, 6, 4, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::BracePairPusher::isValid()",1, 37, 4, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::TargetKindSetter::TargetKindSetter( BracePairStack & BPS , BracePair :: TargetKinds Kind)",6, 6, 4, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::TargetKindSetter::~TargetKindSetter()",3, 6, 4, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::escapeToTarget( BracePair :: TargetKinds TargetKind , ElementVector & Elements , size_t EI)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::Instrumenter( ASTContext & C , DeclContext * DC , std :: mt19937_64 & RNG , bool HP , unsigned & TmpNameIndex)",4, 31, 6, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformStmt( Stmt * S)",34, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformDeferStmt( DeferStmt * DS)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformIfStmt( IfStmt * IS)",17, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformGuardStmt( GuardStmt * GS)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformWhileStmt( WhileStmt * WS)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformRepeatWhileStmt( RepeatWhileStmt * RWS)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformForEachStmt( ForEachStmt * FES)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformSwitchStmt( SwitchStmt * SS)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformDoStmt( DoStmt * DS)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformDoCatchStmt( DoCatchStmt * DCS)",17, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformDecl( Decl * D)",20, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::digForVariable( Expr * E)",35, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::digForName( Expr * E)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::digForInoutDeclRef( Expr * E)",28, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::transformBraceStmt( BraceStmt * BS , bool TopLevel = false)",228, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::logVarDecl( VarDecl * VD)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::logDeclOrMemberRef( Added<Expr*> RE)",34, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::maybeFixupPrintArgument( ApplyExpr * Print)",51, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::logPrint( bool isDebugPrint , ApplyExpr * AE , PatternBindingDecl * & ArgPattern , VarDecl * & ArgVariable)",21, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::logPostPrint( SourceRange SR)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::buildPatternAndVariable( Expr * InitExpr)",31, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::buildLoggerCall( Added<Expr*> E , SourceRange SR , const char * Name)",18, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::buildScopeEntry( SourceRange SR)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::buildScopeExit( SourceRange SR)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::buildScopeCall( SourceRange SR , bool IsExit)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::buildLoggerCallWithArgs( const char * LoggerName , MutableArrayRef<Expr*> Args , SourceRange SR)",42, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"Instrumenter::buildLoggerCallWithApply( Added<ApplyExpr*> Apply , SourceRange SR)",31, 4, 2, 0
repos/cpp/swift/lib/Sema/PlaygroundTransform.cpp,"swift::performPlaygroundTransform( SourceFile & SF , bool HighPerformance)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::createForContext( ASTContext & ctx)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::TypeChecker( ASTContext & Ctx)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::~TypeChecker()",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::getProtocol( SourceLoc loc , KnownProtocolKind kind)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::getLiteralProtocol( Expr * expr)",75, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::getObjectLiteralConstructorName( ObjectLiteralExpr * expr)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::getObjectLiteralParameterType( ObjectLiteralExpr * expr , ConstructorDecl * ctor)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::getStdlibModule( const DeclContext * dc)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::lookupBoolType( const DeclContext * dc)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"bindExtensionToNominal( ExtensionDecl * ext , NominalTypeDecl * nominal)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"bindExtensions( SourceFile & SF , TypeChecker & TC)",50, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"typeCheckFunctionsAndExternalDecls( SourceFile & SF , TypeChecker & TC)",150, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::typeCheckExternalDefinitions( SourceFile & SF)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::performTypeChecking( SourceFile & SF , TopLevelContext & TLC , OptionSet<TypeCheckingFlags> Options , unsigned StartElem , unsigned WarnLongFunctionBodies , unsigned WarnLongExpressionTypeChecking , unsigned ExpressionTimeoutThreshold , unsigned SwitchCheckingInvocationThreshold)",117, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::performWholeModuleTypeChecking( SourceFile & SF)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::performTypeLocChecking( ASTContext & Ctx , TypeLoc & T , DeclContext * DC , bool ProduceDiagnostics)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::performTypeLocChecking( ASTContext & Ctx , TypeLoc & T , bool isSILMode , bool isSILType , GenericEnvironment * GenericEnv , DeclContext * DC , bool ProduceDiagnostics)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::handleSILGenericParams( ASTContext & Ctx , GenericParamList * genericParams , DeclContext * DC)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::typeCheckCompletionDecl( Decl * D)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"getTypeOfCompletionContextExpr( TypeChecker & TC , DeclContext * DC , CompletionTypeCheckKind kind , Expr * & parsedExpr , ConcreteDeclRef & referencedDecl)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::getTypeOfCompletionContextExpr( ASTContext & Ctx , DeclContext * DC , CompletionTypeCheckKind kind , Expr * & parsedExpr , ConcreteDeclRef & referencedDecl)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::getTypeOfCompletionOperator( DeclContext * DC , Expr * LHS , Identifier opName , DeclRefKind refKind , ConcreteDeclRef & referencedDecl)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::typeCheckExpression( DeclContext * DC , Expr * & parsedExpr)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::typeCheckAbstractFunctionBodyUntil( AbstractFunctionDecl * AFD , SourceLoc EndTypeCheckLoc)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::typeCheckTopLevelCodeDecl( TopLevelCodeDecl * TLCD)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"swift::createTypeChecker( ASTContext & Ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::checkForForbiddenPrefix( const Decl * D)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::checkForForbiddenPrefix( const UnresolvedDeclRefExpr * E)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::checkForForbiddenPrefix( Identifier Ident)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::checkForForbiddenPrefix( StringRef Name)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeChecker.cpp,"TypeChecker::getDeclTypeCheckingSemantics( ValueDecl * decl)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"findReferencedDecl( Expr * expr , DeclNameLoc & loc)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"isArithmeticOperatorDecl( ValueDecl * vd)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"mergeRepresentativeEquivalenceClasses( ConstraintSystem & CS , TypeVariableType * tyvar1 , TypeVariableType * tyvar2)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedTypeInfo::LinkedTypeInfo()",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedTypeInfo::hasLiteral()",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprCollector::LinkedExprCollector( llvm :: SmallVectorImpl<Expr*> & linkedExprs , ConstraintSystem & cs)",3, 46, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprCollector::walkToExprPre( Expr * expr)",31, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprCollector::walkToExprPost( Expr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprCollector::walkToStmtPre( Stmt * stmt)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprCollector::walkToDeclPre( Decl * decl)",1, 62, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprCollector::walkToPatternPre( Pattern * pat)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprCollector::walkToTypeLocPre( TypeLoc & TL)",1, 66, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprAnalyzer::LinkedExprAnalyzer( LinkedTypeInfo & lti , ConstraintSystem & cs)",2, 28, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprAnalyzer::walkToExprPre( Expr * expr)",137, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprAnalyzer::walkToStmtPre( Stmt * stmt)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprAnalyzer::walkToDeclPre( Decl * decl)",1, 62, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprAnalyzer::walkToPatternPre( Pattern * pat)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"LinkedExprAnalyzer::walkToTypeLocPre( TypeLoc & TL)",1, 66, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"computeFavoredTypeForExpr( Expr * expr , ConstraintSystem & CS)",178, 4, 2, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"isFavoredParamAndArg( ConstraintSystem & CS , Type paramTy , Expr * arg , Type argTy , Type otherArgTy = Type())",40, 4, 2, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"favorCallOverloads( ApplyExpr * expr , ConstraintSystem & CS , llvm :: function_ref<bool(ValueDecl*)> isFavored , std :: function<bool(ValueDecl*)> mustConsider = nullptr)",100, 4, 2, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"getOperandCount( Type t)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"getParamCount( ValueDecl * VD)",18, 4, 2, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"favorMatchingUnaryOperators( ApplyExpr * expr , ConstraintSystem & CS)",28, 4, 2, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"favorMatchingOverloadExprs( ApplyExpr * expr , ConstraintSystem & CS)",82, 4, 2, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"favorMatchingBinaryOperators( ApplyExpr * expr , ConstraintSystem & CS)",98, 4, 2, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintOptimizer::ConstraintOptimizer( ConstraintSystem & cs)",2, 16, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintOptimizer::walkToExprPre( Expr * expr)",32, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintOptimizer::walkToExprPost( Expr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintOptimizer::walkToStmtPre( Stmt * stmt)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintOptimizer::walkToDeclPre( Decl * decl)",1, 62, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::addMemberRefConstraints( Expr * expr , Expr * base , DeclName name , FunctionRefKind functionRefKind , ArrayRef<ValueDecl*> outerAlternatives)",19, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::addMemberRefConstraints( Expr * expr , Expr * base , ValueDecl * decl , FunctionRefKind functionRefKind)",21, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::addSubscriptConstraints( Expr * anchor , Type baseTy , Expr * index , ValueDecl * declOrNull , ConstraintLocator * locator = nullptr)",115, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::ConstraintGenerator( ConstraintSystem & CS)",1, 73, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::~ConstraintGenerator()",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::getConstraintSystem() const",1, 65, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::enterClosure( ClosureExpr * closure)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::exitClosure( ClosureExpr * closure)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitErrorExpr( ErrorExpr * E)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitCodeCompletionExpr( CodeCompletionExpr * E)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitLiteralExpr( LiteralExpr * expr)",16, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitInterpolatedStringLiteralExpr( InterpolatedStringLiteralExpr * expr)",48, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitMagicIdentifierLiteralExpr( MagicIdentifierLiteralExpr * expr)",22, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitObjectLiteralExpr( ObjectLiteralExpr * expr)",54, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitDeclRefExpr( DeclRefExpr * E)",65, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitOtherConstructorDeclRefExpr( OtherConstructorDeclRefExpr * E)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitSuperRefExpr( SuperRefExpr * E)",9, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::resolveTypeReferenceInExpression( TypeRepr * rep)",6, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitTypeExpr( TypeExpr * E)",16, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitDotSyntaxBaseIgnoredExpr( DotSyntaxBaseIgnoredExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitOverloadedDeclRefExpr( OverloadedDeclRefExpr * expr)",30, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitUnresolvedDeclRefExpr( UnresolvedDeclRefExpr * expr)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitMemberRefExpr( MemberRefExpr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitDynamicMemberRefExpr( DynamicMemberRefExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitUnresolvedMemberExpr( UnresolvedMemberExpr * expr)",64, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitUnresolvedDotExpr( UnresolvedDotExpr * expr)",56, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitUnresolvedSpecializeExpr( UnresolvedSpecializeExpr * expr)",68, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitSequenceExpr( SequenceExpr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitArrowExpr( ArrowExpr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitIdentityExpr( IdentityExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitAnyTryExpr( AnyTryExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitOptionalTryExpr( OptionalTryExpr * expr)",22, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitParenExpr( ParenExpr * expr)",10, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitTupleExpr( TupleExpr * expr)",15, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitSubscriptExpr( SubscriptExpr * expr)",11, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitArrayExpr( ArrayExpr * expr)",81, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::isMergeableValueKind( Expr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitDictionaryExpr( DictionaryExpr * expr)",163, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitDynamicSubscriptExpr( DynamicSubscriptExpr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitTupleElementExpr( TupleElementExpr * expr)",8, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::getClosureParams( ClosureExpr * closureExpr , SmallVectorImpl<AnyFunctionType::Param> & params)",25, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::getTypeForPattern( Pattern * pattern , ConstraintLocatorBuilder locator)",101, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitCaptureListExpr( CaptureListExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::closureHasNoResult( ClosureExpr * expr)",46, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::closureCanThrow( ClosureExpr * expr)",148, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitClosureExpr( ClosureExpr * expr)",60, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitAutoClosureExpr( AutoClosureExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitInOutExpr( InOutExpr * expr)",15, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitVarargExpansionExpr( VarargExpansionExpr * expr)",20, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitDynamicTypeExpr( DynamicTypeExpr * expr)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitOpaqueValueExpr( OpaqueValueExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitApplyExpr( ApplyExpr * expr)",91, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::getSuperType( VarDecl * selfDecl , SourceLoc diagLoc , Diag<> diag_not_in_class , Diag<> diag_no_base_class)",32, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitRebindSelfInConstructorExpr( RebindSelfInConstructorExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitIfExpr( IfExpr * expr)",23, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitImplicitConversionExpr( ImplicitConversionExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::createTypeVariableAndDisjunctionForIUOCoercion( Type toType , ConstraintLocator * locator)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitForcedCheckedCastExpr( ForcedCheckedCastExpr * expr)",32, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitCoerceExpr( CoerceExpr * expr)",32, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitConditionalCheckedCastExpr( ConditionalCheckedCastExpr * expr)",32, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitIsExpr( IsExpr * expr)",24, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitDiscardAssignmentExpr( DiscardAssignmentExpr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::genAssignDestType( Expr * expr , ConstraintSystem & CS)",15, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitAssignExpr( AssignExpr * expr)",9, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitUnresolvedPatternExpr( UnresolvedPatternExpr * expr)",10, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::getOptionalType( SourceLoc optLoc , Type valueTy)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitBindOptionalExpr( BindOptionalExpr * expr)",14, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitOptionalEvaluationExpr( OptionalEvaluationExpr * expr)",17, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitForceValueExpr( ForceValueExpr * expr)",14, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitOpenExistentialExpr( OpenExistentialExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitMakeTemporarilyEscapableExpr( MakeTemporarilyEscapableExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitKeyPathApplicationExpr( KeyPathApplicationExpr * expr)",12, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitEnumIsCaseExpr( EnumIsCaseExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitLazyInitializerExpr( LazyInitializerExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitEditorPlaceholderExpr( EditorPlaceholderExpr * E)",29, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitObjCSelectorExpr( ObjCSelectorExpr * E)",20, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitKeyPathExpr( KeyPathExpr * E)",133, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitKeyPathDotExpr( KeyPathDotExpr * E)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::visitTapExpr( TapExpr * expr)",16, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::getTypeOperation( UnresolvedDotExpr * UDE , ASTContext & Context)",17, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintGenerator::resultOfTypeOperation( TypeOperation op , Expr * Arg)",83, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"SanitizeExpr::SanitizeExpr( ConstraintSystem & cs , bool eraseOEsOnly = false)",3, 54, 10, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"SanitizeExpr::walkToExprPre( Expr * expr)",90, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"SanitizeExpr::walkToExprPost( Expr * expr)",83, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"SanitizeExpr::walkToDeclPre( Decl * decl)",1, 62, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"SanitizeExpr::walkToStmtPre( Stmt * S)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintWalker::ConstraintWalker( ConstraintGenerator & CG)",1, 59, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintWalker::walkToExprPre( Expr * expr)",59, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintWalker::walkToExprPost( Expr * expr)",72, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintWalker::walkToStmtPre( Stmt * stmt)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintWalker::walkToDeclPre( Decl * decl)",1, 62, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ArgumentLabelWalker::ArgumentLabelWalker( ConstraintSystem & cs , Expr * expr)",2, 52, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ArgumentLabelWalker::associateArgumentLabels( Expr * fn , State labels , bool labelsArePermanent)",24, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ArgumentLabelWalker::walkToExprPre( Expr * expr)",13, 6, 4, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintSystem::generateConstraints( Expr * expr)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintSystem::generateConstraints( Pattern * pattern , ConstraintLocatorBuilder locator)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ConstraintSystem::optimizeConstraints( Expr * e)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"swift::isExtensionApplied( DeclContext & DC , Type BaseTy , const ExtensionDecl * ED)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"canSatisfy( Type type1 , Type type2 , bool openArchetypes , ConstraintKind kind , DeclContext * dc)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"swift::canPossiblyEqual( Type T1 , Type T2 , DeclContext & DC)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"swift::canPossiblyConvertTo( Type T1 , Type T2 , DeclContext & DC)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"swift::isEqual( Type T1 , Type T2 , DeclContext & DC)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"swift::isConvertibleTo( Type T1 , Type T2 , DeclContext & DC)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"swift::eraseOpenedExistentials( ConstraintSystem & CS , Expr * & expr)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ResolvedMemberResult::ResolvedMemberResult()",1, 78, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ResolvedMemberResult::~ResolvedMemberResult()",1, 65, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ResolvedMemberResult::operator bool() const",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ResolvedMemberResult::hasBestOverload() const",2, 60, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ResolvedMemberResult::getBestOverload() const",2, 75, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"ResolvedMemberResult::getMemberDecls( InterestedMemberKind Kind)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSGen.cpp,"swift::resolveValueMember( DeclContext & DC , Type BaseTy , DeclName Name)",42, 2, 0, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::Instrumenter( ASTContext & C , DeclContext * DC , unsigned & TmpNameIndex)",2, 67, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformStmt( Stmt * S)",30, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformStmtCondition( StmtCondition SC , SourceLoc StartLoc)",25, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformIfStmt( IfStmt * IS)",44, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformGuardStmt( GuardStmt * GS)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformWhileStmt( WhileStmt * WS)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformRepeatWhileStmt( RepeatWhileStmt * RWS)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformForEachStmt( ForEachStmt * FES)",28, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformSwitchStmt( SwitchStmt * SS)",41, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformDoStmt( DoStmt * DS)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformDoCatchStmt( DoCatchStmt * DCS)",17, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformDeferStmt( DeferStmt * DS)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformDecl( Decl * D)",33, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::transformBraceStmt( BraceStmt * BS , bool TopLevel = false)",126, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::buildPatternAndVariable( Expr * InitExpr)",31, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::buildLoggerCall( SourceRange SR , bool isBefore)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::prependLoggerCall( BraceStmt * BS , SourceRange SR)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::buildInlineLoggerCall( SourceRange SR , Expr * E)",66, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::buildLoggerCallWithArgs( const char * LoggerName , SourceRange SR)",39, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"Instrumenter::buildLoggerCallWithApply( Added<ApplyExpr*> Apply , SourceRange SR)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/PCMacro.cpp,"swift::performPCMacro( SourceFile & SF , TopLevelContext & TLC)",45, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"isOnDemandAccessor( AbstractStorageDecl * storage , AccessorKind kind)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"addMemberToContextIfNeeded( Decl * D , DeclContext * DC , Decl * Hint = nullptr)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"getParamDeclAtIndex( FuncDecl * fn , unsigned index)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"getFirstParamDecl( FuncDecl * fn)",3, 3, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"buildArgument( SourceLoc loc , DeclContext * DC , StringRef name , Type interfaceType , VarDecl :: Specifier specifier , ASTContext & context)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"buildIndexForwardingParamList( AbstractStorageDecl * storage , ArrayRef<ParamDecl*> prefix , ASTContext & context)",36, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"createAccessorGenericParams( AbstractStorageDecl * storage)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"createGetterPrototype( AbstractStorageDecl * storage , ASTContext & ctx)",79, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"createSetterPrototype( AbstractStorageDecl * storage , ASTContext & ctx , AccessorDecl * getter = nullptr)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"maybeMarkTransparent( AccessorDecl * accessor , ASTContext & ctx)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"createCoroutineAccessorPrototype( AbstractStorageDecl * storage , AccessorKind kind , ASTContext & ctx)",80, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"createReadCoroutinePrototype( AbstractStorageDecl * storage , ASTContext & ctx)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"createModifyCoroutinePrototype( AbstractStorageDecl * storage , ASTContext & ctx)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"buildArgumentForwardingExpr( ArrayRef<ParamDecl*> params , ASTContext & ctx)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"buildSubscriptIndexReference( ASTContext & ctx , AccessorDecl * accessor)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"buildSelfReference( VarDecl * selfDecl , SelfAccessorKind selfAccessorKind , ASTContext & ctx)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"buildStorageReference( AccessorDecl * accessor , AbstractStorageDecl * storage , TargetImpl target , ASTContext & ctx)",57, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"createPropertyLoadOrCallSuperclassGetter( AccessorDecl * accessor , AbstractStorageDecl * storage , TargetImpl target , ASTContext & ctx)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"getNSCopyingProtocol( ASTContext & ctx , DeclContext * DC)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"checkConformanceToNSCopying( ASTContext & ctx , VarDecl * var , Type type)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"getUnderlyingTypeOfVariable( VarDecl * var)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"TypeChecker::checkConformanceToNSCopying( VarDecl * var)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeCopyWithZoneCall( Expr * Val , VarDecl * VD , ASTContext & Ctx)",54, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"createPropertyStoreOrCallSuperclassSetter( AccessorDecl * accessor , Expr * value , AbstractStorageDecl * storage , TargetImpl target , SmallVectorImpl<ASTNode> & body , ASTContext & ctx)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"isSynthesizedComputedProperty( AbstractStorageDecl * storage)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeTrivialGetterBody( AccessorDecl * getter , TargetImpl target , ASTContext & ctx)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeTrivialGetterBody( AccessorDecl * getter , ASTContext & ctx)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeInheritedGetterBody( AccessorDecl * getter , ASTContext & ctx)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeAddressedGetterBody( AccessorDecl * getter , ASTContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeReadCoroutineGetterBody( AccessorDecl * getter , ASTContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeTrivialSetterBodyWithStorage( AccessorDecl * setter , TargetImpl target , AbstractStorageDecl * storageToUse , ASTContext & ctx)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeTrivialSetterBody( AccessorDecl * setter , ASTContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeCoroutineAccessorBody( AccessorDecl * accessor , ASTContext & ctx)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeReadCoroutineBody( AccessorDecl * read , ASTContext & ctx)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeModifyCoroutineBody( AccessorDecl * modify , ASTContext & ctx)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"addGetterToStorage( AbstractStorageDecl * storage , ASTContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"addSetterToStorage( AbstractStorageDecl * storage , ASTContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"addReadCoroutineToStorage( AbstractStorageDecl * storage , ASTContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"addModifyCoroutineToStorage( AbstractStorageDecl * storage , ASTContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"addOpaqueAccessorToStorage( AbstractStorageDecl * storage , AccessorKind kind , ASTContext & ctx)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"addExpectedOpaqueAccessorsToStorage( AbstractStorageDecl * storage , ASTContext & ctx)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"addTrivialAccessorsToStorage( AbstractStorageDecl * storage , ASTContext & ctx)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"getProtocolStorageImpl( AbstractStorageDecl * storage)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"setProtocolStorageImpl( AbstractStorageDecl * storage , ASTContext & ctx)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeMutableAddressSetterBody( AccessorDecl * setter , ASTContext & ctx)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeModifyCoroutineSetterBody( AccessorDecl * setter , ASTContext & ctx)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"convertNSManagedStoredVarToComputed( VarDecl * VD , ASTContext & ctx)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"TypeChecker::synthesizeWitnessAccessorsForStorage( AbstractStorageDecl * requirement , AbstractStorageDecl * storage)",36, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeObservedSetterBody( AccessorDecl * Set , TargetImpl target , ASTContext & Ctx)",84, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeStoredWithObserversSetterBody( AccessorDecl * setter , ASTContext & ctx)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeInheritedWithObserversSetterBody( AccessorDecl * setter , ASTContext & ctx)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"RecontextualizeClosures::RecontextualizeClosures( DeclContext * NewDC)",1, 66, 4, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"RecontextualizeClosures::walkToExprPre( Expr * E)",27, 6, 4, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"RecontextualizeClosures::walkToDeclPre( Decl *)",1, 58, 4, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"RecontextualizeClosures::walkToStmtPre( Stmt * S)",1, 81, 4, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeLazyGetterBody( AbstractFunctionDecl * fn , void * context)",125, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeLazySetterBody( AbstractFunctionDecl * fn , void * context)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"swift::completeLazyVarImplementation( VarDecl * VD)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"wouldBeCircularSynthesis( AbstractStorageDecl * storage , AccessorKind kind)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"swift::triggerAccessorSynthesis( TypeChecker & TC , AbstractStorageDecl * storage)",38, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"maybeAddAccessorsToLazyVariable( VarDecl * var , ASTContext & ctx)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"swift::maybeAddAccessorsToStorage( AbstractStorageDecl * storage)",83, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeGetterBody( AccessorDecl * getter , ASTContext & ctx)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeSetterBody( AccessorDecl * setter , ASTContext & ctx)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeAccessorBody( AbstractFunctionDecl * fn , void *)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"swift::createImplicitConstructor( TypeChecker & tc , NominalTypeDecl * decl , ImplicitConstructorKind ICK)",86, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeStubBody( AbstractFunctionDecl * fn , void *)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"configureGenericDesignatedInitOverride( ASTContext & ctx , ClassDecl * classDecl , Type superclassTy , ConstructorDecl * superclassCtor)",96, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"configureInheritedDesignatedInitAttributes( TypeChecker & tc , ClassDecl * classDecl , ConstructorDecl * ctor , ConstructorDecl * superclassCtor)",71, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"synthesizeDesignatedInitOverride( AbstractFunctionDecl * fn , void * context)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/CodeSynthesis.cpp,"swift::createDesignatedInitOverride( TypeChecker & tc , ClassDecl * classDecl , ConstructorDecl * superclassCtor , DesignatedInitKind kind)",95, 2, 0, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"ErrorGatherer::ErrorGatherer( DiagnosticEngine & diags)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"ErrorGatherer::~ErrorGatherer()",1, 55, 2, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"ErrorGatherer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"ErrorGatherer::hadError()",1, 36, 2, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"ErrorFinder::ErrorFinder()",1, 19, 2, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"ErrorFinder::walkToExprPre( Expr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"ErrorFinder::walkToDeclPre( Decl * D)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"ErrorFinder::hadError()",1, 36, 2, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"InstrumenterBase::anchor()",1, 35, 0, 0
repos/cpp/swift/lib/Sema/InstrumenterSupport.cpp,"InstrumenterBase::doTypeCheckImpl( ASTContext & Ctx , DeclContext * DC , Expr * & parsedExpr)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"hasAnyError( ArrayRef<OptionalAdjustment> adjustments)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::RequirementCheck::RequirementCheck( CheckKind kind)",3, 71, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::RequirementCheck::RequirementCheck( CheckKind kind , AccessScope requiredAccessScope)",3, 71, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::RequirementCheck::RequirementCheck( CheckKind kind , AvailabilityContext requiredAvailability)",3, 53, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"RequirementMatch::getWitness( ASTContext & ctx) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::getReferencedAssocTypeOfProtocol( Type type , ProtocolDecl * proto)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getTypesToCompare( ValueDecl * reqt , Type reqtType , bool reqtTypeIsIUO , Type witnessType , bool witnessTypeIsIUO , VarianceKind variance)",74, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"checkMutating( FuncDecl * requirement , FuncDecl * witness , ValueDecl * witnessDecl)",103, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"checkObjCWitnessSelector( TypeChecker & tc , ValueDecl * req , ValueDecl * witness)",38, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getParameterList( ValueDecl * value)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getStandinForAccessor( AbstractStorageDecl * witnessStorage , AccessorKind requirementKind)",55, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::matchWitness( TypeChecker & tc , DeclContext * dc , ValueDecl * req , ValueDecl * witness , llvm :: function_ref<std::tuple<Optional<RequirementMatch>,Type,Type>(void)> setup , llvm :: function_ref<Optional<RequirementMatch>(Type,Type)> matchTypes , llvm :: function_ref<RequirementMatch(bool,ArrayRef<OptionalAdjustment>)> finalize)",245, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getOrCreateRequirementEnvironment( WitnessChecker :: RequirementEnvironmentCache & reqEnvCache , DeclContext * dc , GenericSignature * reqSig , ProtocolDecl * proto , ClassDecl * covariantSelf , ProtocolConformance * conformance)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"findMissingGenericRequirementForSolutionFix( constraints :: ConstraintFix * fix , ValueDecl * witness , ProtocolConformance * conformance , const RequirementEnvironment & reqEnvironment)",62, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::matchWitness( TypeChecker & tc , WitnessChecker :: RequirementEnvironmentCache & reqEnvCache , ProtocolDecl * proto , ProtocolConformance * conformance , DeclContext * dc , ValueDecl * req , ValueDecl * witness)",198, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"witnessHasImplementsAttrForRequiredName( ValueDecl * witness , ValueDecl * requirement)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"witnessHasImplementsAttrForExactRequirement( ValueDecl * witness , ValueDecl * requirement)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"isBetterMatch( TypeChecker & tc , DeclContext * dc , ValueDecl * requirement , const RequirementMatch & match1 , const RequirementMatch & match2)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"WitnessChecker::WitnessChecker( TypeChecker & tc , ProtocolDecl * proto , Type adoptee , DeclContext * dc)",3, 56, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"WitnessChecker::lookupValueWitnessesViaImplementsAttr( ValueDecl * req , SmallVector<ValueDecl*,4> & witnesses)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"WitnessChecker::lookupValueWitnesses( ValueDecl * req , bool * ignoringNames)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"WitnessChecker::findBestWitness( ValueDecl * requirement , bool * ignoringNames , NormalProtocolConformance * conformance , SmallVectorImpl<RequirementMatch> & matches , unsigned & numViable , unsigned & bestIdx , bool & doNotDiagnoseMatches)",144, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"WitnessChecker::getRequiredAccessScope()",36, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"WitnessChecker::checkWitnessAccess( ValueDecl * requirement , ValueDecl * witness , bool * isSetter)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"WitnessChecker::checkWitnessAvailability( ValueDecl * requirement , ValueDecl * witness , AvailabilityContext * requiredAvailability)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"WitnessChecker::checkWitness( ValueDecl * requirement , const RequirementMatch & match)",62, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::MultiConformanceChecker::MultiConformanceChecker( TypeChecker & TC)",1, 53, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::MultiConformanceChecker::getTypeChecker() const",1, 53, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::MultiConformanceChecker::addConformance( NormalProtocolConformance * conformance)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::MultiConformanceChecker::getUnsatisfiedRequirements()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::MultiConformanceChecker::isCoveredMember( ValueDecl * member) const",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"MultiConformanceChecker::isUnsatisfiedReq( NormalProtocolConformance * conformance , ValueDecl * req)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"MultiConformanceChecker::checkAllConformances()",36, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"diagnoseConformanceImpliedByConditionalConformance( DiagnosticEngine & Diags , NormalProtocolConformance * conformance , NormalProtocolConformance * implyingConf , bool issueFixit)",126, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"MultiConformanceChecker::checkIndividualConformance( NormalProtocolConformance * conformance , bool issueFixit)",223, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"addAssocTypeDeductionString( llvm :: SmallString<128> & str , AssociatedTypeDecl * assocType , Type deduced)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getTypeForDisplay( ModuleDecl * module , ValueDecl * decl)",43, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getRequirementTypeForDisplay( ModuleDecl * module , NormalProtocolConformance * conformance , ValueDecl * req)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getRequirementKind( ValueDecl * VD)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"OptionalAdjustment::getOptionalityLoc( ValueDecl * witness) const",34, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"OptionalAdjustment::getOptionalityLoc( TypeRepr * tyR) const",29, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"classifyOptionalityIssues( const SmallVectorImpl<OptionalAdjustment> & adjustments , ValueDecl * requirement)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"addOptionalityFixIts( const SmallVectorImpl<OptionalAdjustment> & adjustments , const ASTContext & ctx , ValueDecl * witness , InFlightDiagnostic & diag)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"diagnoseMatch( ModuleDecl * module , NormalProtocolConformance * conformance , ValueDecl * req , const RequirementMatch & match)",143, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::ConformanceChecker( TypeChecker & tc , NormalProtocolConformance * conformance , llvm :: SetVector<ValueDecl*> & GlobalMissingWitnesses , bool suppressDiagnostics)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::getReferencedAssociatedTypes( ValueDecl * req)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::recordWitness( ValueDecl * requirement , const RequirementMatch & match)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::recordOptionalWitness( ValueDecl * requirement)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::recordInvalidWitness( ValueDecl * requirement)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getLocForDiagnosingWitness( const NormalProtocolConformance * conformance , const ValueDecl * witness)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"emitDeclaredHereIfNeeded( DiagnosticEngine & diags , SourceLoc mainDiagLoc , const ValueDecl * value)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::checkObjCTypeErasedGenerics( AssociatedTypeDecl * assocType , Type type , TypeDecl * typeDecl)",40, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"DiagnoseUsableFromInline::DiagnoseUsableFromInline( const ValueDecl * witness)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"DiagnoseUsableFromInline::operator ( )( const NormalProtocolConformance * conformance)",15, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::recordTypeWitness( AssociatedTypeDecl * assocType , Type type , TypeDecl * typeDecl)",158, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::printRequirementStub( ValueDecl * Requirement , DeclContext * Adopter , Type AdopterTy , SourceLoc TypeLoc , raw_ostream & OS)",79, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"printProtocolStubFixitString( SourceLoc TypeLoc , ProtocolConformance * Conf , ArrayRef<ValueDecl*> MissingWitnesses , std :: string & FixitString , llvm :: SetVector<ValueDecl*> & NoStubRequirements)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::diagnoseMissingWitnesses( MissingWitnessDiagnosisKind Kind)",92, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getAdopteeSelfSameTypeConstraint( ClassDecl * selfClass , ValueDecl * witness)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::checkNonFinalClassWitness( ValueDecl * requirement , ValueDecl * witness)",153, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::resolveWitnessViaLookup( ValueDecl * requirement)",334, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::resolveWitnessViaDerivation( ValueDecl * requirement)",38, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::resolveWitnessViaDefault( ValueDecl * requirement)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::checkTypeWitness( TypeChecker & tc , DeclContext * dc , ProtocolDecl * proto , AssociatedTypeDecl * assocType , Type type)",49, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::resolveWitnessTryingAllStrategies( ValueDecl * requirement)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::resolveTypeWitnessViaLookup( AssociatedTypeDecl * assocType)",107, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"recordConformanceDependency( DeclContext * DC , NominalTypeDecl * Adoptee , ProtocolConformance * Conformance , bool InExpression)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::addUsedConformances( ProtocolConformance * conformance , llvm :: SmallPtrSetImpl<ProtocolConformance*> & visited)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::addUsedConformances( ProtocolConformance * conformance)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::ensureRequirementsAreSatisfied( bool failUnsubstituted)",106, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::resolveValueWitnesses()",174, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::checkConformance( MissingWitnessDiagnosisKind Kind)",73, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"diagnoseConformanceFailure( Type T , ProtocolDecl * Proto , DeclContext * DC , SourceLoc ComplainLoc)",68, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::diagnoseOrDefer( ValueDecl * requirement , bool isError , std :: function<void(NormalProtocolConformance*)> fn)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ConformanceChecker::emitDelayedDiags()",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::containsProtocol( Type T , ProtocolDecl * Proto , DeclContext * DC , ConformanceCheckOptions options)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::conformsToProtocol( Type T , ProtocolDecl * Proto , DeclContext * DC , ConformanceCheckOptions options , SourceLoc ComplainLoc)",76, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"ModuleDecl::conformsToProtocol( Type sourceTy , ProtocolDecl * targetProtocol)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::markConformanceUsed( ProtocolConformanceRef conformance , DeclContext * dc)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::LookUpConformance::operator ( )( CanType dependentType , Type conformingReplacementType , ProtocolDecl * conformedProtocol) const",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::useObjectiveCBridgeableConformances( DeclContext * dc , Type type)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::useObjectiveCBridgeableConformancesOfArgs( DeclContext * dc , BoundGenericType * bound)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::useBridgedNSErrorConformances( DeclContext * dc , Type type)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::checkConformance( NormalProtocolConformance * conformance)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::checkConformanceRequirements( NormalProtocolConformance * conformance)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"scoreIdentifiers( Identifier lhs , Identifier rhs , unsigned limit)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"combineBaseNameAndFirstArgument( Identifier baseName , Identifier firstArgName , SmallVectorImpl<char> & scratch)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"scorePotentiallyMatchingNames( DeclName lhs , DeclName rhs , bool isFunc , unsigned limit)",49, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"omitNeedlessWords( TypeChecker & tc , ValueDecl * value)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"scorePotentiallyMatching( TypeChecker & tc , ValueDecl * req , ValueDecl * witness , unsigned limit)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"canSuppressPotentialWitnessWarningWithMovement( ValueDecl * requirement , ValueDecl * witness)",41, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"canSuppressPotentialWitnessWarningWithNonObjC( ValueDecl * requirement , ValueDecl * witness)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"getNameLength( DeclName name)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"isGeneric( ValueDecl * decl)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"isUnlabeledInitializerOrSubscript( ValueDecl * value)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"shouldWarnAboutPotentialWitness( MultiConformanceChecker & groupChecker , ValueDecl * req , ValueDecl * witness , AccessLevel access , unsigned score)",59, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"diagnosePotentialWitness( TypeChecker & tc , NormalProtocolConformance * conformance , ValueDecl * req , ValueDecl * witness , AccessLevel access)",56, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"isNSCoding( ProtocolDecl * protocol)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"hasExplicitObjCName( ClassDecl * classDecl)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"diagnoseUnstableName( TypeChecker & tc , ProtocolConformance * conformance , ClassDecl * classDecl)",57, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"hasGenericAncestry( ClassDecl * classDecl)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"inferStaticInitializeObjCMetadata( TypeChecker & tc , ClassDecl * classDecl)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"diagnoseMissingAppendInterpolationMethod( TypeChecker & tc , NominalTypeDecl * typeDecl)",80, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::checkConformancesInContext( DeclContext * dc , IterableDeclContext * idc)",287, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"swift::findWitnessedObjCRequirements( const ValueDecl * witness , bool anySingleRequirement)",147, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::resolveTypeWitness( const NormalProtocolConformance * conformance , AssociatedTypeDecl * assocType)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::resolveWitness( const NormalProtocolConformance * conformance , ValueDecl * requirement)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::deriveProtocolRequirement( DeclContext * DC , NominalTypeDecl * TypeDecl , ValueDecl * Requirement)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::deriveTypeWitness( DeclContext * DC , NominalTypeDecl * TypeDecl , AssociatedTypeDecl * AssocType)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"DefaultWitnessChecker::DefaultWitnessChecker( TypeChecker & tc , ProtocolDecl * proto)",3, 71, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"DefaultWitnessChecker::resolveWitnessViaLookup( ValueDecl * requirement)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"DefaultWitnessChecker::recordWitness( ValueDecl * requirement , const RequirementMatch & match)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::inferDefaultWitnesses( ProtocolDecl * proto)",119, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocol.cpp,"TypeChecker::getWitnessType( Type type , ProtocolDecl * protocol , ProtocolConformanceRef conformance , Identifier name , Diag<> brokenProtocolDiag)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"DenseMapAPFloatKeyInfo::getEmptyKey()",1, 81, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"DenseMapAPFloatKeyInfo::getTombstoneKey()",1, 85, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"DenseMapAPFloatKeyInfo::getHashValue( const APFloat & Key)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"DenseMapAPFloatKeyInfo::isEqual( const APFloat & LHS , const APFloat & RHS)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::PairSwitch::PairSwitch( SpaceKind pair1 , SpaceKind pair2)",3, 11, 8, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::PairSwitch::operator ==( const PairSwitch other) const",3, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::PairSwitch::operator int() const",3, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::computeSize( TypeChecker & TC , const DeclContext * DC , SmallPtrSetImpl<TypeBase*> & cache) const",51, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::Space( Type T , Identifier NameForPrinting)",3, 46, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::Space( UnknownCase_t , bool allowedButNotRequired)",4, 24, 10, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::Space( Type T , Identifier H , ArrayRef<Space> SP)",3, 42, 8, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::Space( Type T , Identifier H , std :: forward_list<Space> SP)",3, 24, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::Space( ArrayRef<Space> SP)",3, 62, 10, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::Space( bool C)",3, 44, 8, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::Space()",3, 24, 8, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::forType( Type T , Identifier NameForPrinting)",5, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::forUnknown( bool allowedButNotRequired)",3, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::forConstructor( Type T , Identifier H , ArrayRef<Space> SP)",8, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::forConstructor( Type T , Identifier H , std :: forward_list<Space> SP)",6, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::forBool( bool C)",3, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::forDisjunct( ArrayRef<Space> SP)",14, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::operator ==( const Space & other) const",4, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::getKind() const",1, 49, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::getSize( TypeChecker & TC , const DeclContext * DC) const",4, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::getMaximumSize()",3, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::isEmpty() const",1, 69, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::isAllowedButNotRequired() const",5, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::getType() const",6, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::getHead() const",5, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::getPrintingName() const",5, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::getSpaces() const",6, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::getBoolValue() const",5, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::isSubspace( const Space & other , TypeChecker & TC , const DeclContext * DC) const",148, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::minus( const Space & other , TypeChecker & TC , const DeclContext * DC , unsigned * minusCount) const",200, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::show( llvm :: raw_ostream & buffer , bool forDisplay = true) const",65, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::decompose( TypeChecker & TC , const DeclContext * DC , Type tp , SmallVectorImpl<Space> & arr)",73, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::decompose( TypeChecker & TC , const DeclContext * DC , Type type)",6, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::canDecompose( Type tp , const DeclContext * DC)",4, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::checkDowngradeToWarning() const",27, 8, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::SpaceEngine( TypeChecker & C , const SwitchStmt * SS , const DeclContext * DC)",2, 39, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::checkRedundantLiteral( const Pattern * Pat , Expr * & PrevPattern)",45, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::estimateSearchSpaceSize( const Space & total , const Space & covered)",85, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::checkExhaustiveness( bool limitedChecking)",116, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::diagnoseCannotCheck( const bool sawRedundantPattern , const Space & totalSpace , const Space & coveredSpace , const CaseStmt * unknownCase)",18, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::diagnoseMissingCases( RequiresDefault defaultReason , Space uncovered , const CaseStmt * unknownCase = nullptr)",197, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::flatten( const Space space , SmallVectorImpl<Space> & flats)",93, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::projectPattern( TypeChecker & TC , const Pattern * item)",138, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"TypeChecker::checkSwitchExhaustiveness( const SwitchStmt * stmt , const DeclContext * DC , bool limited)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckSwitchStmt.cpp,"SpaceEngine::Space::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"cloneRawLiteralExpr( ASTContext & C , LiteralExpr * expr)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"deriveRawRepresentable_Raw( DerivedConformance & derived)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"deriveBodyRawRepresentable_raw( AbstractFunctionDecl * toRawDecl , void *)",83, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"maybeMarkAsInlinable( DerivedConformance & derived , AbstractFunctionDecl * afd)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"deriveRawRepresentable_raw( DerivedConformance & derived)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"deriveBodyRawRepresentable_init( AbstractFunctionDecl * initDecl , void *)",113, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"deriveRawRepresentable_init( DerivedConformance & derived)",53, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"canSynthesizeRawRepresentable( DerivedConformance & derived)",46, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"DerivedConformance::deriveRawRepresentable( ValueDecl * requirement)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceRawRepresentable.cpp,"DerivedConformance::deriveRawRepresentable( AssociatedTypeDecl * assocType)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"diagnoseAndRemoveAttr( TypeChecker & TC , Decl * D , DeclAttribute * attr , ArgTypes && ... Args)",17, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::AttributeEarlyChecker( TypeChecker & TC , Decl * D)",1, 68, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::diagnoseAndRemoveAttr( DeclAttribute * attr , ArgTypes && ... Args)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitNoReturnAttr( NoReturnAttr * attr)",58, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitAlignmentAttr( AlignmentAttr * attr)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitBorrowedAttr( BorrowedAttr * attr)",25, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitMutatingAttr( MutatingAttr * attr)",1, 74, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitNonMutatingAttr( NonMutatingAttr * attr)",1, 80, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitConsumingAttr( ConsumingAttr * attr)",1, 76, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitReferenceOwnershipAttr( ReferenceOwnershipAttr * attr)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitFinalAttr( FinalAttr * attr)",25, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitIndirectAttr( IndirectAttr * attr)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitWarnUnqualifiedAccessAttr( WarnUnqualifiedAccessAttr * attr)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitTransparentAttr( TransparentAttr * attr)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitMutationAttr( DeclAttribute * attr)",66, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitDynamicAttr( DynamicAttr * attr)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitIBActionAttr( IBActionAttr * attr)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitIBDesignableAttr( IBDesignableAttr * attr)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitIBInspectableAttr( IBInspectableAttr * attr)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitGKInspectableAttr( GKInspectableAttr * attr)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"isAcceptableOutletType( Type type , bool & isArray , TypeChecker & TC)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitIBOutletAttr( IBOutletAttr * attr)",54, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitNSManagedAttr( NSManagedAttr * attr)",53, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitLLDBDebuggerFunctionAttr( LLDBDebuggerFunctionAttr * attr)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitOverrideAttr( OverrideAttr * attr)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitNonOverrideAttr( NonOverrideAttr * attr)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitLazyAttr( LazyAttr * attr)",50, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitAbstractAccessControlAttr( AbstractAccessControlAttr * attr)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitAccessControlAttr( AccessControlAttr * attr)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitSetterAccessAttr( SetterAccessAttr * attr)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeEarlyChecker::visitObjCMembersAttr( ObjCMembersAttr * attr)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"TypeChecker::checkDeclAttributesEarly( Decl * D)",54, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::diagnoseAndRemoveAttr( DeclAttribute * attr , ArgTypes && ... Args)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::AttributeChecker( TypeChecker & TC , Decl * D)",1, 63, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitInfixAttr( InfixAttr * attr)",1, 73, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitPostfixAttr( PostfixAttr * attr)",1, 77, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitPrefixAttr( PrefixAttr * attr)",1, 75, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"checkObjectOrOptionalObjectType( TypeChecker & TC , Decl * D , ParamDecl * param)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"isiOS( TypeChecker & TC)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"iswatchOS( TypeChecker & TC)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"isRelaxedIBAction( TypeChecker & TC)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"swift::isValidDynamicCallableMethod( FuncDecl * decl , DeclContext * DC , TypeChecker & TC , bool hasKeywordArguments)",44, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"hasValidDynamicCallableMethod( TypeChecker & TC , NominalTypeDecl * decl , Identifier argumentName , bool hasKeywordArgs)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitDynamicCallableAttr( DynamicCallableAttr * attr)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"swift::isValidDynamicMemberLookupSubscript( SubscriptDecl * decl , DeclContext * DC , TypeChecker & TC)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitDynamicMemberLookupAttr( DynamicMemberLookupAttr * attr)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitIBActionAttr( IBActionAttr * attr)",67, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"getEnclosingDeclForDecl( Decl * D)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitAvailableAttr( AvailableAttr * attr)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitCDeclAttr( CDeclAttr * attr)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitUnsafeNoObjCTaggedPointerAttr( UnsafeNoObjCTaggedPointerAttr * attr)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitSwiftNativeObjCRuntimeBaseAttr( SwiftNativeObjCRuntimeBaseAttr * attr)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitFinalAttr( FinalAttr * attr)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"isBuiltinOperator( StringRef name , DeclAttribute * attr)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::checkOperatorAttribute( DeclAttribute * attr)",49, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitNSCopyingAttr( NSCopyingAttr * attr)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::checkApplicationMainAttribute( DeclAttribute * attr , Identifier Id_ApplicationDelegate , Identifier Id_Kit , Identifier Id_ApplicationMain)",90, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitNSApplicationMainAttr( NSApplicationMainAttr * attr)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitUIApplicationMainAttr( UIApplicationMainAttr * attr)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"isObjCClassExtensionInOverlay( DeclContext * dc)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitRequiredAttr( RequiredAttr * attr)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"hasThrowingFunctionParameter( CanType type)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitRethrowsAttr( RethrowsAttr * attr)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitAccessControlAttr( AccessControlAttr * attr)",69, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitSetterAccessAttr( SetterAccessAttr * attr)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"collectUsedGenericParameters( Type Ty , SmallPtrSetImpl<TypeBase*> & ConstrainedGenericParams)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"checkSpecializeAttrRequirements( SpecializeAttr * attr , AbstractFunctionDecl * FD , const SmallPtrSet<TypeBase*,4> & constrainedGenericParams , TypeChecker & TC)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"getCanonicalRequirement( const Requirement & req)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"diagnoseIndirectGenericTypeParam( SourceLoc loc , Type type , TypeRepr * typeRepr)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitSpecializeAttr( SpecializeAttr * attr)",145, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitFixedLayoutAttr( FixedLayoutAttr * attr)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitUsableFromInlineAttr( UsableFromInlineAttr * attr)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitInlinableAttr( InlinableAttr * attr)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitOptimizeAttr( OptimizeAttr * attr)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitDiscardableResultAttr( DiscardableResultAttr * attr)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"lookupReplacedDecl( DeclName replacedDeclName , DynamicReplacementAttr * attr , AbstractFunctionDecl * replacement , SmallVectorImpl<ValueDecl*> & results)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"findReplacedAccessor( DeclName replacedVarName , AccessorDecl * replacement , DynamicReplacementAttr * attr , TypeChecker & TC)",56, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"findReplacedFunction( DeclName replacedFunctionName , AbstractFunctionDecl * replacement , DynamicReplacementAttr * attr , TypeChecker & TC)",41, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"TypeChecker::checkDynamicReplacementAttribute( ValueDecl * D)",75, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitImplementsAttr( ImplementsAttr * attr)",45, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitFrozenAttr( FrozenAttr * attr)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"AttributeChecker::visitNonOverrideAttr( NonOverrideAttr * attr)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"TypeChecker::checkDeclAttributes( Decl * D)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"TypeChecker::checkTypeModifyingDeclAttributes( VarDecl * var)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"TypeChecker::checkReferenceOwnershipAttr( VarDecl * var , ReferenceOwnershipAttr * attr)",94, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"TypeChecker::diagnosticIfDeclCannotBePotentiallyUnavailable( const Decl * D)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAttr.cpp,"TypeChecker::addImplicitDynamicAttribute( Decl * D)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::LookupState()",3, 72, 8, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::makeQualified()",5, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::makeUnqualified()",5, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::isQualified() const",1, 51, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::isOnMetatype() const",1, 53, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::isOnSuperclass() const",1, 57, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::isInheritsSuperclassInitializers() const",3, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::isIncludingInstanceMembers() const",1, 77, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::withOnMetatype() const",5, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::withOnSuperclass() const",5, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::withInheritsSuperclassInitializers() const",5, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::withoutInheritsSuperclassInitializers() const",5, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"LookupState::withIncludedInstanceMembers() const",5, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"areTypeDeclsVisibleInLookupMode( LookupState LS)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"isDeclVisibleInLookupMode( ValueDecl * Member , LookupState LS , const DeclContext * FromContext , LazyResolver * TypeResolver)",58, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"doGlobalExtensionLookup( Type BaseType , Type LookupType , SmallVectorImpl<ValueDecl*> & FoundDecls , const DeclContext * CurrDC , LookupState LS , DeclVisibilityKind Reason , LazyResolver * TypeResolver)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"lookupTypeMembers( Type BaseType , Type LookupType , VisibleDeclConsumer & Consumer , const DeclContext * CurrDC , LookupState LS , DeclVisibilityKind Reason , LazyResolver * TypeResolver)",41, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"doDynamicLookup( VisibleDeclConsumer & Consumer , const DeclContext * CurrDC , LookupState LS , LazyResolver * TypeResolver)",118, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"getReasonForSuper( DeclVisibilityKind Reason)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"lookupDeclsFromProtocolsBeingConformedTo( Type BaseTy , VisibleDeclConsumer & Consumer , LookupState LS , const DeclContext * FromContext , DeclVisibilityKind Reason , LazyResolver * TypeResolver , VisitedSet & Visited)",59, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"RestateFilteringConsumer::addDecl( llvm :: DenseMap<K,FoundDecl> & Map , K Key , FoundDecl FD)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"RestateFilteringConsumer::stripSelfRequirementsIfNeeded( ValueDecl * VD , GenericFunctionType * GFT) const",23, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"RestateFilteringConsumer::RestateFilteringConsumer( Type baseTy , const DeclContext * DC , LazyResolver * resolver)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"RestateFilteringConsumer::foundDecl( ValueDecl * VD , DeclVisibilityKind Reason)",21, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"RestateFilteringConsumer::feedResultsToConsumer( VisibleDeclConsumer & Consumer) const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"lookupVisibleProtocolMemberDecls( Type BaseTy , ProtocolType * PT , VisibleDeclConsumer & Consumer , const DeclContext * CurrDC , LookupState LS , DeclVisibilityKind Reason , LazyResolver * TypeResolver , GenericSignatureBuilder * GSB , VisitedSet & Visited)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"lookupVisibleMemberDeclsImpl( Type BaseTy , VisibleDeclConsumer & Consumer , const DeclContext * CurrDC , LookupState LS , DeclVisibilityKind Reason , LazyResolver * TypeResolver , GenericSignatureBuilder * GSB , VisitedSet & Visited)",148, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"FoundDeclTy::FoundDeclTy( ValueDecl * D , DeclVisibilityKind Reason)",2, 32, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"FoundDeclTy::operator ==( const FoundDeclTy & LHS , const FoundDeclTy & RHS)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"llvm::DenseMapInfo<FoundDeclTy>::getEmptyKey()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"llvm::DenseMapInfo<FoundDeclTy>::getTombstoneKey()",4, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"llvm::DenseMapInfo<FoundDeclTy>::getHashValue( const FoundDeclTy & Val)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"llvm::DenseMapInfo<FoundDeclTy>::isEqual( const FoundDeclTy & LHS , const FoundDeclTy & RHS)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"shouldSubstIntoDeclType( Type type)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"OverrideFilteringConsumer::OverrideFilteringConsumer( Type BaseTy , const DeclContext * DC , LazyResolver * resolver)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"OverrideFilteringConsumer::foundDecl( ValueDecl * VD , DeclVisibilityKind Reason)",117, 4, 2, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"lookupVisibleMemberDecls( Type BaseTy , VisibleDeclConsumer & Consumer , const DeclContext * CurrDC , LookupState LS , DeclVisibilityKind Reason , LazyResolver * TypeResolver , GenericSignatureBuilder * GSB)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"lookupVisibleDeclsImpl( VisibleDeclConsumer & Consumer , const DeclContext * DC , LazyResolver * TypeResolver , bool IncludeTopLevel , SourceLoc Loc)",123, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"swift::lookupVisibleDecls( VisibleDeclConsumer & Consumer , const DeclContext * DC , LazyResolver * TypeResolver , bool IncludeTopLevel , SourceLoc Loc)",58, 2, 0, 0
repos/cpp/swift/lib/Sema/LookupVisibleDecls.cpp,"swift::lookupVisibleMemberDecls( VisibleDeclConsumer & Consumer , Type BaseTy , const DeclContext * CurrDC , LazyResolver * TypeResolver , bool includeInstanceMembers , GenericSignatureBuilder * GSB)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"InferredAssociatedTypesByWitness::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"InferredAssociatedTypesByWitness::dump( llvm :: raw_ostream & out , unsigned indent) const",26, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"InferredTypeWitnessesSolution::dump() const",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"dumpInferredAssociatedTypesByWitnesses( const InferredAssociatedTypesByWitnesses & inferred , llvm :: raw_ostream & out , unsigned indent)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"dumpInferredAssociatedTypesByWitnesses( const InferredAssociatedTypesByWitnesses & inferred)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"dumpInferredAssociatedTypes( const InferredAssociatedTypes & inferred , llvm :: raw_ostream & out , unsigned indent)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"dumpInferredAssociatedTypes( const InferredAssociatedTypes & inferred)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::AssociatedTypeInference( TypeChecker & tc , NormalProtocolConformance * conformance)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"associatedTypesAreSameEquivalenceClass( AssociatedTypeDecl * a , AssociatedTypeDecl * b)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::inferTypeWitnessesViaValueWitnesses( ConformanceChecker & checker , const llvm :: SetVector<AssociatedTypeDecl*> & allUnresolved , ValueDecl * req)",248, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::inferTypeWitnessesViaValueWitnesses( ConformanceChecker & checker , const llvm :: SetVector<AssociatedTypeDecl*> & assocTypes)",69, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"mapErrorTypeToOriginal( Type type)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"getWitnessTypeForMatching( TypeChecker & tc , NormalProtocolConformance * conformance , ValueDecl * witness)",64, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"removeSelfParam( ValueDecl * value , Type type)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::inferTypeWitnessesViaAssociatedType( ConformanceChecker & checker , const llvm :: SetVector<AssociatedTypeDecl*> & allUnresolved , AssociatedTypeDecl * assocType)",54, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"swift::adjustInferredAssociatedType( Type type , bool & noescapeToEscaping)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::inferTypeWitnessesViaValueWitness( ValueDecl * req , ValueDecl * witness)",117, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::findDefaultedAssociatedType( TypeChecker & tc , AssociatedTypeDecl * assocType)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::computeFixedTypeWitness( AssociatedTypeDecl * assocType)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::computeDefaultTypeWitness( AssociatedTypeDecl * assocType)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::computeDerivedTypeWitness( AssociatedTypeDecl * assocType)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::computeAbstractTypeWitness( AssociatedTypeDecl * assocType , bool allowDerived)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::substCurrentTypeWitnesses( Type type)",56, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"sanitizeProtocolRequirements( ProtocolDecl * proto , ArrayRef<Requirement> requirements , SmallVectorImpl<Requirement> & sanitized)",54, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::getSubstOptionsWithCurrentTypeWitnesses()",34, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::checkCurrentTypeWitnesses( const SmallVectorImpl<std::pair<ValueDecl*,ValueDecl*>> & valueWitnesses)",63, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::checkConstrainedExtension( ExtensionDecl * ext)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::findSolutions( ArrayRef<AssociatedTypeDecl*> unresolvedAssocTypes , SmallVectorImpl<InferredTypeWitnessesSolution> & solutions)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::findSolutionsRec( ArrayRef<AssociatedTypeDecl*> unresolvedAssocTypes , SmallVectorImpl<InferredTypeWitnessesSolution> & solutions , SmallVectorImpl<InferredTypeWitnessesSolution> & nonViableSolutions , SmallVector<std::pair<ValueDecl*,ValueDecl*>,4> & valueWitnesses , unsigned numTypeWitnesses , unsigned numValueWitnessesInProtocolExtensions , unsigned reqDepth)",227, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"compareDeclsForInference( TypeChecker & TC , DeclContext * DC , ValueDecl * decl1 , ValueDecl * decl2)",154, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::isBetterSolution( const InferredTypeWitnessesSolution & first , const InferredTypeWitnessesSolution & second)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::findBestSolution( SmallVectorImpl<InferredTypeWitnessesSolution> & solutions)",56, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::diagnoseNoSolutions( ArrayRef<AssociatedTypeDecl*> unresolvedAssocTypes , ConformanceChecker & checker)",127, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::diagnoseAmbiguousSolutions( ArrayRef<AssociatedTypeDecl*> unresolvedAssocTypes , ConformanceChecker & checker , SmallVectorImpl<InferredTypeWitnessesSolution> & solutions)",71, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"AssociatedTypeInference::solve( ConformanceChecker & checker)",108, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"ConformanceChecker::resolveTypeWitnesses()",32, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"ConformanceChecker::resolveSingleTypeWitness( AssociatedTypeDecl * assocType)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckProtocolInference.cpp,"ConformanceChecker::resolveSingleWitness( ValueDecl * requirement)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"REPLContext::REPLContext( TypeChecker & TC , SourceFile & SF)",2, 47, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"REPLContext::requirePrintDecls()",25, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"StmtBuilder::StmtBuilder( REPLContext & C , DeclContext * DC)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"StmtBuilder::StmtBuilder( StmtBuilder & parent)",2, 68, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"StmtBuilder::~StmtBuilder()",1, 78, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"StmtBuilder::createBodyStmt( SourceLoc loc , SourceLoc endLoc)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"StmtBuilder::addToBody( ASTNode node)",1, 57, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"StmtBuilder::buildPrintRefExpr( SourceLoc loc)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"StmtBuilder::buildDebugPrintlnRefExpr( SourceLoc loc)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"StmtBuilder::printLiteralString( StringRef Str , SourceLoc Loc)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"StmtBuilder::printReplExpr( VarDecl * Arg , SourceLoc Loc)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"TypeChecker::getNextResponseVariableName( DeclContext * DC)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"getObviousDeclFromExpr( Expr * E)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"PatternBindingPrintLHS::PatternBindingPrintLHS( llvm :: SmallString<16> & ResultString)",2, 36, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"PatternBindingPrintLHS::visitTuplePattern( TuplePattern * P)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"PatternBindingPrintLHS::visitNamedPattern( NamedPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"PatternBindingPrintLHS::visitAnyPattern( AnyPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"PatternBindingPrintLHS::visitVarPattern( VarPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"PatternBindingPrintLHS::visitTypedPattern( TypedPattern * P)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"PatternBindingPrintLHS::visitParenPattern( ParenPattern * P)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"REPLChecker::REPLChecker( TypeChecker & TC , SourceFile & SF , TopLevelContext & TLC)",2, 41, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"REPLChecker::generatePrintOfExpression( StringRef NameStr , Expr * E)",67, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"REPLChecker::processREPLTopLevelExpr( Expr * E)",53, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"REPLChecker::processREPLTopLevelPatternBinding( PatternBindingDecl * PBD)",81, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckREPL.cpp,"TypeChecker::processREPLTopLevel( SourceFile & SF , TopLevelContext & TLC , unsigned FirstDecl)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::AbstractFunction( Kind kind , Expr * fn)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::AbstractFunction( AbstractFunctionDecl * fn)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::AbstractFunction( AbstractClosureExpr * closure)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::AbstractFunction( ParamDecl * parameter)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::getKind() const",1, 49, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::isBodyRethrows() const",1, 53, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::getNumArgumentsForFullApply() const",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::getType() const",9, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::isAutoClosure() const",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::getFunction() const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::getClosure() const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::getParameter() const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::getOpaqueFunction() const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::decomposeApply( ApplyExpr * apply , SmallVectorImpl<Expr*> & args)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"AbstractFunction::decomposeFunction( Expr * fn)",46, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ErrorHandlingWalker::asImpl()",1, 55, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ErrorHandlingWalker::walkToDeclPre( Decl * D)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ErrorHandlingWalker::walkToExprPre( Expr * E)",28, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ErrorHandlingWalker::walkToStmtPre( Stmt * S)",11, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ErrorHandlingWalker::checkDoCatch( DoCatchStmt * S)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"PotentialReason::PotentialReason( Kind kind)",1, 57, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"PotentialReason::forRethrowsArgument( Expr * E)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"PotentialReason::forDefaultArgument()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"PotentialReason::forThrowingApply()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"PotentialReason::forThrow()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"PotentialReason::getKind() const",1, 43, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"PotentialReason::isThrow() const",1, 60, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"PotentialReason::isRethrowsCall() const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"PotentialReason::getThrowingArgument() const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Classification::Classification()",1, 51, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Classification::Classification( ThrowingKind result , PotentialReason reason)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Classification::forThrow( PotentialReason reason)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Classification::forInvalidCode()",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Classification::forRethrowingOnly( PotentialReason reason)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Classification::merge( Classification other)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Classification::getResult() const",1, 52, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Classification::getThrowsReason() const",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"classifyFunctionByType( Type type , unsigned numArgs)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::inRethrowsContext() const",1, 67, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyApply( ApplyExpr * E)",78, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyThrowingFunctionBody( const AbstractFunction & fn , PotentialReason reason)",20, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyThrowingParameterBody( ParamDecl * param , PotentialReason reason)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::isLocallyDefinedInRethrowsContext( DeclContext * DC)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyThrowingFunctionBody( AbstractFunctionDecl * fn , PotentialReason reason)",11, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyThrowingFunctionBody( AbstractClosureExpr * closure , PotentialReason reason)",21, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::FunctionBodyClassifier( ApplyClassifier & self)",1, 66, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::flagInvalidCode()",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkClosure( ClosureExpr * closure)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkAutoClosure( AutoClosureExpr * closure)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkTry( TryExpr * E)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkForceTry( ForceTryExpr * E)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkOptionalTry( OptionalTryExpr * E)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkApply( ApplyExpr * E)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkThrow( ThrowStmt * E)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkInterpolatedStringLiteral( InterpolatedStringLiteralExpr * E)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkIfConfig( IfConfigDecl * D)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkExhaustiveDoBody( DoCatchStmt * S)",10, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkNonExhaustiveDoBody( DoCatchStmt * S)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::FunctionBodyClassifier::checkCatch( CatchStmt * S , ThrowingKind doThrowingKind)",14, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyThrowingFunctionBodyImpl( void * key , BraceStmt * body , bool allowNone)",29, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyRethrowsArgument( Expr * arg , Type paramType)",55, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyTupleRethrowsArgument( TupleExpr * tuple , TupleType * paramTupleType)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyShuffleRethrowsArgument( TupleShuffleExpr * shuffle , TupleType * paramTupleType)",29, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::reverseShuffleParamType( TupleShuffleExpr * shuffle , TupleType * origParamTupleType)",38, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"ApplyClassifier::classifyArgumentByType( Type paramType , PotentialReason reason)",22, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::getKindForFunctionBody( Type type , unsigned numArgs)",11, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::getContextForPatternBinding( PatternBindingDecl * pbd)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::Context( Kind kind)",1, 49, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::getHandled()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::forTopLevelCode( TopLevelCodeDecl * D)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::forFunction( AbstractFunctionDecl * D)",26, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::forInitializer( Initializer * init)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::forEnumElementInitializer( EnumElementDecl * elt)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::forClosure( AbstractClosureExpr * E)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::forNonExhaustiveCatch( DoCatchStmt * S)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::forCatchPattern( CatchStmt * S)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::forCatchGuard( CatchStmt * S)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::withInterpolatedString( InterpolatedStringLiteralExpr * E) const",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::getKind() const",1, 43, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::handlesNothing() const",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::handles( ThrowingKind errorKind) const",17, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::getRethrowsDC() const",1, 60, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::getInterpolatedString() const",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::diagnoseThrowInIllegalContext( TypeChecker & TC , ASTNode node , StringRef description)",11, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::maybeAddRethrowsNote( TypeChecker & TC , SourceLoc loc , const PotentialReason & reason)",18, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::diagnoseUncoveredThrowSite( TypeChecker & TC , ASTNode E , const PotentialReason & reason)",44, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::diagnoseThrowInLegalContext( TypeChecker & TC , ASTNode node , bool isTryCovered , const PotentialReason & reason , Diag<> diagForThrow , Diag<> diagForThrowingCall , Diag<> diagForTrylessThrowingCall)",28, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::diagnoseUnhandledThrowSite( TypeChecker & TC , ASTNode E , bool isTryCovered , const PotentialReason & reason)",64, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"Context::diagnoseUnhandledTry( TypeChecker & TC , TryExpr * E)",29, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextFlags::ContextFlags()",1, 32, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextFlags::reset()",1, 31, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextFlags::has( ContextFlag flag) const",1, 61, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextFlags::set( ContextFlag flag)",1, 49, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextFlags::clear( ContextFlag flag)",1, 52, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextFlags::mergeFrom( ContextFlag flag , ContextFlags other)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::flagInvalidCode()",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::ContextScope( CheckErrorCoverage & self , Optional<Context> newContext)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::enterSubFunction()",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::enterTry()",5, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::refineLocalContext( Context newContext)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::resetCoverage()",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::resetCoverageForDoCatch()",9, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::preserveCoverageFromAutoclosureBody()",6, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::preserveCoverageFromNonExhaustiveCatch()",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::preserveCoverageFromTryOperand()",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::preserveCoverageFromInterpolatedString()",5, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::wasTopLevelDebuggerFunction() const",3, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::ContextScope::~ContextScope()",6, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::CheckErrorCoverage( TypeChecker & tc , Context initialContext)",8, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::setTopLevelThrowWithoutTry()",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::setTopLevelDebuggerFunction()",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkClosure( ClosureExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkAutoClosure( AutoClosureExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkExhaustiveDoBody( DoCatchStmt * S)",12, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkNonExhaustiveDoBody( DoCatchStmt * S)",18, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::diagnoseNoThrowInDo( DoCatchStmt * S , ContextScope & scope)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkCatch( CatchStmt * S , ThrowingKind doThrowingKind)",25, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkApply( ApplyExpr * E)",24, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkInterpolatedStringLiteral( InterpolatedStringLiteralExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkIfConfig( IfConfigDecl * ICD)",30, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkThrow( ThrowStmt * S)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkThrowSite( ASTNode E , bool requiresTry , const Classification & classification)",43, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkTry( TryExpr * E)",21, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkForceTry( ForceTryExpr * E)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"CheckErrorCoverage::checkOptionalTry( OptionalTryExpr * E)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"TypeChecker::checkTopLevelErrorHandling( TopLevelCodeDecl * code)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"TypeChecker::checkFunctionErrorHandling( AbstractFunctionDecl * fn)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"TypeChecker::checkInitializerErrorHandling( Initializer * initCtx , Expr * init)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckError.cpp,"TypeChecker::checkEnumElementErrorHandling( EnumElementDecl * elt)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"NameBinder::NameBinder( SourceFile & SF)",1, 72, 4, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"NameBinder::diagnose( ArgTypes && ... Args)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"NameBinder::getModule( ArrayRef<std::pair<Identifier,SourceLoc>> modulePath)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"isCompatibleImportKind( ImportKind expected , ImportKind actual)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"isNominalImportKind( ImportKind kind)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"getImportKindString( ImportKind kind)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"shouldImportSelfImportClang( const ImportDecl * ID , const SourceFile & SF)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"NameBinder::addImport( SmallVectorImpl<SourceFile::ImportedModuleDesc> & imports , ImportDecl * ID)",158, 2, 0, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"insertOperatorDecl( NameBinder & Binder , SourceFile :: OperatorMap<OP_DECL*> & Operators , OP_DECL * OpDecl)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"insertPrecedenceGroupDecl( NameBinder & binder , SourceFile & SF , PrecedenceGroupDecl * group)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/NameBinding.cpp,"swift::performNameBinding( SourceFile & SF , unsigned StartElem)",38, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlCheckerBase::checkTypeAccess( const TypeLoc & TL , const ValueDecl * context , bool mayBeInferred , llvm :: function_ref<CheckTypeAccessCallback> diagnose)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlCheckerBase::AccessControlCheckerBase( TypeChecker & TC , bool checkUsableFromInline)",2, 62, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"TypeAccessScopeDiagnoser::walkToTypeReprPre( TypeRepr * TR)",20, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"TypeAccessScopeDiagnoser::walkToTypeReprPost( TypeRepr * T)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"TypeAccessScopeDiagnoser::TypeAccessScopeDiagnoser( AccessScope accessScope , const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",5, 70, 6, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"TypeAccessScopeDiagnoser::findTypeWithScope( TypeRepr * TR , AccessScope accessScope , const DeclContext * useDC , bool treatUsableFromInlineAsPublic)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlCheckerBase::checkTypeAccessImpl( Type type , TypeRepr * typeRepr , AccessScope contextAccessScope , const DeclContext * useDC , bool mayBeInferred , llvm :: function_ref<CheckTypeAccessCallback> diagnose)",78, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlCheckerBase::checkTypeAccess( Type type , TypeRepr * typeRepr , const ValueDecl * context , bool mayBeInferred , llvm :: function_ref<CheckTypeAccessCallback> diagnose)",11, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"highlightOffendingType( TypeChecker & TC , InFlightDiagnostic & diag , const TypeRepr * complainRepr)",15, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlCheckerBase::checkRequirementAccess( WhereClauseOwner source , AccessScope accessScope , const DeclContext * useDC , llvm :: function_ref<CheckTypeAccessCallback> diagnose)",32, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlCheckerBase::checkGenericParamAccess( const GenericParamList * params , const Decl * owner , AccessScope accessScope , AccessLevel contextAccess)",81, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlCheckerBase::checkGenericParamAccess( const GenericParamList * params , const ValueDecl * owner)",8, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::AccessControlChecker( TypeChecker & TC)",2, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visit( Decl * D)",6, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::checkNamedPattern( const NamedPattern * NP , bool isTypeContext , const llvm :: DenseSet<const VarDecl*> & seenVars)",30, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::checkTypedPattern( const TypedPattern * TP , bool isTypeContext , llvm :: DenseSet<const VarDecl*> & seenVars)",33, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitPatternBindingDecl( PatternBindingDecl * PBD)",21, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitTypeAliasDecl( TypeAliasDecl * TAD)",21, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitAssociatedTypeDecl( AssociatedTypeDecl * assocType)",74, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitEnumDecl( EnumDecl * ED)",34, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitStructDecl( StructDecl * SD)",3, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitClassDecl( ClassDecl * CD)",54, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitProtocolDecl( ProtocolDecl * proto)",75, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitSubscriptDecl( SubscriptDecl * SD)",54, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitAbstractFunctionDecl( AbstractFunctionDecl * fn)",72, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"AccessControlChecker::visitEnumElementDecl( EnumElementDecl * EED)",18, 3, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::UsableFromInlineChecker( TypeChecker & TC)",2, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::shouldSkipChecking( const ValueDecl * VD)",5, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visit( Decl * D)",13, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::getFixedLayoutStructContext( const PatternBindingDecl * PBD)",12, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::checkNamedPattern( const NamedPattern * NP , const ValueDecl * fixedLayoutStructContext , bool isTypeContext , const llvm :: DenseSet<const VarDecl*> & seenVars)",30, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::checkTypedPattern( const TypedPattern * TP , const ValueDecl * fixedLayoutStructContext , bool isTypeContext , llvm :: DenseSet<const VarDecl*> & seenVars)",34, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitPatternBindingDecl( PatternBindingDecl * PBD)",28, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitTypeAliasDecl( TypeAliasDecl * TAD)",12, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitAssociatedTypeDecl( AssociatedTypeDecl * assocType)",50, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitEnumDecl( const EnumDecl * ED)",27, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitStructDecl( StructDecl * SD)",3, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitClassDecl( ClassDecl * CD)",38, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitProtocolDecl( ProtocolDecl * proto)",39, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitSubscriptDecl( SubscriptDecl * SD)",27, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitAbstractFunctionDecl( AbstractFunctionDecl * fn)",44, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"UsableFromInlineChecker::visitEnumElementDecl( EnumElementDecl * EED)",16, 3, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"swift::checkAccessControl( TypeChecker & TC , Decl * D)",4, 1, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckAccess.cpp,"swift::checkExtensionGenericParamAccess( TypeChecker & TC , const ExtensionDecl * ED , AccessLevel userSpecifiedAccess)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ExpressionTimer::ExpressionTimer( Expr * E , ConstraintSystem & CS)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ExpressionTimer::~ExpressionTimer()",20, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::ConstraintSystem( TypeChecker & tc , DeclContext * dc , ConstraintSystemOptions options)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::~ConstraintSystem()",3, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::incrementScopeCounter()",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::incrementLeafScopes()",4, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::hasFreeTypeVariables()",10, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::addTypeVariable( TypeVariableType * typeVar)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::mergeEquivalenceClasses( TypeVariableType * typeVar1 , TypeVariableType * typeVar2 , bool updateWorkList)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::typeVarOccursInType( TypeVariableType * typeVar , Type type , bool * involvesOtherTypeVariables)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::assignFixedType( TypeVariableType * typeVar , Type type , bool updateState)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::setMustBeMaterializableRecursive( Type type)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::addTypeVariableConstraintsToWorkList( TypeVariableType * typeVar)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"getDynamicResultSignature( ValueDecl * decl)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::lookupMember( Type base , DeclName name)",63, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::getAlternativeLiteralTypes( KnownProtocolKind kind)",75, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::getConstraintLocator( Expr * anchor , ArrayRef<ConstraintLocator::PathElement> path , unsigned summaryFlags)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::getConstraintLocator( const ConstraintLocatorBuilder & builder)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::openUnboundGenericType( UnboundGenericType * unbound , ConstraintLocatorBuilder locator , OpenedTypeMap & replacements)",58, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"checkNestedTypeConstraints( ConstraintSystem & cs , Type type , ConstraintLocatorBuilder locator)",62, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::openUnboundGenericType( Type type , ConstraintLocatorBuilder locator)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::openType( Type type , OpenedTypeMap & replacements)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::openFunctionType( AnyFunctionType * funcType , unsigned numArgumentLabelsToRemove , ConstraintLocatorBuilder locator , OpenedTypeMap & replacements , DeclContext * innerDC , DeclContext * outerDC , bool skipProtocolSelfConstraint)",38, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::isArrayType( Type type)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::isDictionaryType( Type type)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::isSetType( Type type)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::isCollectionType( Type type)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::isAnyHashableType( Type type)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::getFixedTypeRecursive( Type type , TypeMatchOptions & flags , bool wantRValue)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"doesStorageProduceLValue( TypeChecker & TC , AbstractStorageDecl * storage , Type baseType , DeclContext * useDC , const DeclRefExpr * base = nullptr)",34, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::getUnopenedTypeOfReference( VarDecl * value , Type baseType , DeclContext * UseDC , const DeclRefExpr * base , bool wantInterfaceType)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"TypeChecker::getUnopenedTypeOfReference( VarDecl * value , Type baseType , DeclContext * UseDC , llvm :: function_ref<Type(VarDecl*)> getType , const DeclRefExpr * base , bool wantInterfaceType)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::recordOpenedTypes( ConstraintLocatorBuilder locator , const OpenedTypeMap & replacements)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"getNumRemovedArgumentLabels( TypeChecker & TC , ValueDecl * decl , bool isCurriedInstanceReference , FunctionRefKind functionRefKind)",51, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::getTypeOfReference( ValueDecl * value , FunctionRefKind functionRefKind , ConstraintLocatorBuilder locator , DeclContext * useDC , const DeclRefExpr * base)",98, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"bindArchetypesFromContext( ConstraintSystem & cs , DeclContext * outerDC , ConstraintLocator * locatorPtr , const OpenedTypeMap & replacements)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::openGeneric( DeclContext * innerDC , DeclContext * outerDC , GenericSignature * sig , bool skipProtocolSelfConstraint , ConstraintLocatorBuilder locator , OpenedTypeMap & replacements)",38, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::openGenericRequirements( DeclContext * outerDC , GenericSignature * signature , bool skipProtocolSelfConstraint , ConstraintLocatorBuilder locator , llvm :: function_ref<Type(Type)> substFn)",40, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"addSelfConstraint( ConstraintSystem & cs , Type objectTy , Type selfTy , ConstraintLocatorBuilder locator)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"isRequirementOrWitness( const ConstraintLocatorBuilder & locator)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::getTypeOfMemberReference( Type baseTy , ValueDecl * value , DeclContext * useDC , bool isDynamicResult , FunctionRefKind functionRefKind , ConstraintLocatorBuilder locator , const DeclRefExpr * base , OpenedTypeMap * replacementsPtr)",204, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"tryOptimizeGenericDisjunction( ConstraintSystem & cs , ArrayRef<OverloadChoice> choices , OverloadChoice * & favoredChoice)",55, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"partitionSIMDOperators( ArrayRef<OverloadChoice> choices , SmallVectorImpl<OverloadChoice> & scratch)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::addOverloadSet( Type boundType , ArrayRef<OverloadChoice> choices , DeclContext * useDC , ConstraintLocator * locator , OverloadChoice * favoredChoice , ArrayRef<OverloadChoice> outerAlternatives)",69, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"resolveOverloadForDeclWithSpecialTypeCheckingSemantics( ConstraintSystem & CS , ConstraintLocator * locator , Type boundType , OverloadChoice choice , Type & refType , Type & openedFullType)",93, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::resolveOverload( ConstraintLocator * locator , Type boundType , OverloadChoice choice , DeclContext * useDC)",285, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"simplifyTypeImpl( ConstraintSystem & cs , Type type , Fn getFixedTypeFn)",44, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::simplifyType( Type type)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"Solution::simplifyType( Type type) const",13, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"Solution::getTotalMemory() const",9, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"OverloadChoice::getName() const",25, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"OverloadChoice::isImplicitlyUnwrappedValueOrReturnValue() const",22, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::salvage( SmallVectorImpl<Solution> & viable , Expr * expr)",78, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::diagnoseAmbiguityWithFixes( Expr * expr , ArrayRef<Solution> solutions)",82, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"countDistinctOverloads( ArrayRef<OverloadChoice> choices)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"getOverloadChoiceName( ArrayRef<OverloadChoice> choices)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"ConstraintSystem::diagnoseAmbiguity( Expr * expr , ArrayRef<Solution> solutions)",118, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"constraints::simplifyLocatorToAnchor( ConstraintSystem & cs , ConstraintLocator * locator)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintSystem.cpp,"constraints::getArgumentExpr( Expr * expr , unsigned index)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"MatchCallArgumentListener::~MatchCallArgumentListener()",1, 60, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"MatchCallArgumentListener::extraArgument( unsigned argIdx)",1, 67, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"MatchCallArgumentListener::missingArgument( unsigned paramIdx)",1, 71, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"MatchCallArgumentListener::missingLabel( unsigned paramIdx)",1, 81, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"MatchCallArgumentListener::extraneousLabel( unsigned paramIdx)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"MatchCallArgumentListener::incorrectLabel( unsigned paramIdx)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"MatchCallArgumentListener::outOfOrderArgument( unsigned argIdx , unsigned prevArgIdx)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"MatchCallArgumentListener::relabelArguments( ArrayRef<Identifier> newNames)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"scoreParamAndArgNameTypo( StringRef paramName , StringRef argName , unsigned maxScore)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"constraints::areConservativelyCompatibleArgumentLabels( ValueDecl * decl , bool hasCurriedSelf , ArrayRef<Identifier> labels , bool hasTrailingClosure)",34, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"getDefaultDecompositionOptions( ConstraintSystem :: TypeMatchOptions flags)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"constraints::matchCallArguments( ArrayRef<AnyFunctionType::Param> args , ArrayRef<AnyFunctionType::Param> params , const SmallBitVector & defaultMap , bool hasTrailingClosure , bool allowFixes , MatchCallArgumentListener & listener , SmallVectorImpl<ParamBinding> & parameterBindings)",438, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"getCalleeDeclAndArgs( ConstraintSystem & cs , ConstraintLocatorBuilder callLocator , SmallVectorImpl<Identifier> & argLabelsScratch)",150, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ArgumentFailureTracker::ArgumentFailureTracker( ConstraintSystem & cs , ConstraintLocatorBuilder locator)",2, 34, 2, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ArgumentFailureTracker::missingLabel( unsigned paramIndex)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ArgumentFailureTracker::extraneousLabel( unsigned paramIndex)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ArgumentFailureTracker::incorrectLabel( unsigned paramIndex)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ArgumentFailureTracker::relabelArguments( ArrayRef<Identifier> newLabels)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"constraints::matchCallArguments( ConstraintSystem & cs , ArrayRef<AnyFunctionType::Param> args , ArrayRef<AnyFunctionType::Param> params , ConstraintLocatorBuilder locator)",148, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::matchTupleTypes( TupleType * tuple1 , TupleType * tuple2 , ConstraintKind kind , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",135, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"matchFunctionRepresentations( FunctionTypeRepresentation rep1 , FunctionTypeRepresentation rep2 , ConstraintKind kind)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::matchFunctionTypes( FunctionType * func1 , FunctionType * func2 , ConstraintKind kind , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",195, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::matchSuperclassTypes( Type type1 , Type type2 , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::matchDeepEqualityTypes( Type type1 , Type type2 , ConstraintLocatorBuilder locator)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::matchExistentialTypes( Type type1 , Type type2 , ConstraintKind kind , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",108, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"isStringCompatiblePointerBaseType( TypeChecker & TC , DeclContext * DC , Type baseType)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"isPotentiallyMoreOptionalThan( Type type1 , Type type2)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"enumerateOptionalConversionRestrictions( Type type1 , Type type2 , ConstraintKind kind , ConstraintLocatorBuilder locator , llvm :: function_ref<void(ConversionRestrictionKind)> fn)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"isBindable( TypeVariableType * typeVar , Type type)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::matchTypesBindTypeVar( TypeVariableType * typeVar , Type type , ConstraintKind kind , TypeMatchOptions flags , ConstraintLocatorBuilder locator , llvm :: function_ref<TypeMatchResult()> formUnsolvedResult)",87, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"fixRequirementFailure( ConstraintSystem & cs , Type type1 , Type type2 , Expr * anchor , LocatorPathElt & req)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"repairFailures( ConstraintSystem & cs , Type lhs , Type rhs , SmallVectorImpl<RestrictionOrFix> & conversionsOrFixes , ConstraintLocatorBuilder locator)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::matchTypes( Type type1 , Type type2 , ConstraintKind kind , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",872, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyConstructionConstraint( Type valueType , FunctionType * fnType , TypeMatchOptions flags , DeclContext * useDC , FunctionRefKind functionRefKind , ConstraintLocator * locator)",111, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyConformsToConstraint( Type type , Type protocol , ConstraintKind kind , ConstraintLocatorBuilder locator , TypeMatchOptions flags)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyConformsToConstraint( Type type , ProtocolDecl * protocol , ConstraintKind kind , ConstraintLocatorBuilder locator , TypeMatchOptions flags)",125, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"getCheckedCastKind( ConstraintSystem * cs , Type fromType , Type toType)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyCheckedCastConstraint( Type fromType , Type toType , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",124, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyOptionalObjectConstraint( Type first , Type second , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",51, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyFunctionComponentConstraint( ConstraintKind kind , Type first , Type second , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",57, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"getArgumentLabels( ConstraintSystem & cs , ConstraintLocatorBuilder locator)",45, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"hasDynamicMemberLookupAttribute( Type type , llvm :: DenseMap<CanType,bool> & DynamicMemberLookupCache)",73, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::performMemberLookup( ConstraintKind constraintKind , DeclName memberName , Type baseTy , FunctionRefKind functionRefKind , ConstraintLocator * memberLocator , bool includeInaccessibleMembers)",475, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyMemberConstraint( ConstraintKind kind , Type baseTy , DeclName member , Type memberTy , DeclContext * useDC , FunctionRefKind functionRefKind , ArrayRef<OverloadChoice> outerAlternatives , TypeMatchOptions flags , ConstraintLocatorBuilder locatorB)",120, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyDefaultableConstraint( Type first , Type second , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyDynamicTypeOfConstraint( Type type1 , Type type2 , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",59, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyBridgingConstraint( Type type1 , Type type2 , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",202, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyEscapableFunctionOfConstraint( Type type1 , Type type2 , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyOpenedExistentialOfConstraint( Type type1 , Type type2 , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyKeyPathConstraint( Type keyPathTy , Type rootTy , Type valueTy , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",198, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyKeyPathApplicationConstraint( Type keyPathTy , Type rootTy , Type valueTy , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",122, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyApplicableFnConstraint( Type type1 , Type type2 , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",124, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"lookupDynamicCallableMethods( Type type , ConstraintSystem & CS , const ConstraintLocatorBuilder & locator , Identifier argumentName , bool hasKeywordArgs)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"lookupDynamicCallableMethods( Type type , ConstraintSystem & CS , const ConstraintLocatorBuilder & locator)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"getDynamicCallableMethods( Type type , ConstraintSystem & CS , const ConstraintLocatorBuilder & locator)",80, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyDynamicCallableApplicableFnConstraint( Type type1 , Type type2 , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",141, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"getBaseTypeForPointer( ConstraintSystem & cs , TypeBase * type)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::addRestrictedConstraint( ConstraintKind kind , ConversionRestrictionKind restriction , Type first , Type second , ConstraintLocatorBuilder locator)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyRestrictedConstraintImpl( ConversionRestrictionKind restriction , Type type1 , Type type2 , ConstraintKind matchKind , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",371, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"recordRestriction( ConversionRestrictionKind restriction)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyRestrictedConstraint( ConversionRestrictionKind restriction , Type type1 , Type type2 , ConstraintKind matchKind , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"isAugmentingFix( ConstraintFix * fix)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::recordFix( ConstraintFix * fix)",44, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyFixConstraint( ConstraintFix * fix , Type type1 , Type type2 , ConstraintKind matchKind , TypeMatchOptions flags , ConstraintLocatorBuilder locator)",79, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::addConstraintImpl( ConstraintKind kind , Type first , Type second , ConstraintLocatorBuilder locator , bool isFavored)",71, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::addKeyPathApplicationRootConstraint( Type root , ConstraintLocatorBuilder locator)",38, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::addKeyPathApplicationConstraint( Type keypath , Type root , Type value , ConstraintLocatorBuilder locator , bool isFavored)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::addKeyPathConstraint( Type keypath , Type root , Type value , ConstraintLocatorBuilder locator , bool isFavored)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::addConstraint( Requirement req , ConstraintLocatorBuilder locator , bool isFavored)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::addConstraint( ConstraintKind kind , Type first , Type second , ConstraintLocatorBuilder locator , bool isFavored)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::addExplicitConversionConstraint( Type fromType , Type toType , bool allowFixes , ConstraintLocatorBuilder locator)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyConstraint( const Constraint & constraint)",152, 2, 0, 0
repos/cpp/swift/lib/Sema/CSSimplify.cpp,"ConstraintSystem::simplifyDisjunctionChoice( Constraint * choice)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::DerivedConformance( TypeChecker & tc , Decl * conformanceDecl , NominalTypeDecl * nominal , ProtocolDecl * protocol)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::getConformanceContext() const",3, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::addMembersToConformanceContext( ArrayRef<Decl*> children)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::getProtocolType() const",3, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::derivesProtocolConformance( DeclContext * DC , NominalTypeDecl * Nominal , ProtocolDecl * Protocol)",89, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::getDerivableRequirement( TypeChecker & tc , NominalTypeDecl * nominal , ValueDecl * requirement)",116, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::createSelfDeclRef( AbstractFunctionDecl * fn)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::addGetterToReadOnlyDerivedProperty( TypeChecker & tc , VarDecl * property , Type propertyContextType)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::declareDerivedPropertyGetter( TypeChecker & tc , VarDecl * property , Type propertyContextType)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::declareDerivedProperty( Identifier name , Type propertyInterfaceType , Type propertyContextType , bool isStatic , bool isFinal)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformances.cpp,"DerivedConformance::checkAndDiagnoseDisallowedContext( ValueDecl * synthesizing) const",37, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"Solution::getFixedType( TypeVariableType * typeVar) const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"isOpenedAnyObject( Type type)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"Solution::computeSubstitutions( GenericSignature * sig , ConstraintLocatorBuilder locatorBuilder) const",40, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"findNamedWitnessImpl( TypeChecker & tc , DeclContext * dc , Type type , ProtocolDecl * proto , DeclName name , Diag<> diag , Optional<ProtocolConformanceRef> conformance = None)",42, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"shouldAccessStorageDirectly( Expr * base , VarDecl * member , DeclContext * DC)",42, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"getImplicitMemberReferenceAccessSemantics( Expr * base , VarDecl * member , DeclContext * DC)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ConstraintSystem::isTypeReference( const Expr * E)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ConstraintSystem::isStaticallyDerivedMetatype( const Expr * E)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ConstraintSystem::getInstanceType( const TypeExpr * E)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ConstraintSystem::getResultType( const AbstractClosureExpr * E)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"buildObjCKeyPathString( KeyPathExpr * E , llvm :: SmallVectorImpl<char> & buf)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"isNonFinalClass( Type type)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"diagnoseInvalidDynamicConstructorReferences( ConstraintSystem & cs , Expr * base , DeclNameLoc memberRefLoc , ConstructorDecl * ctorDecl , bool SuppressDiagnostics)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"buildDynamicMemberLookupIndexExpr( StringRef name , Type ty , SourceLoc loc , DeclContext * dc , ConstraintSystem & cs)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::checkForImportedUsedConformances( Type toType)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::getBaseType( AnyFunctionType * fnType , bool wantsRValueInstanceType = true)",11, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::buildDeclRef( OverloadChoice choice , DeclNameLoc loc , Type openedType , ConstraintLocatorBuilder locator , bool implicit , FunctionRefKind functionRefKind , AccessSemantics semantics)",106, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::isNonMutatingMember( ValueDecl * member)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::getNaturalArgumentCount( ValueDecl * member)",14, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::getBaseExpr( Expr * expr)",25, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::getArgCount( unsigned maxArgCount)",23, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::openExistentialReference( Expr * base , OpenedArchetypeType * archetype , ValueDecl * member)",58, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::closeExistential( Expr * & result , ConstraintLocatorBuilder locator , bool force = false)",43, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::buildMemberRef( Expr * base , Type openedFullType , SourceLoc dotLoc , OverloadChoice choice , DeclNameLoc memberLoc , Type openedType , ConstraintLocatorBuilder locator , ConstraintLocatorBuilder memberLocator , bool Implicit , FunctionRefKind functionRefKind , AccessSemantics semantics , bool isDynamic)",259, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::simplifyType( Type type)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::buildSubscript( Expr * base , Expr * index , ArrayRef<Identifier> argLabels , bool hasTrailingClosure , ConstraintLocatorBuilder locator , bool isImplicit , AccessSemantics semantics , Optional<SelectedOverload> selected = None)",67, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::buildSubscriptHelper( Expr * base , Expr * index , ArrayRef<Identifier> argLabels , SelectedOverload & selected , bool hasTrailingClosure , ConstraintLocatorBuilder locator , bool isImplicit , AccessSemantics semantics)",191, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::buildOtherConstructorRef( Type openedFullType , ConstructorDecl * ctor , Expr * base , DeclNameLoc loc , ConstraintLocatorBuilder locator , bool implicit)",51, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::bridgeErrorToObjectiveC( Expr * value)",10, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::bridgeToObjectiveC( Expr * value , Type objcType)",6, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::bridgeFromObjectiveC( Expr * object , Type valueType , bool conditional)",71, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::forceBridgeFromObjectiveC( Expr * object , Type valueType)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::ExprRewriter( ConstraintSystem & cs , const Solution & solution , bool suppressDiagnostics)",4, 54, 10, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::getConstraintSystem() const",1, 65, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::simplifyExprType( Expr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitErrorExpr( ErrorExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitCodeCompletionExpr( CodeCompletionExpr * expr)",6, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::handleIntegerLiteralExpr( LiteralExpr * expr)",49, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitNilLiteralExpr( NilLiteralExpr * expr)",64, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitIntegerLiteralExpr( IntegerLiteralExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitFloatLiteralExpr( FloatLiteralExpr * expr)",61, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitBooleanLiteralExpr( BooleanLiteralExpr * expr)",34, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::handleStringLiteralExpr( LiteralExpr * expr)",122, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitStringLiteralExpr( StringLiteralExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitInterpolatedStringLiteralExpr( InterpolatedStringLiteralExpr * expr)",106, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitMagicIdentifierLiteralExpr( MagicIdentifierLiteralExpr * expr)",17, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitObjectLiteralExpr( ObjectLiteralExpr * expr)",55, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::forceUnwrapResult( Expr * expr , bool forForcedOptional = false)",17, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::shouldForceUnwrapResult( OverloadChoice choice , ConstraintLocatorBuilder locator)",10, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::forceUnwrapIfExpected( Expr * expr , OverloadChoice choice , ConstraintLocatorBuilder locator , bool forForcedOptional = false)",9, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitDeclRefExpr( DeclRefExpr * expr)",18, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitSuperRefExpr( SuperRefExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitTypeExpr( TypeExpr * expr)",6, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitOtherConstructorDeclRefExpr( OtherConstructorDeclRefExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitDotSyntaxBaseIgnoredExpr( DotSyntaxBaseIgnoredExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitOverloadedDeclRefExpr( OverloadedDeclRefExpr * expr)",11, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitUnresolvedDeclRefExpr( UnresolvedDeclRefExpr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitUnresolvedSpecializeExpr( UnresolvedSpecializeExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitMemberRefExpr( MemberRefExpr * expr)",13, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitDynamicMemberRefExpr( DynamicMemberRefExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitUnresolvedMemberExpr( UnresolvedMemberExpr * expr)",60, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::applyCtorRefExpr( Expr * expr , Expr * base , SourceLoc dotLoc , DeclNameLoc nameLoc , bool implicit , ConstraintLocator * ctorLocator , OverloadChoice choice , FunctionRefKind functionRefKind , Type openedType)",79, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::applyMemberRefExpr( Expr * expr , Expr * base , SourceLoc dotLoc , DeclNameLoc nameLoc , bool implicit)",151, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitUnresolvedDotExpr( UnresolvedDotExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitSequenceExpr( SequenceExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitArrowExpr( ArrowExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitIdentityExpr( IdentityExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitAnyTryExpr( AnyTryExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitOptionalTryExpr( OptionalTryExpr * expr)",25, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitParenExpr( ParenExpr * expr)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitTupleExpr( TupleExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitSubscriptExpr( SubscriptExpr * expr)",8, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::finishArrayExpr( ArrayExpr * expr)",81, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitArrayExpr( ArrayExpr * expr)",12, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::finishDictionaryExpr( DictionaryExpr * expr)",75, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitDictionaryExpr( DictionaryExpr * expr)",13, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitDynamicSubscriptExpr( DynamicSubscriptExpr * expr)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitTupleElementExpr( TupleElementExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitCaptureListExpr( CaptureListExpr * expr)",6, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitClosureExpr( ClosureExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitAutoClosureExpr( AutoClosureExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitInOutExpr( InOutExpr * expr)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitVarargExpansionExpr( VarargExpansionExpr * expr)",12, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitDynamicTypeExpr( DynamicTypeExpr * expr)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitOpaqueValueExpr( OpaqueValueExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitApplyExpr( ApplyExpr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitRebindSelfInConstructorExpr( RebindSelfInConstructorExpr * expr)",57, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitIfExpr( IfExpr * expr)",18, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitImplicitConversionExpr( ImplicitConversionExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitIsExpr( IsExpr * expr)",90, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::handleOptionalBindingsForCast( ExplicitCastExpr * cast , Type finalResultType , OptionalBindingsCastKind castKind)",39, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::handleOptionalBindings( Expr * subExpr , Type finalResultType , OptionalBindingsCastKind castKind , OperationBuilderRef buildInnerOperation)",183, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::hasForcedOptionalResult( ExplicitCastExpr * expr)",9, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitCoerceExpr( CoerceExpr * expr)",14, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitCoerceExpr( CoerceExpr * expr , Optional<unsigned> choice)",84, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitForcedCheckedCastExpr( ForcedCheckedCastExpr * expr)",66, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitConditionalCheckedCastExpr( ConditionalCheckedCastExpr * expr)",14, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::handleConditionalCheckedCastExpr( ConditionalCheckedCastExpr * expr , bool isInsideIsExpr = false)",70, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitAssignExpr( AssignExpr * expr)",19, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitDiscardAssignmentExpr( DiscardAssignmentExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitUnresolvedPatternExpr( UnresolvedPatternExpr * expr)",11, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitBindOptionalExpr( BindOptionalExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitOptionalEvaluationExpr( OptionalEvaluationExpr * expr)",26, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitForceValueExpr( ForceValueExpr * expr)",38, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitOpenExistentialExpr( OpenExistentialExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitMakeTemporarilyEscapableExpr( MakeTemporarilyEscapableExpr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitKeyPathApplicationExpr( KeyPathApplicationExpr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitEnumIsCaseExpr( EnumIsCaseExpr * expr)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitLazyInitializerExpr( LazyInitializerExpr * expr)",5, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitEditorPlaceholderExpr( EditorPlaceholderExpr * E)",32, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitObjCSelectorExpr( ObjCSelectorExpr * E)",277, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitKeyPathExpr( KeyPathExpr * E)",323, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitKeyPathDotExpr( KeyPathDotExpr * E)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::visitTapExpr( TapExpr * E)",11, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::walkToExprPre( Expr * expr)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::walkToExprPost( Expr * expr)",13, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::finalize( Expr * & result)",89, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::diagnoseOptionalInjection( InjectIntoOptionalExpr * injection)",9, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"resolveLocatorToDecl( ConstraintSystem & cs , ConstraintLocator * locator , llvm :: function_ref<Optional<SelectedOverload>(ConstraintLocator*)> findOvlChoice , llvm :: function_ref<ConcreteDeclRef(ValueDecl*decl,Type openedType,ConstraintLocator*declLocator)> getConcreteDeclRef)",127, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"Solution::resolveLocatorToDecl( ConstraintLocator * locator) const",37, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"findCalleeDeclRef( ConstraintSystem & cs , const Solution & solution , ConstraintLocator * locator)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"shouldApplyAddingLabelFixit( TuplePattern * tuplePattern , TupleType * fromTuple , TupleType * toTuple , std :: vector<std::pair<SourceLoc,std::string>> & locInsertPairs)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"getCallerDefaultArg( ConstraintSystem & cs , DeclContext * dc , SourceLoc loc , ConcreteDeclRef & owner , unsigned index)",78, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"lookThroughIdentityExprs( Expr * expr)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"rebuildIdentityExprs( ConstraintSystem & cs , Expr * expr , Type type)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceTupleToTuple( Expr * expr , TupleType * fromTuple , TupleType * toTuple , ConstraintLocatorBuilder locator , SmallVectorImpl<int> & sources , SmallVectorImpl<unsigned> & variadicArgs , Optional<Pattern*> typeFromPattern)",112, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"getMetatypeSuperclass( Type t , TypeChecker & tc)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceSuperclass( Expr * expr , Type toType , ConstraintLocatorBuilder locator)",58, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"collectExistentialConformances( TypeChecker & tc , Type fromType , Type toType , DeclContext * DC)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceExistential( Expr * expr , Type toType , ConstraintLocatorBuilder locator)",55, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"getOptionalEvaluationDepth( Expr * expr , Expr * target)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceOptionalToOptional( Expr * expr , Type toType , ConstraintLocatorBuilder locator , Optional<Pattern*> typeFromPattern)",56, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceImplicitlyUnwrappedOptionalToValue( Expr * expr , Type objTy)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"isReferenceToMetatypeMember( ConstraintSystem & cs , Expr * expr)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"hasCurriedSelf( ConstraintSystem & cs , ConcreteDeclRef callee , ApplyExpr * apply)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceCallArguments( Expr * arg , AnyFunctionType * funcType , ApplyExpr * apply , ArrayRef<Identifier> argLabels , bool hasTrailingClosure , ConstraintLocatorBuilder locator)",326, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"getClosureLiteralExpr( Expr * expr)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"applyTypeToClosureExpr( ConstraintSystem & cs , Expr * expr , Type toType)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceClosureExprToVoid( ClosureExpr * closureExpr)",51, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceClosureExprFromNever( ClosureExpr * closureExpr)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"getSemanticExprForDeclOrMemberRef( Expr * expr)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"maybeDiagnoseUnsupportedFunctionConversion( ConstraintSystem & cs , Expr * expr , AnyFunctionType * toType)",62, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"buildElementConversion( ExprRewriter & rewriter , SourceLoc srcLoc , Type srcType , Type destType , bool bridged , ConstraintLocatorBuilder locator , Expr * element)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"buildOpaqueElementConversion( ExprRewriter & rewriter , SourceLoc srcLoc , Type srcCollectionType , Type destCollectionType , bool bridged , ConstraintLocatorBuilder locator , unsigned typeArgIndex)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::peepholeArrayUpcast( ArrayExpr * expr , Type toType , bool bridged , Type elementType , ConstraintLocatorBuilder locator)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::peepholeDictionaryUpcast( DictionaryExpr * expr , Type toType , bool bridged , Type keyType , Type valueType , ConstraintLocatorBuilder locator)",46, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::peepholeCollectionUpcast( Expr * expr , Type toType , bool bridged , ConstraintLocatorBuilder locator)",51, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::buildCollectionUpcastExpr( Expr * expr , Type toType , bool bridged , ConstraintLocatorBuilder locator)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::buildObjCBridgeExpr( Expr * expr , Type toType , ConstraintLocatorBuilder locator)",46, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"addImplicitLoadExpr( ConstraintSystem & cs , Expr * expr)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceToType( Expr * expr , Type toType , ConstraintLocatorBuilder locator , Optional<Pattern*> typeFromPattern)",426, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"adjustSelfTypeForMember( Type baseTy , ValueDecl * member , AccessSemantics semantics , DeclContext * UseDC)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::coerceObjectArgumentToType( Expr * expr , Type baseTy , ValueDecl * member , AccessSemantics semantics , ConstraintLocatorBuilder locator)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::convertLiteral( Expr * literal , Type type , Type openedType , ProtocolDecl * protocol , TypeOrName literalType , DeclName literalFuncName , ProtocolDecl * builtinProtocol , TypeOrName builtinLiteralType , DeclName builtinLiteralFuncName , bool(*isBuiltinArgType)(Type) , Diag<> brokenProtocolDiag , Diag<> brokenBuiltinProtocolDiag)",150, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::convertLiteralInPlace( Expr * literal , Type type , ProtocolDecl * protocol , Identifier literalType , DeclName literalFuncName , ProtocolDecl * builtinProtocol , DeclName builtinLiteralFuncName , Diag<> brokenProtocolDiag , Diag<> brokenBuiltinProtocolDiag)",108, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"finishApplyDynamicCallable( ConstraintSystem & cs , const Solution & solution , ApplyExpr * apply , ConstraintLocatorBuilder locator)",66, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprRewriter::finishApply( ApplyExpr * apply , Type openedType , ConstraintLocatorBuilder locator)",362, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"getPrecedenceParentAndIndex( Expr * expr , Expr * rootExpr)",56, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"swift::exprNeedsParensInsideFollowingOperator( TypeChecker & TC , DeclContext * DC , Expr * expr , PrecedenceGroupDecl * followingPG)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"swift::exprNeedsParensOutsideFollowingOperator( TypeChecker & TC , DeclContext * DC , Expr * expr , Expr * rootExpr , PrecedenceGroupDecl * followingPG)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"swift::exprNeedsParensBeforeAddingNilCoalescing( TypeChecker & TC , DeclContext * DC , Expr * expr)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"swift::exprNeedsParensAfterAddingNilCoalescing( TypeChecker & TC , DeclContext * DC , Expr * expr , Expr * rootExpr)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprWalker::ExprWalker( ExprRewriter & Rewriter)",1, 64, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprWalker::getClosuresToTypeCheck() const",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprWalker::getTapsToTypeCheck() const",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprWalker::walkToExprPre( Expr * expr)",72, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprWalker::walkToExprPost( Expr * expr)",7, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprWalker::walkToStmtPre( Stmt * stmt)",3, 6, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ExprWalker::walkToDeclPre( Decl * decl)",1, 62, 4, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ConstraintSystem::coerceToRValue( Expr * expr)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ConstraintSystem::applySolutionFixes( Expr * E , const Solution & solution)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"ConstraintSystem::applySolution( Solution & solution , Expr * expr , Type convertType , bool discardedExpr , bool skipClosures)",72, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"Solution::coerceToType( Expr * expr , Type toType , ConstraintLocator * locator , bool ignoreTopLevelInjection , Optional<Pattern*> typeFromPattern) const",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"isVariadicWitness( AbstractFunctionDecl * afd)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"argumentNamesMatch( Type argTy , ArrayRef<Identifier> names)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"TypeChecker::callWitness( Expr * base , DeclContext * dc , ProtocolDecl * protocol , ProtocolConformanceRef conformance , DeclName name , ArrayRef<Expr*> arguments , Diag<> brokenProtocolDiag)",128, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"Solution::convertBooleanTypeToBuiltinI1( Expr * expr , ConstraintLocator * locator) const",73, 2, 0, 0
repos/cpp/swift/lib/Sema/CSApply.cpp,"Solution::convertOptionalToBool( Expr * expr , ConstraintLocator * locator) const",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeVariableType::Implementation::print( llvm :: raw_ostream & OS)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"SavedTypeVariableBinding::SavedTypeVariableBinding( TypeVariableType * typeVar)",3, 56, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"SavedTypeVariableBinding::restore()",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeVariableType::Implementation::getGenericParameter() const",10, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ResolvedOverloadSetListItem::operator new( size_t bytes , ConstraintSystem & cs , unsigned alignment)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"operator new( size_t bytes , ConstraintSystem & cs , size_t alignment)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"constraints::computeTupleShuffle( ArrayRef<TupleTypeElt> fromTuple , ArrayRef<TupleTypeElt> toTuple , SmallVectorImpl<int> & sources , SmallVectorImpl<unsigned> & variadicArgs)",101, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ConstraintLocatorBuilder::trySimplifyToExpr() const",12, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"getNumArgs( ValueDecl * value)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"matchesDeclRefKind( ValueDecl * value , DeclRefKind refKind)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"containsDeclRefKind( LookupResult & lookupResult , DeclRefKind refKind)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"diagnoseBinOpSplit( UnresolvedDeclRefExpr * UDRE , std :: pair<unsigned,bool> splitCandidate , Diag<Identifier,Identifier,bool> diagID , TypeChecker & TC)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"diagnoseOperatorJuxtaposition( UnresolvedDeclRefExpr * UDRE , DeclContext * DC , TypeChecker & TC)",99, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"diagnoseRangeOperatorMisspell( UnresolvedDeclRefExpr * UDRE , TypeChecker & TC)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"diagnoseIncDecOperator( UnresolvedDeclRefExpr * UDRE , TypeChecker & TC)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"findNonMembers( TypeChecker & TC , ArrayRef<LookupResultEntry> lookupResults , DeclRefKind refKind , bool breakOnMember , SmallVectorImpl<ValueDecl*> & ResultValues , llvm :: function_ref<bool(ValueDecl*)> isValid)",36, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"shouldConsiderOuterResultsFor( DeclName name)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::resolveDeclRefExpr( UnresolvedDeclRefExpr * UDRE , DeclContext * DC)",321, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::getSelfForInitDelegationInConstructor( DeclContext * DC , UnresolvedDotExpr * ctorRef)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"addingDirectCall( FunctionRefKind kind)",15, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"tryUpdateDirectCalleeImpl( E * callee , int)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"tryUpdateDirectCalleeImpl( E * callee , ...)",1, 53, 2, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"markDirectCallee( Expr * callee)",53, 4, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::PreCheckExpression( TypeChecker & tc , DeclContext * dc , Expr * parent)",2, 48, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::walkToExprPre( Expr * expr)",130, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::walkToExprPost( Expr * expr)",147, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::walkToStmtPre( Stmt * stmt)",4, 6, 4, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::walkToClosureExprPre( ClosureExpr * closure)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::simplifyNestedTypeExpr( UnresolvedDotExpr * UDE)",92, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::simplifyUnresolvedSpecializeExpr( UnresolvedSpecializeExpr * us)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::simplifyTypeExpr( Expr * E)",310, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::resolveKeyPathExpr( KeyPathExpr * KPE)",123, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"PreCheckExpression::simplifyTypeConstructionWithLiteralArg( Expr * E)",59, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::preCheckExpression( Expr * & expr , DeclContext * dc)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ExprTypeCheckListener::~ExprTypeCheckListener()",1, 52, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ExprTypeCheckListener::builtConstraints( ConstraintSystem & cs , Expr * expr)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ExprTypeCheckListener::foundSolution( Solution & solution , Expr * expr)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ExprTypeCheckListener::appliedSolution( Solution & solution , Expr * expr)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ParentConditionalConformance::diagnoseConformanceStack( DiagnosticEngine & diags , SourceLoc loc , ArrayRef<ParentConditionalConformance> conformances)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"GenericRequirementsCheckListener::~GenericRequirementsCheckListener()",1, 73, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"GenericRequirementsCheckListener::shouldCheck( RequirementKind kind , Type first , Type second)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"GenericRequirementsCheckListener::satisfiedConformance( Type depTy , Type replacementTy , ProtocolConformanceRef conformance)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"GenericRequirementsCheckListener::diagnoseUnsatisfiedRequirement( const Requirement & req , Type first , Type second , ArrayRef<ParentConditionalConformance> parents)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typeCheckExpression( Expr * & expr , DeclContext * dc , TypeLoc convertType , ContextualTypePurpose convertTypePurpose , TypeCheckExprOptions options , ExprTypeCheckListener * listener , ConstraintSystem * baseCS)",126, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typeCheckParameterDefault( Expr * & defaultValue , DeclContext * DC , Type paramType , bool isAutoClosure , bool canFail)",34, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::getTypeOfExpressionWithoutApplying( Expr * & expr , DeclContext * dc , ConcreteDeclRef & referencedDecl , FreeTypeVariableBinding allowFreeTypeVariables , ExprTypeCheckListener * listener)",82, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::getPossibleTypesOfExpressionWithoutApplying( Expr * & expr , DeclContext * dc , SmallPtrSetImpl<TypeBase*> & types , FreeTypeVariableBinding allowFreeTypeVariables , ExprTypeCheckListener * listener)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"getTypeOfCompletionOperatorImpl( TypeChecker & TC , DeclContext * DC , Expr * expr , ConcreteDeclRef & referencedDecl)",57, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::getTypeOfCompletionOperator( DeclContext * DC , Expr * LHS , Identifier opName , DeclRefKind refKind , ConcreteDeclRef & referencedDecl)",63, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typeCheckBinding( Pattern * & pattern , Expr * & initializer , DeclContext * DC)",144, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typeCheckPatternBinding( PatternBindingDecl * PBD , unsigned patternNumber)",53, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typeCheckForEachBinding( DeclContext * dc , ForEachStmt * stmt)",154, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typeCheckCondition( Expr * & expr , DeclContext * dc)",49, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typeCheckStmtCondition( StmtCondition & cond , DeclContext * dc , Diag<> diagnosticForAlwaysTrue)",69, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typeCheckExprPattern( ExprPattern * EP , DeclContext * DC , Type rhsType)",65, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"replaceArchetypesWithTypeVariables( ConstraintSystem & cs , Type t)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typesSatisfyConstraint( Type type1 , Type type2 , bool openArchetypes , ConstraintKind kind , DeclContext * dc , bool * unwrappedIUO)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::isSubtypeOf( Type type1 , Type type2 , DeclContext * dc)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::isConvertibleTo( Type type1 , Type type2 , DeclContext * dc , bool * unwrappedIUO)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::isExplicitlyConvertibleTo( Type type1 , Type type2 , DeclContext * dc)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::isObjCBridgedTo( Type type1 , Type type2 , DeclContext * dc , bool * unwrappedIUO)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::checkedCastMaySucceed( Type t1 , Type t2 , DeclContext * dc)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::addImplicitLoadExpr( Expr * expr , std :: function<Type(Expr*)> getType , std :: function<void(Expr*,Type)> setType)",51, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::coerceToRValue( Expr * expr , llvm :: function_ref<Type(Expr*)> getType , llvm :: function_ref<void(Expr*,Type)> setType)",76, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::convertToType( Expr * & expr , Type type , DeclContext * dc , Optional<Pattern*> typeFromPattern)",55, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"Solution::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"Solution::dump( raw_ostream & out) const",131, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ConstraintSystem::dump()",3, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ConstraintSystem::dump( Expr * E)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"ConstraintSystem::print( raw_ostream & out)",175, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"TypeChecker::typeCheckCheckedCast( Type fromType , Type toType , CheckedCastContextKind contextKind , DeclContext * dc , SourceLoc diagLoc , Expr * fromExpr , SourceRange diagToRange)",560, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"lookThroughBridgeFromObjCCall( ASTContext & ctx , Expr * expr)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/TypeCheckConstraints.cpp,"swift::findForcedDowncast( ASTContext & ctx , Expr * expr)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"allAssociatedValuesConformToProtocol( DeclContext * DC , EnumDecl * theEnum , ProtocolDecl * protocol)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"allStoredPropertiesConformToProtocol( DeclContext * DC , StructDecl * theStruct , ProtocolDecl * protocol)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"canDeriveConformance( DeclContext * DC , NominalTypeDecl * target , ProtocolDecl * protocol)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"indexedVarDecl( char prefixChar , int index , Type type , DeclContext * varContext)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"enumElementPayloadSubpattern( EnumElementDecl * enumElementDecl , char varPrefix , DeclContext * varContext , SmallVectorImpl<VarDecl*> & boundVars)",53, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"convertEnumToIndex( SmallVectorImpl<ASTNode> & stmts , DeclContext * parentDC , EnumDecl * enumDecl , VarDecl * enumVarDecl , AbstractFunctionDecl * funcDecl , const char * indexName)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"returnIfNotEqualGuard( ASTContext & C , Expr * lhsExpr , Expr * rhsExpr)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyEquatable_enum_uninhabited_eq( AbstractFunctionDecl * eqDecl , void *)",26, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyEquatable_enum_noAssociatedValues_eq( AbstractFunctionDecl * eqDecl , void *)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyEquatable_enum_hasAssociatedValues_eq( AbstractFunctionDecl * eqDecl , void *)",113, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyEquatable_struct_eq( AbstractFunctionDecl * eqDecl , void *)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveEquatable_eq( DerivedConformance & derived , void(*bodySynthesizer)(AbstractFunctionDecl*,void*))",120, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"DerivedConformance::canDeriveEquatable( DeclContext * DC , NominalTypeDecl * type)",7, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"DerivedConformance::deriveEquatable( ValueDecl * requirement)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"createHasherCombineCall( ASTContext & C , ParamDecl * hasher , Expr * hashable)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveHashable_hashInto( DerivedConformance & derived , void(*bodySynthesizer)(AbstractFunctionDecl*,void*))",59, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyHashable_compat_hashInto( AbstractFunctionDecl * hashIntoDecl , void *)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyHashable_enum_rawValue_hashInto( AbstractFunctionDecl * hashIntoDecl , void *)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyHashable_enum_noAssociatedValues_hashInto( AbstractFunctionDecl * hashIntoDecl , void *)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyHashable_enum_hasAssociatedValues_hashInto( AbstractFunctionDecl * hashIntoDecl , void *)",86, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyHashable_struct_hashInto( AbstractFunctionDecl * hashIntoDecl , void *)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveBodyHashable_hashValue( AbstractFunctionDecl * hashValueDecl , void *)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"deriveHashable_hashValue( DerivedConformance & derived)",77, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"getHashValueRequirement( ASTContext & C)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"getHashableConformance( Decl * parentDecl)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"DerivedConformance::canDeriveHashable( NominalTypeDecl * type)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceEquatableHashable.cpp,"DerivedConformance::deriveHashable( ValueDecl * requirement)",65, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"inheritsConformanceTo( ClassDecl * target , ProtocolDecl * proto)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"superclassIsEncodable( ClassDecl * target)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"superclassIsDecodable( ClassDecl * target)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"typeConformsToCodable( TypeChecker & tc , DeclContext * context , Type target , bool isIUO , ProtocolDecl * proto)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"varConformsToCodable( TypeChecker & tc , DeclContext * context , VarDecl * varDecl , ProtocolDecl * proto)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"validateCodingKeysEnum( DerivedConformance & derived , EnumDecl * codingKeysDecl)",90, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"CodingKeysValidity::CodingKeysValidity( bool ht , bool iv)",1, 69, 2, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"hasValidCodingKeysEnum( DerivedConformance & derived)",61, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"synthesizeCodingKeysEnum( DerivedConformance & derived)",83, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"lookupEvaluatedCodingKeysEnum( ASTContext & C , NominalTypeDecl * target)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"createKeyedContainer( ASTContext & C , DeclContext * DC , NominalTypeDecl * keyedContainerDecl , Type keyType , VarDecl :: Specifier spec)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"createContainerKeyedByCall( ASTContext & C , DeclContext * DC , Expr * base , Type returnType , NominalTypeDecl * param)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"deriveBodyEncodable_encode( AbstractFunctionDecl * encodeDecl , void *)",173, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"deriveEncodable_encode( DerivedConformance & derived)",55, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"deriveBodyDecodable_init( AbstractFunctionDecl * initDecl , void *)",236, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"deriveDecodable_init( DerivedConformance & derived)",55, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"canSynthesize( DerivedConformance & derived , ValueDecl * requirement)",88, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"DerivedConformance::deriveEncodable( ValueDecl * requirement)",45, 2, 0, 0
repos/cpp/swift/lib/Sema/DerivedConformanceCodable.cpp,"DerivedConformance::deriveDecodable( ValueDecl * requirement)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::ConstraintGraph( ConstraintSystem & cs)",1, 68, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::~ConstraintGraph()",8, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::lookupNode( TypeVariableType * typeVar)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::getEquivalenceClass() const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::getEquivalenceClassUnsafe() const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::addConstraint( Constraint * constraint)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::removeConstraint( Constraint * constraint)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::getAdjacency( TypeVariableType * typeVar)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::modifyAdjacency( TypeVariableType * typeVar , llvm :: function_ref<void(Adjacency&adj)> modify)",34, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::addAdjacency( TypeVariableType * typeVar)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::removeAdjacency( TypeVariableType * typeVar)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::addToEquivalenceClass( ArrayRef<TypeVariableType*> typeVars)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::addFixedBinding( TypeVariableType * typeVar)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::removeFixedBinding( TypeVariableType * typeVar)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphScope::ConstraintGraphScope( ConstraintGraph & CG)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphScope::~ConstraintGraphScope()",12, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::Change::addedTypeVariable( TypeVariableType * typeVar)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::Change::addedConstraint( Constraint * constraint)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::Change::removedConstraint( Constraint * constraint)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::Change::extendedEquivalenceClass( TypeVariableType * typeVar , unsigned prevSize)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::Change::boundTypeVariable( TypeVariableType * typeVar , Type fixed)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::Change::undo( ConstraintGraph & cg)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::removeNode( TypeVariableType * typeVar)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::addConstraint( Constraint * constraint)",31, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::removeConstraint( Constraint * constraint)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::mergeNodes( TypeVariableType * typeVar1 , TypeVariableType * typeVar2)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::bindTypeVariable( TypeVariableType * typeVar , Type fixed)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::unbindTypeVariable( TypeVariableType * typeVar , Type fixed)",16, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::gatherConstraints( TypeVariableType * typeVar , llvm :: SetVector<Constraint*> & constraints , GatheringKind kind , llvm :: function_ref<bool(Constraint*)> acceptConstraint)",54, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"connectedComponentsDFS( ConstraintGraph & cg , ConstraintGraphNode & node , unsigned component , SmallVectorImpl<unsigned> & components)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::computeConnectedComponents( SmallVectorImpl<TypeVariableType*> & typeVars , SmallVectorImpl<unsigned> & components)",78, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"shouldContractEdge( ConstraintKind kind)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::contractEdges()",86, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::removeEdge( Constraint * constraint)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::optimize()",4, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::incrementConstraintsPerContractionCounter()",7, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::print( llvm :: raw_ostream & out , unsigned indent)",63, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::dump()",5, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::print( llvm :: raw_ostream & out)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::dump()",5, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::printConnectedComponents( llvm :: raw_ostream & out)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::dumpConnectedComponents()",3, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"_require( bool condition , const Twine & complaint , ConstraintGraph & cg , ConstraintGraphNode * node , const std :: function<void()> & extraContext = nullptr)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"printValue( llvm :: raw_ostream & os , TypeVariableType * typeVar)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"printValue( llvm :: raw_ostream & os , Constraint * constraint)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"printValue( llvm :: raw_ostream & os , unsigned value)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraphNode::verify( ConstraintGraph & cg)",83, 2, 0, 0
repos/cpp/swift/lib/Sema/ConstraintGraph.cpp,"ConstraintGraph::verify()",106, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"swift::getTypeListString( Type type)",18, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"swift::replaceTypeParametersWithUnresolved( Type ty)",14, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"swift::replaceTypeVariablesWithUnresolved( Type ty)",13, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isUnresolvedOrTypeVarType( Type ty)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"recomputeSummaryFlags( ConstraintLocator * oldLocator , ArrayRef<LocatorPathElt> path)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"constraints::simplifyLocator( ConstraintSystem & cs , ConstraintLocator * locator , SourceRange & range , ConstraintLocator ** targetLocator)",36, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"constraints::simplifyLocator( Expr * & anchor , ArrayRef<LocatorPathElt> & path , Expr * & targetAnchor , SmallVectorImpl<LocatorPathElt> & targetPath , SourceRange & range)",193, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"operator |( TCCFlags flag1 , TCCFlags flag2)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::FailureDiagnosis( Expr * expr , ConstraintSystem & cs)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnose( ArgTypes && ... Args)",3, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::typeCheckChildIndependently( Expr * subExpr , TCCOptions options , bool allowFreeTypeVariables = true)",5, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::getTypeOfTypeCheckedChildIndependently( Expr * subExpr , TCCOptions options = TCCOptions())",5, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::getPossibleTypesOfExpressionWithoutApplying( Expr * & expr , DeclContext * dc , SmallPtrSetImpl<TypeBase*> & types , FreeTypeVariableBinding allowFreeTypeVariables = FreeTypeVariableBinding :: Disallow , ExprTypeCheckListener * listener = nullptr)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::getTypeOfExpressionWithoutApplying( Expr * & expr , DeclContext * dc , ConcreteDeclRef & referencedDecl , FreeTypeVariableBinding allowFreeTypeVariables = FreeTypeVariableBinding :: Disallow , ExprTypeCheckListener * listener = nullptr)",10, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isMemberConstraint( Constraint * C)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isOverloadConstraint( Constraint * C)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isConversionConstraint( const Constraint * C)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseConstraintFailure()",116, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseGeneralMemberFailure( Constraint * constraint)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseTypeMemberOnInstanceLookup( Type baseObjTy , Expr * baseExpr , DeclName memberName , DeclNameLoc nameLoc , ValueDecl * member , SourceLoc loc)",133, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"findCorrectEnumCaseName( Type Ty , TypoCorrectionResults & corrections , DeclName memberName)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseUnviableLookupResults( MemberLookupResult & result , Type baseObjTy , Expr * baseExpr , DeclName memberName , DeclNameLoc nameLoc , SourceLoc loc)",243, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseGeneralOverloadFailure( Constraint * constraint)",52, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseConversionToBool( Expr * expr , Type exprType)",37, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseUnresolvedDotExprTypeRequirementFailure( ConstraintSystem & cs , Constraint * constraint)",70, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseTypeRequirementFailure( ConstraintSystem & cs , Constraint * constraint)",62, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseGeneralConversionFailure( Constraint * constraint)",210, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ExprTypeSaverAndEraser::ExprTypeSaverAndEraser( Expr * E)",94, 6, 4, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ExprTypeSaverAndEraser::restore()",36, 6, 4, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ExprTypeSaverAndEraser::~ExprTypeSaverAndEraser()",33, 6, 4, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ExprTypeSaverAndEraser::getParamBaseType( std :: pair<ParamDecl*,Type> & storedParam)",19, 6, 4, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::typeCheckChildIndependently( Expr * subExpr , Type convertType , ContextualTypePurpose convertTypePurpose , TCCOptions options , ExprTypeCheckListener * listener , bool allowFreeTypeVariables)",100, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::typeCheckArbitrarySubExprIndependently( Expr * subExpr , TCCOptions options)",41, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseCalleeResultContextualConversionError()",70, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"conformsToKnownProtocol( Type fromType , KnownProtocolKind kind , const ConstraintSystem & CS)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isIntegerType( Type fromType , const ConstraintSystem & CS)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isRawRepresentable( Type fromType , const ConstraintSystem & CS)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isRawRepresentable( Type fromType , KnownProtocolKind kind , const ConstraintSystem & CS)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isIntegerToStringIndexConversion( Type fromType , Type toType , ConstraintSystem & CS)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isOptionSetType( Type fromType , const ConstraintSystem & CS)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"tryRawRepresentableFixIts( InFlightDiagnostic & diag , const ConstraintSystem & CS , Type fromType , Type toType , KnownProtocolKind kind , const Expr * expr)",112, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"tryIntegerCastFixIts( InFlightDiagnostic & diag , ConstraintSystem & CS , Type fromType , Type toType , Expr * expr)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"addTypeCoerceFixit( InFlightDiagnostic & diag , ConstraintSystem & CS , Type fromType , Type toType , Expr * expr)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseNonEscapingParameterToEscaping( Expr * expr , Type srcType , Type dstType , ContextualTypePurpose dstPurpose)",48, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseContextualConversionError( Expr * expr , Type contextualType , ContextualTypePurpose CTP , Type suggestedType)",364, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"findSimpleReferencedDecl( const Expr * E)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"findReferencedDecl( const Expr * E)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"TypeChecker::diagnoseSelfAssignment( const Expr * E)",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isSymmetricBinaryOperator( const CalleeCandidateInfo & CCI)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"candidatesHaveAnyDefaultValues( const CalleeCandidateInfo & candidates)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"getElementForScalarInitOfArg( const TupleType * tupleTy , const CalleeCandidateInfo & candidates)",76, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"callArgHasTrailingClosure( Expr * E)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::typeCheckArgumentChildIndependently( Expr * argExpr , Type argType , const CalleeCandidateInfo & candidates , TCCOptions options)",214, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"getBaseName( DeclContext * context)",8, 3, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"emitFixItForExplicitlyQualifiedReference( TypeChecker & tc , UnresolvedDotExpr * UDE , decltype(diag::fix_unqualified_access_top_level) diag , DeclName baseName , DescriptiveDeclKind kind)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ConstraintSystem::diagnoseDeprecatedConditionalConformanceOuterAccess( UnresolvedDotExpr * UDE , ValueDecl * choice)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"decomposeArgType( Type argType , ArrayRef<Identifier> argLabels)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseImplicitSelfErrors( Expr * fnExpr , Expr * argExpr , CalleeCandidateInfo & CCI , ArrayRef<Identifier> argLabels)",212, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseInstanceMethodAsCurriedMemberOnType( CalleeCandidateInfo & CCI , Expr * fnExpr , Expr * argExpr)",98, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseTupleParameterMismatch( CalleeCandidateInfo & CCI , ArrayRef<AnyFunctionType::Param> params , ArrayRef<AnyFunctionType::Param> args , Expr * fnExpr , Expr * argExpr , bool isTopLevel = true)",97, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseTupleParameterMismatch( CalleeCandidateInfo & CCI , ArrayRef<FunctionType::Param> params , Type argType , Expr * fnExpr , Expr * argExpr , bool isTopLevel = true)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ArgumentMatcher::ArgumentMatcher( Expr * fnExpr , Expr * argExpr , ArrayRef<AnyFunctionType::Param> & params , const SmallBitVector & defaultMap , SmallVectorImpl<AnyFunctionType::Param> & args , CalleeCandidateInfo & CCI , bool isSubscript)",8, 36, 6, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ArgumentMatcher::extraArgument( unsigned extraArgIdx)",37, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ArgumentMatcher::missingArgument( unsigned missingParamIdx)",126, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ArgumentMatcher::missingLabel( unsigned paramIdx)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ArgumentMatcher::extraneousLabel( unsigned paramIdx)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ArgumentMatcher::incorrectLabel( unsigned paramIdx)",4, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ArgumentMatcher::outOfOrderArgument( unsigned argIdx , unsigned prevArgIdx)",111, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ArgumentMatcher::relabelArguments( ArrayRef<Identifier> newNames)",9, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ArgumentMatcher::diagnose()",10, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseSingleCandidateFailures( CalleeCandidateInfo & CCI , Expr * fnExpr , Expr * argExpr , ArrayRef<Identifier> argLabels)",73, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"checkRawRepresentableMismatch( Type fromType , Type toType , KnownProtocolKind kind , const ConstraintSystem & CS)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseRawRepresentableMismatch( CalleeCandidateInfo & CCI , Expr * argExpr , ArrayRef<Identifier> argLabels)",88, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"getFailedArgumentExpr( CalleeCandidateInfo CCI , Expr * argExpr)",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseParameterErrors( CalleeCandidateInfo & CCI , Expr * fnExpr , Expr * argExpr , ArrayRef<Identifier> argLabels)",77, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseSubscriptErrors( SubscriptExpr * SE , bool inAssignmentDestination)",152, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitSubscriptExpr( SubscriptExpr * SE)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"CalleeListener::CalleeListener( Type contextualType)",2, 43, 4, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"CalleeListener::builtConstraints( ConstraintSystem & cs , Expr * expr)",29, 6, 4, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isNameOfStandardComparisonOperator( StringRef opName)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseNilLiteralComparison( Expr * lhsExpr , Expr * rhsExpr , CalleeCandidateInfo & calleeInfo , SourceLoc applyLoc)",53, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseMethodAttributeFailures( swift :: ApplyExpr * callExpr , ArrayRef<Identifier> argLabels , bool hasTrailingClosure , CalleeCandidateInfo & candidates)",79, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseArgumentGenericRequirements( TypeChecker & TC , Expr * callExpr , Expr * fnExpr , Expr * argExpr , CalleeCandidateInfo & candidates , ArrayRef<Identifier> argLabels)",177, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isCastToTypedPointer( ConstraintSystem & CS , const Expr * Fn , const Expr * Arg)",35, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseClosureExplicitParameterMismatch( ConstraintSystem & CS , SourceLoc loc , ArrayRef<AnyFunctionType::Param> params , ArrayRef<AnyFunctionType::Param> args)",32, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseTrailingClosureErrors( ApplyExpr * callExpr)",162, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseCallContextualConversionErrors( ApplyExpr * callExpr , Type contextualType , ContextualTypePurpose CTP)",30, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseSubscriptMisuse( ApplyExpr * callExpr)",98, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"shouldTypeCheckFunctionExpr( FailureDiagnosis & FD , DeclContext * DC , Expr * fnExpr)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isViableOverloadSet( const CalleeCandidateInfo & CCI , size_t numArgs)",25, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitApplyExpr( ApplyExpr * callExpr)",606, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitAssignExpr( AssignExpr * assignExpr)",91, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isKnownToBeArrayType( Type ty)",9, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitInOutExpr( InOutExpr * IOE)",43, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitCoerceExpr( CoerceExpr * CE)",20, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitForceValueExpr( ForceValueExpr * FVE)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitBindOptionalExpr( BindOptionalExpr * BOE)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitIfExpr( IfExpr * IE)",29, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitRebindSelfInConstructorExpr( RebindSelfInConstructorExpr * E)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitCaptureListExpr( CaptureListExpr * CLE)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"isInvalidClosureResultType( Type resultType)",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitClosureExpr( ClosureExpr * CE)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseClosureExpr( ClosureExpr * CE , Type contextualType , llvm :: function_ref<bool(Type,Type)> resultTypeProcessor)",350, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseKeyPathUnsupportedOperations( TypeChecker & TC , KeyPathExpr * KPE)",21, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"diagnoseKeyPathComponents( ConstraintSystem & CS , KeyPathExpr * KPE , Type rootType)",349, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitKeyPathExpr( KeyPathExpr * KPE)",98, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitArrayExpr( ArrayExpr * E)",87, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitDictionaryExpr( DictionaryExpr * E)",63, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitObjectLiteralExpr( ObjectLiteralExpr * E)",64, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitUnresolvedMemberExpr( UnresolvedMemberExpr * E)",175, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseMemberFailures( Expr * E , Expr * baseExpr , ConstraintKind lookupKind , DeclName memberName , FunctionRefKind funcRefKind , ConstraintLocator * locator , Optional<std::function<bool(ArrayRef<OverloadChoice>)>> callback , bool includeInaccessibleMembers)",233, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitUnresolvedDotExpr( UnresolvedDotExpr * UDE)",10, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitTupleExpr( TupleExpr * TE)",92, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitIdentityExpr( IdentityExpr * E)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitTryExpr( TryExpr * E)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::visitExpr( Expr * E)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseExprFailure()",10, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ConstraintSystem::diagnoseFailureForExpr( Expr * expr)",33, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"hasGenericParameter( const GenericTypeDecl * generic , GenericTypeParamType * paramTy)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"noteGenericParameterSource( const TypeLoc & loc , GenericTypeParamType * paramTy , ConstraintSystem & cs)",109, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::validateContextualType( Type contextualType , ContextualTypePurpose CTP)",66, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseAmbiguousMultiStatementClosure( ClosureExpr * closure)",128, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseAmbiguousGenericParameters()",71, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseAmbiguousGenericParameter( GenericTypeParamType * paramTy , Expr * anchor)",86, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"FailureDiagnosis::diagnoseAmbiguity( Expr * E)",95, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"ConstraintSystem::findResolvedMemberRef( ConstraintLocator * locator)",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiag.cpp,"swift::diagnoseBaseUnwrapForMemberAccess( Expr * baseExpr , Type baseType , DeclName memberName , bool resultOptional , SourceRange memberRange)",27, 2, 0, 0
repos/cpp/swift/lib/Sema/SourceLoader.cpp,"findModule( ASTContext & ctx , StringRef moduleID , SourceLoc importLoc)",22, 2, 0, 0
repos/cpp/swift/lib/Sema/SourceLoader.cpp,"SkipNonTransparentFunctions::shouldDelayFunctionBodyParsing( Parser & TheParser , AbstractFunctionDecl * AFD , const DeclAttributes & Attrs , SourceRange BodyRange)",6, 4, 2, 0
repos/cpp/swift/lib/Sema/SourceLoader.cpp,"SourceLoader::canImportModule( std :: pair<Identifier,SourceLoc> ID)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/SourceLoader.cpp,"SourceLoader::loadModule( SourceLoc importLoc , ArrayRef<std::pair<Identifier,SourceLoc>> path)",74, 2, 0, 0
repos/cpp/swift/lib/Sema/SourceLoader.cpp,"SourceLoader::loadExtensions( NominalTypeDecl * nominal , unsigned previousGeneration)",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"ConstraintSystem::increaseScore( ScoreKind kind , unsigned value)",54, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"ConstraintSystem::worseThanBestSolution() const",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"constraints::operator < <( llvm :: raw_ostream & out , const Score & score)",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"sameDecl( Decl * decl1 , Decl * decl2)",17, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"sameOverloadChoice( const OverloadChoice & x , const OverloadChoice & y)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"isNominallySuperclassOf( Type type1 , Type type2)",12, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"computeSelfTypeRelationship( TypeChecker & tc , DeclContext * dc , ValueDecl * decl1 , ValueDecl * decl2)",60, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"isDeclMoreConstrainedThan( ValueDecl * decl1 , ValueDecl * decl2)",42, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"isProtocolExtensionAsSpecializedAs( TypeChecker & tc , DeclContext * dc1 , DeclContext * dc2)",47, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"getAdjustedParamType( const AnyFunctionType :: Param & param)",6, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"paramIsIUO( Decl * decl , int paramNum)",15, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"isDeclAsSpecializedAs( TypeChecker & tc , DeclContext * dc , ValueDecl * decl1 , ValueDecl * decl2 , bool isDynamicOverloadComparison = false)",356, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"TypeChecker::compareDeclarations( DeclContext * dc , ValueDecl * decl1 , ValueDecl * decl2)",11, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"getUnlabeledType( Type type , ASTContext & ctx)",14, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"ConstraintSystem::compareSolutions( ConstraintSystem & cs , ArrayRef<Solution> solutions , const SolutionDiff & diff , unsigned idx1 , unsigned idx2 , llvm :: DenseMap<Expr*,unsigned> & weights)",440, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"ConstraintSystem::findBestSolution( SmallVectorImpl<Solution> & viable , llvm :: DenseMap<Expr*,unsigned> & weights , bool minimize)",139, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"SolutionDiff::SolutionDiff( ArrayRef<Solution> solutions)",96, 2, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"InputMatcher::InputMatcher( const ArrayRef<AnyFunctionType::Param> params , const SmallBitVector & defaultValueMap)",4, 24, 0, 0
repos/cpp/swift/lib/Sema/CSRanking.cpp,"InputMatcher::match( int numInputs , std :: function<bool(unsigned,unsigned)> pairMatcher)",45, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"FailureDiagnostic::~FailureDiagnostic()",1, 43, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"FailureDiagnostic::diagnose( bool asNote)",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"FailureDiagnostic::diagnoseAsNote()",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"FailureDiagnostic::computeAnchor() const",24, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"FailureDiagnostic::getType( Expr * expr) const",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"FailureDiagnostic::emitDiagnostic( ArgTypes && ... Args) const",4, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"RequirementFailure::getOwnerType() const",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"RequirementFailure::getGenericContext() const",5, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"RequirementFailure::getRequirement() const",3, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"RequirementFailure::getDeclRef() const",43, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"RequirementFailure::getRequirementDC() const",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"RequirementFailure::diagnoseAsError()",23, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"RequirementFailure::diagnoseAsNote()",8, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"RequirementFailure::emitRequirementNote( const Decl * anchor) const",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"MissingConformanceFailure::diagnoseAsError()",63, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"LabelingFailure::diagnoseAsError()",7, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"NoEscapeFuncToTypeConversionFailure::diagnoseAsError()",22, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"MissingForcedDowncastFailure::diagnoseAsError()",44, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"MissingAddressOfFailure::diagnoseAsError()",10, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"MissingExplicitConversionFailure::diagnoseAsError()",58, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"MemberAccessOnOptionalBaseFailure::diagnoseAsError()",19, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"offerDefaultValueUnwrapFixit( TypeChecker & TC , DeclContext * DC , Expr * expr)",28, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"offerForceUnwrapFixit( ConstraintSystem & CS , Expr * expr)",24, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"VarDeclMultipleReferencesChecker::walkToExprPre( Expr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"VarDeclMultipleReferencesChecker::VarDeclMultipleReferencesChecker( VarDecl * varDecl)",1, 84, 2, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"VarDeclMultipleReferencesChecker::referencesCount()",1, 42, 2, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"diagnoseUnwrap( ConstraintSystem & CS , Expr * expr , Type type)",59, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"MissingOptionalUnwrapFailure::diagnoseAsError()",32, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"RValueTreatedAsLValueFailure::diagnoseAsError()",95, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"TrailingClosureAmbiguityFailure::diagnoseAsNote()",52, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"AssignmentFailure::AssignmentFailure( Expr * destExpr , ConstraintSystem & cs , SourceLoc diagnosticLoc)",6, 57, 6, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"AssignmentFailure::diagnoseAsError()",186, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"AssignmentFailure::fixItChangeInoutArgType( const Expr * arg , Type actualType , Type neededType) const",61, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"AssignmentFailure::resolveImmutableBase( Expr * expr) const",95, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"AssignmentFailure::findDeclDiagonstic( ASTContext & ctx , Expr * destExpr)",23, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"ContextualFailure::diagnoseAsError()",27, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"ContextualFailure::diagnoseMissingFunctionCall() const",18, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"ContextualFailure::trySequenceSubsequenceFixIts( InFlightDiagnostic & diag , ConstraintSystem & CS , Type fromType , Type toType , Expr * expr)",39, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"AutoClosureForwardingFailure::diagnoseAsError()",15, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"NonOptionalUnwrapFailure::diagnoseAsError()",13, 2, 0, 0
repos/cpp/swift/lib/Sema/CSDiagnostics.cpp,"MissingCallFailure::diagnoseAsError()",34, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"claimNext( ArrayRef<T> & array)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"Transform::Transform( SILGenFunction & SGF , SILLocation loc)",1, 76, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"collectExistentialConformances( ModuleDecl * M , CanType fromType , CanType toType)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"getOpenedArchetype( CanType openedType)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"emitTransformExistential( SILGenFunction & SGF , SILLocation loc , ManagedValue input , CanType inputType , CanType outputType , SGFContext ctxt)",58, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"Transform::transform( RValue && input , AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , SGFContext ctxt)",80, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"isProtocolClass( Type t)",9, 3, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"emitManagedLoad( SILGenFunction & SGF , SILLocation loc , ManagedValue addr , const TypeLowering & addrTL)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"Transform::transform( ManagedValue v , AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , SGFContext ctxt)",262, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"Transform::transformMetatype( ManagedValue meta , AbstractionPattern inputOrigType , CanMetatypeType inputSubstType , AbstractionPattern outputOrigType , CanMetatypeType outputSubstType)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"explodeTuple( SILGenFunction & SGF , SILLocation loc , ManagedValue managedTuple , SmallVectorImpl<ManagedValue> & out)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"Transform::transformTuple( ManagedValue inputTuple , AbstractionPattern inputOrigType , CanTupleType inputSubstType , AbstractionPattern outputOrigType , CanTupleType outputSubstType , SGFContext ctxt)",108, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::collectThunkParams( SILLocation loc , SmallVectorImpl<ManagedValue> & params , SmallVectorImpl<SILArgument*> * indirectResults)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"emitForceInto( SILGenFunction & SGF , SILLocation loc , ManagedValue result , TemporaryInitialization & temp)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateIndirect::TranslateIndirect( AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , SILValue input , SILValue output)",9, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateIndirect::emit( SILGenFunction & SGF , CleanupLocation loc , ForUnwind_t forUnwind)",22, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateIndirect::dump( SILGenFunction & SGF) const",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::TranslateArguments( SILGenFunction & SGF , SILLocation loc , ArrayRef<ManagedValue> inputs , SmallVectorImpl<ManagedValue> & outputs , ArrayRef<SILParameterInfo> outputTypes)",6, 36, 8, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translate( AbstractionPattern inputOrigFunctionType , AnyFunctionType :: CanParamArrayRef inputSubstTypes , AbstractionPattern outputOrigFunctionType , AnyFunctionType :: CanParamArrayRef outputSubstTypes)",56, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translate( ArrayRef<AbstractionPattern> inputOrigTypes , AnyFunctionType :: CanParamArrayRef inputSubstTypes , ArrayRef<AbstractionPattern> outputOrigTypes , AnyFunctionType :: CanParamArrayRef outputSubstTypes)",13, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translate( AbstractionPattern inputOrigType , AnyFunctionType :: CanParam inputSubstType , AbstractionPattern outputOrigType , AnyFunctionType :: CanParam outputSubstType)",20, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translate( AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType)",119, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateAndImplodeIntoValue( AbstractionPattern inputOrigType , CanTupleType inputType , AbstractionPattern outputOrigType , CanTupleType outputType , SILType loweredOutputTy)",49, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateAndImplodeIntoOptional( AbstractionPattern inputOrigType , CanTupleType inputTupleType , AbstractionPattern outputOrigType , CanTupleType outputTupleType)",42, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateAndImplodeIntoAny( AbstractionPattern inputOrigType , CanTupleType inputTupleType , AbstractionPattern outputOrigType , CanType outputSubstType)",38, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateParallelExploded( AbstractionPattern inputOrigType , CanTupleType inputSubstType , AbstractionPattern outputOrigType , CanTupleType outputSubstType)",18, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateAndExplodeOutOf( AbstractionPattern inputOrigType , CanTupleType inputSubstType , AbstractionPattern outputOrigType , CanTupleType outputSubstType , ManagedValue inputTupleAddr)",44, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateAndImplodeInto( AbstractionPattern inputOrigType , CanTupleType inputSubstType , AbstractionPattern outputOrigType , CanTupleType outputSubstType , TemporaryInitialization & tupleInit)",47, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateIndirect( AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , ManagedValue input , SILType resultTy)",11, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateIntoOwned( AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , ManagedValue input)",13, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateIntoGuaranteed( AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , ManagedValue input)",28, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateSingle( AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , ManagedValue input , SILParameterInfo result)",69, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateInOut( AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , ManagedValue input , SILParameterInfo result)",50, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translateSingleInto( AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , ManagedValue input , TemporaryInitialization & temp)",11, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::translatePrimitive( AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , ManagedValue input , SGFContext context = SGFContext())",11, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::forceInto( ManagedValue result , TemporaryInitialization & temp)",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::claimNextInput()",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"TranslateArguments::claimNextOutputType()",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"forwardFunctionArguments( SILGenFunction & SGF , SILLocation loc , CanSILFunctionType fTy , ArrayRef<ManagedValue> managedArgs , SmallVectorImpl<SILValue> & forwardedArgs)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"YieldInfo::YieldInfo( SILGenModule & SGM , SILDeclRef function , CanSILFunctionType loweredType , SubstitutionMap subs)",15, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"YieldInfo::getOrigTypes() const",1, 76, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"YieldInfo::getSubstTypes() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"YieldInfo::getLoweredTypes() const",1, 76, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"manageYield( SILGenFunction & SGF , SILValue value , SILYieldInfo info)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"manageYields( SILGenFunction & SGF , ArrayRef<SILValue> yields , ArrayRef<SILYieldInfo> yieldInfos , SmallVectorImpl<ManagedValue> & yieldMVs)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"translateYields( SILGenFunction & SGF , SILLocation loc , ArrayRef<SILValue> innerYields , const YieldInfo & innerInfos , const YieldInfo & outerInfos)",49, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::Operation::Operation( Kind kind)",1, 44, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::ResultPlanner( SILGenFunction & SGF , SILLocation loc)",1, 78, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::plan( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , CanSILFunctionType innerFnType , CanSILFunctionType outerFnType , SmallVectorImpl<SILValue> & innerIndirectResultAddrs)",31, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::claimNextInnerResult( PlanData & data)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::claimNextOuterResult( PlanData & data)",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addInnerIndirectResultTemporary( PlanData & data , SILResultInfo innerResult)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addInPlace( PlanData & data , SILValue outerResultAddr)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addOperation( Operation :: Kind kind)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addDirectToDirect( SILResultInfo innerResult , SILResultInfo outerResult)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addDirectToIndirect( SILResultInfo innerResult , SILValue outerResultAddr)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addIndirectToDirect( SILValue innerResultAddr , SILResultInfo outerResult)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addIndirectToIndirect( SILValue innerResultAddr , SILValue outerResultAddr)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addTupleDirect( unsigned numElements , SILResultInfo outerResult)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addInjectOptionalDirect( EnumElementDecl * someDecl , SILResultInfo outerResult)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addInjectOptionalIndirect( EnumElementDecl * someDecl , SILValue outerResultAddr)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addReabstractDirectToDirect( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , SILResultInfo innerResult , SILResultInfo outerResult)",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addReabstractDirectToIndirect( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , SILResultInfo innerResult , SILValue outerResultAddr)",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addReabstractIndirectToDirect( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , SILValue innerResultAddr , SILResultInfo outerResult)",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::addReabstractIndirectToIndirect( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , SILValue innerResultAddr , SILValue outerResultAddr)",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::plan( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , PlanData & planData)",96, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planIntoIndirectResult( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , PlanData & planData , SILValue outerResultAddr)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planTupleIntoIndirectResult( AbstractionPattern innerOrigType , CanTupleType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , PlanData & planData , SILValue outerResultAddr)",68, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planIntoDirectResult( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , PlanData & planData , SILResultInfo outerResult)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planTupleIntoDirectResult( AbstractionPattern innerOrigType , CanTupleType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , PlanData & planData , SILResultInfo outerResult)",76, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planScalarIntoDirectResult( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , PlanData & planData , SILResultInfo innerResult , SILResultInfo outerResult)",33, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planScalarIntoIndirectResult( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , PlanData & planData , SILResultInfo innerResult , SILValue outerResultAddr)",43, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planFromIndirectResult( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , PlanData & planData , SILValue innerResultAddr)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planTupleFromIndirectResult( AbstractionPattern innerOrigType , CanTupleType innerSubstType , AbstractionPattern outerOrigType , CanTupleType outerSubstType , PlanData & planData , SILValue innerResultAddr)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planTupleFromDirectResult( AbstractionPattern innerOrigType , CanTupleType innerSubstType , AbstractionPattern outerOrigType , CanTupleType outerSubstType , PlanData & planData , SILResultInfo innerResult)",39, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::planScalarFromIndirectResult( AbstractionPattern innerOrigType , CanType innerSubstType , AbstractionPattern outerOrigType , CanType outerSubstType , SILValue innerResultAddr , SILResultInfo outerResult , SILValue optOuterResultAddr)",37, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::executeInnerTuple( SILValue innerElement , SmallVector<SILValue,4> & innerDirectResults)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::execute( SILValue innerResult)",35, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"ResultPlanner::execute( ArrayRef<SILValue> innerDirectResults , SmallVectorImpl<SILValue> & outerDirectResults)",148, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"buildThunkBody( SILGenFunction & SGF , SILLocation loc , AbstractionPattern inputOrigType , CanAnyFunctionType inputSubstType , AbstractionPattern outputOrigType , CanAnyFunctionType outputSubstType)",65, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"buildThunkSignature( SILGenFunction & SGF , bool inheritGenericSig , OpenedArchetypeType * openedExistential , GenericEnvironment * & genericEnv , SubstitutionMap & contextSubs , SubstitutionMap & interfaceSubs , ArchetypeType * & newArchetype)",73, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::buildThunkType( CanSILFunctionType & sourceType , CanSILFunctionType & expectedType , CanType & inputSubstType , CanType & outputSubstType , GenericEnvironment * & genericEnv , SubstitutionMap & interfaceSubs , bool withoutActuallyEscaping)",151, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"createThunk( SILGenFunction & SGF , SILLocation loc , ManagedValue fn , AbstractionPattern inputOrigType , CanAnyFunctionType inputSubstType , AbstractionPattern outputOrigType , CanAnyFunctionType outputSubstType , const TypeLowering & expectedTL)",68, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"buildWithoutActuallyEscapingThunkType( SILGenFunction & SGF , CanSILFunctionType & noEscapingType , CanSILFunctionType & escapingType , GenericEnvironment * & genericEnv , SubstitutionMap & interfaceSubs)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"buildWithoutActuallyEscapingThunkBody( SILGenFunction & SGF)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::createWithoutActuallyEscapingClosure( SILLocation loc , ManagedValue noEscapingFunctionValue , SILType escapingTy)",53, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"Transform::transformFunction( ManagedValue fn , AbstractionPattern inputOrigType , CanAnyFunctionType inputSubstType , AbstractionPattern outputOrigType , CanAnyFunctionType outputSubstType , const TypeLowering & expectedTL)",69, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitOrigToSubstValue( SILLocation loc , ManagedValue v , AbstractionPattern origType , CanType substType , SGFContext ctxt)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitOrigToSubstValue( SILLocation loc , RValue && v , AbstractionPattern origType , CanType substType , SGFContext ctxt)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitSubstToOrigValue( SILLocation loc , ManagedValue v , AbstractionPattern origType , CanType substType , SGFContext ctxt)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitSubstToOrigValue( SILLocation loc , RValue && v , AbstractionPattern origType , CanType substType , SGFContext ctxt)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitMaterializedRValueAsOrig( Expr * expr , AbstractionPattern origType)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitRValueAsOrig( Expr * expr , AbstractionPattern origPattern , const TypeLowering & origTL , SGFContext ctxt)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitTransformedValue( SILLocation loc , ManagedValue v , CanType inputType , CanType outputType , SGFContext ctxt)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitTransformedValue( SILLocation loc , ManagedValue v , AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , SGFContext ctxt)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitTransformedValue( SILLocation loc , RValue && v , AbstractionPattern inputOrigType , CanType inputSubstType , AbstractionPattern outputOrigType , CanType outputSubstType , SGFContext ctxt)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitVTableThunk( SILDeclRef derived , SILFunction * implFn , AbstractionPattern inputOrigType , CanAnyFunctionType inputSubstType , CanAnyFunctionType outputSubstType)",76, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"getWitnessDispatchKind( SILDeclRef witness , bool isSelfConformance)",51, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"getWitnessFunctionType( SILGenModule & SGM , SILDeclRef witness , WitnessDispatchKind witnessKind)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"getSelfTypeAndConformanceForWitness( SILDeclRef witness , SubstitutionMap subs)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"getWitnessFunctionRef( SILGenFunction & SGF , SILDeclRef witness , CanSILFunctionType witnessFTy , WitnessDispatchKind witnessKind , SubstitutionMap witnessSubs , SmallVectorImpl<ManagedValue> & witnessParams , SILLocation loc)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"emitOpenExistentialInSelfConformance( SILGenFunction & SGF , SILLocation loc , SILDeclRef witness , SubstitutionMap subs , ManagedValue value , SILParameterInfo destParameter)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitProtocolWitness( AbstractionPattern reqtOrigTy , CanAnyFunctionType reqtSubstTy , SILDeclRef requirement , SubstitutionMap reqtSubs , SILDeclRef witness , SubstitutionMap witnessSubs , IsFreeFunctionWitness_t isFree , bool isSelfConformance)",155, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"translateParametersForCanonicalFunctionThunk( SILGenFunction & SGF , SILLocation loc , ArrayRef<ManagedValue> origParamValues , ArrayRef<SILParameterInfo> newParamInfos , SmallVectorImpl<ManagedValue> & newParams)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"buildCanonicalFunctionThunkBody( SILGenFunction & SGF , SILLocation loc , CanSILFunctionType nonCanonicalTy , CanSILFunctionType canonicalTy)",56, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPoly.cpp,"SILGenFunction::emitCanonicalFunctionThunk( SILLocation loc , ManagedValue fn , CanSILFunctionType nonCanonicalTy , CanSILFunctionType canonicalTy)",44, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"isTrivialShuffle( TupleShuffleExpr * shuffle)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"decomposeArguments( SILGenFunction & SGF , Expr * arg , unsigned expectedCount)",37, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinRetain( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinRelease( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinAutorelease( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinLoadOrTake( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C , IsTake_t isTake , bool isStrict , bool isInvariant)",25, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinLoad( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinLoadRaw( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinLoadInvariant( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinTake( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinDestroy( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinAssign( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinInit( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , Expr * tuple , SGFContext C)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinFixLifetime( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitCastToReferenceType( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C , SILType objPointerType)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinUnsafeCastToNativeObject( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinCastToNativeObject( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitCastFromReferenceType( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",25, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinCastFromNativeObject( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinBridgeToRawPointer( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinBridgeFromRawPointer( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinAddressOf( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , Expr * argument , SGFContext C)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinAddressOfBorrow( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , Expr * argument , SGFContext C)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinGepRaw( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinGep( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinGetTailAddr( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinBeginUnpairedModifyAccess( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinPerformInstantaneousReadAccess( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinEndUnpairedAccess( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinCondFail( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinCastReference( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",62, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinReinterpretCast( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",59, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinCastToBridgeObject( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",34, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinCastReferenceFromBridgeObject( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",25, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinCastBitPatternFromBridgeObject( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinClassifyBridgeObject( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinValueToBridgeObject( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinIsUnique( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinIsUnique_native( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinBindMemory( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinAllocWithTailElems( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinProjectTailElems( SILGenFunction & SGF , SILLocation loc , SubstitutionMap subs , ArrayRef<ManagedValue> args , SGFContext C)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"emitBuiltinTypeTrait( SILGenFunction & SGF , SILLocation loc , SubstitutionMap substitutions , ArrayRef<ManagedValue> args , SGFContext C)",43, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuiltin.cpp,"SpecializedEmitter::forDecl( SILGenModule & SGM , SILDeclRef function)",60, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitInjectOptional( SILLocation loc , const TypeLowering & optTL , SGFContext ctxt , llvm :: function_ref<ManagedValue(SGFContext)> generator)",38, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitInjectOptionalValueInto( SILLocation loc , ArgumentSource && value , SILValue dest , const TypeLowering & optTL)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitInjectOptionalNothingInto( SILLocation loc , SILValue dest , const TypeLowering & optTL)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::getOptionalNoneValue( SILLocation loc , const TypeLowering & optTL)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::getOptionalSomeValue( SILLocation loc , ManagedValue value , const TypeLowering & optTL)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitSourceLocationArgs( SourceLoc sourceLoc , SILLocation emitLoc)",43, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitPreconditionOptionalHasValue( SILLocation loc , ManagedValue optional , bool isImplicitUnwrap)",78, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitDoesOptionalHaveValue( SILLocation loc , SILValue addrOrValue)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitCheckedGetOptionalValueFrom( SILLocation loc , ManagedValue src , bool isImplicitUnwrap , const TypeLowering & optTL , SGFContext C)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitUncheckedGetOptionalValueFrom( SILLocation loc , ManagedValue addrOrValue , const TypeLowering & optTL , SGFContext C)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitOptionalSome( SILLocation loc , SILType optTy , ValueProducerRef produceValue , SGFContext C)",61, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitOptionalToOptional( SILLocation loc , ManagedValue input , SILType resultTy , ValueTransformRef transformValue , SGFContext C)",93, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::OpaqueValueRAII::~OpaqueValueRAII()",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitPointerToPointer( SILLocation loc , ManagedValue input , CanType inputType , CanType outputType , SGFContext C)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ExistentialInitialization::ExistentialInitialization( SILGenFunction & SGF , SILValue existential , CanType concreteFormalType , ArrayRef<ProtocolConformanceRef> conformances , ExistentialRepresentation repr)",20, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ExistentialInitialization::getAddressForInPlaceInitialization( SILGenFunction & SGF , SILLocation loc)",42, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ExistentialInitialization::isInPlaceInitializationOfGlobal() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ExistentialInitialization::finishInitialization( SILGenFunction & SGF)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitExistentialErasure( SILLocation loc , CanType concreteFormalType , const TypeLowering & concreteTL , const TypeLowering & existentialTL , ArrayRef<ProtocolConformanceRef> conformances , SGFContext C , llvm :: function_ref<ManagedValue(SGFContext)> F , bool allowEmbeddedNSError)",263, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitClassMetatypeToObject( SILLocation loc , ManagedValue v , SILType resultTy)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitExistentialMetatypeToObject( SILLocation loc , ManagedValue v , SILType resultTy)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitProtocolMetatypeToObject( SILLocation loc , CanType inputTy , SILType resultTy)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitOpenExistential( SILLocation loc , ManagedValue existentialValue , ArchetypeType * openedArchetype , SILType loweredOpenedType , AccessKind accessKind)",94, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::manageOpaqueValue( OpaqueValueState & entry , SILLocation loc , SGFContext C)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitConvertedRValue( Expr * E , const Conversion & conversion , SGFContext C)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"SILGenFunction::emitConvertedRValue( SILLocation loc , const Conversion & conversion , SGFContext C , ValueProducerRef produceValue)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ConvertingInitialization::finishEmission( SILGenFunction & SGF , SILLocation loc , ManagedValue formalResult)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ConvertingInitialization::tryPeephole( SILGenFunction & SGF , SILLocation loc , ManagedValue origValue , Conversion innerConversion)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ConvertingInitialization::tryPeephole( SILGenFunction & SGF , Expr * E , Conversion innerConversion)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ConvertingInitialization::tryPeephole( SILGenFunction & SGF , SILLocation loc , Conversion innerConversion , ValueProducerRef produceValue)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ConvertingInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue formalValue , bool isInit)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"ConvertingInitialization::emitWithAdjustedConversion( SILGenFunction & SGF , SILLocation loc , Conversion adjustedConversion , ValueProducerRef produceValue)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"Conversion::emit( SILGenFunction & SGF , SILLocation loc , ManagedValue value , SGFContext C) const",49, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"Conversion::adjustForInitialOptionalConversions( CanType newSourceType) const",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"Conversion::adjustForInitialForceValue() const",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"Conversion::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"printReabstraction( const Conversion & conversion , llvm :: raw_ostream & out , StringRef name)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"printBridging( const Conversion & conversion , llvm :: raw_ostream & out , StringRef name)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"Conversion::print( llvm :: raw_ostream & out) const",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"areRelatedTypesForBridgingPeephole( CanType sourceType , CanType resultType)",41, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"isValueToAnyConversion( CanType from , CanType to)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"isMatchedAnyToAnyObjectConversion( CanType from , CanType to)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"Lowering::canPeepholeConversions( SILGenFunction & SGF , const Conversion & outerConversion , const Conversion & innerConversion)",118, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConvert.cpp,"Lowering::emitPeepholedConversions( SILGenFunction & SGF , SILLocation loc , const Conversion & outerConversion , const Conversion & innerConversion , ConversionPeepholeHint hint , SGFContext C , ValueProducerRef produceOrigValue)",61, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDestructor.cpp,"SILGenFunction::emitDestroyingDestructor( DestructorDecl * dd)",80, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDestructor.cpp,"SILGenFunction::emitDeallocatingDestructor( DestructorDecl * dd)",57, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDestructor.cpp,"SILGenFunction::emitIVarDestroyer( SILDeclRef ivarDestroyer)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDestructor.cpp,"SILGenFunction::emitClassMemberDestruction( ManagedValue selfValue , ClassDecl * cd , CleanupLocation cleanupLoc)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDestructor.cpp,"SILGenFunction::emitObjCDestructor( SILDeclRef dtor)",72, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::SILGenFunction( SILGenModule & SGM , SILFunction & F , DeclContext * DC)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::~SILGenFunction()",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenModule::getMagicFunctionName( DeclContext * dc)",39, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenModule::getMagicFunctionName( SILDeclRef ref)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::emitSiblingMethodRef( SILLocation loc , SILValue selfValue , SILDeclRef methodConstant , SubstitutionMap subMap)",26, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::emitCaptures( SILLocation loc , AnyFunctionRef closure , CaptureEmission purpose , SmallVectorImpl<ManagedValue> & capturedArgs)",145, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::emitClosureValue( SILLocation loc , SILDeclRef constant , CanType expectedType , SubstitutionMap subs)",83, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::emitFunction( FuncDecl * fd)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::emitClosure( AbstractClosureExpr * ace)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::emitArtificialTopLevel( ClassDecl * mainClass)",178, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::emitGeneratorFunction( SILDeclRef function , Expr * value)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"getLocation( ASTNode Node)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::emitProfilerIncrement( ASTNode N)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::loadProfilerCount( ASTNode Node) const",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenFunction.cpp,"SILGenFunction::getPGOParent( ASTNode Node) const",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenModule::mapSubstitutionsForWitnessOverride( AbstractFunctionDecl * original , AbstractFunctionDecl * overridden , SubstitutionMap subs)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"getIndirectApplyAbstractionPattern( SILGenFunction & SGF , CanFunctionType fnType)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"getPartialApplyOfDynamicMethodFormalType( SILGenModule & SGM , SILDeclRef member , ConcreteDeclRef memberRef)",35, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"getDynamicMethodLoweredType( SILModule & M , SILDeclRef constant , CanAnyFunctionType substMemberTy)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"canUseStaticDispatch( SILGenFunction & SGF , SILDeclRef constant)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"getOriginalSelfValue( SILValue selfValue)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"borrowedCastToOriginalSelfType( SILGenFunction & SGF , SILLocation loc , ManagedValue self)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"convertOwnershipConventionGivenParamInfo( SILGenFunction & SGF , SILParameterInfo param , ManagedValue value , SILLocation loc , bool isForCoroutine)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"convertOwnershipConventionsGivenParamInfos( SILGenFunction & SGF , ArrayRef<SILParameterInfo> params , ArrayRef<ManagedValue> values , SILLocation loc , bool isForCoroutine , llvm :: SmallVectorImpl<ManagedValue> & outVar)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getSubstFormalInterfaceType( CanAnyFunctionType substFormalType , SubstitutionMap subs)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::Callee( ManagedValue indirectValue , AbstractionPattern origFormalType , CanFunctionType substFormalType , SILLocation l)",10, 5, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::Callee( SILGenFunction & SGF , SILDeclRef standaloneFunction , AbstractionPattern origFormalType , CanAnyFunctionType substFormalType , SubstitutionMap subs , SILLocation l , bool callDynamicallyReplaceableImpl = false)",11, 39, 8, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::Callee( Kind methodKind , SILGenFunction & SGF , SILDeclRef methodName , AbstractionPattern origFormalType , CanAnyFunctionType substFormalType , SubstitutionMap subs , SILLocation l)",8, 39, 8, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::forIndirect( ManagedValue indirectValue , AbstractionPattern origFormalType , CanFunctionType substFormalType , SILLocation l)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::forDirect( SILGenFunction & SGF , SILDeclRef c , SubstitutionMap subs , SILLocation l , bool callPreviousDynamicReplaceableImpl = false)",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::forEnumElement( SILGenFunction & SGF , SILDeclRef c , SubstitutionMap subs , SILLocation l)",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::forClassMethod( SILGenFunction & SGF , SILDeclRef c , SubstitutionMap subs , SILLocation l)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::forSuperMethod( SILGenFunction & SGF , SILDeclRef c , SubstitutionMap subs , SILLocation l)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::forWitnessMethod( SILGenFunction & SGF , CanType protocolSelfType , SILDeclRef c , SubstitutionMap subs , SILLocation l)",23, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::forDynamic( SILGenFunction & SGF , SILDeclRef c , SubstitutionMap constantSubs , CanAnyFunctionType substFormalType , SubstitutionMap subs , SILLocation l)",25, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::setCaptures( SmallVectorImpl<ManagedValue> && captures)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getCaptures() const",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::hasCaptures() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getOrigFormalType() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getSubstFormalType() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getParameterListCount() const",17, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::requiresSelfValueForDispatch() const",19, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getEnumElementDecl()",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::createCalleeTypeInfo( SILGenFunction & SGF , Optional<SILDeclRef> constant , SILType formalFnType) const &",18, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getCurriedConstant( bool isCurried) const",19, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getFnValue( SILGenFunction & SGF , bool isCurried , Optional<ManagedValue> borrowedSelf) const &",111, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getTypeInfo( SILGenFunction & SGF , bool isCurried) const &",49, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getSubstitutions() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getMethodName() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"Callee::getSpecializedEmitter( SILGenModule & SGM) const",16, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"isCallToReplacedInDynamicReplacement( SILGenFunction & SGF , AbstractFunctionDecl * afd , bool & isObjCReplacementSelfCall)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"isConstructorWithGeneratedAllocatorThunk( ValueDecl * vd)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::SILGenApply( SILGenFunction & SGF)",3, 5, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::setCallee( Callee && c)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::setSideEffect( Expr * sideEffectExpr)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::setSelfParam( ArgumentSource && theSelfParam , Expr * theSelfApplyExpr)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::decompose( Expr * e)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitExpr( Expr * e)",12, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitApplyExpr( ApplyExpr * e)",12, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::metatypeRepPair( MetatypeRepresentation a , MetatypeRepresentation b)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::convertToMetatypeForAllocRefDynamic( ManagedValue selfMeta , SILLocation loc , bool usesObjCAllocation)",50, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::allocateObject( ManagedValue selfMeta , SILLocation loc , bool usesObjCAllocation)",13, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::processProtocolMethod( DeclRefExpr * e , AbstractFunctionDecl * afd , ProtocolDecl * proto)",42, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::isClassMethod( DeclRefExpr * e , AbstractFunctionDecl * afd)",23, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::processClassMethod( DeclRefExpr * e , AbstractFunctionDecl * afd)",63, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitDeclRefExpr( DeclRefExpr * e)",70, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitAbstractClosureExpr( AbstractClosureExpr * e)",30, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitOtherConstructorDeclRefExpr( OtherConstructorDeclRefExpr * e)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitDotSyntaxBaseIgnoredExpr( DotSyntaxBaseIgnoredExpr * e)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitFunctionConversionExpr( FunctionConversionExpr * e)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitCovariantFunctionConversionExpr( CovariantFunctionConversionExpr * e)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitImplicitlyUnwrappedFunctionConversionExpr( ImplicitlyUnwrappedFunctionConversionExpr * e)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitIdentityExpr( IdentityExpr * e)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::applySuper( ApplyExpr * apply)",67, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::emitCorrespondingSelfValue( ManagedValue selfValue , Expr * selfArg)",65, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::applyInitDelegation( ApplyExpr * expr)",131, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::getCallee()",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::ignoreParensAndImpConversions( Expr * expr)",28, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::visitForceValueExpr( ForceValueExpr * e)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenApply::emitForcedDynamicMemberRef( ForceValueExpr * e)",59, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"emitStringLiteral( SILGenFunction & SGF , Expr * E , StringRef Str , SGFContext C , StringLiteralExpr :: Encoding encoding)",78, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"emitRawApply( SILGenFunction & SGF , SILLocation loc , ManagedValue fn , SubstitutionMap subs , ArrayRef<ManagedValue> args , CanSILFunctionType substFnType , ApplyOptions options , ArrayRef<SILValue> indirectResultAddrs , SmallVectorImpl<SILValue> & rawResults)",88, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"hasUnownedInnerPointerResult( CanSILFunctionType fnType)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"getFlattenedValueCount( AbstractionPattern origType , CanType substType)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"getFlattenedValueCount( AbstractionPattern origType , CanType substType , ImportAsMemberStatus foreignSelf)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"claimNextParamClause( CanAnyFunctionType & type)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"OriginalArgument::OriginalArgument( Expr * expr , bool indirect)",2, 43, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"OriginalArgument::getExpr() const",1, 67, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"OriginalArgument::isIndirect() const",1, 65, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::ClaimedParamsRef( ArrayRef<SILParameterInfo> params , unsigned skip)",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::hasSkip() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::ClaimedParamsRef()",1, 57, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::ClaimedParamsRef( ArrayRef<SILParameterInfo> params)",3, 5, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::iterator( const SILParameterInfo * Base , unsigned I , unsigned SkipParamIndex)",4, 7, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator ++()",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator ++( int)",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator --()",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator --( int)",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator *() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator ->() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator ==( iterator other) const",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator !=( iterator other) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator +( std :: ptrdiff_t distance) const",7, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator -( std :: ptrdiff_t distance) const",7, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::operator -( iterator other) const",8, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::goBackward( unsigned distance) const",7, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::iterator::goForward( unsigned distance) const",7, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::begin() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::end() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::size() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::empty() const",1, 45, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::front() const",1, 54, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::slice( unsigned start) const",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ClaimedParamsRef::slice( unsigned start , unsigned count) const",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::LValueStorage::LValueStorage( LValue && lv , SILLocation loc)",1, 81, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::RValueStorage::RValueStorage( ManagedValue rv)",1, 47, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::DefaultArgumentStorage::DefaultArgumentStorage( SILLocation loc , ConcreteDeclRef defaultArgsOwner , unsigned destIndex , CanType resultType , AbstractionPattern origResultType , ClaimedParamsRef paramsToEmit , SILFunctionTypeRepresentation functionRepresentation)",12, 7, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::getValueMemberIndexForKind( KindTy kind)",17, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::LV()",1, 65, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::LV() const",1, 77, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::RV()",1, 65, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::RV() const",1, 77, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::getExtraMemberIndexForKind( KindTy kind)",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::DelayedArgument( KindTy kind , LValue && lv , SILLocation loc)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::DelayedArgument( KindTy kind , ManagedValue rv , OriginalArgument original)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::DelayedArgument( SILGenFunction :: PointerAccessInfo pointerInfo , LValue && lv , SILLocation loc , OriginalArgument original)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::DelayedArgument( SILGenFunction :: ArrayAccessInfo arrayInfo , LValue && lv , SILLocation loc , OriginalArgument original)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::DelayedArgument( KindTy kind , SILGenFunction :: ArrayAccessInfo arrayInfo , ManagedValue rv , OriginalArgument original)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::DelayedArgument( LValue && lv , SILLocation loc , AbstractionPattern origResultType , ClaimedParamsRef params)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::DelayedArgument( SILLocation loc , ConcreteDeclRef defaultArgsOwner , unsigned destIndex , CanType resultType , AbstractionPattern origResultType , ClaimedParamsRef params , SILFunctionTypeRepresentation functionTypeRepresentation)",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::DelayedArgument( DelayedArgument && other)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::operator =( DelayedArgument && other)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::~DelayedArgument()",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::isSimpleInOut() const",1, 55, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::getInOutLocation() const",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::emit( SILGenFunction & SGF , SmallVectorImpl<ManagedValue> & args , size_t & argIndex)",24, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::emitInOut( SILGenFunction & SGF)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::emitBorrowIndirect( SILGenFunction & SGF)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::emitBorrowDirect( SILGenFunction & SGF)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::emitAddress( SILGenFunction & SGF , AccessKind accessKind)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::finishOriginalArgument( SILGenFunction & SGF)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::finishOriginalExpr( SILGenFunction & SGF , Expr * expr)",82, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::emitBindOptionals( SILGenFunction & SGF , ManagedValue optValue , Expr * expr)",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::finishOptionalEvaluation( SILGenFunction & SGF , OptionalEvaluationExpr * eval)",36, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"emitDelayedArguments( SILGenFunction & SGF , MutableArrayRef<DelayedArgument> delayedArgs , MutableArrayRef<SmallVector<ManagedValue,4>> args)",62, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"findStorageReferenceExprForBorrow( Expr * e)",47, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgumentSource::findStorageReferenceExprForBorrow() &&",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgSpecialDest::ArgSpecialDest()",1, 44, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgSpecialDest::ArgSpecialDest( VarargsInfo & info , unsigned index , bool isExpansion)",2, 67, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgSpecialDest::ArgSpecialDest( ArgSpecialDest && other)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgSpecialDest::operator =( ArgSpecialDest && other)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgSpecialDest::~ArgSpecialDest()",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgSpecialDest::isValid() const",1, 57, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgSpecialDest::fill( SILGenFunction & SGF , ArgumentSource && arg , AbstractionPattern _unused_origType , SILType loweredSubstParamType)",31, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgSpecialDest::deactivate( SILGenFunction & SGF)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::ArgEmitter( SILGenFunction & SGF , SILFunctionTypeRepresentation Rep , bool isYield , bool isForCoroutine , ClaimedParamsRef paramInfos , SmallVectorImpl<ManagedValue> & args , SmallVectorImpl<DelayedArgument> & delayedArgs , const Optional<ForeignErrorConvention> & foreignError , ImportAsMemberStatus foreignSelf , Optional<ArgSpecialDestArray> specialDests = None)",13, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitSingleArg( ArgumentSource && arg , AbstractionPattern origParamType)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitTopLevel( ArgumentSource && arg , AbstractionPattern origFormalType)",40, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitPreparedArgs( PreparedArguments && args , AbstractionPattern origFormalType)",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emit( ArgumentSource && arg , AbstractionPattern origParamType)",84, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::claimNextParameters( unsigned count)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::claimNextSpecialDest()",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitExpanded( ArgumentSource && arg , AbstractionPattern origParamType)",55, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitIndirect( ArgumentSource && arg , SILType loweredSubstArgType , AbstractionPattern origParamType , SILParameterInfo param)",38, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitIndirectInto( ArgumentSource && arg , AbstractionPattern origType , SILType loweredSubstParamType , ArgSpecialDest & dest)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitInOut( ArgumentSource && arg , SILType loweredSubstArgType , SILType loweredSubstParamType , AbstractionPattern origType , CanType substType)",28, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::tryEmitBorrowed( ArgumentSource && arg , SILType loweredSubstArgType , SILType loweredSubstParamType , AbstractionPattern origParamType , ClaimedParamsRef paramsSlice)",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitBorrowed( Expr * arg , SILType loweredSubstArgType , SILType loweredSubstParamType , AbstractionPattern origParamType , ClaimedParamsRef claimedParams)",24, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitExpandedBorrowed( Expr * arg , AbstractionPattern origParamType)",12, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitDirect( ArgumentSource && arg , SILType loweredSubstArgType , AbstractionPattern origParamType , SILParameterInfo param)",61, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::maybeEmitDelayed( Expr * expr , OriginalArgument original)",76, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitDelayedConversion( InOutToPointerExpr * pointerExpr , OriginalArgument original)",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitDelayedConversion( ArrayToPointerExpr * pointerExpr , OriginalArgument original)",29, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitDelayedConversion( StringToPointerExpr * pointerExpr , OriginalArgument original)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitDelayedConversion( FunctionConversionExpr * funcConv , OriginalArgument original)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::lookThroughBindOptionals( Expr * expr)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitConvertedArgument( ArgumentSource && arg , Conversion conversion , SGFContext C)",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::maybeEmitForeignErrorArgument()",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::getRValueEmissionContexts( SILType loweredArgType , SILParameterInfo param)",17, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::emitDefaultArgument( SILGenFunction & SGF , const DefaultArgumentStorage & info , SmallVectorImpl<ManagedValue> & args , size_t & argIndex)",33, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"emitBorrowedLValueRecursive( SILGenFunction & SGF , SILLocation loc , ManagedValue value , AbstractionPattern origParamType , ClaimedParamsRef & params , MutableArrayRef<ManagedValue> args , size_t & argIndex)",41, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DelayedArgument::emitBorrowedLValue( SILGenFunction & SGF , BorrowedLValueStorage & info , SmallVectorImpl<ManagedValue> & args , size_t & argIndex)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ElementExtent::ElementExtent()",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"TupleShuffleArgEmitter::TupleShuffleArgEmitter( TupleShuffleExpr * e , ArrayRef<TupleTypeElt> innerElts , AbstractionPattern origParamType)",27, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"TupleShuffleArgEmitter::getOutputOrigElementType( unsigned index)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"TupleShuffleArgEmitter::getVarargExpansion( unsigned innerIndex)",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"TupleShuffleArgEmitter::constructInnerTupleTypeInfo( ArgEmitter & parent)",107, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"TupleShuffleArgEmitter::flattenPatternFromInnerExtendIntoInnerParams( ArgEmitter & parent)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"TupleShuffleArgEmitter::splitInnerArgumentsCorrectly( ArgEmitter & parent)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"TupleShuffleArgEmitter::emitDefaultArgsAndFinalize( ArgEmitter & parent)",81, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"TupleShuffleArgEmitter::emit( ArgEmitter & parent)",40, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgEmitter::emitShuffle( TupleShuffleExpr * E , AbstractionPattern origParamType)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DeallocateUninitializedBox::DeallocateUninitializedBox( SILValue box)",1, 57, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DeallocateUninitializedBox::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DeallocateUninitializedBox::dump( SILGenFunction & SGF) const",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::enterDeallocBoxCleanup( SILValue box)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"BoxInitialization::BoxInitialization( SILValue box , SILValue addr , CleanupHandle uninitCleanup , CleanupHandle initCleanup)",6, 34, 6, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"BoxInitialization::finishInitialization( SILGenFunction & SGF)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"BoxInitialization::getAddressForInPlaceInitialization( SILGenFunction & SGF , SILLocation loc)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"BoxInitialization::isInPlaceInitializationOfGlobal() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"BoxInitialization::getManagedBox() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ParamLowering::ParamLowering( CanSILFunctionType fnType , SILGenFunction & SGF)",3, 37, 6, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ParamLowering::claimParams( AbstractionPattern origFormalType , ArrayRef<AnyFunctionType::Param> substParams , const Optional<ForeignErrorConvention> & foreignError , ImportAsMemberStatus foreignSelf)",48, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ParamLowering::claimCaptureParams( ArrayRef<ManagedValue> captures)",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ParamLowering::~ParamLowering()",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::CallSite( ApplyExpr * apply)",13, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::CallSite( SILLocation loc , PreparedArguments && args , CanType resultType , bool throws)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::CallSite( SILLocation loc , ArgumentSource && value , bool isScalar , CanType resultType , bool throws)",13, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::CallSite( SILLocation loc , ArgumentSource && value , bool isScalar , CanAnyFunctionType fnType)",4, 58, 17, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::CallSite( SILLocation loc , PreparedArguments && args , CanAnyFunctionType fnType)",2, 80, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::getParams() const",1, 82, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::getSubstResultType() const",1, 65, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::throws() const",1, 41, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::emit( SILGenFunction & SGF , AbstractionPattern origFormalType , CanSILFunctionType substFnType , ParamLowering & lowering , SmallVectorImpl<ManagedValue> & args , SmallVectorImpl<DelayedArgument> & delayedArgs , const Optional<ForeignErrorConvention> & foreignError , ImportAsMemberStatus foreignSelf) &&",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallSite::forward() &&",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::CallEmission( SILGenFunction & SGF , Callee && callee , FormalEvaluationScope && writebackScope)",5, 61, 8, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::addCallSite( CallSite && site)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::addCallSite( T && ... args)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::isEnumElementConstructor()",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::isPartiallyAppliedSuperMethod()",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::apply( SGFContext C = SGFContext())",31, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::FirstLevelApplicationResult::FirstLevelApplicationResult( FirstLevelApplicationResult && other)",3, 44, 8, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::FirstLevelApplicationResult::operator =( FirstLevelApplicationResult && other)",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::FirstLevelApplicationResult::isComplete() const",1, 79, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"getUncurriedOrigFormalResultType( AbstractionPattern origFormalType , unsigned numUncurriedSites)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"EndCoroutineApply::EndCoroutineApply( SILValue applyToken)",1, 69, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"EndCoroutineApply::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"EndCoroutineApply::dump( SILGenFunction & SGF) const",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::applyCoroutine( SmallVectorImpl<ManagedValue> & yields)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitBeginApply( SILLocation loc , ManagedValue fn , SubstitutionMap subs , ArrayRef<ManagedValue> args , CanSILFunctionType substFnType , ApplyOptions options , SmallVectorImpl<ManagedValue> & yields)",38, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::applyFirstLevelCallee( SGFContext C)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::applyNormalCall( SGFContext C)",65, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::applyEnumElementConstructor( SGFContext C)",50, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::applyPartiallyAppliedSuperMethod( SGFContext C)",67, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::applySpecializedEmitter( SpecializedEmitter & specializedEmitter , SGFContext C)",82, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::emitArgumentsForNormalApply( CanFunctionType & formalType , AbstractionPattern & origFormalType , CanSILFunctionType substFnType , const Optional<ForeignErrorConvention> & foreignError , ImportAsMemberStatus foreignSelf , SmallVectorImpl<ManagedValue> & uncurriedArgs , Optional<SILLocation> & uncurriedLoc , CanFunctionType & formalApplyType)",82, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::applyRemainingCallSites( RValue && result , AbstractionPattern origFormalType , ImportAsMemberStatus foreignSelf , SGFContext C , bool formalTypeThrows)",56, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"CallEmission::forApplyExpr( SILGenFunction & SGF , Expr * e)",34, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenModule::shouldEmitSelfAsRValue( FuncDecl * fn , CanType selfType)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenModule::isNonMutatingSelfIndirect( SILDeclRef methodRef)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitApply( ResultPlanPtr && resultPlan , ArgumentScope && argScope , SILLocation loc , ManagedValue fn , SubstitutionMap subs , ArrayRef<ManagedValue> args , const CalleeTypeInfo & calleeTypeInfo , ApplyOptions options , SGFContext evalContext)",171, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitMonomorphicApply( SILLocation loc , ManagedValue fn , ArrayRef<ManagedValue> args , CanType foreignResultType , CanType nativeResultType , ApplyOptions options , Optional<SILFunctionTypeRepresentation> overrideRep , const Optional<ForeignErrorConvention> & foreignError , SGFContext evalContext)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitApplyWithRethrow( SILLocation loc , SILValue fn , SILType substFnType , SubstitutionMap subs , ArrayRef<SILValue> args)",33, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitBeginApplyWithRethrow( SILLocation loc , SILValue fn , SILType substFnType , SubstitutionMap subs , ArrayRef<SILValue> args , SmallVectorImpl<SILValue> & yields)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitEndApplyWithRethrow( SILLocation loc , SILValue token)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitYield( SILLocation loc , MutableArrayRef<ArgumentSource> valueSources , ArrayRef<AbstractionPattern> origTypes , JumpDest unwindDest)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitRawYield( SILLocation loc , ArrayRef<ManagedValue> yieldArgs , JumpDest unwindDest , bool isUniqueYield)",33, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitInjectEnum( SILLocation loc , ArgumentSource payload , SILType enumTy , EnumElementDecl * element , SGFContext C)",96, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitApplyExpr( Expr * e , SGFContext c)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitApplyOfLibraryIntrinsic( SILLocation loc , FuncDecl * fn , SubstitutionMap subMap , ArrayRef<ManagedValue> args , SGFContext ctx)",38, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"getMagicFunctionString( SILGenFunction & SGF)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitApplyAllocatingInitializer( SILLocation loc , ConcreteDeclRef init , RValue && args , Type overriddenSelfType , SGFContext C)",107, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitLiteral( LiteralExpr * literal , SGFContext C)",76, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitUninitializedArrayAllocation( Type ArrayTy , SILValue Length , SILLocation Loc)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitUninitializedArrayDeallocation( SILLocation loc , SILValue array)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DeallocateUninitializedArray::DeallocateUninitializedArray( SILValue array)",2, 24, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DeallocateUninitializedArray::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"DeallocateUninitializedArray::dump( SILGenFunction & SGF) const",7, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::enterDeallocateUninitializedArrayCleanup( SILValue array)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"getBaseAccessorFunctionRef( SILGenFunction & SGF , SILLocation loc , SILDeclRef constant , ArgumentSource & selfValue , bool isSuper , bool isDirectUse , SubstitutionMap subs , bool isOnSelfParameter)",67, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"emitSpecializedAccessorFunctionRef( SILGenFunction & SGF , SILLocation loc , SILDeclRef constant , SubstitutionMap substitutions , ArgumentSource & selfValue , bool isSuper , bool isDirectUse , bool isOnSelfParameter)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"AccessorBaseArgPreparer::shouldLoadBaseAddress() const",34, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"AccessorBaseArgPreparer::prepareAccessorAddressBaseArg()",40, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"AccessorBaseArgPreparer::prepareAccessorObjectBaseArg()",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"AccessorBaseArgPreparer::AccessorBaseArgPreparer( SILGenFunction & SGF , SILLocation loc , ManagedValue base , CanType baseFormalType , SILDeclRef accessor)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"AccessorBaseArgPreparer::prepare()",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::prepareAccessorBaseArg( SILLocation loc , ManagedValue base , CanType baseFormalType , SILDeclRef accessor)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"collectFakeIndexParameters( SILGenModule & SGM , CanType substType , SmallVectorImpl<SILParameterInfo> & params)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::prepareSubscriptIndices( SubscriptDecl * subscript , SubstitutionMap subs , AccessStrategy strategy , Expr * indexExpr)",60, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenModule::getAccessorDeclRef( AccessorDecl * accessor)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitGetAccessor( SILLocation loc , SILDeclRef get , SubstitutionMap substitutions , ArgumentSource && selfValue , bool isSuper , bool isDirectUse , PreparedArguments && subscriptIndices , SGFContext c , bool isOnSelfParameter)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitSetAccessor( SILLocation loc , SILDeclRef set , SubstitutionMap substitutions , ArgumentSource && selfValue , bool isSuper , bool isDirectUse , PreparedArguments && subscriptIndices , ArgumentSource && setValue , bool isOnSelfParameter)",45, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitAddressorAccessor( SILLocation loc , SILDeclRef addressor , SubstitutionMap substitutions , ArgumentSource && selfValue , bool isSuper , bool isDirectUse , PreparedArguments && subscriptIndices , SILType addressType , bool isOnSelfParameter)",54, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitCoroutineAccessor( SILLocation loc , SILDeclRef accessor , SubstitutionMap substitutions , ArgumentSource && selfValue , bool isSuper , bool isDirectUse , PreparedArguments && subscriptIndices , SmallVectorImpl<ManagedValue> & yields , bool isOnSelfParameter)",37, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"emitDynamicPartialApply( SILGenFunction & SGF , SILLocation loc , SILValue method , SILValue self , CanAnyFunctionType foreignFormalType , CanAnyFunctionType nativeFormalType)",34, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitDynamicMemberRefExpr( DynamicMemberRefExpr * e , SGFContext c)",118, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"SILGenFunction::emitDynamicSubscriptExpr( DynamicSubscriptExpr * e , SGFContext c)",92, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgumentScope::popPreservingValue( ManagedValue mv)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenApply.cpp,"ArgumentScope::popPreservingValue( RValue && rv)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/Condition.cpp,"Condition::enter( SILGenFunction & SGF , SILBasicBlock * destBB)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/Condition.cpp,"getContinuationLoc( SILBasicBlock & BB , SILLocation Fallback)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/Condition.cpp,"Condition::exit( SILGenFunction & SGF , SILBasicBlock * destBB , ArrayRef<SILValue> Args)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/Condition.cpp,"Condition::complete( SILGenFunction & SGF)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/Condition.cpp,"ConditionalValue::ConditionalValue( SILGenFunction & SGF , SGFContext C , SILLocation loc , const TypeLowering & valueTL)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/Condition.cpp,"ConditionalValue::enterBranch( SILBasicBlock * bb)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/Condition.cpp,"ConditionalValue::exitBranch( RValue && condResult)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/Condition.cpp,"ConditionalValue::complete()",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/Scope.cpp,"Scope::popPreservingValue( ManagedValue mv)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/Scope.cpp,"lifetimeExtendAddressOnlyRValueSubValues( SILGenFunction & SGF , SILLocation loc , llvm :: SmallVectorImpl<SILValue> & values , llvm :: SmallVectorImpl<SILValue> & lifetimeExtendingBoxes)",25, 2, 0, 0
repos/cpp/swift/lib/SILGen/Scope.cpp,"Scope::popPreservingValue( RValue && rv)",50, 2, 0, 0
repos/cpp/swift/lib/SILGen/Scope.cpp,"Scope::popImpl()",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/Scope.cpp,"Scope::verify()",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"diagnose( ASTContext & Context , SourceLoc loc , Diag<T...> diag , U && ... args)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::createBasicBlockAfter( SILBasicBlock * afterBB)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::createBasicBlockBefore( SILBasicBlock * beforeBB)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::createBasicBlock()",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::createBasicBlock( FunctionSection section)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::createBasicBlockAndBranch( SILLocation loc , SILBasicBlock * destBB)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::eraseBasicBlock( SILBasicBlock * block)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::mergeCleanupBlocks()",53, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::StmtEmitter( SILGenFunction & sgf)",1, 51, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::getASTContext()",1, 64, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::createBasicBlock()",1, 73, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::createJumpDest( Stmt * cleanupLoc , Args ... args)",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::emitStmt( Stmt * S)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"getOrEraseBlock( SILGenFunction & SGF , JumpDest & dest)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"emitOrDeleteBlock( SILGenFunction & SGF , JumpDest & dest , SILLocation BranchLoc)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::emitCondition( Expr * E , bool invertValue , ArrayRef<SILType> contArgs , ProfileCounter NumTrueTaken , ProfileCounter NumFalseTaken)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::emitCondition( SILValue V , SILLocation Loc , bool invertValue , ArrayRef<SILType> contArgs , ProfileCounter NumTrueTaken , ProfileCounter NumFalseTaken)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitBraceStmt( BraceStmt * S)",81, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StoreResultInitialization::StoreResultInitialization( SILValue & storage , SmallVectorImpl<CleanupHandle> & cleanups)",3, 48, 8, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StoreResultInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit)",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"prepareIndirectResultInit( SILGenFunction & SGF , CanType resultType , ArrayRef<SILResultInfo> & allResults , MutableArrayRef<SILValue> & directResults , ArrayRef<SILArgument*> & indirectResultAddrs , SmallVectorImpl<CleanupHandle> & cleanups)",48, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"prepareIndirectResultInit( SILGenFunction & SGF , CanType formalResultType , SmallVectorImpl<SILValue> & directResultsBuffer , SmallVectorImpl<CleanupHandle> & cleanups)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::emitReturnExpr( SILLocation branchLoc , Expr * ret)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitReturnStmt( ReturnStmt * S)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitThrowStmt( ThrowStmt * S)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitYieldStmt( YieldStmt * S)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitPoundAssertStmt( PoundAssertStmt * stmt)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"DeferEscapeCheckerCleanup::DeferEscapeCheckerCleanup( SourceLoc deferLoc)",1, 74, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"DeferEscapeCheckerCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"DeferEscapeCheckerCleanup::dump( SILGenFunction &) const",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"DeferCleanup::DeferCleanup( SourceLoc deferLoc , Expr * call)",2, 42, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"DeferCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",9, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"DeferCleanup::dump( SILGenFunction &) const",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitDeferStmt( DeferStmt * S)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitIfStmt( IfStmt * S)",65, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitGuardStmt( GuardStmt * S)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitWhileStmt( WhileStmt * S)",49, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitDoStmt( DoStmt * S)",26, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitDoCatchStmt( DoCatchStmt * S)",75, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitCatchStmt( CatchStmt * S)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitRepeatWhileStmt( RepeatWhileStmt * S)",40, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitForEachStmt( ForEachStmt * S)",131, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitBreakStmt( BreakStmt * S)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::emitBreakOutOf( SILLocation loc , Stmt * target)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitContinueStmt( ContinueStmt * S)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitSwitchStmt( SwitchStmt * S)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitCaseStmt( CaseStmt * S)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitFallthroughStmt( FallthroughStmt * S)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"StmtEmitter::visitFailStmt( FailStmt * S)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::getTryApplyErrorDest( SILLocation loc , SILResultInfo exnResult , bool suppressErrorPath)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenStmt.cpp,"SILGenFunction::emitThrow( SILLocation loc , ManagedValue exnMV , bool emitWillThrow)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValueWritebackCleanup::LValueWritebackCleanup()",1, 40, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValueWritebackCleanup::emit( SILGenFunction & SGF , CleanupLocation loc , ForUnwind_t forUnwind)",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValueWritebackCleanup::dump( SILGenFunction &) const",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValueWritebackCleanup::getEvaluation( SILGenFunction & SGF)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"pushWriteback( SILGenFunction & SGF , SILLocation loc , std :: unique_ptr<LogicalPathComponent> && comp , ManagedValue base , MaterializedLValue materialized)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"ExclusiveBorrowFormalAccess::diagnoseConflict( const ExclusiveBorrowFormalAccess & rhs , SILGenFunction & SGF) const",99, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getSubstFormalRValueType( Expr * expr)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getAbstractedTypeData( SILGenModule & SGM , SGFAccessKind accessKind , AbstractionPattern origFormalType , CanType substFormalType)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getLogicalStorageTypeData( SILGenModule & SGM , SGFAccessKind accessKind , CanType substFormalType)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getPhysicalStorageTypeData( SILGenModule & SGM , SGFAccessKind accessKind , AbstractStorageDecl * storage , CanType substFormalType)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"shouldUseUnsafeEnforcement( VarDecl * var)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::getStaticEnforcement( VarDecl * var)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::getDynamicEnforcement( VarDecl * var)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::getUnknownEnforcement( VarDecl * var)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LLVM_LIBRARY_VISIBILITYSILGenLValue::SILGenLValue( SILGenFunction & SGF)",1, 50, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LogicalPathComponent::projectForRead( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFAccessKind accessKind) &&",41, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LogicalPathComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LogicalPathComponent::writeback( SILGenFunction & SGF , SILLocation loc , ManagedValue base , MaterializedLValue materialized , bool isFinal)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"InOutConversionScope::InOutConversionScope( SILGenFunction & SGF)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"InOutConversionScope::~InOutConversionScope()",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"PathComponent::_anchor()",1, 33, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"PhysicalPathComponent::_anchor()",1, 41, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"PathComponent::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getValueTypeData( SGFAccessKind accessKind , CanType formalType , SILValue value)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getValueTypeData( SILGenFunction & SGF , SGFAccessKind accessKind , Expr * e)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getAddressOfOptionalValue( SILGenFunction & SGF , SILLocation loc , ManagedValue optAddr , const LValueTypeData & valueTypeData)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"WritebackPseudoComponent::WritebackPseudoComponent( const LValueTypeData & typeData)",2, 63, 6, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"WritebackPseudoComponent::clone( SILGenFunction & SGF , SILLocation l) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"WritebackPseudoComponent::get( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFContext c) &&",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"WritebackPseudoComponent::set( SILGenFunction & SGF , SILLocation loc , ArgumentSource && value , ManagedValue base) &&",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"WritebackPseudoComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"WritebackPseudoComponent::getAccessedStorage() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"EndAccessPseudoComponent::EndAccessPseudoComponent( const LValueTypeData & typeData)",2, 46, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"EndAccessPseudoComponent::writeback( SILGenFunction & SGF , SILLocation loc , ManagedValue base , MaterializedLValue materialized , bool isFinal)",9, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"EndAccessPseudoComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"enterAccessScope( SILGenFunction & SGF , SILLocation loc , SILValue addr , LValueTypeData typeData , SGFAccessKind accessKind , SILAccessEnforcement enforcement)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"enterAccessScope( SILGenFunction & SGF , SILLocation loc , ManagedValue addr , LValueTypeData typeData , SGFAccessKind accessKind , SILAccessEnforcement enforcement)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"UnenforcedAccess::beginAccess( SILGenFunction & SGF , SILLocation loc , SILValue address , SILAccessKind kind)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"UnenforcedAccess::endAccess( SILGenFunction & SGF)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"UnenforcedAccess::emitEndAccess( SILGenFunction & SGF)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"UnenforcedFormalAccess::emitEndAccess( SILGenFunction & SGF)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"UnenforcedFormalAccess::finishImpl( SILGenFunction & SGF)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"UnenforcedAccessCleanup::UnenforcedAccessCleanup()",1, 41, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"UnenforcedAccessCleanup::emit( SILGenFunction & SGF , CleanupLocation loc , ForUnwind_t forUnwind)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"UnenforcedAccessCleanup::dump( SILGenFunction &) const",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"UnenforcedFormalAccess::enter( SILGenFunction & SGF , SILLocation loc , SILValue address , SILAccessKind kind)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"copyBorrowedYieldsIntoTemporary( SILGenFunction & SGF , SILLocation loc , ArrayRef<ManagedValue> & yields , AbstractionPattern origFormalType , CanType substFormalType , Initialization * init)",26, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"RefElementComponent::RefElementComponent( VarDecl * field , LValueOptions options , SILType substFieldType , LValueTypeData typeData)",5, 50, 8, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"RefElementComponent::isLoadingPure() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"RefElementComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",24, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"RefElementComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"TupleElementComponent::TupleElementComponent( unsigned elementIndex , LValueTypeData typeData)",3, 38, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"TupleElementComponent::isLoadingPure() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"TupleElementComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",13, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"TupleElementComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"StructElementComponent::StructElementComponent( VarDecl * field , SILType substFieldType , LValueTypeData typeData)",4, 56, 6, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"StructElementComponent::isLoadingPure() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"StructElementComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",12, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"StructElementComponent::dump( raw_ostream & OS , unsigned indent) const",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"ForceOptionalObjectComponent::ForceOptionalObjectComponent( LValueTypeData typeData , bool isImplicitUnwrap)",4, 46, 6, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"ForceOptionalObjectComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"ForceOptionalObjectComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenOpaqueExistentialComponent::OpenOpaqueExistentialComponent( CanArchetypeType openedArchetype , LValueTypeData typeData)",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenOpaqueExistentialComponent::isLoadingPure() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenOpaqueExistentialComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",37, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenOpaqueExistentialComponent::dump( raw_ostream & OS , unsigned indent) const",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenNonOpaqueExistentialComponent::OpenNonOpaqueExistentialComponent( CanArchetypeType openedArchetype , LValueTypeData typeData)",4, 44, 6, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenNonOpaqueExistentialComponent::isLoadingPure() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenNonOpaqueExistentialComponent::getAccessedStorage() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenNonOpaqueExistentialComponent::get( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFContext c) &&",29, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenNonOpaqueExistentialComponent::set( SILGenFunction & SGF , SILLocation loc , ArgumentSource && value , ManagedValue base) &&",29, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenNonOpaqueExistentialComponent::clone( SILGenFunction & SGF , SILLocation loc) const",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OpenNonOpaqueExistentialComponent::dump( raw_ostream & OS , unsigned indent) const",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"ValueComponent::ValueComponent( ManagedValue value , Optional<SILAccessEnforcement> enforcement , LValueTypeData typeData , bool isRValue = false)",10, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"ValueComponent::isLoadingPure() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"ValueComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",13, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"ValueComponent::isRValue() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"ValueComponent::dump( raw_ostream & OS , unsigned indent) const",11, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"isReadNoneFunction( const Expr * e)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"areCertainlyEqualIndices( const Expr * e1 , const Expr * e2)",66, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getBaseOptions( LValueOptions options , AccessStrategy strategy)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessComponent::prepareAccessorArgs( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SILDeclRef accessor) &&",18, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessComponent::AccessComponent( PathComponent :: KindTy kind , AbstractStorageDecl * storage , CanType baseFormalType , LValueTypeData typeData , Expr * indexExprForDiagnostics , PreparedArguments && indices)",12, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessComponent::AccessComponent( const AccessComponent & copied , SILGenFunction & SGF , SILLocation loc)",8, 49, 8, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessComponent::doesAccessorMutateSelf( SILGenFunction & SGF , SILDeclRef accessor) const",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessComponent::printBase( raw_ostream & OS , unsigned indent , StringRef name) const",8, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessorBasedComponent::AccessorBasedComponent( PathComponent :: KindTy kind , AbstractStorageDecl * decl , SILDeclRef accessor , bool isSuper , bool isDirectAccessorUse , SubstitutionMap substitutions , CanType baseFormalType , LValueTypeData typeData , Expr * indexExprForDiagnostics , PreparedArguments && indices , bool isOnSelfParameter = false)",13, 80, 10, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessorBasedComponent::AccessorBasedComponent( const AccessorBasedComponent & copied , SILGenFunction & SGF , SILLocation loc)",9, 47, 8, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessorBasedComponent::getAccessorDecl() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::GetterSetterComponent( AbstractStorageDecl * decl , SILDeclRef accessor , bool isSuper , bool isDirectAccessorUse , SubstitutionMap substitutions , CanType baseFormalType , LValueTypeData typeData , Expr * subscriptIndexExpr , PreparedArguments && indices , bool isOnSelfParameter)",16, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::GetterSetterComponent( const GetterSetterComponent & copied , SILGenFunction & SGF , SILLocation loc)",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::emitAssignWithSetter( SILGenFunction & SGF , SILLocation loc , LValue && dest , ArgumentSource && value)",22, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::emitAssignWithSetter( SILGenFunction & SGF , SILLocation loc , LValue && baseLV , CanType baseFormalType , bool isSuper , SILDeclRef setter , bool isDirectAccessorUse , SubstitutionMap subs , PreparedArguments && indices , ArgumentSource && value , bool isSelfParameter)",24, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::set( SILGenFunction & SGF , SILLocation loc , ArgumentSource && value , ManagedValue base) &&",15, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::get( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFContext c) &&",14, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::clone( SILGenFunction & SGF , SILLocation loc) const",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"GetterSetterComponent::getAccessedStorage() const",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MaterializeToTemporaryComponent::MaterializeToTemporaryComponent( AbstractStorageDecl * storage , bool isSuper , SubstitutionMap subs , LValueOptions options , AccessStrategy readStrategy , AccessStrategy writeStrategy , CanType baseFormalType , LValueTypeData typeData , Expr * indexExprForDiagnostics , PreparedArguments && indices , bool isOnSelfParameter)",16, 11, 8, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MaterializeToTemporaryComponent::clone( SILGenFunction & SGF , SILLocation loc) const",13, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MaterializeToTemporaryComponent::get( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFContext C) &&",7, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MaterializeToTemporaryComponent::set( SILGenFunction & SGF , SILLocation loc , ArgumentSource && value , ManagedValue base) &&",7, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MaterializeToTemporaryComponent::getAccessedStorage() const",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MaterializeToTemporaryComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MaterializeToTemporaryComponent::prepareLValue( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFAccessKind accessKind , AccessStrategy strategy) &&",32, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AddressorComponent::AddressorComponent( AbstractStorageDecl * decl , SILDeclRef accessor , bool isSuper , bool isDirectAccessorUse , SubstitutionMap substitutions , CanType baseFormalType , LValueTypeData typeData , SILType substFieldType , Expr * indexExprForDiagnostics , PreparedArguments && indices , bool isOnSelfParameter)",16, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AddressorComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",23, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AddressorComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"EndApplyPseudoComponent::EndApplyPseudoComponent( const LValueTypeData & typeData , CleanupHandle endApplyHandle , AbstractStorageDecl * storage , bool isSuper , PreparedArguments && peekedIndices , Expr * indexExprForDiagnostics)",11, 60, 8, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"EndApplyPseudoComponent::writeback( SILGenFunction & SGF , SILLocation loc , ManagedValue base , MaterializedLValue materialized , bool isFinal)",11, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"EndApplyPseudoComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"EndApplyPseudoComponent::getAccessedStorage() const",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"pushEndApplyWriteback( SILGenFunction & SGF , SILLocation loc , CleanupHandle endApplyHandle , LValueTypeData typeData , ManagedValue base = ManagedValue() , AbstractStorageDecl * storage = nullptr , bool isSuper = false , PreparedArguments && indices = PreparedArguments() , Expr * indexExprForDiagnostics = nullptr)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"CoroutineAccessorComponent::CoroutineAccessorComponent( AbstractStorageDecl * decl , SILDeclRef accessor , bool isSuper , bool isDirectAccessorUse , SubstitutionMap substitutions , CanType baseFormalType , LValueTypeData typeData , Expr * indexExprForDiagnostics , PreparedArguments && indices , bool isOnSelfParameter)",11, 81, 14, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"CoroutineAccessorComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",52, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"CoroutineAccessorComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"makeBaseConsumableMaterializedRValue( SILGenFunction & SGF , SILLocation loc , ManagedValue base)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"emitUpcastToKeyPath( SILGenFunction & SGF , SILLocation loc , KeyPathTypeKind typeKind , ManagedValue keyPath)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LogicalKeyPathApplicationComponent::LogicalKeyPathApplicationComponent( LValueTypeData typeData , KeyPathTypeKind typeKind , ManagedValue keyPath , Type baseFormalType)",10, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LogicalKeyPathApplicationComponent::get( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFContext C) &&",38, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LogicalKeyPathApplicationComponent::set( SILGenFunction & SGF , SILLocation loc , ArgumentSource && value , ManagedValue base) &&",31, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LogicalKeyPathApplicationComponent::getAccessedStorage() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LogicalKeyPathApplicationComponent::clone( SILGenFunction & SGF , SILLocation l) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LogicalKeyPathApplicationComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"PhysicalKeyPathApplicationComponent::PhysicalKeyPathApplicationComponent( LValueTypeData typeData , KeyPathTypeKind typeKind , ManagedValue keyPath)",10, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"PhysicalKeyPathApplicationComponent::project( SILGenFunction & SGF , SILLocation loc , ManagedValue base) &&",43, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"PhysicalKeyPathApplicationComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"TranslationPathComponent::get( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFContext c) &&",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"TranslationPathComponent::set( SILGenFunction & SGF , SILLocation loc , ArgumentSource && valueSource , ManagedValue base) &&",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OrigToSubstComponent::OrigToSubstComponent( const LValueTypeData & typeData , AbstractionPattern origType)",5, 7, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OrigToSubstComponent::isLoadingPure() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OrigToSubstComponent::untranslate( SILGenFunction & SGF , SILLocation loc , RValue && rv , SGFContext c) &&",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OrigToSubstComponent::translate( SILGenFunction & SGF , SILLocation loc , RValue && rv , SGFContext c) &&",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OrigToSubstComponent::clone( SILGenFunction & SGF , SILLocation loc) const",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OrigToSubstComponent::dump( raw_ostream & OS , unsigned indent) const",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SubstToOrigComponent::SubstToOrigComponent( const LValueTypeData & typeData)",3, 7, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SubstToOrigComponent::isLoadingPure() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SubstToOrigComponent::untranslate( SILGenFunction & SGF , SILLocation loc , RValue && rv , SGFContext c) &&",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SubstToOrigComponent::translate( SILGenFunction & SGF , SILLocation loc , RValue && rv , SGFContext c) &&",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SubstToOrigComponent::clone( SILGenFunction & SGF , SILLocation loc) const",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SubstToOrigComponent::dump( raw_ostream & OS , unsigned indent) const",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OwnershipComponent::OwnershipComponent( LValueTypeData typeData)",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OwnershipComponent::isLoadingPure() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OwnershipComponent::getAccessedStorage() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OwnershipComponent::get( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFContext c) &&",16, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OwnershipComponent::set( SILGenFunction & SGF , SILLocation loc , ArgumentSource && valueSource , ManagedValue base) &&",9, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OwnershipComponent::clone( SILGenFunction & SGF , SILLocation loc) const",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"OwnershipComponent::dump( raw_ostream & OS , unsigned indent) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::forValue( SGFAccessKind accessKind , ManagedValue value , CanType substFormalType)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::forAddress( SGFAccessKind accessKind , ManagedValue address , Optional<SILAccessEnforcement> enforcement , AbstractionPattern origFormalType , CanType substFormalType)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::addMemberComponent( SILGenFunction & SGF , SILLocation loc , AbstractStorageDecl * storage , SubstitutionMap subs , LValueOptions options , bool isSuper , SGFAccessKind accessKind , AccessStrategy accessStrategy , CanType formalRValueType , PreparedArguments && indices , Expr * indexExprForDiagnostics)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::addOrigToSubstComponent( SILType loweredSubstType)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::addSubstToOrigComponent( AbstractionPattern origType , SILType loweredSubstType)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::dump( raw_ostream & OS , unsigned indent) const",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitLValue( Expr * e , SGFAccessKind accessKind , LValueOptions options)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"visitRecInOut( SILGenLValue & SGL , Expr * e , SGFAccessKind accessKind , LValueOptions options , AbstractionPattern orig)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"visitRecNonInOutBase( SILGenLValue & SGL , Expr * e , SGFAccessKind accessKind , LValueOptions options , AbstractionPattern orig)",75, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitRec( Expr * e , SGFAccessKind accessKind , LValueOptions options , AbstractionPattern orig)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitExpr( Expr * e , SGFAccessKind accessKind , LValueOptions options)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessEmitter::asImpl()",1, 57, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessEmitter::AccessEmitter( SILGenFunction & SGF , StorageType * storage , SGFAccessKind accessKind , CanType formalRValueType)",4, 34, 6, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessEmitter::emitUsingStrategy( AccessStrategy strategy)",24, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"AccessEmitter::emitUsingAccessor( AccessorKind accessorKind , bool isDirect)",33, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenModule::getNonMemberVarDeclSubstitutions( VarDecl * var)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"emitLValueForNonMemberVarDecl( SILGenFunction & SGF , SILLocation loc , VarDecl * var , CanType formalRValueType , SGFAccessKind accessKind , LValueOptions options , AccessSemantics semantics)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::addNonMemberVarComponent( SILGenFunction & SGF , SILLocation loc , VarDecl * var , Optional<SubstitutionMap> subs , LValueOptions options , SGFAccessKind accessKind , AccessStrategy strategy , CanType formalRValueType)",103, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::maybeEmitValueOfLocalVarDecl( VarDecl * var)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitAddressOfLocalVarDecl( SILLocation loc , VarDecl * var , CanType formalRValueType , SGFAccessKind accessKind)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitRValueForNonMemberVarDecl( SILLocation loc , VarDecl * var , CanType formalRValueType , AccessSemantics semantics , SGFContext C)",110, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitDiscardAssignmentExpr( DiscardAssignmentExpr * e , SGFAccessKind accessKind , LValueOptions options)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitDeclRefExpr( DeclRefExpr * e , SGFAccessKind accessKind , LValueOptions options)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitOpaqueValueExpr( OpaqueValueExpr * e , SGFAccessKind accessKind , LValueOptions options)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitDotSyntaxBaseIgnoredExpr( DotSyntaxBaseIgnoredExpr * e , SGFAccessKind accessKind , LValueOptions options)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getBaseAccessKindForAccessor( SILGenModule & SGM , AccessorDecl * accessor , CanType baseFormalType)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getBaseAccessKindForStorage( SGFAccessKind accessKind)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getBaseAccessKind( SILGenModule & SGM , AbstractStorageDecl * member , SGFAccessKind accessKind , AccessStrategy strategy , CanType baseFormalType)",47, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getBaseFormalType( Expr * baseExpr)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"isCallToSelfOfCurrentFunction( SILGenFunction & SGF , LookupExpr * e)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"isCurrentFunctionReadAccess( SILGenFunction & SGF)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitMemberRefExpr( MemberRefExpr * e , SGFAccessKind accessKind , LValueOptions options)",50, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MemberStorageAccessEmitter::MemberStorageAccessEmitter( SILGenFunction & SGF , SILLocation loc , StorageType * storage , SubstitutionMap subs , bool isSuper , SGFAccessKind accessKind , CanType formalRValueType , LValueOptions options , LValue & lv , Expr * indexExprForDiagnostics , PreparedArguments && indices , bool isSelf = false)",11, 39, 8, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MemberStorageAccessEmitter::emitUsingAddressor( SILDeclRef addressor , bool isDirect , LValueTypeData typeData)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MemberStorageAccessEmitter::emitUsingCoroutineAccessor( SILDeclRef accessor , bool isDirect , LValueTypeData typeData)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MemberStorageAccessEmitter::emitUsingGetterSetter( SILDeclRef accessor , bool isDirect , LValueTypeData typeData)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"MemberStorageAccessEmitter::emitUsingMaterialization( AccessStrategy readStrategy , AccessStrategy writeStrategy , LValueTypeData typeData)",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::addMemberVarComponent( SILGenFunction & SGF , SILLocation loc , VarDecl * var , SubstitutionMap subs , LValueOptions options , bool isSuper , SGFAccessKind accessKind , AccessStrategy strategy , CanType formalRValueType , bool isOnSelfParameter)",53, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitSubscriptExpr( SubscriptExpr * e , SGFAccessKind accessKind , LValueOptions options)",53, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitKeyPathApplicationExpr( KeyPathApplicationExpr * e , SGFAccessKind accessKind , LValueOptions options)",86, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::addMemberSubscriptComponent( SILGenFunction & SGF , SILLocation loc , SubscriptDecl * decl , SubstitutionMap subs , LValueOptions options , bool isSuper , SGFAccessKind accessKind , AccessStrategy strategy , CanType formalRValueType , PreparedArguments && indices , Expr * indexExprForDiagnostics , bool isOnSelfParameter)",25, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"LValue::isObviouslyNonConflicting( const LValue & other , SGFAccessKind selfAccess , SGFAccessKind otherAccess)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitTupleElementExpr( TupleElementExpr * e , SGFAccessKind accessKind , LValueOptions options)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitOpenExistentialExpr( OpenExistentialExpr * e , SGFAccessKind accessKind , LValueOptions options)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getOptionalObjectTypeData( SILGenFunction & SGF , SGFAccessKind accessKind , const LValueTypeData & baseTypeData)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitForceValueExpr( ForceValueExpr * e , SGFAccessKind accessKind , LValueOptions options)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitBindOptionalExpr( BindOptionalExpr * e , SGFAccessKind accessKind , LValueOptions options)",35, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenLValue::visitInOutExpr( InOutExpr * e , SGFAccessKind accessKind , LValueOptions options)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitPropertyLValue( SILLocation loc , ManagedValue base , CanType baseFormalType , VarDecl * ivar , LValueOptions options , SGFAccessKind accessKind , AccessSemantics semantics)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitLoad( SILLocation loc , SILValue addr , AbstractionPattern origFormalType , CanType substFormalType , const TypeLowering & rvalueTL , SGFContext C , IsTake_t isTake , bool isAddressGuaranteed)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitLoad( SILLocation loc , SILValue addr , const TypeLowering & rvalueTL , SGFContext C , IsTake_t isTake , bool isAddrGuaranteed)",43, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitFormalAccessLoad( SILLocation loc , SILValue addr , const TypeLowering & rvalueTL , SGFContext C , IsTake_t isTake , bool isAddressGuaranteed)",45, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"emitUnloweredStoreOfCopy( SILGenBuilder & B , SILLocation loc , SILValue value , SILValue addr , IsInitialization_t isInit)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitConversionToSemanticRValue( SILLocation loc , SILValue src , const TypeLowering & valueTL)",38, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitConversionToSemanticRValue( SILLocation loc , ManagedValue src , const TypeLowering & valueTL)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"emitLoadOfSemanticRValue( SILGenFunction & SGF , SILLocation loc , SILValue src , const TypeLowering & valueTL , IsTake_t isTake)",58, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"emitStoreOfSemanticRValue( SILGenFunction & SGF , SILLocation loc , SILValue value , SILValue dest , const TypeLowering & valueTL , IsInitialization_t isInit)",60, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitSemanticLoad( SILLocation loc , SILValue src , const TypeLowering & srcTL , const TypeLowering & rvalueTL , IsTake_t isTake)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitSemanticLoadInto( SILLocation loc , SILValue src , const TypeLowering & srcTL , SILValue dest , const TypeLowering & destTL , IsTake_t isTake , IsInitialization_t isInit)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitSemanticStore( SILLocation loc , SILValue rvalue , SILValue dest , const TypeLowering & destTL , IsInitialization_t isInit)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitConversionFromSemanticValue( SILLocation loc , SILValue semanticValue , SILType storageType)",46, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"emitTsanInoutAccess( SILGenFunction & SGF , SILLocation loc , ManagedValue address)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"drillIntoComponent( SILGenFunction & SGF , SILLocation loc , PathComponent && component , ManagedValue base , TSanKind tsanKind)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"drillToLastComponent( SILGenFunction & SGF , SILLocation loc , LValue && lv , ManagedValue & addr , TSanKind tsanKind = TSanKind :: None)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"emitBaseValueForAccessor( SILGenFunction & SGF , SILLocation loc , LValue && lvalue , CanType baseFormalType , SILDeclRef accessor)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitLoadOfLValue( SILLocation loc , LValue && src , SGFContext C , bool isBaseGuaranteed)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"getFormalStorageAbstractionPattern( SILGenFunction & SGF , AbstractStorageDecl * field)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitRValueForStorageLoad( SILLocation loc , ManagedValue base , CanType baseFormalType , bool isSuper , AbstractStorageDecl * storage , PreparedArguments && subscriptIndices , SubstitutionMap substitutions , AccessSemantics semantics , Type propTy , SGFContext C , bool isBaseGuaranteed)",137, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitAddressOfLValue( SILLocation loc , LValue && src , TSanKind tsanKind)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitBorrowedLValue( SILLocation loc , LValue && src , TSanKind tsanKind)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitOpenExistentialLValue( SILLocation loc , LValue && lv , CanArchetypeType openedArchetype , CanType formalRValueType , SGFAccessKind accessKind)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"trySetterPeephole( SILGenFunction & SGF , SILLocation loc , ArgumentSource && src , LValue && dest)",25, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitAssignToLValue( SILLocation loc , RValue && src , LValue && dest)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitAssignToLValue( SILLocation loc , ArgumentSource && src , LValue && dest)",54, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitCopyLValueInto( SILLocation loc , LValue && src , Initialization * dest)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenLValue.cpp,"SILGenFunction::emitAssignLValueToLValue( SILLocation loc , LValue && src , LValue && dest)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"InPlaceInitializationResultPlan::InPlaceInitializationResultPlan( Initialization * init)",1, 72, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"InPlaceInitializationResultPlan::finish( SILGenFunction & SGF , SILLocation loc , CanType substType , ArrayRef<ManagedValue> & directResults)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"InPlaceInitializationResultPlan::gatherIndirectResultAddrs( SILGenFunction & SGF , SILLocation loc , SmallVectorImpl<SILValue> & outList) const",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"IndirectOpenedSelfCleanup::IndirectOpenedSelfCleanup()",3, 5, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"IndirectOpenedSelfCleanup::setBox( SILValue b)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"IndirectOpenedSelfCleanup::emit( SILGenFunction & SGF , CleanupLocation loc , ForUnwind_t forUnwind)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"IndirectOpenedSelfCleanup::dump( SILGenFunction & SGF) const",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"mapTypeOutOfOpenedExistentialContext( CanType t)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"IndirectOpenedSelfResultPlan::IndirectOpenedSelfResultPlan( SILGenFunction & SGF , AbstractionPattern origType , CanType substType)",12, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"IndirectOpenedSelfResultPlan::gatherIndirectResultAddrs( SILGenFunction & SGF , SILLocation loc , SmallVectorImpl<SILValue> & outList) const",34, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"IndirectOpenedSelfResultPlan::finish( SILGenFunction & SGF , SILLocation loc , CanType substType , ArrayRef<ManagedValue> & directResults)",22, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ScalarResultPlan::ScalarResultPlan( std :: unique_ptr<TemporaryInitialization> && temporary , AbstractionPattern origType , Initialization * init , SILFunctionTypeRepresentation rep)",5, 20, 6, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ScalarResultPlan::finish( SILGenFunction & SGF , SILLocation loc , CanType substType , ArrayRef<ManagedValue> & directResults)",75, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ScalarResultPlan::gatherIndirectResultAddrs( SILGenFunction & SGF , SILLocation loc , SmallVectorImpl<SILValue> & outList) const",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"InitValueFromTemporaryResultPlan::InitValueFromTemporaryResultPlan( Initialization * init , ResultPlanPtr && subPlan , std :: unique_ptr<TemporaryInitialization> && temporary)",5, 43, 6, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"InitValueFromTemporaryResultPlan::finish( SILGenFunction & SGF , SILLocation loc , CanType substType , ArrayRef<ManagedValue> & directResults)",12, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"InitValueFromTemporaryResultPlan::gatherIndirectResultAddrs( SILGenFunction & SGF , SILLocation loc , SmallVectorImpl<SILValue> & outList) const",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"InitValueFromRValueResultPlan::InitValueFromRValueResultPlan( Initialization * init , ResultPlanPtr && subPlan)",2, 51, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"InitValueFromRValueResultPlan::finish( SILGenFunction & SGF , SILLocation loc , CanType substType , ArrayRef<ManagedValue> & directResults)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"InitValueFromRValueResultPlan::gatherIndirectResultAddrs( SILGenFunction & SGF , SILLocation loc , SmallVectorImpl<SILValue> & outList) const",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"TupleRValueResultPlan::TupleRValueResultPlan( ResultPlanBuilder & builder , AbstractionPattern origType , CanTupleType substType)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"TupleRValueResultPlan::finish( SILGenFunction & SGF , SILLocation loc , CanType substType , ArrayRef<ManagedValue> & directResults)",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"TupleRValueResultPlan::gatherIndirectResultAddrs( SILGenFunction & SGF , SILLocation loc , SmallVectorImpl<SILValue> & outList) const",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"TupleInitializationResultPlan::TupleInitializationResultPlan( ResultPlanBuilder & builder , Initialization * tupleInit , AbstractionPattern origType , CanTupleType substType)",19, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"TupleInitializationResultPlan::finish( SILGenFunction & SGF , SILLocation loc , CanType substType , ArrayRef<ManagedValue> & directResults)",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"TupleInitializationResultPlan::gatherIndirectResultAddrs( SILGenFunction & SGF , SILLocation loc , SmallVectorImpl<SILValue> & outList) const",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ForeignErrorInitializationPlan::ForeignErrorInitializationPlan( SILGenFunction & SGF , SILLocation loc , const CalleeTypeInfo & calleeTypeInfo , ResultPlanPtr && subPlan)",38, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ForeignErrorInitializationPlan::finish( SILGenFunction & SGF , SILLocation loc , CanType substType , ArrayRef<ManagedValue> & directResults)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ForeignErrorInitializationPlan::gatherIndirectResultAddrs( SILGenFunction & SGF , SILLocation loc , SmallVectorImpl<SILValue> & outList) const",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ForeignErrorInitializationPlan::emitForeignErrorArgument( SILGenFunction & SGF , SILLocation loc)",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ResultPlanBuilder::buildTopLevelResult( Initialization * init , SILLocation loc)",44, 2, 0, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ResultPlanBuilder::build( Initialization * init , AbstractionPattern origType , CanType substType)",47, 2, 0, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ResultPlanBuilder::buildForTuple( Initialization * init , AbstractionPattern origType , CanTupleType substType)",42, 2, 0, 0
repos/cpp/swift/lib/SILGen/ResultPlan.cpp,"ResultPlanBuilder::computeResultPlan( SILGenFunction & SGF , const CalleeTypeInfo & calleeTypeInfo , SILLocation loc , SGFContext evalContext)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"SILGenModule::getSILGlobalVariable( VarDecl * gDecl , ForDefinition_t forDef)",42, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"SILGenFunction::emitGlobalVariableRef( SILLocation loc , VarDecl * var)",37, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"GenGlobalAccessors::GenGlobalAccessors( SILGenModule & SGM , SILGlobalVariable * OnceToken , SILFunction * OnceFunc)",16, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"GenGlobalAccessors::visitParenPattern( ParenPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"GenGlobalAccessors::visitTypedPattern( TypedPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"GenGlobalAccessors::visitVarPattern( VarPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"GenGlobalAccessors::visitTuplePattern( TuplePattern * P)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"GenGlobalAccessors::visitAnyPattern( AnyPattern * P)",1, 41, 2, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"GenGlobalAccessors::visitNamedPattern( NamedPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"SILGenModule::emitGlobalInitialization( PatternBindingDecl * pd , unsigned pbdEntry)",51, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"SILGenFunction::emitLazyGlobalInitializer( PatternBindingDecl * binding , unsigned pbdEntry)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"emitOnceCall( SILGenFunction & SGF , VarDecl * global , SILGlobalVariable * onceToken , SILFunction * onceFunc)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenGlobalVariable.cpp,"SILGenFunction::emitGlobalAccessor( VarDecl * global , SILGlobalVariable * onceToken , SILFunction * onceFunc)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedRetain( SILLocation loc , SILValue v)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedRetain( SILLocation loc , SILValue v , const TypeLowering & lowering)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedLoadCopy( SILLocation loc , SILValue v)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedLoadCopy( SILLocation loc , SILValue v , const TypeLowering & lowering)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedLoadBorrow( SILLocation loc , SILValue v)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedLoadBorrow( SILLocation loc , SILValue v , const TypeLowering & lowering)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedStoreBorrow( SILLocation loc , SILValue v , SILValue addr)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedStoreBorrow( SILLocation loc , SILValue v , SILValue addr , const TypeLowering & lowering)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedBeginBorrow( SILLocation loc , SILValue v)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedBeginBorrow( SILLocation loc , SILValue v , const TypeLowering & lowering)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"EndBorrowCleanup::EndBorrowCleanup( SILValue borrowedValue)",2, 40, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"EndBorrowCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"EndBorrowCleanup::dump( SILGenFunction &) const",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"FormalEvaluationEndBorrowCleanup::FormalEvaluationEndBorrowCleanup()",1, 50, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"FormalEvaluationEndBorrowCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"FormalEvaluationEndBorrowCleanup::dump( SILGenFunction & SGF) const",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"FormalEvaluationEndBorrowCleanup::getEvaluation( SILGenFunction & SGF) const",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"FormalEvaluationEndBorrowCleanup::getOriginalValue( SILGenFunction & SGF) const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"FormalEvaluationEndBorrowCleanup::getBorrowedValue( SILGenFunction & SGF) const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitFormalEvaluationManagedBeginBorrow( SILLocation loc , SILValue v)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitFormalEvaluationManagedBeginBorrow( SILLocation loc , SILValue v , const TypeLowering & lowering)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitFormalEvaluationManagedBorrowedRValueWithCleanup( SILLocation loc , SILValue original , SILValue borrowed)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitFormalEvaluationManagedBorrowedRValueWithCleanup( SILLocation loc , SILValue original , SILValue borrowed , const TypeLowering & lowering)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedBorrowedArgumentWithCleanup( SILPhiArgument * arg)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedBorrowedRValueWithCleanup( SILValue original , SILValue borrowed)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedBorrowedRValueWithCleanup( SILValue original , SILValue borrowed , const TypeLowering & lowering)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedRValueWithCleanup( SILValue v)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedRValueWithCleanup( SILValue v , const TypeLowering & lowering)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedBufferWithCleanup( SILValue v)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitManagedBufferWithCleanup( SILValue v , const TypeLowering & lowering)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitExprInto( Expr * E , Initialization * I , Optional<SILLocation> L)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::RValueEmitter( SILGenFunction & SGF)",1, 53, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visit( Expr * E)",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitInOutExpr( InOutExpr * E , SGFContext C)",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitDiscardAssignmentExpr( DiscardAssignmentExpr * E , SGFContext C)",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"BridgingConversion::BridgingConversion()",1, 47, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"BridgingConversion::BridgingConversion( Expr * sub , Optional<Conversion::KindTy> kind , unsigned depth)",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"BridgingConversion::operator bool() const",1, 66, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"getBridgingConversion( Expr * E)",73, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"tryEmitAsBridgingConversion( SILGenFunction & SGF , Expr * E , bool isExplicit , SGFContext C)",64, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitApplyExpr( ApplyExpr * E , SGFContext C)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitEmptyTuple( SILLocation loc)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"DelegateInitSelfWritebackCleanup::DelegateInitSelfWritebackCleanup( SILLocation loc , SILValue lvalueAddress , SILValue value)",3, 64, 6, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"DelegateInitSelfWritebackCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",20, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"DelegateInitSelfWritebackCleanup::dump( SILGenFunction &) const",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::enterDelegateInitSelfWritebackCleanup( SILLocation loc , SILValue address , SILValue newValue)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitRValueForSelfInDelegationInit( SILLocation loc , CanType refType , SILValue addr , SGFContext C)",65, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitFormalEvaluationRValueForSelfInDelegationInit( SILLocation loc , CanType refType , SILValue addr , SGFContext C)",53, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitRValueForDecl( SILLocation loc , ConcreteDeclRef declRef , Type ncRefType , AccessSemantics semantics , SGFContext C)",54, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitDeclRefExpr( DeclRefExpr * E , SGFContext C)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitTypeExpr( TypeExpr * E , SGFContext C)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitSuperRefExpr( SuperRefExpr * E , SGFContext C)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitUnresolvedTypeConversionExpr( UnresolvedTypeConversionExpr * E , SGFContext C)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitOtherConstructorDeclRefExpr( OtherConstructorDeclRefExpr * E , SGFContext C)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitNilLiteralExpr( NilLiteralExpr * E , SGFContext C)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitIntegerLiteralExpr( IntegerLiteralExpr * E , SGFContext C)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitFloatLiteralExpr( FloatLiteralExpr * E , SGFContext C)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitBooleanLiteralExpr( BooleanLiteralExpr * E , SGFContext C)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitStringLiteralExpr( StringLiteralExpr * E , SGFContext C)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitLoadExpr( LoadExpr * E , SGFContext C)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitTemporaryAllocation( SILLocation loc , SILType ty)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::getBufferForExprResult( SILLocation loc , SILType ty , SGFContext C)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::manageBufferForExprResult( SILValue buffer , const TypeLowering & bufferTL , SGFContext C)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::ForceTryEmission::ForceTryEmission( SILGenFunction & SGF , ForceTryExpr * loc)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::ForceTryEmission::finish()",37, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitForceTryExpr( ForceTryExpr * E , SGFContext C)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitOptionalTryExpr( OptionalTryExpr * E , SGFContext C)",129, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"inExclusiveBorrowSelfSection( SILGenFunction :: SelfInitDelegationStates delegationState)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"visitDerivedToBaseExprOfSelf( SILGenFunction & SGF , DeclRefExpr * dre , DerivedToBaseExpr * E , SGFContext C)",38, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitDerivedToBaseExpr( DerivedToBaseExpr * E , SGFContext C)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitMetatypeConversionExpr( MetatypeConversionExpr * E , SGFContext C)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitCollectionConversion( SILLocation loc , FuncDecl * fn , CanType fromCollection , CanType toCollection , ManagedValue mv , SGFContext C)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitCollectionUpcastConversionExpr( CollectionUpcastConversionExpr * E , SGFContext C)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitConditionalBridgeFromObjCExpr( ConditionalBridgeFromObjCExpr * E , SGFContext C)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"tryPeepholeBridgingConversion( SILGenFunction & SGF , Conversion :: KindTy kind , ImplicitConversionExpr * E , SGFContext C)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitBridgeFromObjCExpr( BridgeFromObjCExpr * E , SGFContext C)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitBridgeToObjCExpr( BridgeToObjCExpr * E , SGFContext C)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitArchetypeToSuperExpr( ArchetypeToSuperExpr * E , SGFContext C)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"convertCFunctionSignature( SILGenFunction & SGF , FunctionConversionExpr * e , SILType loweredResultTy , llvm :: function_ref<ManagedValue()> fnEmitter)",35, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"emitCFunctionPointer( SILGenFunction & SGF , FunctionConversionExpr * conversionExpr)",47, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"convertFunctionRepresentation( SILGenFunction & SGF , SILLocation loc , ManagedValue source , CanAnyFunctionType sourceFormalTy , CanAnyFunctionType resultFormalTy)",75, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitFunctionConversionExpr( FunctionConversionExpr * e , SGFContext C)",98, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitCovariantFunctionConversionExpr( CovariantFunctionConversionExpr * e , SGFContext C)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitCovariantReturnConversionExpr( CovariantReturnConversionExpr * e , SGFContext C)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitImplicitlyUnwrappedFunctionConversionExpr( ImplicitlyUnwrappedFunctionConversionExpr * e , SGFContext C)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitErasureExpr( ErasureExpr * E , SGFContext C)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitAnyHashableErasure( SILLocation loc , ManagedValue value , Type type , ProtocolConformanceRef conformance , SGFContext C)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitAnyHashableErasureExpr( AnyHashableErasureExpr * E , SGFContext C)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::getManagedValue( SILLocation loc , ConsumableManagedValue value)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitForcedCheckedCastExpr( ForcedCheckedCastExpr * E , SGFContext C)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitConditionalCheckedCastExpr( ConditionalCheckedCastExpr * E , SGFContext C)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitIsExpr( IsExpr * E , SGFContext C)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitEnumIsCaseExpr( EnumIsCaseExpr * E , SGFContext C)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitCoerceExpr( CoerceExpr * E , SGFContext C)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"Lowering::emitBeginVarargs( SILGenFunction & SGF , SILLocation loc , CanType baseTy , CanType arrayTy , unsigned numElements , ArrayRef<unsigned> expansionIndices)",44, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"Lowering::emitEndVarargs( SILGenFunction & SGF , SILLocation loc , VarargsInfo && varargs)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitTupleExpr( TupleExpr * E , SGFContext C)",53, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"NominalTypeMemberRefRValueEmitter::NominalTypeMemberRefRValueEmitter( MemberRefExpr * Expr , SGFContext Context , NominalTypeDecl * Base)",4, 59, 6, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"NominalTypeMemberRefRValueEmitter::emit( SILGenFunction & SGF)",19, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"NominalTypeMemberRefRValueEmitter::emitStructDecl( SILGenFunction & SGF)",17, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"NominalTypeMemberRefRValueEmitter::emitClassDecl( SILGenFunction & SGF)",42, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitMemberRefExpr( MemberRefExpr * E , SGFContext C)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitDynamicMemberRefExpr( DynamicMemberRefExpr * E , SGFContext C)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitDotSyntaxBaseIgnoredExpr( DotSyntaxBaseIgnoredExpr * E , SGFContext C)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitSubscriptExpr( SubscriptExpr * E , SGFContext C)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitDynamicSubscriptExpr( DynamicSubscriptExpr * E , SGFContext C)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitTupleElementExpr( TupleElementExpr * E , SGFContext C)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitApplyOfDefaultArgGenerator( SILLocation loc , ConcreteDeclRef defaultArgsOwner , unsigned destIndex , CanType resultType , AbstractionPattern origResultType , SGFContext C)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitApplyOfStoredPropertyInitializer( SILLocation loc , const PatternBindingEntry & entry , SubstitutionMap subs , CanType resultType , AbstractionPattern origResultType , SGFContext C)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"emitTupleShuffleExprInto( RValueEmitter & emitter , TupleShuffleExpr * E , Initialization * outerTupleInit)",42, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitTupleShuffleExpr( TupleShuffleExpr * E , SGFContext C)",43, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"emitMetatypeOfDelegatingInitExclusivelyBorrowedSelf( SILGenFunction & SGF , SILLocation loc , DeclRefExpr * dre , SILType metaTy)",35, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitMetatypeOfValue( SILLocation loc , Expr * baseExpr)",37, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitDynamicTypeExpr( DynamicTypeExpr * E , SGFContext C)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitCaptureListExpr( CaptureListExpr * E , SGFContext C)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitAbstractClosureExpr( AbstractClosureExpr * e , SGFContext C)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitInterpolatedStringLiteralExpr( InterpolatedStringLiteralExpr * E , SGFContext C)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitObjectLiteralExpr( ObjectLiteralExpr * E , SGFContext C)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitEditorPlaceholderExpr( EditorPlaceholderExpr * E , SGFContext C)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitObjCSelectorExpr( ObjCSelectorExpr * e , SGFContext C)",39, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"emitKeyPathRValueBase( SILGenFunction & subSGF , AbstractStorageDecl * storage , SILLocation loc , SILValue paramArg , CanType & baseType , SubstitutionMap subs)",56, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"loadIndexValuesForKeyPathComponent( SILGenFunction & SGF , SILLocation loc , AbstractStorageDecl * storage , ArrayRef<IndexTypePair> indexes , SILValue pointer)",46, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"getRepresentativeAccessorForKeyPath( AbstractStorageDecl * storage)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"getOrCreateKeyPathGetter( SILGenModule & SGM , SILLocation loc , AbstractStorageDecl * property , SubstitutionMap subs , GenericEnvironment * genericEnv , ResilienceExpansion expansion , ArrayRef<IndexTypePair> indexes , CanType baseType , CanType propertyType)",129, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"getOrCreateKeyPathSetter( SILGenModule & SGM , SILLocation loc , AbstractStorageDecl * property , SubstitutionMap subs , GenericEnvironment * genericEnv , ResilienceExpansion expansion , ArrayRef<IndexTypePair> indexes , CanType baseType , CanType propertyType)",168, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"getOrCreateKeyPathEqualsAndHash( SILGenModule & SGM , SILLocation loc , GenericEnvironment * genericEnv , ResilienceExpansion expansion , ArrayRef<KeyPathPatternComponent::Index> indexes , SILFunction * & equals , SILFunction * & hash)",310, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"getIdForKeyPathComponentComputedProperty( SILGenModule & SGM , AbstractStorageDecl * storage , AccessStrategy strategy)",34, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"lowerKeyPathSubscriptIndexTypes( SILGenModule & SGM , SmallVectorImpl<IndexTypePair> & indexPatterns , SubscriptDecl * subscript , SubstitutionMap subscriptSubs , bool & needsGenericContext)",30, 3, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"mapConformanceOutOfContext( ProtocolConformance * conformance)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"mapConformanceOutOfContext( ProtocolConformanceRef conformance)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"lowerKeyPathSubscriptIndexPatterns( SmallVectorImpl<KeyPathPatternComponent::Index> & indexPatterns , ArrayRef<IndexTypePair> indexTypes , ArrayRef<ProtocolConformanceRef> indexHashables , unsigned & baseOperand)",16, 3, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenModule::emitKeyPathComponentForDecl( SILLocation loc , GenericEnvironment * genericEnv , ResilienceExpansion expansion , unsigned & baseOperand , bool & needsGenericContext , SubstitutionMap subs , AbstractStorageDecl * storage , ArrayRef<ProtocolConformanceRef> indexHashables , CanType baseTy , bool forPropertyDescriptor)",183, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitKeyPathExpr( KeyPathExpr * E , SGFContext C)",127, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitKeyPathApplicationExpr( KeyPathApplicationExpr * E , SGFContext C)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitMagicIdentifierLiteralExpr( MagicIdentifierLiteralExpr * E , SGFContext C)",54, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitCollectionExpr( CollectionExpr * E , SGFContext C)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"flattenOptional( SILGenFunction & SGF , SILLocation loc , ManagedValue optVal)",64, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"computeNewSelfForRebindSelfInConstructorExpr( SILGenFunction & SGF , RebindSelfInConstructorExpr * E)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitRebindSelfInConstructorExpr( RebindSelfInConstructorExpr * E , SGFContext C)",111, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"isVerbatimNullableTypeInC( SILModule & M , Type ty)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"mayLieAboutNonOptionalReturn( SILModule & M , ValueDecl * decl)",39, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"mayLieAboutNonOptionalReturn( SILModule & M , Expr * expr)",66, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitInjectIntoOptionalExpr( InjectIntoOptionalExpr * E , SGFContext C)",33, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitClassMetatypeToObjectExpr( ClassMetatypeToObjectExpr * E , SGFContext C)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitExistentialMetatypeToObjectExpr( ExistentialMetatypeToObjectExpr * E , SGFContext C)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitProtocolMetatypeToObjectExpr( ProtocolMetatypeToObjectExpr * E , SGFContext C)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitIfExpr( IfExpr * E , SGFContext C)",76, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitEmptyTupleRValue( SILLocation loc , SGFContext C)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"TupleLValueEmitter::TupleLValueEmitter( SILGenFunction & SGF , SGFAccessKind accessKind , SmallVectorImpl<Optional<LValue>> & results)",3, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"TupleLValueEmitter::visitTupleExpr( TupleExpr * E)",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"TupleLValueEmitter::visitDiscardAssignmentExpr( DiscardAssignmentExpr * E)",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"TupleLValueEmitter::visitExpr( Expr * E)",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"TupleLValueAssigner::getNextDest()",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"TupleLValueAssigner::TupleLValueAssigner( SILGenFunction & SGF , SILLocation assignLoc , SmallVectorImpl<Optional<LValue>> & destLVs)",3, 64, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"TupleLValueAssigner::emit( CanType destType , RValue && src)",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"TupleLValueAssigner::visitTupleType( CanTupleType destTupleType , RValue && srcTuple)",11, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"TupleLValueAssigner::visitType( CanType destType , RValue && src)",13, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"emitSimpleAssignment( SILGenFunction & SGF , SILLocation loc , Expr * dest , Expr * src)",63, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitAssignExpr( AssignExpr * E , SGFContext C)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitBindOptionalAddress( SILLocation loc , ManagedValue optAddress , unsigned depth)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitBindOptional( SILLocation loc , ManagedValue optValue , unsigned depth)",51, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitBindOptionalExpr( BindOptionalExpr * E , SGFContext C)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RestoreOptionalFailureDest::RestoreOptionalFailureDest( SILGenFunction & SGF , JumpDest && dest)",8, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RestoreOptionalFailureDest::~RestoreOptionalFailureDest()",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"emitOptimizedOptionalEvaluation( SILGenFunction & SGF , OptionalEvaluationExpr * E , ManagedValue & result , SGFContext ctx)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitOptionalEvaluationExpr( OptionalEvaluationExpr * E , SGFContext C)",25, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitOptionalEvaluation( SILLocation loc , Type optType , SmallVectorImpl<ManagedValue> & results , SGFContext C , llvm :: function_ref<void(SmallVectorImpl<ManagedValue>&,SGFContext primaryC)> generateNormalResults)",202, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitForceValueExpr( ForceValueExpr * E , SGFContext C)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::emitForceValue( ForceValueExpr * loc , Expr * E , unsigned numOptionalEvaluations , SGFContext C)",98, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitOpenExistentialExprImpl( OpenExistentialExpr * E , llvm :: function_ref<void(Expr*)> emitSubExpr)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitOpenExistentialExpr( OpenExistentialExpr * E , SGFContext C)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitMakeTemporarilyEscapableExpr( MakeTemporarilyEscapableExpr * E , SGFContext C)",49, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitOpaqueValueExpr( OpaqueValueExpr * E , SGFContext C)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::getPointerProtocol()",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"AutoreleasingWritebackComponent::AutoreleasingWritebackComponent( LValueTypeData typeData)",3, 5, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"AutoreleasingWritebackComponent::clone( SILGenFunction & SGF , SILLocation l) const",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"AutoreleasingWritebackComponent::isLoadingPure() const",1, 63, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"AutoreleasingWritebackComponent::set( SILGenFunction & SGF , SILLocation loc , ArgumentSource && value , ManagedValue base) &&",12, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"AutoreleasingWritebackComponent::get( SILGenFunction & SGF , SILLocation loc , ManagedValue base , SGFContext c) &&",17, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"AutoreleasingWritebackComponent::getAccessedStorage() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"AutoreleasingWritebackComponent::dump( raw_ostream & OS , unsigned indent) const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::getPointerAccessInfo( Type type)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitInOutToPointerExpr( InOutToPointerExpr * E , SGFContext C)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitLValueToPointer( SILLocation loc , LValue && lv , PointerAccessInfo pointerInfo)",59, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitArrayToPointerExpr( ArrayToPointerExpr * E , SGFContext C)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::getArrayAccessInfo( Type pointerType , Type arrayType)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitArrayToPointer( SILLocation loc , LValue && lv , ArrayAccessInfo accessInfo)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitArrayToPointer( SILLocation loc , ManagedValue array , ArrayAccessInfo accessInfo)",41, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitStringToPointerExpr( StringToPointerExpr * E , SGFContext C)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitStringToPointer( SILLocation loc , ManagedValue stringValue , Type pointerType)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitPointerToPointerExpr( PointerToPointerExpr * E , SGFContext C)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitForeignObjectConversionExpr( ForeignObjectConversionExpr * E , SGFContext C)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitUnevaluatedInstanceExpr( UnevaluatedInstanceExpr * E , SGFContext C)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"RValueEmitter::visitTapExpr( TapExpr * E , SGFContext C)",25, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitRValue( Expr * E , SGFContext C)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitPlusOneRValue( Expr * E , SGFContext C)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitPlusZeroRValue( Expr * E)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitIgnoredExpr( Expr * E)",84, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitRValueAsSingleValue( Expr * E , SGFContext C)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitUndefRValue( SILLocation loc , Type type)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitUndef( SILLocation loc , Type type)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenExpr.cpp,"SILGenFunction::emitUndef( SILLocation loc , SILType type)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"emitStoreToForeignErrorSlot( SILGenFunction & SGF , SILLocation loc , SILValue foreignErrorSlot , const BridgedErrorSource & errorSrc)",71, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"emitIntValue( SILGenFunction & SGF , SILLocation loc , SILType type , unsigned value)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"EpilogErrorSource::EpilogErrorSource( SILValue nativeError)",1, 74, 4, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"EpilogErrorSource::emitBridged( SILGenFunction & SGF , SILLocation loc , CanType bridgedErrorProto) const",11, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"EpilogErrorSource::emitRelease( SILGenFunction & SGF , SILLocation loc) const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"NilErrorSource::emitBridged( SILGenFunction & SGF , SILLocation loc , CanType bridgedError) const",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"NilErrorSource::emitRelease( SILGenFunction & SGF , SILLocation loc) const",2, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"SILGenFunction::emitBridgeErrorForForeignError( SILLocation loc , SILValue nativeError , SILType bridgedResultType , SILValue foreignErrorSlot , const ForeignErrorConvention & foreignError)",26, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"SILGenFunction::emitBridgeReturnValueForForeignError( SILLocation loc , SILValue result , CanType formalNativeType , CanType formalBridgedType , SILType bridgedType , SILValue foreignErrorSlot , const ForeignErrorConvention & foreignError)",52, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"SILGenFunction::emitForeignErrorBlock( SILLocation loc , SILBasicBlock * errorBB , Optional<ManagedValue> errorSlot)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"emitUnwrapIntegerResult( SILGenFunction & SGF , SILLocation loc , SILValue value)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"emitResultIsZeroErrorCheck( SILGenFunction & SGF , SILLocation loc , ManagedValue result , ManagedValue errorSlot , bool suppressErrorCheck , bool zeroIsError)",37, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"emitResultIsNilErrorCheck( SILGenFunction & SGF , SILLocation loc , ManagedValue origResult , ManagedValue errorSlot , bool suppressErrorCheck)",35, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"emitErrorIsNonNilErrorCheck( SILGenFunction & SGF , SILLocation loc , ManagedValue errorSlot , bool suppressErrorCheck)",29, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenForeignError.cpp,"SILGenFunction::emitForeignErrorCheck( SILLocation loc , SmallVectorImpl<ManagedValue> & results , ManagedValue errorSlot , bool suppressErrorCheck , const ForeignErrorConvention & foreignError)",39, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::getSILGenModule() const",1, 73, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::SILGenBuilder( SILGenFunction & SGF)",2, 37, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::SILGenBuilder( SILGenFunction & SGF , SILBasicBlock * insertBB)",2, 40, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::SILGenBuilder( SILGenFunction & SGF , SILBasicBlock * insertBB , SmallVectorImpl<SILInstruction*> * insertedInsts)",3, 55, 6, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::SILGenBuilder( SILGenFunction & SGF , SILBasicBlock * insertBB , SILBasicBlock :: iterator insertInst)",3, 52, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createMetatype( SILLocation loc , SILType metatype)",34, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createApply( SILLocation loc , SILValue fn , SILType substFnTy , SILType result , SubstitutionMap subs , ArrayRef<SILValue> args)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createTryApply( SILLocation loc , SILValue fn , SILType substFnTy , SubstitutionMap subs , ArrayRef<SILValue> args , SILBasicBlock * normalBB , SILBasicBlock * errorBB)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createBeginApply( SILLocation loc , SILValue fn , SubstitutionMap subs , ArrayRef<SILValue> args)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createPartialApply( SILLocation loc , SILValue fn , SILType substFnTy , SubstitutionMap subs , ArrayRef<SILValue> args , SILType closureTy)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createBuiltin( SILLocation loc , Identifier name , SILType resultTy , SubstitutionMap subs , ArrayRef<SILValue> args)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createInitExistentialAddr( SILLocation loc , SILValue existential , CanType formalConcreteType , SILType loweredConcreteType , ArrayRef<ProtocolConformanceRef> conformances)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createInitExistentialValue( SILLocation Loc , SILType ExistentialType , CanType FormalConcreteType , SILValue Concrete , ArrayRef<ProtocolConformanceRef> Conformances)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createInitExistentialMetatype( SILLocation loc , SILValue metatype , SILType existentialType , ArrayRef<ProtocolConformanceRef> conformances)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createInitExistentialRef( SILLocation loc , SILType existentialType , CanType formalConcreteType , SILValue concreteValue , ArrayRef<ProtocolConformanceRef> conformances)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createAllocExistentialBox( SILLocation loc , SILType existentialType , CanType concreteType , ArrayRef<ProtocolConformanceRef> conformances)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createPartialApply( SILLocation loc , SILValue fn , SILType substFnTy , SubstitutionMap subs , ArrayRef<ManagedValue> args , SILType closureTy)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createConvertFunction( SILLocation loc , ManagedValue fn , SILType resultTy , bool withoutActuallyEscaping)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createConvertEscapeToNoEscape( SILLocation loc , ManagedValue fn , SILType resultTy , bool isEscapedByUser)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createInitExistentialValue( SILLocation loc , SILType existentialType , CanType formalConcreteType , ManagedValue concrete , ArrayRef<ProtocolConformanceRef> conformances)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createInitExistentialRef( SILLocation Loc , SILType ExistentialType , CanType FormalConcreteType , ManagedValue Concrete , ArrayRef<ProtocolConformanceRef> Conformances)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createStructExtract( SILLocation loc , ManagedValue base , VarDecl * decl)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createRefElementAddr( SILLocation loc , ManagedValue operand , VarDecl * field , SILType resultTy)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createCopyValue( SILLocation loc , ManagedValue originalValue)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createCopyValue( SILLocation loc , ManagedValue originalValue , const TypeLowering & lowering)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createOwnedPhiArgument( SILType type)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createGuaranteedPhiArgument( SILType type)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createAllocRef( SILLocation loc , SILType refType , bool objc , bool canAllocOnStack , ArrayRef<SILType> inputElementTypes , ArrayRef<ManagedValue> inputElementCountOperands)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createAllocRefDynamic( SILLocation loc , ManagedValue operand , SILType refType , bool objc , ArrayRef<SILType> inputElementTypes , ArrayRef<ManagedValue> inputElementCountOperands)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createTupleExtract( SILLocation loc , ManagedValue base , unsigned index , SILType type)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createTupleExtract( SILLocation loc , ManagedValue value , unsigned index)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createLoadBorrow( SILLocation loc , ManagedValue base)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createFormalAccessLoadBorrow( SILLocation loc , ManagedValue base)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createFormalAccessCopyValue( SILLocation loc , ManagedValue originalValue)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createFormalAccessCopyAddr( SILLocation loc , ManagedValue originalAddr , SILValue newAddr , IsTake_t isTake , IsInitialization_t isInit)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::bufferForExpr( SILLocation loc , SILType ty , const TypeLowering & lowering , SGFContext context , llvm :: function_ref<void(SILValue)> rvalueEmitter)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::formalAccessBufferForExpr( SILLocation loc , SILType ty , const TypeLowering & lowering , SGFContext context , llvm :: function_ref<void(SILValue)> rvalueEmitter)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createUncheckedEnumData( SILLocation loc , ManagedValue operand , EnumElementDecl * element)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createUncheckedTakeEnumDataAddr( SILLocation loc , ManagedValue operand , EnumElementDecl * element , SILType ty)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createLoadTake( SILLocation loc , ManagedValue v)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createLoadTake( SILLocation loc , ManagedValue v , const TypeLowering & lowering)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createLoadCopy( SILLocation loc , ManagedValue v)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createLoadCopy( SILLocation loc , ManagedValue v , const TypeLowering & lowering)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"createInputFunctionArgument( SILGenBuilder & B , SILType type , SILLocation loc , ValueDecl * decl = nullptr)",38, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createInputFunctionArgument( SILType type , ValueDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createInputFunctionArgument( SILType type , Optional<SILLocation> inputLoc)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createMarkUninitialized( ValueDecl * decl , ManagedValue operand , MarkUninitializedInst :: Kind muKind)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createEnum( SILLocation loc , ManagedValue payload , EnumElementDecl * decl , SILType type)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createUnconditionalCheckedCastValue( SILLocation loc , ManagedValue operand , SILType type)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createUnconditionalCheckedCast( SILLocation loc , ManagedValue operand , SILType type)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createCheckedCastBranch( SILLocation loc , bool isExact , ManagedValue operand , SILType type , SILBasicBlock * trueBlock , SILBasicBlock * falseBlock , ProfileCounter Target1Count , ProfileCounter Target2Count)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createCheckedCastValueBranch( SILLocation loc , ManagedValue operand , SILType type , SILBasicBlock * trueBlock , SILBasicBlock * falseBlock)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createUpcast( SILLocation loc , ManagedValue original , SILType type)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createOptionalSome( SILLocation loc , ManagedValue arg)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createManagedOptionalNone( SILLocation loc , SILType type)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createManagedFunctionRef( SILLocation loc , SILFunction * f)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createTupleElementAddr( SILLocation Loc , ManagedValue Base , unsigned Index , SILType Type)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createTupleElementAddr( SILLocation Loc , ManagedValue Value , unsigned Index)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createUncheckedRefCast( SILLocation loc , ManagedValue value , SILType type)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createUncheckedBitCast( SILLocation loc , ManagedValue value , SILType type)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createOpenExistentialRef( SILLocation loc , ManagedValue original , SILType type)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createOpenExistentialValue( SILLocation loc , ManagedValue original , SILType type)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createOpenExistentialBoxValue( SILLocation loc , ManagedValue original , SILType type)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createOpenExistentialMetatype( SILLocation loc , ManagedValue value , SILType openedType)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createStore( SILLocation loc , ManagedValue value , SILValue address , StoreOwnershipQualifier qualifier)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createSuperMethod( SILLocation loc , ManagedValue operand , SILDeclRef member , SILType methodTy)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createObjCSuperMethod( SILLocation loc , ManagedValue operand , SILDeclRef member , SILType methodTy)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createValueMetatype( SILLocation loc , SILType metatype , ManagedValue base)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createStoreBorrow( SILLocation loc , ManagedValue value , SILValue address)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createStoreBorrowOrTrivial( SILLocation loc , ManagedValue value , SILValue address)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createBridgeObjectToRef( SILLocation loc , ManagedValue mv , SILType destType)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createRefToBridgeObject( SILLocation loc , ManagedValue mv , SILValue bits)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createBlockToAnyObject( SILLocation loc , ManagedValue v , SILType destType)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createBranch( SILLocation loc , SILBasicBlock * targetBlock , ArrayRef<ManagedValue> args)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createReturn( SILLocation loc , ManagedValue returnValue)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createTuple( SILLocation loc , SILType type , ArrayRef<ManagedValue> elements)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createUncheckedAddrCast( SILLocation loc , ManagedValue op , SILType resultTy)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::tryCreateUncheckedRefCast( SILLocation loc , ManagedValue original , SILType type)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createUncheckedTrivialBitCast( SILLocation loc , ManagedValue original , SILType type)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::emitDestructureValueOperation( SILLocation loc , ManagedValue value , llvm :: function_ref<void(unsigned,ManagedValue)> func)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBuilder.cpp,"SILGenBuilder::createProjectBox( SILLocation loc , ManagedValue mv , unsigned index)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"Initialization::_anchor()",1, 34, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILDebuggerClient::anchor()",1, 36, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"BlackHoleInitialization::BlackHoleInitialization()",1, 33, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"BlackHoleInitialization::canSplitIntoTupleElements() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"BlackHoleInitialization::splitIntoTupleElements( SILGenFunction & SGF , SILLocation loc , CanType type , SmallVectorImpl<InitializationPtr> & buf)",10, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"BlackHoleInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit)",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"BlackHoleInitialization::finishUninitialized( SILGenFunction & SGF)",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"copyOrInitValueIntoHelper( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit , ArrayRef<InitializationPtr> subInitializations , llvm :: function_ref<ManagedValue(ManagedValue,unsigned,SILType)> func)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"TupleInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"TupleInitialization::finishUninitialized( SILGenFunction & SGF)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"CleanupClosureConstant::CleanupClosureConstant( SILValue closure)",1, 67, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"CleanupClosureConstant::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",4, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"CleanupClosureConstant::dump( SILGenFunction &) const",7, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::getForwardingSubstitutionMap()",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::visitFuncDecl( FuncDecl * fd)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SingleBufferInitialization::splitIntoTupleElements( SILGenFunction & SGF , SILLocation loc , CanType type , SmallVectorImpl<InitializationPtr> & buf)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SingleBufferInitialization::splitSingleBufferIntoTupleElements( SILGenFunction & SGF , SILLocation loc , CanType type , SILValue baseAddr , SmallVectorImpl<InitializationPtr> & buf , TinyPtrVector<CleanupHandle::AsPointer> & splitCleanups)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SingleBufferInitialization::copyOrInitValueIntoSingleBuffer( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit , SILValue destAddr)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SingleBufferInitialization::finishInitialization( SILGenFunction & SGF)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"KnownAddressInitialization::isInPlaceInitializationOfGlobal() const",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"TemporaryInitialization::isInPlaceInitializationOfGlobal() const",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"TemporaryInitialization::finishInitialization( SILGenFunction & SGF)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"ReleaseValueCleanup::ReleaseValueCleanup( SILValue v)",1, 44, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"ReleaseValueCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"ReleaseValueCleanup::dump( SILGenFunction &) const",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DeallocStackCleanup::DeallocStackCleanup( SILValue addr)",1, 53, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DeallocStackCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DeallocStackCleanup::dump( SILGenFunction &) const",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DestroyLocalVariable::DestroyLocalVariable( VarDecl * var)",1, 51, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DestroyLocalVariable::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DestroyLocalVariable::dump( SILGenFunction & SGF) const",19, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DeallocateUninitializedLocalVariable::DeallocateUninitializedLocalVariable( VarDecl * var)",1, 67, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DeallocateUninitializedLocalVariable::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DeallocateUninitializedLocalVariable::dump( SILGenFunction &) const",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LocalVariableInitialization::LocalVariableInitialization( VarDecl * decl , Optional<MarkUninitializedInst::Kind> kind , uint16_t ArgNo , SILGenFunction & SGF)",40, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LocalVariableInitialization::~LocalVariableInitialization()",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LocalVariableInitialization::getAddress() const",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LocalVariableInitialization::getAddressForInPlaceInitialization( SILGenFunction & SGF , SILLocation loc)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LocalVariableInitialization::isInPlaceInitializationOfGlobal() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LocalVariableInitialization::finishUninitialized( SILGenFunction & SGF)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LocalVariableInitialization::finishInitialization( SILGenFunction & SGF)",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::LetValueInitialization( VarDecl * vd , SILGenFunction & SGF)",44, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::~LetValueInitialization()",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::hasAddress() const",1, 52, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::canPerformInPlaceInitialization() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::isInPlaceInitializationOfGlobal() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::getAddressForInPlaceInitialization( SILGenFunction & SGF , SILLocation loc)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::canSplitIntoTupleElements() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::splitIntoTupleElements( SILGenFunction & SGF , SILLocation loc , CanType type , SmallVectorImpl<InitializationPtr> & buf)",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::bindValue( SILValue value , SILGenFunction & SGF)",19, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit)",21, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::finishUninitialized( SILGenFunction & SGF)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"LetValueInitialization::finishInitialization( SILGenFunction & SGF)",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"ReferenceStorageInitialization::ReferenceStorageInitialization( InitializationPtr && subInit)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"ReferenceStorageInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"ReferenceStorageInitialization::finishUninitialized( SILGenFunction & SGF)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"ReferenceStorageInitialization::finishInitialization( SILGenFunction & SGF)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"RefutablePatternInitialization::RefutablePatternInitialization( JumpDest failureDest)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"RefutablePatternInitialization::getFailureDest() const",1, 58, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"RefutablePatternInitialization::bindVariable( SILLocation loc , VarDecl * var , ManagedValue value , CanType formalValueType , SILGenFunction & SGF)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"ExprPatternInitialization::ExprPatternInitialization( ExprPattern * P , JumpDest patternFailDest)",2, 63, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"ExprPatternInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"EnumElementPatternInitialization::EnumElementPatternInitialization( EnumElementDecl * ElementDecl , InitializationPtr && subInitialization , JumpDest patternFailDest)",5, 57, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"EnumElementPatternInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"EnumElementPatternInitialization::finishInitialization( SILGenFunction & SGF)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"getOppositeBinaryDecl( const SILGenFunction & SGF , const EnumElementDecl * elt)",43, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"EnumElementPatternInitialization::emitEnumMatch( ManagedValue value , EnumElementDecl * eltDecl , Initialization * subInit , JumpDest failureDest , SILLocation loc , SILGenFunction & SGF)",154, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"IsPatternInitialization::IsPatternInitialization( IsPattern * pattern , InitializationPtr && subInitialization , JumpDest patternFailDest)",5, 55, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"IsPatternInitialization::finishInitialization( SILGenFunction & SGF)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"IsPatternInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"BoolPatternInitialization::BoolPatternInitialization( BoolPattern * pattern , JumpDest patternFailDest)",3, 75, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"BoolPatternInitialization::copyOrInitValueInto( SILGenFunction & SGF , SILLocation loc , ManagedValue value , bool isInit)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::InitializationForPattern( SILGenFunction & SGF , JumpDest patternFailDest)",2, 52, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitParenPattern( ParenPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitTypedPattern( TypedPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitVarPattern( VarPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitAnyPattern( AnyPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitNamedPattern( NamedPattern * P)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitTuplePattern( TuplePattern * P)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitEnumElementPattern( EnumElementPattern * P)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitOptionalSomePattern( OptionalSomePattern * P)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitIsPattern( IsPattern * P)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitBoolPattern( BoolPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"InitializationForPattern::visitExprPattern( ExprPattern * P)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitInitializationForVarDecl( VarDecl * vd , bool forceImmutable)",59, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitPatternBinding( PatternBindingDecl * PBD , unsigned pbdEntry)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::visitPatternBindingDecl( PatternBindingDecl * PBD)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::visitVarDecl( VarDecl * D)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitOSVersionRangeCheck( SILLocation loc , const VersionRange & range)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitStmtCondition( StmtCondition Cond , JumpDest FalseDest , SILLocation loc , ProfileCounter NumTrueTaken , ProfileCounter NumFalseTaken)",66, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitPatternBindingInitialization( Pattern * P , JumpDest failureDest)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::enterDeallocStackCleanup( SILValue temp)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::enterDestroyCleanup( SILValue valueOrAddr)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DeinitExistentialCleanup::DeinitExistentialCleanup( SILValue existentialAddr , CanType concreteFormalType , ExistentialRepresentation repr)",6, 22, 8, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DeinitExistentialCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",21, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"DeinitExistentialCleanup::dump( SILGenFunction &) const",7, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::enterDeinitExistentialCleanup( CleanupState state , SILValue addr , CanType concreteFormalType , ExistentialRepresentation repr)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenModule::emitExternalWitnessTable( ProtocolConformance * c)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"isDeclaredInPrimaryFile( SILModule & M , Decl * d)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenModule::emitExternalDefinition( Decl * d)",67, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitLocalVariableWithCleanup( VarDecl * vd , Optional<MarkUninitializedInst::Kind> kind , unsigned ArgNo)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitTemporary( SILLocation loc , const TypeLowering & tempTL)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitFormalAccessTemporary( SILLocation loc , const TypeLowering & tempTL)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::useBufferAsTemporary( SILValue addr , const TypeLowering & tempTL)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::enterDormantTemporaryCleanup( SILValue addr , const TypeLowering & tempTL)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"FormalAccessReleaseValueCleanup::FormalAccessReleaseValueCleanup()",1, 49, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"FormalAccessReleaseValueCleanup::setState( SILGenFunction & SGF , CleanupState newState)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"FormalAccessReleaseValueCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"FormalAccessReleaseValueCleanup::dump( SILGenFunction & SGF) const",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"FormalAccessReleaseValueCleanup::getEvaluation( SILGenFunction & SGF) const",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"FormalAccessReleaseValueCleanup::getValue( SILGenFunction & SGF) const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitFormalAccessManagedBufferWithCleanup( SILLocation loc , SILValue addr)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::emitFormalAccessManagedRValueWithCleanup( SILLocation loc , SILValue value)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::enterDormantFormalAccessTemporaryCleanup( SILValue addr , SILLocation loc , const TypeLowering & tempTL)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::destroyLocalVariable( SILLocation silLoc , VarDecl * vd)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDecl.cpp,"SILGenFunction::deallocateUninitializedLocalVariable( SILLocation silLoc , VarDecl * vd)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"SILGenFunction::prepareEpilog( Type resultType , bool isThrowing , CleanupLocation CleanupL)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"SILGenFunction::prepareRethrowEpilog( CleanupLocation cleanupLoc)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"SILGenFunction::prepareCoroutineUnwindEpilog( CleanupLocation cleanupLoc)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"buildReturnValue( SILGenFunction & SGF , SILLocation loc , ArrayRef<SILValue> directResults)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"prepareForEpilogBlockEmission( SILGenFunction & SGF , SILLocation topLevel , SILBasicBlock * epilogBB , SmallVectorImpl<SILValue> & directResults)",87, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"SILGenFunction::emitEpilogBB( SILLocation topLevel)",34, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"SILGenFunction::emitEpilog( SILLocation TopLevel , bool UsesCustomEpilog)",35, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"prepareExtraEpilog( SILGenFunction & SGF , JumpDest & dest , SILLocation & loc , SILValue * arg)",53, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"SILGenFunction::emitRethrowEpilog( SILLocation topLevel)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenEpilog.cpp,"SILGenFunction::emitCoroutineUnwindEpilog( SILLocation topLevel)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::peekRValue() &",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::isShuffle() const",26, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::getAsRValue( SILGenFunction & SGF , SGFContext C) &&",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::getAsSingleValue( SILGenFunction & SGF , SGFContext C) &&",33, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::getAsSingleValue( SILGenFunction & SGF , AbstractionPattern origFormalType , SGFContext C) &&",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::getConverted( SILGenFunction & SGF , const Conversion & conversion , SGFContext C) &&",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::forwardInto( SILGenFunction & SGF , Initialization * dest) &&",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::ArgumentSource( SILLocation loc , RValue && rv , Kind kind)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::borrow( SILGenFunction & SGF) const &",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::materialize( SILGenFunction & SGF) &&",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::materialize( SILGenFunction & SGF , AbstractionPattern origFormalType , SILType destType) &&",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::forwardInto( SILGenFunction & SGF , AbstractionPattern origFormalType , Initialization * dest , const TypeLowering & destTL) &&",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::dump( raw_ostream & out , unsigned indent) const",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"PreparedArguments::emplaceEmptyArgumentList( SILGenFunction & SGF)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"PreparedArguments::copy( SILGenFunction & SGF , SILLocation loc) const",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"PreparedArguments::isObviouslyEqual( const PreparedArguments & other) const",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::isObviouslyEqual( const ArgumentSource & other) const",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"PreparedArguments::copyForDiagnostics() const",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/ArgumentSource.cpp,"ArgumentSource::copyForDiagnostics() const",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenModule::emitVTableMethod( ClassDecl * theClass , SILDeclRef derived , SILDeclRef base)",107, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenModule::requiresObjCMethodEntryPoint( FuncDecl * method)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenModule::requiresObjCMethodEntryPoint( ConstructorDecl * constructor)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenVTable::SILGenVTable( SILGenModule & SGM , ClassDecl * theClass)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenVTable::emitVTable()",54, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenVTable::visitAncestor( ClassDecl * ancestor)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenVTable::addMethodOverride( SILDeclRef baseRef , SILDeclRef declRef)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenVTable::addMethod( SILDeclRef member)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenVTable::addPlaceholder( MissingMemberDecl * m)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"emitTypeMemberGlobalVariable( SILGenModule & SGM , VarDecl * var)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"isFreeFunctionWitness( ValueDecl * requirement , ValueDecl * witness)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenWitnessTable::asDerived()",1, 52, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenWitnessTable::addMethod( SILDeclRef requirementRef)",32, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenWitnessTable::addMethodImplementation( SILDeclRef requirementRef , SILDeclRef witnessRef , Witness witness)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"isConformanceSerialized( RootProtocolConformance * conf)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::SILGenConformance( SILGenModule & SGM , NormalProtocolConformance * C)",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::emit()",42, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::addProtocolConformanceDescriptor()",2, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::addOutOfLineBaseProtocol( ProtocolDecl * baseProtocol)",17, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::getWitness( ValueDecl * decl)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::addPlaceholder( MissingMemberDecl * placeholder)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::addMissingMethod( SILDeclRef requirement)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::addMethodImplementation( SILDeclRef requirementRef , SILDeclRef witnessRef , IsFreeFunctionWitness_t isFree , Witness witness)",25, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::addAssociatedType( AssociatedType requirement)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::addAssociatedConformance( AssociatedConformance req)",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenConformance::addConditionalRequirements()",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"getWitnessTableToInsertAfter( SILGenModule & SGM , NormalProtocolConformance * insertAfter)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenModule::getWitnessTable( ProtocolConformance * conformance)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenModule::emitProtocolWitness( ProtocolConformanceRef conformance , SILLinkage linkage , IsSerialized_t isSerialized , SILDeclRef requirement , SILDeclRef witnessRef , IsFreeFunctionWitness_t isFree , Witness witness)",113, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"emitSelfConformanceWitness( SILGenModule & SGM , SelfProtocolConformance * conformance , SILLinkage linkage , SILDeclRef requirement)",66, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenSelfConformanceWitnessTable::SILGenSelfConformanceWitnessTable( SILGenModule & SGM , SelfProtocolConformance * conformance)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenSelfConformanceWitnessTable::emit()",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenSelfConformanceWitnessTable::addProtocolConformanceDescriptor()",1, 45, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenSelfConformanceWitnessTable::addOutOfLineBaseProtocol( ProtocolDecl * protocol)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenSelfConformanceWitnessTable::addAssociatedConformance( AssociatedConformance conformance)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenSelfConformanceWitnessTable::addAssociatedType( AssociatedType type)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenSelfConformanceWitnessTable::addPlaceholder( MissingMemberDecl * placeholder)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenSelfConformanceWitnessTable::addMethod( SILDeclRef requirement)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenModule::emitSelfConformanceWitnessTable( ProtocolDecl * protocol)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::SILGenDefaultWitnessTable( SILGenModule & SGM , ProtocolDecl * proto , SILLinkage linkage)",3, 53, 6, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::addMissingDefault()",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::addProtocolConformanceDescriptor()",1, 46, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::addOutOfLineBaseProtocol( ProtocolDecl * baseProto)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::addMissingMethod( SILDeclRef ref)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::addPlaceholder( MissingMemberDecl * placeholder)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::getWitness( ValueDecl * decl)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::addMethodImplementation( SILDeclRef requirementRef , SILDeclRef witnessRef , IsFreeFunctionWitness_t isFree , Witness witness)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::addAssociatedType( AssociatedType req)",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenDefaultWitnessTable::addAssociatedConformance( const AssociatedConformance & req)",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenModule::emitDefaultWitnessTable( ProtocolDecl * protocol)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::SILGenType( SILGenModule & SGM , NominalTypeDecl * theType)",2, 36, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::emitType()",33, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitTypeAliasDecl( TypeAliasDecl * tad)",1, 49, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitAbstractTypeParamDecl( AbstractTypeParamDecl * tpd)",1, 65, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitModuleDecl( ModuleDecl * md)",1, 42, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitMissingMemberDecl( MissingMemberDecl *)",1, 54, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitNominalTypeDecl( NominalTypeDecl * ntd)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitFuncDecl( FuncDecl * fd)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitConstructorDecl( ConstructorDecl * cd)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitDestructorDecl( DestructorDecl * dd)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitEnumCaseDecl( EnumCaseDecl * ecd)",1, 47, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitEnumElementDecl( EnumElementDecl * ued)",1, 53, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitPatternBindingDecl( PatternBindingDecl * pd)",11, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitVarDecl( VarDecl * vd)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenType::visitAbstractStorageDecl( AbstractStorageDecl * asd)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenModule::visitNominalTypeDecl( NominalTypeDecl * ntd)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::SILGenExtension( SILGenModule & SGM)",2, 18, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::emitExtension( ExtensionDecl * e)",16, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitTypeAliasDecl( TypeAliasDecl * tad)",1, 49, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitAbstractTypeParamDecl( AbstractTypeParamDecl * tpd)",1, 65, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitModuleDecl( ModuleDecl * md)",1, 42, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitMissingMemberDecl( MissingMemberDecl *)",1, 54, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitNominalTypeDecl( NominalTypeDecl * ntd)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitFuncDecl( FuncDecl * fd)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitConstructorDecl( ConstructorDecl * cd)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitDestructorDecl( DestructorDecl * dd)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitPatternBindingDecl( PatternBindingDecl * pd)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitVarDecl( VarDecl * vd)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitEnumCaseDecl( EnumCaseDecl * ecd)",1, 47, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitEnumElementDecl( EnumElementDecl * ed)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenExtension::visitAbstractStorageDecl( AbstractStorageDecl * vd)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenType.cpp,"SILGenModule::visitExtensionDecl( ExtensionDecl * ed)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"SILGenFunction::emitClassMethodRef( SILLocation loc , SILValue selfPtr , SILDeclRef constant , CanSILFunctionType constantTy)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"SILGenModule::getDynamicThunk( SILDeclRef constant , CanSILFunctionType constantTy)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"SILGenFunction::emitDynamicMethodRef( SILLocation loc , SILDeclRef constant , CanSILFunctionType constantTy)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"getNextUncurryLevelRef( SILGenFunction & SGF , SILLocation loc , SILDeclRef thunk , ManagedValue selfArg , SubstitutionMap curriedSubs)",51, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"SILGenFunction::emitCurryThunk( SILDeclRef thunk)",53, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"SILGenModule::emitCurryThunk( SILDeclRef constant)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"SILGenModule::emitForeignToNativeThunk( SILDeclRef thunk)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"SILGenModule::emitNativeToForeignThunk( SILDeclRef thunk)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"SILGenFunction::emitGlobalFunctionRef( SILLocation loc , SILDeclRef constant , SILConstantInfo constantInfo , bool callPreviousDynamicReplaceableImpl)",33, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenThunk.cpp,"SILGenModule::getOrCreateReabstractionThunk( CanSILFunctionType thunkType , CanSILFunctionType fromType , CanSILFunctionType toType , IsSerialized_t Serialized)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::SILGenModule( SILModule & M , ModuleDecl * SM)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::~SILGenModule()",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"getBridgingFn( Optional<SILDeclRef> & cacheSlot , SILGenModule & SGM , Identifier moduleName , StringRef functionName , Optional<std::initializer_list<Type>> inputTypes , Optional<Type> outputType)",79, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"diagnoseMissingIntrinsic( SILGenModule & sgm , SILLocation loc , const char * name)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getObjectiveCBridgeable( SILLocation loc)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getBridgeToObjectiveCRequirement( SILLocation loc)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getUnconditionallyBridgeFromObjectiveCRequirement( SILLocation loc)",32, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getBridgedObjectiveCTypeRequirement( SILLocation loc)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getConformanceToObjectiveCBridgeable( SILLocation loc , Type type)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getBridgedStoredNSError( SILLocation loc)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getNSErrorRequirement( SILLocation loc)",26, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getConformanceToBridgedStoredNSError( SILLocation loc , Type type)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getNSErrorConformanceToError()",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getKeyPathProjectionCoroutine( bool isReadAccess , KeyPathTypeKind typeKind)",85, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitTopLevelFunction( SILLocation Loc)",62, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getEmittedFunction( SILDeclRef constant , ForDefinition_t forDefinition)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"getFunctionToInsertAfter( SILGenModule & SGM , SILDeclRef insertAfter)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"hasSILBody( FuncDecl * fd)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"haveProfiledAssociatedFunction( SILDeclRef constant)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getOrCreateProfilerForConstructors( DeclContext * ctx , ConstructorDecl * cd)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::getFunction( SILDeclRef constant , ForDefinition_t forDefinition)",59, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::hasFunction( SILDeclRef constant)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::visitFuncDecl( FuncDecl * fd)",1, 69, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"emitOrDelayFunction( SILGenModule & SGM , SILDeclRef constant , Fn && emitter , bool forceEmission = false)",41, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::preEmitFunction( SILDeclRef constant , llvm :: PointerUnion<ValueDecl*,Expr*> astNode , SILFunction * F , SILLocation Loc)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::postEmitFunction( SILDeclRef constant , SILFunction * F)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitMarkFunctionEscapeForTopLevelCodeGlobals( SILLocation loc , const CaptureInfo & captureInfo)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitAbstractFuncDecl( AbstractFunctionDecl * AFD)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitFunction( FuncDecl * fd)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::addGlobalVariable( VarDecl * global)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitConstructor( ConstructorDecl * decl)",84, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitEnumConstructor( EnumElementDecl * decl)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitClosure( AbstractClosureExpr * ce)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"requiresIVarInitialization( SILGenModule & SGM , ClassDecl * cd)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::hasNonTrivialIVars( ClassDecl * cd)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::requiresIVarDestroyer( ClassDecl * cd)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitObjCAllocatorDestructor( ClassDecl * cd , DestructorDecl * dd)",41, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitDestructor( ClassDecl * cd , DestructorDecl * dd)",43, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitDefaultArgGenerator( SILDeclRef constant , Expr * arg , DefaultArgumentKind kind , DeclContext * initDC)",33, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitStoredPropertyInitialization( PatternBindingDecl * pbd , unsigned i)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitLazyGlobalInitializer( StringRef funcName , PatternBindingDecl * binding , unsigned pbdEntry)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitGlobalAccessor( VarDecl * global , SILGlobalVariable * onceToken , SILFunction * onceFunc)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitDefaultArgGenerators( SILDeclRef :: Loc decl , ParameterList * paramList)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitObjCMethodThunk( FuncDecl * method)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitObjCPropertyMethodThunks( AbstractStorageDecl * prop)",42, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitObjCConstructorThunk( ConstructorDecl * constructor)",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitObjCDestructorThunk( DestructorDecl * destructor)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::visitPatternBindingDecl( PatternBindingDecl * pd)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::visitVarDecl( VarDecl * vd)",42, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::canStorageUseStoredKeyPathComponent( AbstractStorageDecl * decl , ResilienceExpansion expansion)",38, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"canStorageUseTrivialDescriptor( SILGenModule & SGM , AbstractStorageDecl * decl)",46, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::tryEmitPropertyDescriptor( AbstractStorageDecl * decl)",49, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::visitIfConfigDecl( IfConfigDecl * ICD)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::visitPoundDiagnosticDecl( PoundDiagnosticDecl * PDD)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::visitTopLevelCodeDecl( TopLevelCodeDecl * td)",37, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::useConformance( ProtocolConformanceRef conformanceRef)",24, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::useConformancesFromSubstitutions( const SubstitutionMap subs)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SourceFileScope::SourceFileScope( SILGenModule & sgm , SourceFile * sf)",30, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SourceFileScope::~SourceFileScope()",111, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILGenModule::emitSourceFile( SourceFile * sf)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"SILModule::constructSIL( ModuleDecl * mod , SILOptions & options , FileUnit * SF)",65, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"swift::performSILGeneration( ModuleDecl * mod , SILOptions & options)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGen.cpp,"swift::performSILGeneration( FileUnit & sf , SILOptions & options)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"CheckedCastEmitter::CheckedCastEmitter( SILGenFunction & SGF , SILLocation loc , Type sourceType , Type targetType)",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"CheckedCastEmitter::isOperandIndirect() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"CheckedCastEmitter::emitOperand( Expr * operand)",26, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"CheckedCastEmitter::emitUnconditionalCast( ManagedValue operand , SGFContext ctx)",37, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"CheckedCastEmitter::emitConditional( ManagedValue operand , CastConsumptionKind consumption , SGFContext ctx , llvm :: function_ref<void(ManagedValue)> handleTrue , llvm :: function_ref<void(Optional<ManagedValue>)> handleFalse , ProfileCounter TrueCount = ProfileCounter() , ProfileCounter FalseCount = ProfileCounter())",130, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"CheckedCastEmitter::createAbstractResultBuffer( bool hasAbstraction , const TypeLowering & origTargetTL , SGFContext ctx)",10, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"CheckedCastEmitter::finishFromResultBuffer( bool hasAbstraction , SILValue buffer , AbstractionPattern abstraction , const TypeLowering & origTargetTL , SGFContext ctx)",22, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"CheckedCastEmitter::finishFromResultScalar( bool hasAbstraction , ManagedValue value , CastConsumptionKind consumption , AbstractionPattern abstraction , const TypeLowering & origTargetTL , SGFContext ctx)",18, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"CheckedCastEmitter::computeStrategy() const",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"SILGenFunction::emitCheckedCastBranch( SILLocation loc , Expr * source , Type targetType , SGFContext ctx , llvm :: function_ref<void(ManagedValue)> handleTrue , llvm :: function_ref<void(Optional<ManagedValue>)> handleFalse , ProfileCounter TrueCount , ProfileCounter FalseCount)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"SILGenFunction::emitCheckedCastBranch( SILLocation loc , ConsumableManagedValue src , Type sourceType , CanType targetType , SGFContext ctx , llvm :: function_ref<void(ManagedValue)> handleTrue , llvm :: function_ref<void(Optional<ManagedValue>)> handleFalse , ProfileCounter TrueCount , ProfileCounter FalseCount)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"emitCollectionDowncastExpr( SILGenFunction & SGF , ManagedValue source , Type sourceType , SILLocation loc , Type destType , SGFContext C , bool conditional)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"adjustForConditionalCheckedCastOperand( SILLocation loc , ManagedValue src , CanType sourceType , CanType targetType , SILGenFunction & SGF)",44, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"Lowering::emitUnconditionalCheckedCast( SILGenFunction & SGF , SILLocation loc , Expr * operand , Type targetType , CheckedCastKind castKind , SGFContext C)",22, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"Lowering::emitConditionalCheckedCast( SILGenFunction & SGF , SILLocation loc , ManagedValue operand , Type operandType , Type optTargetType , CheckedCastKind castKind , SGFContext C , ProfileCounter TrueCount , ProfileCounter FalseCount)",105, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenDynamicCast.cpp,"Lowering::emitIsa( SILGenFunction & SGF , SILLocation loc , Expr * operand , Type targetType , CheckedCastKind castKind)",48, 2, 0, 0
repos/cpp/swift/lib/SILGen/SwitchEnumBuilder.cpp,"SwitchCaseFullExpr::SwitchCaseFullExpr( SILGenFunction & SGF , CleanupLocation loc)",2, 68, 0, 0
repos/cpp/swift/lib/SILGen/SwitchEnumBuilder.cpp,"SwitchCaseFullExpr::SwitchCaseFullExpr( SILGenFunction & SGF , CleanupLocation loc , SwitchCaseBranchDest branchDest)",3, 78, 4, 0
repos/cpp/swift/lib/SILGen/SwitchEnumBuilder.cpp,"SwitchCaseFullExpr::exitAndBranch( SILLocation loc , ArrayRef<SILValue> branchArgs)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SwitchEnumBuilder.cpp,"SwitchCaseFullExpr::exit()",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SwitchEnumBuilder.cpp,"SwitchCaseFullExpr::~SwitchCaseFullExpr()",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SwitchEnumBuilder.cpp,"SwitchCaseFullExpr::unreachableExit()",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SwitchEnumBuilder.cpp,"SwitchEnumBuilder::emit() &&",109, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"dumpPattern( const Pattern * p , llvm :: raw_ostream & os)",55, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"isDirectlyRefutablePattern( const Pattern * p)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"getNumSpecializationsRecursive( const Pattern * p , unsigned n)",54, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"getNumSpecializations( const Pattern * p)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"isWildcardPattern( const Pattern * p)",28, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"getSpecializingPattern( Pattern * p)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"getSimilarSpecializingPattern( Pattern * p , Pattern * first)",51, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::PatternMatchEmission( SILGenFunction & SGF , Stmt * S , CompletionHandlerTy completionHandler)",4, 46, 6, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::getSubjectLocationOverride( SILLocation loc) const",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::ClauseRow( Stmt * clientData , Pattern * CasePattern , Expr * CaseGuardExpr , bool HasFallthroughTo)",12, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::getClientData() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::getCasePattern() const",1, 58, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::getCaseGuardExpr() const",1, 59, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::hasFallthroughTo() const",1, 61, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::getColumns() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::getColumns()",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::specializeInPlace( unsigned column , ArrayRef<Pattern*> newColumns)",24, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::isIrrefutable() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::isIrrefutableAfterSpecializing( unsigned column) const",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::begin() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::end() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::begin()",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::end()",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::operator [ ]( unsigned column) const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::operator [ ]( unsigned column)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::columns() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::dump() const",1, 72, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseMatrix::ClauseMatrix( MutableArrayRef<ClauseRow> rows)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseMatrix::rows() const",1, 48, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseMatrix::operator [ ]( unsigned row)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseMatrix::operator [ ]( unsigned row) const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseMatrix::specializeRowsInPlace( unsigned column , ArrayRef<SpecializedRow> newRows)",15, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseMatrix::dump() const",1, 72, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseRow::print( llvm :: raw_ostream & out) const",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ClauseMatrix::print( llvm :: raw_ostream & out) const",45, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"forwardIntoSubtree( SILGenFunction & SGF , SILLocation loc , CleanupStateRestorationScope & scope , ConsumableManagedValue outerCMV)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"forwardIntoIrrefutableSubtree( SILGenFunction & SGF , CleanupStateRestorationScope & scope , ConsumableManagedValue outerCMV)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ArgForwarderBase::ArgForwarderBase( SILGenFunction & SGF)",1, 75, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ArgForwarderBase::forward( ConsumableManagedValue value , SILLocation loc)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ArgForwarderBase::forwardIntoIrrefutable( ConsumableManagedValue value)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ArgForwarder::ArgForwarder( SILGenFunction & SGF , ArgArray outerArgs , SILLocation loc , bool isFinalUse)",16, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ArgForwarder::getForwardedArgs() const",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ArgForwarder::didForwardArgs() const",1, 71, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"SpecializedArgForwarder::SpecializedArgForwarder( SILGenFunction & SGF , ArgArray outerArgs , unsigned column , ArgArray newArgs , SILLocation loc , bool isFinalUse)",34, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"SpecializedArgForwarder::getForwardedArgs() const",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"SpecializedArgForwarder::forward( ConsumableManagedValue value , SILLocation loc)",9, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ArgUnforwarder::ArgUnforwarder( SILGenFunction & SGF)",1, 73, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ArgUnforwarder::requiresUnforwarding( SILGenFunction & SGF , ConsumableManagedValue operand)",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"ArgUnforwarder::unforwardBorrowedValues( ConsumableManagedValue aggregate , ArgArray subobjects)",10, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"getConstructorPrefix( const ClauseMatrix & matrix , unsigned firstRow , unsigned column)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"chooseNecessaryColumn( const ClauseMatrix & matrix , unsigned firstRow)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitDispatch( ClauseMatrix & clauses , ArgArray args , const FailureHandler & outerFailure)",64, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitWildcardDispatch( ClauseMatrix & clauses , ArgArray matrixArgs , unsigned row , const FailureHandler & failure)",40, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::bindRefutablePatterns( const ClauseRow & row , ArgArray args , const FailureHandler & failure)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::bindIrrefutablePatterns( const ClauseRow & row , ArgArray args , bool forIrrefutableRow , bool hasMultipleItems)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"shouldTake( ConsumableManagedValue value , bool isIrrefutable)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::bindVariable( Pattern * pattern , VarDecl * var , ConsumableManagedValue value , bool isIrrefutable , bool hasMultipleItems)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitGuardBranch( SILLocation loc , Expr * guard , const FailureHandler & failure)",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitSpecializedDispatch( ClauseMatrix & clauses , ArgArray matrixArgs , unsigned & lastRow , unsigned column , const FailureHandler & failure)",125, 3, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"getManagedSubobject( SILGenFunction & SGF , SILValue value , const TypeLowering & valueTL , CastConsumptionKind consumption)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"emitReabstractedSubobject( SILGenFunction & SGF , SILLocation loc , ConsumableManagedValue value , const TypeLowering & valueTL , AbstractionPattern abstraction , CanType substFormalType)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitTupleObjectDispatch( ArrayRef<RowToSpecialize> rows , ConsumableManagedValue src , const SpecializationHandler & handleCase , const FailureHandler & outerFailure)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitTupleDispatch( ArrayRef<RowToSpecialize> rows , ConsumableManagedValue src , const SpecializationHandler & handleCase , const FailureHandler & outerFailure)",116, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"getTargetType( const RowToSpecialize & row)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"emitCastOperand( SILGenFunction & SGF , SILLocation loc , ConsumableManagedValue src , CanType sourceType , CanType targetType , SmallVectorImpl<ConsumableManagedValue> & borrowedValues)",62, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitIsDispatch( ArrayRef<RowToSpecialize> rows , ConsumableManagedValue src , const SpecializationHandler & handleCase , const FailureHandler & failure)",52, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"CaseBlocks::getCaseBlocks() const",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"CaseBlocks::getCounts() const",1, 70, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"CaseBlocks::getDefaultBlock() const",1, 65, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"CaseBlocks::forEachCase( llvm :: function_ref<void(EnumElementDecl*,SILBasicBlock*,const CaseInfo&)> op) const",9, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"CaseBlocks::hasAnyRefutableCase() const",5, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"CaseBlocks::CaseBlocks( SILGenFunction & SGF , ArrayRef<RowToSpecialize> rows , CanType sourceType , SILBasicBlock * curBB)",76, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitEnumElementObjectDispatch( ArrayRef<RowToSpecialize> rows , ConsumableManagedValue src , const SpecializationHandler & handleCase , const FailureHandler & outerFailure , ProfileCounter defaultCastCount)",136, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitEnumElementDispatch( ArrayRef<RowToSpecialize> rows , ConsumableManagedValue src , const SpecializationHandler & handleCase , const FailureHandler & outerFailure , ProfileCounter defaultCaseCount)",254, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitBoolDispatch( ArrayRef<RowToSpecialize> rows , ConsumableManagedValue src , const SpecializationHandler & handleCase , const FailureHandler & outerFailure)",103, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitCaseBody( CaseStmt * caseBlock)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::initSharedCaseBlockDest( CaseStmt * caseBlock , bool hasFallthroughTo)",23, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::getSharedCaseBlockDest( CaseStmt * caseBlock)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitAddressOnlyAllocations()",42, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitAddressOnlyInitialization( VarDecl * dest , SILValue value)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"PatternMatchEmission::emitSharedCaseBlocks()",95, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"FallthroughFinder::FallthroughFinder( bool & Result)",1, 56, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"FallthroughFinder::walkToStmtPre( Stmt * S)",6, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"FallthroughFinder::walkToExprPre( Expr * E)",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"FallthroughFinder::walkToPatternPre( Pattern * P)",3, 6, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"FallthroughFinder::walkToDeclPre( Decl * D)",1, 59, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"FallthroughFinder::walkToTypeLocPre( TypeLoc & TL)",1, 66, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"FallthroughFinder::walkToTypeReprPre( TypeRepr * T)",1, 67, 4, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"containsFallthrough( Stmt * S)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"emitDiagnoseOfUnexpectedEnumCaseValue( SILGenFunction & SGF , SILLocation loc , ManagedValue value , Type subjectTy , const EnumDecl * enumDecl)",56, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"emitDiagnoseOfUnexpectedEnumCase( SILGenFunction & SGF , SILLocation loc , ManagedValue value , Type subjectTy)",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"SILGenFunction::emitSwitchStmt( SwitchStmt * S)",207, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"SILGenFunction::emitSwitchFallthrough( FallthroughStmt * S)",44, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenPattern.cpp,"SILGenFunction::emitCatchDispatch( DoCatchStmt * S , ManagedValue exn , ArrayRef<CatchStmt*> clauses , JumpDest catchFallthroughDest)",66, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitUnabstractedCast( SILGenFunction & SGF , SILLocation loc , ManagedValue value , CanType sourceFormalType , CanType targetFormalType)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"shouldBridgeThroughError( SILGenModule & SGM , CanType type , CanType targetType)",33, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitBridgeNativeToObjectiveC( SILGenFunction & SGF , SILLocation loc , ManagedValue swiftValue , CanType swiftValueType , CanType bridgedType , ProtocolConformance * conformance)",84, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitBridgeObjectiveCToNative( SILGenFunction & SGF , SILLocation loc , ManagedValue objcValue , CanType bridgedType , ProtocolConformance * conformance)",71, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitBridgeBoolToObjCBool( SILGenFunction & SGF , SILLocation loc , ManagedValue swiftBool)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitBridgeBoolToDarwinBoolean( SILGenFunction & SGF , SILLocation loc , ManagedValue swiftBool)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitBridgeForeignBoolToBool( SILGenFunction & SGF , SILLocation loc , ManagedValue foreignBool , SILDeclRef bridgingFnRef)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitManagedParameter( SILGenFunction & SGF , SILLocation loc , SILParameterInfo param , SILValue value)",42, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"expandTupleTypes( CanType type , SmallVectorImpl<CanType> & results)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"expandTupleTypes( AnyFunctionType :: CanParamArrayRef params)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"getBridgedBlockType( SILGenModule & SGM , CanAnyFunctionType blockType)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"buildFuncToBlockInvokeBody( SILGenFunction & SGF , SILLocation loc , CanAnyFunctionType formalFuncType , CanAnyFunctionType formalBlockType , CanSILFunctionType funcTy , CanSILFunctionType blockTy , CanSILBlockStorageType blockStorageTy , bool isUnretainedClosureSafe)",136, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"SILGenFunction::emitFuncToBlock( SILLocation loc , ManagedValue fn , CanAnyFunctionType funcType , CanAnyFunctionType blockType , CanSILFunctionType loweredBlockTy)",120, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitNativeToCBridgedNonoptionalValue( SILGenFunction & SGF , SILLocation loc , ManagedValue v , CanType nativeType , CanType bridgedType , SILType loweredBridgedTy , SGFContext C)",130, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitNativeToCBridgedValue( SILGenFunction & SGF , SILLocation loc , ManagedValue v , CanType nativeType , CanType bridgedType , SILType loweredBridgedTy , SGFContext C = SGFContext())",40, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"SILGenFunction::emitNativeToBridgedValue( SILLocation loc , ManagedValue v , CanType nativeTy , CanType bridgedTy , SILType loweredBridgedTy , SGFContext C)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"buildBlockToFuncThunkBody( SILGenFunction & SGF , SILLocation loc , CanAnyFunctionType formalBlockTy , CanAnyFunctionType formalFuncTy , CanSILFunctionType blockTy , CanSILFunctionType funcTy)",107, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"SILGenFunction::emitBlockToFunc( SILLocation loc , ManagedValue block , CanAnyFunctionType blockType , CanAnyFunctionType funcType , CanSILFunctionType loweredFuncTy)",61, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitCBridgedToNativeValue( SILGenFunction & SGF , SILLocation loc , ManagedValue v , CanType bridgedType , CanType nativeType , SILType loweredNativeTy , bool isCallResult , SGFContext C)",133, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"SILGenFunction::emitBridgedToNativeValue( SILLocation loc , ManagedValue v , CanType bridgedType , CanType nativeType , SILType loweredNativeTy , SGFContext C , bool isCallResult)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"SILGenFunction::emitBridgedToNativeError( SILLocation loc , ManagedValue bridgedError)",36, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"SILGenFunction::emitNativeToBridgedError( SILLocation loc , ManagedValue nativeError , CanType nativeType , CanType bridgedErrorType)",47, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitBridgeReturnValue( SILGenFunction & SGF , SILLocation loc , SILValue result , CanType formalNativeTy , CanType formalBridgedTy , SILType loweredBridgedTy)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitObjCUnconsumedArgument( SILGenFunction & SGF , SILLocation loc , SILValue arg)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"substGenericArgs( CanAnyFunctionType fnType , SubstitutionMap subs)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"emitObjCThunkArguments( SILGenFunction & SGF , SILLocation loc , SILDeclRef thunk , SmallVectorImpl<SILValue> & args , SILValue & foreignErrorSlot , Optional<ForeignErrorConvention> & foreignError , CanType & nativeFormalResultTy , CanType & bridgedFormalResultTy)",123, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"SILGenFunction::emitNativeToForeignThunk( SILDeclRef thunk)",192, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"getThunkedForeignFunctionRef( SILGenFunction & SGF , SILLocation loc , SILDeclRef foreign , ArrayRef<ManagedValue> args , const SILConstantInfo & foreignCI)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenBridging.cpp,"SILGenFunction::emitForeignToNativeThunk( SILDeclRef thunk)",223, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"SILGenFunction::emitSelfDecl( VarDecl * selfDecl)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"CleanupWriteBackToInOut::CleanupWriteBackToInOut( VarDecl * var , SILValue inoutAddr)",2, 40, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"CleanupWriteBackToInOut::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",8, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"StrongReleaseCleanup::StrongReleaseCleanup( SILValue box)",1, 51, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"StrongReleaseCleanup::emit( SILGenFunction & SGF , CleanupLocation l , ForUnwind_t forUnwind)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"StrongReleaseCleanup::dump( SILGenFunction &) const",6, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"EmitBBArguments::EmitBBArguments( SILGenFunction & sgf , SILBasicBlock * parent , SILLocation l , ArrayRef<SILParameterInfo> & parameters)",3, 66, 4, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"EmitBBArguments::visitType( CanType t)",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"EmitBBArguments::visitType( CanType t , bool isInOut)",36, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"EmitBBArguments::visitTupleType( CanTupleType t)",54, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"ArgumentInitHelper::ArgumentInitHelper( SILGenFunction & SGF , SILFunction & f)",4, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"ArgumentInitHelper::getNumArgs() const",1, 48, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"ArgumentInitHelper::makeArgument( Type ty , bool isInOut , SILBasicBlock * parent , SILLocation l)",13, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"ArgumentInitHelper::makeArgumentIntoBinding( Type ty , SILBasicBlock * parent , VarDecl * vd)",37, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"ArgumentInitHelper::emitParam( ParamDecl * PD)",13, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"ArgumentInitHelper::emitAnonymousParam( Type type , SILLocation paramLoc , ParamDecl * PD)",17, 4, 2, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"makeArgument( Type ty , ParamDecl * decl , SmallVectorImpl<SILValue> & args , SILGenFunction & SGF)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"SILGenFunction::bindParameterForForwarding( ParamDecl * param , SmallVectorImpl<SILValue> & parameters)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"SILGenFunction::bindParametersForForwarding( const ParameterList * params , SmallVectorImpl<SILValue> & parameters)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"emitCaptureArguments( SILGenFunction & SGF , AnyFunctionRef closure , CapturedValue capture , uint16_t ArgNo)",84, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"SILGenFunction::emitProlog( AnyFunctionRef TheClosure , ParameterList * paramList , ParamDecl * selfParam , Type resultType , bool throws)",37, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"emitIndirectResultParameters( SILGenFunction & SGF , Type resultType , DeclContext * DC)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenProlog.cpp,"SILGenFunction::emitProlog( ParameterList * paramList , ParamDecl * selfParam , Type resultType , DeclContext * DC , bool throws)",38, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::copy( SILGenFunction & SGF , SILLocation loc) const",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::formalAccessCopy( SILGenFunction & SGF , SILLocation loc)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::copyInto( SILGenFunction & SGF , SILValue dest , SILLocation loc)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::copyUnmanaged( SILGenFunction & SGF , SILLocation loc)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::formalAccessCopyUnmanaged( SILGenFunction & SGF , SILLocation loc)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::forwardCleanup( SILGenFunction & SGF) const",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::forward( SILGenFunction & SGF) const",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::forwardInto( SILGenFunction & SGF , SILLocation loc , SILValue address)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::assignInto( SILGenFunction & SGF , SILLocation loc , SILValue address)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::forwardInto( SILGenFunction & SGF , SILLocation loc , Initialization * dest)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::borrow( SILGenFunction & SGF , SILLocation loc) const",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::formalAccessBorrow( SILGenFunction & SGF , SILLocation loc) const",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::materialize( SILGenFunction & SGF , SILLocation loc) const",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::print( raw_ostream & os) const",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::dump( raw_ostream & os , unsigned indent) const",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::ensurePlusOne( SILGenFunction & SGF , SILLocation loc) const",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::isPlusOne( SILGenFunction & SGF) const",18, 2, 0, 0
repos/cpp/swift/lib/SILGen/ManagedValue.cpp,"ManagedValue::isPlusZero() const",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"Lowering::operator < <( llvm :: raw_ostream & os , CleanupState state)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"hasAnyActiveCleanups( DiverseStackImpl<Cleanup> :: iterator begin , DiverseStackImpl<Cleanup> :: iterator end)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::popTopDeadCleanups()",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::popAndEmitCleanup( CleanupHandle handle , CleanupLocation loc , ForUnwind_t forUnwind)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::emitCleanups( CleanupsDepth depth , CleanupLocation loc , ForUnwind_t forUnwind , bool popCleanups)",52, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::endScope( CleanupsDepth depth , CleanupLocation loc)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::hasAnyActiveCleanups( CleanupsDepth from , CleanupsDepth to)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::hasAnyActiveCleanups( CleanupsDepth from)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::emitBranchAndCleanups( JumpDest dest , SILLocation branchLoc , ArrayRef<SILValue> args , ForUnwind_t forUnwind)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::emitCleanupsForReturn( CleanupLocation loc , ForUnwind_t forUnwind)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::emitBlockForCleanups( JumpDest dest , SILLocation branchLoc , ArrayRef<SILValue> args , ForUnwind_t forUnwind)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::initCleanup( Cleanup & cleanup , size_t allocSize , CleanupState state)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"checkCleanupDeactivation( SILGenFunction & SGF , CleanupsDepth handle , CleanupState state)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::setCleanupState( CleanupsDepth depth , CleanupState state)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::forwardCleanup( CleanupsDepth handle)",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::setCleanupState( Cleanup & cleanup , CleanupState state)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::dump() const",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::dump( CleanupHandle handle) const",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupManager::checkIterator( CleanupHandle handle) const",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupStateRestorationScope::pushCleanupState( CleanupHandle handle , CleanupState newState)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupStateRestorationScope::pushCurrentCleanupState( CleanupHandle handle)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupStateRestorationScope::popImpl()",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupStateRestorationScope::pop() &&",1, 59, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupCloner::CleanupCloner( SILGenFunction & SGF , const ManagedValue & mv)",2, 72, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupCloner::CleanupCloner( SILGenBuilder & builder , const ManagedValue & mv)",2, 56, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupCloner::CleanupCloner( SILGenFunction & SGF , const RValue & rv)",2, 66, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupCloner::CleanupCloner( SILGenBuilder & builder , const RValue & rv)",2, 56, 0, 0
repos/cpp/swift/lib/SILGen/Cleanup.cpp,"CleanupCloner::clone( SILValue value) const",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/FormalEvaluation.cpp,"FormalAccess::_anchor()",1, 32, 0, 0
repos/cpp/swift/lib/SILGen/FormalEvaluation.cpp,"FormalAccess::verify( SILGenFunction & SGF) const",19, 2, 0, 0
repos/cpp/swift/lib/SILGen/FormalEvaluation.cpp,"SharedBorrowFormalAccess::finishImpl( SILGenFunction & SGF)",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/FormalEvaluation.cpp,"OwnedFormalAccess::finishImpl( SILGenFunction & SGF)",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/FormalEvaluation.cpp,"FormalEvaluationScope::FormalEvaluationScope( SILGenFunction & SGF)",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/FormalEvaluation.cpp,"FormalEvaluationScope::FormalEvaluationScope( FormalEvaluationScope && o)",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/FormalEvaluation.cpp,"FormalEvaluationScope::popImpl()",84, 2, 0, 0
repos/cpp/swift/lib/SILGen/FormalEvaluation.cpp,"FormalEvaluationScope::verify() const",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/FormalEvaluation.cpp,"FormalEvaluationContext::dump( SILGenFunction & SGF)",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"getTupleSize( CanType t)",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::getRValueSize( AbstractionPattern pattern , CanType formalType)",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::getRValueSize( CanType type)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ExplodeTupleValue::ExplodeTupleValue( std :: vector<ManagedValue> & values , SILGenFunction & SGF , SILLocation loc)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ExplodeTupleValue::visitType( CanType formalType , ManagedValue v)",12, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ExplodeTupleValue::visitObjectTupleType( CanTupleType tupleFormalType , ManagedValue tuple)",18, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ExplodeTupleValue::visitAddressTupleType( CanTupleType tupleFormalType , ManagedValue tuple)",38, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ExplodeTupleValue::visitTupleType( CanTupleType tupleFormalType , ManagedValue tuple)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ImplodeLoadableTupleValue::getValue( SILGenFunction & SGF , ManagedValue v , SILLocation l)",14, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ImplodeLoadableTupleValue::ImplodeLoadableTupleValue( ArrayRef<ManagedValue> values , SILGenFunction & SGF)",4, 5, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ImplodeLoadableTupleValue::visitType( CanType t , SILLocation l)",5, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ImplodeLoadableTupleValue::visitTupleType( CanTupleType t , SILLocation l)",7, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ImplodeLoadableTupleValue::~ImplodeLoadableTupleValue()",2, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ImplodeAddressOnlyTuple::ImplodeAddressOnlyTuple( ArrayRef<ManagedValue> values , SILGenFunction & SGF)",4, 5, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ImplodeAddressOnlyTuple::visitType( CanType t , Initialization * address , SILLocation l)",22, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ImplodeAddressOnlyTuple::visitTupleType( CanTupleType t , Initialization * address , SILLocation l)",12, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"ImplodeAddressOnlyTuple::~ImplodeAddressOnlyTuple()",3, 4, 2, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"implodeTupleValues( ArrayRef<ManagedValue> values , SILGenFunction & SGF , CanType tupleType , SILLocation l)",26, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"copyOrInitValuesInto( Initialization * init , ArrayRef<ManagedValue> & values , CanType type , SILLocation loc , SILGenFunction & SGF)",61, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"expectedExplosionSize( CanType type)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"verifyHelper( ArrayRef<ManagedValue> values , NullablePtr<SILGenFunction> SGF = nullptr)",30, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::RValue( SILGenFunction * SGF , ArrayRef<ManagedValue> values , CanType type)",15, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::RValue( SILGenFunction & SGF , SILLocation l , CanType formalType , ManagedValue v)",16, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::RValue( SILGenFunction & SGF , Expr * expr , ManagedValue v)",14, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::RValue( CanType type)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::RValue( AbstractionPattern pattern , CanType type)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::addElement( RValue && element) &",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::addElement( SILGenFunction & SGF , ManagedValue element , CanType formalType , SILLocation l) &",13, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::forwardAsSingleValue( SILGenFunction & SGF , SILLocation l) &&",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::forwardAsSingleStorageValue( SILGenFunction & SGF , SILType storageType , SILLocation l) &&",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::forwardInto( SILGenFunction & SGF , SILLocation loc , Initialization * I) &&",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::copyInto( SILGenFunction & SGF , SILLocation loc , Initialization * I) const &",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"assignRecursive( SILGenFunction & SGF , SILLocation loc , CanType type , ArrayRef<ManagedValue> & srcValues , SILValue destAddr)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::assignInto( SILGenFunction & SGF , SILLocation loc , SILValue destAddr) &&",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::getAsSingleValue( SILGenFunction & SGF , SILLocation loc) &&",20, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::getUnmanagedSingleValue( SILGenFunction & SGF , SILLocation l) const &",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::forwardAll( SILGenFunction & SGF , SmallVectorImpl<SILValue> & dest) &&",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::getAll( SmallVectorImpl<ManagedValue> & dest) &&",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::getAllUnmanaged( SmallVectorImpl<SILValue> & dest) const &",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"getElementRange( CanTupleType tupleType , unsigned eltIndex)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::extractElement( unsigned n) &&",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::extractElements( SmallVectorImpl<RValue> & elements) &&",27, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::copy( SILGenFunction & SGF , SILLocation loc) const &",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::ensurePlusOne( SILGenFunction & SGF , SILLocation loc) &&",5, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::borrow( SILGenFunction & SGF , SILLocation loc) const &",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::materialize( SILGenFunction & SGF , SILLocation loc) &&",17, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::isObviouslyEqual( const RValue & rhs) const",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"getCanonicalValueSource( SILValue value)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::areObviouslySameValue( SILValue lhs , SILValue rhs)",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::dump( raw_ostream & OS , unsigned indent) const",11, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::verify( SILGenFunction & SGF) const &",6, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::isPlusOne( SILGenFunction & SGF) const &",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::isPlusZero( SILGenFunction & SGF) const &",4, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::getTypeLowering( SILGenFunction & SGF) const &",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::getLoweredType( SILGenFunction & SGF) const &",3, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::getLoweredImplodedTupleType( SILGenFunction & SGF) const &",7, 2, 0, 0
repos/cpp/swift/lib/SILGen/RValue.cpp,"RValue::copyForDiagnostics() const",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"emitConstructorMetatypeArg( SILGenFunction & SGF , ValueDecl * ctor)",21, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"emitImplicitValueConstructorArg( SILGenFunction & SGF , SILLocation loc , CanType interfaceType , DeclContext * DC)",31, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"emitImplicitValueConstructor( SILGenFunction & SGF , ConstructorDecl * ctor)",108, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"SILGenFunction::emitValueConstructor( ConstructorDecl * ctor)",183, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"SILGenFunction::emitEnumConstructor( EnumElementDecl * element)",63, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"Lowering::usesObjCAllocator( ClassDecl * theClass)",10, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"SILGenFunction::emitClassConstructorAllocator( ConstructorDecl * ctor)",90, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"SILGenFunction::emitClassConstructorInitializer( ConstructorDecl * ctor)",239, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"emitSelfForMemberInit( SILGenFunction & SGF , SILLocation loc , VarDecl * selfDecl)",12, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"emitLValueForMemberInit( SILGenFunction & SGF , SILLocation loc , VarDecl * selfDecl , VarDecl * property)",9, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"emitMemberInit( SILGenFunction & SGF , VarDecl * selfDecl , Pattern * pattern , RValue && src)",52, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"getInitializationTypeInContext( DeclContext * fromDC , DeclContext * toDC , Pattern * pattern)",8, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"SILGenFunction::emitMemberInitializers( DeclContext * dc , VarDecl * selfDecl , NominalTypeDecl * nominal)",57, 2, 0, 0
repos/cpp/swift/lib/SILGen/SILGenConstructor.cpp,"SILGenFunction::emitIVarInitializer( SILDeclRef ivarInitializer)",30, 2, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"Action::getClassName( Kind AC)",18, 2, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"InputAction::anchor()",1, 30, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"JobAction::anchor()",1, 28, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"CompileJobAction::anchor()",1, 35, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"InterpretJobAction::anchor()",1, 37, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"BackendJobAction::anchor()",1, 35, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"MergeModuleJobAction::anchor()",1, 39, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"ModuleWrapJobAction::anchor()",1, 38, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"AutolinkExtractJobAction::anchor()",1, 43, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"REPLJobAction::anchor()",1, 32, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"LinkJobAction::anchor()",1, 32, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"GenerateDSYMJobAction::anchor()",1, 40, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"VerifyDebugInfoJobAction::anchor()",1, 43, 0, 0
repos/cpp/swift/lib/Driver/Action.cpp,"GeneratePCHJobAction::anchor()",1, 39, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::Driver( StringRef DriverExecutable , StringRef Name , ArrayRef<const char*> Args , DiagnosticEngine & Diags)",12, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::parseDriverKind( ArrayRef<const char*> Args)",28, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::getArgsWithoutProgramNameAndDriverMode( ArrayRef<const char*> Args) const",12, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"validateBridgingHeaderArgs( DiagnosticEngine & diags , const ArgList & args)",13, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"validateDeploymentTarget( DiagnosticEngine & diags , const ArgList & args)",35, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"validateWarningControlArgs( DiagnosticEngine & diags , const ArgList & args)",8, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"validateProfilingArgs( DiagnosticEngine & diags , const ArgList & args)",15, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"validateDebugInfoArgs( DiagnosticEngine & diags , const ArgList & args)",17, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"validateCompilationConditionArgs( DiagnosticEngine & diags , const ArgList & args)",17, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"validateAutolinkingArgs( DiagnosticEngine & diags , const ArgList & args)",16, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"validateArgs( DiagnosticEngine & diags , const ArgList & args)",9, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::buildToolChain( const llvm :: opt :: InputArgList & ArgList)",33, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::buildTaskQueue( const Compilation & C)",26, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"computeArgsHash( SmallString<32> & out , const DerivedArgList & args)",28, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"getCompilationRecordPath( std :: string & buildRecordPath , bool & outputBuildRecordForModuleOnlyBuild , const OutputInfo & OI , const Optional<OutputFileMap> & OFM , DiagnosticEngine * Diags)",37, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"failedToReadOutOfDateMap( bool ShowIncrementalBuildDecisions , StringRef buildRecordPath , StringRef reason = "")",13, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"populateOutOfDateMap( InputInfoMap & map , llvm :: sys :: TimePoint<> & LastBuildTime , StringRef argsHashStr , const InputFileList & inputs , StringRef buildRecordPath , bool ShowIncrementalBuildDecisions)",211, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"validateEmbedBitcode( DerivedArgList & Args , const OutputInfo & OI , DiagnosticEngine & Diags)",14, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"getFilelistThreshold( DerivedArgList & Args , size_t & FilelistThreshold , DiagnosticEngine & Diags)",23, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"getDriverBatchSeed( llvm :: opt :: InputArgList & ArgList , DiagnosticEngine & Diags)",11, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"getDriverBatchCount( llvm :: opt :: InputArgList & ArgList , DiagnosticEngine & Diags)",14, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"computeIncremental( const llvm :: opt :: InputArgList * ArgList , const bool ShowIncrementalBuildDecisions)",21, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"computeWorkingDirectory( const llvm :: opt :: InputArgList * ArgList)",10, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"createStatsReporter( const llvm :: opt :: InputArgList * ArgList , const InputFileList & Inputs , const OutputInfo OI , StringRef DefaultTargetTriple)",24, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"computeContinueBuildingAfterErrors( const bool BatchMode , const llvm :: opt :: InputArgList * ArgList)",18, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"getDriverBatchSizeLimit( llvm :: opt :: InputArgList & ArgList , DiagnosticEngine & Diags)",14, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::buildCompilation( const ToolChain & TC , std :: unique_ptr<llvm::opt::InputArgList> ArgList)",202, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"makeInputArg( const DerivedArgList & Args , OptTable & Opts , StringRef Value)",7, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"parseArgsUntil( const llvm :: opt :: OptTable & Opts , const char * const * ArgBegin , const char * const * ArgEnd , unsigned & MissingArgIndex , unsigned & MissingArgCount , unsigned FlagsToInclude , unsigned FlagsToExclude , llvm :: opt :: OptSpecifier UntilOption , RemainingArgsHandler RemainingHandler)",48, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"parseArgStringsForInteractiveDriver( const llvm :: opt :: OptTable & Opts , ArrayRef<const char*> Args , unsigned & MissingArgIndex , unsigned & MissingArgCount , unsigned FlagsToInclude , unsigned FlagsToExclude)",21, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::parseArgStrings( ArrayRef<const char*> Args)",48, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::translateInputAndPathArgs( const InputArgList & ArgList , StringRef workingDirectory) const",43, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"checkInputExistence( const Driver & D , const DerivedArgList & Args , DiagnosticEngine & Diags , StringRef Input)",15, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::buildInputs( const ToolChain & TC , const DerivedArgList & Args , InputFileList & Inputs) const",39, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"maybeBuildingExecutable( const OutputInfo & OI , const DerivedArgList & Args , const InputFileList & Inputs)",16, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"diagnoseOutputModeArg( DiagnosticEngine & diags , const Arg * arg , bool hasInputs , const DerivedArgList & args , bool isInteractiveDriver , StringRef driverName)",21, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"isSDKTooOld( StringRef sdkPath , llvm :: VersionTuple minVersion , StringRef firstPrefix , StringRef secondPrefix = { })",28, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"isSDKTooOld( StringRef sdkPath , const llvm :: Triple & target)",15, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::buildOutputInfo( const ToolChain & TC , const DerivedArgList & Args , const bool BatchMode , const InputFileList & Inputs , OutputInfo & OI) const",318, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::computeCompilerMode( const DerivedArgList & Args , const InputFileList & Inputs , bool & BatchModeOut) const",28, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::buildActions( SmallVectorImpl<const Action*> & TopLevelActions , const ToolChain & TC , const OutputInfo & OI , const InputInfoMap * OutOfDateMap , Compilation & C) const",298, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::handleImmediateArgs( const ArgList & Args , const ToolChain & TC)",27, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::buildOutputFileMap( const llvm :: opt :: DerivedArgList & Args , StringRef workingDirectory) const",16, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::buildJobs( ArrayRef<const Action*> TopLevelActions , const OutputInfo & OI , const OutputFileMap * OFM , StringRef workingDirectory , const ToolChain & TC , Compilation & C) const",37, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"formFilenameFromBaseAndExt( StringRef base , StringRef newExt , StringRef workingDirectory , SmallVectorImpl<char> & result)",15, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"getOutputFilenameFromPathArgOrAsTopLevel( const OutputInfo & OI , const llvm :: opt :: DerivedArgList & Args , llvm :: opt :: OptSpecifier PathArg , file_types :: ID ExpectedOutputType , bool TreatAsTopLevelOutput , StringRef workingDirectory , llvm :: SmallString<128> & Buffer)",33, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"assignOutputName( Compilation & C , const JobAction * JA , llvm :: SmallString<128> & Buffer , StringRef BaseName , PreserveOnSignal ShouldPreserveOnSignal)",19, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"baseNameForImage( const JobAction * JA , const OutputInfo & OI , const llvm :: Triple & Triple , llvm :: SmallString<128> & Buffer , StringRef BaseInput , StringRef BaseName)",23, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"getOutputFilename( Compilation & C , const JobAction * JA , const TypeToPathMap * OutputMap , StringRef workingDirectory , bool AtTopLevel , StringRef BaseInput , StringRef PrimaryInput , llvm :: SmallString<128> & Buffer)",86, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"hasExistingAdditionalOutput( CommandOutput & output , file_types :: ID outputType , StringRef outputPath = StringRef())",11, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"addAuxiliaryOutput( Compilation & C , CommandOutput & output , file_types :: ID outputType , const TypeToPathMap * outputMap , StringRef workingDirectory , StringRef outputPath = StringRef() , llvm :: opt :: OptSpecifier requireArg = llvm :: opt :: OptSpecifier())",55, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"addDiagFileOutputForPersistentPCHAction( Compilation & C , const GeneratePCHJobAction * JA , CommandOutput & output , const TypeToPathMap * outputMap , StringRef workingDirectory)",49, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"handleCompileJobCondition( Job * J , CompileJobAction :: InputInfo inputInfo , StringRef input , bool alwaysRebuildDependents)",43, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::buildJobsForAction( Compilation & C , const JobAction * JA , const OutputFileMap * OFM , StringRef workingDirectory , bool AtTopLevel , JobCacheMap & JobCache) const",212, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::computeMainOutput( Compilation & C , const JobAction * JA , const OutputFileMap * OFM , bool AtTopLevel , SmallVectorImpl<const Action*> & InputActions , SmallVectorImpl<const Job*> & InputJobs , const TypeToPathMap * OutputMap , StringRef workingDirectory , StringRef BaseInput , StringRef PrimaryInput , llvm :: SmallString<128> & Buf , CommandOutput * Output) const",52, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseSwiftModuleOutputPath( Compilation & C , const TypeToPathMap * OutputMap , StringRef workingDirectory , CommandOutput * Output) const",62, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseSwiftModuleDocOutputPath( Compilation & C , const TypeToPathMap * OutputMap , StringRef workingDirectory , CommandOutput * Output) const",30, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseRemappingOutputPath( Compilation & C , const TypeToPathMap * OutputMap , CommandOutput * Output) const",26, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseParseableInterfacePath( Compilation & C , const JobAction * JA , StringRef workingDirectory , llvm :: SmallString<128> & buffer , CommandOutput * output) const",27, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseSerializedDiagnosticsPath( Compilation & C , const JobAction * JA , const TypeToPathMap * OutputMap , StringRef workingDirectory , CommandOutput * Output) const",23, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseDependenciesOutputPaths( Compilation & C , const TypeToPathMap * OutputMap , StringRef workingDirectory , llvm :: SmallString<128> & Buf , CommandOutput * Output) const",15, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseLoadedModuleTracePath( Compilation & C , StringRef workingDirectory , llvm :: SmallString<128> & Buf , CommandOutput * Output) const",33, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseTBDPath( Compilation & C , const TypeToPathMap * OutputMap , StringRef workingDirectory , llvm :: SmallString<128> & Buf , CommandOutput * Output) const",13, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseOptimizationRecordPath( Compilation & C , StringRef workingDirectory , llvm :: SmallString<128> & Buf , CommandOutput * Output) const",16, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::chooseObjectiveCHeaderOutputPath( Compilation & C , const TypeToPathMap * OutputMap , StringRef workingDirectory , CommandOutput * Output) const",30, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"printActions( const Action * A , llvm :: DenseMap<const Action*,unsigned> & Ids)",26, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::printActions( const Compilation & C) const",6, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::printVersion( const ToolChain & TC , raw_ostream & OS) const",5, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"Driver::printHelp( bool ShowHidden) const",22, 2, 0, 0
repos/cpp/swift/lib/Driver/Driver.cpp,"OutputInfo::mightHaveExplicitPrimaryInputs( const CommandOutput & Output) const",14, 2, 0, 0
repos/cpp/swift/lib/Driver/FrontendUtil.cpp,"swift::driver::getSingleFrontendInvocationFromDriverArguments( ArrayRef<const char*> Argv , DiagnosticEngine & Diags , llvm :: function_ref<bool(ArrayRef<const char*>FrontendArgs)> Action)",63, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"addLinkSanitizerLibArgsForLinux( const ArgList & Args , ArgStringList & Arguments , StringRef Sanitizer , const ToolChain & TC)",20, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::GenericUnix::sanitizerRuntimeLibName( StringRef Sanitizer , bool shared) const",6, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::GenericUnix::constructInvocation( const InterpretJobAction & job , const JobContext & context) const",13, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::GenericUnix::constructInvocation( const AutolinkExtractJobAction & job , const JobContext & context) const",18, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::GenericUnix::getDefaultLinker() const",24, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::GenericUnix::getTargetForLinker() const",3, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::GenericUnix::shouldProvideRPathToLinker() const",3, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::GenericUnix::constructInvocation( const LinkJobAction & job , const JobContext & context) const",211, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::Android::getTargetForLinker() const",9, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::Android::shouldProvideRPathToLinker() const",1, 79, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::Cygwin::getDefaultLinker() const",4, 2, 0, 0
repos/cpp/swift/lib/Driver/UnixToolChains.cpp,"toolchains::Cygwin::getTargetForLinker() const",1, 74, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::JobContext::JobContext( Compilation & C , ArrayRef<const Job*> Inputs , ArrayRef<const Action*> InputActions , const CommandOutput & Output , const OutputInfo & OI)",6, 27, 4, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::JobContext::getTopLevelInputFiles() const",3, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::JobContext::getAllSourcesPath() const",3, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::JobContext::getTemporaryFilePath( const llvm :: Twine & name , StringRef suffix) const",14, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::constructJob( const JobAction & JA , Compilation & C , SmallVectorImpl<const Job*> && inputs , ArrayRef<const Action*> inputActions , std :: unique_ptr<CommandOutput> output , const OutputInfo & OI) const",75, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::findProgramRelativeToSwift( StringRef executableName) const",9, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::findProgramRelativeToSwiftImpl( StringRef executableName) const",9, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::lookupTypeForExtension( StringRef Ext) const",3, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"findSingleSwiftInput( const CompileJobAction * CJA)",17, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"jobsHaveSameExecutableNames( const Job * A , const Job * B)",11, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"jobsHaveSameOutputTypes( const Job * A , const Job * B)",6, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"jobsHaveSameEnvironment( const Job * A , const Job * B)",13, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::jobIsBatchable( const Compilation & C , const Job * A) const",9, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::jobsAreBatchCombinable( const Compilation & C , const Job * A , const Job * B) const",7, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"makeBatchCommandOutput( ArrayRef<const Job*> jobs , Compilation & C , file_types :: ID outputType)",9, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"mergeBatchInputs( ArrayRef<const Job*> jobs , llvm :: SmallSetVector<const Job*,16> & inputJobs , llvm :: SmallSetVector<const Action*,16> & inputActions , CompileJobAction * batchCJA)",31, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"sortJobsToMatchCompilationInputs( ArrayRef<const Job*> unsortedJobs , SmallVectorImpl<const Job*> & sortedJobs , Compilation & C)",19, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChain.cpp,"ToolChain::constructBatchJob( ArrayRef<const Job*> unsortedJobs , Job :: PID & NextQuasiPID , Compilation & C) const",45, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"LogJob::LogJob( const Job * j)",1, 33, 2, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"LogJobArray::LogJobArray( const ArrayRef<const Job*> js)",1, 58, 2, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"LogJobSet::LogJobSet( const SmallPtrSetImpl<const Job*> & js)",1, 63, 2, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"operator < <( llvm :: raw_ostream & os , const LogJob & lj)",4, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"operator < <( llvm :: raw_ostream & os , const LogJobArray & ljs)",8, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"operator < <( llvm :: raw_ostream & os , const LogJobSet & ljs)",8, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"Compilation::Compilation( DiagnosticEngine & Diags , const ToolChain & TC , OutputInfo const & OI , OutputLevel Level , std :: unique_ptr<InputArgList> InputArgs , std :: unique_ptr<DerivedArgList> TranslatedArgs , InputFileList InputsWithTypes , std :: string CompilationRecordPath , bool OutputCompilationRecordForModuleOnlyBuild , StringRef ArgsHash , llvm :: sys :: TimePoint<> StartTime , llvm :: sys :: TimePoint<> LastBuildTime , size_t FilelistThreshold , bool EnableIncrementalBuild , bool EnableBatchMode , unsigned BatchSeed , Optional<unsigned> BatchCount , Optional<unsigned> BatchSizeLimit , bool SaveTemps , bool ShowDriverTimeCompilation , std :: unique_ptr<UnifiedStatsReporter> StatsReporter , bool EnableExperimentalDependencies)",46, 3, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::noteBuilding( const Job * cmd , StringRef reason)",11, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::findUnfinishedJob( ArrayRef<const Job*> JL)",7, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::scheduleCommandIfNecessaryAndPossible( const Job * Cmd)",27, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::addPendingJobToTaskQueue( const Job * Cmd)",14, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::markFinished( const Job * Cmd , bool Skipped = false)",26, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::isBatchJob( const Job * MaybeBatchJob) const",3, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::taskBegan( ProcessId Pid , void * Context)",35, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::dependencyLoadFailed( StringRef DependenciesFile , bool Warn = true)",10, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::reloadAndRemarkDeps( const Job * FinishedCmd , int ReturnCode , SmallVector<const Job*,N> & Dependents)",82, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::jobWasBatchedWithFailingJobs( const Job * J) const",13, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::jobIsCancelledBatchConstituent( int ReturnCode , const Job * ContainerJob , const Job * ConstituentJob)",7, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::unpackAndFinishBatch( int ReturnCode , StringRef Output , StringRef Errors , const BatchJob * B)",18, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::emitParseableOutputForEachFinishedJob( ProcessId Pid , int ReturnCode , StringRef Output , const Job * FinishedCmd , TaskProcessInformation ProcInfo)",19, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::taskFinished( ProcessId Pid , int ReturnCode , StringRef Output , StringRef Errors , TaskProcessInformation ProcInfo , void * Context)",82, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::taskSignalled( ProcessId Pid , StringRef ErrorMsg , StringRef Output , StringRef Errors , void * Context , Optional<int> Signal , TaskProcessInformation ProcInfo)",45, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::PerformJobsState( Compilation & Comp , std :: unique_ptr<TaskQueue> && TaskQueue)",6, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::scheduleInitialJobs()",60, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::scheduleAdditionalJobs()",42, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::transferJobsToTaskQueue( Container & Cmds , StringRef Kind)",10, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::getPendingBatchableJobs( CommandSetVector & Batchable , CommandSetVector & NonBatchable)",14, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::formBatchJobFromPartitionBatch( std :: vector<const Job*> & Batches , std :: vector<const Job*> const & Batch)",12, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::assignJobsToPartitions( size_t PartitionSize , size_t NumJobs)",19, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::partitionIntoBatches( std :: vector<const Job*> Batchable , BatchPartition & Partition)",31, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::pickNumberOfPartitions()",107, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::formBatchJobsAndAddPendingJobsToTaskQueue()",35, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::runTaskQueueToCompletion()",60, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::checkUnfinishedJobs()",27, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::populateInputInfoMap( InputInfoMap & inputs) const",45, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::getResult()",5, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"swift::driver::PerformJobsState::hadAnyAbnormalExit()",3, 6, 4, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"Compilation::addJob( std :: unique_ptr<Job> J)",5, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"checkForOutOfDateInputs( DiagnosticEngine & diags , const InputInfoMap & inputs)",22, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"writeCompilationRecord( StringRef path , StringRef argsHash , llvm :: sys :: TimePoint<> buildTime , const InputInfoMap & inputs)",53, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"writeFilelistIfNecessary( const Job * job , const ArgList & args , DiagnosticEngine & diags)",62, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"Compilation::performJobsImpl( bool & abnormalExit , std :: unique_ptr<TaskQueue> && TQ)",27, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"Compilation::performSingleCommand( const Job * Cmd)",52, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"writeAllSourcesFile( DiagnosticEngine & diags , StringRef path , ArrayRef<InputPair> inputFiles)",19, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"Compilation::performJobs( std :: unique_ptr<TaskQueue> && TQ)",31, 2, 0, 0
repos/cpp/swift/lib/Driver/Compilation.cpp,"Compilation::getAllSourcesPath() const",18, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"toolchains::Darwin::findProgramRelativeToSwiftImpl( StringRef name) const",26, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"toolchains::Darwin::constructInvocation( const InterpretJobAction & job , const JobContext & context) const",15, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"getDarwinLibraryNameSuffixForTriple( const llvm :: Triple & triple , bool distinguishSimulator = true)",23, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"toolchains::Darwin::sanitizerRuntimeLibName( StringRef Sanitizer , bool shared) const",7, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"addLinkRuntimeLibRPath( const ArgList & Args , ArgStringList & Arguments , StringRef DarwinLibName , const ToolChain & TC)",24, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"addLinkSanitizerLibArgsForDarwin( const ArgList & Args , ArgStringList & Arguments , StringRef Sanitizer , const ToolChain & TC , bool shared = true)",17, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"findXcodeClangPath( llvm :: SmallVectorImpl<char> & path)",25, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"addVersionString( const ArgList & inputArgs , ArgStringList & arguments , unsigned major , unsigned minor , unsigned micro)",7, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"wantsObjCRuntime( const llvm :: Triple & triple)",17, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"toolchains::Darwin::constructInvocation( const LinkJobAction & job , const JobContext & context) const",269, 2, 0, 0
repos/cpp/swift/lib/Driver/DarwinToolChains.cpp,"toolchains::Darwin::shouldStoreInvocationInDebugInfo() const",7, 2, 0, 0
repos/cpp/swift/lib/Driver/WindowsToolChains.cpp,"toolchains::Windows::sanitizerRuntimeLibName( StringRef Sanitizer , bool shared) const",6, 2, 0, 0
repos/cpp/swift/lib/Driver/WindowsToolChains.cpp,"toolchains::Windows::constructInvocation( const LinkJobAction & job , const JobContext & context) const",140, 2, 0, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"CommandInput::CommandInput()",1, 22, 4, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"CommandInput::CommandInput( StringRef Path)",1, 49, 4, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"swift::json::ScalarTraits<CommandInput>::output( const CommandInput & value , llvm :: raw_ostream & os)",3, 6, 4, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"swift::json::ScalarTraits<CommandInput>::mustQuote( StringRef)",1, 54, 4, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"swift::json::ScalarEnumerationTraits<file_types::ID>::enumeration( Output & out , file_types :: ID & value)",6, 6, 4, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"swift::json::ObjectTraits<std::pair<file_types::ID,std::string>>::mapping( Output & out , std :: pair<file_types::ID,std::string> & value)",5, 6, 4, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"swift::json::ArrayTraits<SmallVector<T,N>>::size( Output & out , SmallVector<T,N> & seq)",3, 6, 4, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"swift::json::ArrayTraits<SmallVector<T,N>>::element( Output & out , SmallVector<T,N> & seq , size_t index)",5, 6, 4, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"Message::Message( StringRef Kind , StringRef Name)",1, 70, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"Message::provideMapping( swift :: json :: Output & out)",4, 4, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"CommandBasedMessage::CommandBasedMessage( StringRef Kind , const Job & Cmd)",2, 55, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"DetailedCommandBasedMessage::DetailedCommandBasedMessage( StringRef Kind , const Job & Cmd)",40, 4, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"DetailedCommandBasedMessage::provideMapping( swift :: json :: Output & out)",8, 4, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"TaskBasedMessage::TaskBasedMessage( StringRef Kind , const Job & Cmd , int64_t Pid)",2, 50, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"TaskBasedMessage::provideMapping( swift :: json :: Output & out)",4, 4, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"BeganMessage::BeganMessage( const Job & Cmd , int64_t Pid , TaskProcessInformation ProcInfo)",3, 30, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"BeganMessage::provideMapping( swift :: json :: Output & out)",5, 4, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"TaskOutputMessage::TaskOutputMessage( StringRef Kind , const Job & Cmd , int64_t Pid , StringRef Output , TaskProcessInformation ProcInfo)",3, 80, 6, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"TaskOutputMessage::provideMapping( swift :: json :: Output & out)",5, 4, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"FinishedMessage::FinishedMessage( const Job & Cmd , int64_t Pid , StringRef Output , TaskProcessInformation ProcInfo , int ExitStatus)",4, 34, 8, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"FinishedMessage::provideMapping( swift :: json :: Output & out)",4, 4, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"SignalledMessage::SignalledMessage( const Job & Cmd , int64_t Pid , StringRef Output , StringRef ErrorMsg , Optional<int> Signal , TaskProcessInformation ProcInfo)",5, 46, 6, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"SignalledMessage::provideMapping( swift :: json :: Output & out)",5, 4, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"SkippedMessage::SkippedMessage( const Job & Cmd)",2, 53, 6, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"swift::json::ObjectTraits<Message>::mapping( Output & out , Message & msg)",3, 4, 2, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"emitMessage( raw_ostream & os , Message & msg)",9, 2, 0, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"parseable_output::emitBeganMessage( raw_ostream & os , const Job & Cmd , int64_t Pid , TaskProcessInformation ProcInfo)",6, 2, 0, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"parseable_output::emitFinishedMessage( raw_ostream & os , const Job & Cmd , int64_t Pid , int ExitStatus , StringRef Output , TaskProcessInformation ProcInfo)",7, 2, 0, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"parseable_output::emitSignalledMessage( raw_ostream & os , const Job & Cmd , int64_t Pid , StringRef ErrorMsg , StringRef Output , Optional<int> Signal , TaskProcessInformation ProcInfo)",8, 2, 0, 0
repos/cpp/swift/lib/Driver/ParseableOutput.cpp,"parseable_output::emitSkippedMessage( raw_ostream & os , const Job & Cmd)",4, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::getOutputForInputAndType( StringRef PrimaryInputFile , file_types :: ID Type) const",13, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutputInvariantChecker::CommandOutputInvariantChecker( CommandOutput const & CO)",5, 4, 2, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutputInvariantChecker::~CommandOutputInvariantChecker()",5, 4, 2, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::ensureEntry( StringRef PrimaryInputFile , file_types :: ID Type , StringRef OutputFile , bool Overwrite)",20, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::checkInvariants() const",28, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::hasSameAdditionalOutputTypes( CommandOutput const & other) const",11, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::addOutputs( CommandOutput const & other)",14, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::CommandOutput( file_types :: ID PrimaryOutputType , OutputFileMap & Derived)",5, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::getPrimaryOutputType() const",3, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::addPrimaryOutput( CommandInputPair Input , StringRef PrimaryOutputFile)",22, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::getPrimaryOutputFilename() const",6, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::getPrimaryOutputFilenames() const",13, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::setAdditionalOutputForType( file_types :: ID Type , StringRef OutputFilename)",21, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::getAdditionalOutputForType( file_types :: ID Type) const",10, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::getAdditionalOutputsForType( file_types :: ID Type) const",17, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::getAnyOutputForType( file_types :: ID Type) const",5, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::getDerivedOutputMap() const",3, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::getBaseInput( size_t Index) const",4, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"escapeAndPrintString( llvm :: raw_ostream & os , StringRef Str)",34, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::print( raw_ostream & out) const",22, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"CommandOutput::writeOutputFileMap( llvm :: raw_ostream & out) const",9, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"Job::printArguments( raw_ostream & os , const llvm :: opt :: ArgStringList & Args)",6, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"Job::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"Job::getArgumentsForTaskExecution() const",8, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"Job::printCommandLineAndEnvironment( raw_ostream & Stream , StringRef Terminator) const",11, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"Job::printCommandLine( raw_ostream & os , StringRef Terminator) const",11, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"Job::printSummary( raw_ostream & os) const",46, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"Job::writeArgsToResponseFile() const",13, 2, 0, 0
repos/cpp/swift/lib/Driver/Job.cpp,"BatchJob::BatchJob( const JobAction & Source , SmallVectorImpl<const Job*> && Inputs , std :: unique_ptr<CommandOutput> Output , const char * Executable , llvm :: opt :: ArgStringList Arguments , EnvironmentVector ExtraEnvironment , std :: vector<FilelistInfo> Infos , ArrayRef<const Job*> Combined , int64_t & NextQuasiPID)",16, 2, 0, 0
repos/cpp/swift/lib/Driver/DependencyGraph.cpp,"DependencyGraphImpl::MarkTracerImpl::MarkTracerImpl( UnifiedStatsReporter * Stats)",2, 20, 0, 0
repos/cpp/swift/lib/Driver/DependencyGraph.cpp,"parseDependencyFile( llvm :: MemoryBuffer & buffer , llvm :: function_ref<DependencyCallbackTy> providesCallback , llvm :: function_ref<DependencyCallbackTy> dependsCallback , llvm :: function_ref<InterfaceHashCallbackTy> interfaceHashCallback)",156, 17, 2, 0
repos/cpp/swift/lib/Driver/DependencyGraph.cpp,"DependencyGraphImpl::loadFromPath( const void * node , StringRef path)",6, 46, 2, 0
repos/cpp/swift/lib/Driver/DependencyGraph.cpp,"DependencyGraphImpl::loadFromString( const void * node , StringRef data)",4, 40, 0, 0
repos/cpp/swift/lib/Driver/DependencyGraph.cpp,"DependencyGraphImpl::loadFromBuffer( const void * node , llvm :: MemoryBuffer & buffer)",69, 53, 2, 0
repos/cpp/swift/lib/Driver/DependencyGraph.cpp,"DependencyGraphImpl::markExternal( SmallVectorImpl<const void*> & visited , StringRef externalDependency)",16, 4, 2, 0
repos/cpp/swift/lib/Driver/DependencyGraph.cpp,"DependencyGraphImpl::markTransitive( SmallVectorImpl<const void*> & visited , const void * node , MarkTracerImpl * tracer)",86, 4, 2, 0
repos/cpp/swift/lib/Driver/DependencyGraph.cpp,"DependencyGraphImpl::MarkTracerImpl::countStatsForNodeMarking( const OptionSet<DependencyKind> & Kind , bool IsCascading) const",31, 4, 2, 0
repos/cpp/swift/lib/Driver/DependencyGraph.cpp,"DependencyGraphImpl::MarkTracerImpl::printPath( raw_ostream & out , const void * item , llvm :: function_ref<void(const void*)> printItem) const",49, 4, 2, 0
repos/cpp/swift/lib/Driver/PrettyStackTrace.cpp,"PrettyStackTraceDriverAction::print( llvm :: raw_ostream & out) const",10, 2, 0, 0
repos/cpp/swift/lib/Driver/PrettyStackTrace.cpp,"PrettyStackTraceDriverJob::print( llvm :: raw_ostream & out) const",5, 2, 0, 0
repos/cpp/swift/lib/Driver/PrettyStackTrace.cpp,"PrettyStackTraceDriverCommandOutput::print( llvm :: raw_ostream & out) const",5, 2, 0, 0
repos/cpp/swift/lib/Driver/PrettyStackTrace.cpp,"PrettyStackTraceDriverCommandOutputAddition::print( llvm :: raw_ostream & out) const",8, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::JobContext::shouldUseInputFileList() const",3, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::JobContext::shouldUsePrimaryInputFileListInFrontendInvocation() const",4, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::JobContext::shouldUseMainOutputFileListInFrontendInvocation() const",4, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::JobContext::shouldUseSupplementaryOutputFileMapInFrontendInvocation() const",7, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::JobContext::shouldFilterFrontendInputsByType() const",5, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::addInputsOfType( ArgStringList & Arguments , ArrayRef<const Action*> Inputs , file_types :: ID InputType , const char * PrefixArgument) const",12, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::addInputsOfType( ArgStringList & Arguments , ArrayRef<const Job*> Jobs , const llvm :: opt :: ArgList & Args , file_types :: ID InputType , const char * PrefixArgument) const",14, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::addPrimaryInputsOfType( ArgStringList & Arguments , ArrayRef<const Job*> Jobs , const llvm :: opt :: ArgList & Args , file_types :: ID InputType , const char * PrefixArgument) const",16, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"addOutputsOfType( ArgStringList & Arguments , CommandOutput const & Output , const llvm :: opt :: ArgList & Args , file_types :: ID OutputType , const char * PrefixArgument = nullptr)",15, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"addCommonFrontendArgs( const ToolChain & TC , const OutputInfo & OI , const CommandOutput & output , const ArgList & inputArgs , ArgStringList & arguments)",121, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const CompileJobAction & job , const JobContext & context) const",129, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::JobContext::computeFrontendModeForCompile() const",67, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::JobContext::addFrontendInputAndOutputArguments( ArgStringList & Arguments , std :: vector<FilelistInfo> & FilelistInfos) const",55, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::JobContext::addFrontendCommandLineInputArguments( const bool mayHavePrimaryInputs , const bool useFileList , const bool usePrimaryFileList , const bool filterByType , ArgStringList & arguments) const",34, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::JobContext::addFrontendSupplementaryOutputArguments( ArgStringList & arguments) const",34, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const InterpretJobAction & job , const JobContext & context) const",37, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const BackendJobAction & job , const JobContext & context) const",139, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const MergeModuleJobAction & job , const JobContext & context) const",78, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const ModuleWrapJobAction & job , const JobContext & context) const",27, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const REPLJobAction & job , const JobContext & context) const",45, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const GenerateDSYMJobAction & job , const JobContext & context) const",18, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const VerifyDebugInfoJobAction & job , const JobContext & context) const",18, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const GeneratePCHJobAction & job , const JobContext & context) const",37, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const AutolinkExtractJobAction & job , const JobContext & context) const",4, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::constructInvocation( const LinkJobAction & job , const JobContext & context) const",4, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::addPathEnvironmentVariableIfNeeded( Job :: EnvironmentVector & env , const char * name , const char * separator , options :: ID optionID , const ArgList & args , StringRef extraEntry) const",22, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::addLinkRuntimeLib( const ArgList & Args , ArgStringList & Arguments , StringRef LibName) const",7, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::getClangLibraryPath( const ArgList & Args , SmallString<128> & LibPath) const",11, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::getRuntimeLibraryPath( SmallVectorImpl<char> & runtimeLibPath , const llvm :: opt :: ArgList & args , bool shared) const",20, 2, 0, 0
repos/cpp/swift/lib/Driver/ToolChains.cpp,"ToolChain::sanitizerRuntimeLibExists( const ArgList & args , StringRef sanitizerName , bool shared) const",9, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"TypeConverter::getAbstractionPattern( AbstractStorageDecl * decl , bool isNonObjC)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"TypeConverter::getAbstractionPattern( SubscriptDecl * decl , bool isNonObjC)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"getClangType( const clang :: Decl * decl)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"getClangDeclBridgeability( const clang :: Decl * decl)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"TypeConverter::getAbstractionPattern( VarDecl * var , bool isNonObjC)",24, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"TypeConverter::getAbstractionPattern( EnumElementDecl * decl)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::EncodedForeignErrorInfo::encode( const Optional<ForeignErrorConvention> & foreignError)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getObjCMethod( CanType origType , const clang :: ObjCMethodDecl * method , const Optional<ForeignErrorConvention> & foreignError)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getCurriedObjCMethod( CanType origType , const clang :: ObjCMethodDecl * method , const Optional<ForeignErrorConvention> & foreignError)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getCurriedCFunctionAsMethod( CanType origType , const AbstractFunctionDecl * function)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getOptional( AbstractionPattern object)",30, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::isConcreteType() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::requiresClass()",21, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::matchesTuple( CanTupleType substType)",25, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"getClangFunctionType( const clang :: Type * clangType)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"getClangFunctionParameterType( const clang :: Type * ty , unsigned index)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"getClangArrayElementType( const clang :: Type * ty , unsigned index)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"getCanTupleElementType( CanType type , unsigned index)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getTupleElementType( unsigned index) const",30, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getObjCMethodSelfPattern( CanType selfType) const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getCFunctionAsMethodSelfPattern( CanType selfType) const",17, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"getResultType( CanType type)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getFunctionResultType() const",43, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getFunctionParamType( unsigned index) const",98, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getNumFunctionParams() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"getOptionalObjectType( CanType type)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getOptionalObjectType() const",34, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::getReferenceStorageReferentType() const",27, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::print( raw_ostream & out) const",81, 2, 0, 0
repos/cpp/swift/lib/SIL/AbstractionPattern.cpp,"AbstractionPattern::hasSameBasicTypeStructure( CanType l , CanType r)",55, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDebugScope.cpp,"SILDebugScope::SILDebugScope( SILLocation Loc , SILFunction * SILFn , const SILDebugScope * ParentScope , const SILDebugScope * InlinedCallSite)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDebugScope.cpp,"SILDebugScope::SILDebugScope( SILLocation Loc)",2, 44, 0, 0
repos/cpp/swift/lib/SIL/SILDebugScope.cpp,"SILDebugScope::getInlinedFunction() const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDebugScope.cpp,"SILDebugScope::getParentFunction() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::SILBuilder( SILGlobalVariable * GlobVar , SmallVectorImpl<SILInstruction*> * InsertedInstrs)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::createIntegerLiteral( IntegerLiteralExpr * E)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::createFloatLiteral( FloatLiteralExpr * E)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::createTuple( SILLocation loc , ArrayRef<SILValue> elts)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::getPartialApplyResultType( SILType origTy , unsigned argCount , SILModule & M , SubstitutionMap subs , ParameterConvention calleeConvention)",43, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::tryCreateUncheckedRefCast( SILLocation Loc , SILValue Op , SILType ResultTy)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::createClassifyBridgeObject( SILLocation Loc , SILValue value)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::createUncheckedBitCast( SILLocation Loc , SILValue Op , SILType Ty)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::createBranch( SILLocation Loc , SILBasicBlock * TargetBlock , OperandValueArrayRef Args)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitBlock( SILBasicBlock * BB , SILLocation BranchLoc)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::splitBlockForFallthrough()",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"setAccessToDeinit( BeginAccessInst * beginAccess)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitDestroyAddr( SILLocation Loc , SILValue Operand)",63, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"couldReduceStrongRefcount( SILInstruction * Inst)",58, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitStrongRelease( SILLocation Loc , SILValue Operand)",27, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitReleaseValue( SILLocation Loc , SILValue Operand)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitDestroyValue( SILLocation Loc , SILValue Operand)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitThickToObjCMetatype( SILLocation Loc , SILValue Op , SILType Ty)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitObjCToThickMetatype( SILLocation Loc , SILValue Op , SILType Ty)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::addOpenedArchetypeOperands( SILInstruction * I)",45, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::createValueMetatype( SILLocation Loc , SILType MetatypeTy , SILValue Base)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitShallowDestructureValueOperation( SILLocation Loc , SILValue V , llvm :: SmallVectorImpl<SILValue> & Results)",26, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitShallowDestructureAddressOperation( SILLocation Loc , SILValue V , llvm :: SmallVectorImpl<SILValue> & Results)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::createDebugValue( SILLocation Loc , SILValue src , SILDebugVariable Var)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::createDebugValueAddr( SILLocation Loc , SILValue src , SILDebugVariable Var)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBuilder.cpp,"SILBuilder::emitScopedBorrowOperation( SILLocation loc , SILValue original , function_ref<void(SILValue)> && fun)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getExceptionType( const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getNativeObjectType( const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getBridgeObjectType( const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getUnknownObjectType( const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getRawPointerType( const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getBuiltinIntegerLiteralType( const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getBuiltinIntegerType( unsigned bitWidth , const ASTContext & C)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getBuiltinFloatType( BuiltinFloatType :: FPKind Kind , const ASTContext & C)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getBuiltinWordType( const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getOptionalType( SILType type)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getSILTokenType( const ASTContext & C)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::isTrivial( SILModule & M) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::isReferenceCounted( SILModule & M) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::isNoReturnFunction() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getAsString() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::isPointerSizeAndAligned()",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::canRefCast( SILType operTy , SILType resultTy , SILModule & M)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getFieldType( VarDecl * field , SILModule & M) const",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getEnumElementType( EnumElementDecl * elt , SILModule & M) const",24, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::isLoadableOrOpaque( SILModule & M) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::isAddressOnly( SILModule & M) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::substGenericArgs( SILModule & M , SubstitutionMap SubMap) const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::isHeapObjectReferenceType() const",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getMetatypeInstanceType( SILModule & M) const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::aggregateContainsRecord( SILType Record , SILModule & Mod) const",48, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::aggregateHasUnreferenceableStorage() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getOptionalObjectType() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::unwrapOptionalType() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"isBridgedErrorClass( SILModule & M , Type t)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getPreferredExistentialRepresentation( SILModule & M , Type containedType) const",30, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::canUseExistentialRepresentation( SILModule & M , ExistentialRepresentation repr , Type containedType) const",38, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::getReferentType( SILModule & M) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::mapTypeOutOfContext() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILBoxType::getFieldLoweredType( SILModule & M , unsigned index) const",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILResultInfo::getOwnershipKind( SILModule & M , CanGenericSignature signature) const",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILModuleConventions::SILModuleConventions( const SILModule & M)",3, 64, 4, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILModuleConventions::isReturnedIndirectlyInSIL( SILType type , SILModule & M)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILModuleConventions::isPassedIndirectlyInSIL( SILType type , SILModule & M)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILFunctionType::isNoReturnFunction() const",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"areOnlyAbstractionDifferent( CanType type1 , CanType type2)",59, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::hasAbstractionDifference( SILFunctionTypeRepresentation rep , SILType type2)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILType.cpp,"SILType::isLoweringOf( SILModule & Mod , CanType formalType)",56, 2, 0, 0
repos/cpp/swift/lib/SIL/Dominance.cpp,"DominanceInfo::DominanceInfo( SILFunction * F)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/Dominance.cpp,"DominanceInfo::properlyDominates( SILInstruction * a , SILInstruction * b)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/Dominance.cpp,"DominanceInfo::properlyDominates( SILValue a , SILInstruction * b)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/Dominance.cpp,"DominanceInfo::verify() const",14, 2, 0, 0
repos/cpp/swift/lib/SIL/Dominance.cpp,"PostDominanceInfo::PostDominanceInfo( SILFunction * F)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/Dominance.cpp,"PostDominanceInfo::properlyDominates( SILInstruction * I1 , SILInstruction * I2)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/Dominance.cpp,"PostDominanceInfo::verify() const",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILArgument::SILArgument( ValueKind ChildKind , SILBasicBlock * ParentBB , SILType Ty , ValueOwnershipKind OwnershipKind , const ValueDecl * D)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILArgument::SILArgument( ValueKind ChildKind , SILBasicBlock * ParentBB , SILBasicBlock :: arg_iterator Pos , SILType Ty , ValueOwnershipKind OwnershipKind , const ValueDecl * D)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILArgument::getFunction()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILArgument::getFunction() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILArgument::getModule() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILPhiArgument::isPhiArgument()",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"getIncomingPhiValueForPred( const SILBasicBlock * BB , const SILBasicBlock * Pred , unsigned Index)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILPhiArgument::getIncomingPhiValue( SILBasicBlock * predBB)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILPhiArgument::getIncomingPhiValues( llvm :: SmallVectorImpl<SILValue> & ReturnedPhiValues)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILPhiArgument::getIncomingPhiValues( llvm :: SmallVectorImpl<std::pair<SILBasicBlock*,SILValue>> & ReturnedPredBBAndPhiValuePairs)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"getSingleTerminatorOperandForPred( const SILBasicBlock * BB , const SILBasicBlock * Pred , unsigned Index)",31, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILPhiArgument::getSingleTerminatorOperands( llvm :: SmallVectorImpl<SILValue> & OutArray)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILPhiArgument::getSingleTerminatorOperands( llvm :: SmallVectorImpl<std::pair<SILBasicBlock*,SILValue>> & OutArray)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILPhiArgument::getSingleTerminatorOperand() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"BranchInst::getArgForOperand( const Operand * oper) const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"CondBranchInst::getArgForOperand( const Operand * oper) const",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILArgument.cpp,"SILFunctionArgument::isSelf() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"allocateTrailingInst( SILFunction & F , CountTypes ... counts)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"collectDependentTypeInfo( CanType Ty , SmallVectorImpl<CanArchetypeType> & openedArchetypes , bool & hasDynamicSelf)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"buildTypeDependentOperands( SmallVectorImpl<CanArchetypeType> & OpenedArchetypes , bool hasDynamicSelf , SmallVectorImpl<SILValue> & TypeDependentOperands , SILOpenedArchetypesState & OpenedArchetypesState , SILFunction & F)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"collectTypeDependentOperands( SmallVectorImpl<SILValue> & TypeDependentOperands , SILOpenedArchetypesState & OpenedArchetypesState , SILFunction & F , CanType Ty , SubstitutionMap subs = { })",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"allocateDebugVarCarryingInst( SILModule & M , Optional<SILDebugVariable> Var , ArrayRef<SILValue> Operands = { })",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TailAllocatedDebugVariable::TailAllocatedDebugVariable( Optional<SILDebugVariable> Var , char * buf)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TailAllocatedDebugVariable::getName( const char * buf) const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocStackInst::AllocStackInst( SILDebugLocation Loc , SILType elementType , ArrayRef<SILValue> TypeDependentOperands , SILFunction & F , Optional<SILDebugVariable> Var)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocStackInst::create( SILDebugLocation Loc , SILType elementType , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes , Optional<SILDebugVariable> Var)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocStackInst::getDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocStackInst::getSingleDeallocStack() const",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocRefInstBase::AllocRefInstBase( SILInstructionKind Kind , SILDebugLocation Loc , SILType ObjectType , bool objc , bool canBeOnStack , ArrayRef<SILType> ElementTypes)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocRefInst::create( SILDebugLocation Loc , SILFunction & F , SILType ObjectType , bool objc , bool canBeOnStack , ArrayRef<SILType> ElementTypes , ArrayRef<SILValue> ElementCountOperands , SILOpenedArchetypesState & OpenedArchetypes)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocRefDynamicInst::create( SILDebugLocation DebugLoc , SILFunction & F , SILValue metatypeOperand , SILType ty , bool objc , ArrayRef<SILType> ElementTypes , ArrayRef<SILValue> ElementCountOperands , SILOpenedArchetypesState & OpenedArchetypes)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocBoxInst::AllocBoxInst( SILDebugLocation Loc , CanSILBoxType BoxType , ArrayRef<SILValue> TypeDependentOperands , SILFunction & F , Optional<SILDebugVariable> Var)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocBoxInst::create( SILDebugLocation Loc , CanSILBoxType BoxType , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes , Optional<SILDebugVariable> Var)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocBoxInst::getDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DebugValueInst::DebugValueInst( SILDebugLocation DebugLoc , SILValue Operand , SILDebugVariable Var)",4, 50, 6, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DebugValueInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILModule & M , SILDebugVariable Var)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DebugValueAddrInst::DebugValueAddrInst( SILDebugLocation DebugLoc , SILValue Operand , SILDebugVariable Var)",5, 50, 6, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DebugValueAddrInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILModule & M , SILDebugVariable Var)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DebugValueInst::getDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DebugValueAddrInst::getDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"declareWitnessTable( SILModule & Mod , ProtocolConformanceRef conformanceRef)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocExistentialBoxInst::create( SILDebugLocation Loc , SILType ExistentialType , CanType ConcreteType , ArrayRef<ProtocolConformanceRef> Conformances , SILFunction * F , SILOpenedArchetypesState & OpenedArchetypes)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocValueBufferInst::AllocValueBufferInst( SILDebugLocation DebugLoc , SILType valueType , SILValue operand , ArrayRef<SILValue> TypeDependentOperands)",6, 80, 49, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocValueBufferInst::create( SILDebugLocation DebugLoc , SILType valueType , SILValue operand , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"BuiltinInst::create( SILDebugLocation Loc , Identifier Name , SILType ReturnType , SubstitutionMap Substitutions , ArrayRef<SILValue> Args , SILModule & M)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"BuiltinInst::BuiltinInst( SILDebugLocation Loc , Identifier Name , SILType ReturnType , SubstitutionMap Subs , ArrayRef<SILValue> Args)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"InitBlockStorageHeaderInst::create( SILFunction & F , SILDebugLocation DebugLoc , SILValue BlockStorage , SILValue InvokeFunction , SILType BlockType , SubstitutionMap Subs)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"ApplyInst::ApplyInst( SILDebugLocation Loc , SILValue Callee , SILType SubstCalleeTy , SILType Result , SubstitutionMap Subs , ArrayRef<SILValue> Args , ArrayRef<SILValue> TypeDependentOperands , bool isNonThrowing , const GenericSpecializationInformation * SpecializationInfo)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"ApplyInst::create( SILDebugLocation Loc , SILValue Callee , SubstitutionMap Subs , ArrayRef<SILValue> Args , bool isNonThrowing , Optional<SILModuleConventions> ModuleConventions , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes , const GenericSpecializationInformation * SpecializationInfo)",25, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"BeginApplyInst::BeginApplyInst( SILDebugLocation loc , SILValue callee , SILType substCalleeTy , ArrayRef<SILType> allResultTypes , ArrayRef<ValueOwnershipKind> allResultOwnerships , SubstitutionMap subs , ArrayRef<SILValue> args , ArrayRef<SILValue> typeDependentOperands , bool isNonThrowing , const GenericSpecializationInformation * specializationInfo)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"BeginApplyInst::create( SILDebugLocation loc , SILValue callee , SubstitutionMap subs , ArrayRef<SILValue> args , bool isNonThrowing , Optional<SILModuleConventions> moduleConventions , SILFunction & F , SILOpenedArchetypesState & openedArchetypes , const GenericSpecializationInformation * specializationInfo)",43, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"swift::doesApplyCalleeHaveSemantics( SILValue callee , StringRef semantics)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"PartialApplyInst::PartialApplyInst( SILDebugLocation Loc , SILValue Callee , SILType SubstCalleeTy , SubstitutionMap Subs , ArrayRef<SILValue> Args , ArrayRef<SILValue> TypeDependentOperands , SILType ClosureType , const GenericSpecializationInformation * SpecializationInfo)",12, 38, 22, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"PartialApplyInst::create( SILDebugLocation Loc , SILValue Callee , ArrayRef<SILValue> Args , SubstitutionMap Subs , ParameterConvention CalleeConvention , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes , const GenericSpecializationInformation * SpecializationInfo)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TryApplyInstBase::TryApplyInstBase( SILInstructionKind kind , SILDebugLocation loc , SILBasicBlock * normalBB , SILBasicBlock * errorBB)",5, 73, 4, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TryApplyInst::TryApplyInst( SILDebugLocation Loc , SILValue callee , SILType substCalleeTy , SubstitutionMap subs , ArrayRef<SILValue> args , ArrayRef<SILValue> TypeDependentOperands , SILBasicBlock * normalBB , SILBasicBlock * errorBB , const GenericSpecializationInformation * SpecializationInfo)",9, 34, 22, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TryApplyInst::create( SILDebugLocation loc , SILValue callee , SubstitutionMap subs , ArrayRef<SILValue> args , SILBasicBlock * normalBB , SILBasicBlock * errorBB , SILFunction & F , SILOpenedArchetypesState & openedArchetypes , const GenericSpecializationInformation * specializationInfo)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"FunctionRefBaseInst::FunctionRefBaseInst( SILInstructionKind Kind , SILDebugLocation DebugLoc , SILFunction * F)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"FunctionRefBaseInst::dropReferencedFunction()",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"FunctionRefBaseInst::~FunctionRefBaseInst()",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"FunctionRefInst::FunctionRefInst( SILDebugLocation Loc , SILFunction * F)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DynamicFunctionRefInst::DynamicFunctionRefInst( SILDebugLocation Loc , SILFunction * F)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"PreviousDynamicFunctionRefInst::PreviousDynamicFunctionRefInst( SILDebugLocation Loc , SILFunction * F)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AllocGlobalInst::AllocGlobalInst( SILDebugLocation Loc , SILGlobalVariable * Global)",4, 24, 7, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"GlobalAddrInst::GlobalAddrInst( SILDebugLocation DebugLoc , SILGlobalVariable * Global)",4, 33, 4, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"GlobalValueInst::GlobalValueInst( SILDebugLocation DebugLoc , SILGlobalVariable * Global)",4, 33, 4, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"BuiltinInst::getIntrinsicInfo() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"BuiltinInst::getBuiltinInfo() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"getWordsForBitWidth( unsigned bits)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"allocateLiteralInstWithTextSize( SILModule & M , unsigned length)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"allocateLiteralInstWithBitSize( SILModule & M , unsigned bits)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"IntegerLiteralInst::IntegerLiteralInst( SILDebugLocation Loc , SILType Ty , const llvm :: APInt & Value)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"IntegerLiteralInst::create( SILDebugLocation Loc , SILType Ty , const APInt & Value , SILModule & M)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"getAPInt( AnyBuiltinIntegerType * anyIntTy , intmax_t value)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"IntegerLiteralInst::create( SILDebugLocation Loc , SILType Ty , intmax_t Value , SILModule & M)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"getGreatestIntegerType( Type type , SILModule & M)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"IntegerLiteralInst::create( IntegerLiteralExpr * E , SILDebugLocation Loc , SILModule & M)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"IntegerLiteralInst::getValue() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"FloatLiteralInst::FloatLiteralInst( SILDebugLocation Loc , SILType Ty , const APInt & Bits)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"FloatLiteralInst::create( SILDebugLocation Loc , SILType Ty , const APFloat & Value , SILModule & M)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"FloatLiteralInst::create( FloatLiteralExpr * E , SILDebugLocation Loc , SILModule & M)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"FloatLiteralInst::getBits() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"FloatLiteralInst::getValue() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"StringLiteralInst::StringLiteralInst( SILDebugLocation Loc , StringRef Text , Encoding encoding , SILType Ty)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"StringLiteralInst::create( SILDebugLocation Loc , StringRef text , Encoding encoding , SILModule & M)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"StringLiteralInst::getCodeUnitCount()",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"StoreInst::StoreInst( SILDebugLocation Loc , SILValue Src , SILValue Dest , StoreOwnershipQualifier Qualifier = StoreOwnershipQualifier :: Unqualified)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"StoreBorrowInst::StoreBorrowInst( SILDebugLocation DebugLoc , SILValue Src , SILValue Dest)",4, 35, 4, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"swift::getSILAccessKindName( SILAccessKind kind)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"swift::getSILAccessEnforcementName( SILAccessEnforcement enforcement)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"AssignInst::AssignInst( SILDebugLocation Loc , SILValue Src , SILValue Dest)",2, 57, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"MarkFunctionEscapeInst::create( SILDebugLocation Loc , ArrayRef<SILValue> Elements , SILFunction & F)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"CopyAddrInst::CopyAddrInst( SILDebugLocation Loc , SILValue SrcLValue , SILValue DestLValue , IsTake_t isTakeOfSrc , IsInitialization_t isInitializationOfDest)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"BindMemoryInst::create( SILDebugLocation Loc , SILValue Base , SILValue Index , SILType BoundType , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"UncheckedRefCastAddrInst::UncheckedRefCastAddrInst( SILDebugLocation Loc , SILValue src , CanType srcType , SILValue dest , CanType targetType)",7, 80, 6, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"UnconditionalCheckedCastAddrInst::UnconditionalCheckedCastAddrInst( SILDebugLocation Loc , SILValue src , CanType srcType , SILValue dest , CanType targetType)",5, 80, 6, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"StructInst::create( SILDebugLocation Loc , SILType Ty , ArrayRef<SILValue> Elements , SILModule & M , bool HasOwnership)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"StructInst::StructInst( SILDebugLocation Loc , SILType Ty , ArrayRef<SILValue> Elems , bool HasOwnership)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"ObjectInst::create( SILDebugLocation Loc , SILType Ty , ArrayRef<SILValue> Elements , unsigned NumBaseElements , SILModule & M , bool HasOwnership)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TupleInst::create( SILDebugLocation Loc , SILType Ty , ArrayRef<SILValue> Elements , SILModule & M , bool HasOwnership)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TupleExtractInst::isTrivialEltOfOneRCIDTuple() const",46, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TupleExtractInst::isEltOnlyNonTrivialElt() const",33, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"StructExtractInst::isTrivialFieldOfOneRCIDStruct() const",46, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"StructExtractInst::isFieldOnlyNonTrivialField() const",31, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TermInst::getSuccessors()",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TermInst::isFunctionExiting() const",23, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TermInst::isProgramTerminating() const",23, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"TermInst::getSuccessorBlockArguments() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"YieldInst::create( SILDebugLocation loc , ArrayRef<SILValue> yieldedValues , SILBasicBlock * normalBB , SILBasicBlock * unwindBB , SILFunction & F)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"BranchInst::create( SILDebugLocation Loc , SILBasicBlock * DestBB , SILFunction & F)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"BranchInst::create( SILDebugLocation Loc , SILBasicBlock * DestBB , ArrayRef<SILValue> Args , SILFunction & F)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"CondBranchInst::CondBranchInst( SILDebugLocation Loc , SILValue Condition , SILBasicBlock * TrueBB , SILBasicBlock * FalseBB , ArrayRef<SILValue> Args , unsigned NumTrue , unsigned NumFalse , ProfileCounter TrueBBCount , ProfileCounter FalseBBCount)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"CondBranchInst::create( SILDebugLocation Loc , SILValue Condition , SILBasicBlock * TrueBB , SILBasicBlock * FalseBB , ProfileCounter TrueBBCount , ProfileCounter FalseBBCount , SILFunction & F)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"CondBranchInst::create( SILDebugLocation Loc , SILValue Condition , SILBasicBlock * TrueBB , ArrayRef<SILValue> TrueArgs , SILBasicBlock * FalseBB , ArrayRef<SILValue> FalseArgs , ProfileCounter TrueBBCount , ProfileCounter FalseBBCount , SILFunction & F)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"CondBranchInst::getArgForDestBB( const SILBasicBlock * DestBB , const SILArgument * Arg) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"CondBranchInst::getArgForDestBB( const SILBasicBlock * DestBB , unsigned ArgIndex) const",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"CondBranchInst::swapSuccessors()",29, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchValueInst::SwitchValueInst( SILDebugLocation Loc , SILValue Operand , SILBasicBlock * DefaultBB , ArrayRef<SILValue> Cases , ArrayRef<SILBasicBlock*> BBs)",42, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchValueInst::~SwitchValueInst()",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchValueInst::create( SILDebugLocation Loc , SILValue Operand , SILBasicBlock * DefaultBB , ArrayRef<std::pair<SILValue,SILBasicBlock*>> CaseBBs , SILFunction & F)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SelectValueInst::SelectValueInst( SILDebugLocation DebugLoc , SILValue Operand , SILType Type , SILValue DefaultResult , ArrayRef<SILValue> CaseValuesAndResults , bool HasOwnership)",8, 73, 23, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SelectValueInst::create( SILDebugLocation Loc , SILValue Operand , SILType Type , SILValue DefaultResult , ArrayRef<std::pair<SILValue,SILValue>> CaseValues , SILModule & M , bool HasOwnership)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SelectEnumInstBase::createSelectEnum( SILDebugLocation Loc , SILValue Operand , SILType Ty , SILValue DefaultValue , ArrayRef<std::pair<EnumElementDecl*,SILValue>> DeclsAndValues , SILModule & Mod , Optional<ArrayRef<ProfileCounter>> CaseCounts , ProfileCounter DefaultCount , bool HasOwnership)",27, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SelectEnumInst::create( SILDebugLocation Loc , SILValue Operand , SILType Type , SILValue DefaultValue , ArrayRef<std::pair<EnumElementDecl*,SILValue>> CaseValues , SILModule & M , Optional<ArrayRef<ProfileCounter>> CaseCounts , ProfileCounter DefaultCount , bool HasOwnership)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SelectEnumAddrInst::create( SILDebugLocation Loc , SILValue Operand , SILType Type , SILValue DefaultValue , ArrayRef<std::pair<EnumElementDecl*,SILValue>> CaseValues , SILModule & M , Optional<ArrayRef<ProfileCounter>> CaseCounts , ProfileCounter DefaultCount)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchEnumInstBase::SwitchEnumInstBase( SILInstructionKind Kind , SILDebugLocation Loc , SILValue Operand , SILBasicBlock * DefaultBB , ArrayRef<std::pair<EnumElementDecl*,SILBasicBlock*>> CaseBBs , Optional<ArrayRef<ProfileCounter>> CaseCounts , ProfileCounter DefaultCount)",25, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchEnumInstBase::swapCase( unsigned i , unsigned j)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"getUniqueCaseForDefaultValue( Inst * inst , SILValue enumValue)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SelectEnumInstBase::getUniqueCaseForDefault()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SelectEnumInstBase::getSingleTrueElement() const",26, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchEnumInstBase::~SwitchEnumInstBase()",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchEnumInstBase::createSwitchEnum( SILDebugLocation Loc , SILValue Operand , SILBasicBlock * DefaultBB , ArrayRef<std::pair<EnumElementDecl*,SILBasicBlock*>> CaseBBs , SILFunction & F , Optional<ArrayRef<ProfileCounter>> CaseCounts , ProfileCounter DefaultCount)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchEnumInstBase::getUniqueCaseForDefault()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchEnumInstBase::getUniqueCaseForDestination( SILBasicBlock * BB)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchEnumInst::create( SILDebugLocation Loc , SILValue Operand , SILBasicBlock * DefaultBB , ArrayRef<std::pair<EnumElementDecl*,SILBasicBlock*>> CaseBBs , SILFunction & F , Optional<ArrayRef<ProfileCounter>> CaseCounts , ProfileCounter DefaultCount)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"SwitchEnumAddrInst::create( SILDebugLocation Loc , SILValue Operand , SILBasicBlock * DefaultBB , ArrayRef<std::pair<EnumElementDecl*,SILBasicBlock*>> CaseBBs , SILFunction & F , Optional<ArrayRef<ProfileCounter>> CaseCounts , ProfileCounter DefaultCount)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DynamicMethodBranchInst::DynamicMethodBranchInst( SILDebugLocation Loc , SILValue Operand , SILDeclRef Member , SILBasicBlock * HasMethodBB , SILBasicBlock * NoMethodBB)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DynamicMethodBranchInst::create( SILDebugLocation Loc , SILValue Operand , SILDeclRef Member , SILBasicBlock * HasMethodBB , SILBasicBlock * NoMethodBB , SILFunction & F)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"WitnessMethodInst::create( SILDebugLocation Loc , CanType LookupType , ProtocolConformanceRef Conformance , SILDeclRef Member , SILType Ty , SILFunction * F , SILOpenedArchetypesState & OpenedArchetypes)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"ObjCMethodInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILDeclRef Member , SILType Ty , SILFunction * F , SILOpenedArchetypesState & OpenedArchetypes)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"InitExistentialAddrInst::create( SILDebugLocation Loc , SILValue Existential , CanType ConcreteType , SILType ConcreteLoweredType , ArrayRef<ProtocolConformanceRef> Conformances , SILFunction * F , SILOpenedArchetypesState & OpenedArchetypes)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"InitExistentialValueInst::create( SILDebugLocation Loc , SILType ExistentialType , CanType ConcreteType , SILValue Instance , ArrayRef<ProtocolConformanceRef> Conformances , SILFunction * F , SILOpenedArchetypesState & OpenedArchetypes)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"InitExistentialRefInst::create( SILDebugLocation Loc , SILType ExistentialType , CanType ConcreteType , SILValue Instance , ArrayRef<ProtocolConformanceRef> Conformances , SILFunction * F , SILOpenedArchetypesState & OpenedArchetypes)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"InitExistentialMetatypeInst::InitExistentialMetatypeInst( SILDebugLocation Loc , SILType existentialMetatypeType , SILValue metatype , ArrayRef<SILValue> TypeDependentOperands , ArrayRef<ProtocolConformanceRef> conformances)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"InitExistentialMetatypeInst::create( SILDebugLocation Loc , SILType existentialMetatypeType , SILValue metatype , ArrayRef<ProtocolConformanceRef> conformances , SILFunction * F , SILOpenedArchetypesState & OpenedArchetypes)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"InitExistentialMetatypeInst::getConformances() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"swift::getOpenedExistentialAccessFor( AccessKind access)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"OpenExistentialAddrInst::OpenExistentialAddrInst( SILDebugLocation DebugLoc , SILValue Operand , SILType SelfTy , OpenedExistentialAccess AccessKind)",4, 80, 4, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"OpenExistentialRefInst::OpenExistentialRefInst( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , bool HasOwnership)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"OpenExistentialMetatypeInst::OpenExistentialMetatypeInst( SILDebugLocation DebugLoc , SILValue operand , SILType ty)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"OpenExistentialBoxInst::OpenExistentialBoxInst( SILDebugLocation DebugLoc , SILValue operand , SILType ty)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"OpenExistentialBoxValueInst::OpenExistentialBoxValueInst( SILDebugLocation DebugLoc , SILValue operand , SILType ty)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"OpenExistentialValueInst::OpenExistentialValueInst( SILDebugLocation DebugLoc , SILValue Operand , SILType SelfTy)",4, 57, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"UncheckedRefCastInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"UncheckedAddrCastInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"UncheckedTrivialBitCastInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"UncheckedBitwiseCastInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"UnconditionalCheckedCastInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType DestTy , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"UnconditionalCheckedCastValueInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType DestTy , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"CheckedCastBranchInst::create( SILDebugLocation DebugLoc , bool IsExact , SILValue Operand , SILType DestTy , SILBasicBlock * SuccessBB , SILBasicBlock * FailureBB , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes , ProfileCounter Target1Count , ProfileCounter Target2Count)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"CheckedCastValueBranchInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType DestTy , SILBasicBlock * SuccessBB , SILBasicBlock * FailureBB , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"MetatypeInst::create( SILDebugLocation Loc , SILType Ty , SILFunction * F , SILOpenedArchetypesState & OpenedArchetypes)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"UpcastInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"ThinToThickFunctionInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"PointerToThinFunctionInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"ConvertFunctionInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes , bool WithoutActuallyEscaping)",29, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"ConvertEscapeToNoEscapeInst::create( SILDebugLocation DebugLoc , SILValue Operand , SILType Ty , SILFunction & F , SILOpenedArchetypesState & OpenedArchetypes , bool isEscapedByUser , bool isLifetimeGuaranteed)",32, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathPatternComponent::isComputedSettablePropertyMutating() const",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"forEachRefcountableReference( const KeyPathPatternComponent & component , llvm :: function_ref<void(SILFunction*)> forFunction)",32, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathPatternComponent::incrementRefCounts() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathPatternComponent::decrementRefCounts() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathPattern::get( SILModule & M , CanGenericSignature signature , CanType rootType , CanType valueType , ArrayRef<KeyPathPatternComponent> components , StringRef objcString)",36, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathPattern::create( SILModule & M , CanGenericSignature signature , CanType rootType , CanType valueType , ArrayRef<KeyPathPatternComponent> components , StringRef objcString , unsigned numOperands)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathPattern::KeyPathPattern( CanGenericSignature signature , CanType rootType , CanType valueType , ArrayRef<KeyPathPatternComponent> components , StringRef objcString , unsigned numOperands)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathPattern::getComponents() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathPattern::Profile( llvm :: FoldingSetNodeID & ID , CanGenericSignature signature , CanType rootType , CanType valueType , ArrayRef<KeyPathPatternComponent> components , StringRef objcString)",67, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathInst::create( SILDebugLocation Loc , KeyPathPattern * Pattern , SubstitutionMap Subs , ArrayRef<SILValue> Args , SILType Ty , SILFunction & F)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathInst::KeyPathInst( SILDebugLocation Loc , KeyPathPattern * Pattern , SubstitutionMap Subs , ArrayRef<SILValue> Args , SILType Ty)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathInst::getAllOperands()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathInst::~KeyPathInst()",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathInst::getPattern() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"KeyPathInst::dropReferencedPattern()",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"GenericSpecializationInformation::GenericSpecializationInformation( SILFunction * Caller , SILFunction * Parent , SubstitutionMap Subs)",3, 52, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"GenericSpecializationInformation::create( SILFunction * Caller , SILFunction * Parent , SubstitutionMap Subs)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"GenericSpecializationInformation::create( SILInstruction * Inst , SILBuilder & B)",26, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"computeAggregateFirstLevelSubtypeInfo( SILModule & M , SILValue Operand , llvm :: SmallVectorImpl<SILType> & Types , llvm :: SmallVectorImpl<ValueOwnershipKind> & OwnershipKinds)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DestructureStructInst::create( SILModule & M , SILDebugLocation Loc , SILValue Operand)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstructions.cpp,"DestructureTupleInst::create( SILModule & M , SILDebugLocation Loc , SILValue Operand)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"diagnose( ASTContext & Context , SourceLoc loc , Diag<T...> diag , U && ... args)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::print( llvm :: raw_ostream & os , unsigned indent) const",57, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::dump() const",1, 58, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getKind() const",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::cloneInto( ASTContext & astContext) const",29, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValueMemoryObject::create( Type type , SymbolicValue value , ASTContext & astContext)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getInteger( int64_t value , unsigned bitWidth)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getInteger( const APInt & value , ASTContext & astContext)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getIntegerValue() const",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getIntegerValueBitWidth() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getAggregate( ArrayRef<SymbolicValue> elements , ASTContext & astContext)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getAggregateValue() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"swift::create( SILNode * node , UnknownReason reason , ArrayRef<SourceLoc> elements , ASTContext & astContext)",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"swift::getCallStack() const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"swift::numTrailingObjects( OverloadToken<SourceLoc>) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"swift::UnknownSymbolicValue( SILNode * node , UnknownReason reason , unsigned callStackSize)",3, 68, 6, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getUnknown( SILNode * node , UnknownReason reason , llvm :: ArrayRef<SourceLoc> callStack , ASTContext & astContext)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getUnknownCallStack() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getUnknownNode() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getUnknownReason() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"swift::DerivedAddressValue::create( SymbolicValueMemoryObject * memoryObject , ArrayRef<unsigned> elements , ASTContext & astContext)",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"swift::DerivedAddressValue::getElements() const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"swift::DerivedAddressValue::numTrailingObjects( OverloadToken<unsigned>) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"swift::DerivedAddressValue::DerivedAddressValue( SymbolicValueMemoryObject * memoryObject , unsigned numElements)",3, 64, 6, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getAddress( SymbolicValueMemoryObject * memoryObject , ArrayRef<unsigned> indices , ASTContext & astContext)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::getAddressValue( SmallVectorImpl<unsigned> & accessPath) const",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"skipInternalLocations( SILDebugLocation loc)",24, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::lookThroughSingleElementAggregates() const",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"emitNoteDiagnostic( SILInstruction * badInst , UnknownReason reason , SILLocation fallbackLoc)",38, 2, 0, 0
repos/cpp/swift/lib/SIL/SILConstants.cpp,"SymbolicValue::emitUnknownDiagnosticNotes( SILLocation fallbackLoc)",25, 2, 0, 0
repos/cpp/swift/lib/SIL/BasicBlockUtils.cpp,"hasBranchArguments( TermInst * T , unsigned edgeIdx)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/BasicBlockUtils.cpp,"swift::changeBranchTarget( TermInst * T , unsigned edgeIdx , SILBasicBlock * newDest , bool preserveArgs)",53, 2, 0, 0
repos/cpp/swift/lib/SIL/BasicBlockUtils.cpp,"getNthEdgeBlock( SwitchInstTy * S , unsigned edgeIdx)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/BasicBlockUtils.cpp,"swift::getEdgeArgs( TermInst * T , unsigned edgeIdx , SILBasicBlock * newEdgeBB , llvm :: SmallVectorImpl<SILValue> & args)",109, 2, 0, 0
repos/cpp/swift/lib/SIL/BasicBlockUtils.cpp,"swift::splitEdge( TermInst * T , unsigned edgeIdx , DominanceInfo * DT , SILLoopInfo * LI)",91, 2, 0, 0
repos/cpp/swift/lib/SIL/BasicBlockUtils.cpp,"swift::mergeBasicBlockWithSingleSuccessor( SILBasicBlock * BB , SILBasicBlock * succBB)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/BasicBlockUtils.cpp,"DeadEndBlocks::compute()",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getLoc() const",1, 78, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getDebugScope() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::setDebugScope( SILBuilder & B , const SILDebugScope * DS)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"llvm::ilist_traits<SILInstruction>::getContainingBlock()",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"llvm::ilist_traits<SILInstruction>::addNodeToList( SILInstruction * I)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"llvm::ilist_traits<SILInstruction>::removeNodeFromList( SILInstruction * I)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"llvm::ilist_traits<SILInstruction>::transferNodesFromList( llvm :: ilist_traits<SILInstruction> & L2 , instr_iterator first , instr_iterator last)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getFunction()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getFunction() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getModule() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::eraseFromParent()",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::moveFront( SILBasicBlock * Block)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::moveBefore( SILInstruction * Later)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::moveAfter( SILInstruction * Earlier)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::dropAllReferences()",26, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getResultsImpl() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"swift::getSILInstructionKind( StringRef name)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"swift::getSILInstructionName( SILInstructionKind kind)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::replaceAllUsesOfAllResultsWithUndef()",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::replaceAllUsesPairwiseWith( SILInstruction * other)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::replaceAllUsesPairwiseWith( const llvm :: SmallVectorImpl<SILValue> & NewValues)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::destroy( SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::InstructionIdentityComparer( const SILInstruction * L)",1, 70, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitSILInstruction( const SILInstruction * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitInjectEnumAddrInst( const InjectEnumAddrInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitDestroyAddrInst( const DestroyAddrInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitReleaseValueInst( const ReleaseValueInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitReleaseValueAddrInst( const ReleaseValueAddrInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitRetainValueInst( const RetainValueInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitRetainValueAddrInst( const RetainValueAddrInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitDeallocStackInst( const DeallocStackInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitAllocStackInst( const AllocStackInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitDeallocBoxInst( const DeallocBoxInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitAllocBoxInst( const AllocBoxInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitDeallocRefInst( const DeallocRefInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitDeallocPartialRefInst( const DeallocPartialRefInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitAllocRefInst( const AllocRefInst * RHS)",12, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitAllocRefDynamicInst( const AllocRefDynamicInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitProjectValueBufferInst( const ProjectValueBufferInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitProjectBoxInst( const ProjectBoxInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitProjectExistentialBoxInst( const ProjectExistentialBoxInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitBeginAccessInst( const BeginAccessInst * right)",7, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitEndAccessInst( const EndAccessInst * right)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitBeginUnpairedAccessInst( const BeginUnpairedAccessInst * right)",7, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitEndUnpairedAccessInst( const EndUnpairedAccessInst * right)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitStrongReleaseInst( const StrongReleaseInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitStrongRetainInst( const StrongRetainInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitLoadInst( const LoadInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitLoadBorrowInst( const LoadBorrowInst * RHS)",1, 73, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitEndBorrowInst( const EndBorrowInst * RHS)",1, 71, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitBeginBorrowInst( const BeginBorrowInst * BBI)",1, 75, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitStoreBorrowInst( const StoreBorrowInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitStoreInst( const StoreInst * RHS)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitBindMemoryInst( const BindMemoryInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitFunctionRefInst( const FunctionRefInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitDynamicFunctionRefInst( const DynamicFunctionRefInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitPreviousDynamicFunctionRefInst( const PreviousDynamicFunctionRefInst * RHS)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitAllocGlobalInst( const AllocGlobalInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitGlobalAddrInst( const GlobalAddrInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitIntegerLiteralInst( const IntegerLiteralInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitFloatLiteralInst( const FloatLiteralInst * RHS)",7, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitStringLiteralInst( const StringLiteralInst * RHS)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitStructInst( const StructInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitStructExtractInst( const StructExtractInst * RHS)",11, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitRefElementAddrInst( RefElementAddrInst * RHS)",8, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitRefTailAddrInst( RefTailAddrInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitStructElementAddrInst( const StructElementAddrInst * RHS)",11, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitTupleInst( const TupleInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitTupleExtractInst( const TupleExtractInst * RHS)",10, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitTupleElementAddrInst( const TupleElementAddrInst * RHS)",10, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitMetatypeInst( const MetatypeInst * RHS)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitValueMetatypeInst( const ValueMetatypeInst * RHS)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitExistentialMetatypeInst( const ExistentialMetatypeInst * RHS)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitIndexRawPointerInst( IndexRawPointerInst * RHS)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitIndexAddrInst( IndexAddrInst * RHS)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitTailAddrInst( TailAddrInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitCondFailInst( CondFailInst * RHS)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitApplyInst( ApplyInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitBuiltinInst( BuiltinInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitEnumInst( EnumInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitUncheckedEnumDataInst( UncheckedEnumDataInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitSelectEnumInstBase( const SelectEnumInstBase * RHS)",16, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitSelectEnumInst( const SelectEnumInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitSelectEnumAddrInst( const SelectEnumAddrInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitSelectValueInst( const SelectValueInst * RHS)",18, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitUncheckedRefCastInst( UncheckedRefCastInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitUncheckedAddrCastInst( UncheckedAddrCastInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitUncheckedTrivialBitCastInst( UncheckedTrivialBitCastInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitUncheckedBitwiseCastInst( UncheckedBitwiseCastInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitUpcastInst( UpcastInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitAddressToPointerInst( AddressToPointerInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitPointerToAddressInst( PointerToAddressInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitRefToRawPointerInst( RefToRawPointerInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitRawPointerToRefInst( RawPointerToRefInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitThinToThickFunctionInst( ThinToThickFunctionInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitThickToObjCMetatypeInst( ThickToObjCMetatypeInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitObjCToThickMetatypeInst( ObjCToThickMetatypeInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitConvertFunctionInst( ConvertFunctionInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitConvertEscapeToNoEscapeInst( ConvertEscapeToNoEscapeInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitObjCMetatypeToObjectInst( ObjCMetatypeToObjectInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitObjCExistentialMetatypeToObjectInst( ObjCExistentialMetatypeToObjectInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitProjectBlockStorageInst( ProjectBlockStorageInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitBridgeObjectToRefInst( BridgeObjectToRefInst * X)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitValueToBridgeObjectInst( ValueToBridgeObjectInst * i)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitBridgeObjectToWordInst( BridgeObjectToWordInst * X)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitRefToBridgeObjectInst( RefToBridgeObjectInst * X)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitClassifyBridgeObjectInst( ClassifyBridgeObjectInst * X)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitThinFunctionToPointerInst( ThinFunctionToPointerInst * X)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitPointerToThinFunctionInst( PointerToThinFunctionInst * X)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitObjCProtocolInst( ObjCProtocolInst * RHS)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitClassMethodInst( ClassMethodInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitSuperMethodInst( SuperMethodInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitObjCMethodInst( ObjCMethodInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitObjCSuperMethodInst( ObjCSuperMethodInst * RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitWitnessMethodInst( const WitnessMethodInst * RHS)",10, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitMarkDependenceInst( const MarkDependenceInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"InstructionIdentityComparer::visitOpenExistentialRefInst( const OpenExistentialRefInst * RHS)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::hasIdenticalState( const SILInstruction * RHS) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getAllOperands() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getAllOperands()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getTypeDependentOperands() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getTypeDependentOperands()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"Operand::getOperandNumber() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getMemoryBehavior() const",43, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::getReleasingBehavior() const",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::mayHaveSideEffects() const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::mayRelease() const",74, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::mayReleaseOrReadRefCount() const",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"TrivialCloner::TrivialCloner( SILFunction * F)",1, 53, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"TrivialCloner::doIt( SILInstruction * I)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"TrivialCloner::postProcess( SILInstruction * Orig , SILInstruction * Cloned)",7, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"TrivialCloner::getMappedValue( SILValue Value)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"TrivialCloner::remapBasicBlock( SILBasicBlock * BB)",1, 69, 4, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::isAllocatingStack() const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::isDeallocatingStack() const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::clone( SILInstruction * InsertPt)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::isTriviallyDuplicatable() const",46, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::mayTrap() const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstruction::isMetaInstruction() const",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"swift::operator < <( llvm :: raw_ostream & OS , SILInstruction :: MemoryBehavior B)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"swift::operator < <( llvm :: raw_ostream & OS , SILInstruction :: ReleasingBehavior B)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstructionResultArray::SILInstructionResultArray( const SingleValueInstruction * SVI)",40, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstructionResultArray::SILInstructionResultArray( ArrayRef<MultipleValueInstructionResult> MVResults)",37, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstructionResultArray::operator [ ]( size_t Index) const",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstructionResultArray::hasSameTypes( const SILInstructionResultArray & rhs)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstructionResultArray::operator ==( const SILInstructionResultArray & other)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstructionResultArray::getTypes() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstructionResultArray::front() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"SILInstructionResultArray::back() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"MultipleValueInstruction::getIndexOfResult( SILValue Target) const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"MultipleValueInstructionResult::MultipleValueInstructionResult( ValueKind valueKind , unsigned index , SILType type , ValueOwnershipKind ownershipKind)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"MultipleValueInstructionResult::setOwnershipKind( ValueOwnershipKind NewKind)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"MultipleValueInstructionResult::setIndex( unsigned NewIndex)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"MultipleValueInstructionResult::getOwnershipKind() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILInstruction.cpp,"MultipleValueInstructionResult::getParent()",26, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"mangleConstant( RootProtocolConformance * C)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::getDeclContext() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::getProtocol() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::getConformingType() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::addWitnessTable()",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::create( SILModule & M , SILLinkage Linkage , IsSerialized_t Serialized , RootProtocolConformance * Conformance , ArrayRef<SILWitnessTable::Entry> entries , ArrayRef<ConditionalConformance> conditionalConformances)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::create( SILModule & M , SILLinkage Linkage , RootProtocolConformance * Conformance)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::SILWitnessTable( SILModule & M , SILLinkage Linkage , IsSerialized_t Serialized , StringRef N , RootProtocolConformance * Conformance , ArrayRef<Entry> entries , ArrayRef<ConditionalConformance> conditionalConformances)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::SILWitnessTable( SILModule & M , SILLinkage Linkage , StringRef N , RootProtocolConformance * Conformance)",4, 75, 4, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::~SILWitnessTable()",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::convertToDefinition( ArrayRef<Entry> entries , ArrayRef<ConditionalConformance> conditionalConformances , IsSerialized_t isSerialized)",28, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::conformanceIsSerialized( const RootProtocolConformance * conformance)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILWitnessTable.cpp,"SILWitnessTable::enumerateWitnessTableConditionalConformances( const ProtocolConformance * conformance , llvm :: function_ref<bool(unsigned,CanType,ProtocolDecl*)> fn)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesTracker::addOpenedArchetypeDef( CanArchetypeType archetype , SingleValueInstruction * Def)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesTracker::hasUnresolvedOpenedArchetypeDefinitions()",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesTracker::registerUsedOpenedArchetypes( CanType Ty)",39, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesTracker::registerOpenedArchetypes( const SILInstruction * I)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesTracker::registerUsedOpenedArchetypes( const SILInstruction * I)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesTracker::unregisterOpenedArchetypes( const SILInstruction * I)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesTracker::handleDeleteNotification( swift :: SILNode * node)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"swift::getOpenedArchetypeOf( const SILInstruction * I)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"swift::getOpenedArchetypeOf( CanType Ty)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesState::getOpenedArchetypeDef( CanArchetypeType archetypeTy) const",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesTracker::dump() const",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOpenedArchetypesTracker.cpp,"SILOpenedArchetypesState::dump() const",12, 2, 0, 0
repos/cpp/swift/lib/SIL/DebugUtils.cpp,"swift::hasNonTrivialNonDebugTransitiveUsers( PointerUnion<SILInstruction*,SILArgument*> V)",45, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitForwardingInst( SILInstruction * I)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitForwardingInst( SILInstruction * i , ArrayRef<Operand> ops)",25, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitUncheckedOwnershipConversionInst( UncheckedOwnershipConversionInst * I)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitSILUndef( SILUndef * arg)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitSILPhiArgument( SILPhiArgument * Arg)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitDestructureStructResult( DestructureStructResult * Result)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitDestructureTupleResult( DestructureTupleResult * Result)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitBeginApplyResult( BeginApplyResult * Result)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitSILFunctionArgument( SILFunctionArgument * Arg)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitMarkDependenceInst( MarkDependenceInst * MDI)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitApplyInst( ApplyInst * ai)",26, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitLoadInst( LoadInst * LI)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindBuiltinVisitor::visitLLVMIntrinsic( BuiltinInst * BI , llvm :: Intrinsic :: ID ID)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"ValueOwnershipKindClassifier::visitBuiltinInst( BuiltinInst * BI)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueOwnership.cpp,"SILValue::getOwnershipKind() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::SerializationCallback::didDeserialize( ModuleDecl * M , SILFunction * fn)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::SerializationCallback::didDeserialize( ModuleDecl * M , SILGlobalVariable * var)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::SerializationCallback::didDeserialize( ModuleDecl * M , SILVTable * vtable)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::SerializationCallback::didDeserialize( ModuleDecl * M , SILWitnessTable * wt)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::SerializationCallback::updateLinkage( T * decl)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::SerializationCallback::getName() const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::SILModule( ModuleDecl * SwiftModule , SILOptions & Options , const DeclContext * associatedDC , bool wholeModule)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::~SILModule()",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::createEmptyModule( ModuleDecl * M , SILOptions & Options , bool WholeModule)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::getASTContext() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::allocate( unsigned Size , unsigned Align) const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::allocateInst( unsigned Size , unsigned Align) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::deallocateInst( SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::createWitnessTableDeclaration( ProtocolConformance * C , SILLinkage linkage)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::lookUpWitnessTable( ProtocolConformanceRef C , bool deserializeLazily)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::lookUpWitnessTable( const ProtocolConformance * C , bool deserializeLazily)",56, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::lookUpDefaultWitnessTable( const ProtocolDecl * Protocol , bool deserializeLazily)",25, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::createDefaultWitnessTableDeclaration( const ProtocolDecl * Protocol , SILLinkage Linkage)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::deleteWitnessTable( SILWitnessTable * Wt)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::getIntrinsicInfo( Identifier ID)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::getBuiltinInfo( Identifier ID)",35, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::lookUpFunction( SILDeclRef fnRef)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::loadFunction( SILFunction * F)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::linkFunction( SILFunction * F , SILModule :: LinkingMode Mode)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::findFunction( StringRef Name , SILLinkage Linkage)",60, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::hasFunction( StringRef Name)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::linkAllFromCurrentModule()",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::invalidateSILLoaderCaches()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::removeFromZombieList( StringRef Name)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::eraseFunction( SILFunction * F)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::invalidateFunctionInSILCache( SILFunction * F)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::eraseGlobalVariable( SILGlobalVariable * G)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::lookUpVTable( const ClassDecl * C)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::getSILLoader()",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::lookUpFunctionInWitnessTable( ProtocolConformanceRef C , SILDeclRef Requirement)",30, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::lookUpFunctionInDefaultWitnessTable( const ProtocolDecl * Protocol , SILDeclRef Requirement , bool deserializeLazily)",35, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::lookUpFunctionInVTable( ClassDecl * Class , SILDeclRef Member)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::registerDeserializationNotificationHandler( std :: unique_ptr<DeserializationNotificationHandler> && handler)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::registerDeleteNotificationHandler( DeleteNotificationHandler * handler)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::removeDeleteNotificationHandler( DeleteNotificationHandler * Handler)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::notifyDeleteHandlers( SILNode * node)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::isNoReturnBuiltinOrIntrinsic( Identifier Name)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::shouldSerializeEntitiesAssociatedWithDeclContext( const DeclContext * DC) const",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::isOptimizedOnoneSupportModule() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::setSerializeSILAction( SILModule :: ActionCallback Action)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::getSerializeSILAction() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::serialize()",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::setOptRecordStream( std :: unique_ptr<llvm::yaml::Output> && Stream , std :: unique_ptr<llvm::raw_ostream> && RawStream)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILModule::isStdlibModule() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"SILProperty::create( SILModule & M , bool Serialized , AbstractStorageDecl * Decl , Optional<KeyPathPatternComponent> Component)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILModule.cpp,"swift::getDeclSILLinkage( const ValueDecl * decl)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::getSourceLoc() const",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::getSourceLoc( ASTNodeTy N) const",24, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::getDebugSourceLoc() const",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::getStartSourceLoc() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::getStartSourceLoc( ASTNodeTy N) const",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::getEndSourceLoc() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::getEndSourceLoc( ASTNodeTy N) const",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::getAsDeclContext() const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::decode( SourceLoc Loc , const SourceManager & SM)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::dump( const SourceManager & SM) const",24, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"SILLocation::print( raw_ostream & OS , const SourceManager & SM) const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"InlinedLocation::getInlinedLocation( SILLocation L)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"MandatoryInlinedLocation::getMandatoryInlinedLocation( SILLocation L)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"CleanupLocation::get( SILLocation L)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"ReturnLocation::ReturnLocation( ReturnStmt * RS)",1, 80, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"ReturnLocation::ReturnLocation( BraceStmt * BS)",1, 79, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"ReturnLocation::get()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"ImplicitReturnLocation::ImplicitReturnLocation( AbstractClosureExpr * E)",2, 43, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"ImplicitReturnLocation::ImplicitReturnLocation( ReturnStmt * S)",2, 43, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"ImplicitReturnLocation::ImplicitReturnLocation( AbstractFunctionDecl * AFD)",2, 45, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"ImplicitReturnLocation::getImplicitReturnLoc( SILLocation L)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILLocation.cpp,"ImplicitReturnLocation::get()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"swift::getIntegerIndex( SILValue IndexVal , unsigned & IndexConst)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"Projection::Projection( SingleValueInstruction * I)",113, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"Projection::createObjectProjection( SILBuilder & B , SILLocation Loc , SILValue Base) const",36, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"Projection::createAddressProjection( SILBuilder & B , SILLocation Loc , SILValue Base) const",42, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"Projection::getFirstLevelProjections( SILType Ty , SILModule & Mod , llvm :: SmallVectorImpl<Projection> & Out)",60, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::getProjectionPath( SILValue Start , SILValue End)",37, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::hasNonEmptySymmetricDifference( const ProjectionPath & RHS) const",57, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::computeSubSeqRelation( const ProjectionPath & RHS) const",55, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::removePrefix( const ProjectionPath & Path , const ProjectionPath & Prefix)",30, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"Projection::print( raw_ostream & os , SILType baseType) const",38, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::print( raw_ostream & os , SILModule & M) const",15, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::dump( SILModule & M) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::verify( SILModule & M)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::expandTypeIntoLeafProjectionPaths( SILType B , SILModule * Mod , ProjectionPathList & Paths)",65, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::hasUncoveredNonTrivials( SILType B , SILModule * Mod , ProjectionPathSet & CPaths)",53, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionPath::createExtract( SILValue Base , SILInstruction * Inst , bool IsVal) const",31, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"Projection::operator <( const Projection & Other) const",22, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"Projection::createAggFromFirstLevelProjections( SILBuilder & B , SILLocation Loc , SILType BaseType , llvm :: SmallVectorImpl<SILValue> & Values)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"Projection::getOperandForAggregate( SILInstruction * I) const",32, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::getChildForProjection( ProjectionTree & Tree , const Projection & P)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::getParent( ProjectionTree & Tree)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::getParent( const ProjectionTree & Tree) const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::createProjection( SILBuilder & B , SILLocation Loc , SILValue Arg) const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"isSupportedProjection( const Projection & p)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::processUsersOfValue( ProjectionTree & Tree , llvm :: SmallVectorImpl<ValueNodePair> & Worklist , SILValue Value)",62, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::createNextLevelChildrenForStruct( ProjectionTree & Tree , StructDecl * SD)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::createNextLevelChildrenForTuple( ProjectionTree & Tree , TupleType * TT)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::createNextLevelChildren( ProjectionTree & Tree)",33, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::createAggregate( SILBuilder & B , SILLocation Loc , ArrayRef<SILValue> Args) const",16, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::NewAggregateBuilder::NewAggregateBuilder( ProjectionTreeNode * N , SILBuilder & B , SILLocation L)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::NewAggregateBuilder::isInvalidated() const",1, 53, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::NewAggregateBuilder::isComplete() const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::NewAggregateBuilder::createInstruction() const",7, 4, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTreeNode::NewAggregateBuilder::setValueForChild( ProjectionTreeNode * Child , SILValue V)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"NewAggregateBuilderMap::NewAggregateBuilderMap( SILBuilder & B , SILLocation Loc)",2, 48, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"NewAggregateBuilderMap::getBuilder( ProjectionTreeNode * Node)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"NewAggregateBuilderMap::get( ProjectionTreeNode * Node)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"NewAggregateBuilderMap::isComplete( ProjectionTreeNode * Node)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"NewAggregateBuilderMap::isInvalidated( ProjectionTreeNode * Node)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTree::ProjectionTree( SILModule & Mod , SILType BaseTy , llvm :: SpecificBumpPtrAllocator<ProjectionTreeNode> & Allocator)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTree::~ProjectionTree()",4, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTree::computeExplodedArgumentValueInner( SILBuilder & Builder , SILLocation Loc , ProjectionTreeNode * Node , LeafValueMapTy & LeafValues)",34, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTree::computeExplodedArgumentValue( SILBuilder & Builder , SILLocation Loc , llvm :: SmallVector<SILValue,8> & LeafValues)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTree::computeUsesAndLiveness( SILValue Base)",80, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTree::createTreeFromValue( SILBuilder & B , SILLocation Loc , SILValue NewBase , llvm :: SmallVectorImpl<SILValue> & Leafs) const",47, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"NewAggregateBuilderMap::getNextValidNode( llvm :: SmallVectorImpl<ProjectionTreeNode*> & Worklist , bool CheckForDeadLock)",32, 2, 0, 0
repos/cpp/swift/lib/SIL/Projection.cpp,"ProjectionTree::replaceValueUsesWithLeafUses( SILBuilder & Builder , SILLocation Loc , llvm :: SmallVectorImpl<SILValue> & Leafs)",122, 2, 0, 0
repos/cpp/swift/lib/SIL/Bridging.cpp,"TypeConverter::getLoweredTypeOfGlobal( VarDecl * var)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/Bridging.cpp,"TypeConverter::getBridgedParam( SILFunctionTypeRepresentation rep , AbstractionPattern pattern , AnyFunctionType :: Param param , Bridgeability bridging)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/Bridging.cpp,"TypeConverter::getBridgedParams( SILFunctionTypeRepresentation rep , AbstractionPattern pattern , ArrayRef<AnyFunctionType::Param> params , SmallVectorImpl<AnyFunctionType::Param> & bridgedParams , Bridgeability bridging)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/Bridging.cpp,"TypeConverter::getBridgedResultType( SILFunctionTypeRepresentation rep , AbstractionPattern pattern , CanType result , Bridgeability bridging , bool suppressOptional)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/Bridging.cpp,"TypeConverter::getLoweredBridgedType( AbstractionPattern pattern , Type t , Bridgeability bridging , SILFunctionTypeRepresentation rep , BridgedTypePurpose purpose)",30, 3, 0, 0
repos/cpp/swift/lib/SIL/Bridging.cpp,"TypeConverter::getLoweredCBridgedType( AbstractionPattern pattern , Type t , Bridgeability bridging , SILFunctionTypeRepresentation rep , BridgedTypePurpose purpose)",118, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDefaultWitnessTable.cpp,"SILDefaultWitnessTable::addDefaultWitnessTable()",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDefaultWitnessTable.cpp,"SILDefaultWitnessTable::create( SILModule & M , SILLinkage Linkage , const ProtocolDecl * Protocol , ArrayRef<SILDefaultWitnessTable::Entry> entries)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDefaultWitnessTable.cpp,"SILDefaultWitnessTable::create( SILModule & M , SILLinkage Linkage , const ProtocolDecl * Protocol)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDefaultWitnessTable.cpp,"SILDefaultWitnessTable::SILDefaultWitnessTable( SILModule & M , SILLinkage Linkage , const ProtocolDecl * Protocol , ArrayRef<Entry> entries)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDefaultWitnessTable.cpp,"SILDefaultWitnessTable::SILDefaultWitnessTable( SILModule & M , SILLinkage Linkage , const ProtocolDecl * Protocol)",5, 27, 5, 0
repos/cpp/swift/lib/SIL/SILDefaultWitnessTable.cpp,"SILDefaultWitnessTable::convertToDefinition( ArrayRef<Entry> entries)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDefaultWitnessTable.cpp,"SILDefaultWitnessTable::getUniqueName() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDefaultWitnessTable.cpp,"SILDefaultWitnessTable::~SILDefaultWitnessTable()",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::create( SILModule & M , SILLinkage linkage , IsSerialized_t isSerialized , StringRef name , SILType loweredType , Optional<SILLocation> loc , VarDecl * Decl)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::SILGlobalVariable( SILModule & Module , SILLinkage Linkage , IsSerialized_t isSerialized , StringRef Name , SILType LoweredType , Optional<SILLocation> Loc , VarDecl * Decl)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::~SILGlobalVariable()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::isSerialized() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::setSerialized( IsSerialized_t isSerialized)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::getStaticInitializerValue()",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::getOffsetSubtract( const TupleExtractInst * TE , SILModule & M)",24, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::isValidStaticInitializerInst( const SILInstruction * I , SILModule & M)",65, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::hasClangNode() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::getClangNode() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"SILGlobalVariable::getClangDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"getStaticallyInitializedVariable( SILFunction * AddrF)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"swift::getVariableOfGlobalInit( SILFunction * AddrF)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"swift::getCalleeOfOnceCall( BuiltinInst * BI)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"swift::findInitializer( SILModule * Module , SILFunction * AddrF , BuiltinInst * & CallToOnce)",27, 2, 0, 0
repos/cpp/swift/lib/SIL/SILGlobalVariable.cpp,"swift::getVariableOfStaticInitializer( SILFunction * InitFunc , SingleValueInstruction * & InitVal)",42, 2, 0, 0
repos/cpp/swift/lib/SIL/SIL.cpp,"swift::getDeclLinkage( const ValueDecl * D)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SIL.cpp,"swift::getSILLinkage( FormalLinkage linkage , ForDefinition_t forDefinition)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SIL.cpp,"swift::getLinkageForProtocolConformance( const RootProtocolConformance * C , ForDefinition_t definition)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SIL.cpp,"SILModule::isTypeMetadataAccessible( CanType type)",50, 2, 0, 0
repos/cpp/swift/lib/SIL/SIL.cpp,"isTypeMetadataForLayoutAccessible( SILModule & M , SILType type)",29, 2, 0, 0
repos/cpp/swift/lib/SIL/SIL.cpp,"SILModule::isTypeABIAccessible( SILType type)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SIL.cpp,"AbstractStorageDecl::exportsPropertyDescriptor() const",83, 2, 0, 0
repos/cpp/swift/lib/SIL/SILSuccessor.cpp,"SILSuccessor::operator =( SILBasicBlock * BB)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/SILUndef.cpp,"getOwnershipKindForUndef( SILType type , SILModule & m)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILUndef.cpp,"SILUndef::SILUndef( SILType type , SILModule & m)",3, 58, 4, 0
repos/cpp/swift/lib/SIL/SILUndef.cpp,"SILUndef::get( SILType ty , SILModule & m)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::OperandOwnershipKindClassifier( SILModule & mod , const Operand & op , ErrorBehaviorKind errorBehavior , bool checkingSubObject)",5, 48, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::isCheckingSubObject() const",1, 65, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::getValue() const",1, 49, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::getOwnershipKind() const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::getOperandIndex() const",1, 69, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::getType() const",1, 58, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::compatibleWithOwnership( ValueOwnershipKind kind) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::hasExactOwnership( ValueOwnershipKind kind) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::isAddressOrTrivialType() const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitForwardingInst( SILInstruction * i)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitForwardingInst( SILInstruction * i , ArrayRef<Operand> ops)",26, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitDeallocPartialRefInst( DeallocPartialRefInst * i)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitSelectEnumInst( SelectEnumInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitAllocRefInst( AllocRefInst * i)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitAllocRefDynamicInst( AllocRefDynamicInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::checkTerminatorArgumentMatchesDestBB( SILBasicBlock * destBB , unsigned opIndex)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitBranchInst( BranchInst * bi)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitCondBranchInst( CondBranchInst * cbi)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitSwitchEnumInst( SwitchEnumInst * sei)",35, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitCheckedCastBranchInst( CheckedCastBranchInst * ccbi)",28, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitReturnInst( ReturnInst * ri)",34, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitEndBorrowInst( EndBorrowInst * i)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitThrowInst( ThrowInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitStoreBorrowInst( StoreBorrowInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitCallee( CanSILFunctionType substCalleeType)",36, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitEnumArgument( ValueOwnershipKind requiredKind)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitApplyParameter( ValueOwnershipKind kind , UseLifetimeConstraint requirement)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitFullApply( FullApplySite apply)",59, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitBeginApplyInst( BeginApplyInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitApplyInst( ApplyInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitTryApplyInst( TryApplyInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitPartialApplyInst( PartialApplyInst * i)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitYieldInst( YieldInst * i)",29, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitAssignInst( AssignInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitStoreInst( StoreInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitCopyBlockWithoutEscapingInst( CopyBlockWithoutEscapingInst * i)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitMarkDependenceInst( MarkDependenceInst * mdi)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitKeyPathInst( KeyPathInst * I)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindBuiltinClassifier::visitLLVMIntrinsic( BuiltinInst * bi , llvm :: Intrinsic :: ID id)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindBuiltinClassifier::check( BuiltinInst * bi)",1, 71, 2, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"OperandOwnershipKindClassifier::visitBuiltinInst( BuiltinInst * bi)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OperandOwnership.cpp,"Operand::getOwnershipKindMap( bool isForwardingSubValue) const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"isArchetypeValidInFunction( ArchetypeType * A , const SILFunction * F)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifierBase::visitSILInstruction( SILInstruction * I)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifierBase::checkSILInstruction( SILInstruction * I)",1, 49, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"verifyKeyPathComponent( SILModule & M , llvm :: function_ref<void(bool,StringRef)> require , CanType & baseTy , CanType leafTy , const KeyPathPatternComponent & component , ArrayRef<Operand> operands , CanGenericSignature patternSig , SubstitutionMap patternSubs , bool forPropertyDescriptor , bool hasIndices)",249, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::isSILOwnershipEnabled() const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::_require( bool condition , const Twine & complaint , const std :: function<void()> & extraContext = nullptr)",25, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::_requireObjectType( SILType type , const Twine & valueDescription , const char * typeName)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::_requireObjectType( SILValue value , const Twine & valueDescription , const char * typeName)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::_requireAddressType( SILType type , const Twine & valueDescription , const char * typeName)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::_requireAddressType( SILValue value , const Twine & valueDescription , const char * typeName)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::_forbidObjectType( SILType type , const Twine & valueDescription , const char * typeName)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::_forbidObjectType( SILValue value , const Twine & valueDescription , const char * typeName)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::requireReferenceValue( SILValue value , const Twine & valueDescription)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::requireReferenceOrOptionalReferenceValue( SILValue value , const Twine & valueDescription)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::requireReferenceStorageCapableValue( SILValue value , const Twine & valueDescription)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::requireSameType( SILType type1 , SILType type2 , const Twine & complaint)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::requireABICompatibleFunctionTypes( CanSILFunctionType type1 , CanSILFunctionType type2 , const Twine & what)",31, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::requireSameFunctionComponents( CanSILFunctionType type1 , CanSILFunctionType type2 , const Twine & what)",18, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::numInstsInFunction( const SILFunction & F)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::SILVerifier( const SILFunction & F , bool SingleFunction = true)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::properlyDominates( SILInstruction * a , SILInstruction * b)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::prohibitAddressBlockArgs()",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::visitSILPhiArgument( SILPhiArgument * arg)",25, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::visitSILArgument( SILArgument * arg)",16, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::visitSILInstruction( SILInstruction * I)",17, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkValueBaseOwnership( ValueBase * V)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSILInstruction( SILInstruction * I)",88, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkInstructionsSILLocation( SILInstruction * I)",62, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkLegalType( SILFunction * F , ValueBase * value , SILInstruction * I)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::isLegalSILTokenProducer( SILValue value)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkLegalType( SILFunction * F , SILType type , SILInstruction * I)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkLegalSILType( SILFunction * F , CanType rvalueType , SILInstruction * I)",44, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::isInValueUses( const Operand * operand)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::isSingleBlockUsage( AllocStackInst * ASI , DominanceInfo * Dominance)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAllocStackInst( AllocStackInst * AI)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAllocRefBase( AllocRefInstBase * ARI)",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAllocRefInst( AllocRefInst * AI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAllocRefDynamicInst( AllocRefDynamicInst * ARDI)",16, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkApplySubstitutions( SubstitutionMap subs , SILType calleeTy)",29, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkApplyTypeDependentArguments( ApplySite AS)",61, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkFullApplySite( FullApplySite site)",29, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkApplyInst( ApplyInst * AI)",25, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkTryApplyInst( TryApplyInst * AI)",26, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkBeginApplyInst( BeginApplyInst * AI)",24, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAbortApplyInst( AbortApplyInst * AI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkEndApplyInst( EndApplyInst * AI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyLLVMIntrinsic( BuiltinInst * BI , llvm :: Intrinsic :: ID ID)",28, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkPartialApplyInst( PartialApplyInst * PAI)",134, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkBuiltinInst( BuiltinInst * BI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkFunctionRefBaseInst( FunctionRefBaseInst * FRI)",51, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkFunctionRefInst( FunctionRefInst * FRI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDynamicFunctionRefInst( DynamicFunctionRefInst * FRI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkPreviousDynamicFunctionRefInst( PreviousDynamicFunctionRefInst * FRI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAllocGlobalInst( AllocGlobalInst * AGI)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkGlobalAccessInst( GlobalAccessInst * GAI)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkGlobalAddrInst( GlobalAddrInst * GAI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkGlobalValueInst( GlobalValueInst * GVI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkObjectInst( ObjectInst *)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkIntegerLiteralInst( IntegerLiteralInst * ILI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkLoadInst( LoadInst * LI)",35, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkLoadBorrowInst( LoadBorrowInst * LBI)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkEndBorrowInst( EndBorrowInst * EBI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAccessEnforcement( AI * AccessInst)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkBeginAccessInst( BeginAccessInst * BAI)",40, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkEndAccessInst( EndAccessInst * EAI)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkBeginUnpairedAccessInst( BeginUnpairedAccessInst * BUAI)",29, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkEndUnpairedAccessInst( EndUnpairedAccessInst * I)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkStoreInst( StoreInst * SI)",42, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAssignInst( AssignInst * AI)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkMarkUninitializedInst( MarkUninitializedInst * MU)",34, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkMarkFunctionEscapeInst( MarkFunctionEscapeInst * MFE)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkCopyAddrInst( CopyAddrInst * SI)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkRetainValueInst( RetainValueInst * I)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkRetainValueAddrInst( RetainValueAddrInst * I)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkCopyValueInst( CopyValueInst * I)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDestroyValueInst( DestroyValueInst * I)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkReleaseValueInst( ReleaseValueInst * I)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkReleaseValueAddrInst( ReleaseValueAddrInst * I)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAutoreleaseValueInst( AutoreleaseValueInst * I)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSetDeallocatingInst( SetDeallocatingInst * I)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkCopyBlockInst( CopyBlockInst * I)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkCopyBlockInst( CopyBlockWithoutEscapingInst * I)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAllocValueBufferInst( AllocValueBufferInst * I)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkProjectValueBufferInst( ProjectValueBufferInst * I)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkProjectBoxInst( ProjectBoxInst * I)",20, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkProjectExistentialBoxInst( ProjectExistentialBoxInst * PEBI)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDeallocValueBufferInst( DeallocValueBufferInst * I)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkStructInst( StructInst * SI)",24, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkEnumInst( EnumInst * UI)",21, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkInitEnumDataAddrInst( InitEnumDataAddrInst * UI)",22, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUncheckedEnumDataInst( UncheckedEnumDataInst * UI)",21, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUncheckedTakeEnumDataAddrInst( UncheckedTakeEnumDataAddrInst * UI)",21, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkInjectEnumAddrInst( InjectEnumAddrInst * IUAI)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkTupleInst( TupleInst * TI)",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::isLoweringOf( SILType loweredType , CanType formalType)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkMetatypeInst( MetatypeInst * MI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkValueMetatypeInst( ValueMetatypeInst * MI)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkExistentialMetatypeInst( ExistentialMetatypeInst * MI)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkStrongRetainInst( StrongRetainInst * RI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkStrongReleaseInst( StrongReleaseInst * RI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDeallocStackInst( DeallocStackInst * DI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDeallocRefInst( DeallocRefInst * DI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDeallocPartialRefInst( DeallocPartialRefInst * DPRI)",17, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAllocBoxInst( AllocBoxInst * AI)",20, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDeallocBoxInst( DeallocBoxInst * DI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDestroyAddrInst( DestroyAddrInst * DI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkBindMemoryInst( BindMemoryInst * BI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkIndexAddrInst( IndexAddrInst * IAI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkTailAddrInst( TailAddrInst * IAI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkIndexRawPointerInst( IndexRawPointerInst * IAI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkTupleExtractInst( TupleExtractInst * EI)",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkStructExtractInst( StructExtractInst * EI)",23, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkTupleElementAddrInst( TupleElementAddrInst * EI)",18, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkStructElementAddrInst( StructElementAddrInst * EI)",23, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkRefElementAddrInst( RefElementAddrInst * EI)",23, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkRefTailAddrInst( RefTailAddrInst * RTAI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::getMethodSelfType( CanSILFunctionType ft)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkWitnessMethodInst( WitnessMethodInst * AMI)",61, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::getDynamicMethodType( SILType selfType , SILDeclRef method)",51, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::VerifyClassMethodVisitor::VerifyClassMethodVisitor( ClassDecl * theClass , SILDeclRef method)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::VerifyClassMethodVisitor::methodMatches( SILDeclRef method)",10, 6, 4, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::VerifyClassMethodVisitor::addMethod( SILDeclRef method)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::VerifyClassMethodVisitor::addMethodOverride( SILDeclRef base , SILDeclRef derived)",8, 6, 4, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::VerifyClassMethodVisitor::addPlaceholder( MissingMemberDecl *)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkClassMethodInst( ClassMethodInst * CMI)",30, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSuperMethodInst( SuperMethodInst * CMI)",36, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkObjCMethodInst( ObjCMethodInst * OMI)",41, 4, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkObjCSuperMethodInst( ObjCSuperMethodInst * OMI)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkOpenExistentialAddrInst( OpenExistentialAddrInst * OEI)",135, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkOpenExistentialRefInst( OpenExistentialRefInst * OEI)",21, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkOpenExistentialBoxInst( OpenExistentialBoxInst * OEI)",21, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkOpenExistentialBoxValueInst( OpenExistentialBoxValueInst * OEI)",21, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkOpenExistentialMetatypeInst( OpenExistentialMetatypeInst * I)",45, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkOpenExistentialValueInst( OpenExistentialValueInst * OEI)",18, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAllocExistentialBoxInst( AllocExistentialBoxInst * AEBI)",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkInitExistentialAddrInst( InitExistentialAddrInst * AEI)",32, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkInitExistentialValueInst( InitExistentialValueInst * IEI)",26, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkInitExistentialRefInst( InitExistentialRefInst * IEI)",31, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDeinitExistentialAddrInst( DeinitExistentialAddrInst * DEI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDeinitExistentialValueInst( DeinitExistentialValueInst * DEI)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDeallocExistentialBoxInst( DeallocExistentialBoxInst * DEBI)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkInitExistentialMetatypeInst( InitExistentialMetatypeInst * I)",32, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkExistentialProtocolConformances( SILType resultType , CanType concreteType , ArrayRef<ProtocolConformanceRef> conformances)",35, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyCheckedCast( bool isExact , SILType fromTy , SILType toTy , bool isOpaque = false)",48, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUnconditionalCheckedCastInst( UnconditionalCheckedCastInst * CI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUnconditionalCheckedCastValueInst( UnconditionalCheckedCastValueInst * CI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyOpenedArchetype( SILInstruction * I , CanType Ty)",29, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkCheckedCastBranchInst( CheckedCastBranchInst * CBI)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkCheckedCastValueBranchInst( CheckedCastValueBranchInst * CBI)",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkCheckedCastAddrBranchInst( CheckedCastAddrBranchInst * CCABI)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkThinToThickFunctionInst( ThinToThickFunctionInst * TTFI)",23, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkThickToObjCMetatypeInst( ThickToObjCMetatypeInst * TTOCI)",17, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkObjCToThickMetatypeInst( ObjCToThickMetatypeInst * OCTTI)",17, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUpcastInst( UpcastInst * UI)",55, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkAddressToPointerInst( AddressToPointerInst * AI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUncheckedRefCastInst( UncheckedRefCastInst * AI)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUncheckedRefCastAddrInst( UncheckedRefCastAddrInst * AI)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUncheckedAddrCastInst( UncheckedAddrCastInst * AI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUncheckedTrivialBitCastInst( UncheckedTrivialBitCastInst * BI)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUncheckedBitwiseCastInst( UncheckedBitwiseCastInst * BI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkRefToRawPointerInst( RefToRawPointerInst * AI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkRawPointerToRefInst( RawPointerToRefInst * AI)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkRefToBridgeObjectInst( RefToBridgeObjectInst * RI)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkBridgeObjectToRefInst( BridgeObjectToRefInst * RI)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkBridgeObjectToWordInst( BridgeObjectToWordInst * RI)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkConvertFunctionInst( ConvertFunctionInst * ICI)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkConvertEscapeToNoEscapeInst( ConvertEscapeToNoEscapeInst * ICI)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkThinFunctionToPointerInst( ThinFunctionToPointerInst * CI)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkPointerToThinFunctionInst( PointerToThinFunctionInst * CI)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkCondFailInst( CondFailInst * CFI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkReturnInst( ReturnInst * RI)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkThrowInst( ThrowInst * TI)",16, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkUnwindInst( UnwindInst * UI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkYieldInst( YieldInst * YI)",23, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSelectEnumCases( SelectEnumInstBase * I)",39, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSelectEnumInst( SelectEnumInst * SEI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSelectEnumAddrInst( SelectEnumAddrInst * SEI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSwitchValueInst( SwitchValueInst * SVI)",33, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSelectValueCases( SelectValueInst * I)",41, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSelectValueInst( SelectValueInst * SVI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSwitchEnumInst( SwitchEnumInst * SOI)",86, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkSwitchEnumAddrInst( SwitchEnumAddrInst * SOI)",43, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyBranchArgs( SILValue branchArg , SILArgument * bbArg)",16, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkBranchInst( BranchInst * BI)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkCondBranchInst( CondBranchInst * CBI)",32, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkDynamicMethodBranchInst( DynamicMethodBranchInst * DMBI)",22, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkProjectBlockStorageInst( ProjectBlockStorageInst * PBSI)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkInitBlockStorageHeaderInst( InitBlockStorageHeaderInst * IBSHI)",72, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkObjCProtocolInst( ObjCProtocolInst * OPI)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkObjCMetatypeToObjectInst( ObjCMetatypeToObjectInst * OMOI)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkObjCExistentialMetatypeToObjectInst( ObjCExistentialMetatypeToObjectInst * OMOI)",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkKeyPathInst( KeyPathInst * KPI)",58, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::checkIsEscapingClosureInst( IsEscapingClosureInst * IEC)",18, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyEntryBlock( SILBasicBlock * entry)",80, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyEpilogBlocks( SILFunction * F)",22, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::isUnreachableAlongAllPathsStartingAt( SILBasicBlock * StartBlock , SmallPtrSetImpl<SILBasicBlock*> & Visited)",17, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifySILFunctionType( CanSILFunctionType FTy)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyFlowSensitiveRules( SILFunction * F)",132, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyBranches( const SILFunction * F)",60, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyOpenedArchetypes( SILFunction * F)",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verifyDebugScopeHoles( SILBasicBlock * BB)",71, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::visitSILBasicBlock( SILBasicBlock * BB)",16, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::visitBasicBlockArguments( SILBasicBlock * BB)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::visitSILBasicBlocks( SILFunction * F)",20, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::visitSILFunction( SILFunction * F)",43, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVerifier::verify()",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILFunction::verify( bool SingleFunction) const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILFunction::verifyCriticalEdges() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILProperty::verify( const SILModule & M) const",53, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILVTable::verify( const SILModule & M) const",55, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILWitnessTable::verify( const SILModule & M) const",38, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILDefaultWitnessTable::verify( const SILModule & M) const",28, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILGlobalVariable::verify() const",23, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"SILModule::verify() const",89, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVerifier.cpp,"swift::maybeScopeless( SILInstruction & I)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionBuilder.cpp,"SILFunctionBuilder::getOrCreateFunction( SILLocation loc , StringRef name , SILLinkage linkage , CanSILFunctionType type , IsBare_t isBareSILFunction , IsTransparent_t isTransparent , IsSerialized_t isSerialized , IsDynamicallyReplaceable_t isDynamic , ProfileCounter entryCount , IsThunk_t isThunk , SubclassScope subclassScope)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionBuilder.cpp,"SILFunctionBuilder::addFunctionAttributes( SILFunction * F , DeclAttributes & Attrs , SILModule & M , SILDeclRef constant)",59, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionBuilder.cpp,"SILFunctionBuilder::getOrCreateFunction( SILLocation loc , SILDeclRef constant , ForDefinition_t forDefinition , ProfileCounter entryCount)",71, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionBuilder.cpp,"SILFunctionBuilder::getOrCreateSharedFunction( SILLocation loc , StringRef name , CanSILFunctionType type , IsBare_t isBareSILFunction , IsTransparent_t isTransparent , IsSerialized_t isSerialized , ProfileCounter entryCount , IsThunk_t isThunk , IsDynamicallyReplaceable_t isDynamic)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionBuilder.cpp,"SILFunctionBuilder::createFunction( SILLinkage linkage , StringRef name , CanSILFunctionType loweredType , GenericEnvironment * genericEnv , Optional<SILLocation> loc , IsBare_t isBareSILFunction , IsTransparent_t isTrans , IsSerialized_t isSerialized , IsDynamicallyReplaceable_t isDynamic , ProfileCounter entryCount , IsThunk_t isThunk , SubclassScope subclassScope , Inline_t inlineStrategy , EffectsKind EK , SILFunction * InsertBefore , const SILDebugScope * DebugScope)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"demangleSymbol( StringRef Name)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILColor::SILColor( raw_ostream & OS , SILColorKind K)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILColor::SILColor( raw_ostream & OS , ID :: ID_Kind K)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILColor::~SILColor()",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrintContext::ID::print( raw_ostream & OS)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"swift::operator < <( raw_ostream & OS , SILPrintContext :: ID i)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILValuePrinterInfo::SILValuePrinterInfo( ID ValueID)",1, 81, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILValuePrinterInfo::SILValuePrinterInfo( ID ValueID , SILType Type)",2, 57, 6, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILValuePrinterInfo::SILValuePrinterInfo( ID ValueID , SILType Type , ValueOwnershipKind OwnershipKind)",3, 70, 6, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printFullContext( const DeclContext * Context , raw_ostream & Buffer)",58, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printValueDecl( ValueDecl * Decl , raw_ostream & OS)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILDeclRef::print( raw_ostream & OS) const",100, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILDeclRef::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printGenericSpecializationInfo( raw_ostream & OS , StringRef Kind , StringRef Name , const GenericSpecializationInformation * SpecializationInfo , SubstitutionMap Subs = { })",36, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"print( raw_ostream & OS , SILValueCategory category)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"getCastConsumptionKindName( CastConsumptionKind kind)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printSILTypeColorAndSigil( raw_ostream & OS , SILType t)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILType::print( raw_ostream & OS) const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILType::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::operator < <( SILValuePrinterInfo i)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::operator < <( Type t)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::operator < <( SILType t)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::SILPrinter( SILPrintContext & PrintCtx , llvm :: DenseMap<CanType,Identifier> * AlternativeTypeNames = nullptr)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::getIDAndType( SILValue V)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::getIDAndTypeAndOwnership( SILValue V)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::print( const SILFunction * F)",19, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printBlockArgumentUses( const SILBasicBlock * BB)",32, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printBlockArguments( const SILBasicBlock * BB)",24, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::print( const SILBasicBlock * BB)",44, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printTypeDependentOperands( const SILInstruction * I)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printUsersOfSILNode( const SILNode * node , bool printedSlashes)",55, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printDebugLocRef( SILLocation Loc , const SourceManager & SM , bool PrintComma = true)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printDebugScope( const SILDebugScope * DS , const SourceManager & SM)",22, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printDebugScopeRef( const SILDebugScope * DS , const SourceManager & SM , bool PrintComma = true)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printSILLocation( SILLocation L , SILModule & M , const SILDebugScope * DS , bool printedSlashes)",82, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printInstOpCode( const SILInstruction * I)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::print( const SILInstruction * I)",66, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::print( const SILNode * node)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printSILArgument( const SILArgument * arg)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printSILUndef( const SILUndef * undef)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printSILMultipleValueInstructionResult( const MultipleValueInstructionResult * result)",30, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printInContext( const SILNode * node)",32, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printDebugVar( Optional<SILDebugVariable> Var)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAllocStackInst( AllocStackInst * AVI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printAllocRefInstBase( AllocRefInstBase * ARI)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAllocRefInst( AllocRefInst * ARI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAllocRefDynamicInst( AllocRefDynamicInst * ARDI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAllocValueBufferInst( AllocValueBufferInst * AVBI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAllocBoxInst( AllocBoxInst * ABI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printSubstitutions( SubstitutionMap Subs , GenericSignature * Sig = nullptr)",18, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitApplyInstBase( Inst * AI)",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitApplyInst( ApplyInst * AI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitBeginApplyInst( BeginApplyInst * AI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitTryApplyInst( TryApplyInst * AI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitPartialApplyInst( PartialApplyInst * CI)",20, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAbortApplyInst( AbortApplyInst * AI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitEndApplyInst( EndApplyInst * AI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitFunctionRefInst( FunctionRefInst * FRI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDynamicFunctionRefInst( DynamicFunctionRefInst * FRI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitPreviousDynamicFunctionRefInst( PreviousDynamicFunctionRefInst * FRI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitBuiltinInst( BuiltinInst * BI)",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAllocGlobalInst( AllocGlobalInst * AGI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitGlobalAddrInst( GlobalAddrInst * GAI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitGlobalValueInst( GlobalValueInst * GVI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitIntegerLiteralInst( IntegerLiteralInst * ILI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitFloatLiteralInst( FloatLiteralInst * FLI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::getStringEncodingName( StringLiteralInst :: Encoding kind)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitStringLiteralInst( StringLiteralInst * SLI)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printLoadOwnershipQualifier( LoadOwnershipQualifier Qualifier)",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitLoadInst( LoadInst * LI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitLoadBorrowInst( LoadBorrowInst * LBI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitBeginBorrowInst( BeginBorrowInst * LBI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printStoreOwnershipQualifier( StoreOwnershipQualifier Qualifier)",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitStoreInst( StoreInst * SI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitStoreBorrowInst( StoreBorrowInst * SI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitEndBorrowInst( EndBorrowInst * EBI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAssignInst( AssignInst * AI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitMarkUninitializedInst( MarkUninitializedInst * MU)",16, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitMarkFunctionEscapeInst( MarkFunctionEscapeInst * MFE)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDebugValueInst( DebugValueInst * DVI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDebugValueAddrInst( DebugValueAddrInst * DVAI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitCopyAddrInst( CopyAddrInst * CI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitBindMemoryInst( BindMemoryInst * BI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUnconditionalCheckedCastInst( UnconditionalCheckedCastInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitCheckedCastBranchInst( CheckedCastBranchInst * CI)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitCheckedCastValueBranchInst( CheckedCastValueBranchInst * CI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUnconditionalCheckedCastAddrInst( UnconditionalCheckedCastAddrInst * CI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUnconditionalCheckedCastValueInst( UnconditionalCheckedCastValueInst * CI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitCheckedCastAddrBranchInst( CheckedCastAddrBranchInst * CI)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printUncheckedConversionInst( ConversionInst * CI , SILValue operand)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUncheckedOwnershipConversionInst( UncheckedOwnershipConversionInst * UOCI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitConvertFunctionInst( ConvertFunctionInst * CI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitConvertEscapeToNoEscapeInst( ConvertEscapeToNoEscapeInst * CI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitThinFunctionToPointerInst( ThinFunctionToPointerInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitPointerToThinFunctionInst( PointerToThinFunctionInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUpcastInst( UpcastInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAddressToPointerInst( AddressToPointerInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitPointerToAddressInst( PointerToAddressInst * CI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUncheckedRefCastInst( UncheckedRefCastInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUncheckedRefCastAddrInst( UncheckedRefCastAddrInst * CI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUncheckedAddrCastInst( UncheckedAddrCastInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUncheckedTrivialBitCastInst( UncheckedTrivialBitCastInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUncheckedBitwiseCastInst( UncheckedBitwiseCastInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitRefToRawPointerInst( RefToRawPointerInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitRawPointerToRefInst( RawPointerToRefInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitThinToThickFunctionInst( ThinToThickFunctionInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitThickToObjCMetatypeInst( ThickToObjCMetatypeInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitObjCToThickMetatypeInst( ObjCToThickMetatypeInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitObjCMetatypeToObjectInst( ObjCMetatypeToObjectInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitObjCExistentialMetatypeToObjectInst( ObjCExistentialMetatypeToObjectInst * CI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitObjCProtocolInst( ObjCProtocolInst * CI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitRefToBridgeObjectInst( RefToBridgeObjectInst * I)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitBridgeObjectToRefInst( BridgeObjectToRefInst * I)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitBridgeObjectToWordInst( BridgeObjectToWordInst * I)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitCopyValueInst( CopyValueInst * I)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDestroyValueInst( DestroyValueInst * I)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitStructInst( StructInst * SI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitObjectInst( ObjectInst * OI)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitTupleInst( TupleInst * TI)",28, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitEnumInst( EnumInst * UI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitInitEnumDataAddrInst( InitEnumDataAddrInst * UDAI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUncheckedEnumDataInst( UncheckedEnumDataInst * UDAI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUncheckedTakeEnumDataAddrInst( UncheckedTakeEnumDataAddrInst * UDAI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitInjectEnumAddrInst( InjectEnumAddrInst * IUAI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitTupleExtractInst( TupleExtractInst * EI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitTupleElementAddrInst( TupleElementAddrInst * EI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitStructExtractInst( StructExtractInst * EI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitStructElementAddrInst( StructElementAddrInst * EI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitRefElementAddrInst( RefElementAddrInst * EI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitRefTailAddrInst( RefTailAddrInst * RTAI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDestructureStructInst( DestructureStructInst * DSI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDestructureTupleInst( DestructureTupleInst * DTI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printMethodInst( MethodInst * I , SILValue Operand)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitClassMethodInst( ClassMethodInst * AMI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitSuperMethodInst( SuperMethodInst * AMI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitObjCMethodInst( ObjCMethodInst * AMI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitObjCSuperMethodInst( ObjCSuperMethodInst * AMI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitWitnessMethodInst( WitnessMethodInst * WMI)",13, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitOpenExistentialAddrInst( OpenExistentialAddrInst * OI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitOpenExistentialRefInst( OpenExistentialRefInst * OI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitOpenExistentialMetatypeInst( OpenExistentialMetatypeInst * OI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitOpenExistentialBoxInst( OpenExistentialBoxInst * OI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitOpenExistentialBoxValueInst( OpenExistentialBoxValueInst * OI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitOpenExistentialValueInst( OpenExistentialValueInst * OI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitInitExistentialAddrInst( InitExistentialAddrInst * AEI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitInitExistentialValueInst( InitExistentialValueInst * AEI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitInitExistentialRefInst( InitExistentialRefInst * AEI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitInitExistentialMetatypeInst( InitExistentialMetatypeInst * AEI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitAllocExistentialBoxInst( AllocExistentialBoxInst * AEBI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDeinitExistentialAddrInst( DeinitExistentialAddrInst * DEI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDeinitExistentialValueInst( DeinitExistentialValueInst * DEI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDeallocExistentialBoxInst( DeallocExistentialBoxInst * DEI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitProjectBlockStorageInst( ProjectBlockStorageInst * PBSI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitInitBlockStorageHeaderInst( InitBlockStorageHeaderInst * IBSHI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitValueMetatypeInst( ValueMetatypeInst * MI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitExistentialMetatypeInst( ExistentialMetatypeInst * MI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitMetatypeInst( MetatypeInst * MI)",1, 71, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitFixLifetimeInst( FixLifetimeInst * RI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitEndLifetimeInst( EndLifetimeInst * ELI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitValueToBridgeObjectInst( ValueToBridgeObjectInst * VBOI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitClassifyBridgeObjectInst( ClassifyBridgeObjectInst * CBOI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitMarkDependenceInst( MarkDependenceInst * MDI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitCopyBlockInst( CopyBlockInst * RI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitCopyBlockWithoutEscapingInst( CopyBlockWithoutEscapingInst * RI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitRefCountingInst( RefCountingInst * I)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitIsUniqueInst( IsUniqueInst * CUI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitIsEscapingClosureInst( IsEscapingClosureInst * CUI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDeallocStackInst( DeallocStackInst * DI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDeallocRefInst( DeallocRefInst * DI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDeallocPartialRefInst( DeallocPartialRefInst * DPI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDeallocValueBufferInst( DeallocValueBufferInst * DVBI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDeallocBoxInst( DeallocBoxInst * DI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDestroyAddrInst( DestroyAddrInst * DI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitProjectValueBufferInst( ProjectValueBufferInst * PVBI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitProjectBoxInst( ProjectBoxInst * PBI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitProjectExistentialBoxInst( ProjectExistentialBoxInst * PEBI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitBeginAccessInst( BeginAccessInst * BAI)",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitEndAccessInst( EndAccessInst * EAI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitBeginUnpairedAccessInst( BeginUnpairedAccessInst * BAI)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitEndUnpairedAccessInst( EndUnpairedAccessInst * EAI)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitCondFailInst( CondFailInst * FI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitIndexAddrInst( IndexAddrInst * IAI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitTailAddrInst( TailAddrInst * TAI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitIndexRawPointerInst( IndexRawPointerInst * IAI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUnreachableInst( UnreachableInst * UI)",1, 52, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitReturnInst( ReturnInst * RI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitThrowInst( ThrowInst * TI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitUnwindInst( UnwindInst * UI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitYieldInst( YieldInst * YI)",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitSwitchValueInst( SwitchValueInst * SII)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printSwitchEnumInst( SwitchEnumInstBase * SOI)",19, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitSwitchEnumInst( SwitchEnumInst * SOI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitSwitchEnumAddrInst( SwitchEnumAddrInst * SOI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printSelectEnumInst( SelectEnumInstBase * SEI)",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitSelectEnumInst( SelectEnumInst * SEI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitSelectEnumAddrInst( SelectEnumAddrInst * SEI)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitSelectValueInst( SelectValueInst * SVI)",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitDynamicMethodBranchInst( DynamicMethodBranchInst * DMBI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printBranchArgs( OperandValueArrayRef args)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitBranchInst( BranchInst * UBI)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitCondBranchInst( CondBranchInst * CBI)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::visitKeyPathInst( KeyPathInst * KPI)",41, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrinter::printKeyPathPatternComponent( const KeyPathPatternComponent & component)",104, 4, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printBlockID( raw_ostream & OS , SILBasicBlock * bb)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILBasicBlock::printAsOperand( raw_ostream & OS , bool PrintType)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILNode::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILNode::print( raw_ostream & OS) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILInstruction::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SingleValueInstruction::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILInstruction::print( raw_ostream & OS) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILBasicBlock::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILBasicBlock::print( raw_ostream & OS) const",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILBasicBlock::print( raw_ostream & OS , SILPrintContext & Ctx) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILFunction::dump( bool Verbose) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILFunction::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILFunction::dump( const char * FileName) const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"getLinkageString( SILLinkage linkage)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printLinkage( llvm :: raw_ostream & OS , SILLinkage linkage , bool isDefinition)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILFunction::print( SILPrintContext & PrintCtx) const",169, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILFunction::printName( raw_ostream & OS) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILGlobalVariable::print( llvm :: raw_ostream & OS , bool Verbose) const",29, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILGlobalVariable::dump( bool Verbose) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILGlobalVariable::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILGlobalVariable::printName( raw_ostream & OS) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILModule::dump( bool Verbose) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILModule::dump( const char * FileName , bool Verbose , bool PrintASTDecls) const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printSILGlobals( SILPrintContext & Ctx , const SILModule :: GlobalListType & Globals)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printSILFunctions( SILPrintContext & Ctx , const SILModule :: FunctionListType & Functions)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printSILVTables( SILPrintContext & Ctx , const SILModule :: VTableListType & VTables)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printSILWitnessTables( SILPrintContext & Ctx , const SILModule :: WitnessTableListType & WTables)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printSILDefaultWitnessTables( SILPrintContext & Ctx , const SILModule :: DefaultWitnessTableListType & WTables)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printSILCoverageMaps( SILPrintContext & Ctx , const SILModule :: CoverageMapCollectionType & CoverageMaps)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILProperty::print( SILPrintContext & Ctx) const",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILProperty::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printSILProperties( SILPrintContext & Ctx , const SILModule :: PropertyListType & Properties)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILModule::print( SILPrintContext & PrintCtx , ModuleDecl * M , bool PrintASTDecls) const",68, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILNode::dumpInContext() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILNode::printInContext( llvm :: raw_ostream & OS) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILInstruction::dumpInContext() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILInstruction::printInContext( llvm :: raw_ostream & OS) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILVTable::print( llvm :: raw_ostream & OS , bool Verbose) const",50, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILVTable::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"printAssociatedTypePath( llvm :: raw_ostream & OS , CanType path)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILWitnessTable::Entry::print( llvm :: raw_ostream & out , bool verbose , const PrintOptions & options) const",61, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILWitnessTable::print( llvm :: raw_ostream & OS , bool Verbose) const",40, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILWitnessTable::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILDefaultWitnessTable::print( llvm :: raw_ostream & OS , bool Verbose) const",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILDefaultWitnessTable::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILCoverageMap::print( SILPrintContext & PrintCtx) const",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILCoverageMap::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILDebugScope::dump( SourceManager & SM , llvm :: raw_ostream & OS , unsigned Indent) const",27, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILSpecializeAttr::print( llvm :: raw_ostream & OS) const",38, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrintContext::SILPrintContext( llvm :: raw_ostream & OS , bool Verbose , bool SortedSIL)",4, 35, 2, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrintContext::SILPrintContext( llvm :: raw_ostream & OS , bool Verbose , bool SortedSIL , bool DebugInfo)",4, 27, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrintContext::setContext( const void * FunctionOrBlock)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrintContext::~SILPrintContext()",2, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrintContext::printInstructionCallBack( const SILInstruction * I)",2, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrintContext::initBlockIDs( ArrayRef<const SILBasicBlock*> Blocks)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrintContext::getID( const SILBasicBlock * Block)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/SILPrinter.cpp,"SILPrintContext::getID( const SILNode * node)",50, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Argument::Argument( StringRef Key , int N)",1, 77, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Argument::Argument( StringRef Key , long N)",1, 78, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Argument::Argument( StringRef Key , long long N)",2, 40, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Argument::Argument( StringRef Key , unsigned N)",2, 40, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Argument::Argument( StringRef Key , unsigned long N)",2, 40, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Argument::Argument( StringRef Key , unsigned long long N)",2, 40, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Argument::Argument( StringRef Key , SILFunction * F)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Argument::Argument( StringRef Key , SILType * Ty)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Remark<DerivedT>::getMsg() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Remark<DerivedT>::getDebugMsg() const",13, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Emitter::Emitter( StringRef PassName , SILModule & M)",10, 28, 10, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"emitRemark( SILModule & Module , const Remark<RemarkT> & R , Diag<ArgTypes...> ID , bool DiagEnabled)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Emitter::emit( const RemarkPassed & R)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Emitter::emit( const RemarkMissed & R)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Emitter::emitDebug( const RemarkPassed & R)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"Emitter::emitDebug( const RemarkMissed & R)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"llvm::yaml::MappingTraits<Remark<KindT>>::mapping( llvm :: yaml :: IO & io , Remark<KindT> & R)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"llvm::yaml::MappingTraits<SourceLoc>::mapping( IO & io , SourceLoc & Loc)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/OptimizationRemark.cpp,"llvm::yaml::MappingTraits<OptRemark::Argument>::mapping( IO & io , OptRemark :: Argument & A)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILSpecializeAttr::getRequirements() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILSpecializeAttr::SILSpecializeAttr( ArrayRef<Requirement> requirements , bool exported , SpecializationKind kind)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILSpecializeAttr::create( SILModule & M , ArrayRef<Requirement> requirements , bool exported , SpecializationKind kind)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::addSpecializeAttr( SILSpecializeAttr * Attr)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::create( SILModule & M , SILLinkage linkage , StringRef name , CanSILFunctionType loweredType , GenericEnvironment * genericEnv , Optional<SILLocation> loc , IsBare_t isBareSILFunction , IsTransparent_t isTrans , IsSerialized_t isSerialized , ProfileCounter entryCount , IsDynamicallyReplaceable_t isDynamic , IsThunk_t isThunk , SubclassScope classSubclassScope , Inline_t inlineStrategy , EffectsKind E , SILFunction * insertBefore , const SILDebugScope * debugScope)",27, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::SILFunction( SILModule & Module , SILLinkage Linkage , StringRef Name , CanSILFunctionType LoweredType , GenericEnvironment * genericEnv , Optional<SILLocation> Loc , IsBare_t isBareSILFunction , IsTransparent_t isTrans , IsSerialized_t isSerialized , ProfileCounter entryCount , IsThunk_t isThunk , SubclassScope classSubclassScope , Inline_t inlineStrategy , EffectsKind E , SILFunction * InsertBefore , const SILDebugScope * DebugScope , IsDynamicallyReplaceable_t isDynamic)",34, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::~SILFunction()",30, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::createProfiler( ASTNode Root , ForDefinition_t forDefinition)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::hasForeignBody() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::numberValues( llvm :: DenseMap<const SILNode*,unsigned> & ValueToNumberMap) const",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::getASTContext() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::getEffectiveOptimizationMode() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::shouldOptimize() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::mapTypeIntoContext( Type type) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::mapTypeIntoContext( SILType type) const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"GenericEnvironment::mapTypeIntoContext( SILModule & M , SILType type) const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::isNoReturnFunction() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::createBasicBlock()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::createBasicBlockAfter( SILBasicBlock * afterBB)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::createBasicBlockBefore( SILBasicBlock * beforeBB)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"getCaseValueForBB( const InstTy * Inst , const SILBasicBlock * BB)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"llvm::DOTGraphTraits<SILFunction*>::DOTGraphTraits( bool isSimple = false)",1, 77, 2, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"llvm::DOTGraphTraits<SILFunction*>::getGraphName( SILFunction * F)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"llvm::DOTGraphTraits<SILFunction*>::getSimpleNodeLabel( SILBasicBlock * Node , SILFunction * F)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"llvm::DOTGraphTraits<SILFunction*>::getCompleteNodeLabel( SILBasicBlock * Node , SILFunction * F)",47, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"llvm::DOTGraphTraits<SILFunction*>::getNodeLabel( SILBasicBlock * Node , SILFunction * Graph)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"llvm::DOTGraphTraits<SILFunction*>::getEdgeSourceLabel( SILBasicBlock * Node , SILBasicBlock :: succblock_iterator I)",56, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"viewCFGHelper( const SILFunction * f , bool skipBBContents)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::viewCFG() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::viewCFGOnly() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::hasSelfMetadataParam() const",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::hasName( const char * Name) const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::hasValidLinkageForFragileRef() const",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::isPossiblyUsedExternally() const",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::isExternallyUsedSymbol() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::convertToDeclaration()",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::getForwardingSubstitutionMap()",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::shouldVerifyOwnership() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"getIdentifierForObjCSelector( ObjCSelector selector , ASTContext & Ctxt)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::setObjCReplacement( AbstractFunctionDecl * replacedFunc)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunction::setObjCReplacement( Identifier replacedFunc)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunctionTraceFormatter::traceName( const void * Entity , raw_ostream & OS) const",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"SILFunctionTraceFormatter::traceLoc( const void * Entity , SourceManager * SM , clang :: SourceManager * CSM , raw_ostream & OS) const",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunction.cpp,"FrontendStatsTracer::getTraceFormatter<constSILFunction*>()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"getAnyMetatypeDepth( CanType type)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"mayBridgeToObjectiveC( ModuleDecl * M , CanType T)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"mustBridgeToSwiftValueBox( ModuleDecl * M , CanType T)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"canClassOrSuperclassesHaveExtensions( ClassDecl * CD , bool isWholeModuleOpts)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"classifyDynamicCastToProtocol( ModuleDecl * M , CanType source , CanType target , bool isWholeModuleOpts)",88, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"classifyDynamicCastFromProtocol( ModuleDecl * M , CanType source , CanType target , bool isWholeModuleOpts)",28, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"getHashableExistentialType( ModuleDecl * M)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"swift::isObjectiveCBridgeable( ModuleDecl * M , CanType Ty)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"swift::isError( ModuleDecl * M , CanType Ty)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"canDynamicallyStoreOptional( CanType type)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"classifyClassHierarchyCast( CanType source , CanType target)",25, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"swift::getNSBridgedClassOfCFClass( ModuleDecl * M , CanType type)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"isCFBridgingConversion( ModuleDecl * M , SILType sourceType , SILType targetType)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"swift::classifyDynamicCast( ModuleDecl * M , CanType source , CanType target , bool isSourceTypeExact , bool isWholeModuleOpts)",415, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"getOptionalDepth( CanType type)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"Source::isAddress() const",1, 68, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"Source::getSILType() const",1, 60, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"Source::Source( SILValue value , CanType formalType)",2, 48, 6, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"Target::isAddress() const",1, 54, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"Target::asAddressSource() const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"Target::asScalarSource( SILValue value) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"Target::getSILType() const",6, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"Target::Target( SILValue address , CanType formalType)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"Target::Target( SILType loweredType , CanType formalType)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::CastEmitter( SILBuilder & B , ModuleDecl * swiftModule , SILLocation loc)",3, 36, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::emitTopLevel( Source source , Target target)",8, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::getTypeLowering( SILType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::getOwnedScalar( Source source , const TypeLowering & srcTL)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::putOwnedScalar( SILValue scalar , Target target)",10, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::emitSameType( Source source , Target target)",32, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::emit( Source source , Target target)",32, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::emitAndInjectIntoOptionals( Source source , Target target , unsigned depth)",12, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::emitOptionalToOptional( Source source , CanType sourceObjectType , Target target)",86, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::prepareForEmitSome( Target target , EmitSomeState & state)",19, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::emitSome( Source source , Target target , EmitSomeState & state)",14, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"CastEmitter::emitNone( Target target)",11, 6, 4, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"swift::emitSuccessfulScalarUnconditionalCast( SILBuilder & B , ModuleDecl * M , SILLocation loc , SILValue value , SILType loweredTargetType , CanType sourceType , CanType targetType , SILInstruction * existingCast)",30, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"swift::emitSuccessfulIndirectUnconditionalCast( SILBuilder & B , ModuleDecl * M , SILLocation loc , SILValue src , CanType sourceType , SILValue dest , CanType targetType , SILInstruction * existingCast)",47, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"swift::canUseScalarCheckedCastInstructions( SILModule & M , CanType sourceType , CanType targetType)",58, 2, 0, 0
repos/cpp/swift/lib/SIL/DynamicCasts.cpp,"swift::emitIndirectConditionalCastWithScalar( SILBuilder & B , ModuleDecl * M , SILLocation loc , CastConsumptionKind consumption , SILValue src , CanType sourceType , SILValue dest , CanType targetType , SILBasicBlock * indirectSuccBB , SILBasicBlock * indirectFailBB , ProfileCounter TrueCount , ProfileCounter FalseCount)",50, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"doesClosureHaveBody( AbstractClosureExpr * ACE)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"isUnmapped( ASTNode N)",37, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"swift::doesASTRequireProfiling( SILModule & M , ASTNode N)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"hasASTBeenTypeChecked( ASTNode N)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"canCreateProfilerForAST( ASTNode N)",19, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SILProfiler::create( SILModule & M , ForDefinition_t forDefinition , ASTNode N)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"walkPatternForProfiling( PatternBindingDecl * PBD , ASTWalker & Walker)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"visitClosureExpr( ASTWalker & Walker , AbstractClosureExpr * CE , F Func)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"visitFunctionDecl( ASTWalker & Walker , AbstractFunctionDecl * AFD , F Func)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"visitNominalTypeDecl( ASTWalker & Walker , NominalTypeDecl * NTD , F Func)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"MapRegionCounters::MapRegionCounters( llvm :: DenseMap<ASTNode,unsigned> & CounterMap)",2, 34, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"MapRegionCounters::mapRegion( ASTNode N)",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"MapRegionCounters::walkToDeclPre( Decl * D)",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"MapRegionCounters::walkToStmtPre( Stmt * S)",21, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"MapRegionCounters::walkToExprPre( Expr * E)",18, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::CounterExpr( Kind K)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::CounterExpr( Kind K , ASTNode Node)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::CounterExpr( Kind K , const CounterExpr & LHS)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::CounterExpr( Kind K , const CounterExpr & LHS , const CounterExpr & RHS)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::Leaf( ASTNode Node)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::Add( const CounterExpr & LHS , const CounterExpr & RHS)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::Sub( const CounterExpr & LHS , const CounterExpr & RHS)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::Zero()",1, 64, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::Ref( const CounterExpr & LHS)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::getReferencedNode() const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::isZero() const",1, 50, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::expand( llvm :: coverage :: CounterExpressionBuilder & Builder , llvm :: DenseMap<ASTNode,unsigned> & Counters) const",19, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::print( raw_ostream & OS) const",22, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CounterExpr::dump() const",1, 62, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SourceMappingRegion::SourceMappingRegion( ASTNode Node , CounterExpr & Count , Optional<SourceLoc> StartLoc , Optional<SourceLoc> EndLoc)",3, 73, 8, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SourceMappingRegion::getNode() const",1, 43, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SourceMappingRegion::getCounter() const",1, 53, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SourceMappingRegion::hasStartLoc() const",1, 59, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SourceMappingRegion::setStartLoc( SourceLoc Loc)",1, 54, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SourceMappingRegion::getStartLoc() const",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SourceMappingRegion::hasEndLoc() const",1, 55, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SourceMappingRegion::setEndLoc( SourceLoc Loc)",1, 50, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SourceMappingRegion::getEndLoc() const",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"PGOMapping::PGOMapping( llvm :: DenseMap<ASTNode,ProfileCounter> & LoadedCounterMap , llvm :: Expected<llvm::InstrProfRecord> & LoadedCounts , llvm :: DenseMap<ASTNode,ASTNode> & RegionCondToParentMap)",5, 78, 8, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"PGOMapping::getParentCounter() const",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"PGOMapping::subtract( ProfileCounter L , ProfileCounter R)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"PGOMapping::loadExecutionCount( ASTNode Node)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"PGOMapping::walkToDeclPre( Decl * D)",22, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"PGOMapping::walkToStmtPre( Stmt * S)",78, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"PGOMapping::walkToExprPre( Expr * E)",31, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::hasCounter( ASTNode Node)",1, 67, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::getCounter( ASTNode Node)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::createCounter( CounterExpr && Expr)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::assignCounter( ASTNode Node , CounterExpr && Expr)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::assignCounter( ASTNode Node)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::addToCounter( ASTNode Node , CounterExpr & Expr)",9, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::subtractFromCounter( ASTNode Node , CounterExpr & Expr)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::getCurrentCounter()",1, 72, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::getExitCounter()",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::setExitCount( ASTNode Node)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::adjustForNonLocalExits( ASTNode Scope , CounterExpr * ControlFlowAdjust)",27, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::pushRegion( ASTNode Node)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::replaceCount( CounterExpr && Expr , Optional<SourceLoc> Start = None)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::getEndLoc( ASTNode Node)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::popRegions( ASTNode ParentNode)",20, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::getRegion()",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::extendRegion( ASTNode S)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::terminateRegion( ASTNode S)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::getConditionNode( StmtCondition SC)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::CoverageMapping( const SourceManager & SM)",1, 55, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::emitSourceRegions( SILModule & M , StringRef Name , StringRef PGOFuncName , uint64_t Hash , llvm :: DenseMap<ASTNode,unsigned> & CounterIndices , StringRef Filename)",22, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::walkToDeclPre( Decl * D)",23, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::walkToDeclPost( Decl * D)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::walkToStmtPre( Stmt * S)",66, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::walkToStmtPost( Stmt * S)",78, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::walkToExprPre( Expr * E)",18, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"CoverageMapping::walkToExprPost( Expr * E)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"getEquivalentPGOLinkage( FormalLinkage Linkage)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"getCurrentFileName( ASTNode Root)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SILProfiler::assignRegionCounters()",66, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SILProfiler::getExecutionCount( ASTNode Node)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILProfiler.cpp,"SILProfiler::getPGOParent( ASTNode Node)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILCoverageMap.cpp,"SILCoverageMap::create( SILModule & M , StringRef Filename , StringRef Name , StringRef PGOFuncName , uint64_t Hash , ArrayRef<MappedRegion> MappedRegions , ArrayRef<CounterExpression> Expressions)",25, 2, 0, 0
repos/cpp/swift/lib/SIL/SILCoverageMap.cpp,"SILCoverageMap::SILCoverageMap( uint64_t Hash)",2, 43, 0, 0
repos/cpp/swift/lib/SIL/SILCoverageMap.cpp,"SILCoverageMap::~SILCoverageMap()",1, 37, 0, 0
repos/cpp/swift/lib/SIL/SILCoverageMap.cpp,"Printer::Printer( const llvm :: coverage :: Counter & C , ArrayRef<llvm::coverage::CounterExpression> Exprs)",3, 30, 7, 0
repos/cpp/swift/lib/SIL/SILCoverageMap.cpp,"Printer::print( raw_ostream & OS) const",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILCoverageMap.cpp,"Printer::operator < <( raw_ostream & OS , const Printer & P)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILCoverageMap.cpp,"SILCoverageMap::printCounter( llvm :: raw_ostream & OS , llvm :: coverage :: Counter C) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVTable.cpp,"SILVTable::create( SILModule & M , ClassDecl * Class , IsSerialized_t Serialized , ArrayRef<Entry> Entries)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVTable.cpp,"SILVTable::getEntry( SILModule & M , SILDeclRef method) const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVTable.cpp,"SILVTable::removeFromVTableCache( Entry & entry)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVTable.cpp,"SILVTable::SILVTable( ClassDecl * c , IsSerialized_t serialized , ArrayRef<Entry> entries)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILVTable.cpp,"SILVTable::~SILVTable()",6, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"HasSingletonMetatype::visitClassType( CanClassType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"HasSingletonMetatype::visitBoundGenericClassType( CanBoundGenericClassType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"HasSingletonMetatype::visitDynamicSelfType( CanDynamicSelfType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"HasSingletonMetatype::visitGenericTypeParamType( CanGenericTypeParamType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"HasSingletonMetatype::visitDependentMemberType( CanDependentMemberType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"HasSingletonMetatype::visitArchetypeType( CanArchetypeType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"HasSingletonMetatype::visitMetatypeType( CanMetatypeType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"HasSingletonMetatype::visitType( CanType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"hasSingletonMetatype( CanType instanceType)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getDeclCaptureKind( CapturedValue capture)",41, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::asImpl()",1, 57, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::TypeClassifierBase( SILModule & M , CanGenericSignature Sig , ResilienceExpansion Expansion)",3, 48, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::handleTrivial( CanType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::handleReference( CanType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::handleAddressOnly( CanType type , RecursiveProperties properties)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::handleNonTrivialAggregate( CanType type , RecursiveProperties properties)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitBuiltinUnsafeValueBufferType( CanBuiltinUnsafeValueBufferType type)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitAnyFunctionType( CanAnyFunctionType type)",11, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitSILFunctionType( CanSILFunctionType type)",10, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitLValueType( CanLValueType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitInOutType( CanInOutType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitErrorType( CanErrorType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::getGenericSignature()",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitAbstractTypeParamType( CanType type)",15, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitGenericTypeParamType( CanGenericTypeParamType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitDependentMemberType( CanDependentMemberType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::getConcreteReferenceStorageReferent( Type type)",25, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitArchetypeType( CanArchetypeType type)",21, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitExistentialType( CanType type)",21, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitProtocolType( CanProtocolType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitProtocolCompositionType( CanProtocolCompositionType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitEnumType( CanEnumType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitBoundGenericEnumType( CanBoundGenericEnumType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitStructType( CanStructType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitBoundGenericStructType( CanBoundGenericStructType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitTupleType( CanTupleType type)",7, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitDynamicSelfType( CanDynamicSelfType type)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitSILBlockStorageType( CanSILBlockStorageType type)",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::visitSILBoxType( CanSILBoxType type)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifierBase::handleAggregateByProperties( CanType type , RecursiveProperties props)",10, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifier::TypeClassifier( SILModule & M , CanGenericSignature Sig , ResilienceExpansion Expansion)",3, 51, 8, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifier::handle( CanType type , RecursiveProperties properties)",3, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifier::visitAnyEnumType( CanType type , EnumDecl * D)",13, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifier::visitAnyStructType( CanType type , StructDecl * D)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifier::getSubstitutedTypeForTypeLowering( CanType type)",15, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeClassifier::handleClassificationFromLowering( CanType type , const TypeLowering & lowering)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"classifyType( CanType type , SILModule & M , CanGenericSignature sig , ResilienceExpansion expansion)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"SILType::isAddressOnly( CanType type , SILModule & M , CanGenericSignature sig , ResilienceExpansion expansion)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableTypeLowering::LoadableTypeLowering( SILType type , RecursiveProperties properties , IsReferenceCounted_t isRefCounted)",3, 56, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableTypeLowering::emitDestroyAddress( SILBuilder & B , SILLocation loc , SILValue addr) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableTypeLowering::emitDestroyRValue( SILBuilder & B , SILLocation loc , SILValue value) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableTypeLowering::emitCopyInto( SILBuilder & B , SILLocation loc , SILValue src , SILValue dest , IsTake_t isTake , IsInitialization_t isInit) const",6, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::TrivialTypeLowering( SILType type)",3, 55, 6, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::emitLoadOfCopy( SILBuilder & B , SILLocation loc , SILValue addr , IsTake_t isTake) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::emitStoreOfCopy( SILBuilder & B , SILLocation loc , SILValue value , SILValue addr , IsInitialization_t isInit) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::emitStore( SILBuilder & B , SILLocation loc , SILValue value , SILValue addr , StoreOwnershipQualifier qual) const",8, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::emitLoad( SILBuilder & B , SILLocation loc , SILValue addr , LoadOwnershipQualifier qual) const",6, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::emitDestroyAddress( SILBuilder & B , SILLocation loc , SILValue addr) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::emitLoweredDestroyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind loweringStyle) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::emitLoweredCopyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind style) const",6, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::emitCopyValue( SILBuilder & B , SILLocation loc , SILValue value) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TrivialTypeLowering::emitDestroyValue( SILBuilder & B , SILLocation loc , SILValue value) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"NonTrivialLoadableTypeLowering::NonTrivialLoadableTypeLowering( SILType type , IsReferenceCounted_t isRefCounted)",5, 56, 35, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"NonTrivialLoadableTypeLowering::NonTrivialLoadableTypeLowering( SILType type , RecursiveProperties properties , IsReferenceCounted_t isRefCounted)",6, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"NonTrivialLoadableTypeLowering::emitLoadOfCopy( SILBuilder & B , SILLocation loc , SILValue addr , IsTake_t isTake) const",6, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"NonTrivialLoadableTypeLowering::emitStoreOfCopy( SILBuilder & B , SILLocation loc , SILValue newValue , SILValue addr , IsInitialization_t isInit) const",7, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"NonTrivialLoadableTypeLowering::emitStore( SILBuilder & B , SILLocation loc , SILValue value , SILValue addr , StoreOwnershipQualifier qual) const",23, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"NonTrivialLoadableTypeLowering::emitLoad( SILBuilder & B , SILLocation loc , SILValue addr , LoadOwnershipQualifier qual) const",15, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::Child::Child( IndexType index , const TypeLowering & lowering)",2, 47, 6, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::Child::getLowering() const",1, 68, 6, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::Child::getIndex() const",1, 51, 6, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::Child::isTrivial() const",1, 63, 6, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::asImpl() const",1, 75, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::asImpl()",1, 57, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::LoadableAggTypeLowering( CanType type)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::getChildren( SILModule & M) const",12, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::forEachNonTrivialChild( SILBuilder & B , SILLocation loc , SILValue aggValue , const T & operation) const",14, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::forEachNonTrivialChild( SILBuilder & B , SILLocation loc , SILValue aggValue , SimpleOperationTy operation) const",9, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::emitCopyValue( SILBuilder & B , SILLocation loc , SILValue value) const",7, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::emitLoweredCopyValue( SILBuilder & B , SILLocation loc , SILValue aggValue , TypeExpansionKind style) const",24, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::emitDestroyValue( SILBuilder & B , SILLocation loc , SILValue aggValue) const",9, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableAggTypeLowering::emitLoweredDestroyValue( SILBuilder & B , SILLocation loc , SILValue aggValue , TypeExpansionKind loweringStyle) const",17, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableTupleTypeLowering::LoadableTupleTypeLowering( CanType type)",2, 41, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableTupleTypeLowering::emitRValueProject( SILBuilder & B , SILLocation loc , SILValue tupleValue , unsigned index , const TypeLowering & eltLowering) const",6, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableTupleTypeLowering::rebuildAggregate( SILBuilder & B , SILLocation loc , ArrayRef<SILValue> values) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableTupleTypeLowering::lowerChildren( SILModule & M , SmallVectorImpl<Child> & children) const",13, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableStructTypeLowering::LoadableStructTypeLowering( CanType type)",2, 41, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableStructTypeLowering::emitRValueProject( SILBuilder & B , SILLocation loc , SILValue structValue , VarDecl * field , const TypeLowering & fieldLowering) const",6, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableStructTypeLowering::rebuildAggregate( SILBuilder & B , SILLocation loc , ArrayRef<SILValue> values) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableStructTypeLowering::lowerChildren( SILModule & M , SmallVectorImpl<Child> & children) const",11, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableEnumTypeLowering::LoadableEnumTypeLowering( CanType type)",3, 65, 6, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableEnumTypeLowering::emitCopyValue( SILBuilder & B , SILLocation loc , SILValue value) const",7, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableEnumTypeLowering::emitLoweredCopyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind style) const",8, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableEnumTypeLowering::emitDestroyValue( SILBuilder & B , SILLocation loc , SILValue value) const",8, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LoadableEnumTypeLowering::emitLoweredDestroyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind style) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LeafLoadableTypeLowering::LeafLoadableTypeLowering( SILType type , RecursiveProperties properties , IsReferenceCounted_t isRefCounted)",3, 74, 6, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LeafLoadableTypeLowering::emitLoweredCopyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind style) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LeafLoadableTypeLowering::emitLoweredDestroyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind style) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"ReferenceTypeLowering::ReferenceTypeLowering( SILType type)",3, 56, 6, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"ReferenceTypeLowering::emitCopyValue( SILBuilder & B , SILLocation loc , SILValue value) const",12, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"ReferenceTypeLowering::emitDestroyValue( SILBuilder & B , SILLocation loc , SILValue value) const",8, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::AddressOnlyTypeLowering( SILType type , RecursiveProperties properties)",3, 7, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitCopyInto( SILBuilder & B , SILLocation loc , SILValue src , SILValue dest , IsTake_t isTake , IsInitialization_t isInit) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitLoadOfCopy( SILBuilder & B , SILLocation loc , SILValue addr , IsTake_t isTake) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitStoreOfCopy( SILBuilder & B , SILLocation loc , SILValue newValue , SILValue addr , IsInitialization_t isInit) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitStore( SILBuilder & B , SILLocation loc , SILValue value , SILValue addr , StoreOwnershipQualifier qual) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitLoad( SILBuilder & B , SILLocation loc , SILValue addr , LoadOwnershipQualifier qual) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitDestroyAddress( SILBuilder & B , SILLocation loc , SILValue addr) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitDestroyRValue( SILBuilder & B , SILLocation loc , SILValue value) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitCopyValue( SILBuilder & B , SILLocation loc , SILValue value) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitLoweredCopyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind style) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitDestroyValue( SILBuilder & B , SILLocation loc , SILValue value) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"AddressOnlyTypeLowering::emitLoweredDestroyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind style) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"UnsafeValueBufferTypeLowering::UnsafeValueBufferTypeLowering( SILType type)",3, 78, 32, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"UnsafeValueBufferTypeLowering::emitCopyInto( SILBuilder & B , SILLocation loc , SILValue src , SILValue dest , IsTake_t isTake , IsInitialization_t isInit) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"UnsafeValueBufferTypeLowering::emitDestroyAddress( SILBuilder & B , SILLocation loc , SILValue addr) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"UnsafeValueBufferTypeLowering::emitDestroyRValue( SILBuilder & B , SILLocation loc , SILValue value) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"OpaqueValueTypeLowering::OpaqueValueTypeLowering( SILType type , RecursiveProperties properties)",2, 77, 6, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"OpaqueValueTypeLowering::emitCopyInto( SILBuilder & B , SILLocation loc , SILValue src , SILValue dest , IsTake_t isTake , IsInitialization_t isInit) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"OpaqueValueTypeLowering::emitLoweredCopyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind style) const",5, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"OpaqueValueTypeLowering::emitLoweredDestroyValue( SILBuilder & B , SILLocation loc , SILValue value , TypeExpansionKind style) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"OpaqueValueTypeLowering::emitCopyValue( SILBuilder & B , SILLocation loc , SILValue value) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"OpaqueValueTypeLowering::emitDestroyValue( SILBuilder & B , SILLocation loc , SILValue value) const",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LowerType::LowerType( TypeConverter & TC , CanGenericSignature Sig , ResilienceExpansion Expansion , IsDependent_t Dependent)",4, 40, 8, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LowerType::handleTrivial( CanType type)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LowerType::handleReference( CanType type)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LowerType::handleAddressOnly( CanType type , RecursiveProperties properties)",9, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LowerType::visitBuiltinUnsafeValueBufferType( CanBuiltinUnsafeValueBufferType type)",4, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LowerType::visitTupleType( CanTupleType tupleType)",10, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LowerType::visitAnyStructType( CanType structType , StructDecl * D)",20, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LowerType::visitAnyEnumType( CanType enumType , EnumDecl * D)",39, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"LowerType::handleAggregateByProperties( CanType type , RecursiveProperties props)",11, 6, 4, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::TypeConverter( SILModule & m)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::~TypeConverter()",12, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeLowering::operator new( size_t size , TypeConverter & tc , IsDependent_t dependent)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::find( TypeKey k)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::insert( TypeKey k , const TypeLowering * tl)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"getLoweredTupleType( TypeConverter & tc , AbstractionPattern origType , CanTupleType substType)",44, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"getLoweredOptionalType( TypeConverter & tc , AbstractionPattern origType , CanType substType , CanType substObjectType)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"getLoweredReferenceStorageType( TypeConverter & tc , AbstractionPattern origType , CanReferenceStorageType substType)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getSILFunctionType( AbstractionPattern origType , CanFunctionType substType)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getTypeLowering( AbstractionPattern origType , Type origSubstType)",34, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getLoweredRValueType( AbstractionPattern origType , CanType substType)",108, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getTypeLowering( SILType type)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getTypeLoweringForLoweredType( TypeKey key)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getTypeLoweringForUncachedLoweredType( TypeKey key)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"getGlobalAccessorType( CanType varType)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"getDefaultArgGeneratorInterfaceType( TypeConverter & TC , ValueDecl * VD , DeclContext * DC , unsigned DefaultArgIndex)",26, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"getStoredPropertyInitializerInterfaceType( TypeConverter & TC , VarDecl * VD)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"getDestructorInterfaceType( TypeConverter & TC , DestructorDecl * dd , bool isDeallocating , bool isForeign)",30, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"getIVarInitDestroyerInterfaceType( TypeConverter & TC , ClassDecl * cd , bool isObjC , bool isDestroyer)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getEffectiveGenericEnvironment( AnyFunctionRef fn , CaptureInfo captureInfo)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getEffectiveGenericSignature( DeclContext * dc)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getEffectiveGenericSignature( AnyFunctionRef fn , CaptureInfo captureInfo)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getFunctionInterfaceTypeWithCaptures( CanAnyFunctionType funcType , AnyFunctionRef theClosure)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::makeConstantInterfaceType( SILDeclRef c)",68, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getConstantGenericEnvironment( SILDeclRef c)",43, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getSubstitutedStorageType( AbstractStorageDecl * value , Type lvalueType)",38, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::pushGenericContext( CanGenericSignature sig)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::popGenericContext( CanGenericSignature sig)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getProtocolDispatchStrategy( ProtocolDecl * P)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"getAnyFunctionRefFromCapture( CapturedValue capture)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::hasLoweredLocalCaptures( AnyFunctionRef fn)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getLoweredLocalCaptures( AnyFunctionRef fn)",165, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::checkForABIDifferences( SILType type1 , SILType type2 , bool thunkOptionals)",106, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::checkFunctionForABIDifferences( SILFunctionType * fnTy1 , SILFunctionType * fnTy2)",77, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getInterfaceBoxTypeForCapture( ValueDecl * captured , CanType loweredInterfaceType , bool isMutable)",51, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getContextBoxTypeForCapture( ValueDecl * captured , CanType loweredContextType , GenericEnvironment * env , bool isMutable)",23, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::getBoxTypeForEnumElement( SILType enumType , EnumElementDecl * elt)",36, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"countNumberOfInnerFields( unsigned & fieldsCount , SILModule & Module , SILType Ty)",59, 2, 0, 0
repos/cpp/swift/lib/SIL/TypeLowering.cpp,"TypeConverter::countNumberOfFields( SILType Ty)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::SILBasicBlock( SILFunction * parent , SILBasicBlock * relativeToBB , bool after)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::~SILBasicBlock()",26, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::getDebugID() const",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::getModule() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::insert( iterator InsertPt , SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::push_back( SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::push_front( SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::remove( SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::eraseInstructions()",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::erase( SILInstruction * I)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::eraseFromParent()",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::cloneArgumentList( SILBasicBlock * Other)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::createFunctionArgument( SILType Ty , const ValueDecl * D)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::insertFunctionArgument( arg_iterator Iter , SILType Ty , ValueOwnershipKind OwnershipKind , const ValueDecl * D)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::replaceFunctionArgument( unsigned i , SILType Ty , ValueOwnershipKind Kind , const ValueDecl * D)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::replacePhiArgument( unsigned i , SILType Ty , ValueOwnershipKind Kind , const ValueDecl * D)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::createPhiArgument( SILType Ty , ValueOwnershipKind Kind , const ValueDecl * D)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::insertPhiArgument( arg_iterator Iter , SILType Ty , ValueOwnershipKind Kind , const ValueDecl * D)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::eraseArgument( int Index)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::split( iterator I)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::moveAfter( SILBasicBlock * After)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::moveTo( SILBasicBlock :: iterator To , SILInstruction * I)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"llvm::ilist_traits<swift::SILBasicBlock>::transferNodesFromList( llvm :: ilist_traits<SILBasicBlock> & SrcTraits , block_iterator First , block_iterator Last)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"ScopeCloner::ScopeCloner( SILFunction & NewFn)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"ScopeCloner::getOrCreateClonedScope( const SILDebugScope * OrigScope)",24, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::isEntry() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::getPhiArguments() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::getFunctionArguments() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::isNoReturn() const",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::isTrampoline() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::isLegalToHoistInto() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILBasicBlock.cpp,"SILBasicBlock::getScopeOfFirstNonMetaInstruction()",6, 2, 0, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::State( SILValue value , SmallPtrSetImpl<SILBasicBlock*> & visitedBlocks , ErrorBehaviorKind errorBehavior)",4, 40, 6, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::handleError( llvm :: function_ref<void()> && messagePrinterFunc) const",12, 4, 2, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::initializeAllNonConsumingUses( ArrayRef<BranchPropagatedUser> nonConsumingUsers)",40, 2, 0, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::initializeAllConsumingUses( ArrayRef<BranchPropagatedUser> consumingUses , SmallVectorImpl<std::pair<BranchPropagatedUser,SILBasicBlock*>> & predsToAddToWorklist)",38, 2, 0, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::initializeConsumingUse( BranchPropagatedUser consumingUser , SILBasicBlock * userBlock)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::checkForSameBlockUseAfterFree( BranchPropagatedUser consumingUser , SILBasicBlock * userBlock)",57, 2, 0, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::checkPredsForDoubleConsume( BranchPropagatedUser consumingUser , SILBasicBlock * userBlock)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::checkPredsForDoubleConsume( SILBasicBlock * userBlock)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::performDataflow( DeadEndBlocks & deBlocks)",75, 2, 0, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"State::checkDataflowEndState( DeadEndBlocks & deBlocks)",46, 2, 0, 0
repos/cpp/swift/lib/SIL/LinearLifetimeChecker.cpp,"swift::valueHasLinearLifetime( SILValue value , ArrayRef<BranchPropagatedUser> consumingUses , ArrayRef<BranchPropagatedUser> nonConsumingUses , SmallPtrSetImpl<SILBasicBlock*> & visitedBlocks , DeadEndBlocks & deBlocks , ErrorBehaviorKind errorBehavior)",72, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::getUnderlyingObject( SILValue V)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::getUnderlyingAddressRoot( SILValue V)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::getUnderlyingObjectStopAtMarkDependence( SILValue V)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"isRCIdentityPreservingCast( ValueKind Kind)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripSinglePredecessorArgs( SILValue V)",41, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripCastsWithoutMarkDependence( SILValue V)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripCasts( SILValue V)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripUpCasts( SILValue V)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripClassCasts( SILValue V)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripAddressAccess( SILValue V)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripAddressProjections( SILValue V)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripValueProjections( SILValue V)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripIndexingInsts( SILValue V)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripExpectIntrinsic( SILValue V)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripBorrow( SILValue V)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::getSingleValueCopyOrCast( SILInstruction * I)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::isEndOfScopeMarker( SILInstruction * user)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::isIncidentalUse( SILInstruction * user)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::onlyAffectsRefCount( SILInstruction * user)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::mayCheckRefCount( SILInstruction * User)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::isSanitizerInstrumentation( SILInstruction * Instruction)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::stripConvertFunctions( SILValue V)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::isPartialApplyOfReabstractionThunk( PartialApplyInst * PAI)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"findClosureStoredIntoBlock( SILValue V)",48, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"swift::findClosuresForFunctionValue( SILValue funcVal , TinyPtrVector<PartialApplyInst*> & results)",74, 2, 0, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"OwnershipQualifiedKindVisitor::visitSILInstruction( SILInstruction * I)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"OwnershipQualifiedKindVisitor::visitLoadInst( LoadInst * LI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"OwnershipQualifiedKindVisitor::visitStoreInst( StoreInst * SI)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/InstructionUtils.cpp,"FunctionOwnershipEvaluator::evaluate( SILInstruction * I)",48, 2, 0, 0
repos/cpp/swift/lib/SIL/ValueUtils.cpp,"swift::mergeSILValueOwnership( ArrayRef<SILValue> values)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::getDirectFormalResultsType()",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::getAllResultsType()",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::getFormalCSemanticResult()",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::getSelfInstanceType() const",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::getDefaultWitnessMethodProtocol() const",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::getWitnessMethodClass( ModuleDecl & M) const",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getKnownType( Optional<CanType> & cacheSlot , ASTContext & C , StringRef moduleName , StringRef typeName)",43, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"Lowering::adjustFunctionType( CanAnyFunctionType t , AnyFunctionType :: ExtInfo extInfo)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"Lowering::adjustFunctionType( CanSILFunctionType type , SILFunctionType :: ExtInfo extInfo , ParameterConvention callee , Optional<ProtocolConformanceRef> witnessMethodConformance)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::getWithRepresentation( Representation repr)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::getWithExtInfo( ExtInfo newExt)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"Conventions::Conventions( ConventionsKind k)",1, 46, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"Conventions::getKind() const",1, 51, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"Conventions::getIndirect( ValueOwnership ownership , bool forSelf , unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",18, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"Conventions::getDirect( ValueOwnership ownership , bool forSelf , unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",17, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureResults::DestructureResults( SILModule & M , const Conventions & conventions , SmallVectorImpl<SILResultInfo> & results)",3, 52, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureResults::destructure( AbstractionPattern origType , CanType substType)",44, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureResults::isFormallyReturnedIndirectly( AbstractionPattern origType , CanType substType , const TypeLowering & substTL)",25, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"isClangTypeMoreIndirectThanSubstType( SILModule & M , const clang :: Type * clangTy , CanType substTy)",47, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"isFormallyPassedIndirectly( SILModule & M , AbstractionPattern origType , CanType substType , const TypeLowering & substTL)",33, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureInputs::DestructureInputs( SILModule & M , const Conventions & conventions , const ForeignInfo & foreign , SmallVectorImpl<SILParameterInfo> & inputs)",4, 68, 4, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureInputs::destructure( AbstractionPattern origType , CanAnyFunctionType :: CanParamArrayRef params , AnyFunctionType :: ExtInfo extInfo)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureInputs::isFormallyPassedIndirectly( AbstractionPattern origType , CanType substType , const TypeLowering & substTL)",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureInputs::visitTopLevelParams( AbstractionPattern origType , CanAnyFunctionType :: CanParamArrayRef params , AnyFunctionType :: ExtInfo extInfo)",57, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureInputs::visit( ValueOwnership ownership , bool forSelf , AbstractionPattern origType , CanType substType , SILFunctionTypeRepresentation rep)",55, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureInputs::maybeAddForeignParameters()",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureInputs::maybeAddForeignErrorParameter()",14, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DestructureInputs::maybeAddForeignSelfParameter()",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"isPseudogeneric( SILDeclRef c)",28, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"updateResultTypeForForeignError( ForeignErrorConvention convention , CanGenericSignature genericSig , AbstractionPattern origResultType , CanType substFormalResultType)",28, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"lowerCaptureContextParameters( SILModule & M , AnyFunctionRef function , CanGenericSignature genericSig , SmallVectorImpl<SILParameterInfo> & inputs)",76, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"destructureYieldsForReadAccessor( SILModule & M , AbstractionPattern origType , CanType valueType , SmallVectorImpl<SILYieldInfo> & yields)",26, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"destructureYieldsForCoroutine( SILModule & M , Optional<SILDeclRef> origConstant , Optional<SILDeclRef> constant , Optional<SubstitutionMap> reqtSubs , SmallVectorImpl<SILYieldInfo> & yields , SILCoroutineKind & coroutineKind)",49, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getSILFunctionType( SILModule & M , AbstractionPattern origType , CanAnyFunctionType substFnInterfaceType , AnyFunctionType :: ExtInfo extInfo , const Conventions & conventions , const ForeignInfo & foreignInfo , Optional<SILDeclRef> origConstant , Optional<SILDeclRef> constant , Optional<SubstitutionMap> reqtSubs , Optional<ProtocolConformanceRef> witnessMethodConformance)",103, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DeallocatorConventions::DeallocatorConventions()",1, 74, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DeallocatorConventions::getIndirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DeallocatorConventions::getDirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DeallocatorConventions::getCallee() const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DeallocatorConventions::getResult( const TypeLowering & tl) const",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DeallocatorConventions::getDirectSelfParameter( const AbstractionPattern & type) const",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DeallocatorConventions::getIndirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DeallocatorConventions::classof( const Conventions * C)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultConventions::DefaultConventions( NormalParameterConvention normalParameterConvention)",3, 64, 8, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultConventions::isNormalParameterConventionGuaranteed() const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultConventions::getIndirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultConventions::getDirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultConventions::getCallee() const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultConventions::getResult( const TypeLowering & tl) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultConventions::getDirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultConventions::getIndirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultConventions::classof( const Conventions * C)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultInitializerConventions::DefaultInitializerConventions()",2, 64, 6, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultInitializerConventions::getDirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultInitializerConventions::getIndirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultAllocatorConventions::DefaultAllocatorConventions()",2, 64, 6, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultAllocatorConventions::getDirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultAllocatorConventions::getIndirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultSetterConventions::DefaultSetterConventions()",2, 64, 6, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultBlockConventions::DefaultBlockConventions()",1, 76, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultBlockConventions::getIndirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultBlockConventions::getDirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultBlockConventions::getCallee() const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultBlockConventions::getResult( const TypeLowering & substTL) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultBlockConventions::getDirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultBlockConventions::getIndirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"DefaultBlockConventions::classof( const Conventions * C)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getNormalArgumentConvention( SILModule & M)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getNativeSILFunctionType( SILModule & M , AbstractionPattern origType , CanAnyFunctionType substInterfaceType , AnyFunctionType :: ExtInfo extInfo , Optional<SILDeclRef> origConstant , Optional<SILDeclRef> constant , Optional<SubstitutionMap> reqtSubs , Optional<ProtocolConformanceRef> witnessMethodConformance)",64, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"swift::getNativeSILFunctionType( SILModule & M , AbstractionPattern origType , CanAnyFunctionType substType , Optional<SILDeclRef> origConstant , Optional<SILDeclRef> substConstant , Optional<SubstitutionMap> reqtSubs , Optional<ProtocolConformanceRef> witnessMethodConformance)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"isCFTypedef( const TypeLowering & tl , clang :: QualType type)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getIndirectCParameterConvention( clang :: QualType type)",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getIndirectCParameterConvention( const clang :: ParmVarDecl * param)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getDirectCParameterConvention( clang :: QualType type)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getDirectCParameterConvention( const clang :: ParmVarDecl * param)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::getMethod() const",1, 68, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::ObjCMethodConventions( const clang :: ObjCMethodDecl * method)",2, 66, 4, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::getIndirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::getDirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::getCallee() const",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::getMethodFamilyForCFResult() const",22, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::isImplicitPlusOneCFResult() const",25, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::getResult( const TypeLowering & tl) const",44, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::getDirectSelfParameter( const AbstractionPattern & type) const",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::getIndirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"ObjCMethodConventions::classof( const Conventions * C)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::getParamType( unsigned i) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::CFunctionTypeConventions( ConventionsKind kind , const clang :: FunctionType * type)",3, 41, 6, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::CFunctionTypeConventions( const clang :: FunctionType * type)",2, 67, 4, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::getIndirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::getDirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::getCallee() const",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::getResult( const TypeLowering & tl) const",7, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::getDirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::getIndirectSelfParameter( const AbstractionPattern & type) const",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionTypeConventions::classof( const Conventions * C)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionConventions::CFunctionConventions( const clang :: FunctionDecl * decl)",4, 23, 7, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionConventions::getDirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionConventions::getResult( const TypeLowering & tl) const",24, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"CFunctionConventions::classof( const Conventions * C)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getSILFunctionTypeForClangDecl( SILModule & M , const clang :: Decl * clangDecl , CanAnyFunctionType origType , CanAnyFunctionType substInterfaceType , AnyFunctionType :: ExtInfo extInfo , const ForeignInfo & foreignInfo , Optional<SILDeclRef> constant)",30, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getSILFunctionTypeForAbstractCFunction( SILModule & M , AbstractionPattern origType , CanAnyFunctionType substType , AnyFunctionType :: ExtInfo extInfo , Optional<SILDeclRef> constant)",33, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"findClangMethod( ValueDecl * method)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getSelectorFamily( Identifier name)",28, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getSelectorFamily( SILDeclRef c)",45, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SelectorFamilyConventions::SelectorFamilyConventions( SelectorFamily family)",2, 70, 4, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SelectorFamilyConventions::getIndirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SelectorFamilyConventions::getDirectParameter( unsigned index , const AbstractionPattern & type , const TypeLowering & substTL) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SelectorFamilyConventions::getCallee() const",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SelectorFamilyConventions::getResult( const TypeLowering & tl) const",23, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SelectorFamilyConventions::getDirectSelfParameter( const AbstractionPattern & type) const",5, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SelectorFamilyConventions::getIndirectSelfParameter( const AbstractionPattern & type) const",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SelectorFamilyConventions::classof( const Conventions * C)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getSILFunctionTypeForSelectorFamily( SILModule & M , SelectorFamily family , CanAnyFunctionType origType , CanAnyFunctionType substInterfaceType , AnyFunctionType :: ExtInfo extInfo , const ForeignInfo & foreignInfo , Optional<SILDeclRef> constant)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"isImporterGeneratedAccessor( const clang :: Decl * clangDecl , SILDeclRef constant)",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getUncachedSILFunctionTypeForConstant( SILModule & M , SILDeclRef constant , CanAnyFunctionType origLoweredInterfaceType)",61, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"TypeConverter::getUncachedSILFunctionTypeForConstant( SILDeclRef constant , CanAnyFunctionType origInterfaceType)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"isClassOrProtocolMethod( ValueDecl * vd)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"TypeConverter::getDeclRefRepresentation( SILDeclRef c)",58, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"TypeConverter::getConstantInfo( SILDeclRef constant)",51, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"TypeConverter::getConstantSelfParameter( SILDeclRef constant)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"checkASTTypeForABIDifferences( CanType type1 , CanType type2)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"copyOptionalityFromDerivedToBase( TypeConverter & tc , CanType derived , CanType base)",72, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"TypeConverter::getConstantOverrideInfo( SILDeclRef derived , SILDeclRef base)",76, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::getASTContext()",1, 71, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::SILTypeSubstituter( SILModule & silModule , TypeSubstitutionFn Subst , LookupConformanceFn Conformances , CanGenericSignature Sig)",9, 5, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::visitSILFunctionType( CanSILFunctionType origType)",6, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::substSILFunctionType( CanSILFunctionType origType)",49, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::subst( SILType type)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::subst( SILResultInfo orig)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::subst( SILYieldInfo orig)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::subst( SILParameterInfo orig)",3, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::visitTupleType( CanTupleType origType)",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::visitSILBlockStorageType( CanSILBlockStorageType origType)",4, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::visitBoundGenericEnumType( CanBoundGenericEnumType origType)",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILTypeSubstituter::visitType( CanType origType)",15, 4, 2, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILType::subst( SILModule & silModule , TypeSubstitutionFn subs , LookupConformanceFn conformances , CanGenericSignature genericSig) const",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILType::subst( SILModule & silModule , SubstitutionMap subs) const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::substGenericArgs( SILModule & silModule , SubstitutionMap subs)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::substGenericArgs( SILModule & silModule , TypeSubstitutionFn subs , LookupConformanceFn conformances)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"TypeConverter::getBridgedFunctionType( AbstractionPattern pattern , CanAnyFunctionType t , AnyFunctionType :: ExtInfo extInfo , Bridgeability bridging)",39, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getBridgedFunction( SILDeclRef declRef)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"getAbstractionPatternForConstant( ASTContext & ctx , SILDeclRef constant , CanAnyFunctionType fnType , unsigned numParameterLists)",34, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"TypeConverter::getLoweredFormalTypes( SILDeclRef constant , CanAnyFunctionType fnType)",108, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"areABICompatibleParamsOrReturns( SILType a , SILType b)",102, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::isABICompatibleWith( CanSILFunctionType other) const",61, 2, 0, 0
repos/cpp/swift/lib/SIL/SILFunctionType.cpp,"SILFunctionType::ABICompatibilityCheckResult::getMessage() const",30, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::addFunctionToWorklist( SILFunction * F)",16, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::maybeAddFunctionToWorklist( SILFunction * F)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::processFunction( SILFunction * F)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::linkInVTable( ClassDecl * D)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitApplyInst( ApplyInst * AI)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitTryApplyInst( TryApplyInst * TAI)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitPartialApplyInst( PartialApplyInst * PAI)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitFunctionRefInst( FunctionRefInst * FRI)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitDynamicFunctionRefInst( DynamicFunctionRefInst * FRI)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitPreviousDynamicFunctionRefInst( PreviousDynamicFunctionRefInst * FRI)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"mustDeserializeProtocolConformance( SILModule & M , ProtocolConformanceRef c)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitProtocolConformance( ProtocolConformanceRef ref , const Optional<SILDeclRef> & Member)",89, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitApplySubstitutions( SubstitutionMap subs)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitInitExistentialAddrInst( InitExistentialAddrInst * IEI)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitInitExistentialRefInst( InitExistentialRefInst * IERI)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitAllocRefInst( AllocRefInst * ARI)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::visitMetatypeInst( MetatypeInst * MI)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/Linker.cpp,"SILLinkerVisitor::process()",23, 2, 0, 0
repos/cpp/swift/lib/SIL/OwnershipUtils.cpp,"swift::isValueAddressOrTrivial( SILValue v , SILModule & m)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/OwnershipUtils.cpp,"swift::isOwnershipForwardingValueKind( SILNodeKind kind)",26, 2, 0, 0
repos/cpp/swift/lib/SIL/OwnershipUtils.cpp,"swift::isGuaranteedForwardingValueKind( SILNodeKind kind)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/OwnershipUtils.cpp,"swift::isGuaranteedForwardingValue( SILValue value)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/OwnershipUtils.cpp,"swift::isGuaranteedForwardingInst( SILInstruction * i)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OwnershipUtils.cpp,"swift::isOwnershipForwardingInst( SILInstruction * i)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/OwnershipUtils.cpp,"swift::getUnderlyingBorrowIntroducers( SILValue inputValue , SmallVectorImpl<SILValue> & out)",49, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"AccessedStorage::classify( SILValue base)",37, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"AccessedStorage::AccessedStorage( SILValue base , Kind kind)",52, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"AccessedStorage::getDecl( SILFunction * F) const",28, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"AccessedStorage::getKindName( AccessedStorage :: Kind k)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"AccessedStorage::print( raw_ostream & os) const",22, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"AccessedStorage::dump() const",1, 60, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"isExternalGlobalAddressor( ApplyInst * AI)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"isUnsafePointerExtraction( StructExtractInst * SEI)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"checkSwitchEnumBlockArg( SILPhiArgument * arg)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"isAddressForLocalInitOnly( SILValue sourceAddr)",21, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"swift::findAccessedStorage( SILValue sourceAddr)",144, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"swift::findAccessedStorageNonNested( SILValue sourceAddr)",9, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"isLetAccess( const AccessedStorage & storage , SILFunction * F)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"isScratchBuffer( SILValue value)",4, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"swift::memInstMustInitialize( Operand * memOper)",30, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"swift::isPossibleFormalAccessBase( const AccessedStorage & storage , SILFunction * F)",57, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"visitApplyAccesses( ApplySite apply , llvm :: function_ref<void(Operand*)> visitor)",22, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"visitBuiltinAddress( BuiltinInst * builtin , llvm :: function_ref<void(Operand*)> visitor)",78, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"swift::visitAccessedAddress( SILInstruction * I , llvm :: function_ref<void(Operand*)> visitor)",125, 2, 0, 0
repos/cpp/swift/lib/SIL/MemAccessUtils.cpp,"swift::removeBeginAccess( BeginAccessInst * beginAccess)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/LoopInfo.cpp,"SILLoop::dump() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/LoopInfo.cpp,"SILLoopInfo::SILLoopInfo( SILFunction * F , DominanceInfo * DT)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/LoopInfo.cpp,"SILLoop::canDuplicate( SILInstruction * I) const",70, 2, 0, 0
repos/cpp/swift/lib/SIL/LoopInfo.cpp,"SILLoopInfo::verify() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/PrettyStackTrace.cpp,"printDebugLocDescription( llvm :: raw_ostream & out , SILLocation :: DebugLoc loc , ASTContext & Context)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/PrettyStackTrace.cpp,"swift::printSILLocationDescription( llvm :: raw_ostream & out , SILLocation loc , ASTContext & Context)",33, 2, 0, 0
repos/cpp/swift/lib/SIL/PrettyStackTrace.cpp,"PrettyStackTraceSILLocation::print( llvm :: raw_ostream & out) const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/PrettyStackTrace.cpp,"PrettyStackTraceSILFunction::print( llvm :: raw_ostream & out) const",9, 2, 0, 0
repos/cpp/swift/lib/SIL/PrettyStackTrace.cpp,"PrettyStackTraceSILFunction::printFunctionInfo( llvm :: raw_ostream & out) const",13, 2, 0, 0
repos/cpp/swift/lib/SIL/PrettyStackTrace.cpp,"PrettyStackTraceSILNode::print( llvm :: raw_ostream & out) const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::SILValueOwnershipChecker( SILModule & mod , DeadEndBlocks & deadEndBlocks , SILValue value , ErrorBehaviorKind errorBehavior , llvm :: SmallPtrSetImpl<SILBasicBlock*> & visitedBlocks)",8, 4, 2, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::check()",18, 4, 2, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::getLifetimeEndingUsers() const",11, 4, 2, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::getRegularUsers() const",10, 4, 2, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::handleError( function_ref<void()> && messagePrinterFunc) const",12, 4, 2, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::gatherUsers( SmallVectorImpl<BranchPropagatedUser> & lifetimeEndingUsers , SmallVectorImpl<BranchPropagatedUser> & nonLifetimeEndingUsers , SmallVectorImpl<BranchPropagatedUser> & implicitRegularUsers)",215, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::checkFunctionArgWithoutLifetimeEndingUses( SILFunctionArgument * arg)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::checkYieldWithoutLifetimeEndingUses( BeginApplyResult * yield)",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::checkValueWithoutLifetimeEndingUses()",53, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::isGuaranteedFunctionArgWithLifetimeEndingUses( SILFunctionArgument * arg , const llvm :: SmallVectorImpl<BranchPropagatedUser> & lifetimeEndingUsers) const",17, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::isSubobjectProjectionWithLifetimeEndingUses( SILValue value , const llvm :: SmallVectorImpl<BranchPropagatedUser> & lifetimeEndingUsers) const",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValueOwnershipChecker::checkUses()",60, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILInstruction::verifyOperandOwnership() const",64, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"SILValue::verifyOwnership( SILModule & mod , DeadEndBlocks * deadEndBlocks) const",36, 2, 0, 0
repos/cpp/swift/lib/SIL/SILOwnershipVerifier.cpp,"OwnershipChecker::checkValue( SILValue value)",28, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"ValueBase::replaceAllUsesWith( ValueBase * RHS)",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"ValueBase::replaceAllUsesWithUndef()",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"ValueBase::getDefiningInstruction()",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"ValueBase::getDefiningInstructionResult()",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"SILNode::getParentBlock() const",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"SILNode::getFunction() const",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"SILNode::getModule() const",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"SILNode::getRepresentativeSILNodeSlowPath() const",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"SILValue::getLoc() const",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"ValueOwnershipKind::ValueOwnershipKind( SILModule & M , SILType Type , SILArgumentConvention Convention)",40, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"swift::operator < <( llvm :: raw_ostream & os , ValueOwnershipKind Kind)",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"ValueOwnershipKind::merge( ValueOwnershipKind RHS) const",15, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"ValueOwnershipKind::ValueOwnershipKind( StringRef S)",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"ValueOwnershipKind::getProjectedOwnershipKind( SILModule & M , SILType Proj) const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"swift::getSILValueKind( StringRef Name)",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"swift::getSILValueName( ValueKind Kind)",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"OperandOwnershipKindMap::print( llvm :: raw_ostream & os) const",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"OperandOwnershipKindMap::dump() const",1, 68, 0, 0
repos/cpp/swift/lib/SIL/SILValue.cpp,"swift::operator < <( llvm :: raw_ostream & os , UseLifetimeConstraint constraint)",12, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"swift::getMethodDispatch( AbstractFunctionDecl * method)",40, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"swift::requiresForeignToNativeThunk( ValueDecl * vd)",14, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"swift::requiresForeignEntryPoint( ValueDecl * vd)",27, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::SILDeclRef( ValueDecl * vd , SILDeclRef :: Kind kind , bool isCurried , bool isForeign)",6, 3, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::SILDeclRef( SILDeclRef :: Loc baseLoc , bool isCurried , bool asForeign)",41, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getAnyFunctionRef() const",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isThunk() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isClangImported() const",21, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isClangGenerated() const",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isClangGenerated( ClangNode node)",10, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isImplicit() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getLinkage( ForDefinition_t forDefinition) const",149, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getDefaultArgGenerator( Loc loc , unsigned defaultArgIndex)",8, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::hasClosureExpr() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::hasAutoClosureExpr() const",4, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::hasFuncDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getClosureExpr() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getAutoClosureExpr() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getFuncDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isSetter() const",7, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getAbstractFunctionDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isTransparent() const",20, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isSerialized() const",84, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isNoinline() const",22, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isAlwaysInline() const",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::hasEffectsAttribute() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getEffectsAttribute() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isForeignToNativeThunk() const",16, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isNativeToForeignThunk() const",13, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"mangleClangDecl( raw_ostream & buffer , const clang :: NamedDecl * clangDecl , ASTContext & ctx)",6, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::mangle( ManglingKind MKind) const",122, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::requiresNewVTableEntry() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::requiresNewWitnessTableEntry() const",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::requiresNewWitnessTableEntry( AbstractFunctionDecl * func)",3, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getOverridden() const",9, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getNextOverriddenVTableEntry() const",51, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getOverriddenWitnessTableEntry() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getOverriddenWitnessTableEntry( AbstractFunctionDecl * func)",41, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getOverriddenVTableEntry() const",11, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getAsRegularLocation() const",5, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getSubclassScope() const",59, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::getParameterListCount() const",18, 2, 0, 0
repos/cpp/swift/lib/SIL/SILDeclRef.cpp,"SILDeclRef::isDynamicallyReplaceable() const",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitRefToRawPointerInst( RefToRawPointerInst * RRPI)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitUpcastInst( UpcastInst * UCI)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitPointerToAddressInst( PointerToAddressInst * PTAI)",119, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitUncheckedAddrCastInst( UncheckedAddrCastInst * UADCI)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitUncheckedRefCastInst( UncheckedRefCastInst * URCI)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitBridgeObjectToRefInst( BridgeObjectToRefInst * BORI)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitUncheckedRefCastAddrInst( UncheckedRefCastAddrInst * URCI)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitUnconditionalCheckedCastAddrInst( UnconditionalCheckedCastAddrInst * UCCAI)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitUnconditionalCheckedCastInst( UnconditionalCheckedCastInst * UCCI)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitRawPointerToRefInst( RawPointerToRefInst * RawToRef)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitUncheckedTrivialBitCastInst( UncheckedTrivialBitCastInst * UTBCI)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitUncheckedBitwiseCastInst( UncheckedBitwiseCastInst * UBCI)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"visitMetatypeConversionInst( SILBuilder & Builder , ConversionInst * MCI , MetatypeRepresentation Representation)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitThickToObjCMetatypeInst( ThickToObjCMetatypeInst * TTOCMI)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitObjCToThickMetatypeInst( ObjCToThickMetatypeInst * OCTTMI)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitCheckedCastBranchInst( CheckedCastBranchInst * CBI)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitCheckedCastAddrBranchInst( CheckedCastAddrBranchInst * CCABI)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitConvertEscapeToNoEscapeInst( ConvertEscapeToNoEscapeInst * Cvt)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerCastVisitors.cpp,"SILCombiner::visitConvertFunctionInst( ConvertFunctionInst * CFI)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombiner::addReachableCodeToWorklist( SILBasicBlock * BB)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombineWorklist::add( SILInstruction * I)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombiner::doOneIteration( SILFunction & F , unsigned Iteration)",112, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombineWorklist::addInitialGroup( ArrayRef<SILInstruction*> List)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombiner::runOnFunction( SILFunction & F)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombiner::insertNewInstBefore( SILInstruction * New , SILInstruction & Old)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombiner::replaceInstUsesWith( SingleValueInstruction & I , ValueBase * V)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombiner::replaceInstUsesPairwiseWith( SILInstruction * oldI , SILInstruction * newI)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombiner::eraseInstFromFunction( SILInstruction & I , SILBasicBlock :: iterator & InstIter , bool AddOperandsToWorklist)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombine::run()",21, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombine::handleDeleteNotification( SILNode * node)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"SILCombine::needsNotifications()",1, 54, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombine.cpp,"swift::createSILCombine()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"SILCombiner::optimizeBuiltinCompareEq( BuiltinInst * BI , bool NegateResult)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"SILCombiner::optimizeBuiltinCanBeObjCClass( BuiltinInst * BI)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"getTypeWidth( SILType Ty)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"SILCombiner::optimizeBuiltinTruncOrBitCast( BuiltinInst * I)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"SILCombiner::optimizeBuiltinZextOrBitCast( BuiltinInst * I)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"optimizeBuiltinWithSameOperands( SILBuilder & Builder , BuiltinInst * I , SILCombiner * C)",73, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"matchSizeOfMultiplication( SILValue I , MetatypeInst * RequiredType , BuiltinInst * & TruncOrBitCast , SILValue & Ptr , SILValue & Distance)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"createIndexAddrFrom( IndexRawPointerInst * I , MetatypeInst * Metatype , BuiltinInst * TruncOrBitCast , SILValue Ptr , SILValue Distance , SILType RawPointerTy , SILBuilder & Builder)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"optimizeBuiltinArrayOperation( BuiltinInst * I , SILBuilder & Builder)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"getBitOpArgs( BuiltinInst * BI , SILValue & op , APInt & bits)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"optimizeBitOp( BuiltinInst * BI , CombineFunc combine , NeutralFunc isNeutral , ZeroFunc isZero , SILBuilder & Builder , SILCombiner * C)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"getIntConst( SILValue op)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"SILCombiner::optimizeStringObject( BuiltinInst * BI)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerBuiltinVisitors.cpp,"SILCombiner::visitBuiltinInst( BuiltinInst * I)",140, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitAllocExistentialBoxInst( AllocExistentialBoxInst * AEBI)",65, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"getInjectEnumCaseTo( SILValue Addr)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitSwitchEnumAddrInst( SwitchEnumAddrInst * SEAI)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitSelectEnumAddrInst( SelectEnumAddrInst * SEAI)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitSelectValueInst( SelectValueInst * SVI)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitSwitchValueInst( SwitchValueInst * SVI)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"AllocStackAnalyzer::AllocStackAnalyzer( AllocStackInst * ASI)",1, 56, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"AllocStackAnalyzer::analyze()",13, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"AllocStackAnalyzer::visitSILInstruction( SILInstruction * I)",1, 70, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"AllocStackAnalyzer::visitDestroyAddrInst( DestroyAddrInst * I)",1, 51, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"AllocStackAnalyzer::visitDeinitExistentialAddrInst( DeinitExistentialAddrInst * I)",1, 71, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"AllocStackAnalyzer::visitDeallocStackInst( DeallocStackInst * I)",1, 53, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"AllocStackAnalyzer::visitInitExistentialAddrInst( InitExistentialAddrInst * I)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"AllocStackAnalyzer::visitOpenExistentialAddrInst( OpenExistentialAddrInst * I)",20, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"AllocStackAnalyzer::visitCopyAddrInst( CopyAddrInst * I)",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitAllocStackInst( AllocStackInst * AS)",96, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitAllocRefInst( AllocRefInst * AR)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"isConstIndexAddr( SILValue val , unsigned & index)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::optimizeLoadFromStringLiteral( LoadInst * LI)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitLoadInst( LoadInst * LI)",72, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitIndexAddrInst( IndexAddrInst * IA)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitReleaseValueInst( ReleaseValueInst * RVI)",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitRetainValueInst( RetainValueInst * RVI)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitReleaseValueAddrInst( ReleaseValueAddrInst * RVI)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitRetainValueAddrInst( RetainValueAddrInst * RVI)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitCondFailInst( CondFailInst * CFI)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitStrongRetainInst( StrongRetainInst * SRI)",51, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitInjectEnumAddrInst( InjectEnumAddrInst * IEAI)",303, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitUnreachableInst( UnreachableInst * UI)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitUncheckedTakeEnumDataAddrInst( UncheckedTakeEnumDataAddrInst * TEDAI)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitStrongReleaseInst( StrongReleaseInst * SRI)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitCondBranchInst( CondBranchInst * CBI)",131, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitSelectEnumInst( SelectEnumInst * SEI)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitTupleExtractInst( TupleExtractInst * TEI)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitFixLifetimeInst( FixLifetimeInst * FLI)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitAllocRefDynamicInst( AllocRefDynamicInst * ARDI)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitEnumInst( EnumInst * EI)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitMarkDependenceInst( MarkDependenceInst * MDI)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerMiscVisitors.cpp,"SILCombiner::visitClassifyBridgeObjectInst( ClassifyBridgeObjectInst * CBOI)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"foldInverseReabstractionThunks( PartialApplyInst * PAI , SILCombiner * Combiner)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::visitPartialApplyInst( PartialApplyInst * PAI)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"PartialApplyCombiner::PartialApplyCombiner( PartialApplyInst * PAI , SILBuilder & Builder , SILCombiner * SilCombiner)",4, 36, 6, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"PartialApplyCombiner::allocateTemporaries()",75, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"PartialApplyCombiner::deallocateTemporaries()",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"PartialApplyCombiner::releaseTemporaries()",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"PartialApplyCombiner::processSingleApply( FullApplySite AI)",103, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"PartialApplyCombiner::combine()",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::tryOptimizeApplyOfPartialApply( PartialApplyInst * PAI)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::optimizeApplyOfConvertFunctionInst( FullApplySite AI , ConvertFunctionInst * CFI)",81, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::recursivelyCollectARCUsers( UserListTy & Uses , ValueBase * Value)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::eraseApply( FullApplySite FAS , const UserListTy & Users)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::optimizeConcatenationOfStringLiterals( ApplyInst * AI)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::replaceWitnessMethodInst( WitnessMethodInst * WMI , SILBuilderContext & BuilderCtx , CanType ConcreteType , const ProtocolConformanceRef ConformanceRef)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::propagateSoleConformingType( FullApplySite Apply , WitnessMethodInst * WMI)",80, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"canReplaceCopiedArg( FullApplySite Apply , SILInstruction * InitExistential , DominanceAnalysis * DA , unsigned ArgIdx)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::canReplaceArg( FullApplySite Apply , const ConcreteExistentialInfo & CEI , unsigned ArgIdx)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::createApplyWithConcreteType( FullApplySite Apply , const llvm :: SmallDenseMap<unsigned,ConcreteExistentialInfo> & CEIs , SILBuilderContext & BuilderCtx)",79, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::propagateConcreteTypeOfInitExistential( FullApplySite Apply , WitnessMethodInst * WMI)",56, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::propagateConcreteTypeOfInitExistential( FullApplySite Apply)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"hasOnlyRetainReleaseUsers( ApplyInst * AI , SILInstruction * IgnoreUser , SmallVectorImpl<SILInstruction*> & Users)",16, 3, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"knowHowToEmitReferenceCountInsts( ApplyInst * Call)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"emitMatchingRCAdjustmentsForCall( ApplyInst * Call , SILValue OnX)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::optimizeIdentityCastComposition( ApplyInst * FInverse , StringRef FInverseName , StringRef FName)",67, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::rewriteApplyCallee( FullApplySite apply , SILValue callee)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::visitApplyInst( ApplyInst * AI)",79, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::isTryApplyResultNotUsed( UserListTy & AcceptedUses , TryApplyInst * TAI)",48, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/SILCombiner/SILCombinerApplyVisitors.cpp,"SILCombiner::visitTryApplyInst( TryApplyInst * AI)",69, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addCFGPrinterPipeline( SILPassPipelinePlan & P , StringRef Name)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addMandatoryDebugSerialization( SILPassPipelinePlan & P)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addOwnershipModelEliminatorPipeline( SILPassPipelinePlan & P)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addDefiniteInitialization( SILPassPipelinePlan & P)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addMandatoryOptPipeline( SILPassPipelinePlan & P , const SILOptions & Options)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getDiagnosticPassPipeline( const SILOptions & Options)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getOwnershipEliminatorPassPipeline()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addSimplifyCFGSILCombinePasses( SILPassPipelinePlan & P)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addHighLevelLoopOptPasses( SILPassPipelinePlan & P)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addSSAPasses( SILPassPipelinePlan & P , OptimizationLevelKind OpLevel , bool stopAfterSerialization = false)",122, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addPerfDebugSerializationPipeline( SILPassPipelinePlan & P)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addPerfEarlyModulePassPipeline( SILPassPipelinePlan & P)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addHighLevelEarlyLoopOptPipeline( SILPassPipelinePlan & P)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addMidModulePassesStackPromotePassPipeline( SILPassPipelinePlan & P)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addMidLevelPassPipeline( SILPassPipelinePlan & P , bool stopAfterSerialization)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addClosureSpecializePassPipeline( SILPassPipelinePlan & P)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addLowLevelPassPipeline( SILPassPipelinePlan & P)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addLateLoopOptPassPipeline( SILPassPipelinePlan & P)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addLastChanceOptPassPipeline( SILPassPipelinePlan & P)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"addSILDebugInfoGeneratorPipeline( SILPassPipelinePlan & P)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getLoweringPassPipeline()",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getIRGenPreparePassPipeline( const SILOptions & Options)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getSILOptPreparePassPipeline( const SILOptions & Options)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getPerformancePassPipeline( const SILOptions & Options)",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getOnonePassPipeline()",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getInstCountPassPipeline()",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::addPasses( ArrayRef<PassKind> PassKinds)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getPassPipelineForKinds( ArrayRef<PassKind> PassKinds)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::dump()",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::print( llvm :: raw_ostream & os)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassPipeline.cpp,"SILPassPipelinePlan::getPassPipelineFromFile( StringRef Filename)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::runSILDiagnosticPasses( SILModule & Module)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::runSILOwnershipEliminatorPass( SILModule & Module)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::runSILOptPreparePasses( SILModule & Module)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::runSILOptimizationPasses( SILModule & Module)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::runSILPassesForOnone( SILModule & Module)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::runSILOptimizationPassesWithFileSpecification( SILModule & M , StringRef Filename)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::PassKindFromString( StringRef IDString)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::PassKindID( PassKind Kind)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::PassKindTag( PassKind Kind)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/Passes.cpp,"swift::runSILLoweringPasses( SILModule & Module)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"DebugOnlyPassNumberOpt::operator =( const std :: string & Val) const",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"doPrintBefore( SILTransform * T , SILFunction * F)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"doPrintAfter( SILTransform * T , SILFunction * F , bool Default)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"isDisabled( SILTransform * T)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"printModule( SILModule * Mod , bool EmitVerboseSIL)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"DebugPrintEnabler::DebugPrintEnabler( unsigned PassNumber)",17, 4, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"DebugPrintEnabler::~DebugPrintEnabler()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"PassManagerDeserializationNotificationHandler::PassManagerDeserializationNotificationHandler( SILPassManager * pm)",1, 80, 2, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"PassManagerDeserializationNotificationHandler::getName() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"PassManagerDeserializationNotificationHandler::didDeserialize( ModuleDecl * mod , SILFunction * fn)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::SILPassManager( SILModule * M , llvm :: StringRef Stage , bool isMandatoryPipeline)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::SILPassManager( SILModule * M , irgen :: IRGenModule * IRMod , llvm :: StringRef Stage , bool isMandatoryPipeline)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::continueTransforming()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::analysesUnlocked()",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"breakBeforeRunning( StringRef fnName , SILFunctionTransform * SFT)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::dumpPassInfo( const char * Title , SILTransform * Tr , SILFunction * F)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::dumpPassInfo( const char * Title , unsigned TransIdx , SILFunction * F)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::runPassOnFunction( unsigned TransIdx , SILFunction * F)",98, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::runFunctionPasses( unsigned FromTransIdx , unsigned ToTransIdx)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::runModulePass( unsigned TransIdx)",76, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::execute()",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::~SILPassManager()",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::notifyOfNewFunction( SILFunction * F , SILTransform * T)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::addFunctionToWorklist( SILFunction * F , SILFunction * DerivedFrom)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::restartWithCurrentFunction( SILTransform * T)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::resetAndRemoveTransformations()",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::setStageName( llvm :: StringRef NextStage)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::getStageName() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::getOptions() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::addPass( PassKind Kind)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::addPassForName( StringRef Name)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"CallGraph::child_iterator::child_iterator( SmallVectorImpl<Edge> :: iterator baseIter)",3, 10, 6, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"CallGraph::child_iterator::operator ++()",1, 65, 6, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"CallGraph::child_iterator::operator ++( int)",5, 8, 6, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"CallGraph::child_iterator::operator *() const",1, 58, 6, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"CallGraph::child_iterator::operator ==( const child_iterator & RHS) const",3, 8, 6, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"CallGraph::child_iterator::operator !=( const child_iterator & RHS) const",3, 8, 6, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"CallGraph::child_iterator::operator -( const child_iterator & RHS) const",3, 8, 6, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"CallGraph::CallGraph( SILModule * M , BasicCalleeAnalysis * BCA)",27, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::wrap( std :: string & Str , int NumEdgeLabels)",17, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::GraphTraits<CallGraph::Node*>::getEntryNode( NodeRef N)",1, 57, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::GraphTraits<CallGraph::Node*>::child_begin( NodeRef N)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::GraphTraits<CallGraph::Node*>::child_end( NodeRef N)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::GraphTraits<CallGraph*>::getEntryNode( GraphType F)",1, 65, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::GraphTraits<CallGraph*>::nodes_begin( GraphType CG)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::GraphTraits<CallGraph*>::nodes_end( GraphType CG)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::GraphTraits<CallGraph*>::size( GraphType CG)",1, 68, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::DOTGraphTraits<CallGraph*>::DOTGraphTraits( bool isSimple = false)",1, 79, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::DOTGraphTraits<CallGraph*>::getNodeLabel( const CallGraph :: Node * Node , const CallGraph * Graph)",6, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::DOTGraphTraits<CallGraph*>::getNodeDescription( const CallGraph :: Node * Node , const CallGraph * Graph)",7, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::DOTGraphTraits<CallGraph*>::getEdgeSourceLabel( const CallGraph :: Node * Node , CallGraph :: child_iterator I)",8, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"llvm::DOTGraphTraits<CallGraph*>::getEdgeAttributes( const CallGraph :: Node * Node , CallGraph :: child_iterator I , const CallGraph * Graph)",8, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PassManager.cpp,"SILPassManager::viewCallGraph()",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PrettyStackTrace.cpp,"PrettyStackTraceSILFunctionTransform::PrettyStackTraceSILFunctionTransform( SILFunctionTransform * SFT , unsigned PassNumber)",5, 38, 2, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PrettyStackTrace.cpp,"PrettyStackTraceSILFunctionTransform::print( llvm :: raw_ostream & out) const",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/PassManager/PrettyStackTrace.cpp,"PrettyStackTraceSILModuleTransform::print( llvm :: raw_ostream & out) const",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"hasLoopInvariantOperands( SILInstruction * I , SILLoop * L , llvm :: DenseSet<SILInstruction*> & Inv)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"canDuplicateOrMoveToPreheader( SILLoop * L , SILBasicBlock * Preheader , SILBasicBlock * Blk , SmallVectorImpl<SILInstruction*> & Move)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"mapOperands( SILInstruction * I , const llvm :: DenseMap<ValueBase*,SILValue> & ValueMap)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"updateSSAForUseOfValue( SILSSAUpdater & Updater , SmallVectorImpl<SILPhiArgument*> & InsertedPHIs , const llvm :: DenseMap<ValueBase*,SILValue> & ValueMap , SILBasicBlock * Header , SILBasicBlock * EntryCheckBlock , SILValue Res)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"updateSSAForUseOfInst( SILSSAUpdater & Updater , SmallVectorImpl<SILPhiArgument*> & InsertedPHIs , const llvm :: DenseMap<ValueBase*,SILValue> & ValueMap , SILBasicBlock * Header , SILBasicBlock * EntryCheckBlock , SILInstruction * Inst)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"rewriteNewLoopEntryCheckBlock( SILBasicBlock * Header , SILBasicBlock * EntryCheckBlock , const llvm :: DenseMap<ValueBase*,SILValue> & ValueMap)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"updateDomTree( DominanceInfo * DT , SILBasicBlock * Preheader , SILBasicBlock * Latch , SILBasicBlock * Header)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"rotateLoopAtMostUpToLatch( SILLoop * L , DominanceInfo * DT , SILLoopInfo * LI , bool ShouldVerify)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"isSingleBlockLoop( SILLoop * L)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"swift::rotateLoop( SILLoop * L , DominanceInfo * DT , SILLoopInfo * LI , bool RotateSingleBlockLoops , SILBasicBlock * UpTo , bool ShouldVerify)",145, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"LoopRotation::run()",51, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopRotate.cpp,"swift::createLoopRotate()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"getAccessPath( SILValue V , SmallVectorImpl<unsigned> & Path)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"StructUseCollector::collectUses( ValueBase * V , ArrayRef<unsigned> AccessPath)",28, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"StructUseCollector::hasSingleAddressUse( SILInstruction * SingleAddressUser)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"StructUseCollector::definesSingleObjectType( ValueBase * V)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"StructUseCollector::collectAddressUses( ValueBase * V , ArrayRef<unsigned> AccessPathSuffix , Operand * StructVal)",90, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"areArraysEqual( RCIdentityFunctionInfo * RCIA , SILValue A , SILValue B , SILValue ArrayAddress)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"isRelease( SILInstruction * Inst , SILValue RetainedValue , SILValue ArrayAddress , RCIdentityFunctionInfo * RCIA , SmallPtrSetImpl<Operand*> & MatchedReleases)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::COWArrayOpt( RCIdentityFunctionInfo * RCIA , SILLoop * L , DominanceAnalysis * DA)",5, 56, 8, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::checkUniqueArrayContainer( SILValue ArrayContainer)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::getReachingBlocks()",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"isNonMutatingArraySemanticCall( SILInstruction * Inst)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::isRetainReleasedBeforeMutate( SILInstruction * RetainInst , bool IsUniquelyIdentifiedArray)",58, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::checkSafeArrayAddressUses( UserList & AddressUsers)",56, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"isTransitiveSafeUser( SILInstruction * I)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::checkSafeArrayValueUses( UserList & ArrayValueUsers)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::checkSafeArrayElementUse( SILInstruction * UseInst , SILValue ArrayVal)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::checkSafeElementValueUses( UserOperList & ElementValueUsers)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::hasLoopOnlyDestructorSafeArrayOperations()",93, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::getArrayAddressBase( SILValue V)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::hoistAddressProjections( Operand & ArrayOp)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::hoistMakeMutable( ArraySemanticsCall MakeMutable)",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOpt::run()",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"COWArrayOptPass::run()",32, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"swift::createCOWArrayOpts()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::ArrayPropertiesAnalysis( SILLoop * L , DominanceAnalysis * DA)",3, 33, 6, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::run()",37, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::stripArrayStructLoad( SILValue V)",16, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::getReachingBlocks()",15, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::checkSafeArrayAddressUses( UserList & AddressUsers)",51, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::checkSafeArrayValueUses( UserList & ValueUsers)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::checkSafeElementValueUses( UserOperList & ElementValueUsers)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::isSafeArrayContainer( SILValue V)",27, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::getLoopExitingBlocks()",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::isConditionallyExecuted( ArraySemanticsCall Call)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::isClassElementTypeArray( SILValue Arr)",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesAnalysis::canHoistArrayPropsInst( ArraySemanticsCall Call)",43, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"RegionCloner::RegionCloner( SILBasicBlock * EntryBB , DominanceInfo & DT)",3, 28, 6, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"RegionCloner::cloneRegion( ArrayRef<SILBasicBlock*> exitBBs)",26, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"RegionCloner::fixDomTree()",15, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"RegionCloner::getMappedValue( SILValue V)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"RegionCloner::postProcess( SILInstruction * Orig , SILInstruction * Cloned)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"RegionCloner::updateSSAForValue( SILBasicBlock * OrigBB , SILValue V , SILSSAUpdater & SSAUp)",21, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"RegionCloner::updateSSAForm()",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesSpecializer::ArrayPropertiesSpecializer( DominanceInfo * DT , SILLoopAnalysis * LA , SILBasicBlock * Hoistable)",3, 76, 6, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesSpecializer::run()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesSpecializer::getLoop()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"createStructExtract( SILBuilder & B , SILLocation Loc , SILValue Opd , unsigned FieldNo)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"getBinaryFunction( StringRef Name , SILType IntSILTy , ASTContext & C)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"createAnd( SILBuilder & B , SILLocation Loc , SILValue Opd1 , SILValue Opd2)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"createFastNativeArraysCheck( SmallVectorImpl<ArraySemanticsCall> & ArrayProps , SILBuilder & B)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"collectArrayPropsCalls( RegionCloner & Cloner , SmallVectorImpl<SILBasicBlock*> & ExitBlocks , SmallVectorImpl<ArraySemanticsCall> & Calls)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"replaceArrayPropsCall( SILBuilder & B , ArraySemanticsCall C)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"collectImmediateLoopDominatedBlocks( const SILLoop * Lp , DominanceInfoNode * Node , SmallVectorImpl<SILBasicBlock*> & Blocks)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"ArrayPropertiesSpecializer::specializeLoopNest()",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"SwiftArrayOptPass::run()",61, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/COWArrayOpt.cpp,"swift::createSwiftArrayOpts()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"LoopCloner::LoopCloner( SILLoop * Loop)",2, 78, 6, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"LoopCloner::getMappedValue( SILValue V)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"LoopCloner::postProcess( SILInstruction * Orig , SILInstruction * Cloned)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"LoopCloner::cloneLoop()",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"getMaxLoopTripCount( SILLoop * Loop , SILBasicBlock * Preheader , SILBasicBlock * Header , SILBasicBlock * Latch)",86, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"canAndShouldUnrollLoop( SILLoop * Loop , uint64_t TripCount)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"redirectTerminator( SILBasicBlock * Latch , unsigned CurLoopIter , unsigned LastLoopIter , SILBasicBlock * CurrentHeader , SILBasicBlock * NextIterationsHeader)",77, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"LoopCloner::collectLoopLiveOutValues( DenseMap<SILValue,SmallVector<SILValue,8>> & LoopLiveOutValues)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"updateSSA( SILModule & M , SILLoop * Loop , DenseMap<SILValue,SmallVector<SILValue,8>> & LoopLiveOutValues)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"tryToUnrollLoop( SILLoop * Loop)",84, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"LoopUnrolling::run()",29, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LoopUnroll.cpp,"swift::createLoopUnroll()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"getArrayStructPointer( ArrayCallKind K , SILValue Array)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isReleaseSafeArrayReference( SILValue Ref , ArraySet & ReleaseSafeArrayReferences , RCIdentityFunctionInfo * RCIA)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"mayChangeArraySize( SILInstruction * I , ArrayCallKind & Kind , SILValue & Array , ArraySet & ReleaseSafeArrayReferences , RCIdentityFunctionInfo * RCIA)",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isIdentifiedUnderlyingArrayObject( SILValue V)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"ABCAnalysis::ABCAnalysis( bool loopMode , ArraySet & ReleaseSafe , RCIdentityFunctionInfo * rcia)",5, 30, 8, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"ABCAnalysis::analyzeBlock( SILBasicBlock * BB)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"ABCAnalysis::analyze( SILInstruction * I)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"ABCAnalysis::isUnsafe( SILValue Array) const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"ABCAnalysis::clearArraysUnsafeFlag()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"ABCAnalysis::analyzeInstruction( SILInstruction * Inst)",36, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"getArrayIndexPair( SILValue Array , SILValue ArrayIndex , ArrayCallKind K)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"removeRedundantChecksInBlock( SILBasicBlock & BB , ArraySet & Arrays , RCIdentityFunctionInfo * RCIA)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"removeRedundantChecks( DominanceInfoNode * CurBB , ABCAnalysis & ABC , IndexedArraySet & DominatingSafeChecks , SILLoop * Loop)",71, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"hasCondFailUse( SILValue V)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isOverflowChecked( BuiltinInst * AI)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isSignedLessEqual( SILValue Start , SILValue End , SILBasicBlock & BB)",48, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isLessThan( SILValue Start , SILValue End)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"swapCmpID( BuiltinValueKind ID)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"invertCmpID( BuiltinValueKind ID)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"getZeroToCountArray( SILValue Start , SILValue End)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isLessThanCheck( SILValue Start , SILValue End , CondBranchInst * CondBr , SILBasicBlock * Preheader)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isRangeChecked( SILValue Start , SILValue End , SILBasicBlock * Preheader , DominanceInfo * DT)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"dominates( DominanceInfo * DT , SILValue V , SILBasicBlock * B)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"getSub( SILLocation Loc , SILValue Val , unsigned SubVal , SILBuilder & B)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionInfo::InductionInfo()",2, 71, 6, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionInfo::InductionInfo( SILArgument * HV , BuiltinInst * I , SILValue S , SILValue E , BuiltinValueKind C , bool IsOverflowChecked = false)",4, 54, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionInfo::isValid()",1, 42, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionInfo::operator bool()",1, 40, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionInfo::getInstruction()",1, 51, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionInfo::getFirstValue()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionInfo::getLastValue( SILLocation & Loc , SILBuilder & B)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionInfo::checkOverflow( SILBuilder & Builder)",18, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionAnalysis::InductionAnalysis( DominanceInfo * D , IVInfo & IVs , SILBasicBlock * Preheader , SILBasicBlock * Header , SILBasicBlock * ExitingBlk , SILBasicBlock * ExitBlk)",5, 38, 6, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionAnalysis::analyze()",23, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionAnalysis::operator [ ]( SILArgument * A)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"InductionAnalysis::analyzeIndVar( SILArgument * HeaderVal , BuiltinInst * Inc , IntegerLiteralInst * IncVal)",55, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isGuaranteedToBeExecuted( DominanceInfo * DT , SILBasicBlock * Block , SILBasicBlock * SingleExitingBlk)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"AccessFunction::AccessFunction( InductionInfo * I)",1, 48, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"AccessFunction::operator bool()",1, 45, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"AccessFunction::getLinearFunction( SILValue Idx , InductionAnalysis & IndVars)",19, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"AccessFunction::isZeroToCount( SILValue Array)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"AccessFunction::hoistCheckToPreheader( ArraySemanticsCall CheckToHoist , SILBasicBlock * Preheader , DominanceInfo * DT)",30, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"hasArrayType( SILValue Value , SILModule & M)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"hoistChecksInLoop( DominanceInfo * DT , DominanceInfoNode * DTNode , ABCAnalysis & ABC , InductionAnalysis & IndVars , SILBasicBlock * Preheader , SILBasicBlock * Header , SILBasicBlock * SingleExitingBlk)",106, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isValueKnownFalseAt( SILValue Val , SILInstruction * At , DominanceInfo * DT)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isComparisonKnownTrue( BuiltinInst * Builtin , InductionInfo & IndVar)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"isComparisonKnownFalse( BuiltinInst * Builtin , InductionInfo & IndVar)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"hoistBoundsChecks( SILLoop * Loop , DominanceInfo * DT , SILLoopInfo * LI , IVInfo & IVs , ArraySet & Arrays , RCIdentityFunctionInfo * RCIA , bool ShouldVerify)",145, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"reportBoundsChecks( SILFunction * F)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"reportBoundsChecks( SILFunction * F)",1, 50, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"ABCOpt::ABCOpt()",1, 14, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"ABCOpt::run()",83, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/ArrayBoundsCheckOpts.cpp,"swift::createABCOpt()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"mayWriteTo( AliasAnalysis * AA , WriteSet & MayWrites , UnaryInstructionBase<K,T> * Inst)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"mayWriteTo( AliasAnalysis * AA , SideEffectAnalysis * SEA , WriteSet & MayWrites , ApplyInst * AI)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"hasLoopInvariantOperands( SILInstruction * I , SILLoop * L)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"getDominatingBlocks( SmallVectorImpl<SILBasicBlock*> & domBlocks , SILLoop * Loop , DominanceInfo * DT)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"hoistInstruction( DominanceInfo * DT , SILInstruction * Inst , SILLoop * Loop , SILBasicBlock * & Preheader)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"hoistInstructions( SILLoop * Loop , DominanceInfo * DT , InstSet & HoistUpSet)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"LoopNestSummary::LoopNestSummary( SILLoop * Curr)",1, 49, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"LoopNestSummary::copySummary( LoopNestSummary & Other)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"getEdgeIndex( SILBasicBlock * BB , SILBasicBlock * ExitingBB)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"sinkInstruction( DominanceInfo * DT , std :: unique_ptr<LoopNestSummary> & LoopSummary , SILInstruction * Inst , SILLoopInfo * LI)",69, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"sinkInstructions( std :: unique_ptr<LoopNestSummary> & LoopSummary , DominanceInfo * DT , SILLoopInfo * LI , InstVector & SinkDownSet)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"getEndAccesses( BeginAccessInst * BI , SmallVectorImpl<EndAccessInst*> & EndAccesses)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"hoistSpecialInstruction( std :: unique_ptr<LoopNestSummary> & LoopSummary , DominanceInfo * DT , SILLoopInfo * LI , InstVector & Special)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"LoopTreeOptimization::LoopTreeOptimization( SILLoop * TopLevelLoop , SILLoopInfo * LI , AliasAnalysis * AA , SideEffectAnalysis * SEA , DominanceInfo * DT , AccessedStorageAnalysis * ASA , bool RunsOnHighLevelSil)",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"LoopTreeOptimization::optimize()",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"LoopTreeOptimization::propagateSummaries( std :: unique_ptr<LoopNestSummary> & CurrSummary)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"isSafeReadOnlyApply( SideEffectAnalysis * SEA , ApplyInst * AI)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"checkSideEffects( swift :: SILInstruction & Inst , WriteSet & MayWrites)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"canHoistUpDefault( SILInstruction * inst , SILLoop * Loop , DominanceInfo * DT , bool RunsOnHighLevelSil)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"handledEndAccesses( BeginAccessInst * BI , SILLoop * Loop)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"isCoveredByScope( BeginAccessInst * BI , DominanceInfo * DT , SILInstruction * applyInstr)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"analyzeBeginAccess( BeginAccessInst * BI , SmallVector<BeginAccessInst*,8> & BeginAccesses , SmallVector<FullApplySite,8> & fullApplies , WriteSet & MayWrites , AccessedStorageAnalysis * ASA , DominanceInfo * DT)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"LoopTreeOptimization::analyzeCurrentLoop( std :: unique_ptr<LoopNestSummary> & CurrSummary)",117, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"LoopTreeOptimization::optimizeLoop( std :: unique_ptr<LoopNestSummary> & CurrSummary)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"LICM::LICM( bool RunsOnHighLevelSil)",1, 76, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"LICM::run()",34, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"swift::createLICM()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/LoopTransforms/LICM.cpp,"swift::createHighLevelLICM()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SideEffectsDumper.cpp,"SideEffectsDumper::run()",15, 4, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SideEffectsDumper.cpp,"swift::createSideEffectsDumper()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/EscapeAnalysisDumper.cpp,"EscapeAnalysisDumper::run()",15, 4, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/EscapeAnalysisDumper.cpp,"swift::createEscapeAnalysisDumper()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/InstCount.cpp,"InstCountVisitor::visitSILBasicBlock( SILBasicBlock * BB)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/InstCount.cpp,"InstCountVisitor::visitSILFunction( SILFunction * F)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/InstCount.cpp,"InstCountVisitor::visitValueBase( ValueBase * V)",1, 40, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/InstCount.cpp,"InstCount::run()",48, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/InstCount.cpp,"swift::createInstCount()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/InstCount.cpp,"swift::performSILInstCountIfNeeded( SILModule * M)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/ComputeLoopInfo.cpp,"ComputeLoopInfo::run()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/ComputeLoopInfo.cpp,"swift::createComputeLoopInfo()",1, 79, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SimplifyUnreachableContainingBlocks.cpp,"SimplifyUnreachableContainingBlocks::run()",20, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SimplifyUnreachableContainingBlocks.cpp,"swift::createSimplifyUnreachableContainingBlocks()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/EpilogueRetainReleaseMatcherDumper.cpp,"SILEpilogueRetainReleaseMatcherDumper::run()",28, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/EpilogueRetainReleaseMatcherDumper.cpp,"swift::createEpilogueRetainReleaseMatcherDumper()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/CallerAnalysisPrinter.cpp,"CallerAnalysisPrinterPass::run()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/CallerAnalysisPrinter.cpp,"swift::createCallerAnalysisPrinter()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LoopCanonicalizer.cpp,"LoopCanonicalizer::run()",25, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LoopCanonicalizer.cpp,"swift::createLoopCanonicalizer()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp,"LSLocationPrinter::printTypeExpansion( SILFunction & Fn)",30, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp,"LSLocationPrinter::printTypeExpansionWithProjection( SILFunction & Fn)",32, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp,"LSLocationPrinter::printMemExpansion( SILFunction & Fn)",34, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp,"LSLocationPrinter::printMemReduction( SILFunction & Fn)",50, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp,"LSLocationPrinter::run()",23, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp,"swift::createLSLocationPrinter()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SerializeSILPass.cpp,"SerializeSILPass::removeSerializedFlagFromAllFunctions( SILModule & M)",13, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SerializeSILPass.cpp,"SerializeSILPass::SerializeSILPass()",1, 24, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SerializeSILPass.cpp,"SerializeSILPass::run()",16, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SerializeSILPass.cpp,"swift::createSerializeSILPass()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/RCIdentityDumper.cpp,"RCIdentityDumper::run()",37, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/RCIdentityDumper.cpp,"swift::createRCIdentityDumper()",1, 81, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/EpilogueARCMatcherDumper.cpp,"SILEpilogueARCMatcherDumper::run()",32, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/EpilogueARCMatcherDumper.cpp,"swift::createEpilogueARCMatcherDumper()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/FunctionOrderPrinter.cpp,"FunctionOrderPrinterPass::run()",23, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/FunctionOrderPrinter.cpp,"swift::createFunctionOrderPrinter()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/BasicCalleePrinter.cpp,"BasicCalleePrinterPass::printCallees( FullApplySite FAS)",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/BasicCalleePrinter.cpp,"BasicCalleePrinterPass::run()",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/BasicCalleePrinter.cpp,"swift::createBasicCalleePrinter()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/IVInfoPrinter.cpp,"IVInfoPrinter::dumpIV( ValueBase * Header , ValueBase * IV)",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/IVInfoPrinter.cpp,"IVInfoPrinter::run()",38, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/IVInfoPrinter.cpp,"swift::createIVInfoPrinter()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/Link.cpp,"SILLinker::SILLinker( SILModule :: LinkingMode LinkMode)",1, 78, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/Link.cpp,"SILLinker::run()",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/Link.cpp,"swift::createMandatorySILLinker()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/Link.cpp,"swift::createPerformanceSILLinker()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LoopInfoPrinter.cpp,"LoopInfoPrinter::run()",21, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LoopInfoPrinter.cpp,"swift::createLoopInfoPrinter()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/StripDebugInfo.cpp,"stripFunction( SILFunction * F)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/StripDebugInfo.cpp,"StripDebugInfo::~StripDebugInfo()",1, 32, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/StripDebugInfo.cpp,"StripDebugInfo::run()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/StripDebugInfo.cpp,"swift::createStripDebugInfo()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/AccessSummaryDumper.cpp,"AccessSummaryDumper::run()",15, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/AccessSummaryDumper.cpp,"swift::createAccessSummaryDumper()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/BugReducerTester.cpp,"THIS_TEST_IS_EXPECTED_TO_CRASH_HERE()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/BugReducerTester.cpp,"BugReducerTester::getRuntimeCrasherFunction()",34, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/BugReducerTester.cpp,"BugReducerTester::run()",71, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/BugReducerTester.cpp,"swift::createBugReducerTester()",1, 81, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LoopRegionPrinter.cpp,"LoopRegionViewText::run()",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LoopRegionPrinter.cpp,"LoopRegionViewCFG::run()",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LoopRegionPrinter.cpp,"swift::createLoopRegionViewText()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/LoopRegionPrinter.cpp,"swift::createLoopRegionViewCFG()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/ValueOwnershipKindDumper.cpp,"ValueOwnershipKindDumper::run()",27, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/ValueOwnershipKindDumper.cpp,"swift::createValueOwnershipKindDumper()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/BasicInstructionPropertyDumper.cpp,"BasicInstructionPropertyDumper::run()",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/BasicInstructionPropertyDumper.cpp,"swift::createBasicInstructionPropertyDumper()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SILDebugInfoGenerator.cpp,"SILDebugInfoGenerator::LineCountStream::write_impl( const char * Ptr , size_t Size)",9, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SILDebugInfoGenerator.cpp,"SILDebugInfoGenerator::LineCountStream::current_pos() const",1, 58, 4, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SILDebugInfoGenerator.cpp,"SILDebugInfoGenerator::LineCountStream::LineCountStream( llvm :: raw_ostream & Underlying)",3, 33, 4, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SILDebugInfoGenerator.cpp,"SILDebugInfoGenerator::LineCountStream::~LineCountStream()",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SILDebugInfoGenerator.cpp,"SILDebugInfoGenerator::PrintContext::printInstructionCallBack( const SILInstruction * I)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SILDebugInfoGenerator.cpp,"SILDebugInfoGenerator::PrintContext::PrintContext( llvm :: raw_ostream & OS)",1, 76, 4, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SILDebugInfoGenerator.cpp,"SILDebugInfoGenerator::PrintContext::~PrintContext()",1, 33, 4, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SILDebugInfoGenerator.cpp,"SILDebugInfoGenerator::run()",69, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/SILDebugInfoGenerator.cpp,"swift::createSILDebugInfoGenerator()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/AADumper.cpp,"gatherValues( SILFunction & Fn , std :: vector<SILValue> & Values)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/AADumper.cpp,"SILAADumper::run()",40, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/AADumper.cpp,"swift::createAADumper()",1, 68, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/ComputeDominanceInfo.cpp,"ComputeDominanceInfo::run()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/ComputeDominanceInfo.cpp,"swift::createComputeDominanceInfo()",1, 89, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/MemBehaviorDumper.cpp,"gatherValues( SILFunction & Fn , std :: vector<SILValue> & Values)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/MemBehaviorDumper.cpp,"MemBehaviorDumper::shouldTestInstruction( SILInstruction * I)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/MemBehaviorDumper.cpp,"MemBehaviorDumper::run()",32, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/MemBehaviorDumper.cpp,"swift::createMemBehaviorDumper()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/CFGPrinter.cpp,"SILCFGPrinter::run()",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/CFGPrinter.cpp,"swift::createCFGPrinter()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/AccessedStorageDumper.cpp,"AccessedStorageDumper::run()",13, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/UtilityPasses/AccessedStorageDumper.cpp,"swift::createAccessedStorageDumper()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialTransform.cpp,"ExistentialSpecializerCloner::postProcess( SILInstruction * Orig , SILInstruction * Cloned)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialTransform.cpp,"ExistentialSpecializerCloner::ExistentialSpecializerCloner( SILFunction * OrigF , SILFunction * NewF , SubstitutionMap Subs , llvm :: SmallVector<ArgumentDescriptor,4> & ArgumentDescList , llvm :: SmallDenseMap<int,GenericTypeParamType*> & ArgToGenericTypeMap , llvm :: SmallDenseMap<int,ExistentialTransformArgumentDescriptor> & ExistentialArgDescriptor)",10, 62, 8, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialTransform.cpp,"ExistentialSpecializerCloner::cloneAndPopulateFunction()",140, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialTransform.cpp,"ExistentialTransform::createExistentialSpecializedFunctionName()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialTransform.cpp,"ExistentialTransform::convertExistentialArgTypesToGenericArgTypes( GenericSignatureBuilder & Builder)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialTransform.cpp,"ExistentialTransform::createExistentialSpecializedFunctionType()",65, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialTransform.cpp,"ExistentialTransform::populateThunkBody()",144, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialTransform.cpp,"ExistentialTransform::createExistentialSpecializedFunction()",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"isSpecializableRepresentation( SILFunctionTypeRepresentation Rep , bool OptForPartialApply)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"canSpecializeFunction( SILFunction * F , const CallerAnalysis :: FunctionInfo * FuncInfo , bool OptForPartialApply)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"FunctionSignatureTransformDescriptor::addThunkArgument( ArgumentDescriptor & AD , SILBuilder & Builder , SILBasicBlock * BB , llvm :: SmallVectorImpl<SILValue> & NewArgs)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"FunctionSignatureTransformDescriptor::createOptimizedSILFunctionName()",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"usesGenerics( SILFunction * F , ArrayRef<SILParameterInfo> InterfaceParams , ArrayRef<SILResultInfo> InterfaceResults)",69, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"mapInterfaceTypes( SILFunction * F , MutableArrayRef<SILParameterInfo> InterfaceParams , MutableArrayRef<SILResultInfo> InterfaceResults , Optional<SILResultInfo> & InterfaceErrorResult)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"FunctionSignatureTransformDescriptor::createOptimizedSILFunctionType()",95, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"FunctionSignatureTransformDescriptor::computeOptimizedArgInterface( ArgumentDescriptor & AD , SmallVectorImpl<SILParameterInfo> & Out)",71, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"FunctionSignatureTransform::createFunctionSignatureOptimizedFunction()",133, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"FunctionSignatureTransform::run( bool hasCaller)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"FunctionSignatureTransform::removeDeadArgs( int minPartialAppliedArgs)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"FunctionSignatureOpts::FunctionSignatureOpts( bool OptForPartialApply)",2, 48, 2, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"FunctionSignatureOpts::run()",105, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"swift::createFunctionSignatureOpts()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/FunctionSignatureOpts.cpp,"swift::createDeadArgSignatureOpt()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ArgumentExplosionTransform.cpp,"shouldExplode( ArgumentDescriptor & argDesc , ConsumedArgToEpilogueReleaseMatcher & ERM)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ArgumentExplosionTransform.cpp,"FunctionSignatureTransform::ArgumentExplosionAnalyzeParameters()",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ArgumentExplosionTransform.cpp,"FunctionSignatureTransform::ArgumentExplosionFinalizeOptimizedFunction()",65, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialSpecializer.cpp,"ExistentialSpecializer::run()",15, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialSpecializer.cpp,"findConcreteTypeFromInitExistential( SILValue Arg , CanType & ConcreteType)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialSpecializer.cpp,"findConcreteType( ApplySite AI , int ArgIdx , CanType & ConcreteType)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialSpecializer.cpp,"findIfCalleeUsesArgInDestroyUse( SILValue Arg , ExistentialTransformArgumentDescriptor & ETAD)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialSpecializer.cpp,"ExistentialSpecializer::canSpecializeExistentialArgsInFunction( ApplySite & Apply , llvm :: SmallDenseMap<int,ExistentialTransformArgumentDescriptor> & ExistentialArgDescriptor)",63, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialSpecializer.cpp,"ExistentialSpecializer::canSpecializeCalleeFunction( ApplySite & Apply)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialSpecializer.cpp,"ExistentialSpecializer::specializeExistentialArgsInAppliesWithinFunction( SILFunction & F)",82, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/ExistentialSpecializer.cpp,"swift::createExistentialSpecializer()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/DeadArgumentTransform.cpp,"FunctionSignatureTransform::DeadArgumentAnalyzeParameters()",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/DeadArgumentTransform.cpp,"FunctionSignatureTransform::DeadArgumentTransformFunction()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/DeadArgumentTransform.cpp,"FunctionSignatureTransform::DeadArgumentFinalizeOptimizedFunction()",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"findReturnValue( SILFunction * F)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"findOnlyApply( SILFunction * F)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"FunctionSignatureTransform::OwnedToGuaranteedAnalyzeParameters()",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"FunctionSignatureTransform::OwnedToGuaranteedAnalyzeResults()",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"FunctionSignatureTransform::OwnedToGuaranteedTransformFunctionParameters()",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"FunctionSignatureTransform::OwnedToGuaranteedTransformFunctionResults()",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"FunctionSignatureTransform::OwnedToGuaranteedFinalizeThunkFunction( SILBuilder & Builder , SILFunction * F)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"createArgumentRelease( SILBuilder & Builder , ArgumentDescriptor & AD)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"FunctionSignatureTransform::OwnedToGuaranteedAddArgumentRelease( ArgumentDescriptor & AD , SILBuilder & Builder , SILFunction * F)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"FunctionSignatureTransform::OwnedToGuaranteedAddResultRelease( ResultDescriptor & RD , SILBuilder & Builder , SILFunction * F)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"FunctionSignatureTransform::OwnedToGuaranteedAnalyze()",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/FunctionSignatureTransforms/OwnedToGuaranteedTransform.cpp,"FunctionSignatureTransform::OwnedToGuaranteedTransform()",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/SemanticARCOpts.cpp,"isConsumed( SILValue v , SmallVectorImpl<DestroyValueInst*> & destroys)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/SemanticARCOpts.cpp,"SemanticARCOptVisitor::visitSILInstruction( SILInstruction * i)",1, 64, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/SemanticARCOpts.cpp,"SemanticARCOptVisitor::visitBeginBorrowInst( BeginBorrowInst * bbi)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/SemanticARCOpts.cpp,"canHandleOperand( SILValue operand , SmallVectorImpl<SILValue> & out)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/SemanticARCOpts.cpp,"performGuaranteedCopyValueOptimization( CopyValueInst * cvi)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/SemanticARCOpts.cpp,"eliminateDeadLiveRangeCopyValue( CopyValueInst * cvi)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/SemanticARCOpts.cpp,"SemanticARCOptVisitor::visitCopyValueInst( CopyValueInst * cvi)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/SemanticARCOpts.cpp,"SemanticARCOpts::run()",51, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/SemanticARCOpts.cpp,"swift::createSemanticARCOpts()",1, 79, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"diagnose( SILModule & M , SILLocation loc , ArgTypes ... args)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"InsertCFGDiamond( SILValue Cond , SILLocation Loc , SILBuilder & B , SILBasicBlock * & TrueBB , SILBasicBlock * & FalseBB , SILBasicBlock * & ContBB)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"mergeKinds( Optional<DIKind> OK1 , Optional<DIKind> OK2)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::AvailabilitySet( unsigned NumElts)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::empty() const",1, 48, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::size() const",1, 52, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::get( unsigned Elt) const",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::getConditional( unsigned Elt) const",6, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::set( unsigned Elt , DIKind K)",7, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::set( unsigned Elt , Optional<DIKind> K)",6, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::containsUnknownElements() const",7, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::isAll( DIKind K) const",8, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::hasAny( DIKind K) const",8, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::isAllYes() const",1, 57, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::isAllNo() const",1, 55, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::changeUnsetElementsTo( DIKind K)",5, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::mergeIn( const AvailabilitySet & RHS)",6, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"AvailabilitySet::dump( llvm :: raw_ostream & OS) const",15, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"operator < <( llvm :: raw_ostream & OS , const AvailabilitySet & AS)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LiveOutBlockState::LiveOutBlockState( unsigned NumElements)",6, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LiveOutBlockState::setUnknownToNotAvailable()",8, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LiveOutBlockState::transferAvailability( const Optional<DIKind> pred , const Optional<DIKind> out , const Optional<DIKind> local , Optional<DIKind> & result)",16, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LiveOutBlockState::mergeFromPred( const LiveOutBlockState & Pred)",24, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LiveOutBlockState::markAvailable( const DIMemoryUse & Use)",10, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LiveOutBlockState::markStoreToSelf()",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LiveOutBlockState::containsUndefinedValues()",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::getBlockInfo( SILBasicBlock * BB)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::LifetimeChecker( const DIMemoryObjectInfo & TheMemory , DIElementUseInfo & UseInfo)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::isBlockIsReachableFromEntry( const SILBasicBlock * BB)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::shouldEmitError( const SILInstruction * Inst)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::noteUninitializedMembers( const DIMemoryUse & Use)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::getUninitElementName( const DIMemoryUse & Use)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::diagnoseInitError( const DIMemoryUse & Use , Diag<StringRef,bool> DiagMessage)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::doIt()",89, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::handleLoadUse( const DIMemoryUse & Use)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::handleLoadForTypeOfSelfUse( const DIMemoryUse & Use)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::emitSelfConsumedDiagnostic( SILInstruction * Inst)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"maybeSuggestNoArgSelfInit( SILModule & module , SILLocation loc , StructDecl * theStruct)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::handleStoreUse( unsigned UseID)",149, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"findApply( SILInstruction * I , bool & isSelfParameter)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::handleInOutUse( const DIMemoryUse & Use)",118, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::handleEscapeUse( const DIMemoryUse & Use)",125, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"isFailableInitReturnUseOfEnum( EnumInst * EI)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::diagnoseRefElementAddr( RefElementAddrInst * REI)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"findMethodForStoreInitializationOfTemporary( const DIMemoryObjectInfo & TheMemory , T * SI)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::diagnoseMethodCall( const DIMemoryUse & Use , bool SuperInitDone)",176, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::diagnoseReturnWithoutInitializingStoredProperties( const SILInstruction * Inst , SILLocation loc , const DIMemoryUse & Use)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::handleLoadUseFailure( const DIMemoryUse & Use , bool SuperInitDone , bool FailedSelfUse)",158, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::handleSelfInitUse( unsigned UseID)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::updateInstructionForInitState( DIMemoryUse & Use)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::processUninitializedReleaseOfBox( AllocBoxInst * ABI , SILInstruction * Release , bool consumed , SILBasicBlock :: iterator InsertPt)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::processUninitializedRelease( SILInstruction * Release , bool consumed , SILBasicBlock :: iterator InsertPt)",56, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::deleteDeadRelease( unsigned ReleaseID)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::processNonTrivialRelease( unsigned ReleaseID)",63, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"getBinaryFunction( StringRef Name , SILType IntSILTy , ASTContext & C)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"getTruncateToI1Function( SILType IntSILTy , ASTContext & C)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"updateControlVariable( SILLocation Loc , const APInt & Bitmask , SILValue ControlVariable , Identifier & OrFn , SILBuilder & B)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"testControlVariable( SILLocation Loc , unsigned Elt , SILValue ControlVariableAddr , Identifier & ShiftRightFn , Identifier & TruncateFn , SILBuilder & B)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::handleConditionalInitAssign()",144, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::handleConditionalDestroys( SILValue ControlVariableAddr)",235, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::putIntoWorkList( SILBasicBlock * BB , WorkListType & WorkList)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::computePredsLiveOut( SILBasicBlock * BB)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::getOutAvailability( SILBasicBlock * BB , AvailabilitySet & Result)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::getOutSelfInitialized( SILBasicBlock * BB , Optional<DIKind> & Result)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::getLivenessAtNonTupleInst( swift :: SILInstruction * Inst , swift :: SILBasicBlock * InstBB , AvailabilitySet & Result)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::getLivenessAtInst( SILInstruction * Inst , unsigned FirstElt , unsigned NumElts)",76, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::getAnyUninitializedMemberAtInst( SILInstruction * Inst , unsigned FirstElt , unsigned NumElts)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::getSelfInitializedAtInst( SILInstruction * Inst)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"LifetimeChecker::isInitializedAtUse( const DIMemoryUse & Use , bool * SuperInitDone , bool * FailedSelfUse , bool * FullyUninitialized)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"processMemoryObject( MarkUninitializedInst * I)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"checkDefiniteInitialization( SILFunction & Fn)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"DefiniteInitialization::run()",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DefiniteInitialization.cpp,"swift::createDefiniteInitialization()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessMarkerElimination.cpp,"AccessMarkerElimination::AccessMarkerElimination( SILFunction * F)",2, 38, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessMarkerElimination.cpp,"AccessMarkerElimination::notifyErased( SILInstruction * inst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessMarkerElimination.cpp,"AccessMarkerElimination::eraseInst( SILInstruction * inst)",4, 5, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessMarkerElimination.cpp,"AccessMarkerElimination::shouldPreserveAccess( SILAccessEnforcement enforcement)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessMarkerElimination.cpp,"AccessMarkerElimination::checkAndEliminateMarker( SILInstruction * inst)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessMarkerElimination.cpp,"AccessMarkerElimination::stripMarkers()",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessMarkerElimination.cpp,"prepareSILFunctionForOptimization( ModuleDecl * , SILFunction * F)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessMarkerElimination.cpp,"AccessMarkerEliminationPass::run()",22, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessMarkerElimination.cpp,"swift::createAccessMarkerElimination()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"gatherDestroysOfContainer( const MarkUninitializedInst * MUI , DIElementUseInfo & UseInfo)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"getElementCountRec( SILModule & Module , SILType T , bool IsSelfOfNonDelegatingInitializer)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"computeMemorySILType( MarkUninitializedInst * MemoryInst)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"DIMemoryObjectInfo::DIMemoryObjectInfo( MarkUninitializedInst * MI)",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"DIMemoryObjectInfo::getFunctionEntryPoint() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"getElementTypeRec( SILModule & Module , SILType T , unsigned EltNo , bool IsSelfOfNonDelegatingInitializer)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"DIMemoryObjectInfo::getElementType( unsigned EltNo) const",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"DIMemoryObjectInfo::emitElementAddress( unsigned EltNo , SILLocation Loc , SILBuilder & B , llvm :: SmallVectorImpl<std::pair<SILValue,SILValue>> & EndBorrowList) const",90, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"getPathStringToElementRec( SILModule & Module , SILType T , unsigned EltNo , std :: string & Result)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"DIMemoryObjectInfo::getPathStringToElement( unsigned Element , std :: string & Result) const",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"DIMemoryObjectInfo::isElementLetProperty( unsigned Element) const",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"DIMemoryUse::onlyTouchesTrivialElements( const DIMemoryObjectInfo & MI) const",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"DIElementUseInfo::trackStoreToSelf( SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"getScalarizedElementAddresses( SILValue Pointer , SILBuilder & B , SILLocation Loc , SmallVectorImpl<SILValue> & ElementAddrs)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"getScalarizedElements( SILValue V , SmallVectorImpl<SILValue> & ElementVals , SILLocation Loc , SILBuilder & B)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"scalarizeLoad( LoadInst * LI , SmallVectorImpl<SILValue> & ElementAddrs)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::ElementUseCollector( const DIMemoryObjectInfo & TheMemory , DIElementUseInfo & UseInfo , bool isDefiniteInitFinished , bool TreatAddressToPointerAsInout)",6, 70, 8, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::collectFrom()",16, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::trackUse( DIMemoryUse Use)",1, 60, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::trackDestroy( SILInstruction * Destroy)",1, 80, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::getNumMemoryElements() const",1, 74, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::getMemoryInst() const",1, 73, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::addElementUses( unsigned BaseEltNo , SILType UseTy , SILInstruction * User , DIUseKind Kind)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::collectTupleElementUses( TupleElementAddrInst * TEAI , unsigned BaseEltNo)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::collectDestructureTupleResultUses( DestructureTupleResult * DTR , unsigned BaseEltNo)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::collectStructElementUses( StructElementAddrInst * SEAI , unsigned BaseEltNo)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"getAccessedPointer( SILValue Pointer)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::collectUses( SILValue Pointer , unsigned BaseEltNo)",403, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::collectClassSelfUses()",116, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"isSuperInitUse( SILInstruction * User)",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"isSuperInitUse( SILArgument * Arg)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"isUninitializedMetatypeInst( SILInstruction * I)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"isSelfInitUse( SILInstruction * I)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"isSelfInitUse( SILArgument * Arg)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"isSelfOperand( const Operand * Op , const SILInstruction * User)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ElementUseCollector::collectClassSelfUses( SILValue ClassPointer , SILType MemorySILType , llvm :: SmallDenseMap<VarDecl*,unsigned> & EltNumbering)",85, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"collectDelegatingInitUses( const DIMemoryObjectInfo & TheMemory , DIElementUseInfo & UseInfo , SingleValueInstruction * I)",87, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ClassInitElementUseCollector::ClassInitElementUseCollector( const DIMemoryObjectInfo & TheMemory , DIElementUseInfo & UseInfo)",3, 50, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ClassInitElementUseCollector::collectClassInitSelfUses()",129, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"ClassInitElementUseCollector::collectClassInitSelfLoadUses( MarkUninitializedInst * MUI , SingleValueInstruction * LI)",78, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"shouldPerformClassInitSelf( const DIMemoryObjectInfo & MemoryInfo)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DIMemoryUseCollectorOwnership.cpp,"swift::ownership::collectDIElementUsesFrom( const DIMemoryObjectInfo & MemoryInfo , DIElementUseInfo & UseInfo , bool isDIFinished , bool TreatAddressToPointerAsInout)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"getOptionalDiamondSuccessor( SwitchEnumInst * sei)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"getDeinitSafeClosureDestructionPoint( TermInst * Term)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"extendLifetimeToEndOfFunction( SILFunction & Fn , ConvertEscapeToNoEscapeInst * Cvt)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"lookThroughRebastractionUsers( SILInstruction * Inst , llvm :: DenseMap<SILInstruction*,SILInstruction*> & Memoized)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"tryExtendLifetimeToLastUse( ConvertEscapeToNoEscapeInst * Cvt , llvm :: DenseMap<SILInstruction*,SILInstruction*> & Memoized)",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"trySwitchEnumPeephole( ConvertEscapeToNoEscapeInst * Cvt)",65, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"getOnlyDestroy( CopyBlockWithoutEscapingInst * CB)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"fixupCopyBlockWithoutEscaping( CopyBlockWithoutEscapingInst * CB)",80, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"fixupClosureLifetimes( SILFunction & Fn)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"ClosureLifetimeFixup::run()",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ClosureLifetimeFixup.cpp,"swift::createClosureLifetimeFixup()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"getFullyReferenceableStruct( SILType Ty)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"getNumSubElements( SILType T , SILModule & M)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"getAccessPathRoot( SILValue pointer)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"computeSubelement( SILValue Pointer , SingleValueInstruction * RootInst)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::AvailableValue( SILValue Value , unsigned SubElementNumber , SILInstruction * InsertPoint)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::AvailableValue( AvailableValue && Other)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::operator =( AvailableValue && Other)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::operator bool() const",1, 48, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::operator ==( const AvailableValue & Other) const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::operator !=( const AvailableValue & Other) const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::getValue() const",1, 46, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::getType() const",1, 55, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::getSubElementNumber() const",1, 68, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::getInsertionPoints() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::mergeInsertionPoints( const AvailableValue & Other) &",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::addInsertionPoint( SILInstruction * I) &",1, 77, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::emitStructExtract( SILBuilder & B , SILLocation Loc , VarDecl * D , unsigned SubElementNumber) const",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::emitTupleExtract( SILBuilder & B , SILLocation Loc , unsigned EltNo , unsigned SubElementNumber) const",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::AvailableValue( SILValue Value , unsigned SubElementNumber , const SetVector & InsertPoints)",4, 41, 6, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::dump() const",1, 59, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValue::print( llvm :: raw_ostream & os) const",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"llvm::operator < <( llvm :: raw_ostream & os , const AvailableValue & V)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"nonDestructivelyExtractSubElement( const AvailableValue & Val , SILBuilder & B , SILLocation Loc)",44, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"anyMissing( unsigned StartSubElt , unsigned NumSubElts , ArrayRef<AvailableValue> & Values)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueAggregator::AvailableValueAggregator( SILInstruction * Inst , MutableArrayRef<AvailableValue> AvailableValueList , SmallVectorImpl<PMOMemoryUse> & Uses)",5, 62, 8, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueAggregator::dump() const",1, 69, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueAggregator::print( llvm :: raw_ostream & os) const",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueAggregator::aggregateValues( SILType LoadTy , SILValue Address , unsigned FirstElt)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueAggregator::aggregateFullyAvailableValue( SILType LoadTy , unsigned FirstElt)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueAggregator::aggregateTupleSubElts( TupleType * TT , SILType LoadTy , SILValue Address , unsigned FirstElt)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueAggregator::aggregateStructSubElts( StructDecl * SD , SILType LoadTy , SILValue Address , unsigned FirstElt)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueAggregator::handlePrimitiveValue( SILType LoadTy , SILValue Address , unsigned FirstElt)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueDataflowContext::getModule() const",1, 66, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueDataflowContext::AvailableValueDataflowContext( AllocationInst * InputTheMemory , unsigned NumMemorySubElements , SmallVectorImpl<PMOMemoryUse> & InputUses)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueDataflowContext::updateAvailableValues( SILInstruction * Inst , SmallBitVector & RequiredElts , SmallVectorImpl<AvailableValue> & Result , SmallBitVector & ConflictingValues)",82, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueDataflowContext::computeAvailableValues( SILInstruction * StartingFrom , unsigned FirstEltOffset , unsigned NumLoadSubElements , SmallBitVector & RequiredElts , SmallVectorImpl<AvailableValue> & Result)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueDataflowContext::computeAvailableValuesFrom( SILBasicBlock :: iterator StartingFrom , SILBasicBlock * BB , SmallBitVector & RequiredElts , SmallVectorImpl<AvailableValue> & Result , llvm :: SmallDenseMap<SILBasicBlock*,SmallBitVector,32> & VisitedBlocks , SmallBitVector & ConflictingValues)",73, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueDataflowContext::explodeCopyAddr( CopyAddrInst * CAI)",100, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AvailableValueDataflowContext::hasEscapedAt( SILInstruction * I)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"getMemoryType( AllocationInst * TheMemory)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AllocOptimize::AllocOptimize( AllocationInst * InputMemory , SmallVectorImpl<PMOMemoryUse> & InputUses , SmallVectorImpl<SILInstruction*> & InputReleases)",8, 64, 6, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"tryFindSrcAddrForLoad( SILInstruction * Inst)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AllocOptimize::promoteLoad( SILInstruction * Inst)",77, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AllocOptimize::canPromoteDestroyAddr( DestroyAddrInst * DAI , llvm :: SmallVectorImpl<AvailableValue> & AvailableValues)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AllocOptimize::promoteDestroyAddr( DestroyAddrInst * DAI , MutableArrayRef<AvailableValue> AvailableValues)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AllocOptimize::tryToRemoveDeadAllocation()",110, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"AllocOptimize::doIt()",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"optimizeMemoryAllocations( SILFunction & Fn)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"PredictableMemoryOptimizations::run()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PredictableMemOpt.cpp,"swift::createPredictableMemoryOptimizations()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryOptUtils.cpp,"swift::lowerAssignInstruction( SILBuilderWithScope & B , AssignInst * Inst , PartialInitializationKind isInitialization)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"getElementCountRec( SILModule & Module , SILType T)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"PMOMemoryObjectInfo::PMOMemoryObjectInfo( SingleValueInstruction * MI)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"PMOMemoryObjectInfo::getFunctionEntryPoint() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"getElementTypeRec( SILModule & Module , SILType T , unsigned EltNo)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"PMOMemoryObjectInfo::getElementType( unsigned EltNo) const",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"getPathStringToElementRec( SILModule & Module , SILType T , unsigned EltNo , std :: string & Result)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"PMOMemoryObjectInfo::getPathStringToElement( unsigned Element , std :: string & Result) const",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"PMOMemoryObjectInfo::isElementLetProperty( unsigned Element) const",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"PMOMemoryUse::onlyTouchesTrivialElements( const PMOMemoryObjectInfo & MI) const",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"getScalarizedElementAddresses( SILValue Pointer , SILBuilder & B , SILLocation Loc , SmallVectorImpl<SILValue> & ElementAddrs)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"getScalarizedElements( SILValue V , SmallVectorImpl<SILValue> & ElementVals , SILLocation Loc , SILBuilder & B)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"scalarizeLoad( LoadInst * LI , SmallVectorImpl<SILValue> & ElementAddrs)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"ElementUseCollector::ElementUseCollector( const PMOMemoryObjectInfo & TheMemory , SmallVectorImpl<PMOMemoryUse> & Uses , SmallVectorImpl<SILInstruction*> & Releases)",5, 42, 6, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"ElementUseCollector::collectFrom()",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"ElementUseCollector::addElementUses( unsigned BaseEltNo , SILType UseTy , SILInstruction * User , PMOUseKind Kind)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"ElementUseCollector::collectTupleElementUses( TupleElementAddrInst * TEAI , unsigned BaseEltNo)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"ElementUseCollector::collectStructElementUses( StructElementAddrInst * SEAI , unsigned BaseEltNo)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"ElementUseCollector::collectContainerUses( AllocBoxInst * ABI)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"ElementUseCollector::collectUses( SILValue Pointer , unsigned BaseEltNo)",289, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/PMOMemoryUseCollector.cpp,"swift::collectPMOElementUsesFrom( const PMOMemoryObjectInfo & MemoryInfo , SmallVectorImpl<PMOMemoryUse> & Uses , SmallVectorImpl<SILInstruction*> & Releases)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"diagnose( ASTContext & Context , SourceLoc loc , Diag<T...> diag , U && ... args)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"RecordedAccess::RecordedAccess( BeginAccessInst * BAI , const IndexTrieNode * SubPath)",3, 27, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"RecordedAccess::RecordedAccess( SILAccessKind ClosureAccessKind , SILLocation ClosureAccessLoc , const IndexTrieNode * SubPath)",5, 27, 6, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"RecordedAccess::getRecordKind() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"RecordedAccess::getInstruction() const",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"RecordedAccess::getAccessKind() const",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"RecordedAccess::getAccessLoc() const",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"RecordedAccess::getSubPath() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"SubAccessInfo::SubAccessInfo( const IndexTrieNode * P)",1, 53, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"SubAccessInfo::beginAccess( BeginAccessInst * BAI , const IndexTrieNode * SubPath)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"SubAccessInfo::endAccess( EndAccessInst * EAI)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"SubAccessInfo::hasAccessesInProgress() const",1, 75, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"SubAccessInfo::alreadyHadConflict() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"SubAccessInfo::canConflictWithAccessOfKind( SILAccessKind Kind) const",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"SubAccessInfo::conflictsWithAccess( SILAccessKind Kind , const IndexTrieNode * SubPath) const",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"SubAccessInfo::pathsConflict( const IndexTrieNode * Path1 , const IndexTrieNode * Path2) const",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"AccessInfo::findOrCreateSubAccessInfo( const IndexTrieNode * SubPath)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"AccessInfo::findFirstSubPathWithConflict( SILAccessKind OtherKind , const IndexTrieNode * OtherSubPath) const",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"AccessInfo::conflictsWithAccess( SILAccessKind Kind , const IndexTrieNode * SubPath) const",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"AccessInfo::alreadyHadConflict() const",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"AccessInfo::hasAccessesInProgress() const",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"AccessInfo::beginAccess( BeginAccessInst * BAI , const IndexTrieNode * SubPath)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"AccessInfo::endAccess( EndAccessInst * EAI , const IndexTrieNode * SubPath)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"ConflictingAccess::ConflictingAccess( const AccessedStorage & Storage , const RecordedAccess & First , const RecordedAccess & Second)",3, 70, 6, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"getRequiredAccess( SILAccessKind Kind)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"extractExprText( const Expr * E , SourceManager & SM)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"isCallToStandardLibrarySwap( CallExpr * CE , ASTContext & Ctx)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"canReplaceWithCallToCollectionSwapAt( const BeginAccessInst * Access1 , const BeginAccessInst * Access2 , ArrayRef<ApplyInst*> CallsToSwap , ASTContext & Ctx , CallExpr * & FoundCall , Expr * & Base , Expr * & Index1 , Expr * & Index2)",116, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"addSwapAtFixit( InFlightDiagnostic & Diag , CallExpr * & FoundCall , Expr * Base , Expr * & Index1 , Expr * & Index2 , SourceManager & SM)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"getPathDescription( DeclName BaseName , SILType BaseType , const IndexTrieNode * SubPath , SILModule & M)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"diagnoseExclusivityViolation( const ConflictingAccess & Violation , ArrayRef<ApplyInst*> CallsToSwap , ASTContext & Ctx)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"findValidAccessedStorage( SILValue Source)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"isCallToStandardLibrarySwap( ApplyInst * AI , ASTContext & Ctx)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"shouldReportAccess( const AccessInfo & Info , swift :: SILAccessKind Kind , const IndexTrieNode * SubPath)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"findConflictingArgumentAccess( const AccessSummaryAnalysis :: ArgumentSummary & AS , const AccessedStorage & AccessedStorage , const AccessInfo & InProgressInfo)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"AccessState::AccessState( AccessSummaryAnalysis * ASA)",1, 56, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"checkCaptureAccess( ApplySite Apply , AccessState & State)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"getSILFunctionTypeForValue( SILValue arg)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"checkForViolationAtApply( ApplySite Apply , AccessState & State)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"checkForViolationsAtInstruction( SILInstruction & I , AccessState & State)",79, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"checkStaticExclusivity( SILFunction & Fn , PostOrderFunctionInfo * PO , AccessSummaryAnalysis * ASA)",63, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"checkNoEscapePartialApplyUse( Operand * oper , FollowUse followUses)",124, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"checkNoEscapePartialApply( PartialApplyInst * PAI)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"checkAccessedAddress( Operand * memOper , StorageMap & Accesses)",82, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"DiagnoseStaticExclusivity::DiagnoseStaticExclusivity()",1, 33, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"DiagnoseStaticExclusivity::run()",15, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseStaticExclusivity.cpp,"swift::createDiagnoseStaticExclusivity()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DataflowDiagnostics.cpp,"diagnose( ASTContext & Context , SourceLoc loc , Diag<T...> diag , U && ... args)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DataflowDiagnostics.cpp,"diagnoseMissingReturn( const UnreachableInst * UI , ASTContext & Context)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DataflowDiagnostics.cpp,"diagnoseUnreachable( const SILInstruction * I , ASTContext & Context)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DataflowDiagnostics.cpp,"diagnoseStaticReports( const SILInstruction * I , SILModule & M)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DataflowDiagnostics.cpp,"diagnosePoundAssert( const SILInstruction * I , SILModule & M , ConstExprEvaluator & constantEvaluator)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DataflowDiagnostics.cpp,"EmitDFDiagnostics::~EmitDFDiagnostics()",1, 35, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DataflowDiagnostics.cpp,"EmitDFDiagnostics::run()",19, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DataflowDiagnostics.cpp,"swift::createEmitDFDiagnostics()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/IRGenPrepare.cpp,"cleanFunction( SILFunction & fn)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/IRGenPrepare.cpp,"IRGenPrepare::run()",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/IRGenPrepare.cpp,"swift::createIRGenPrepare()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"diagnose( ASTContext & Context , SourceLoc loc , Diag<T...> diag , U && ... args)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"fixupReferenceCounts( SILInstruction * I , SILValue CalleeValue , SmallVectorImpl<std::pair<SILValue,ParameterConvention>> & CaptureArgs , bool isCalleeGuaranteed)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"cleanupLoadedCalleeValue( SILValue CalleeValue , LoadInst * LI)",58, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"cleanupCalleeValue( SILValue CalleeValue)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"ClosureCleanup::DeleteUpdateHandler::DeleteUpdateHandler( SILModule & M , DeadInstSet & DeadInsts)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"ClosureCleanup::DeleteUpdateHandler::~DeleteUpdateHandler()",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"ClosureCleanup::DeleteUpdateHandler::needsNotifications()",1, 56, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"ClosureCleanup::DeleteUpdateHandler::handleDeleteNotification( SILNode * node)",7, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"ClosureCleanup::recordDeadFunction( SILInstruction * deletedInst)",16, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"ClosureCleanup::cleanupDeadClosures( SILFunction * F)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"collectPartiallyAppliedArguments( PartialApplyInst * PAI , SmallVectorImpl<std::pair<SILValue,ParameterConvention>> & CapturedArgs , SmallVectorImpl<SILValue> & FullArgs)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"getCalleeFunction( SILFunction * F , FullApplySite AI , bool & IsThick , SmallVectorImpl<std::pair<SILValue,ParameterConvention>> & CaptureArgs , SmallVectorImpl<SILValue> & FullArgs , PartialApplyInst * & PartialApply)",173, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"tryDevirtualizeApplyHelper( FullApplySite InnerAI , ClassHierarchyAnalysis * CHA)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"runOnFunctionRecursively( SILOptFunctionBuilder & FuncBuilder , SILFunction * F , FullApplySite AI , DenseFunctionSet & FullyInlinedSet , ImmutableFunctionSet :: Factory & SetFactory , ImmutableFunctionSet CurrentInliningSet , ClassHierarchyAnalysis * CHA)",157, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"MandatoryInlining::run()",59, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/MandatoryInlining.cpp,"swift::createMandatoryInlining()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseInfiniteRecursion.cpp,"diagnose( ASTContext & Context , SourceLoc loc , Diag<T...> diag , U && ... args)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseInfiniteRecursion.cpp,"hasRecursiveCallInPath( SILBasicBlock & Block , SILFunction * Target , ModuleDecl * TargetModule)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseInfiniteRecursion.cpp,"isKnownProgramTerminationPoint( const SILBasicBlock * bb)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseInfiniteRecursion.cpp,"hasInfinitelyRecursiveApply( SILFunction * targetFn)",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseInfiniteRecursion.cpp,"DiagnoseInfiniteRecursion::DiagnoseInfiniteRecursion()",1, 35, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseInfiniteRecursion.cpp,"DiagnoseInfiniteRecursion::run()",20, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseInfiniteRecursion.cpp,"swift::createDiagnoseInfiniteRecursion()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"diagnose( ASTContext & Context , SourceLoc loc , Diag<T...> diag , U && ... args)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"propagateBasicBlockArgs( SILBasicBlock & BB)",92, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"constantFoldTerminator( SILBasicBlock & BB , UnreachableUserCodeReportingState * State)",182, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"isUserCode( const SILInstruction * I)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"setOutsideBlockUsesToUndef( SILInstruction * I)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"getAsCallToNoReturn( SILInstruction * I)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"getPrecedingCallToNoReturn( SILBasicBlock & BB)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"simplifyBlocksWithCallsToNoReturn( SILBasicBlock & BB , UnreachableUserCodeReportingState * State)",102, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"diagnoseUnreachableBlock( const SILBasicBlock & B , SILModule & M , const SILBasicBlockSet & Reachable , UnreachableUserCodeReportingState * State , const SILBasicBlock * TopLevelB , llvm :: SmallPtrSetImpl<const SILBasicBlock*> & Visited)",95, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"removeUnreachableBlocks( SILFunction & F , SILModule & M , UnreachableUserCodeReportingState * State)",67, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"performNoReturnFunctionProcessing( SILFunction & Fn , SILFunctionTransform * T)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"diagnoseUnreachable( SILFunction & Fn)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"swift::performSILDiagnoseUnreachable( SILModule * M)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"NoReturnFolding::run()",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"swift::createNoReturnFolding()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"DiagnoseUnreachable::run()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/DiagnoseUnreachable.cpp,"swift::createDiagnoseUnreachable()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/GuaranteedARCOpts.cpp,"GuaranteedARCOptsVisitor::visitSILInstruction( SILInstruction * I)",1, 64, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/GuaranteedARCOpts.cpp,"getPrevReverseIterator( SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/GuaranteedARCOpts.cpp,"GuaranteedARCOptsVisitor::visitDestroyAddrInst( DestroyAddrInst * DAI)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/GuaranteedARCOpts.cpp,"couldReduceStrongRefcount( SILInstruction * Inst)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/GuaranteedARCOpts.cpp,"GuaranteedARCOptsVisitor::visitStrongReleaseInst( StrongReleaseInst * SRI)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/GuaranteedARCOpts.cpp,"GuaranteedARCOptsVisitor::visitDestroyValueInst( DestroyValueInst * DVI)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/GuaranteedARCOpts.cpp,"GuaranteedARCOptsVisitor::visitReleaseValueInst( ReleaseValueInst * RVI)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/GuaranteedARCOpts.cpp,"GuaranteedARCOpts::run()",17, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/GuaranteedARCOpts.cpp,"swift::createGuaranteedARCOpts()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ConstantPropagation.cpp,"ConstantPropagation::ConstantPropagation( bool EnableDiagnostics)",2, 44, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ConstantPropagation.cpp,"ConstantPropagation::run()",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ConstantPropagation.cpp,"swift::createDiagnosticConstantPropagation()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/ConstantPropagation.cpp,"swift::createPerformanceConstantPropagation()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"visitCallResults( ApplySite apply , llvm :: function_ref<bool(SILValue)> visitor)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorage::isProjection() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorage::getComposedOperand() const",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorage::setComposedOperand( Operand * oper)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorage::isRewritten() const",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorage::markRewritten()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::empty() const",1, 53, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::clear()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::begin()",1, 64, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::end()",1, 60, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::rbegin()",1, 74, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::rend()",1, 70, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::contains( SILValue value) const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::getOrdinal( SILValue value)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::getStorage( SILValue value)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ValueStorageMap::insertValue( SILValue value)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressLoweringState::AddressLoweringState( SILFunction * F , DominanceInfo * domInfo)",5, 28, 8, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressLoweringState::isDead( SILInstruction * inst) const",1, 80, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressLoweringState::markDead( SILInstruction * inst)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueValueVisitor::OpaqueValueVisitor( AddressLoweringState & pass)",2, 45, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueValueVisitor::mapValueStorage()",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueValueVisitor::visitApply( ApplySite applySite)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueValueVisitor::visitValue( SILValue value)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueStorageAllocation::OpaqueStorageAllocation( AddressLoweringState & pass)",1, 79, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueStorageAllocation::allocateOpaqueStorage()",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueStorageAllocation::convertIndirectFunctionArgs()",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueStorageAllocation::insertIndirectReturnArgs()",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueStorageAllocation::canProjectFrom( SingleValueInstruction * innerVal , SILInstruction * composingUse)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"OpaqueStorageAllocation::allocateForValue( SILValue value , ValueStorage & storage)",48, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressMaterialization::AddressMaterialization( AddressLoweringState & pass , SILBuilder & B)",2, 28, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressMaterialization::initializeOperandMem( Operand * operand)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressMaterialization::materializeAddress( SILValue origValue)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressMaterialization::materializeProjection( Operand * operand)",44, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ApplyRewriter::getApplyInst() const",1, 69, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ApplyRewriter::ApplyRewriter( ApplySite origCall , AddressLoweringState & pass)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ApplyRewriter::rewriteParameters()",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"insertStackDeallocationAtCall( AllocStackInst * allocInst , SILInstruction * applyInst , SILInstruction * argLoad)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ApplyRewriter::rewriteIndirectParameter( Operand * operand)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ApplyRewriter::canonicalizeResults( MutableArrayRef<SingleValueInstruction*> directResultValues , ArrayRef<Operand*> nonCanonicalUses)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ApplyRewriter::materializeIndirectResultAddress( SingleValueInstruction * origDirectResultVal , SILType argTy)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ApplyRewriter::convertApplyWithIndirectResults()",155, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ReturnRewriter::ReturnRewriter( AddressLoweringState & pass)",1, 61, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ReturnRewriter::rewriteReturns()",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"ReturnRewriter::rewriteReturn( ReturnInst * returnInst)",86, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::AddressOnlyUseRewriter( AddressLoweringState & pass)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitOperand( Operand * operand)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::markRewritten( SILValue oldValue , SILValue addr)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::beforeVisit( SILInstruction * I)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitSILInstruction( SILInstruction * I)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitApplyInst( ApplyInst * applyInst)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitCopyValueInst( CopyValueInst * copyInst)",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitDebugValueInst( DebugValueInst * debugInst)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitDestroyValueInst( DestroyValueInst * destroyInst)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitEnumInst( EnumInst * enumInst)",1, 44, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitInitExistentialValueInst( InitExistentialValueInst * initExistential)",1, 78, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitReturnInst( ReturnInst * returnInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitStoreInst( StoreInst * storeInst)",26, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitTupleInst( TupleInst * tupleInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyUseRewriter::visitTupleExtractInst( TupleExtractInst * extractInst)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::AddressOnlyDefRewriter( AddressLoweringState & pass)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::visitInst( SILInstruction * inst)",1, 56, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::beforeVisit( SILInstruction * I)",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::visitSILInstruction( SILInstruction * I)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::visitApplyInst( ApplyInst * applyInst)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::visitCopyValueInst( CopyValueInst * copyInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::visitEnumInst( EnumInst * enumInst)",15, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::visitInitExistentialValueInst( InitExistentialValueInst * initExistentialValue)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::visitLoadInst( LoadInst * loadInst)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::visitTupleInst( TupleInst * tupleInst)",24, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressOnlyDefRewriter::visitTupleExtractInst( TupleExtractInst * extractInst)",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"rewriteFunction( AddressLoweringState & pass)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressLowering::runOnFunction( SILFunction * F)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"AddressLowering::run()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AddressLowering.cpp,"swift::createAddressLowering()",1, 79, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"setStaticEnforcement( BeginAccessInst * access)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"setDynamicEnforcement( BeginAccessInst * access)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"AddressCapture::AddressCapture( Operand & oper)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"AddressCapture::isValid() const",1, 46, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"operator < <( raw_ostream & os , const AddressCapture & capture)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"DynamicCaptures::recordCapture( AddressCapture capture)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"DynamicCaptures::isDynamic( SILFunctionArgument * arg) const",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::State::adjustForEscapeInPredecessor()",10, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::SelectEnforcement( DynamicCaptures & dc , AllocBoxInst * box)",2, 41, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::run()",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::analyzeUsesOfBox( SingleValueInstruction * source)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"checkUsesOfAccess( BeginAccessInst * access)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::analyzeProjection( ProjectBoxInst * projection)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::noteEscapingUse( SILInstruction * inst)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::propagateEscapes()",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::propagateEscapesFrom( SILBasicBlock * bb)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::hasPotentiallyEscapedAt( SILInstruction * point)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::findBlocksAccessedAcross( EndAccessInst * endAccess , BlockSetVector & blocksAccessedAcross)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::hasPotentiallyEscapedAtAnyReachableBlock( BeginAccessInst * access , BlockSetVector & blocksAccessedAcross)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::updateAccesses()",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::updateAccess( BeginAccessInst * access)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SelectEnforcement::updateCapture( AddressCapture capture)",70, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SourceAccess::getStaticAccess()",1, 76, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SourceAccess::getDynamicAccess()",1, 78, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"SourceAccess::getBoxedAccess( AllocBoxInst * inst)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"AccessEnforcementSelection::run()",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"AccessEnforcementSelection::processFunction( SILFunction * F)",61, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"AccessEnforcementSelection::getAccessKindForBox( ProjectBoxInst * projection)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"AccessEnforcementSelection::getSourceAccess( SILValue address)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"AccessEnforcementSelection::handleApply( ApplySite apply)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"AccessEnforcementSelection::handleAccess( BeginAccessInst * access)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/AccessEnforcementSelection.cpp,"swift::createAccessEnforcementSelection()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/RawSILInstLowering.cpp,"lowerRawSILOperations( SILFunction & Fn)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/RawSILInstLowering.cpp,"RawSILInstLowering::run()",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Mandatory/RawSILInstLowering.cpp,"swift::createRawSILInstLowering()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"stripOffCopyValue( SILValue V)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"useCaptured( Operand * UI)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"successorHasLiveIn( SILBasicBlock * BB , llvm :: SmallPtrSetImpl<SILBasicBlock*> & LiveIn)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"propagateLiveness( llvm :: SmallPtrSetImpl<SILBasicBlock*> & LiveIn , SILBasicBlock * DefBB)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"addLastRelease( SILValue V , SILBasicBlock * BB , llvm :: SmallVectorImpl<SILInstruction*> & Releases)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"getFinalReleases( SILValue Box , llvm :: SmallVectorImpl<SILInstruction*> & Releases)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"applyArgumentEscapes( FullApplySite Apply , Operand * O)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"partialApplyEscapes( SILValue V , bool examineApply)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"checkPartialApplyBody( Operand * O)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"findUnexpectedBoxUse( SILValue Box , bool examinePartialApply , bool inAppliedFunction , llvm :: SmallVectorImpl<Operand*> & PromotedOperands)",51, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"canPromoteAllocBox( AllocBoxInst * ABI , llvm :: SmallVectorImpl<Operand*> & PromotedOperands)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"AllocBoxToStackState::AllocBoxToStackState( SILFunctionTransform * T)",1, 58, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"replaceProjectBoxUsers( SILValue HeapBox , SILValue StackBox)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"rewriteAllocBoxAsAllocStack( AllocBoxInst * ABI)",81, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"PromotedParamCloner::getCloned()",1, 67, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"PromotedParamCloner::PromotedParamCloner( SILOptFunctionBuilder & FuncBuilder , SILFunction * Orig , IsSerialized_t Serialized , ArgIndexList & PromotedArgIndices , llvm :: StringRef ClonedName)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"getClonedName( SILFunction * F , IsSerialized_t Serialized , ArgIndexList & PromotedArgIndices)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"PromotedParamCloner::initCloned( SILOptFunctionBuilder & FuncBuilder , SILFunction * Orig , IsSerialized_t Serialized , ArgIndexList & PromotedArgIndices , llvm :: StringRef ClonedName)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"PromotedParamCloner::populateCloned()",44, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"PromotedParamCloner::visitStrongReleaseInst( StrongReleaseInst * Inst)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"PromotedParamCloner::visitDestroyValueInst( DestroyValueInst * Inst)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"PromotedParamCloner::visitStrongRetainInst( StrongRetainInst * Inst)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"PromotedParamCloner::visitCopyValueInst( CopyValueInst * CVI)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"PromotedParamCloner::visitProjectBoxInst( ProjectBoxInst * Inst)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"specializePartialApply( SILOptFunctionBuilder & FuncBuilder , PartialApplyInst * PartialApply , ArgIndexList & PromotedCalleeArgIndices , AllocBoxToStackState & pass)",81, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"rewritePartialApplies( AllocBoxToStackState & pass)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"rewritePromotedBoxes( AllocBoxToStackState & pass)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"AllocBoxToStack::run()",28, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AllocBoxToStack.cpp,"swift::createAllocBoxToStack()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementReleaseSinking.cpp,"isSinkable( SILInstruction & inst)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementReleaseSinking.cpp,"isBarrier( SILInstruction * inst)",117, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementReleaseSinking.cpp,"processBlock( SILBasicBlock & block)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementReleaseSinking.cpp,"AccessEnforcementReleaseSinking::run()",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementReleaseSinking.cpp,"swift::createAccessEnforcementReleaseSinking()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"getDestructor( AllocRefInst * ARI)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"doesDestructorHaveSideEffects( AllocRefInst * ARI)",81, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"removeInstructions( ArrayRef<SILInstruction*> UsersToRemove)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"canZapInstruction( SILInstruction * Inst , bool acceptRefCountInsts , bool onlyAcceptTrivialStores)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"hasUnremovableUsers( SILInstruction * AllocRef , UserList & Users , bool acceptRefCountInsts , bool onlyAcceptTrivialStores)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectAnalysis::DeadObjectAnalysis( SILValue V)",2, 77, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectAnalysis::getAllUsers() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectAnalysis::visitStoreLocations( Visitor visitor)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectAnalysis::addStore( StoreInst * Store , IndexTrieNode * AddressNode)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectAnalysis::recursivelyCollectInteriorUses( ValueBase * DefInst , IndexTrieNode * AddressNode , bool IsInteriorAddress)",77, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectAnalysis::analyze()",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectAnalysis::visitStoreLocations( Visitor visitor , IndexTrieNode * AddressNode)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"insertReleases( ArrayRef<StoreInst*> Stores , ArrayRef<SILInstruction*> ReleasePoints , SILSSAUpdater & SSAUp)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"removeAndReleaseArray( SingleValueInstruction * NewArrayValue , DeadEndBlocks & DEBlocks)",76, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"isAllocatingApply( SILInstruction * Inst)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectElimination::collectAllocations( SILFunction & Fn)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectElimination::processAllocBox( AllocBoxInst * ABI)",1, 58, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectElimination::processFunction( SILFunction & Fn)",18, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectElimination::run()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectElimination::processAllocRef( AllocRefInst * ARI)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectElimination::processAllocStack( AllocStackInst * ASI)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"getDeadInstsAfterInitializerRemoved( ApplyInst * AI , llvm :: SmallVectorImpl<SILInstruction*> & ToDestroy)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"DeadObjectElimination::processAllocApply( ApplyInst * AI , DeadEndBlocks & DEBlocks)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadObjectElimination.cpp,"swift::createDeadObjectElimination()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"SROAMemoryUseAnalyzer::SROAMemoryUseAnalyzer( AllocStackInst * AI)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"SROAMemoryUseAnalyzer::createAgg( SILBuilder & B , SILLocation Loc , SILType Ty , ArrayRef<SILValue> Elements)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"SROAMemoryUseAnalyzer::createAggProjection( SILBuilder & B , SILLocation Loc , SILValue Operand , unsigned EltNo)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"SROAMemoryUseAnalyzer::getEltNoForProjection( SILInstruction * Inst)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"SROAMemoryUseAnalyzer::analyze()",87, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"SROAMemoryUseAnalyzer::createAllocas( llvm :: SmallVector<AllocStackInst*,4> & NewAllocations)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"SROAMemoryUseAnalyzer::chopUpAlloca( std :: vector<AllocStackInst*> & Worklist)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"runSROAOnFunction( SILFunction & Fn)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"SILSROA::run()",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILSROA.cpp,"swift::createSROA()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::constFoldingCallback( SILInstruction * I)",6, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::SimplifyCFG( SILFunction & Fn , SILTransform & T , bool Verify , bool EnableJumpThread)",7, 70, 10, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyBlockArgs()",11, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::clearWorklist()",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::popWorklist()",9, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::addToWorklist( SILBasicBlock * BB)",6, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::removeFromWorklist( SILBasicBlock * BB)",17, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"isUsedOutsideOfBlock( SILValue V , SILBasicBlock * BB)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"swift::updateSSAAfterCloning( BasicBlockCloner & Cloner , SILBasicBlock * SrcBB , SILBasicBlock * DestBB)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getTerminatorCondition( TermInst * Term)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"isThreadableBlock( SILBasicBlock * BB , SmallPtrSetImpl<SILBasicBlock*> & LoopHeaders)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"ThreadInfo::ThreadInfo( SILBasicBlock * Src , SILBasicBlock * Dest , unsigned ThreadedBlockSuccessorIdx)",4, 59, 8, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"ThreadInfo::ThreadInfo( SILBasicBlock * Src , SILBasicBlock * Dest , EnumElementDecl * EnumCase)",2, 77, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"ThreadInfo::threadEdge()",56, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"isKnownEdgeValue( TermInst * Term , SILBasicBlock * SuccBB , EnumElementDecl * & EnumCase)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"createEnumElement( SILBuilder & Builder , SwitchEnumInst * SEI , EnumElementDecl * EnumElement)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"createValueForEdge( SILInstruction * UserInst , SILInstruction * DominatingTerminator , unsigned EdgeIdx)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"tryDominatorBasedSimplifications( SILBasicBlock * DominatingBB , DominanceInfo * DT , SmallPtrSetImpl<SILBasicBlock*> & LoopHeaders , SmallVectorImpl<ThreadInfo> & JumpThreadableEdges , llvm :: DenseSet<std::pair<SILBasicBlock*,SILBasicBlock*>> & ThreadedEdgeSet , bool TryJumpThreading , llvm :: DenseMap<SILBasicBlock*,bool> & CachedThreadable)",141, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::dominatorBasedSimplifications( SILFunction & Fn , DominanceInfo * DT)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyThreadedTerminators()",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::dominatorBasedSimplify( DominanceAnalysis * DA)",69, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::removeIfDead( SILBasicBlock * BB)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyAfterDroppingPredecessor( SILBasicBlock * BB)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getEnumCaseRecursive( SILValue Val , SILBasicBlock * UsedInBB , int RecursionDepth , llvm :: SmallPtrSetImpl<SILArgument*> & HandledArgs)",61, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getEnumCase( SILValue Val , SILBasicBlock * UsedInBB)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getThreadingCost( SILInstruction * I)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"couldSimplifyEnumUsers( SILArgument * BBArg , int Budget)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::findLoopHeaders()",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"couldRemoveRelease( SILBasicBlock * SrcBB , SILValue SrcV , SILBasicBlock * DestBB , SILValue DestV)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::tryJumpThreading( BranchInst * BI)",125, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyBranchOperands( OperandValueArrayRef Operands)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"onlyHasTerminatorAndDebugInsts( SILBasicBlock * BB)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getTrampolineDest( SILBasicBlock * SBB)",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getTrampolineWithoutBBArgsTerminator( SILBasicBlock * SBB)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"isReachable( SILBasicBlock * Block)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyBranchBlock( BranchInst * BI)",89, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"wouldIntroduceCriticalEdge( TermInst * T , SILBasicBlock * DestBB)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"skipInvert( SILValue Cond , bool & Inverted , bool onlyAcceptSingleUse)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getFirstCondFail( SILBasicBlock * BB)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getUnConditionalFail( SILBasicBlock * BB , SILValue Cond , bool Inverted)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"createCondFail( CondFailInst * Orig , SILValue Cond , bool inverted , SILBuilder & Builder)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"invertExpectAndApplyTo( SILBuilder & Builder , SILValue PotentialExpect , SILValue V)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyCondBrBlock( CondBranchInst * BI)",242, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"isOnlyUnreachable( SILBasicBlock * BB)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifySwitchEnumUnreachableBlocks( SwitchEnumInst * SEI)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifySwitchEnumBlock( SwitchEnumInst * SEI)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifySwitchValueBlock( SwitchValueInst * SVI)",58, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyUnreachableBlock( UnreachableInst * UI)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyCheckedCastBranchBlock( CheckedCastBranchInst * CCBI)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyCheckedCastValueBranchBlock( CheckedCastValueBranchInst * CCBI)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyCheckedCastAddrBranchBlock( CheckedCastAddrBranchInst * CCABI)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getActualCallee( SILValue Callee)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"isTryApplyOfConvertFunction( TryApplyInst * TAI , SILValue & Callee , SILType & CalleeType)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"isTryApplyWithUnreachableError( TryApplyInst * TAI , SILValue & Callee , SILType & CalleeType)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyTryApplyBlock( TryApplyInst * TAI)",61, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyTermWithIdenticalDestBlocks( SILBasicBlock * BB)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"tryMoveCondFailToPreds( SILBasicBlock * BB)",58, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyBlocks()",77, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::canonicalizeSwitchEnums()",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"isObjCMethodCallBlock( SILBasicBlock & Block)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"shouldTailDuplicate( SILBasicBlock & Block)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::tailDuplicateObjCMethodCallSuccessorBlocks()",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"deleteTriviallyDeadOperandsOfDeadArgument( MutableArrayRef<Operand> TermOperands , unsigned DeadArgIndex , SILModule & M)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"removeArgumentFromTerminator( SILBasicBlock * BB , SILBasicBlock * Dest , int idx)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"removeArgument( SILBasicBlock * BB , unsigned i)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"ArgumentSplitter::ArgumentSplitter( SILArgument * A , std :: vector<SILArgument*> & W)",2, 49, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"ArgumentSplitter::replaceIncomingArgs( SILBuilder & B , BranchInst * BI , llvm :: SmallVectorImpl<SILValue> & NewIncomingValues)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"ArgumentSplitter::replaceIncomingArgs( SILBuilder & B , CondBranchInst * CBI , llvm :: SmallVectorImpl<SILValue> & NewIncomingValues)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"ArgumentSplitter::createNewArguments()",80, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"ArgumentSplitter::split()",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"splitBBArguments( SILFunction & Fn)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::run()",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"hasMandatoryArgument( TermInst * term)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getInsertedValue( SILInstruction * Aggregate , SILInstruction * Extract)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getSwitchEnumPred( SILBasicBlock * BB , SILBasicBlock * PostBB , SmallVectorImpl<SILBasicBlock*> & Blocks)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getSILValueFromCaseResult( SILBuilder & B , SILLocation Loc , SILType Type , IntegerLiteralInst * ValInst)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"simplifySwitchEnumToSelectEnum( SILBasicBlock * BB , unsigned ArgNum , SILArgument * IntArg)",155, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"getCaseInfo( SILValue & Input , SILBasicBlock * Pred , unsigned ArgNum)",79, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"moveIfNotDominating( SILInstruction * I , SILInstruction * InsertPos , DominanceInfo * DT)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"simplifyToSelectValue( SILBasicBlock * MergeBlock , unsigned ArgNum , DominanceInfo * DT)",100, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyArgument( SILBasicBlock * BB , unsigned i)",67, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"tryToReplaceArgWithIncomingValue( SILBasicBlock * BB , unsigned i , DominanceInfo * DT)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyArgs( SILBasicBlock * BB)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFG::simplifyProgramTerminationBlock( SILBasicBlock * BB)",51, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyCFGPass::run()",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"swift::createSimplifyCFG()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"JumpThreadSimplifyCFGPass::run()",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"swift::createJumpThreadSimplifyCFG()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SplitCriticalEdges::SplitCriticalEdges( bool SplitOnlyNonCondBrEdges)",2, 55, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SplitCriticalEdges::run()",13, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyBBArgs::SimplifyBBArgs()",1, 22, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SimplifyBBArgs::run()",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SROABBArgs::SROABBArgs()",1, 18, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"SROABBArgs::run()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"MoveCondFailToPreds::MoveCondFailToPreds()",1, 27, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"MoveCondFailToPreds::run()",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"swift::createSplitAllCriticalEdges()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"swift::createSplitNonCondBrCriticalEdges()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"swift::createSROABBArgs()",1, 69, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"swift::createSimplifyBBArgs()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SimplifyCFG.cpp,"swift::createMoveCondFailToPreds()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"isIdentifiedSourceValue( SILValue Def)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"isIdentifiedDestValue( SILValue Def)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"getAddressArgConvention( ApplyInst * Apply , SILValue Address , Operand * & Oper)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"getStoredValue( SILInstruction * I)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AddressUserVisitor::~AddressUserVisitor()",1, 35, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"visitAddressUsers( SILValue address , SILInstruction * ignoredUser , AddressUserVisitor & visitor)",80, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::AnalyzeForwardUse( SILValue Address)",1, 74, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitApplyInst( ApplyInst * Apply)",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitCopyAddrInst( CopyAddrInst * CopyInst)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitStoreInst( StoreInst * Store)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitDestroyAddrInst( DestroyAddrInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitUncheckedTakeEnumDataAddrInst( UncheckedTakeEnumDataAddrInst * UserInst)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitExistentialMetatypeInst( ExistentialMetatypeInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitLoadInst( LoadInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitOpenExistentialAddrInst( OpenExistentialAddrInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitStructElementAddrInst( StructElementAddrInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitDebugValueAddrInst( DebugValueAddrInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitInitEnumDataAddrInst( InitEnumDataAddrInst * UserInst)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitInjectEnumAddrInst( InjectEnumAddrInst * UserInst)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeForwardUse::visitSILInstruction( SILInstruction * UserInst)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::AnalyzeBackwardUse( SILValue Address)",1, 75, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitApplyInst( ApplyInst * Apply)",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitCopyAddrInst( CopyAddrInst * CopyInst)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitStoreInst( StoreInst * Store)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitExistentialMetatypeInst( ExistentialMetatypeInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitInjectEnumAddrInst( InjectEnumAddrInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitLoadInst( LoadInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitOpenExistentialAddrInst( OpenExistentialAddrInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitDestroyAddrInst( DestroyAddrInst * UserInst)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitUncheckedTakeEnumDataAddrInst( UncheckedTakeEnumDataAddrInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitUncheckedRefCastAddrInst( UncheckedRefCastAddrInst * UserInst)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitDebugValueAddrInst( DebugValueAddrInst * UserInst)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"AnalyzeBackwardUse::visitSILInstruction( SILInstruction * UserInst)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::CopySrcUserVisitor::CopySrcUserVisitor( CopyForwarding & CPF)",1, 58, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::CopySrcUserVisitor::visitNormalUse( SILInstruction * user)",12, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::CopySrcUserVisitor::visitTake( CopyAddrInst * take)",7, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::CopySrcUserVisitor::visitDestroy( DestroyAddrInst * destroy)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::CopySrcUserVisitor::visitDebugValue( DebugValueAddrInst * debugValue)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::CopyForwarding( PostOrderAnalysis * PO , DominanceAnalysis * DA , RCIdentityAnalysis * RCIAnalysis)",6, 57, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::reset( SILFunction * F)",27, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::hasChanged() const",1, 49, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::hasChangedCFG() const",1, 55, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::hasForwardedToCopy() const",1, 65, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyDestUserVisitor::CopyDestUserVisitor( SmallPtrSetImpl<SILInstruction*> & DestUsers)",2, 32, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyDestUserVisitor::visitNormalUse( SILInstruction * user)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyDestUserVisitor::visitTake( CopyAddrInst * take)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyDestUserVisitor::visitDestroy( DestroyAddrInst * destroy)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyDestUserVisitor::visitDebugValue( DebugValueAddrInst * debugValue)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::propagateCopy( CopyAddrInst * CopyInst , bool hoistingDestroy)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::findCopyIntoDeadTemp( CopyAddrInst * destCopy)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::forwardDeadTempCopy( CopyAddrInst * srcCopy , CopyAddrInst * destCopy)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::isSourceDeadAtCopy()",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::doesCopyDominateDestUsers( const UserVector & DirectDestUsers)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::markStoredValueUsers( SILValue storedValue)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"getSingleDealloc( AllocStackInst * ASI)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::forwardPropagateCopy()",130, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"findAddressRootAndUsers( ValueBase * Def , SmallPtrSetImpl<SILInstruction*> & RootUserInsts)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::backwardPropagateCopy()",96, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::hoistDestroy( SILInstruction * DestroyPoint , SILLocation DestroyLoc)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwarding::forwardCopiesOf( SILValue Def , SILFunction * F)",90, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"canNRVO( CopyAddrInst * CopyInst)",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"replaceAllUsesExceptDealloc( AllocStackInst * ASI , ValueBase * RHS)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"performNRVO( CopyAddrInst * CopyInst)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"CopyForwardingPass::run()",63, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"TempRValueOptPass::run()",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"TempRValueOptPass::collectLoads( Operand * userOp , SILInstruction * user , SingleValueInstruction * address , llvm :: SmallPtrSetImpl<SILInstruction*> & loadInsts)",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"TempRValueOptPass::checkNoSourceModification( CopyAddrInst * copyInst , const llvm :: SmallPtrSetImpl<SILInstruction*> & useInsts)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"TempRValueOptPass::tryOptimizeCopyIntoTemp( CopyAddrInst * copyInst)",64, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"swift::createCopyForwarding()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyForwarding.cpp,"swift::createTempRValueOpt()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/MarkUninitializedFixup.cpp,"getInitialProjectBox( MarkUninitializedInst * MUI , ArrayRef<ProjectBoxInst*> Projections)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/MarkUninitializedFixup.cpp,"MarkUninitializedFixup::run()",63, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/MarkUninitializedFixup.cpp,"swift::createMarkUninitializedFixup()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::dumpCaller( SILFunction * Caller)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::getSPA( SILFunction * F , SILLoopInfo * LI)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::SILPerformanceInliner( SILOptFunctionBuilder & FuncBuilder , InlineSelection WhatToInline , DominanceAnalysis * DA , SILLoopAnalysis * LA , SideEffectAnalysis * SEA , OptimizationMode OptMode , OptRemark :: Emitter & ORE)",6, 50, 0, 1
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"canSpecializeGeneric( ApplySite AI , SILFunction * F , SubstitutionMap Subs)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::profileBasedDecision( const FullApplySite & AI , int Benefit , SILFunction * Callee , int CalleeCost , int & NumCallerBlocks , const llvm :: DenseMapIterator<swift::SILBasicBlock*,uint64_t,llvm::DenseMapInfo<swift::SILBasicBlock*>,llvm::detail::DenseMapPair<swift::SILBasicBlock*,uint64_t>,true> & bbIt)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::isProfitableToInline( FullApplySite AI , Weight CallerWeight , ConstantTracker & callerTracker , int & NumCallerBlocks , const llvm :: DenseMap<SILBasicBlock*,uint64_t> & BBToWeightMap)",265, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"shouldInlineGeneric( FullApplySite AI)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::decideInWarmBlock( FullApplySite AI , Weight CallerWeight , ConstantTracker & callerTracker , int & NumCallerBlocks , const llvm :: DenseMap<SILBasicBlock*,uint64_t> & BBToWeightMap)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::decideInColdBlock( FullApplySite AI , SILFunction * Callee)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"addWeightCorrection( FullApplySite FAS , llvm :: DenseMap<FullApplySite,int> & WeightCorrections)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"containsWeight( TermInst * inst)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"addToBBCounts( llvm :: DenseMap<SILBasicBlock*,uint64_t> & BBToWeightMap , uint64_t numToAdd , swift :: TermInst * termInst)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"isInlineAlwaysCallSite( SILFunction * Callee)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"calculateBBWeights( SILFunction * Caller , DominanceInfo * DT , llvm :: DenseMap<SILBasicBlock*,uint64_t> & BBToWeightMap)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::collectAppliesToInline( SILFunction * Caller , SmallVectorImpl<FullApplySite> & Applies)",126, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::inlineCallsIntoFunction( SILFunction * Caller)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInliner::visitColdBlocks( SmallVectorImpl<FullApplySite> & AppliesToInline , SILBasicBlock * Root , DominanceInfo * DT)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInlinerPass::SILPerformanceInlinerPass( InlineSelection WhatToInline , StringRef LevelName)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"SILPerformanceInlinerPass::run()",28, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"swift::createEarlyInliner()",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"swift::createPerfInliner()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/PerformanceInliner.cpp,"swift::createLateInliner()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::RedundantOverflowCheckRemovalPass()",1, 41, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::Constraint::Constraint( SILBasicBlock * BB , SILValue L , SILValue R , ValueRelation Rel)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::Constraint::dump()",19, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::removeCollectedRedundantInstructions()",15, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::run()",77, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::knownRelation( SILValue A , SILValue B , ValueRelation Rel)",28, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::isKnownPositive( SILValue N)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::isKnownAbsLess( SILValue A , SILValue B)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::isOverflowCheckRemovedByConstraint( Constraint & F , BuiltinInst * BI)",243, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::tryToRemoveCondFail( CondFailInst * CFI)",20, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::getArithOpRelation( BuiltinInst * BI)",26, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::addComparisonRelation( BuiltinInst * CMP , SILBasicBlock * TrueBB , SILBasicBlock * FalseBB)",75, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::registerCondFailFormula( CondFailInst * CFI)",40, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"RedundantOverflowCheckRemovalPass::registerBranchFormula( CondBranchInst * BI)",31, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantOverflowCheckRemoval.cpp,"swift::createRedundantOverflowCheckRemoval()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayAllocation::ArrayAllocation()",1, 23, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayAllocation::mapInitializationStores( SILValue ElementBuffer)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayAllocation::replacementsAreValid()",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayAllocation::recursivelyCollectUses( ValueBase * Def)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayAllocation::analyze( ApplyInst * Alloc)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayAllocation::getGetElementReplacements( llvm :: SmallVectorImpl<GetElementReplacement> & Replacements)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayAllocation::getAppendContentOfReplacements( llvm :: SmallVectorImpl<AppendContentOfReplacement> & Replacements)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayElementPropagation::ArrayElementPropagation()",1, 31, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayElementPropagation::replaceAppendCalls( ArrayRef<ArrayAllocation::AppendContentOfReplacement> Repls)",52, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"ArrayElementPropagation::run()",41, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayElementValuePropagation.cpp,"swift::createArrayElementPropagation()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::StackAllocationPromoter( AllocStackInst * Asi , DominanceInfo * Di , DomTreeLevelMap & DomTreeLevels , SILBuilder & B)",15, 8, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"MemoryToRegisters::MemoryToRegisters( SILFunction & Func , DominanceInfo * Dt)",2, 71, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"isAddressForLoad( SILInstruction * I , SILBasicBlock * & singleBlock)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"isDeadAddrProjection( SILInstruction * I)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"isCaptured( AllocStackInst * ASI , bool & inSingleBlock)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"MemoryToRegisters::isWriteOnlyAllocation( AllocStackInst * ASI)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"promoteDebugValueAddr( DebugValueAddrInst * DVAI , SILValue Value , SILBuilder & B)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"isLoadFromStack( SILInstruction * I , AllocStackInst * ASI)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"collectLoads( SILInstruction * I , SmallVectorImpl<LoadInst*> & Loads)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"replaceLoad( LoadInst * LI , SILValue val , AllocStackInst * ASI)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"replaceDestroy( DestroyAddrInst * DAI , SILValue NewValue)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::promoteAllocationInBlock( SILBasicBlock * BB)",84, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"MemoryToRegisters::removeSingleBlockAllocation( AllocStackInst * ASI)",83, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::addBlockArguments( BlockSet & PhiBlocks)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::getLiveOutValue( BlockSet & PhiBlocks , SILBasicBlock * StartBB)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::getLiveInValue( BlockSet & PhiBlocks , SILBasicBlock * BB)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::fixPhiPredBlock( BlockSet & PhiBlocks , SILBasicBlock * Dest , SILBasicBlock * Pred)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::fixBranchesAndUses( BlockSet & PhiBlocks)",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::pruneAllocStackUsage()",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"computeDomTreeLevels( DominanceInfo * DT , DomTreeLevelMap & DomTreeLevels)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::promoteAllocationToPhi()",103, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"StackAllocationPromoter::run()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"MemoryToRegisters::promoteSingleAllocation( AllocStackInst * alloc , DomTreeLevelMap & DomTreeLevels)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"MemoryToRegisters::run()",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"SILMem2Reg::run()",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILMem2Reg.cpp,"swift::createMem2Reg()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"SimpleValue::SimpleValue( SILInstruction * I)",1, 47, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"SimpleValue::isSentinel() const",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"llvm::DenseMapInfo<SimpleValue>::getEmptyKey()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"llvm::DenseMapInfo<SimpleValue>::getTombstoneKey()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitSILInstruction( SILInstruction *)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitBridgeObjectToRefInst( BridgeObjectToRefInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitBridgeObjectToWordInst( BridgeObjectToWordInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitClassifyBridgeObjectInst( ClassifyBridgeObjectInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitValueToBridgeObjectInst( ValueToBridgeObjectInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitRefToBridgeObjectInst( RefToBridgeObjectInst * X)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitUncheckedTrivialBitCastInst( UncheckedTrivialBitCastInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitUncheckedBitwiseCastInst( UncheckedBitwiseCastInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitUncheckedAddrCastInst( UncheckedAddrCastInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitFunctionRefInst( FunctionRefInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitGlobalAddrInst( GlobalAddrInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitIntegerLiteralInst( IntegerLiteralInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitFloatLiteralInst( FloatLiteralInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitRefElementAddrInst( RefElementAddrInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitRefTailAddrInst( RefTailAddrInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitProjectBoxInst( ProjectBoxInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitRefToRawPointerInst( RefToRawPointerInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitRawPointerToRefInst( RawPointerToRefInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitUpcastInst( UpcastInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitStringLiteralInst( StringLiteralInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitStructInst( StructInst * X)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitStructExtractInst( StructExtractInst * X)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitStructElementAddrInst( StructElementAddrInst * X)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitCondFailInst( CondFailInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitClassMethodInst( ClassMethodInst * X)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitSuperMethodInst( SuperMethodInst * X)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitTupleInst( TupleInst * X)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitTupleExtractInst( TupleExtractInst * X)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitTupleElementAddrInst( TupleElementAddrInst * X)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitMetatypeInst( MetatypeInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitValueMetatypeInst( ValueMetatypeInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitExistentialMetatypeInst( ExistentialMetatypeInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitObjCProtocolInst( ObjCProtocolInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitIndexRawPointerInst( IndexRawPointerInst * X)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitPointerToAddressInst( PointerToAddressInst * X)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitAddressToPointerInst( AddressToPointerInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitApplyInst( ApplyInst * X)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitBuiltinInst( BuiltinInst * X)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitEnumInst( EnumInst * X)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitUncheckedEnumDataInst( UncheckedEnumDataInst * X)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitIndexAddrInst( IndexAddrInst * X)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitThickToObjCMetatypeInst( ThickToObjCMetatypeInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitObjCToThickMetatypeInst( ObjCToThickMetatypeInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitObjCMetatypeToObjectInst( ObjCMetatypeToObjectInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitObjCExistentialMetatypeToObjectInst( ObjCExistentialMetatypeToObjectInst * X)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitUncheckedRefCastInst( UncheckedRefCastInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitSelectEnumInstBase( SelectEnumInstBase * X)",16, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitSelectEnumInst( SelectEnumInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitSelectEnumAddrInst( SelectEnumAddrInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitSelectValueInst( SelectValueInst * X)",16, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitThinFunctionToPointerInst( ThinFunctionToPointerInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitPointerToThinFunctionInst( PointerToThinFunctionInst * X)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitWitnessMethodInst( WitnessMethodInst * X)",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitMarkDependenceInst( MarkDependenceInst * X)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"HashVisitor::visitOpenExistentialRefInst( OpenExistentialRefInst * X)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"llvm::DenseMapInfo<SimpleValue>::getHashValue( SimpleValue Val)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"llvm::DenseMapInfo<SimpleValue>::isEqual( SimpleValue LHS , SimpleValue RHS)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::CSE::CSE( bool RunsOnHighLevelSil , SideEffectAnalysis * SEA)",2, 60, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::CSE::NodeScope::NodeScope( ScopedHTType * availableValues)",1, 74, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::CSE::StackNode::StackNode( ScopedHTType * availableValues , DominanceInfoNode * n , DominanceInfoNode :: iterator child , DominanceInfoNode :: iterator end)",5, 26, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::CSE::StackNode::node()",1, 47, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::CSE::StackNode::childIter()",1, 66, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::CSE::StackNode::nextChild()",5, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::CSE::StackNode::end()",1, 58, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::CSE::StackNode::isProcessed()",1, 45, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::CSE::StackNode::process()",1, 41, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"CSE::processFunction( SILFunction & Fm , DominanceInfo * DT)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"InstructionCloner::InstructionCloner( SILFunction * F)",1, 57, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"InstructionCloner::doIt( SILInstruction * I)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"InstructionCloner::clone( SILInstruction * I)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"InstructionCloner::postProcess( SILInstruction * Orig , SILInstruction * Cloned)",7, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"InstructionCloner::getMappedValue( SILValue Value)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"InstructionCloner::remapBasicBlock( SILBasicBlock * BB)",1, 69, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"updateBasicBlockArgTypes( SILBasicBlock * BB , ArchetypeType * OldOpenedArchetype , ArchetypeType * NewOpenedArchetype)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"CSE::processOpenExistentialRef( OpenExistentialRefInst * Inst , ValueBase * V , SILBasicBlock :: iterator & I)",108, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"CSE::processNode( DominanceInfoNode * Node)",76, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"CSE::canHandle( SILInstruction * Inst)",101, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"getOpenExistentialUsers( OpenExistentialAddrInst * OE)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"tryToCSEOpenExtCall( OpenExistentialAddrInst * From , OpenExistentialAddrInst * To , ApplyWitnessPair ToApplyWitnessUsers , DominanceInfo * DA)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"CSExistentialInstructions( SILFunctionArgument * Arg , DominanceInfo * DA)",75, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"CSEExistentialCalls( SILFunction * Func , DominanceInfo * DA)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"SILCSE::run()",21, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"SILCSE::SILCSE( bool RunsOnHighLevelSil)",1, 78, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::createCSE()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CSE.cpp,"swift::createHighLevelCSE()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Devirtualizer.cpp,"Devirtualizer::run()",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Devirtualizer.cpp,"Devirtualizer::devirtualizeAppliesInFunction( SILFunction & F , ClassHierarchyAnalysis * CHA)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Devirtualizer.cpp,"swift::createDevirtualizer()",1, 75, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"seemsUseful( SILInstruction * I)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::run()",47, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::markValueLive( SILNode * V)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"getProducer( CondFailInst * CFI)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::markLive( SILFunction & F)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::addReverseDependency( SILInstruction * From , SILInstruction * To)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::markTerminatorArgsLive( SILBasicBlock * Pred , SILBasicBlock * Succ , size_t ArgIndex)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::propagateLiveBlockArgument( SILArgument * Arg)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::propagateLiveness( SILInstruction * I)",51, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::nearestUsefulPostDominator( SILBasicBlock * Block)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::replaceBranchWithJump( SILInstruction * Inst , SILBasicBlock * Block)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::removeDead( SILFunction & F)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::precomputeControlInfo( SILFunction & F)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::insertControllingInfo( SILBasicBlock * Block , unsigned Level)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::computeLevelNumbers( PostDomTreeNode * Node , unsigned Level)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::hasInfiniteLoops( SILFunction & F)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::computePredecessorDependence( SILFunction & F)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::computeMinPredecessorLevels( PostDomTreeNode * Node)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::collectControllingBlocksInTree( ControllingInfo & QueryInfo , PostDomTreeNode * Node , llvm :: SmallPtrSetImpl<SILBasicBlock*> & Controlling)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::collectControllingBlocks( SILBasicBlock * Block , llvm :: SmallPtrSetImpl<SILBasicBlock*> & Controlling)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"DCE::markControllingTerminatorsLive( SILBasicBlock * Block)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadCodeElimination.cpp,"swift::createDCE()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"swift::AccessEnforcementOptsInfo::AccessEnforcementOptsInfo( const AccessedStorage & storage)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"swift::AccessEnforcementOptsInfo::getAccessIndex() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"swift::AccessEnforcementOptsInfo::setAccessIndex( unsigned index)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"swift::AccessEnforcementOptsInfo::seenNestedConflict() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"swift::AccessEnforcementOptsInfo::setSeenNestedConflict()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"swift::AccessEnforcementOptsInfo::dump() const",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"RegionInfo::AccessSummary::AccessSummary( unsigned size)",1, 52, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"RegionInfo::RegionInfo( unsigned size)",3, 37, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"RegionInfo::reset()",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"RegionInfo::getInScopeAccesses()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"RegionInfo::getOutOfScopeAccesses()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::Result::getAccessIndex( BeginAccessInst * beginAccess) const",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::Result::getAccessInfo( BeginAccessInst * beginAccess)",5, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::Result::getAccessInfo( BeginAccessInst * beginAccess) const",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::AccessConflictAndMergeAnalysis( LoopRegionFunctionInfo * LRFI , AccessedStorageAnalysis * ASA)",3, 32, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::getResult()",1, 47, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::addInScopeAccess( RegionInfo & info , BeginAccessInst * beginAccess)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::removeInScopeAccess( RegionInfo & info , BeginAccessInst * beginAccess)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::removeConflictFromStruct( RegionInfo & info , RegionInfo :: AccessSummary & accessStruct , const AccessedStorage & storage , bool isInScope)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::recordConflict( RegionInfo & info , const AccessedStorage & storage)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::addOutOfScopeAccess( RegionInfo & info , BeginAccessInst * beginAccess)",56, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::mergeAccessStruct( RegionInfo & info , RegionInfo :: AccessSummary & accessStruct , const RegionInfo :: AccessSummary & RHSAccessStruct)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::merge( RegionInfo & info , const RegionInfo & RHS)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::analyze()",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::identifyBeginAccesses()",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::propagateAccessSetsBottomUp( LoopRegionToAccessedStorage & regionToStorageMap , llvm :: SmallVector<unsigned,16> worklist)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"calcBottomUpOrderRecurse( LoopRegion * region , llvm :: SmallVectorImpl<unsigned> & worklist , LoopRegionFunctionInfo * LRFI)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::calcBottomUpOrder( llvm :: SmallVectorImpl<unsigned> & worklist)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::visitBeginAccess( BeginAccessInst * beginAccess , RegionInfo & info)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::visitEndAccess( EndAccessInst * endAccess , RegionInfo & info)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::detectApplyConflicts( const swift :: FunctionAccessedStorage & callSiteAccesses , const DenseAccessSet & conflictFreeSet , const swift :: FullApplySite & fullApply , RegionInfo & info)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::visitFullApply( FullApplySite fullApply , RegionInfo & info)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::detectMayReleaseConflicts( const DenseAccessSet & conflictFreeSet , SILInstruction * instr , RegionInfo & info)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::visitMayRelease( SILInstruction * instr , RegionInfo & info)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::mergePredAccesses( LoopRegion * region , RegionIDToLocalInfoMap & localRegionInfos)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::visitSetForConflicts( const DenseAccessSet & accessSet , RegionInfo & info , AccessConflictAndMergeAnalysis :: AccessedStorageSet & loopStorage)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::detectConflictsInLoop( LoopRegion * loopRegion , RegionIDToLocalInfoMap & localRegionInfos , LoopRegionToAccessedStorage & accessSetsOfRegions)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessConflictAndMergeAnalysis::localDataFlowInBlock( LoopRegion * bbRegion , RegionIDToLocalInfoMap & localRegionInfos)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"foldNonNestedAccesses( AccessConflictAndMergeAnalysis :: AccessMap & accessMap)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"removeLocalNonNestedAccess( const AccessConflictAndMergeAnalysis :: Result & result , const FunctionAccessedStorage & functionAccess)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"getSingleEndAccess( BeginAccessInst * inst)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"mergeEndAccesses( BeginAccessInst * parentIns , BeginAccessInst * childIns)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"canMergeEnd( BeginAccessInst * parentIns , BeginAccessInst * childIns)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"canMergeBegin( PostDominanceInfo * postDomTree , const llvm :: DenseMap<SILBasicBlock*,SCCInfo> & blockToSCCMap , BeginAccessInst * parentIns , BeginAccessInst * childIns)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"canMerge( PostDominanceInfo * postDomTree , const llvm :: DenseMap<SILBasicBlock*,SCCInfo> & blockToSCCMap , BeginAccessInst * parentIns , BeginAccessInst * childIns)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"mergeAccesses( SILFunction * F , PostDominanceInfo * postDomTree , const AccessConflictAndMergeAnalysis :: MergeablePairs & mergePairs)",86, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"AccessEnforcementOpts::run()",41, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementOpts.cpp,"swift::createAccessEnforcementOpts()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AssumeSingleThreaded.cpp,"AssumeSingleThreaded::run()",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AssumeSingleThreaded.cpp,"swift::createAssumeSingleThreaded()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementWMO.cpp,"getDisjointAccessLocation( const AccessedStorage & storage)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementWMO.cpp,"GlobalAccessRemoval::GlobalAccessRemoval( SILModule & module)",1, 61, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementWMO.cpp,"GlobalAccessRemoval::perform()",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementWMO.cpp,"GlobalAccessRemoval::visitInstruction( SILInstruction * I)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementWMO.cpp,"GlobalAccessRemoval::recordAccess( SILInstruction * beginAccess , VarDecl * decl , AccessedStorage :: Kind storageKind , bool hasNoNestedConflict)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementWMO.cpp,"GlobalAccessRemoval::removeNonreentrantAccess()",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementWMO.cpp,"AccessEnforcementWMO::run()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementWMO.cpp,"swift::createAccessEnforcementWMO()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Sink.cpp,"CodeSinkingPass::sinkInstruction( SILInstruction * II)",65, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Sink.cpp,"CodeSinkingPass::run()",42, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Sink.cpp,"swift::createCodeSinking()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"ArrayAllocation::ArrayAllocation( ApplyInst * AI , llvm :: SmallVectorImpl<ApplyInst*> & DeadCalls)",2, 53, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"ArrayAllocation::tryPropagate( ApplyInst * Inst , llvm :: SmallVectorImpl<ApplyInst*> & DeadCalls)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"ArrayAllocation::propagate()",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"ArrayAllocation::isInitializationWithKnownCount()",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"ArrayAllocation::analyzeArrayValueUses()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"ArrayAllocation::recursivelyCollectUses( ValueBase * Def)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"ArrayAllocation::propagateCountToUsers()",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"ArrayCountPropagation::ArrayCountPropagation()",1, 29, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"ArrayCountPropagation::run()",24, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ArrayCountPropagation.cpp,"swift::createArrayCountPropagation()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"createRefCountOpForPayload( SILBuilder & Builder , SILInstruction * I , EnumElementDecl * EnumDecl , SILValue DefOfEnum = SILValue())",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::getBB()",1, 46, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::begin()",1, 65, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::end()",1, 63, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::clear()",1, 43, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::visitSILInstruction( SILInstruction * I)",1, 64, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"EnumCaseDataflowContext::EnumCaseDataflowContext( PostOrderFunctionInfo * PO)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"EnumCaseDataflowContext::hasValueForID( unsigned ID) const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"EnumCaseDataflowContext::getValueForID( unsigned ID) const",1, 77, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"EnumCaseDataflowContext::getIDForValue( SILValue V) const",21, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"EnumCaseDataflowContext::blotValue( SILValue V)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"EnumCaseDataflowContext::size() const",1, 56, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"EnumCaseDataflowContext::getRPOState( unsigned RPOIdx)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"EnumCaseDataflowContext::getBBState( SILBasicBlock * BB)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::getContext() const",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::getIDForValue( SILValue V) const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::getValueForID( unsigned ID) const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::handlePredSwitchEnum( SwitchEnumInst * S)",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::handlePredCondSelectEnum( CondBranchInst * CondBr)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::initWithFirstPred( SILBasicBlock * FirstPredBB)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::mergeSinglePredTermInfoIntoState( SILBasicBlock * Pred)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::mergePredecessorStates()",128, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::visitEnumInst( EnumInst * EI)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::visitUncheckedEnumDataInst( UncheckedEnumDataInst * UEDI)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::visitRetainValueInst( RetainValueInst * RVI)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::visitReleaseValueInst( ReleaseValueInst * RVI)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::process()",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::hoistDecrementsIntoSwitchRegions( AliasAnalysis * AA)",83, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"findLastSinkableMatchingEnumValueRCIncrementInPred( AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA , SILValue EnumValue , SILBasicBlock * BB)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"findRetainsSinkableFromSwitchRegionForEnum( AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA , SILValue EnumValue , EnumBBCaseList & Map , SmallVectorImpl<SILInstruction*> & DeleteList)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::sinkIncrementsOutOfSwitchRegions( AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA)",61, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::dump() const",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"BBEnumTagDataflowState::init( EnumCaseDataflowContext & NewContext , SILBasicBlock * NewBB)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"hoistSILArgumentReleaseInst( SILBasicBlock * BB)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"canSinkInstruction( SILInstruction * Inst)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"isSinkBarrier( SILInstruction * Inst)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"findValueShallowRoot( const SILValue & In)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"findIdenticalInBlock( SILBasicBlock * BB , SILInstruction * Iden , const ValueToBBArgIdxMap & valueToArgIdxMap , OperandRelation & opRelation)",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"cheaperToPassOperandsAsArguments( SILInstruction * First , SILInstruction * Second)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"getArgForBlock( SILBasicBlock * From , SILBasicBlock * To , unsigned ArgNum)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"sinkLiteralArguments( SILBasicBlock * BB , unsigned ArgNum)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"sinkArgument( EnumCaseDataflowContext & Context , SILBasicBlock * BB , unsigned ArgNum)",138, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"sinkLiteralsFromPredecessors( SILBasicBlock * BB)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"sinkArgumentsFromPredecessors( EnumCaseDataflowContext & Context , SILBasicBlock * BB)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"canonicalizeRefCountInstrs( SILBasicBlock * BB)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"sinkCodeFromPredecessors( EnumCaseDataflowContext & Context , SILBasicBlock * BB)",122, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"tryToSinkRefCountAcrossSwitch( SwitchEnumInst * Switch , SILBasicBlock :: iterator RV , AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"tryToSinkRefCountAcrossSelectEnum( CondBranchInst * CondBr , SILBasicBlock :: iterator I , AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA)",81, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"tryTosinkIncrementsIntoSwitchRegions( SILBasicBlock :: iterator T , SILBasicBlock :: iterator I , bool CanSinkToSuccessors , AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"sinkIncrementsIntoSwitchRegions( SILBasicBlock * BB , AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"processFunction( SILFunction * F , AliasAnalysis * AA , PostOrderFunctionInfo * PO , RCIdentityFunctionInfo * RCIA , bool HoistReleases)",64, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"SILCodeMotion::SILCodeMotion( bool TryReleaseHoisting)",1, 80, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"SILCodeMotion::run()",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"swift::createEarlyCodeMotion()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILCodeMotion.cpp,"swift::createLateCodeMotion()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"CodeMotionContext::getRCRoot( SILValue R)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"CodeMotionContext::getRCRoot( SILInstruction * I)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"CodeMotionContext::CodeMotionContext( llvm :: SpecificBumpPtrAllocator<BlockState> & BPA , SILFunction * F , PostOrderFunctionInfo * PO , AliasAnalysis * AA , RCIdentityFunctionInfo * RCFI)",5, 74, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"CodeMotionContext::~CodeMotionContext()",1, 34, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"CodeMotionContext::run()",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainBlockState::updateBBSetOut( SmallBitVector & X)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainBlockState::RetainBlockState( bool IsEntry , unsigned size , bool MultiIteration)",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::mayBlockCodeMotion( SILInstruction * II , SILValue Ptr)",21, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::getPrevReusableInst( SILInstruction * I , SILValue Root)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::RetainCodeMotionContext( llvm :: SpecificBumpPtrAllocator<BlockState> & BPA , SILFunction * F , PostOrderFunctionInfo * PO , AliasAnalysis * AA , RCIdentityFunctionInfo * RCFI)",4, 60, 7, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::~RetainCodeMotionContext()",1, 41, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::requireIteration()",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::initializeCodeMotionDataFlow()",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::initializeCodeMotionBBMaxSet()",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::computeCodeMotionGenKillSet()",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::performCodeMotion()",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::mergeBBDataFlowStates( SILBasicBlock * BB)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::processBBWithGenKillSet( SILBasicBlock * BB)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::convergeCodeMotionDataFlow()",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"RetainCodeMotionContext::computeCodeMotionInsertPoints()",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseBlockState::updateBBSetIn( SmallBitVector & X)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseBlockState::ReleaseBlockState( bool InitOptimistic , unsigned size)",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::mayBlockCodeMotion( SILInstruction * II , SILValue Ptr)",18, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::getPrevReusableInst( SILInstruction * I , SILValue Root)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::ReleaseCodeMotionContext( llvm :: SpecificBumpPtrAllocator<BlockState> & BPA , SILFunction * F , PostOrderFunctionInfo * PO , AliasAnalysis * AA , RCIdentityFunctionInfo * RCFI , bool FreezeEpilogueReleases , ConsumedArgToEpilogueReleaseMatcher & ERM)",7, 68, 8, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::~ReleaseCodeMotionContext()",1, 42, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::requireIteration()",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::initializeCodeMotionDataFlow()",48, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::initializeCodeMotionBBMaxSet()",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::computeCodeMotionGenKillSet()",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::mergeBBDataFlowStates( SILBasicBlock * BB)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::performCodeMotion()",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::processBBWithGenKillSet( SILBasicBlock * BB)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::convergeCodeMotionDataFlow()",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ReleaseCodeMotionContext::computeCodeMotionInsertPoints()",83, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"eliminateRetainsPrecedingProgramTerminationPoints( SILFunction * f)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ARCCodeMotion::ARCCodeMotion( CodeMotionKind H , bool F)",1, 82, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"ARCCodeMotion::run()",64, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"swift::createRetainSinking()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"swift::createReleaseHoisting()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ARCCodeMotion.cpp,"swift::createLateReleaseHoisting()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"isUnknownUse( Operand * use)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"isAppliedArgConsumed( ApplySite apply , Operand * oper)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"isBuiltinArgConsumed( BuiltinInst * BI)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"isConsuming( Operand * use)",98, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"LivenessInfo::empty()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"LivenessInfo::clear()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"LivenessInfo::isBlockLive( SILBasicBlock * bb) const",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"LivenessInfo::markBlockLive( SILBasicBlock * bb , IsLive_t isLive)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"LivenessInfo::isConsumingUser( SILInstruction * user) const",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"LivenessInfo::recordUser( Operand * use)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"LivenessInfo::recordOriginalDestroy( Operand * use)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"LivenessInfo::getOriginalDestroyBlocks() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"DestroyInfo::empty() const",1, 60, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"DestroyInfo::clear()",1, 47, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"DestroyInfo::hasFinalDestroy( SILBasicBlock * bb) const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"DestroyInfo::claimDestroy( SILInstruction * inst)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"DestroyInfo::recordFinalDestroy( SILInstruction * inst)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"DestroyInfo::invalidateFinalDestroy( SILInstruction * inst)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"CopyPropagationState::CopyPropagationState( SILFunction * F)",2, 70, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"CopyPropagationState::isValueOwned() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"CopyPropagationState::markInvalid( SILAnalysis :: InvalidationKind kind)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"CopyPropagationState::resetDef( SILValue def)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"computeUseBlockLiveness( SILBasicBlock * userBB , CopyPropagationState & pass)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"computeUseLiveness( Operand * use , CopyPropagationState & pass)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"computeLiveness( CopyPropagationState & pass)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"insertDestroyOnCFGEdge( SILBasicBlock * predBB , SILBasicBlock * succBB , CopyPropagationState & pass)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"insertDestroyAtInst( SILBasicBlock :: iterator pos , CopyPropagationState & pass)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"findOrInsertDestroyInBlock( SILBasicBlock * bb , CopyPropagationState & pass)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"findOrInsertDestroys( CopyPropagationState & pass)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"copyLiveUse( Operand * use , CopyPropagationState & pass)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"rewriteCopies( CopyPropagationState & pass)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"stripCopies( SILValue v)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"CopyPropagation::run()",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/CopyPropagation.cpp,"swift::createCopyPropagation()",1, 79, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"DominatedAccessRemoval::DominatedAccessRemoval( SILFunction & func , DominanceInfo * domInfo)",2, 40, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"DominatedAccessRemoval::visitInstruction( SILInstruction * instr , AccessedStorageInfo & visitedDomAccessesToStorageInfo)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"DominatedAccessRemoval::visitBeginAccess( BeginAccessInst * beginAccess , AccessedStorage storage , AccessedStorageInfo & visitedDomAccessesToStorageInfo)",48, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"DominatedAccessRemoval::analyzeDomSubTree( SILBasicBlock * block , AccessedStorageInfo & visitedDomAccessesToStorageInfo , size_t recursionDepth)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"DominatedAccessRemoval::analyze()",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"DominatedAccessRemoval::optimize()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"DominatedAccessRemoval::perform()",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"LoopDominatingAccessAdder::LoopDominatingAccessAdder( SILLoop * topLevelLoop , DominanceInfo * domInfo)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"LoopDominatingAccessAdder::analyzeCurrentLoop( SILLoop * currentLoop , SmallVectorImpl<BeginAccessInst*> & dominatableInstrVec)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"LoopDominatingAccessAdder::optimizeLoop( SILLoop * currnetLoop , SmallVectorImpl<BeginAccessInst*> & dominatableInstrVec)",58, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"LoopDominatingAccessAdder::perform()",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"AccessEnforcementDom::run()",36, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/AccessEnforcementDom.cpp,"swift::createAccessEnforcementDom()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp,"cloneEdge( TermInst * TI , unsigned SuccIndex)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp,"CloneApply( FullApplySite AI , SILBuilder & Builder)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp,"speculateMonomorphicTarget( FullApplySite AI , SILType SubType , CheckedCastBranchInst * & CCBI)",138, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp,"isDefaultCaseKnown( ClassHierarchyAnalysis * CHA , FullApplySite AI , ClassDecl * CD , ClassHierarchyAnalysis :: ClassList & Subs)",94, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp,"tryToSpeculateTarget( FullApplySite AI , ClassHierarchyAnalysis * CHA , OptRemark :: Emitter & ORE)",216, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp,"SpeculativeDevirtualization::~SpeculativeDevirtualization()",1, 47, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp,"SpeculativeDevirtualization::run()",34, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp,"swift::createSpeculativeDevirtualization()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/StackPromotion.cpp,"StackPromotion::StackPromotion()",1, 22, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/StackPromotion.cpp,"StackPromotion::run()",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/StackPromotion.cpp,"StackPromotion::promoteInBlock( SILBasicBlock * BB , EscapeAnalysis * EA , DeadEndBlocks & DEBlocks)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/StackPromotion.cpp,"StackPromotion::tryPromoteAlloc( AllocRefInst * ARI , EscapeAnalysis * EA , DeadEndBlocks & DEBlocks)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/StackPromotion.cpp,"swift::createStackPromotion()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::OwnershipModelEliminatorVisitor( SILBuilder & B)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::beforeVisit( SILInstruction * I)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitSILInstruction( SILInstruction * I)",1, 64, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitBeginBorrowInst( BeginBorrowInst * BBI)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitEndBorrowInst( EndBorrowInst * EBI)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitEndLifetimeInst( EndLifetimeInst * ELI)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitUncheckedOwnershipConversionInst( UncheckedOwnershipConversionInst * UOCI)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitLoadInst( LoadInst * LI)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitStoreInst( StoreInst * SI)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitStoreBorrowInst( StoreBorrowInst * SI)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitLoadBorrowInst( LoadBorrowInst * LBI)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitCopyValueInst( CopyValueInst * CVI)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitUnmanagedRetainValueInst( UnmanagedRetainValueInst * URVI)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitUnmanagedReleaseValueInst( UnmanagedReleaseValueInst * URVI)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitUnmanagedAutoreleaseValueInst( UnmanagedAutoreleaseValueInst * UAVI)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitDestroyValueInst( DestroyValueInst * DVI)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitCheckedCastBranchInst( CheckedCastBranchInst * CBI)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitSwitchEnumInst( SwitchEnumInst * SWEI)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"splitDestructure( SILBuilder & B , SILInstruction * I , SILValue Op)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitDestructureStructInst( DestructureStructInst * DSI)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminatorVisitor::visitDestructureTupleInst( DestructureTupleInst * DTI)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"OwnershipModelEliminator::run()",41, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/OwnershipModelEliminator.cpp,"swift::createOwnershipModelEliminator()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"findDeallocStackInst( AllocStackInst * ASI)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"findDeallocRefInst( AllocRefInst * ARI)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"isComputeMaxStoreSet( DSEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"isBuildingGenKillSet( DSEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"isPerformingDSE( DSEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"isDeadStoreInertInstruction( SILInstruction * Inst)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"BlockState::BlockState( SILBasicBlock * B , unsigned LocationNum , bool Optimistic)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"BlockState::updateBBWriteSetIn( SmallBitVector & X)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"BlockState::startTrackingLocation( SmallBitVector & BV , unsigned i)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"BlockState::stopTrackingLocation( SmallBitVector & BV , unsigned i)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"BlockState::isTrackingLocation( SmallBitVector & BV , unsigned i)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::getBlockState( SILBasicBlock * B)",1, 74, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::getBlockState( SILInstruction * I)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::DSEContext( SILFunction * F , SILModule * M , SILPassManager * PM , AliasAnalysis * AA , TypeExpansionAnalysis * TE , EpilogueARCFunctionInfo * EAFI , llvm :: SpecificBumpPtrAllocator<BlockState> & BPA)",5, 68, 4, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::getLocationVault()",1, 72, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"BlockState::init( unsigned LocationNum , bool Optimistic)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::getLocationBit( const LSLocation & Loc)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::getProcessFunctionKind( unsigned StoreCount)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processBasicBlockForGenKillSet( SILBasicBlock * BB)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processBasicBlockWithGenKillSet( SILBasicBlock * BB)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processBasicBlockForDSE( SILBasicBlock * BB , bool Optimistic)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"BlockState::initStoreSetAtEndOfBlock( DSEContext & Ctx)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::mergeSuccessorLiveIns( SILBasicBlock * BB)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::invalidateBaseForGenKillSet( SILValue B , BlockState * S)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::invalidateBaseForDSE( SILValue B , BlockState * S)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::invalidateBase( SILValue B , BlockState * S , DSEKind Kind)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processReadForDSE( BlockState * S , unsigned bit)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processReadForGenKillSet( BlockState * S , unsigned bit)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processRead( SILInstruction * I , SILValue Mem , DSEKind Kind)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processWriteForDSE( BlockState * S , unsigned bit)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processWriteForGenKillSet( BlockState * S , unsigned bit)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processWriteForMaxStoreSet( BlockState * S , unsigned bit)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processWrite( SILInstruction * I , SILValue Val , SILValue Mem , DSEKind Kind)",123, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processLoadInst( SILInstruction * I , DSEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processStoreInst( SILInstruction * I , DSEKind Kind)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processDebugValueAddrInstForGenKillSet( SILInstruction * I)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processDebugValueAddrInstForDSE( SILInstruction * I)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processDebugValueAddrInst( SILInstruction * I , DSEKind Kind)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processUnknownReadInstForGenKillSet( SILInstruction * I)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processUnknownReadInstForDSE( SILInstruction * I)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processUnknownReadInst( SILInstruction * I , DSEKind Kind)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::processInstruction( SILInstruction * I , DSEKind Kind)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::runIterativeDSE()",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DSEContext::run()",82, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"DeadStoreElimination::run()",17, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/DeadStoreElimination.cpp,"swift::createDeadStoreElimination()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILLowerAggregateInstrs.cpp,"expandCopyAddr( CopyAddrInst * CA)",64, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILLowerAggregateInstrs.cpp,"expandDestroyAddr( DestroyAddrInst * DA)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILLowerAggregateInstrs.cpp,"expandReleaseValue( ReleaseValueInst * DV)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILLowerAggregateInstrs.cpp,"expandRetainValue( RetainValueInst * CV)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILLowerAggregateInstrs.cpp,"processFunction( SILFunction & Fn)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILLowerAggregateInstrs.cpp,"SILLowerAggregate::run()",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/SILLowerAggregateInstrs.cpp,"swift::createLowerAggregateInstrs()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ConditionForwarding.cpp,"ConditionForwarding::ConditionForwarding()",1, 27, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ConditionForwarding.cpp,"ConditionForwarding::run()",15, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ConditionForwarding.cpp,"hasNoRelevantSideEffects( SILBasicBlock * BB)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ConditionForwarding.cpp,"ConditionForwarding::tryOptimize( SwitchEnumInst * SEI)",143, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ConditionForwarding.cpp,"swift::createConditionForwarding()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"findAllocStackInst( DeallocStackInst * I)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"isComputeAvailSetMax( RLEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"isComputeAvailGenKillSet( RLEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"isComputeAvailValue( RLEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"isPerformingRLE( RLEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"isRLEInertInstruction( SILInstruction * Inst)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::init( SILBasicBlock * NewBB , unsigned bitcnt , bool optimistic)",34, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateForwardValOut()",1, 63, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateForwardSetOut()",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::getBB() const",1, 46, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::getForwardValIn()",1, 60, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::getForwardValOut()",1, 62, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::getRL()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::isCoverValues( RLEContext & Ctx , LSLocation & L)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::isConcreteValues( RLEContext & Ctx , LSLocation & L)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getFunction() const",1, 50, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getAA() const",1, 46, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getTE() const",1, 54, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getEAFI() const",1, 60, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getBM()",1, 56, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getBlockState( SILBasicBlock * B)",1, 74, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::isLoadInstToHandle( SILInstruction * Inst)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::startTrackingValue( ValueTableMap & VM , unsigned L , unsigned V)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::stopTrackingValue( ValueTableMap & VM , unsigned B)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::isTrackingLocation( SmallBitVector & BV , unsigned B)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::startTrackingLocation( SmallBitVector & BV , unsigned B)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::stopTrackingLocation( SmallBitVector & BV , unsigned B)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::mergePredecessorsAvailSetMax( RLEContext & Ctx)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::mergePredecessorAvailSet( RLEContext & Ctx)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::mergePredecessorAvailSetAndValue( RLEContext & Ctx)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processBasicBlockWithKind( RLEContext & Ctx , RLEKind Kind)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processBasicBlockWithGenKillSet()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::reduceValuesAtEndOfBlock( RLEContext & Ctx , LSLocation & L)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::setupRLE( RLEContext & Ctx , SILInstruction * I , SILValue Mem)",51, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateForwardSetForRead( RLEContext & Ctx , unsigned B)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateGenKillSetForRead( RLEContext & Ctx , unsigned B)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateForwardSetAndValForRead( RLEContext & Ctx , unsigned L , unsigned V)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateGenKillSetForWrite( RLEContext & Ctx , unsigned B)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateMaxAvailSetForWrite( RLEContext & Ctx , unsigned B)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateMaxAvailSetForRead( RLEContext & Ctx , unsigned B)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateForwardSetForWrite( RLEContext & Ctx , unsigned B)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::updateForwardSetAndValForWrite( RLEContext & Ctx , unsigned L , unsigned V)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processWrite( RLEContext & Ctx , SILInstruction * I , SILValue Mem , SILValue Val , RLEKind Kind)",56, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processRead( RLEContext & Ctx , SILInstruction * I , SILValue Mem , SILValue Val , RLEKind Kind)",61, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processStoreInst( RLEContext & Ctx , StoreInst * SI , RLEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processLoadInst( RLEContext & Ctx , LoadInst * LI , RLEKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processUnknownWriteInstForGenKillSet( RLEContext & Ctx , SILInstruction * I)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processUnknownWriteInstForRLE( RLEContext & Ctx , SILInstruction * I)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processUnknownWriteInst( RLEContext & Ctx , SILInstruction * I , RLEKind Kind)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processDeallocStackInstForGenKillSet( RLEContext & Ctx , DeallocStackInst * I)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processDeallocStackInstForRLE( RLEContext & Ctx , DeallocStackInst * I)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processDeallocStackInst( RLEContext & Ctx , DeallocStackInst * I , RLEKind Kind)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::processInstructionWithKind( RLEContext & Ctx , SILInstruction * Inst , RLEKind Kind)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getProcessFunctionKind( unsigned LoadCount , unsigned StoreCount)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::dump( RLEContext & Ctx)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::RLEContext( SILFunction * F , SILPassManager * PM , AliasAnalysis * AA , TypeExpansionAnalysis * TE , PostOrderFunctionInfo * PO , EpilogueARCFunctionInfo * EAFI , bool disableArrayLoads)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getLocation( const unsigned index)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getLocationBit( const LSLocation & Loc)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getValue( const unsigned index)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::getValueBit( const LSValue & Val)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"BlockState::getValueStateAtEndOfBlock( RLEContext & Ctx , LSLocation & L)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::computePredecessorLocationValue( SILBasicBlock * BB , LSLocation & L)",67, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::collectLocationValues( SILBasicBlock * BB , LSLocation & L , LSLocationValueMap & Values , ValueTableMap & VM)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::processBasicBlocksForGenKillSet()",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::processBasicBlocksWithGenKillSet()",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::processBasicBlocksForAvailValue()",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::processBasicBlocksForRLE( bool Optimistic)",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::runIterativeRLE()",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RLEContext::run()",101, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RedundantLoadElimination::RedundantLoadElimination( bool disableArrayLoads)",2, 47, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"RedundantLoadElimination::run()",15, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"swift::createEarlyRedundantLoadElimination()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,"swift::createRedundantLoadElimination()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"OutlinerMangler::OutlinerMangler( SILDeclRef Method , llvm :: BitVector * ParameterBridged , bool ReturnBridged)",4, 63, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"OutlinerMangler::OutlinerMangler( SILDeclRef Method , bool IsAddress)",4, 33, 8, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"OutlinerMangler::getMethodKindMangling()",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"OutlinerMangler::mangle()",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"OutlinePattern::OutlinePattern( SILOptFunctionBuilder & FuncBuilder)",1, 83, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"OutlinePattern::~OutlinePattern()",1, 31, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"getBridgeToObjectiveC( CanType NativeType , ModuleDecl * SwiftModule)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"getBridgeFromObjectiveC( CanType NativeType , ModuleDecl * SwiftModule)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedProperty::BridgedProperty( SILOptFunctionBuilder & FuncBuilder)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedProperty::~BridgedProperty()",1, 32, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedProperty::clearState()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedProperty::getOutlinedFunctionName()",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedProperty::getOutlinedFunctionType( SILModule & M)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedProperty::outline( SILModule & M)",98, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"matchSwitch( SwitchInfo & SI , SILInstruction * Inst , SILValue SwitchOperand)",107, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedProperty::matchMethodCall( SILBasicBlock :: iterator It)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedProperty::matchInstSequence( SILBasicBlock :: iterator It)",75, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedArgument::BridgedArgument( unsigned Idx , FunctionRefInst * F , ApplyInst * A , EnumInst * E , ReleaseValueInst * R0 , ReleaseValueInst * R1)",4, 45, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedArgument::BridgedArgument()",3, 77, 8, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedArgument::operator bool() const",1, 57, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedArgument::bridgedValue()",1, 71, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedArgument::transferTo( SILValue BridgedValue , ApplyInst * BridgedCall)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedArgument::eraseFromParent()",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedArgument::match( unsigned ArgIdx , SILValue Arg , ApplyInst * AI)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedReturn::match( ApplyInst * BridgedCall)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedReturn::operator bool()",1, 59, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedReturn::getReturnType()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"BridgedReturn::outline( SILFunction * Fun , ApplyInst * NewOutlinedCall)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"ObjCMethodCall::ObjCMethodCall( SILOptFunctionBuilder & FuncBuilder)",2, 39, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"ObjCMethodCall::~ObjCMethodCall()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"ObjCMethodCall::clearState()",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"ObjCMethodCall::outline( SILModule & M)",98, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"ObjCMethodCall::getOutlinedFunctionName()",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"ObjCMethodCall::matchInstSequence( SILBasicBlock :: iterator I)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"ObjCMethodCall::getOutlinedFunctionType( SILModule & M)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"OutlinePatterns::tryToMatch( SILBasicBlock :: iterator CurInst)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"OutlinePatterns::OutlinePatterns( SILOptFunctionBuilder & FuncBuilder)",3, 46, 8, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"OutlinePatterns::~OutlinePatterns()",1, 24, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"tryOutline( SILOptFunctionBuilder & FuncBuilder , SILFunction * Fun , SmallVectorImpl<SILFunction*> & FunctionsAdded)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"Outliner::Outliner()",1, 17, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"Outliner::run()",28, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/Outliner.cpp,"swift::createOutliner()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/UnsafeGuaranteedPeephole.cpp,"tryRemoveRetainReleasePairsBetween( RCIdentityFunctionInfo & RCFI , SILInstruction * UnsafeGuaranteedI , SILInstruction * Retain , SILInstruction * Release , SILInstruction * UnsafeGuaranteedEndI)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/UnsafeGuaranteedPeephole.cpp,"removeGuaranteedRetainReleasePairs( SILFunction & F , RCIdentityFunctionInfo & RCIA , PostDominanceAnalysis * PDA)",135, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/UnsafeGuaranteedPeephole.cpp,"UnsafeGuaranteedPeephole::run()",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/UnsafeGuaranteedPeephole.cpp,"swift::createUnsafeGuaranteedPeephole()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/MergeCondFail.cpp,"hasOverflowConditionOperand( CondFailInst * CFI)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/MergeCondFail.cpp,"MergeCondFailInsts::MergeCondFailInsts()",1, 26, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/MergeCondFail.cpp,"MergeCondFailInsts::run()",40, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/MergeCondFail.cpp,"MergeCondFailInsts::mergeCondFails( SmallVectorImpl<CondFailInst*> & CondFailToMerge)",31, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/MergeCondFail.cpp,"swift::createMergeCondFails()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/GenericSpecializer.cpp,"GenericSpecializer::run()",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/GenericSpecializer.cpp,"GenericSpecializer::specializeAppliesInFunction( SILFunction & F)",83, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/GenericSpecializer.cpp,"swift::createGenericSpecializer()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ReleaseDevirtualizer.cpp,"ReleaseDevirtualizer::ReleaseDevirtualizer()",1, 28, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ReleaseDevirtualizer.cpp,"ReleaseDevirtualizer::run()",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ReleaseDevirtualizer.cpp,"ReleaseDevirtualizer::devirtualizeReleaseOfObject( SILInstruction * ReleaseInst , DeallocRefInst * DeallocInst)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ReleaseDevirtualizer.cpp,"ReleaseDevirtualizer::createDeallocCall( SILType AllocType , SILInstruction * ReleaseInst , SILValue object)",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ReleaseDevirtualizer.cpp,"swift::createReleaseDevirtualizer()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"ObjectOutliner::isCOWType( SILType type)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"ObjectOutliner::ObjectOutliner( SILOptFunctionBuilder & FunctionBuilder , NominalTypeDecl * ArrayDecl)",3, 67, 6, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"ObjectOutliner::run( SILFunction * F)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"getFields( ClassDecl * Cl , SmallVectorImpl<VarDecl*> & Fields)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"isValidInitVal( SILValue V)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"ObjectOutliner::isValidUseOfObject( SILInstruction * I , bool isCOWObject , ApplyInst ** FindStringCall)",78, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"ObjectOutliner::handleTailAddr( int TailIdx , SILInstruction * TailAddr , llvm :: SmallVectorImpl<StoreInst*> & TailStores)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"ObjectOutliner::getObjectInitVals( SILValue Val , llvm :: DenseMap<VarDecl*,StoreInst*> & MemberStores , llvm :: SmallVectorImpl<StoreInst*> & TailStores , ApplyInst ** FindStringCall)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"GlobalVariableMangler::mangleOutlinedVariable( SILFunction * F , int & uniqueIdx)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"ObjectOutliner::optimizeObjectAllocation( AllocRefInst * ARI , llvm :: SmallVector<SILInstruction*,4> & ToRemove)",136, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"ObjectOutliner::replaceFindStringCall( ApplyInst * FindStringCall)",65, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"ObjectOutlinerPass::run()",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Transforms/ObjectOutliner.cpp,"swift::createObjectOutliner()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"isSupportedClosureKind( const SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"ClosureSpecCloner::ClosureSpecCloner( SILOptFunctionBuilder & FunctionBuilder , const CallSiteDescriptor & CallSiteDesc , StringRef ClonedName)",5, 38, 6, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"ClosureSpecCloner::getCloned()",1, 67, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"ClosureSpecCloner::cloneFunction( SILOptFunctionBuilder & FunctionBuilder , const CallSiteDescriptor & CallSiteDesc , StringRef NewName)",8, 5, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::CallSiteDescriptor( ClosureInfo * CInfo , FullApplySite AI , unsigned ClosureIndex , SILParameterInfo ClosureParamInfo , llvm :: TinyPtrVector<SILBasicBlock*> && NonFailureExitBBs)",6, 46, 6, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getApplyCallee() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getClosureCallee() const",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::closureHasRefSemanticContext() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getClosureIndex() const",1, 60, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getClosureCallerArg() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getClosureParameterInfo() const",1, 80, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::createNewClosure( SILBuilder & B , SILValue V , llvm :: SmallVectorImpl<SILValue> & Args) const",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getApplyInst() const",1, 52, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getArguments() const",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getNumArguments() const",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::isClosureGuaranteed() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::isClosureConsumed() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::isTrivialNoEscapeParameter() const",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getLoc() const",1, 64, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getModule() const",1, 58, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getNonFailureExitBBs() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"ClosureInfo::ClosureInfo( SingleValueInstruction * Closure)",1, 69, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::getClosure() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"isNonInoutIndirectSILArgument( SILValue Arg , SILArgumentConvention ArgConvention)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"rewriteApplyInst( const CallSiteDescriptor & CSDesc , SILFunction * NewF)",158, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::isSerialized() const",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::createName() const",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"CallSiteDescriptor::extendArgumentLifetime( SILValue Arg , SILArgumentConvention ArgConvention) const",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"isSupportedClosure( const SILInstruction * Closure)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"ClosureSpecCloner::initCloned( SILOptFunctionBuilder & FunctionBuilder , const CallSiteDescriptor & CallSiteDesc , StringRef ClonedName)",92, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"ClosureSpecCloner::cloneCalleeConversion( SILValue calleeValue , SILValue NewClosure , SILBuilder & Builder , SmallVectorImpl<PartialApplyInst*> & NeedsRelease)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"ClosureSpecCloner::populateCloned()",118, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"SILClosureSpecializerTransform::SILClosureSpecializerTransform()",1, 38, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"SILClosureSpecializerTransform::run()",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"markReabstractionPartialApplyAsUsed( SILValue FirstClosure , SILValue Current , llvm :: DenseSet<SingleValueInstruction*> & UsedReabstractionClosure)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"isClosureAppliedIn( SILFunction * Callee , unsigned closureArgIdx , SmallPtrSetImpl<SILFunction*> & HandledFuncs)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"canSpecializeFullApplySite( FullApplySiteKind kind)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"SILClosureSpecializerTransform::gatherCallSites( SILFunction * Caller , llvm :: SmallVectorImpl<std::unique_ptr<ClosureInfo>> & ClosureCandidates , llvm :: DenseSet<FullApplySite> & MultipleClosureAI)",186, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"SILClosureSpecializerTransform::specialize( SILFunction * Caller , std :: vector<SingleValueInstruction*> & PropagatedClosures)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/ClosureSpecializer.cpp,"swift::createClosureSpecializer()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::Entry::Entry( SILValue Value , VarDecl * Field)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::Entry::operator < <( raw_ostream & os , const Entry & entry)",11, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::isArrayType( SILType type)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::isArrayAddressType( SILType type)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::isTupleWithArray( CanType type)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::getFieldEntry( VarDecl * Field)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::getAddrEntry( SILValue value)",22, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::getValueEntry( SILValue value)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::setAddressEscapes( Entry * entry)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::setNotNative( Entry * entry)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::addDependency( Entry * from , Entry * to)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::GlobalPropertyOpt( SILModule & Module)",2, 39, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::canAddressEscape( SILValue V , bool acceptStore)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::scanInstruction( swift :: SILInstruction * Inst)",104, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::scanInstructions()",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::propagatePropertiesInGraph()",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::replacePropertyCalls()",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOpt::run( SILModuleTransform * T)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"GlobalPropertyOptPass::run()",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalPropertyOpt.cpp,"swift::createGlobalPropertyOpt()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"InitSequence::isValid() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"LetPropertiesOpt::LetPropertiesOpt( SILModule * M)",1, 47, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"InitSequenceCloner::InitSequenceCloner( const InitSequence & init , SILInstruction * destIP)",2, 81, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"InitSequenceCloner::process( SILInstruction * I)",1, 48, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"InitSequenceCloner::remapBasicBlock( SILBasicBlock * BB)",1, 67, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"InitSequenceCloner::getMappedValue( SILValue Value)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"InitSequenceCloner::postProcess( SILInstruction * orig , SILInstruction * cloned)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"InitSequenceCloner::clone()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"operator < <( raw_ostream & OS , const VarDecl & decl)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"LetPropertiesOpt::optimizeLetPropertyAccess( VarDecl * Property , const InitSequence & init)",108, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"isStructurallyIdentical( SILValue LHS , SILValue RHS)",16, 3, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"isSameInitSequence( const InitSequence & LHS , const InitSequence & RHS)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"isAssignableExternally( VarDecl * Property , SILModule * Module)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"mayHaveUnknownUses( VarDecl * Property , SILModule * Module)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"LetPropertiesOpt::isConstantLetProperty( VarDecl * Property)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"isProjectionOfProperty( SILValue addr , VarDecl * Property)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"LetPropertiesOpt::analyzeInitValue( SILInstruction * I , VarDecl * Property)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"LetPropertiesOpt::collectStructPropertiesAccess( StructInst * SI , bool NonRemovable)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"isValidPropertyLoad( SILInstruction * I)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"LetPropertiesOpt::collectPropertyAccess( SILInstruction * I , VarDecl * Property , bool NonRemovable)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"LetPropertiesOpt::run( SILModuleTransform * T)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"LetPropertiesOptPass::run()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/LetPropertiesOpts.cpp,"swift::createLetPropertiesOpt()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"getConstant( SILValue V)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"isOptimizableConstant( SILValue V)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"isConstant( SILValue V)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"getClonedName( PartialApplyInst * PAI , IsSerialized_t Serialized , SILFunction * F)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagationCloner::CapturePropagationCloner( SILFunction * OrigF , SILFunction * NewF , SubstitutionMap Subs)",3, 80, 6, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagationCloner::remapLocation( SILLocation InLoc)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagationCloner::postProcess( SILInstruction * Orig , SILInstruction * Cloned)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagationCloner::remapScope( const SILDebugScope * DS)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagationCloner::cloneConstValue( SILValue Val)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagationCloner::cloneClosure( OperandValueArrayRef PartialApplyArgs)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"getPartialApplyInterfaceResultType( PartialApplyInst * PAI)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagation::specializeConstClosure( PartialApplyInst * PAI , SILFunction * OrigF)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagation::rewritePartialApply( PartialApplyInst * OrigPAI , SILFunction * SpecialF)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"isProfitable( SILFunction * Callee)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"onlyContainsReturnOrThrowOfArg( SILBasicBlock * BB)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"getSpecializedWithDeadParams( SILOptFunctionBuilder & FuncBuilder , PartialApplyInst * PAI , SILFunction * Orig , int numDeadParams , std :: pair<SILFunction*,SILFunction*> & GenericSpecialized)",97, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagation::optimizePartialApply( PartialApplyInst * PAI)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"CapturePropagation::run()",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePropagation.cpp,"swift::createCapturePropagation()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"isTrivialReturnBlock( SILBasicBlock * RetBB)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"addReturnValueImpl( SILBasicBlock * RetBB , SILBasicBlock * NewRetBB , SILValue NewRetVal)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"addReturnValue( SILBasicBlock * NewRetBB , SILBasicBlock * OldRetBB , SILValue NewRetVal)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"addThrowValue( SILBasicBlock * NewThrowBB , SILValue NewErrorVal)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"emitApplyWithRethrow( SILBuilder & Builder , SILLocation Loc , SILValue FuncRef , CanSILFunctionType CanSILFuncTy , SubstitutionMap Subs , ArrayRef<SILValue> CallArgs , void(*EmitCleanup)(SILBuilder&,SILLocation))",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"emitInvocation( SILBuilder & Builder , const ReabstractionInfo & ReInfo , SILLocation Loc , SILFunction * CalleeFunc , ArrayRef<SILValue> CallArgs , void(*EmitCleanup)(SILBuilder&,SILLocation))",70, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"getThickMetatypeType( CanType Ty)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerDispatch::EagerDispatch( SILFunction * GenericFunc , const ReabstractionInfo & ReInfo)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerDispatch::emitDispatchTo( SILFunction * NewFunc)",88, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerDispatch::emitTypeCheck( SILBasicBlock * FailedTypeCheckBB , SubstitutableType * ParamTy , Type SubTy)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"getSingleSubstititutionMap( SILFunction * F , Type Ty)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerDispatch::emitIsTrivialCheck( SILBasicBlock * FailedTypeCheckBB , SubstitutableType * ParamTy , Type SubTy , LayoutConstraint Layout)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerDispatch::emitTrivialAndSizeCheck( SILBasicBlock * FailedTypeCheckBB , SubstitutableType * ParamTy , Type SubTy , LayoutConstraint Layout)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerDispatch::emitRefCountedObjectCheck( SILBasicBlock * FailedTypeCheckBB , SubstitutableType * ParamTy , Type SubTy , LayoutConstraint Layout)",63, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerDispatch::emitArgumentCast( CanSILFunctionType CalleeSubstFnTy , SILFunctionArgument * OrigArg , unsigned Idx)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerDispatch::emitArgumentConversion( SmallVectorImpl<SILValue> & CallArgs)",75, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerSpecializerTransform::EagerSpecializerTransform()",1, 33, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"eagerSpecialize( SILOptFunctionBuilder & FuncBuilder , SILFunction * GenericFunc , const SILSpecializeAttr & SA , const ReabstractionInfo & ReInfo)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"EagerSpecializerTransform::run()",63, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/EagerSpecializer.cpp,"swift::createEagerSpecializer()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::FuncImpl::FuncImpl( SILFunction * F , ClassDecl * Cl)",1, 64, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::FuncImpl::FuncImpl( SILFunction * F , RootProtocolConformance * C)",1, 76, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::MethodInfo::MethodInfo( bool isWitnessMethod)",2, 65, 6, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::MethodInfo::addClassMethodImpl( SILFunction * F , ClassDecl * C)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::MethodInfo::addWitnessFunction( SILFunction * F , RootProtocolConformance * Conf)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::isAnchorFunction( SILFunction * F)",18, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::getMethodInfo( AbstractFunctionDecl * decl , bool isWitnessMethod)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::isAlive( SILFunction * F)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::isAlive( SILWitnessTable * WT)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::makeAlive( SILFunction * F)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::makeAlive( SILWitnessTable * WT)",43, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::ensureKeyPathComponentIsAlive( const KeyPathPatternComponent & component)",50, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::ensureAlive( SILFunction * F)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::ensureAliveConformance( const ProtocolConformance * C)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::isDerivedOrEqual( ClassDecl * Derived , ClassDecl * Base)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::canHaveSameImplementation( FuncDecl * FD , ClassDecl * MethodCl , ClassDecl * ImplCl)",18, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::ensureAliveClassMethod( MethodInfo * mi , FuncDecl * FD , ClassDecl * MethodCl)",17, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::ensureAliveProtocolMethod( MethodInfo * mi)",17, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::getBase( AbstractFunctionDecl * FD)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::scanFunction( SILFunction * F)",34, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::isVisibleExternally( const ValueDecl * decl)",25, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::findAnchors()",17, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::FunctionLivenessComputation( SILModule * module)",2, 22, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::findAliveFunctions()",18, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"FunctionLivenessComputation::~FunctionLivenessComputation()",1, 44, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"DeadFunctionElimination::collectMethodImplementations()",51, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"DeadFunctionElimination::findAnchorsInTables()",92, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"DeadFunctionElimination::removeDeadEntriesFromTables()",51, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"DeadFunctionElimination::DeadFunctionElimination( SILModule * module)",2, 47, 6, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"DeadFunctionElimination::eliminateFunctions( SILModuleTransform * DFEPass)",43, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"SILDeadFuncElimination::run()",13, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"swift::createDeadFunctionElimination()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/DeadFunctionElimination.cpp,"swift::performSILDeadFunctionElimination( SILModule * M)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/UsePrespecialized.cpp,"collectApplyInst( SILFunction & F , llvm :: SmallVectorImpl<ApplySite> & NewApplies)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/UsePrespecialized.cpp,"UsePrespecialized::~UsePrespecialized()",1, 36, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/UsePrespecialized.cpp,"UsePrespecialized::run()",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/UsePrespecialized.cpp,"UsePrespecialized::replaceByPrespecialized( SILFunction & F)",98, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/UsePrespecialized.cpp,"swift::createUsePrespecialized()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::numBitWords( unsigned NumBlocks)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::ReachingBlockMatrix::ReachingBlockMatrix()",1, 61, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::ReachingBlockMatrix::empty() const",1, 41, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::allocateMatrix( unsigned NumBlocks)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::deallocateMatrix( ReachingBlockMatrix & M)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::allocateSet( unsigned NumBlocks)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::deallocateSet( ReachingBlockSet & S)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::ReachingBlockSet()",1, 56, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::ReachingBlockSet( unsigned BlockID , ReachingBlockMatrix & M)",3, 36, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::test( unsigned ID) const",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::set( unsigned ID)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::operator |=( const ReachingBlockSet & RHS)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::clear()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::operator ==( const ReachingBlockSet & RHS) const",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::operator !=( const ReachingBlockSet & RHS) const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachingBlockSet::operator =( const ReachingBlockSet & RHS)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachabilityInfo::ReachabilityInfo( SILFunction * f)",1, 45, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachabilityInfo::~ReachabilityInfo()",1, 70, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachabilityInfo::isComputed() const",1, 54, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::getCloned()",1, 67, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachabilityInfo::compute()",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ReachabilityInfo::isReachable( SILBasicBlock * From , SILBasicBlock * To)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::ClosureCloner( SILOptFunctionBuilder & FuncBuilder , SILFunction * Orig , IsSerialized_t Serialized , StringRef ClonedName , IndicesSet & PromotableIndices)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"computeNewArgInterfaceTypes( SILFunction * F , IndicesSet & PromotableIndices , SmallVectorImpl<SILParameterInfo> & OutTys)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"getSpecializedName( SILFunction * F , IsSerialized_t Serialized , IndicesSet & PromotableIndices)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::initCloned( SILOptFunctionBuilder & FunctionBuilder , SILFunction * Orig , IsSerialized_t Serialized , StringRef ClonedName , IndicesSet & PromotableIndices)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::populateCloned()",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::getProjectBoxMappedVal( SILValue Operand)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::visitDebugValueAddrInst( DebugValueAddrInst * Inst)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::visitStrongReleaseInst( StrongReleaseInst * Inst)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::visitDestroyValueInst( DestroyValueInst * Inst)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::visitStructElementAddrInst( StructElementAddrInst * Inst)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::visitProjectBoxInst( ProjectBoxInst * I)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::visitBeginAccessInst( BeginAccessInst * Inst)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::visitEndAccessInst( EndAccessInst * Inst)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::visitLoadBorrowInst( LoadBorrowInst * LI)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"ClosureCloner::visitLoadInst( LoadInst * LI)",44, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"getBoxFromIndex( SILFunction * F , unsigned Index)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"isNonMutatingLoad( SILInstruction * I)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"isNonMutatingCapture( SILArgument * BoxArg)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::NonEscapingUserVisitor( Operand * Op , llvm :: SmallVectorImpl<SILInstruction*> & Mutations)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::compute()",20, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::visitSILInstruction( SILInstruction * I)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::visitDeallocBoxInst( DeallocBoxInst * DBI)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::visitEndAccessInst( EndAccessInst * EAI)",1, 63, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::visitApplyInst( ApplyInst * AI)",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::addUserOperandsToWorklist( SingleValueInstruction * I)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::visitCopyAddrInst( CopyAddrInst * CAI)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::visitStoreInst( StoreInst * SI)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"NonEscapingUserVisitor::visitAssignInst( AssignInst * AI)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"isNonEscapingUse( Operand * InitialOp , EscapeMutationScanningState & State)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"isPartialApplyNonEscapingUser( Operand * CurrentOp , PartialApplyInst * PAI , EscapeMutationScanningState & State)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"isProjectBoxNonEscapingUse( ProjectBoxInst * PBI , EscapeMutationScanningState & State)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"scanUsesForEscapesAndMutations( Operand * Op , EscapeMutationScanningState & State)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"examineAllocBoxInst( AllocBoxInst * ABI , ReachabilityInfo & RI , llvm :: DenseMap<PartialApplyInst*,unsigned> & IM)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"constructClonedFunction( SILOptFunctionBuilder & FuncBuilder , PartialApplyInst * PAI , FunctionRefInst * FRI , IndicesSet & PromotableIndices)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"getOrCreateProjectBoxHelper( SILValue PartialOperand)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"processPartialApplyInst( SILOptFunctionBuilder & FuncBuilder , PartialApplyInst * PAI , IndicesSet & PromotableIndices , SmallVectorImpl<SILFunction*> & Worklist)",74, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"constructMapFromPartialApplyToPromotableIndices( SILFunction * F , PartialApplyIndicesMap & Map)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"CapturePromotionPass::run()",13, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"CapturePromotionPass::processFunction( SILFunction * F , SmallVectorImpl<SILFunction*> & Worklist)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/CapturePromotion.cpp,"swift::createCapturePromotion()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::SILGlobalOpt( SILOptFunctionBuilder & FunctionBuilder , SILModule * M , DominanceAnalysis * DA)",2, 63, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"InstructionsCloner::InstructionsCloner( SILFunction & F , ArrayRef<SILInstruction*> Insns , SILBasicBlock * Dest = nullptr)",4, 77, 4, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"InstructionsCloner::process( SILInstruction * I)",1, 48, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"InstructionsCloner::remapBasicBlock( SILBasicBlock * BB)",1, 67, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"InstructionsCloner::getMappedValue( SILValue Value)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"InstructionsCloner::postProcess( SILInstruction * Orig , SILInstruction * Cloned)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"InstructionsCloner::clone()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::collectGlobalInitCall( ApplyInst * AI)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::collectGlobalLoad( LoadInst * LI , SILGlobalVariable * SILG)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"removeToken( SILValue Op)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"mangleGetter( VarDecl * varDecl)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"getGlobalGetterFunction( SILOptFunctionBuilder & FunctionBuilder , SILModule & M , SILLocation loc , VarDecl * varDecl)",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"genGetterFromInit( SILOptFunctionBuilder & FunctionBuilder , StoreInst * Store , SILGlobalVariable * SILG)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::collectGlobalStore( StoreInst * SI , SILGlobalVariable * SILG)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::collectOnceCall( BuiltinInst * BI)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::isInLoop( SILBasicBlock * CurBB)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"isAvailabilityCheck( SILBasicBlock * BB)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"isAvailabilityCheckOnDomPath( SILBasicBlock * From , SILBasicBlock * To , DominanceInfo * DT)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::getHoistedApplyForInitializer( ApplyInst * AI , DominanceInfo * DT , SILFunction * InitF , SILFunction * ParentF , llvm :: DenseMap<SILFunction*,ApplyInst*> & ParentFuncs)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::placeInitializers( SILFunction * InitF , ArrayRef<ApplyInst*> Calls)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"genGetterFromInit( SILOptFunctionBuilder & FunctionBuilder , SILFunction * InitF , VarDecl * varDecl)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"isAssignedOnlyOnceInInitializer( SILGlobalVariable * SILG)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"convertLoadSequence( SILValue oldSequence , SILValue newRootValue , SILBuilder & B)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::replaceLoadsByKnownValue( BuiltinInst * CallToOnce , SILFunction * AddrF , SILFunction * InitF , SILGlobalVariable * SILG , SingleValueInstruction * InitVal , GlobalInitCalls & Calls)",71, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::optimizeInitializer( SILFunction * AddrF , GlobalInitCalls & Calls)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"canBeChangedExternally( SILGlobalVariable * SILG)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"getValidLoad( SILInstruction * I , SILValue V)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::collectGlobalAccess( GlobalAddrInst * GAI)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::optimizeGlobalAccess( SILGlobalVariable * SILG , StoreInst * SI)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOpt::run()",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"SILGlobalOptPass::run()",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/IPO/GlobalOpt.cpp,"swift::createGlobalOpt()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ConstantTracker::trackInst( SILInstruction * inst)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ConstantTracker::scanProjections( SILValue addr , SmallVectorImpl<Projection> * Result)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ConstantTracker::getStoredValue( SILInstruction * loadInst , ProjectionPath & projStack)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"getMember( SILInstruction * inst , ProjectionPath & projStack)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ConstantTracker::getDef( SILValue val , ProjectionPath & projStack)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ConstantTracker::getBuiltinConst( BuiltinInst * BI , int depth)",86, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ConstantTracker::getIntConst( SILValue val , int depth)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ConstantTracker::getTakenBlock( TermInst * term)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ShortestPathAnalysis::getEntryDistFromPreds( const SILBasicBlock * BB , int LoopDepth)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ShortestPathAnalysis::getExitDistFromSuccs( const SILBasicBlock * BB , int LoopDepth)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"detectLoopBypassPreheader( SILLoop * Loop)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ShortestPathAnalysis::analyzeLoopsRecursively( SILLoop * Loop , int LoopDepth)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ShortestPathAnalysis::getWeight( SILBasicBlock * BB , Weight CallerWeight)",65, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ShortestPathAnalysis::dump()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ShortestPathAnalysis::printFunction( llvm :: raw_ostream & OS)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ShortestPathAnalysis::printLoop( llvm :: raw_ostream & OS , SILLoop * Loop , int LoopDepth)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ShortestPathAnalysis::printBlockInfo( llvm :: raw_ostream & OS , SILBasicBlock * BB , int LoopDepth)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"ShortestPathAnalysis::Weight::updateBenefit( int & Benefit , int Importance) const",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"calleeIsSelfRecursive( SILFunction * Callee)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"calleeHasPartialApplyWithOpenedExistentials( FullApplySite AI)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"shouldSkipApplyDuringEarlyInlining( FullApplySite AI)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"isCallerAndCalleeLayoutConstraintsCompatible( FullApplySite AI)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"swift::getEligibleFunction( FullApplySite AI , InlineSelection WhatToInline)",125, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"hasInterestingSideEffect( SILInstruction * I)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"isConstantArg( Operand * Arg)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/PerformanceInlinerUtils.cpp,"swift::isPureCall( FullApplySite AI , SideEffectAnalysis * SEA)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"getTypeDepthAndWidth( Type t)",113, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"isTypeTooComplex( Type t)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"TypeComparator::isEqual( CanType T1 , CanType T2)",1, 60, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"TypeComparator::isStrictlyContainedIn( CanType T1 , CanType T2)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"TypeComparator::isPartiallyContainedIn( CanType T1 , CanType T2)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"TypeComparator::mismatch( TypeBase * firstType , TypeBase * secondType , Type sugaredFirstType)",12, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"growingSubstitutions( SubstitutionMap Subs1 , SubstitutionMap Subs2)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"createsInfiniteSpecializationLoop( ApplySite Apply)",75, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"shouldNotSpecialize( SILFunction * Callee , SILFunction * Caller , SubstitutionMap Subs = { })",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::prepareAndCheck( ApplySite Apply , SILFunction * Callee , SubstitutionMap ParamSubs , OptRemark :: Emitter * ORE)",134, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::canBeSpecialized( ApplySite Apply , SILFunction * Callee , SubstitutionMap ParamSubs)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::ReabstractionInfo( ApplySite Apply , SILFunction * Callee , SubstitutionMap ParamSubs , bool ConvertIndirectToDirect , OptRemark :: Emitter * ORE)",101, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::canBeSpecialized() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::isFullSpecialization() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::isPartialSpecialization() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::createSubstitutedAndSpecializedTypes()",71, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::createSubstitutedType( SILFunction * OrigF , SubstitutionMap SubstMap , bool HasUnboundGenericParams)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::createSpecializedType( CanSILFunctionType SubstFTy , SILModule & M) const",58, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"getGenericEnvironmentAndSignatureWithRequirements( GenericSignature * OrigGenSig , GenericEnvironment * OrigGenericEnv , ArrayRef<Requirement> Requirements , SILModule & M)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::performFullSpecializationPreparation( SILFunction * Callee , SubstitutionMap ParamSubs)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"hasNonSelfContainedRequirements( ArchetypeType * Archetype , GenericSignature * Sig , GenericEnvironment * Env)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"collectRequirements( ArchetypeType * Archetype , GenericSignature * Sig , GenericEnvironment * Env , SmallVectorImpl<Requirement> & CollectedReqs)",56, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"shouldBePartiallySpecialized( Type Replacement , GenericSignature * Sig , GenericEnvironment * Env)",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"swift::FunctionSignaturePartialSpecializer::FunctionSignaturePartialSpecializer( SILModule & M , GenericSignature * CallerGenericSig , GenericEnvironment * CallerGenericEnv , GenericSignature * CalleeGenericSig , GenericEnvironment * CalleeGenericEnv , SubstitutionMap ParamSubs)",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"swift::FunctionSignaturePartialSpecializer::FunctionSignaturePartialSpecializer( SILModule & M , GenericSignature * CalleeGenericSig , GenericEnvironment * CalleeGenericEnv , ArrayRef<Requirement> Requirements)",34, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"swift::FunctionSignaturePartialSpecializer::getSpecializedGenericSignature()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"swift::FunctionSignaturePartialSpecializer::getSpecializedGenericEnvironment()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::createGenericParam()",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::collectUsedCallerArchetypes( SubstitutionMap ParamSubs)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::computeCallerInterfaceToSpecializedInterfaceMap()",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::computeSpecializedInterfaceToCallerArchetypeMap()",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::computeCalleeInterfaceToSpecializedInterfaceMap()",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::createGenericParamsForUsedCallerArchetypes()",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::createGenericParamsForCalleeGenericParams()",101, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::addRequirements( ArrayRef<Requirement> Reqs , SubstitutionMap & SubsMap)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::addCallerRequirements()",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::addCalleeRequirements()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::getSpecializedGenericEnvironmentAndSignature()",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::computeClonerParamSubs()",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::getCallerParamSubs()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::computeCallerInterfaceSubs( SubstitutionMap & CallerInterfaceSubs)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::createSpecializedGenericSignatureWithNonGenericSubs()",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"FunctionSignaturePartialSpecializer::createSpecializedGenericSignature( SubstitutionMap ParamSubs)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::performPartialSpecializationPreparation( SILFunction * Caller , SILFunction * Callee , SubstitutionMap ParamSubs)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::finishPartialSpecializationPreparation( FunctionSignaturePartialSpecializer & FSPS)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"checkSpecializationRequirements( ArrayRef<Requirement> Requirements)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::ReabstractionInfo( SILFunction * Callee , ArrayRef<Requirement> Requirements)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"GenericFuncSpecializer::GenericFuncSpecializer( SILOptFunctionBuilder & FuncBuilder , SILFunction * GenericFunc , SubstitutionMap ParamSubs , IsSerialized_t Serialized , const ReabstractionInfo & ReInfo)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"GenericFuncSpecializer::lookupSpecialization()",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionInfo::verify() const",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"GenericFuncSpecializer::tryCreateSpecialization()",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"fixUsedVoidType( SILValue VoidVal , SILLocation Loc , SILBuilder & Builder)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"prepareCallArguments( ApplySite AI , SILBuilder & Builder , const ReabstractionInfo & ReInfo , SmallVectorImpl<SILValue> & Arguments , SILValue & StoreResultTo)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"getCalleeSubstFunctionType( SILValue Callee , SubstitutionMap Subs)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"replaceWithSpecializedCallee( ApplySite AI , SILValue Callee , SILBuilder & Builder , const ReabstractionInfo & ReInfo)",79, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"swift::replaceWithSpecializedFunction( ApplySite AI , SILFunction * NewF , const ReabstractionInfo & ReInfo)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionThunkGenerator::ReabstractionThunkGenerator( SILOptFunctionBuilder & FunctionBuilder , const ReabstractionInfo & ReInfo , PartialApplyInst * OrigPAI , SILFunction * SpecializedFunc)",26, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionThunkGenerator::createThunk()",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionThunkGenerator::createReabstractionThunkApply( SILBuilder & Builder)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"ReabstractionThunkGenerator::convertReabstractionThunkArguments( SILBuilder & Builder)",75, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"swift::trySpecializeApplyOfGeneric( SILOptFunctionBuilder & FuncBuilder , ApplySite Apply , DeadInstructionSet & DeadApplies , llvm :: SmallVectorImpl<SILFunction*> & NewFunctions , OptRemark :: Emitter & ORE)",167, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"linkSpecialization( SILModule & M , SILFunction * F)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"swift::isKnownPrespecialization( StringRef SpecName)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"lookupExistingSpecialization( SILModule & M , StringRef FunctionName)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Generics.cpp,"swift::lookupPrespecializedSymbol( SILModule & M , StringRef FunctionName)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoopUtils.cpp,"createInitialPreheader( SILBasicBlock * Header)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoopUtils.cpp,"insertPreheader( SILLoop * L , DominanceInfo * DT , SILLoopInfo * LI)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoopUtils.cpp,"insertBackedgeBlock( SILLoop * L , DominanceInfo * DT , SILLoopInfo * LI)",76, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoopUtils.cpp,"canonicalizeLoopExitBlocks( SILLoop * L , DominanceInfo * DT , SILLoopInfo * LI)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoopUtils.cpp,"swift::canonicalizeLoop( SILLoop * L , DominanceInfo * DT , SILLoopInfo * LI)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoopUtils.cpp,"swift::canonicalizeAllLoops( DominanceInfo * DT , SILLoopInfo * LI)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoopUtils.cpp,"SILLoopVisitor::run()",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Existential.cpp,"findInitExistentialFromGlobalAddr( GlobalAddrInst * GAI , SILInstruction * Insn)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Existential.cpp,"swift::findInitExistentialFromGlobalAddrAndCopyAddr( GlobalAddrInst * GAI , CopyAddrInst * CAI)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Existential.cpp,"swift::findInitExistentialFromGlobalAddrAndApply( GlobalAddrInst * GAI , ApplySite Apply , int ArgIdx)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Existential.cpp,"swift::getAddressOfStackInit( SILValue allocStackAddr , SILInstruction * ASIUser , bool & isCopied)",85, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Existential.cpp,"swift::findInitExistential( Operand & openedUse , ArchetypeType * & OpenedArchetype , SILValue & OpenedArchetypeDef , bool & isCopied)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Existential.cpp,"ConcreteExistentialInfo::ConcreteExistentialInfo( Operand & openedUse)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Existential.cpp,"ConcreteExistentialInfo::ConcreteExistentialInfo( Operand & ArgOperand , CanType ConcreteTy , ProtocolDecl * Protocol)",63, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"removeLSLocations( LSLocationValueMap & Values , LSLocationList & NextLevel)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSValue::expand( SILValue Base , SILModule * M , LSValueList & Vals , TypeExpansionAnalysis * TE)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSValue::reduceInner( LSLocation & Base , SILModule * M , LSLocationValueMap & Values , SILInstruction * InsertPt)",85, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSValue::reduce( LSLocation & Base , SILModule * M , LSLocationValueMap & Values , SILInstruction * InsertPt)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSLocation::isMustAliasLSLocation( const LSLocation & RHS , AliasAnalysis * AA)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSLocation::isMayAliasLSLocation( const LSLocation & RHS , AliasAnalysis * AA)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSLocation::getNextLevelLSLocations( LSLocationList & Locs , SILModule * Mod)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSLocation::expand( LSLocation Base , SILModule * M , LSLocationList & Locs , TypeExpansionAnalysis * TE)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"getSubLocations( LSLocationList & SubLocations , LSLocation Base , SILModule * M , const LSLocationList & Locs)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"replaceSubLocations( LSLocation Base , SILModule * M , LSLocationList & Locs , const LSLocationList & SubLocations)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSLocation::reduce( LSLocation Base , SILModule * M , LSLocationList & Locs)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSLocation::enumerateLSLocation( SILModule * M , SILValue Mem , std :: vector<LSLocation> & Locations , LSLocationIndexMap & IndexMap , LSLocationBaseMap & BaseMap , TypeExpansionAnalysis * TypeCache)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/LoadStoreOptUtils.cpp,"LSLocation::enumerateLSLocations( SILFunction & F , std :: vector<LSLocation> & Locations , LSLocationIndexMap & IndexMap , LSLocationBaseMap & BaseMap , TypeExpansionAnalysis * TypeCache , std :: pair<int,int> & LSCount)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"swift::constantFoldBitOperation( APInt lhs , APInt rhs , BuiltinValueKind ID)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"swift::constantFoldComparison( APInt lhs , APInt rhs , BuiltinValueKind ID)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"swift::constantFoldBinaryWithOverflow( APInt lhs , APInt rhs , bool & Overflow , llvm :: Intrinsic :: ID ID)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"swift::constantFoldDiv( APInt lhs , APInt rhs , bool & Overflow , BuiltinValueKind ID)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"swift::constantFoldCast( APInt val , const BuiltinInfo & BI)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"diagnose( ASTContext & Context , SourceLoc loc , Diag<T...> diag , U && ... args)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constructResultWithOverflowTuple( BuiltinInst * BI , APInt Res , bool Overflow)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constantFoldBinaryWithOverflow( BuiltinInst * BI , llvm :: Intrinsic :: ID ID , bool ReportOverflow , Optional<bool> & ResultsInError)",100, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constantFoldBinaryWithOverflow( BuiltinInst * BI , BuiltinValueKind ID , Optional<bool> & ResultsInError)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constantFoldIntrinsic( BuiltinInst * BI , llvm :: Intrinsic :: ID ID , Optional<bool> & ResultsInError)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constantFoldCompare( BuiltinInst * BI , BuiltinValueKind ID)",170, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constantFoldAndCheckDivision( BuiltinInst * BI , BuiltinValueKind ID , Optional<bool> & ResultsInError)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constantFoldBinary( BuiltinInst * BI , BuiltinValueKind ID , Optional<bool> & ResultsInError)",96, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constantFoldAndCheckIntegerConversions( BuiltinInst * BI , const BuiltinInfo & Builtin , Optional<bool> & ResultsInError)",160, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"tryExtractLiteralText( FloatLiteralInst * flitInst , SmallString<N> & fpStr)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"foldFPToIntConversion( BuiltinInst * BI , const BuiltinInfo & Builtin , Optional<bool> & ResultsInError)",67, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"IEEESemantics::IEEESemantics( uint8_t bits , uint8_t expBits , uint8_t sigBits , bool explicitIntPart)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"getFPSemantics( BuiltinFloatType * fpType)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"isLossyUnderflow( int srcExponent , uint64_t srcSignificand , IEEESemantics srcSem , IEEESemantics destSem)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"isLossyUnderflow( APFloat srcVal , BuiltinFloatType * srcType , BuiltinFloatType * destType)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"isHexLiteralInSource( FloatLiteralInst * flitInst)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"maybeExplicitFPCons( BuiltinInst * BI , const BuiltinInfo & Builtin)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"foldFPTrunc( BuiltinInst * BI , const BuiltinInfo & Builtin , Optional<bool> & ResultsInError)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constantFoldBuiltin( BuiltinInst * BI , Optional<bool> & ResultsInError)",147, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"constantFoldInstruction( SILInstruction & I , Optional<bool> & ResultsInError)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"isApplyOfBuiltin( SILInstruction & I , BuiltinValueKind kind)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"isApplyOfStringConcat( SILInstruction & I)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"isFoldable( SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"ConstantFolder::constantFoldStringConcatenation( ApplyInst * AI)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"ConstantFolder::initializeWorklist( SILFunction & F)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstantFolding.cpp,"ConstantFolder::processWorkList()",241, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"getIndexForKind( SILInstructionKind kind)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"InstructionCounts::InstructionCounts()",1, 35, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"InstructionCounts::operator [ ]( SILInstructionKind kind)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"InstructionCounts::addAll( const InstructionCounts & other)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"InstructionCounts::subAll( const InstructionCounts & other)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"StatsOnlyInstructionsOpt::StatsOnlyInstructionsOpt()",1, 42, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"StatsOnlyInstructionsOpt::operator =( StringRef val)",22, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"StatsOnlyInstructionsOpt::shouldComputeInstCount( SILInstructionKind kind) const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"StatsOnlyInstructionsOpt::getInstCountsNum() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"FunctionStat::FunctionStat()",1, 20, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"FunctionStat::print( llvm :: raw_ostream & stream) const",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"FunctionStat::operator ==( const FunctionStat & rhs) const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"FunctionStat::operator !=( const FunctionStat & rhs) const",1, 77, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"FunctionStat::dump()",1, 39, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"ModuleStat::ModuleStat()",1, 18, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"ModuleStat::addFunctionStat( FunctionStat & Stat)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"ModuleStat::subFunctionStat( FunctionStat & Stat)",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"ModuleStat::addMemoryStat()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"ModuleStat::addCreatedAndDeletedInstructionsStat()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"ModuleStat::print( llvm :: raw_ostream & stream) const",8, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"ModuleStat::dump()",1, 39, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"ModuleStat::operator ==( const ModuleStat & rhs) const",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"ModuleStat::operator !=( const ModuleStat & rhs) const",1, 75, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"InstCountVisitor::InstCountVisitor( InstructionCounts & InstCounts)",1, 78, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"InstCountVisitor::getBlockCount() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"InstCountVisitor::getInstCount() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"InstCountVisitor::visitSILBasicBlock( SILBasicBlock * BB)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"InstCountVisitor::visit( SILInstruction * I)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"TransformationContext::TransformationContext( SILModule & M , SILPassManager & PM , SILTransform * Transform , int PassNumber , int Duration)",4, 34, 8, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"TransformationContext::getPassNumber() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"TransformationContext::getDuration() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"TransformationContext::getTransformId() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"TransformationContext::getStageName() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"TransformationContext::getModule()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"TransformationContext::getPassManager()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"AccumulatedOptimizerStats::getFunctionStat( const SILFunction * F)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"AccumulatedOptimizerStats::getModuleStat()",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"AccumulatedOptimizerStats::deleteFunctionStat( SILFunction * F)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::OptimizerStatsAnalysis( SILModule * M)",2, 79, 6, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::classof( const SILAnalysis * S)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::invalidate()",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::invalidate( SILFunction * F , InvalidationKind K)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::notifyAddedOrModifiedFunction( SILFunction * F)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::notifyWillDeleteFunction( SILFunction * F)",3, 5, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::invalidateFunctionTables()",2, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::getModule() const",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::getFunctionStat( const SILFunction * F)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::getModuleStat()",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"NewLineInserter::NewLineInserter()",1, 23, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"NewLineInserter::get()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"stats_os()",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"printCounterValue( StringRef Kind , StringRef CounterName , int CounterValue , StringRef Symbol , TransformationContext & Ctx)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"printCounterChange( StringRef Kind , StringRef CounterName , double Delta , int OldValue , int NewValue , TransformationContext & Ctx , StringRef Symbol = "")",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"isMatchingFunction( SILFunction * F , bool shouldHaveNamePattern = false)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"computeDelta( int Old , int New)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"isFirstTimeData( int Old , int New)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"processFuncStatHistory( SILFunction * F , FunctionStat & Stat , TransformationContext & Ctx)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"processFuncStatsChanges( SILFunction * F , FunctionStat & OldStat , FunctionStat & NewStat , TransformationContext & Ctx)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"processModuleStatsChanges( ModuleStat & OldStat , ModuleStat & NewStat , TransformationContext & Ctx)",99, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"OptimizerStatsAnalysis::updateModuleStats( TransformationContext & Ctx)",85, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"FunctionStat::FunctionStat( SILFunction * F)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"swift::updateSILModuleStatsAfterTransform( SILModule & M , SILTransform * Transform , SILPassManager & PM , int PassNumber , int Duration)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"swift::updateSILModuleStatsBeforeTransform( SILModule & M , SILTransform * Transform , SILPassManager & PM , int PassNumber)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/OptimizerStatsUtils.cpp,"swift::createOptimizerStatsAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::createIncrementBefore( SILValue Ptr , SILInstruction * InsertPt)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::createDecrementBefore( SILValue Ptr , SILInstruction * InsertPt)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::isInstructionTriviallyDead( SILInstruction * I)",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::isIntermediateRelease( SILInstruction * I , EpilogueARCFunctionInfo * EAFI)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::recursivelyDeleteTriviallyDeadInstructions( ArrayRef<SILInstruction*> IA , bool Force , CallbackTy Callback)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::recursivelyDeleteTriviallyDeadInstructions( ArrayRef<SILInstruction*> IA , SILBasicBlock :: iterator & InstIter , bool Force , CallbackTy Callback)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::recursivelyDeleteTriviallyDeadInstructions( SILInstruction * I , bool Force , CallbackTy Callback)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::eraseUsesOfInstruction( SILInstruction * Inst , CallbackTy Callback)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::collectUsesOfValue( SILValue V , llvm :: SmallPtrSetImpl<SILInstruction*> & Insts)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::eraseUsesOfValue( SILValue V)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::findApplyFromDevirtualizedResult( SILValue V)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::mayBindDynamicSelf( SILFunction * F)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"skipAddrProjections( SILValue V)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::isAddressOfArrayElement( SILValue addr)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::placeFuncRef( ApplyInst * AI , DominanceInfo * DT)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::addArgumentToBranch( SILValue Val , SILBasicBlock * Dest , TermInst * Branch)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::getSpecializedLinkage( SILFunction * F , SILLinkage L)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::clearBlockBody( SILBasicBlock * BB)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::removeDeadBlock( SILBasicBlock * BB)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::castValueToABICompatibleType( SILBuilder * B , SILLocation Loc , SILValue Value , SILType SrcTy , SILType DestTy)",144, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::getOrCreateProjectBox( AllocBoxInst * ABI , unsigned Index)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::findInitAddressForTrivialEnum( UncheckedTakeEnumDataAddrInst * UTEDAI)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StringConcatenationOptimizer::StringConcatenationOptimizer( ApplyInst * AI , SILBuilder & Builder)",2, 36, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StringConcatenationOptimizer::extractStringConcatOperands()",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StringConcatenationOptimizer::adjustEncodings()",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StringConcatenationOptimizer::getConcatenatedLength()",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StringConcatenationOptimizer::isAscii() const",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StringConcatenationOptimizer::optimize()",44, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::tryToConcatenateStrings( ApplyInst * AI , SILBuilder & B)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"useDoesNotKeepClosureAlive( const SILInstruction * I)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"useHasTransitiveOwnership( const SILInstruction * I)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"createLifetimeExtendedAllocStack( SILBuilder & Builder , SILLocation Loc , SILValue Arg , ArrayRef<SILBasicBlock*> ExitingBlocks , InstModCallbacks Callbacks)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"shouldDestroyPartialApplyCapturedArg( SILValue Arg , SILParameterInfo PInfo , SILModule & M)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::releasePartialApplyCapturedArg( SILBuilder & Builder , SILLocation Loc , SILValue Arg , SILParameterInfo PInfo , InstModCallbacks Callbacks)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"releaseCapturedArgsOfDeadPartialApply( PartialApplyInst * PAI , ReleaseTracker & Tracker , InstModCallbacks Callbacks)",64, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::tryDeleteDeadClosure( SingleValueInstruction * Closure , InstModCallbacks Callbacks)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"ValueLifetimeAnalysis::propagateLiveness()",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"ValueLifetimeAnalysis::findLastUserInBlock( SILBasicBlock * BB)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"ValueLifetimeAnalysis::computeFrontier( Frontier & Fr , Mode mode , DeadEndBlocks * DEBlocks)",103, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"ValueLifetimeAnalysis::isWithinLifetime( SILInstruction * Inst)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"ValueLifetimeAnalysis::dump() const",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"BasicBlockCloner::splitCriticalEdges( DominanceInfo * DT , SILLoopInfo * LI)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::simplifyUsers( SingleValueInstruction * I)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::shouldExpand( SILModule & Module , SILType Ty)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::isSimpleType( SILType SILTy , SILModule & Module)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StaticInitializerAnalysis::StaticInitializerAnalysis( SmallVectorImpl<SILInstruction*> & postOrderInstructions)",3, 56, 6, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StaticInitializerAnalysis::analyze( SILValue RootValue)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StaticInitializerAnalysis::recursivelyAnalyzeOperand( SILValue V)",20, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StaticInitializerAnalysis::recursivelyAnalyzeInstruction( SILInstruction * I)",33, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::analyzeStaticInitializer( SILValue V , SmallVectorImpl<SILInstruction*> & forwardInstructions)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::replaceLoadSequence( SILInstruction * I , SILValue Value , SILBuilder & B)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::calleesAreStaticallyKnowable( SILModule & M , SILDeclRef Decl)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StaticInitCloner::add( SILInstruction * InitVal)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"StaticInitCloner::clone( SingleValueInstruction * InitVal)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Local.cpp,"swift::findLocalApplySites( FunctionRefBaseInst * FRI)",69, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"isBridgingCast( CanType SourceType , CanType TargetType)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"getCastFromObjC( SILModule & M , CanType source , CanType target)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::optimizeBridgedObjCToSwiftCast( SILInstruction * Inst , bool isConditional , SILValue Src , SILValue Dest , CanType Source , CanType Target , Type BridgedSourceTy , Type BridgedTargetTy , SILBasicBlock * SuccessBB , SILBasicBlock * FailureBB)",219, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"canOptimizeCast( const swift :: Type & BridgedTargetTy , swift :: SILModule & M , swift :: SILFunctionConventions & substConv)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::optimizeBridgedSwiftToObjCCast( SILInstruction * Inst , CastConsumptionKind ConsumptionKind , bool isConditional , SILValue Src , SILValue Dest , CanType Source , CanType Target , Type BridgedSourceTy , Type BridgedTargetTy , SILBasicBlock * SuccessBB , SILBasicBlock * FailureBB)",282, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::optimizeBridgedCasts( SILInstruction * Inst , CastConsumptionKind ConsumptionKind , bool isConditional , SILValue Src , SILValue Dest , CanType source , CanType target , SILBasicBlock * SuccessBB , SILBasicBlock * FailureBB)",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::simplifyCheckedCastAddrBranchInst( CheckedCastAddrBranchInst * Inst)",122, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::simplifyCheckedCastBranchInst( CheckedCastBranchInst * Inst)",111, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::simplifyCheckedCastValueBranchInst( CheckedCastValueBranchInst * Inst)",87, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::optimizeCheckedCastAddrBranchInst( CheckedCastAddrBranchInst * Inst)",75, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::optimizeCheckedCastValueBranchInst( CheckedCastValueBranchInst * Inst)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::optimizeCheckedCastBranchInst( CheckedCastBranchInst * Inst)",160, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::optimizeUnconditionalCheckedCastInst( UnconditionalCheckedCastInst * Inst)",87, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::deleteInstructionsAfterUnreachable( SILInstruction * UnreachableInst , SILInstruction * TrapInst)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"optimizeStaticallyKnownProtocolConformance( UnconditionalCheckedCastAddrInst * Inst)",79, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CastOptimizer.cpp,"CastOptimizer::optimizeUnconditionalCheckedCastAddrInst( UnconditionalCheckedCastAddrInst * Inst)",119, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"allocatesStackAcrossYields( SILFunction * F)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"isEndOfApply( SILInstruction * i , BeginApplyInst * beginApply)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"hasStackDifferencesAtEnds( BeginApplyInst * apply)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"canInlineBeginApply( BeginApplyInst * BA)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInliner::canInlineApplySite( FullApplySite apply)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::BeginApplySite::BeginApplySite( BeginApplyInst * BeginApply , SILLocation Loc , SILBuilder * Builder , bool NeedsStackCorrection)",4, 54, 8, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::BeginApplySite::get( FullApplySite AI , SILLocation Loc , SILBuilder * Builder)",22, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::BeginApplySite::preprocess( SILBasicBlock * returnToBB)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::BeginApplySite::collectEndApply( EndApplyInst * End)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::BeginApplySite::collectAbortApply( AbortApplyInst * Abort)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::BeginApplySite::processTerminator( TermInst * terminator , SILBasicBlock * returnToBB , llvm :: function_ref<SILBasicBlock*(SILBasicBlock*)> remapBlock , llvm :: function_ref<SILValue(SILValue)> getMappedValue)",59, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::BeginApplySite::complete()",36, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::SILInlineCloner::getCalleeFunction() const",1, 63, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::SILInlineCloner::postProcess( SILInstruction * Orig , SILInstruction * Cloned)",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::SILInlineCloner::remapLocation( SILLocation InLoc)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::SILInlineCloner::remapScope( const SILDebugScope * DS)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInliner::inlineFunction( SILFunction * calleeFunction , FullApplySite apply , ArrayRef<SILValue> appliedArgs)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInlineCloner::SILInlineCloner( SILFunction * calleeFunction , FullApplySite apply , SILOptFunctionBuilder & funcBuilder , InlineKind inlineKind , SubstitutionMap applySubs , SILOpenedArchetypesTracker & openedArchetypesTracker , SILInliner :: DeletionFuncTy deletionCallback)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInlineCloner::cloneInline( ArrayRef<SILValue> AppliedArgs)",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInlineCloner::visitTerminator( SILBasicBlock * BB)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInlineCloner::fixUp( SILFunction * calleeFunction)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInlineCloner::borrowFunctionArgument( SILValue callArg , FullApplySite AI)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInlineCloner::visitDebugValueInst( DebugValueInst * Inst)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInlineCloner::visitDebugValueAddrInst( DebugValueAddrInst * Inst)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"SILInlineCloner::getOrCreateInlineScope( const SILDebugScope * CalleeScope)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"getEnforcementCost( SILAccessEnforcement enforcement)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILInliner.cpp,"swift::instructionInlineCost( SILInstruction & I)",245, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::ConstExprFunctionState( ConstExprEvaluator & evaluator , SILFunction * fn , SubstitutionMap substitutionMap , unsigned & numInstEvaluated)",5, 46, 6, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::setValue( SILValue value , SymbolicValue symVal)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::createMemoryObject( SILValue addr , SymbolicValue initialValue)",9, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::substituteGenericParamsAndSimpify( CanType ty)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::substituteGenericParamsAndSimpify( Type ty)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::computeConstantValue( SILValue value)",113, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::computeConstantValueBuiltin( BuiltinInst * inst)",235, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::computeOpaqueCallResult( ApplyInst * apply , SILFunction * callee)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::computeCallResult( ApplyInst * apply)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::getConstantValue( SILValue value)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"updateIndexedElement( SymbolicValue & aggregate , ArrayRef<unsigned> indices , SymbolicValue newElement , Type type , bool writeOnlyOnce , ASTContext & astContext)",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::getConstAddrAndLoadResult( SILValue addr)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::loadAddrValue( SILValue addr , SymbolicValue addrVal)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::computeFSStore( SymbolicValue storedCst , SILValue dest)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprFunctionState::evaluateFlowSensitive( SILInstruction * inst)",70, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"evaluateAndCacheCall( SILFunction & fn , SubstitutionMap substitutionMap , ArrayRef<SymbolicValue> arguments , SmallVectorImpl<SymbolicValue> & results , unsigned & numInstEvaluated , ConstExprEvaluator & evaluator)",117, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprEvaluator::ConstExprEvaluator( SILModule & m)",2, 39, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprEvaluator::~ConstExprEvaluator()",1, 45, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprEvaluator::getUnknown( SILNode * node , UnknownReason reason)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/ConstExpr.cpp,"ConstExprEvaluator::computeConstantValues( ArrayRef<SILValue> values , SmallVectorImpl<SymbolicValue> & results)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::Edit::Edit( SILBasicBlock * CCBBlock , bool InvertSuccess , const PredList & SuccessPreds , const PredList & FailurePreds , bool hasUnknownPreds , SILValue SuccessArg)",7, 43, 6, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::CheckedCastBrJumpThreading( SILFunction * Fn , DominanceInfo * DT , SmallVectorImpl<SILBasicBlock*> & BlocksForWorklist)",3, 65, 9, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"basicBlockInlineCost( SILBasicBlock * BB , unsigned Cutoff)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"canDuplicateBlock( SILBasicBlock * BB)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::classifyPredecessor( SILBasicBlock * Pred , bool SuccessDominates , bool FailureDominates)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::isArgValueEquivalentToCondition( SILValue Value , SILBasicBlock * DomBB , SILValue DomValue , DominanceInfo * DT)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::Edit::modifyCFGForUnknownPreds()",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::Edit::modifyCFGForFailurePreds( Optional<BasicBlockCloner> & Cloner)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::Edit::modifyCFGForSuccessPreds( Optional<BasicBlockCloner> & Cloner)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::handleArgBBIsEntryBlock( SILBasicBlock * ArgBB , CheckedCastBranchInst * DomCCBI)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::checkCloningConstraints()",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::areEquivalentConditionsAlongSomePaths( CheckedCastBranchInst * DomCCBI , SILValue DomCondition)",76, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::areEquivalentConditionsAlongPaths( CheckedCastBranchInst * DomCCBI)",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::trySimplify( CheckedCastBranchInst * CCBI)",149, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"CheckedCastBrJumpThreading::optimizeFunction()",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CheckedCastBrJumpThreading.cpp,"swift::tryCheckedCastBrJumpThreading( SILFunction * Fn , DominanceInfo * DT , SmallVectorImpl<SILBasicBlock*> & BlocksForWorklist)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::addNewEdgeValueToBranch( TermInst * Branch , SILBasicBlock * Dest , SILValue Val)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::changeEdgeValue( TermInst * Branch , SILBasicBlock * Dest , size_t Idx , SILValue Val)",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"replaceSwitchDest( SwitchEnumTy * S , SmallVectorImpl<SwitchEnumCaseTy> & Cases , unsigned EdgeIdx , SILBasicBlock * NewDest)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"replaceSwitchDest( SwitchEnumTy * S , SmallVectorImpl<SwitchEnumCaseTy> & Cases , SILBasicBlock * OldDest , SILBasicBlock * NewDest)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::replaceBranchTarget( TermInst * T , SILBasicBlock * OldDest , SILBasicBlock * NewDest , bool PreserveArgs)",138, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::isCriticalEdge( TermInst * T , unsigned EdgeIdx)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::splitBasicBlockAndBranch( SILBuilder & B , SILInstruction * SplitBeforeInst , DominanceInfo * DT , SILLoopInfo * LI)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::splitEdgesFromTo( SILBasicBlock * From , SILBasicBlock * To , DominanceInfo * DT , SILLoopInfo * LI)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::splitCriticalEdge( TermInst * T , unsigned EdgeIdx , DominanceInfo * DT , SILLoopInfo * LI)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::splitCriticalEdgesFrom( SILBasicBlock * fromBB , DominanceInfo * DT , SILLoopInfo * LI)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::hasCriticalEdges( SILFunction & F , bool OnlyNonCondBr)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::splitAllCriticalEdges( SILFunction & F , DominanceInfo * DT , SILLoopInfo * LI)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::mergeBasicBlockWithSuccessor( SILBasicBlock * BB , DominanceInfo * DT , SILLoopInfo * LI)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::mergeBasicBlocks( SILFunction * F)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::splitIfCriticalEdge( SILBasicBlock * From , SILBasicBlock * To , DominanceInfo * DT , SILLoopInfo * LI)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::completeJointPostDominanceSet( ArrayRef<SILBasicBlock*> UserBlocks , ArrayRef<SILBasicBlock*> DefBlocks , llvm :: SmallVectorImpl<SILBasicBlock*> & Result)",81, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::splitAllCondBrCriticalEdgesWithNonTrivialArgs( SILFunction & Fn , DominanceInfo * DT , SILLoopInfo * LI)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"RemoveUnreachable::RemoveUnreachable( SILFunction & Fn)",1, 52, 4, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"RemoveUnreachable::visit( SILBasicBlock * BB)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"RemoveUnreachable::run()",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/CFG.cpp,"swift::removeUnreachableBlocks( SILFunction & Fn)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"SpecializationMangler::beginMangling()",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"AttributeDemangler::demangleAndAddAsChildren( StringRef MangledSpecialization , NodePointer Parent)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"SpecializationMangler::finalize()",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"GenericSpecializationMangler::mangle( GenericSignature * Sig)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"PartialSpecializationMangler::mangle()",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::FunctionSignatureSpecializationMangler( Demangle :: SpecializationPass P , IsSerialized_t Serialized , SILFunction * F)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentDead( unsigned OrigArgIdx)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentClosureProp( unsigned OrigArgIdx , PartialApplyInst * PAI)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentClosureProp( unsigned OrigArgIdx , ThinToThickFunctionInst * TTTFI)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentConstantProp( unsigned OrigArgIdx , LiteralInst * LI)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentOwnedToGuaranteed( unsigned OrigArgIdx)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentSROA( unsigned OrigArgIdx)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentGuaranteedToOwned( unsigned OrigArgIdx)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentExistentialToGeneric( unsigned OrigArgIdx)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentBoxToValue( unsigned OrigArgIdx)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setArgumentBoxToStack( unsigned OrigArgIdx)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::setReturnValueOwnedToUnowned()",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::mangleConstantProp( LiteralInst * LI)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::mangleClosureProp( SILInstruction * Inst)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::mangleArgument( ArgumentModifierIntBase ArgMod , NullablePtr<SILInstruction> Inst)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::mangleReturnValue( ReturnValueModifierIntBase RetMod)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SpecializationMangler.cpp,"FunctionSignatureSpecializationMangler::mangle()",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/GenericCloner.cpp,"GenericCloner::initCloned( SILOptFunctionBuilder & FunctionBuilder , SILFunction * Orig , IsSerialized_t Serialized , const ReabstractionInfo & ReInfo , StringRef NewName)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/GenericCloner.cpp,"GenericCloner::populateCloned()",85, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/GenericCloner.cpp,"GenericCloner::visitTerminator( SILBasicBlock * BB)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/GenericCloner.cpp,"GenericCloner::remapScope( const SILDebugScope * DS)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::allocate( unsigned Size , unsigned Align) const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::deallocateSentinel( SILUndef * D)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::SILSSAUpdater( SILModule & M , SmallVectorImpl<SILPhiArgument*> * PHIs)",3, 34, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::Initialize( SILType Ty)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::HasValueForBlock( SILBasicBlock * BB) const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::AddAvailableValue( SILBasicBlock * BB , SILValue V)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::GetValueAtEndOfBlock( SILBasicBlock * BB)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"areIdentical( llvm :: DenseMap<SILBasicBlock*,SILValue> & Avails)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::RewriteUse( Operand & Op)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"getEdgeValuesForTerminator( TermInst * TI , SILBasicBlock * ToBB)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"isEquivalentPHI( SILPhiArgument * PHI , llvm :: SmallDenseMap<SILBasicBlock*,SILValue,8> & ValueMap)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::GetValueInMiddleOfBlock( SILBasicBlock * BB)",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::BlkSucc_begin( BlkT * BB)",1, 79, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::BlkSucc_end( BlkT * BB)",1, 75, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_iterator::PHI_iterator( SILPhiArgument * P)",4, 32, 10, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_iterator::PHI_iterator( SILPhiArgument * P , bool)",4, 32, 10, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_iterator::operator ++()",1, 59, 4, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_iterator::operator ==( const PHI_iterator & x) const",1, 80, 4, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_iterator::operator !=( const PHI_iterator & x) const",1, 76, 4, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_iterator::getValueForBlock( size_t Idx , SILBasicBlock * BB , TermInst * TI)",5, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_iterator::getIncomingValue()",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_iterator::getIncomingBlock()",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_begin( PhiT * PHI)",1, 80, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::PHI_end( PhiT * PHI)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::FindPredecessorBlocks( SILBasicBlock * BB , SmallVectorImpl<SILBasicBlock*> * Preds)",6, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::GetUndefVal( SILBasicBlock * BB , SILSSAUpdater * Updater)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::CreateEmptyPHI( SILBasicBlock * BB , unsigned NumPreds , SILSSAUpdater * Updater)",14, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::AddPHIOperand( SILPhiArgument * PHI , SILValue Val , SILBasicBlock * Pred)",7, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::InstrIsPHI( ValueBase * I)",4, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::ValueIsPHI( SILValue V , SILSSAUpdater * Updater)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::ValueIsNewPHI( SILValue Val , SILSSAUpdater * Updater)",22, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"llvm::SSAUpdaterTraits<SILSSAUpdater>::GetPHIValue( SILPhiArgument * PHI)",1, 67, 2, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"SILSSAUpdater::GetValueAtEndOfBlockInternal( SILBasicBlock * BB)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"UseWrapper::UseWrapper( Operand * Use)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"UseWrapper::operator Operand *()",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"replaceBBArgWithStruct( SILPhiArgument * Arg , SmallVectorImpl<SILValue> & ArgValues)",50, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/SILSSAUpdater.cpp,"swift::replaceBBArgWithCast( SILPhiArgument * Arg)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/StackNesting.cpp,"swift::hasStackDifferencesAt( SILInstruction * start , InstructionMatcher matcher)",67, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/StackNesting.cpp,"StackNesting::setup( SILFunction * F)",72, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/StackNesting.cpp,"StackNesting::solve()",58, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/StackNesting.cpp,"createDealloc( AllocationInst * Alloc , SILInstruction * InsertionPoint , SILLocation Location)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/StackNesting.cpp,"StackNesting::insertDeallocs( const BitVector & AliveBefore , const BitVector & AliveAfter , SILInstruction * InsertionPoint , Optional<SILLocation> Location)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/StackNesting.cpp,"StackNesting::adaptDeallocs()",96, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/StackNesting.cpp,"StackNesting::correctStackNesting( SILFunction * F)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/StackNesting.cpp,"StackNesting::dump() const",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/StackNesting.cpp,"StackNesting::dumpBits( const BitVector & Bits)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::getAllSubclasses( ClassHierarchyAnalysis * CHA , ClassDecl * CD , SILType ClassType , SILModule & M , ClassHierarchyAnalysis :: ClassList & Subs)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"isEffectivelyFinalMethod( FullApplySite AI , SILType ClassType , ClassDecl * CD , ClassHierarchyAnalysis * CHA)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"isKnownFinalClass( ClassDecl * CD , SILModule & M , ClassHierarchyAnalysis * CHA)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::getInstanceWithExactDynamicType( SILValue S , SILModule & M , ClassHierarchyAnalysis * CHA)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::getExactDynamicType( SILValue S , SILModule & M , ClassHierarchyAnalysis * CHA , bool ForUnderlyingObject)",118, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::getExactDynamicTypeOfUnderlyingObject( SILValue S , SILModule & M , ClassHierarchyAnalysis * CHA)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"getSubstitutionsForCallee( SILModule & M , CanSILFunctionType baseCalleeType , CanType derivedSelfType , FullApplySite AI)",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"replaceApplyInst( SILBuilder & B , SILLocation Loc , ApplyInst * OldAI , SILValue NewFn , SubstitutionMap NewSubs , ArrayRef<SILValue> NewArgs)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"replaceTryApplyInst( SILBuilder & B , SILLocation Loc , TryApplyInst * OldTAI , SILValue NewFn , SubstitutionMap NewSubs , ArrayRef<SILValue> NewArgs , SILFunctionConventions Conv)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"replaceBeginApplyInst( SILBuilder & B , SILLocation Loc , BeginApplyInst * OldBAI , SILValue NewFn , SubstitutionMap NewSubs , ArrayRef<SILValue> NewArgs)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"replacePartialApplyInst( SILBuilder & B , SILLocation Loc , PartialApplyInst * OldPAI , SILValue NewFn , SubstitutionMap NewSubs , ArrayRef<SILValue> NewArgs)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"replaceApplySite( SILBuilder & B , SILLocation Loc , ApplySite OldAS , SILValue NewFn , SubstitutionMap NewSubs , ArrayRef<SILValue> NewArgs , SILFunctionConventions Conv)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::deleteDevirtualizedApply( ApplySite Old)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::getTargetClassMethod( SILModule & M , SILType ClassOrMetatypeType , MethodInst * MI)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::canDevirtualizeClassMethod( FullApplySite AI , SILType ClassOrMetatypeType , OptRemark :: Emitter * ORE , bool isEffectivelyFinalMethod)",65, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::devirtualizeClassMethod( FullApplySite AI , SILValue ClassOrMetatype , OptRemark :: Emitter * ORE)",72, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::tryDevirtualizeClassMethod( FullApplySite AI , SILValue ClassInstance , OptRemark :: Emitter * ORE , bool isEffectivelyFinalMethod)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"getWitnessMethodSubstitutions( ModuleDecl * mod , ProtocolConformanceRef conformanceRef , GenericSignature * requirementSig , GenericSignature * witnessThunkSig , SubstitutionMap origSubMap , bool isDefaultWitness , ClassDecl * classWitness)",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"getWitnessMethodSubstitutions( SILModule & Module , ApplySite AI , SILFunction * F , ProtocolConformanceRef CRef)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"devirtualizeWitnessMethod( ApplySite AI , SILFunction * F , ProtocolConformanceRef C , OptRemark :: Emitter * ORE)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"canDevirtualizeWitnessMethod( ApplySite AI)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::tryDevirtualizeWitnessMethod( ApplySite AI , OptRemark :: Emitter * ORE)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::tryDevirtualizeApply( ApplySite AI , ClassHierarchyAnalysis * CHA , OptRemark :: Emitter * ORE)",74, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Utils/Devirtualize.cpp,"swift::canDevirtualizeApply( FullApplySite AI , ClassHierarchyAnalysis * CHA)",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCLoopOpts.cpp,"ARCLoopOpts::run()",44, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCLoopOpts.cpp,"swift::createARCLoopOpts()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"MergeBottomUpLatticeStates( BottomUpRefCountState :: LatticeState L1 , BottomUpRefCountState :: LatticeState L2)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"MergeTopDownLatticeStates( TopDownRefCountState :: LatticeState L1 , TopDownRefCountState :: LatticeState L2)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::initWithMutatorInst( ImmutablePointerSet<SILInstruction> * I , RCIdentityFunctionInfo * RCFI)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::mightRemoveMutators()",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::clear()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::isRefCountStateModified() const",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::valueCanBeDecrementedGivenLatticeState() const",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::handleDecrement()",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::valueCanBeUsedGivenLatticeState() const",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::handleUser( SILValue RCIdentity , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::valueCanBeGuaranteedUsedGivenLatticeState() const",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::handleGuaranteedUser( SILValue RCIdentity , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::isRefCountInstMatchedToTrackedInstruction( SILInstruction * RefCountInst)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::handleRefCountInstMatch( SILInstruction * RefCountInst)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::merge( const BottomUpRefCountState & Other)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::handlePotentialGuaranteedUser( SILInstruction * PotentialGuaranteedUser , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::handlePotentialDecrement( SILInstruction * PotentialDecrement , AliasAnalysis * AA)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::handlePotentialUser( SILInstruction * PotentialUser , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::updateForSameLoopInst( SILInstruction * I , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::updateForDifferentLoopInst( SILInstruction * I , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"BottomUpRefCountState::updateForPredTerminators( ArrayRef<SILInstruction*> Terms , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::initWithMutatorInst( ImmutablePointerSet<SILInstruction> * I , RCIdentityFunctionInfo * RCFI)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::initWithArg( SILFunctionArgument * Arg)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::initWithEntranceInst( ImmutablePointerSet<SILInstruction> * I , SILValue RCIdentity)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::clear()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::isRefCountStateModified() const",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::valueCanBeDecrementedGivenLatticeState() const",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::handleDecrement( SILInstruction * PotentialDecrement , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::valueCanBeUsedGivenLatticeState() const",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::handleUser( SILInstruction * PotentialUser , SILValue RCIdentity , AliasAnalysis * AA)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::valueCanBeGuaranteedUsedGivenLatticeState() const",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::handleGuaranteedUser( SILInstruction * PotentialGuaranteedUser , SILValue RCIdentity , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::isRefCountInstMatchedToTrackedInstruction( SILInstruction * RefCountInst)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::handleRefCountInstMatch( SILInstruction * RefCountInst)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::merge( const TopDownRefCountState & Other)",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::handlePotentialGuaranteedUser( SILInstruction * PotentialGuaranteedUser , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::handlePotentialDecrement( SILInstruction * PotentialDecrement , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::handlePotentialUser( SILInstruction * PotentialUser , AliasAnalysis * AA)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::updateForSameLoopInst( SILInstruction * I , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"TopDownRefCountState::updateForDifferentLoopInst( SILInstruction * I , ImmutablePointerSetFactory<SILInstruction> & SetFactory , AliasAnalysis * AA)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"llvm::operator < <( raw_ostream & OS , BottomUpRefCountState :: LatticeState S)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RefCountState.cpp,"llvm::operator < <( llvm :: raw_ostream & OS , TopDownRefCountState :: LatticeState S)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"isDefinedMerge( const LoopRegion * Succ , const LoopRegion * Pred)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::mergePredecessors( const LoopRegion * Region , ARCRegionState & State)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::processLoopTopDown( const LoopRegion * R)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::mergeSuccessors( const LoopRegion * Region , ARCRegionState & State)",58, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::processLoopBottomUp( const LoopRegion * R , bool FreezeOwnedArgEpilogueReleases)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::LoopARCSequenceDataflowEvaluator( SILFunction & F , AliasAnalysis * AA , LoopRegionFunctionInfo * LRFI , SILLoopInfo * SLI , RCIdentityFunctionInfo * RCFI , EpilogueARCFunctionInfo * EAFI , ProgramTerminationFunctionInfo * PTFI , BlotMapVector<SILInstruction*,TopDownRefCountState> & DecToIncStateMap , BlotMapVector<SILInstruction*,BottomUpRefCountState> & IncToDecStateMap)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::~LoopARCSequenceDataflowEvaluator()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::runOnLoop( const LoopRegion * R , bool FreezeOwnedArgEpilogueReleases , bool RecomputePostDomReleases)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::summarizeLoop( const LoopRegion * R)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::summarizeSubregionBlocks( const LoopRegion * R)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::clearLoopState( const LoopRegion * R)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::addInterestingInst( SILInstruction * I)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalLoopARCSequenceDataflow.cpp,"LoopARCSequenceDataflowEvaluator::removeInterestingInst( SILInstruction * I)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCBBState.cpp,"ARCBBState::mergeSuccBottomUp( ARCBBState & SuccBBState)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCBBState.cpp,"ARCBBState::initSuccBottomUp( ARCBBState & SuccBBState)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCBBState.cpp,"ARCBBState::mergePredTopDown( ARCBBState & PredBBState)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCBBState.cpp,"ARCBBState::initPredTopDown( ARCBBState & PredBBState)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCBBState.cpp,"ARCBBStateInfo::ARCBBStateInfo( SILFunction * F , PostOrderAnalysis * POA , ProgramTerminationFunctionInfo * PTFI)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCBBState.cpp,"ARCBBStateInfo::getBottomUpBBHandle( SILBasicBlock * BB)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCBBState.cpp,"ARCBBStateInfo::getTopDownBBHandle( SILBasicBlock * BB)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCBBState.cpp,"ARCBBStateInfo::getBBID( SILBasicBlock * BB) const",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCBBState.cpp,"ARCBBStateInfo::clear()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCMatchingSet.cpp,"ARCMatchingSetBuilder::matchIncrementsToDecrements()",82, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCMatchingSet.cpp,"ARCMatchingSetBuilder::matchDecrementsToIncrements()",84, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCMatchingSet.cpp,"ARCMatchingSetBuilder::matchUpIncDecSetsForPtr()",83, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::processBBTopDown( ARCBBState & BBState)",63, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::mergePredecessors( ARCBBStateInfoHandle & DataHandle)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::processTopDown()",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"isARCSignificantTerminator( TermInst * TI)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::processBBBottomUp( ARCBBState & BBState , bool FreezeOwnedArgEpilogueReleases)",76, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::mergeSuccessors( ARCBBStateInfoHandle & DataHandle)",47, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::processBottomUp( bool FreezeOwnedArgEpilogueReleases)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::ARCSequenceDataflowEvaluator( SILFunction & F , AliasAnalysis * AA , PostOrderAnalysis * POA , RCIdentityFunctionInfo * RCIA , EpilogueARCFunctionInfo * EAFI , ProgramTerminationFunctionInfo * PTFI , BlotMapVector<SILInstruction*,TopDownRefCountState> & DecToIncStateMap , BlotMapVector<SILInstruction*,BottomUpRefCountState> & IncToDecStateMap)",12, 56, 6, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::run( bool FreezeOwnedReleases)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::clear()",1, 69, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::getBottomUpBBState( SILBasicBlock * BB)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/GlobalARCSequenceDataflow.cpp,"ARCSequenceDataflowEvaluator::getTopDownBBState( SILBasicBlock * BB)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransition.cpp,"isAutoreleasePoolCall( SILInstruction * I)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransition.cpp,"swift::getRCStateTransitionKind( SILNode * N)",51, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransition.cpp,"llvm::operator < <( raw_ostream & os , RCStateTransitionKind Kind)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransition.cpp,"RCStateTransition::matchingInst( SILInstruction * Inst) const",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransition.cpp,"RCStateTransition::merge( const RCStateTransition & Other)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"isOwnedArgumentEpilogueRelease( SILInstruction * I , SILValue Arg , EpilogueARCFunctionInfo * EAFI)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"isGuaranteedSafetyByEpilogueRelease( SILInstruction * I , SILValue Arg , EpilogueARCFunctionInfo * EAFI)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"BottomUpDataflowRCStateVisitor<ARCState>::BottomUpDataflowRCStateVisitor( RCIdentityFunctionInfo * RCFI , EpilogueARCFunctionInfo * EAFI , ARCState & State , bool FreezeOwnedArgEpilogueReleases , IncToDecStateMapTy & IncToDecStateMap , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",8, 68, 6, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"BottomUpDataflowRCStateVisitor<ARCState>::visitAutoreleasePoolCall( SILNode * N)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"isKnownSafe( BottomUpDataflowRCStateVisitor<ARCState> * State , SILInstruction * I , SILValue Op)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"BottomUpDataflowRCStateVisitor<ARCState>::visitStrongDecrement( SILNode * N)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"BottomUpDataflowRCStateVisitor<ARCState>::visitStrongIncrement( SILNode * N)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::TopDownDataflowRCStateVisitor( RCIdentityFunctionInfo * RCFI , ARCState & DataflowState , DecToIncStateMapTy & DecToIncStateMap , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",6, 68, 6, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitAutoreleasePoolCall( SILNode * N)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitStrongDecrement( SILNode * N)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitStrongIncrement( SILNode * N)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitStrongEntranceArgument( SILFunctionArgument * Arg)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitStrongEntranceApply( ApplyInst * AI)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitStrongEntrancePartialApply( PartialApplyInst * PAI)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitStrongEntranceAllocRef( AllocRefInst * ARI)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitStrongEntranceAllocRefDynamic( AllocRefDynamicInst * ARI)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitStrongAllocBox( AllocBoxInst * ABI)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/RCStateTransitionVisitors.cpp,"TopDownDataflowRCStateVisitor<ARCState>::visitStrongEntrance( SILNode * N)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCSequenceOpts.cpp,"ARCPairingContext::optimizeMatchingSet( ARCMatchingSet & MatchSet , llvm :: SmallVectorImpl<SILInstruction*> & NewInsts , llvm :: SmallVectorImpl<SILInstruction*> & DeadInsts)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCSequenceOpts.cpp,"ARCPairingContext::performMatching( llvm :: SmallVectorImpl<SILInstruction*> & NewInsts , llvm :: SmallVectorImpl<SILInstruction*> & DeadInsts)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCSequenceOpts.cpp,"LoopARCPairingContext::runOnLoop( SILLoop * L)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCSequenceOpts.cpp,"LoopARCPairingContext::runOnFunction( SILFunction * F)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCSequenceOpts.cpp,"LoopARCPairingContext::processRegion( const LoopRegion * Region , bool FreezePostDomReleases , bool RecomputePostDomReleases)",51, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCSequenceOpts.cpp,"processFunctionWithoutLoopSupport( SILFunction & F , bool FreezePostDomReleases , AliasAnalysis * AA , PostOrderAnalysis * POTA , RCIdentityFunctionInfo * RCIA , EpilogueARCFunctionInfo * EAFI , ProgramTerminationFunctionInfo * PTFI)",44, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCSequenceOpts.cpp,"processFunctionWithLoopSupport( SILFunction & F , AliasAnalysis * AA , PostOrderAnalysis * POTA , LoopRegionFunctionInfo * LRFI , SILLoopInfo * LI , RCIdentityFunctionInfo * RCFI , EpilogueARCFunctionInfo * EAFI , ProgramTerminationFunctionInfo * PTFI)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCSequenceOpts.cpp,"ARCSequenceOpts::run()",47, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCSequenceOpts.cpp,"swift::createARCSequenceOpts()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::ARCRegionState( LoopRegion * R , bool AllowsLeaks)",3, 34, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::initSuccBottomUp( ARCRegionState & SuccRegionState)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::mergeSuccBottomUp( ARCRegionState & SuccRegionState)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::initPredTopDown( ARCRegionState & PredRegionState)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::mergePredTopDown( ARCRegionState & PredRegionState)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"isARCSignificantTerminator( TermInst * TI)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::processBlockBottomUpPredTerminators( const LoopRegion * R , AliasAnalysis * AA , LoopRegionFunctionInfo * LRFI , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"processBlockBottomUpInsts( ARCRegionState & State , SILBasicBlock & BB , BottomUpDataflowRCStateVisitor<ARCRegionState> & DataflowVisitor , AliasAnalysis * AA , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",58, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::processBlockBottomUp( const LoopRegion * R , AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA , EpilogueARCFunctionInfo * EAFI , LoopRegionFunctionInfo * LRFI , bool FreezeOwnedArgEpilogueReleases , BlotMapVector<SILInstruction*,BottomUpRefCountState> & IncToDecStateMap , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"getInsertionPtsForLoopRegionExits( const LoopRegion * R , LoopRegionFunctionInfo * LRFI , llvm :: DenseMap<const LoopRegion*,ARCRegionState*> & RegionStateInfo , llvm :: SmallVectorImpl<SILInstruction*> & InsertPts)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::processLoopBottomUp( const LoopRegion * R , AliasAnalysis * AA , LoopRegionFunctionInfo * LRFI , llvm :: DenseMap<const LoopRegion*,ARCRegionState*> & RegionStateInfo , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::processBottomUp( AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA , EpilogueARCFunctionInfo * EAFI , LoopRegionFunctionInfo * LRFI , bool FreezeOwnedArgEpilogueReleases , BlotMapVector<SILInstruction*,BottomUpRefCountState> & IncToDecStateMap , llvm :: DenseMap<const LoopRegion*,ARCRegionState*> & RegionStateInfo , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::processBlockTopDown( SILBasicBlock & BB , AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA , BlotMapVector<SILInstruction*,TopDownRefCountState> & DecToIncStateMap , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",64, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::processLoopTopDown( const LoopRegion * R , ARCRegionState * State , AliasAnalysis * AA , LoopRegionFunctionInfo * LRFI , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::processTopDown( AliasAnalysis * AA , RCIdentityFunctionInfo * RCIA , LoopRegionFunctionInfo * LRFI , BlotMapVector<SILInstruction*,TopDownRefCountState> & DecToIncStateMap , llvm :: DenseMap<const LoopRegion*,ARCRegionState*> & RegionStateInfo , ImmutablePointerSetFactory<SILInstruction> & SetFactory)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"isStrongEntranceInstruction( const SILInstruction & I)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::summarizeBlock( SILBasicBlock * BB)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::summarizeLoop( const LoopRegion * R , LoopRegionFunctionInfo * LRFI , llvm :: DenseMap<const LoopRegion*,ARCRegionState*> & RegionStateInfo)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::summarize( LoopRegionFunctionInfo * LRFI , llvm :: DenseMap<const LoopRegion*,ARCRegionState*> & RegionStateInfo)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::addInterestingInst( SILInstruction * TargetInst)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/ARC/ARCRegionState.cpp,"ARCRegionState::removeInterestingInst( SILInstruction * I)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeList::allCalleesVisible()",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::sortAndUniqueCallees()",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::getOrCreateCalleesForMethod( SILDeclRef Decl)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::computeClassMethodCalleesForClass( ClassDecl * CD)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::computeClassMethodCallees( ClassDecl * CD , SILDeclRef Method)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::computeWitnessMethodCalleesForWitnessTable( SILWitnessTable & WT)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::computeMethodCallees()",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::getSingleCalleeForWitnessMethod( WitnessMethodInst * WMI) const",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::getCalleeList( SILDeclRef Decl) const",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::getCalleeList( WitnessMethodInst * WMI) const",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::getCalleeList( ClassMethodInst * CMI) const",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::getCalleeListForCalleeKind( SILValue Callee) const",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::getCalleeList( FullApplySite FAS) const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/BasicCalleeAnalysis.cpp,"CalleeCache::getCalleeList( SILInstruction * I) const",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ValueTracking.cpp,"swift::isNotAliasingArgument( SILValue V , InoutAliasingAssumption isInoutAliasing)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ValueTracking.cpp,"isLocalObject( SILValue Obj)",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ValueTracking.cpp,"swift::pointsToLocalObject( SILValue V , InoutAliasingAssumption isInoutAliasing)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ValueTracking.cpp,"swift::isZeroValue( SILValue Value)",69, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ValueTracking.cpp,"swift::computeSignBit( SILValue V)",170, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ValueTracking.cpp,"checkTruncOverflow( BuiltinInst * BI)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ValueTracking.cpp,"swift::canOverflow( BuiltinInst * BI)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/IVAnalysis.cpp,"inSCC( ValueBase * value , IVInfo :: SCCType & SCC)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/IVAnalysis.cpp,"IVInfo::isInductionSequence( SCCType & SCC)",57, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/IVAnalysis.cpp,"IVInfo::visit( SCCType & SCC)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeData::reset()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeData::erase( SILFunction * F)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeData::isClosureScope( SILFunction * F)",1, 75, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeData::getClosureScopes( SILFunction * ClosureF)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeData::recordScope( PartialApplyInst * PAI)",27, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeData::lookupScopeIndex( SILFunction * scopeFunc)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeData::compute( SILModule * M)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeAnalysis::ClosureScopeAnalysis( SILModule * M)",2, 78, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeAnalysis::isClosureScope( SILFunction * scopeFunc)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeAnalysis::getClosureScopes( SILFunction * closureFunc)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeAnalysis::invalidate()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeAnalysis::notifyWillDeleteFunction( SILFunction * F)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::ClosureScopeAnalysis::getOrComputeScopeData()",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::createClosureScopeAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClosureScope.cpp,"swift::TopDownClosureFunctionOrder::visitFunctions( llvm :: function_ref<void(SILFunction*)> visitor)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/DestructorAnalysis.cpp,"DestructorAnalysis::mayStoreToMemoryOnDestruction( SILType T)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/DestructorAnalysis.cpp,"DestructorAnalysis::cacheResult( CanType Type , bool Result)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/DestructorAnalysis.cpp,"DestructorAnalysis::isSafeType( CanType Ty)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/DestructorAnalysis.cpp,"DestructorAnalysis::implementsDestructorSafeContainerProtocol( NominalTypeDecl * NomDecl)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/DestructorAnalysis.cpp,"DestructorAnalysis::areTypeParametersSafe( CanType Ty)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/DestructorAnalysis.cpp,"DestructorAnalysis::getASTContext()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/DestructorAnalysis.cpp,"swift::createDestructorAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::~LoopRegion()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::getBlock() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::getLoop() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::getFunction() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::dumpName() const",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::printName( llvm :: raw_ostream & os) const",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::print( llvm :: raw_ostream & os , bool isShort) const",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"llvm::operator < <( llvm :: raw_ostream & os , LoopRegion & LR)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::getSuccs() const",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::getLocalSuccs() const",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::getNonLocalSuccs() const",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"LoopRegion::replaceSucc( SuccessorID OldSucc , SuccessorID NewSucc)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp,"llvm::operator < <( llvm :: raw_ostream & os , LoopRegion :: SuccessorID & S)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"getSelfParameterConvention( ApplyInst * SemanticsCall)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::isValidSignature()",71, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::ArraySemanticsCall( SILValue V , StringRef semanticName , bool matchPartialName)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::ArraySemanticsCall( SILInstruction * I , StringRef semanticName , bool matchPartialName)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::ArraySemanticsCall( ApplyInst * AI , StringRef semanticName , bool matchPartialName)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"ArraySemanticsCall::initialize( ApplyInst * AI , StringRef semanticName , bool matchPartialName)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getKind() const",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::hasSelf() const",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getSelf() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getSelfOperand() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::hasGuaranteedSelf() const",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::hasGetElementDirectResult() const",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getTypeCheckedArgument() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getSubscriptCheckArgument() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getIndex() const",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getConstantIndex() const",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"canHoistArrayArgument( ApplyInst * SemanticsCall , SILValue Arr , SILInstruction * InsertBefore , DominanceInfo * DT)",31, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::canHoist( SILInstruction * InsertBefore , DominanceInfo * DT) const",43, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"copyArrayLoad( SILValue ArrayStructValue , SILInstruction * InsertBefore , DominanceInfo * DT)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"hoistOrCopyCall( ApplyInst * AI , SILInstruction * InsertBefore , bool LeaveOriginal , DominanceInfo * DT)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"hoistOrCopySelf( ApplyInst * SemanticsCall , SILInstruction * InsertBefore , DominanceInfo * DT , bool LeaveOriginal)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::hoistOrCopy( SILInstruction * InsertBefore , DominanceInfo * DT , bool LeaveOriginal)",85, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::removeCall()",42, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getArrayPropertyIsNativeTypeChecked() const",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::doesNotChangeArray() const",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::mayHaveBridgedObjectElementType() const",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::canInlineEarly() const",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getInitializationCount() const",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getArrayValue() const",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::getArrayElementStoragePointer() const",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::replaceByValue( SILValue V)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ArraySemantic.cpp,"swift::ArraySemanticsCall::replaceByAppendingValues( SILModule & M , SILFunction * AppendFn , SILFunction * ReserveFn , const SmallVectorImpl<SILValue> & Vals , SubstitutionMap Subs)",69, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::isRetainInstruction( SILInstruction * I)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::isReleaseInstruction( SILInstruction * I)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::mayDecrementRefCount( SILInstruction * User , SILValue Ptr , AliasAnalysis * AA)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"canApplyOfBuiltinUseNonTrivialValues( BuiltinInst * BInst)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::canNeverUseValues( SILInstruction * Inst)",99, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"doOperandsAlias( ArrayRef<Operand> Ops , SILValue Ptr , AliasAnalysis * AA)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"canTerminatorUseValue( TermInst * TI , SILValue Ptr , AliasAnalysis * AA)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::mayHaveSymmetricInterference( SILInstruction * User , SILValue Ptr , AliasAnalysis * AA)",37, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::mustUseValue( SILInstruction * User , SILValue Ptr , AliasAnalysis * AA)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::mustGuaranteedUseValue( SILInstruction * User , SILValue Ptr , AliasAnalysis * AA)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::valueHasARCUsesInInstructionRange( SILValue Op , SILBasicBlock :: iterator Start , SILBasicBlock :: iterator End , AliasAnalysis * AA)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::valueHasARCUsesInReverseInstructionRange( SILValue Op , SILBasicBlock :: iterator Start , SILBasicBlock :: iterator End , AliasAnalysis * AA)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::valueHasARCDecrementOrCheckInInstructionRange( SILValue Op , SILBasicBlock :: iterator Start , SILBasicBlock :: iterator End , AliasAnalysis * AA)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::mayGuaranteedUseValue( SILInstruction * User , SILValue Ptr , AliasAnalysis * AA)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedResultToEpilogueRetainMatcher::ConsumedResultToEpilogueRetainMatcher( RCIdentityFunctionInfo * RCFI , AliasAnalysis * AA , SILFunction * F)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedResultToEpilogueRetainMatcher::recompute()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedResultToEpilogueRetainMatcher::isTransitiveSuccessorsRetainFree( const llvm :: DenseSet<SILBasicBlock*> & BBs)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedResultToEpilogueRetainMatcher::findMatchingRetainsInBasicBlock( SILBasicBlock * BB , SILValue V)",38, 3, 1, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedResultToEpilogueRetainMatcher::findMatchingRetains( SILBasicBlock * BB)",107, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedArgToEpilogueReleaseMatcher::ConsumedArgToEpilogueReleaseMatcher( RCIdentityFunctionInfo * RCFI , SILFunction * F , ArrayRef<SILArgumentConvention> ArgumentConventions , ExitKind Kind)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedArgToEpilogueReleaseMatcher::recompute()",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedArgToEpilogueReleaseMatcher::isRedundantRelease( ArrayRef<SILInstruction*> Insts , SILValue Base , SILValue Derived)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedArgToEpilogueReleaseMatcher::releaseArgument( ArrayRef<SILInstruction*> Insts , SILValue Arg)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedArgToEpilogueReleaseMatcher::processMatchingReleases()",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"isOneOfConventions( SILArgumentConvention Convention , ArrayRef<SILArgumentConvention> ArgumentConventions)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedArgToEpilogueReleaseMatcher::collectMatchingDestroyAddresses( SILBasicBlock * block)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedArgToEpilogueReleaseMatcher::collectMatchingReleases( SILBasicBlock * block)",97, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ConsumedArgToEpilogueReleaseMatcher::findMatchingReleases( SILBasicBlock * BB)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"propagateLiveness( llvm :: SmallPtrSetImpl<SILBasicBlock*> & LiveIn , SILBasicBlock * DefBB)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"successorHasLiveIn( SILBasicBlock * BB , llvm :: SmallPtrSetImpl<SILBasicBlock*> & LiveIn)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"addLastUse( SILValue V , SILBasicBlock * BB , ReleaseTracker & Tracker)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::getFinalReleasesForValue( SILValue V , ReleaseTracker & Tracker)",69, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ignorableApplyInstInUnreachableBlock( const ApplyInst * AI)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"ignorableBuiltinInstInUnreachableBlock( const BuiltinInst * BI)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::isARCInertTrapBB( const SILBasicBlock * BB)",46, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::getSingleUnsafeGuaranteedValueResult( BuiltinInst * BI)",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::getUnsafeGuaranteedEndUser( SILValue UnsafeGuaranteedToken)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"hasUnsafeGuaranteedOperand( SILValue UnsafeGuaranteedValue , SILValue UnsafeGuaranteedValueOperand , RCIdentityFunctionInfo & RCII , SILInstruction & Release)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ARCAnalysis.cpp,"swift::findReleaseToMatchUnsafeGuaranteedValue( SILInstruction * UnsafeGuaranteedEndI , SILInstruction * UnsafeGuaranteedI , SILValue UnsafeGuaranteedValue , SILBasicBlock & BB , RCIdentityFunctionInfo & RCFI)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/FunctionOrder.cpp,"BottomUpFunctionOrder::DFS( SILFunction * Start)",51, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/FunctionOrder.cpp,"BottomUpFunctionOrder::FindSCCs( SILModule & M)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ProtocolConformanceAnalysis.cpp,"NominalTypeWalker::NominalTypeWalker( ProtocolConformanceAnalysis :: ProtocolConformanceMap & ProtocolConformanceCache)",3, 62, 6, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ProtocolConformanceAnalysis.cpp,"NominalTypeWalker::walkToDeclPre( Decl * D)",11, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ProtocolConformanceAnalysis.cpp,"ProtocolConformanceAnalysis::init()",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ProtocolConformanceAnalysis.cpp,"ProtocolConformanceAnalysis::findSoleConformingType( ProtocolDecl * Protocol)",52, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ProtocolConformanceAnalysis.cpp,"ProtocolConformanceAnalysis::~ProtocolConformanceAnalysis()",1, 63, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitSILInstruction( SILInstruction * I)",1, 75, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitStructInst( StructInst * SI)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitTupleInst( TupleInst * TI)",34, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitTupleExtractInst( TupleExtractInst * TEI)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitStructExtractInst( StructExtractInst * SEI)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitUncheckedEnumDataInst( UncheckedEnumDataInst * UEDI)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"simplifyEnumFromUncheckedEnumData( EnumInst * EI)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitSelectEnumInst( SelectEnumInst * SEI)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitEnumInst( EnumInst * EI)",62, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitAddressToPointerInst( AddressToPointerInst * ATPI)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitPointerToAddressInst( PointerToAddressInst * PTAI)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitRefToRawPointerInst( RefToRawPointerInst * RefToRaw)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitUnconditionalCheckedCastInst( UnconditionalCheckedCastInst * UCCI)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitUncheckedRefCastInst( UncheckedRefCastInst * OPRI)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitUncheckedAddrCastInst( UncheckedAddrCastInst * UACI)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitUpcastInst( UpcastInst * UI)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitUncheckedTrivialBitCastInst( UncheckedTrivialBitCastInst * UTBCI)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitUncheckedBitwiseCastInst( UncheckedBitwiseCastInst * UBCI)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitThinFunctionToPointerInst( ThinFunctionToPointerInst * TFTPI)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitPointerToThinFunctionInst( PointerToThinFunctionInst * PTTFI)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitBeginAccessInst( BeginAccessInst * BAI)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"simplifyBuiltin( BuiltinInst * BI)",87, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::visitBuiltinInst( BuiltinInst * BI)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"simplifyBinaryWithOverflow( BuiltinInst * BI , llvm :: Intrinsic :: ID ID)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"InstSimplifier::simplifyOverflowBuiltin( BuiltinInst * BI)",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"swift::simplifyInstruction( SILInstruction * I)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"swift::replaceAllSimplifiedUsesAndErase( SILInstruction * I , SILValue result , std :: function<void(SILInstruction*)> eraseNotify)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SimplifyInstruction.cpp,"swift::simplifyOverflowBuiltinInstruction( BuiltinInst * BI)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/Analysis.cpp,"SILAnalysis::verifyFunction( SILFunction * F)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/Analysis.cpp,"swift::createDominanceAnalysis( SILModule *)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/Analysis.cpp,"swift::createPostDominanceAnalysis( SILModule *)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/Analysis.cpp,"swift::createInductionVariableAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/Analysis.cpp,"swift::createPostOrderAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/Analysis.cpp,"swift::createClassHierarchyAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/Analysis.cpp,"swift::createBasicCalleeAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/Analysis.cpp,"swift::createProtocolConformanceAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"isExtractOfArrayUninitializedPointer( TupleExtractInst * TEI)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"isProjection( SILNode * node)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"isNonWritableMemoryAddress( SILNode * V)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"skipProjections( ValueBase * V)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::clear()",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::getNode( ValueBase * V , EscapeAnalysis * EA , bool createIfNeeded)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::getContentNode( CGNode * AddrNode)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::addDeferEdge( CGNode * From , CGNode * To)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::mergeAllScheduledNodes()",99, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::updatePointsTo( CGNode * InitialNode , CGNode * pointsTo)",108, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::propagateEscapeStates()",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::computeUsePoints()",59, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::mergeFrom( ConnectionGraph * SourceGraph , CGNodeMap & Mapping)",93, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::isUsePoint( SILNode * UsePoint , CGNode * Node)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::getUsePoints( CGNode * Node , llvm :: SmallVectorImpl<SILNode*> & UsePoints)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::isReachable( CGNode * From , CGNode * To)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"CGForDotView::CGForDotView( const EscapeAnalysis :: ConnectionGraph * CG)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"CGForDotView::getNodeLabel( const Node * Node) const",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"CGForDotView::getNodeAttributes( const Node * Node) const",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::GraphTraits<CGForDotView::Node*>::getEntryNode( NodeRef N)",1, 57, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::GraphTraits<CGForDotView::Node*>::child_begin( NodeRef N)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::GraphTraits<CGForDotView::Node*>::child_end( NodeRef N)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::GraphTraits<CGForDotView*>::getEntryNode( GraphType F)",1, 65, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::GraphTraits<CGForDotView*>::nodes_begin( GraphType OCG)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::GraphTraits<CGForDotView*>::nodes_end( GraphType OCG)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::GraphTraits<CGForDotView*>::size( GraphType CG)",1, 68, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::DOTGraphTraits<CGForDotView*>::DOTGraphTraits( bool isSimple = false)",1, 79, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::DOTGraphTraits<CGForDotView*>::getGraphName( const CGForDotView * Graph)",3, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::DOTGraphTraits<CGForDotView*>::getNodeLabel( const CGForDotView :: Node * Node , const CGForDotView * Graph)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::DOTGraphTraits<CGForDotView*>::getNodeAttributes( const CGForDotView :: Node * Node , const CGForDotView * Graph)",4, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"llvm::DOTGraphTraits<CGForDotView*>::getEdgeAttributes( const CGForDotView :: Node * Node , CGForDotView :: child_iterator I , const CGForDotView * Graph)",11, 6, 4, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::viewCG() const",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::CGNode::dump() const",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::CGNode::getTypeStr() const",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::print( llvm :: raw_ostream & OS) const",89, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::verify() const",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::ConnectionGraph::verifyStructure() const",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::EscapeAnalysis( SILModule * M)",3, 68, 6, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::initialize( SILPassManager * PM)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"linkBBArgs( SILBasicBlock * BB)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"mayContainReference( SILType Ty , SILModule * Mod)",44, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::isPointer( ValueBase * V)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::buildConnectionGraph( FunctionInfo * FInfo , FunctionOrder & BottomUpOrder , int RecursionDepth)",67, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"onlyUsedInTupleExtract( SILValue V)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::buildConnectionGraphForCallees( SILInstruction * Caller , CalleeList Callees , FunctionInfo * FInfo , FunctionOrder & BottomUpOrder , int RecursionDepth)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::buildConnectionGraphForDestructor( SILValue V , SILInstruction * I , FunctionInfo * FInfo , FunctionOrder & BottomUpOrder , int RecursionDepth)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::analyzeInstruction( SILInstruction * I , FunctionInfo * FInfo , FunctionOrder & BottomUpOrder , int RecursionDepth)",374, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::analyzeSelectInst( SelectInst * SI , ConnectionGraph * ConGraph)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::deinitIsKnownToNotCapture( SILValue V)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::setAllEscaping( SILInstruction * I , ConnectionGraph * ConGraph)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::recompute( FunctionInfo * Initial)",91, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::mergeCalleeGraph( SILInstruction * AS , ConnectionGraph * CallerGraph , ConnectionGraph * CalleeGraph)",55, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::mergeSummaryGraph( ConnectionGraph * SummaryGraph , ConnectionGraph * Graph)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::canEscapeToUsePoint( SILValue V , SILNode * UsePoint , ConnectionGraph * ConGraph)",40, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::canEscapeTo( SILValue V , FullApplySite FAS)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"hasReferenceSemantics( SILType T)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::canEscapeTo( SILValue V , RefCountingInst * RI)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"getCommonFunction( SILValue V1 , SILValue V2)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::canEscapeToValue( SILValue V , SILValue To)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::canPointToSameMemory( SILValue V1 , SILValue V2)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::canParameterEscape( FullApplySite FAS , int ParamIdx , bool checkContentOfIndirectParam)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::invalidate()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::invalidate( SILFunction * F , InvalidationKind K)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"EscapeAnalysis::handleDeleteNotification( SILNode * node)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp,"swift::createEscapeAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ColdBlockInfo.cpp,"getCondition( SILValue C)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ColdBlockInfo.cpp,"ColdBlockInfo::getBranchHint( SILValue Cond , int recursionDepth)",78, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ColdBlockInfo.cpp,"ColdBlockInfo::isSlowPath( const SILBasicBlock * FromBB , const SILBasicBlock * ToBB , int recursionDepth)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ColdBlockInfo.cpp,"ColdBlockInfo::isCold( const SILBasicBlock * BB , int recursionDepth)",33, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::hasNoNestedConflict( const AccessedStorage & otherStorage) const",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::mayConflictWith( SILAccessKind otherAccessKind , const AccessedStorage & otherStorage) const",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::getStorageAccessInfo( const AccessedStorage & otherStorage) const",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"updateAccessKind( SILAccessKind & LHS , SILAccessKind RHS)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"updateOptionalAccessKind( Optional<SILAccessKind> & LHS , Optional<SILAccessKind> RHS)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"StorageAccessInfo::mergeFrom( const StorageAccessInfo & RHS)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::summarizeFunction( SILFunction * F)",32, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::updateUnidentifiedAccess( SILAccessKind accessKind)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::mergeAccesses( const FunctionAccessedStorage & other , std :: function<StorageAccessInfo(const StorageAccessInfo&)> transformStorage)",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::mergeFrom( const FunctionAccessedStorage & other)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"getCallerArg( FullApplySite fullApply , unsigned paramIndex)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"transformCalleeStorage( const StorageAccessInfo & storage , FullApplySite fullApply)",54, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::mergeFromApply( const FunctionAccessedStorage & calleeAccess , FullApplySite fullApply)",8, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::visitBeginAccess( B * beginAccess)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::analyzeInstruction( SILInstruction * I)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"StorageAccessInfo::print( raw_ostream & os) const",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"StorageAccessInfo::dump() const",1, 62, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::print( raw_ostream & os) const",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"FunctionAccessedStorage::dump() const",1, 68, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessedStorageAnalysis.cpp,"swift::createAccessedStorageAnalysis( SILModule *)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/TypeExpansionAnalysis.cpp,"TypeExpansionAnalysis::getTypeExpansion( SILType B , SILModule * Mod)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/TypeExpansionAnalysis.cpp,"swift::createTypeExpansionAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EpilogueARCAnalysis.cpp,"EpilogueARCContext::initializeDataflow()",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EpilogueARCAnalysis.cpp,"EpilogueARCContext::convergeDataflow()",49, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EpilogueARCAnalysis.cpp,"EpilogueARCContext::computeEpilogueARC()",51, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EpilogueARCAnalysis.cpp,"EpilogueARCAnalysis::initialize( SILPassManager * PM)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/EpilogueARCAnalysis.cpp,"swift::createEpilogueARCAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CFG.cpp,"isSafeNonExitTerminator( TermInst * TI)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CFG.cpp,"isTrapNoReturnFunction( ApplyInst * AI)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CFG.cpp,"swift::findAllNonFailureExitBBs( SILFunction * F , llvm :: TinyPtrVector<SILBasicBlock*> & BBs)",44, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClassHierarchyAnalysis.cpp,"ClassHierarchyAnalysis::init()",44, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClassHierarchyAnalysis.cpp,"ClassHierarchyAnalysis::getIndirectSubClasses( ClassDecl * Cur , ClassList & IndirectSubs)",36, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/ClassHierarchyAnalysis.cpp,"ClassHierarchyAnalysis::~ClassHierarchyAnalysis()",1, 53, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"isNoPayloadEnum( SILValue V)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"isRCIdentityPreservingCast( ValueKind Kind)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"stripRCIdentityPreservingInsts( SILValue V)",60, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"dominatesArgument( DominanceInfo * DI , SILArgument * A , SILValue FirstIV)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"RCIdentityFunctionInfo::stripOneRCIdentityIncomingValue( SILArgument * A , SILValue V)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"proveNonPayloadedEnumCase( SILBasicBlock * BB , SILValue RCIdentity)",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"RCIdentityFunctionInfo::findDominatingNonPayloadedEdge( SILBasicBlock * IncomingEdgeBB , SILValue RCIdentity)",66, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"allIncomingValuesEqual( llvm :: SmallVectorImpl<std::pair<SILBasicBlock*,SILValue>> & IncomingValues)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"RCIdentityFunctionInfo::stripRCIdentityPreservingArgs( SILValue V , unsigned RecursionDepth)",98, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"RCIdentityFunctionInfo::stripRCIdentityPreservingOps( SILValue V , unsigned RecursionDepth)",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"RCIdentityFunctionInfo::getRCIdentityRootInner( SILValue V , unsigned RecursionDepth)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"RCIdentityFunctionInfo::getRCIdentityRoot( SILValue V)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"isNonOverlappingTrivialAccess( SILValue value)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"RCIdentityFunctionInfo::getRCUsers( SILValue V , llvm :: SmallVectorImpl<SILInstruction*> & Users)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"RCIdentityFunctionInfo::getRCUses( SILValue InputValue , llvm :: SmallVectorImpl<Operand*> & Uses)",48, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"RCIdentityAnalysis::initialize( SILPassManager * PM)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/RCIdentityAnalysis.cpp,"swift::createRCIdentityAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::FunctionInfo::FunctionInfo( SILFunction * f)",5, 79, 6, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::ApplySiteFinderVisitor( CallerAnalysis * analysis , SILFunction * callerFn)",3, 65, 8, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::visitSILInstruction( SILInstruction *)",1, 63, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::visitFunctionRefInst( FunctionRefInst * fri)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::visitDynamicFunctionRefInst( DynamicFunctionRefInst * fri)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::visitPreviousDynamicFunctionRefInst( PreviousDynamicFunctionRefInst * fri)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::processApplySites( ArrayRef<ApplySite> applySites)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::processApplySites( ArrayRef<FullApplySite> applySites)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::~ApplySiteFinderVisitor()",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::visitFunctionRefBaseInst( FunctionRefBaseInst * fri)",48, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::checkCallSiteInvariants( SILInstruction & i)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::ApplySiteFinderVisitor::process()",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::getFunctionInfo( SILFunction * f) const",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::getOrInsertFunctionInfo( SILFunction * f)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::unsafeGetFunctionInfo( SILFunction * f)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::unsafeGetFunctionInfo( SILFunction * f) const",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::CallerAnalysis( SILModule * m)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::processFunctionCallSites( SILFunction * callerFn)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::invalidateAllInfo( SILFunction * f)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::invalidateKnownCallees( SILFunction * caller , FunctionInfo & callerInfo)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::invalidateKnownCallees( SILFunction * caller)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::verify( SILFunction * caller) const",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::verify( SILFunction * function , const FunctionInfo & functionInfo) const",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::verify() const",26, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::invalidate()",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"YAMLCallGraphNode::YAMLCallGraphNode( StringRef calleeName , bool hasCaller , unsigned minPartialAppliedArgs , bool hasOnlyCompleteDirectCallerSets , bool hasAllCallers , std :: vector<StringRef> && partialAppliers , std :: vector<StringRef> && fullAppliers)",11, 49, 8, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"llvm::yaml::MappingTraits<YAMLCallGraphNode>::mapping( IO & io , YAMLCallGraphNode & func)",10, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::dump() const",1, 59, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::print( const char * filePath) const",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"CallerAnalysis::print( llvm :: raw_ostream & os) const",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/CallerAnalysis.cpp,"swift::createCallerAnalysis( SILModule * mod)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"shouldRunAA()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"shouldRunTypedAccessTBAA()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"shouldRunBasicAA()",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"swift::operator < <( llvm :: raw_ostream & OS , AliasResult R)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"getAccessedMemory( SILInstruction * User)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"isFunctionArgument( SILValue V)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"isIdentifiableObject( SILValue V)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"areDistinctIdentifiableObjects( SILValue V1 , SILValue V2)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"isSameValueOrGlobal( SILValue V1 , SILValue V2)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"isLocalLiteral( SILValue V)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"isIdentifiedFunctionLocal( SILValue V)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"aliasUnequalObjects( SILValue O1 , SILValue O2)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"AliasAnalysis::aliasAddressProjection( SILValue V1 , SILValue V2 , SILValue O1 , SILValue O2)",72, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"isTypedAccessOracle( SILInstruction * I)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"isAddressRootTBAASafe( SILValue V)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"findTypedAccessType( SILValue V)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"swift::computeTBAAType( SILValue V)",9, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"typedAccessTBAABuiltinTypesMayAlias( SILType LTy , SILType RTy , SILModule & Mod)",29, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"typedAccessTBAAMayAlias( SILType LTy , SILType RTy , SILModule & Mod)",99, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"AliasAnalysis::typesMayAlias( SILType T1 , SILType T2)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"AliasAnalysis::alias( SILValue V1 , SILValue V2 , SILType TBAAType1 , SILType TBAAType2)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"AliasAnalysis::aliasInner( SILValue V1 , SILValue V2 , SILType TBAAType1 , SILType TBAAType2)",80, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"AliasAnalysis::canApplyDecrementRefCount( FullApplySite FAS , SILValue Ptr)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"AliasAnalysis::canBuiltinDecrementRefCount( BuiltinInst * BI , SILValue Ptr)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"AliasAnalysis::mayValueReleaseInterfereWithInstruction( SILInstruction * User , SILValue Ptr)",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"swift::isLetPointer( SILValue V)",27, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"AliasAnalysis::initialize( SILPassManager * PM)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"swift::createAliasAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AliasAnalysis.cpp,"AliasAnalysis::toAliasKey( SILValue V1 , SILValue V2 , SILType Type1 , SILType Type2)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopAnalysis.cpp,"SILLoopAnalysis::newFunctionAnalysis( SILFunction * F)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopAnalysis.cpp,"SILLoopAnalysis::initialize( SILPassManager * PM)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/LoopAnalysis.cpp,"swift::createLoopAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"GenericFunctionEffectAnalysis<FunctionEffects>::initialize( SILPassManager * PM)",4, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"GenericFunctionEffectAnalysis<FunctionEffects>::invalidate()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"GenericFunctionEffectAnalysis<FunctionEffects>::invalidate( SILFunction * F , InvalidationKind K)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"GenericFunctionEffectAnalysis<FunctionEffects>::getCalleeEffects( FunctionEffects & calleeEffects , FullApplySite fullApply)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"GenericFunctionEffectAnalysis<FunctionEffects>::analyzeFunction( FunctionInfo * functionInfo , FunctionOrder & bottomUpOrder , int recursionDepth)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"GenericFunctionEffectAnalysis<FunctionEffects>::analyzeCall( FunctionInfo * functionInfo , FullApplySite fullApply , FunctionOrder & bottomUpOrder , int recursionDepth)",35, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"GenericFunctionEffectAnalysis<FunctionEffects>::recompute( FunctionInfo * initialInfo)",53, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::getMemBehavior( RetainObserveKind ScanKind) const",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::mergeFrom( const FunctionSideEffects & RHS)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::mergeFromApply( const FunctionSideEffects & ApplyEffects , FullApplySite FAS)",18, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::dump() const",1, 74, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"skipAddrProjections( SILValue V)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"skipValueProjections( SILValue V)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::getEffectsOn( SILValue Addr)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::setDefinedEffects( SILFunction * F)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::summarizeFunction( SILFunction * F)",28, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::setSemanticEffects( ArraySemanticsCall ASC)",68, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::summarizeCall( FullApplySite fullApply)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"FunctionSideEffects::analyzeInstruction( SILInstruction * I)",107, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/SideEffectAnalysis.cpp,"swift::createSideEffectAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::MemoryBehaviorVisitor( AliasAnalysis * AA , SideEffectAnalysis * SEA , EscapeAnalysis * EA , SILValue V , RetainObserveKind IgnoreRefCountIncs)",4, 78, 6, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::getValueTBAAType()",5, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitValueBase( ValueBase * V)",3, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitSILInstruction( SILInstruction * Inst)",20, 4, 2, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitLoadInst( LoadInst * LI)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitStoreInst( StoreInst * SI)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitBuiltinInst( BuiltinInst * BI)",30, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitTryApplyInst( TryApplyInst * AI)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitApplyInst( ApplyInst * AI)",61, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitStrongReleaseInst( StrongReleaseInst * SI)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitReleaseValueInst( ReleaseValueInst * SI)",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"MemoryBehaviorVisitor::visitSetDeallocatingInst( SetDeallocatingInst * SDI)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"AliasAnalysis::computeMemoryBehavior( SILInstruction * Inst , SILValue V , RetainObserveKind InspectionMode)",23, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"AliasAnalysis::computeMemoryBehaviorInner( SILInstruction * Inst , SILValue V , RetainObserveKind InspectionMode)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/MemoryBehavior.cpp,"AliasAnalysis::toMemoryBehaviorKey( SILInstruction * V1 , SILValue V2 , RetainObserveKind M)",13, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/PassManagerVerifierAnalysis.cpp,"PassManagerVerifierAnalysis::PassManagerVerifierAnalysis( SILModule * mod)",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/PassManagerVerifierAnalysis.cpp,"PassManagerVerifierAnalysis::invalidate()",1, 50, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/PassManagerVerifierAnalysis.cpp,"PassManagerVerifierAnalysis::invalidate( SILFunction * f , InvalidationKind k)",2, 68, 45, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/PassManagerVerifierAnalysis.cpp,"PassManagerVerifierAnalysis::notifyAddedOrModifiedFunction( SILFunction * f)",10, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/PassManagerVerifierAnalysis.cpp,"PassManagerVerifierAnalysis::notifyWillDeleteFunction( SILFunction * f)",15, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/PassManagerVerifierAnalysis.cpp,"PassManagerVerifierAnalysis::invalidateFunctionTables()",1, 64, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/PassManagerVerifierAnalysis.cpp,"PassManagerVerifierAnalysis::verifyFull() const",45, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/PassManagerVerifierAnalysis.cpp,"swift::createPassManagerVerifierAnalysis( SILModule * m)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::processFunction( FunctionInfo * info , FunctionOrder & order)",24, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::processArgument( FunctionInfo * info , SILFunctionArgument * argument , ArgumentSummary & summary , FunctionOrder & order)",74, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"hasExpectedUsesOfNoEscapePartialApply( Operand * partialApplyUse)",85, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::processPartialApply( FunctionInfo * callerInfo , unsigned callerArgumentIndex , PartialApplyInst * apply , Operand * applyArgumentOperand , FunctionOrder & order)",25, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::processFullApply( FunctionInfo * callerInfo , unsigned callerArgumentIndex , FullApplySite apply , Operand * argumentOperand , FunctionOrder & order)",20, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::processCall( FunctionInfo * callerInfo , unsigned callerArgumentIndex , SILFunction * callee , unsigned argumentIndex , FunctionOrder & order)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::ArgumentSummary::mergeWith( SILAccessKind otherKind , SILLocation otherLoc , const IndexTrieNode * otherSubPath)",17, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::ArgumentSummary::mergeWith( const ArgumentSummary & other)",16, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::SubAccessSummary::mergeWith( SILAccessKind otherKind , SILLocation otherLoc , const IndexTrieNode * otherSubPath)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::SubAccessSummary::mergeWith( const SubAccessSummary & other)",6, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::recompute( FunctionInfo * initial)",38, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::SubAccessSummary::getDescription( SILType BaseType , SILModule & M) const",12, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::ArgumentSummary::getSortedSubAccesses( SmallVectorImpl<SubAccessSummary> & storage) const",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::ArgumentSummary::getDescription( SILType BaseType , SILModule & M) const",22, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::propagateFromCalleeToCaller( FunctionInfo * callerInfo , ArgumentFlow flow)",14, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::getFunctionInfo( SILFunction * F)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::getOrCreateSummary( SILFunction * fn)",7, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::AccessSummaryAnalysis::invalidate()",5, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::invalidate( SILFunction * F , InvalidationKind K)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"swift::createAccessSummaryAnalysis( SILModule * M)",3, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"getSingleAddressProjectionUser( SingleValueInstruction * I)",39, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::findSubPathAccessed( BeginAccessInst * BAI)",19, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::getSubPathDescription( SILType baseType , const IndexTrieNode * subPath , SILModule & M)",41, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"subPathLength( const IndexTrieNode * subPath)",11, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::compareSubPaths( const IndexTrieNode * lhs , const IndexTrieNode * rhs)",21, 2, 0, 0
repos/cpp/swift/lib/SILOptimizer/Analysis/AccessSummaryAnalysis.cpp,"AccessSummaryAnalysis::FunctionSummary::print( raw_ostream & os , SILFunction * fn) const",16, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"swift::SILParserTUState::SILParserTUState( SILModule & M)",1, 52, 2, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::~SILParserTUState()",18, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserState::SILParserState( SILModule * M)",2, 69, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"PrettyStackTraceParser::print( llvm :: raw_ostream & out) const",5, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseIntoSourceFileImpl( SourceFile & SF , unsigned BufferID , bool * Done , SILParserState * SIL , PersistentParserState * PersistentState , DelayedParsingCallbacks * DelayedParseCB , bool FullParse)",28, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"swift::parseIntoSourceFile( SourceFile & SF , unsigned BufferID , bool * Done , SILParserState * SIL , PersistentParserState * PersistentState , DelayedParsingCallbacks * DelayedParseCB)",10, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"swift::parseIntoSourceFileFull( SourceFile & SF , unsigned BufferID , PersistentParserState * PersistentState , DelayedParsingCallbacks * DelayedParseCB)",8, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::SILParser( Parser & P)",4, 48, 8, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::UnresolvedValueName::isUndef() const",1, 55, 6, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::getDebugLoc( SILBuilder & B , SILLocation Loc)",3, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILIdentifier( Identifier & Result , Diag<DiagArgTypes...> ID , ArgTypes ... Args)",5, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILIdentifierSwitch( T & Result , ArrayRef<StringRef> Strings , Diag<DiagArgTypes...> ID , ArgTypes ... Args)",17, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILIdentifier( Identifier & Result , SourceLoc & L , Diag<DiagArgTypes...> ID , ArgTypes ... Args)",4, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseInteger( T & Result , const Diagnostic & D)",9, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseIntegerLiteral( StringRef text , unsigned radix , T & result)",4, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::prepareIntegerLiteralForParsing( StringRef text)",7, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseASTType( CanType & result , SourceLoc & TypeLoc)",4, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseASTType( CanType & result , SourceLoc & TypeLoc , GenericEnvironment * env)",6, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILOwnership( ValueOwnershipKind & OwnershipKind)",13, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILType( SILType & Result)",4, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILType( SILType & Result , SourceLoc & TypeLoc)",4, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILType( SILType & Result , SourceLoc & TypeLoc , GenericEnvironment * & parsedGenericEnv , GenericEnvironment * parentGenericEnv = nullptr)",6, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILDottedPath( ValueDecl * & Decl)",4, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILDottedPathWithoutPound( ValueDecl * & Decl)",4, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILDeclRef( SILDeclRef & Result)",4, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseTypedValueRef( SILValue & Result , SILBuilder & B)",4, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseProtocolConformance( ProtocolDecl * defaultForProto , ConformanceContext context)",6, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::ParsedEnum::isSet() const",1, 54, 6, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::ParsedEnum::operator *() const",1, 45, 6, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::setEnum( ParsedEnum<T> & existing , T value , StringRef name , SourceLoc loc)",15, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::maybeSetEnum( bool allowed , ParsedEnum<T> & existing , T value , StringRef name , SourceLoc loc)",7, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILIdentifier( Identifier & Result , SourceLoc & Loc , const Diagnostic & D)",33, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseVerbatim( StringRef name)",13, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::diagnoseProblems()",21, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::getGlobalNameForDefinition( Identifier name , CanSILFunctionType ty , SourceLoc sourceLoc)",42, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::getGlobalNameForReference( Identifier name , CanSILFunctionType funcTy , SourceLoc sourceLoc , bool ignoreFwdRef)",28, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::getBBForDefinition( Identifier Name , SourceLoc Loc)",24, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::getBBForReference( Identifier Name , SourceLoc Loc)",12, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseGlobalName( Identifier & Name)",4, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::getLocalValue( UnresolvedValueName Name , SILType Type , SILLocation Loc , SILBuilder & B)",30, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::setLocalValue( ValueBase * Value , StringRef Name , SourceLoc NameLoc)",30, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseSILLinkage( Optional<SILLinkage> & Result , Parser & P)",41, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"resolveSILLinkage( Optional<SILLinkage> linkage , bool isDefinition)",10, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseSILOptional( StringRef & Result , SourceLoc & Loc , SILParser & SP)",10, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseSILOptional( StringRef & Result , SILParser & SP)",4, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseSILOptional( bool & Result , SILParser & SP , StringRef Expected)",9, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"IdentTypeReprLookup::IdentTypeReprLookup( Parser & P)",1, 45, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"IdentTypeReprLookup::walkToTypeReprPre( TypeRepr * Ty)",10, 6, 4, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::convertRequirements( SILFunction * F , ArrayRef<RequirementRepr> From , SmallVectorImpl<Requirement> & To)",51, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseDeclSILOptional( bool * isTransparent , IsSerialized_t * isSerialized , bool * isCanonical , IsThunk_t * isThunk , IsDynamicallyReplaceable_t * isDynamic , SILFunction ** dynamicallyReplacedFunction , Identifier * objCReplacementFor , bool * isGlobalInit , Inline_t * inlineStrategy , OptimizationMode * optimizationMode , bool * isLet , bool * isWeakLinked , bool * isWithoutActuallyEscapingThunk , SmallVectorImpl<std::string> * Semantics , SmallVectorImpl<ParsedSpecAttr> * SpecAttrs , ValueDecl ** ClangDecl , EffectsKind * MRK , SILParser & SP , SILModule & M)",160, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::performTypeLocChecking( TypeLoc & T , bool IsSILType , GenericEnvironment * GenericEnv , DeclContext * DC)",19, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"lookupTopDecl( Parser & P , DeclBaseName Name)",12, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"lookupMember( Parser & P , Type Ty , DeclBaseName Name , SourceLoc Loc , SmallVectorImpl<ValueDecl*> & Lookup , bool ExpectMultipleResults)",25, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseASTType( CanType & result , GenericEnvironment * env)",16, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILType( SILType & Result , GenericEnvironment * & ParsedGenericEnv , bool IsFuncDecl , GenericEnvironment * OuterGenericEnv)",85, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILDottedPath( ValueDecl * & Decl , SmallVectorImpl<ValueDecl*> & values)",6, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILDottedPathWithoutPound( ValueDecl * & Decl , SmallVectorImpl<ValueDecl*> & values)",57, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"getAccessorKind( StringRef ident)",10, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILDeclRef( SILDeclRef & Result , SmallVectorImpl<ValueDecl*> & values)",104, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseValueName( UnresolvedValueName & Result)",15, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseValueRef( SILValue & Result , SILType Ty , SILLocation Loc , SILBuilder & B)",7, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseTypedValueRef( SILValue & Result , SourceLoc & Loc , SILBuilder & B)",14, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"getOpcodeByName( StringRef OpcodeName)",7, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILOpcode( SILInstructionKind & Opcode , SourceLoc & OpcodeLoc , StringRef & OpcodeName)",16, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"peekSILDebugLocation( Parser & P)",4, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILDebugVar( SILDebugVariable & Var)",37, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILBBArgsAtBranch( SmallVector<SILValue,6> & Args , SILBuilder & B)",22, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"bindProtocolSelfInTypeRepr( TypeLoc & TL , ProtocolDecl * proto)",29, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSubstitutions( SmallVectorImpl<ParsedSubstitution> & parsed , GenericEnvironment * GenericEnv , ProtocolDecl * defaultForProto)",35, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"getConformancesForSubstitution( Parser & P , ExistentialLayout :: ProtocolTypeArrayRef protocols , Type subReplacement , SourceLoc loc , SmallVectorImpl<ProtocolConformanceRef> & conformances)",22, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"getApplySubstitutionsFromParsed( SILParser & SP , GenericEnvironment * env , ArrayRef<ParsedSubstitution> parses)",52, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"collectExistentialConformances( Parser & P , CanType conformingType , SourceLoc loc , CanType protocolType)",23, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILLocation( SILLocation & Loc)",25, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseScopeRef( SILDebugScope * & DS)",13, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILDebugLocation( SILLocation & L , SILBuilder & B , bool parsedComma)",30, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseLoadOwnershipQualifier( LoadOwnershipQualifier & Result , SILParser & P)",25, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseStoreOwnershipQualifier( StoreOwnershipQualifier & Result , SILParser & P)",25, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILDeclRef( SILDeclRef & Member , bool FnTypeRequired)",77, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseKeyPathPatternComponent( KeyPathPatternComponent & component , SmallVectorImpl<SILType> & operandTypes , SourceLoc componentLoc , Identifier componentKind , SILLocation InstLoc , GenericEnvironment * patternEnv)",271, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILInstruction( SILBuilder & B)",2615, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseCallInstruction( SILLocation InstLoc , SILInstructionKind Opcode , SILBuilder & B , SILInstruction * & ResultVal)",178, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILFunctionRef( SILLocation InstLoc , SILFunction * & ResultFn)",19, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::isStartOfSILInstruction()",14, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILBasicBlock( SILBuilder & B)",87, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::parseDeclSIL( Parser & P)",149, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::parseDeclSILStage( Parser & P)",31, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"lookupGlobalDecl( Identifier GlobalName , SILLinkage GlobalLinkage , SILType GlobalType , Parser & P)",34, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::parseSILGlobal( Parser & P)",52, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::parseSILProperty( Parser & P)",65, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::parseSILVTable( Parser & P)",102, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseProtocolDecl( Parser & P , SILParser & SP)",19, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseAssociatedTypeDecl( Parser & P , SILParser & SP , ProtocolDecl * proto)",18, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseAssociatedTypePath( SILParser & SP , SmallVectorImpl<Identifier> & path)",12, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"matchesAssociatedTypePath( CanType assocType , ArrayRef<Identifier> path)",11, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseAssociatedTypePath( Parser & P , SILParser & SP , ProtocolDecl * proto)",27, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"isSelfConformance( Type conformingType , ProtocolDecl * protocol)",5, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseRootProtocolConformance( Parser & P , SILParser & SP , Type ConformingTy , ProtocolDecl * & proto , ConformanceContext context)",40, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseProtocolConformance( ProtocolDecl * & proto , GenericEnvironment * & genericEnv , ConformanceContext context , ProtocolDecl * defaultForProto)",27, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseProtocolConformanceHelper( ProtocolDecl * & proto , GenericEnvironment * witnessEnv , ConformanceContext context , ProtocolDecl * defaultForProto)",74, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"parseSILVTableEntry( Parser & P , SILModule & M , ProtocolDecl * proto , GenericEnvironment * witnessEnv , SILParser & witnessState , bool isDefaultWitnessTable , std :: vector<SILWitnessTable::Entry> & witnessEntries , std :: vector<SILWitnessTable::ConditionalConformance> & conditionalConformances)",163, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::parseSILWitnessTable( Parser & P)",92, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::parseSILDefaultWitnessTable( Parser & P)",51, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParser::parseSILCoverageExpr( llvm :: coverage :: CounterExpressionBuilder & Builder)",49, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::parseSILCoverageMap( Parser & P)",81, 2, 0, 0
repos/cpp/swift/lib/ParseSIL/ParseSIL.cpp,"SILParserTUState::parseSILScope( Parser & P)",69, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"operator +( RemoteAddress address , Size offset)",3, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"IRGenContext::IRGenContext( ASTContext & ctx , ModuleDecl * module)",5, 62, 6, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"IRGenContext::createIRGenOptions()",4, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"IRGenContext::create( ASTContext & ctx , DeclContext * nominalDC)",4, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::getOffsetOfMember( Type type , RemoteAddress optMetadata , StringRef memberName)",20, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::getFailureAsResult( DefaultFailureKindTy defaultFailureKind , DefaultFailureArgTys && ... defaultFailureArgs)",13, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::getFailure()",3, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::fail( KindTy kind , ArgTys && ... args)",3, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::getIRGen()",4, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::getOffsetOfField( Type type , NominalTypeDecl * typeDecl , RemoteAddress optMetadata , StringRef memberName)",31, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::findField( NominalTypeDecl * typeDecl , StringRef memberName)",7, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::getOffsetOfFieldFromIRGen( irgen :: IRGenModule & IGM , Type type , NominalTypeDecl * typeDecl , RemoteAddress optMetadata , VarDecl * member)",62, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::readOffset( RemoteAddress address , MemberAccessStrategy :: OffsetKind kind , Size & offset)",14, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::readIndirectOffset( RemoteAddress metadata , Size indirectOffset , MemberAccessStrategy :: OffsetKind kind)",6, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::readDirectOffset( RemoteAddress directOffsetAddress , MemberAccessStrategy :: OffsetKind kind)",8, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::getOffsetOfTupleElement( TupleType * type , RemoteAddress optMetadata , StringRef memberName)",61, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextImpl::getTypeSizeAndAlignment( irgen :: IRGenModule & IGM , SILType eltTy)",10, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getBuilder()",3, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getReader()",3, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::readWordOffset( RemoteAddress address , int64_t * extendedOffset)",10, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::RemoteASTContextConcreteImpl( std :: shared_ptr<MemoryReader> && reader , ASTContext & ctx)",3, 40, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getTypeForRemoteTypeMetadata( RemoteAddress metadata , bool skipArtificial)",7, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getKindForRemoteTypeMetadata( RemoteAddress metadata)",6, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getDeclForRemoteNominalTypeDescriptor( RemoteAddress descriptor)",6, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::createIRGenContext()",4, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getOffsetOfTupleElementFromMetadata( RemoteAddress metadata , unsigned index)",8, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getOffsetOfFieldFromMetadata( RemoteAddress metadata , StringRef memberName)",6, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getHeapMetadataForObject( RemoteAddress object)",5, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getDynamicTypeAndAddressClassExistential( RemoteAddress object)",13, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getDynamicTypeAndAddressErrorExistential( RemoteAddress object)",18, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getDynamicTypeAndAddressOpaqueExistential( RemoteAddress object)",14, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getDynamicTypeAndAddressExistentialMetatype( RemoteAddress object)",18, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContextConcreteImpl::getDynamicTypeAndAddressForExistential( RemoteAddress object , Type staticType)",22, 4, 2, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"createImpl( ASTContext & ctx , std :: shared_ptr<MemoryReader> && reader)",13, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"asImpl( void * impl)",3, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContext::RemoteASTContext( ASTContext & ctx , std :: shared_ptr<MemoryReader> reader)",4, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContext::~RemoteASTContext()",3, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContext::getTypeForRemoteTypeMetadata( RemoteAddress address , bool skipArtificial)",4, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContext::getKindForRemoteTypeMetadata( remote :: RemoteAddress address)",3, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContext::getDeclForRemoteNominalTypeDescriptor( RemoteAddress address)",3, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContext::getOffsetOfMember( Type type , RemoteAddress optMetadata , StringRef memberName)",4, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContext::getHeapMetadataForObject( remote :: RemoteAddress address)",3, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/RemoteAST.cpp,"RemoteASTContext::getDynamicTypeAndAddressForExistential( remote :: RemoteAddress address , Type staticType)",5, 2, 0, 0
repos/cpp/swift/lib/RemoteAST/InProcessMemoryReader.cpp,"InProcessMemoryReader::getSymbolAddress( const std :: string & name)",8, 2, 0, 0
repos/cpp/swift/lib/ASTSectionImporter/ASTSectionImporter.cpp,"swift::parseASTSection( SerializedModuleLoader * SML , StringRef buf , SmallVectorImpl<std::string> & foundModules)",43, 2, 0, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"TokenInfo::TokenInfo( const Token * StartOfLineTarget , const Token * StartOfLineBeforeTarget)",4, 56, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"TokenInfo::TokenInfo()",1, 47, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"TokenInfo::operator bool()",1, 75, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"getVarDeclInitEnd( VarDecl * VD)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::FormatContext( SourceManager & SM , std :: vector<swift::ASTWalker::ParentTy> & Stack , swift :: ASTWalker :: ParentTy Start = swift :: ASTWalker :: ParentTy() , swift :: ASTWalker :: ParentTy End = swift :: ASTWalker :: ParentTy() , bool InDocCommentBlock = false , bool InCommentLine = false , bool InStringLiteral = false , SiblingAlignInfo SiblingInfo = SiblingAlignInfo())",12, 34, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::parent()",6, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::IsInDocCommentBlock()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::IsInCommentLine()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::IsInStringLiteral() const",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::isSwitchControlStmt( unsigned LineIndex , StringRef Text)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::padToSiblingColumn( StringBuilder & Builder , const CodeFormatOptions & FmtOptions)",25, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::HasSibling()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::needExtraIndentationForSibling()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::lineAndColumn()",28, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::isStmtContext()",6, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::isBraceContext()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::isImplicitBraceContext()",21, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::isCaseContext()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::isSwitchContext()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::indentLineAndColumn()",67, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::exprEndAtLine( Expr * E , unsigned Line)",3, 5, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatContext::shouldAddIndentForLine( unsigned Line , TokenInfo TInfo , const CodeFormatOptions & FmtOptions)",203, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::SourceLocIterator::SourceLocIterator( TokenIt It)",1, 47, 6, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::SourceLocIterator::SourceLocIterator( const SourceLocIterator & mit)",1, 70, 6, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::SourceLocIterator::operator ++()",1, 60, 6, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::SourceLocIterator::operator ++( int)",5, 8, 6, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::SourceLocIterator::operator ==( const SourceLocIterator & rhs)",1, 73, 6, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::SourceLocIterator::operator !=( const SourceLocIterator & rhs)",1, 73, 6, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::SourceLocIterator::operator *()",1, 51, 6, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::SourceLocIterator::operator *() const",1, 65, 6, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::adjustTokenIteratorToImmediateAfter( SourceLoc End)",13, 6, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::isImmediateAfterSeparator( SourceLoc End , tok Separator)",12, 6, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::isTargetImmediateAfter( SourceLoc Loc)",7, 6, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::sameLineWithTarget( SourceLoc Loc)",3, 6, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::SiblingCollector( SourceManager & SM , ArrayRef<Token> Tokens , SourceLoc & TargetLoc)",4, 35, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::collect( ASTNode Node)",85, 7, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::SiblingCollector::getSiblingInfo()",3, 6, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::isTargetPartOf( swift :: ASTWalker :: ParentTy Parent)",16, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::HandlePre( T * Node , SourceLoc Start , SourceLoc End)",24, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::scanForComments( SourceLoc Loc)",16, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::HandlePost( T * Node)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::FormatWalker( SourceFile & SF , SourceManager & SM)",5, 44, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::walkToLocation( SourceLoc Loc)",11, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::getTokens()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::walkToDeclPre( Decl * D , CharSourceRange Range)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::walkToDeclPost( Decl * D)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::walkToStmtPre( Stmt * S)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::walkToStmtPost( Stmt * S)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::walkToExprPre( Expr * E)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::walkToExprPost( Expr * E)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"FormatWalker::shouldWalkInactiveConfigRegion()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"CodeFormatter::CodeFormatter( CodeFormatOptions & Options)",2, 29, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"CodeFormatter::indent( unsigned LineIndex , FormatContext & FC , StringRef Text , TokenInfo ToInfo)",77, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"TokenInfoCollector::Comparator::Comparator( SourceManager & SM)",1, 46, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"TokenInfoCollector::Comparator::operator ( )( const Token & T , unsigned Line) const",3, 6, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"TokenInfoCollector::Comparator::operator ( )( unsigned Line , const Token & T) const",3, 6, 4, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"TokenInfoCollector::TokenInfoCollector( SourceManager & SM , ArrayRef<Token> Tokens , unsigned Line)",2, 64, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"TokenInfoCollector::collect()",13, 4, 2, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"swift::ide::getOffsetOfLine( unsigned LineIndex , StringRef Text)",20, 2, 0, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"swift::ide::getOffsetOfLine( unsigned LineIndex , StringRef Text , bool Trim)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"swift::ide::getTextForLine( unsigned LineIndex , StringRef Text , bool Trim)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"swift::ide::getExpandedIndentForLine( unsigned LineIndex , CodeFormatOptions Options , StringRef Text)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/Formatting.cpp,"swift::ide::reformat( LineRange Range , CodeFormatOptions Options , SourceManager & SM , SourceFile & SF)",26, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"skipParenExpression( const char * p , const char * End)",31, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"skipStringInCode( const char * p , const char * End)",30, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ide::isSourceInputComplete( std :: unique_ptr<llvm::MemoryBuffer> MemBuf , SourceFileKind SFKind)",88, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ide::isSourceInputComplete( StringRef Text , SourceFileKind SFKind)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"adjustClangTriple( StringRef TripleStr)",35, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ide::initInvocationByClangArguments( ArrayRef<const char*> ArgList , CompilerInvocation & Invok , std :: string & Error)",134, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"walkOverriddenClangDecls( const clang :: NamedDecl * D , const FnTy & Fn)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ide::walkOverriddenDecls( const ValueDecl * VD , llvm :: function_ref<void(llvm::PointerUnion<const ValueDecl*,const clang::NamedDecl*>)> Fn)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"findPlaceholder( StringRef Input , PlaceholderOccurrence & Occur)",27, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ide::replacePlaceholders( std :: unique_ptr<llvm::MemoryBuffer> InputBuf , llvm :: function_ref<void(const PlaceholderOccurrence&)> Callback)",48, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ide::replacePlaceholders( std :: unique_ptr<llvm::MemoryBuffer> InputBuf , bool * HadPlaceholder)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"getPlistEntry( const llvm :: Twine & Path , StringRef KeyName)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ide::getSDKName( StringRef Path)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ide::getSDKVersion( StringRef Path)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"getOSXModuleList()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"getiOSModuleList()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"getDeviceOnlyModuleList()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ide::collectModuleNames( StringRef SDKPath , std :: vector<std::string> & Modules)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"DeclNameViewer::DeclNameViewer( StringRef Text)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"DeclNameViewer::commonPartsCount( DeclNameViewer & Other) const",13, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditConsumer::accept( SourceManager & SM , SourceLoc Loc , StringRef Text , ArrayRef<NoteRegion> SubRegions)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditConsumer::accept( SourceManager & SM , CharSourceRange Range , StringRef Text , ArrayRef<NoteRegion> SubRegions)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditConsumer::insertAfter( SourceManager & SM , SourceLoc Loc , StringRef Text , ArrayRef<NoteRegion> SubRegions)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditConsumer::remove( SourceManager & SM , CharSourceRange Range)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditJsonConsumer::Implementation::Implementation( llvm :: raw_ostream & OS)",1, 52, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditJsonConsumer::Implementation::~Implementation()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditJsonConsumer::Implementation::accept( SourceManager & SM , CharSourceRange Range , llvm :: StringRef Text)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditJsonConsumer::SourceEditJsonConsumer( llvm :: raw_ostream & OS)",2, 35, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditJsonConsumer::~SourceEditJsonConsumer()",1, 80, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditJsonConsumer::accept( SourceManager & SM , RegionType Type , ArrayRef<Replacement> Replacements)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ClangFileRewriterHelper::removeCommentLines( clang :: RewriteBuffer & Buffer , StringRef Input , StringRef LineHeader)",16, 4, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ClangFileRewriterHelper::ClangFileRewriterHelper( SourceManager & SM , unsigned InterestedId , llvm :: raw_ostream & OS)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ClangFileRewriterHelper::replaceText( SourceManager & SM , CharSourceRange Range , StringRef Text)",11, 4, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"ClangFileRewriterHelper::~ClangFileRewriterHelper()",4, 4, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditOutputConsumer::Implementation::Implementation( SourceManager & SM , unsigned BufferId , llvm :: raw_ostream & OS)",2, 34, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditOutputConsumer::Implementation::accept( SourceManager & SM , CharSourceRange Range , StringRef Text)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditOutputConsumer::SourceEditOutputConsumer( SourceManager & SM , unsigned BufferId , llvm :: raw_ostream & OS)",3, 74, 2, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditOutputConsumer::~SourceEditOutputConsumer()",1, 84, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::SourceEditOutputConsumer::accept( SourceManager & SM , RegionType RegionType , ArrayRef<Replacement> Replacements)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::isFromClang( const Decl * D)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::getEffectiveClangNode( const Decl * decl)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/Utils.cpp,"swift::ide::extensionGetClangNode( const ExtensionDecl * ext)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"swift::ide::parseLineCol( StringRef LineCol)",23, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"XMLEscapingPrinter::printText( StringRef Text)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"XMLEscapingPrinter::printXML( StringRef Text)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::getSourceMgr() const",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::tryResolve( ValueDecl * D , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , SourceLoc Loc , bool IsRef , Type Ty)",12, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::tryResolve( ModuleEntity Mod , SourceLoc Loc)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::tryResolve( Stmt * St)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::visitSubscriptReference( ValueDecl * D , CharSourceRange Range , Optional<AccessKind> AccKind , bool IsOpenBracket)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::resolve( SourceLoc Loc)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::walkToDeclPre( Decl * D , CharSourceRange Range)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::walkToDeclPost( Decl * D)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::walkToStmtPre( Stmt * S)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::walkToStmtPost( Stmt * S)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::walkToExprPre( Expr * E)",29, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::walkToExprPost( Expr * E)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::visitCallArgName( Identifier Name , CharSourceRange Range , ValueDecl * D)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::visitDeclarationArgumentName( Identifier Name , SourceLoc StartLoc , ValueDecl * D)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::visitModuleReference( ModuleEntity Mod , CharSourceRange Range)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::getSourceMgr() const",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::rangeContainsLoc( SourceRange Range) const",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CursorInfoResolver::rangeContainsLoc( CharSourceRange Range) const",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::resolve( ArrayRef<UnresolvedLoc> Locs , ArrayRef<Token> Tokens)",38, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"getLabelRanges( const ParameterList * List , const SourceManager & SM)",21, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"getEnumParamListInfo( SourceManager & SM , ParameterList * PL)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToDeclPre( Decl * D)",64, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToDeclPost( Decl * D)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToStmtPre( Stmt * S)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToStmtPost( Stmt * S)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToExprPre( Expr * E)",94, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToExprPost( Expr * E)",28, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToTypeLocPre( TypeLoc & TL)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToTypeLocPost( TypeLoc & TL)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToTypeReprPre( TypeRepr * T)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToTypeReprPost( TypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::walkToPatternPre( Pattern * P)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::checkComments()",15, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::skipLocsBefore( SourceLoc Start)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::shouldSkip( Expr * E)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::shouldSkip( SourceRange Range)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::shouldSkip( CharSourceRange Range)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::nextLoc() const",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"getSelectorLabelRanges( SourceManager & SM , DeclNameLoc NameLoc)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::tryResolve( ASTWalker :: ParentTy Node , DeclNameLoc NameLoc , Expr * Arg , bool checkParentForLabels)",40, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::tryResolve( ASTWalker :: ParentTy Node , SourceLoc NameLoc)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"NameMatcher::tryResolve( ASTWalker :: ParentTy Node , SourceLoc NameLoc , LabelRangeType RangeType , ArrayRef<CharSourceRange> LabelRanges)",18, 3, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"ResolvedRangeInfo::print( llvm :: raw_ostream & OS)",81, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"ResolvedRangeInfo::calculateContentRange( ArrayRef<Token> Tokens)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"DeclaredDecl::operator ==( const DeclaredDecl & Other)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"hasUnhandledError( ArrayRef<ASTNode> Nodes)",36, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"ReturnInfo::ReturnInfo( ASTContext & Ctx , ArrayRef<ReturnInfo> Branches)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::ContextInfo::ContextInfo( ASTNode Parent , bool ContainedInRange)",2, 44, 4, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::ContextInfo::isMultiStatement()",14, 6, 4, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::ContextInfo::isMultiTypeMemberDecl()",10, 6, 4, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::getCurrentDC()",4, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::resolveNodeType( ASTNode N , RangeKind Kind)",59, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::getSingleNodeKind( ASTNode Node)",43, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::isContainedInSelection( CharSourceRange Range)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::getImmediateContext()",7, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::Implementation( SourceFile & File , ArrayRef<Token> TokensInRange)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::hasResult()",1, 49, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::enter( ASTNode Node)",16, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::leave( ASTNode Node)",22, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::createInstance( SourceFile & File , unsigned StartOff , unsigned Length)",39, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::createInstance( SourceFile & File , SourceLoc Start , SourceLoc End)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::analyzeDecl( Decl * D)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::CompleteWalker::walkToDeclPre( Decl * D , CharSourceRange Range)",6, 6, 4, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::CompleteWalker::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",6, 6, 4, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::CompleteWalker::CompleteWalker( Implementation * Impl)",1, 57, 4, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::FurtherReferenceWalker::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",16, 6, 4, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::FurtherReferenceWalker::FurtherReferenceWalker( Implementation * Impl)",1, 65, 4, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::postAnalysis( ASTNode EndNode)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::hasSingleEntryPoint( ArrayRef<ASTNode> Nodes)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::getOrphanKind( ArrayRef<ASTNode> Nodes)",39, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::analyze( ASTNode Node)",77, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::shouldEnter( ASTNode Node)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::nodeContainSelection( ASTNode Node)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::shouldAnalyze( ASTNode Node)",11, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::getResult()",5, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::analyzeDeclRef( ValueDecl * VD , SourceLoc Start , Type Ty , ReferenceMetaData Data)",41, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::Implementation::getRangeMatchKind( SourceRange Input)",12, 4, 2, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::RangeResolver( SourceFile & File , SourceLoc Start , SourceLoc End)",2, 60, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::RangeResolver( SourceFile & File , unsigned Offset , unsigned Length)",2, 64, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::walkToExprPre( Expr * E)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::walkToStmtPre( Stmt * S)",7, 3, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::walkToDeclPre( Decl * D , CharSourceRange Range)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::walkToExprPost( Expr * E)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::walkToStmtPost( Stmt * S)",4, 3, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::walkToDeclPost( Decl * D)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"RangeResolver::resolve()",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"swift::ide::getLocationInfoForClangNode( ClangNode ClangNode , ClangImporter * Importer , llvm :: Optional<std::pair<unsigned,unsigned>> & DeclarationLoc , StringRef & Filename)",32, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"getCharLength( SourceManager & SM , SourceRange TokenRange)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"swift::ide::getLocationInfo( const ValueDecl * VD , llvm :: Optional<std::pair<unsigned,unsigned>> & DeclarationLoc , StringRef & Filename)",35, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"CallArgInfo::getEntireCharRange( const SourceManager & SM) const",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"getSingleNonImplicitChild( Expr * Parent)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"swift::ide::getCallArgInfo( SourceManager & SM , Expr * Arg , LabelRangeEndAt EndKind)",27, 2, 0, 0
repos/cpp/swift/lib/IDE/SwiftSourceDocInfo.cpp,"swift::ide::getCallArgLabelRanges( SourceManager & SM , Expr * Arg , LabelRangeEndAt EndKind)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::operator < <( raw_ostream & Out , const SDKNodeKind Value)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::operator < <( raw_ostream & Out , const NodeAnnotation Value)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::getDeclKindStr( const DeclKind Value)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::operator < <( raw_ostream & Out , const DeclKind Value)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::parseSDKNodeKind( StringRef Content)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::parseSDKNodeAnnotation( StringRef Content)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::parseSpecialCaseId( StringRef Content)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::CommonDiffItem::CommonDiffItem( SDKNodeKind NodeKind , NodeAnnotation DiffKind , StringRef ChildIndex , StringRef LeftUsr , StringRef RightUsr , StringRef LeftComment , StringRef RightComment , StringRef ModuleName)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::CommonDiffItem::head()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::CommonDiffItem::operator <( CommonDiffItem Other) const",11, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::CommonDiffItem::describe( llvm :: raw_ostream & os)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::CommonDiffItem::undef( llvm :: raw_ostream & os)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::CommonDiffItem::streamDef( llvm :: raw_ostream & S) const",6, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::TypeMemberDiffItem::head()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::TypeMemberDiffItem::getSubKind() const",43, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::TypeMemberDiffItem::describe( llvm :: raw_ostream & os)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::TypeMemberDiffItem::undef( llvm :: raw_ostream & os)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::TypeMemberDiffItem::streamDef( llvm :: raw_ostream & os) const",11, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::TypeMemberDiffItem::operator <( TypeMemberDiffItem Other) const",4, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::NoEscapeFuncParam::head()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::NoEscapeFuncParam::describe( llvm :: raw_ostream & os)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::NoEscapeFuncParam::undef( llvm :: raw_ostream & os)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::NoEscapeFuncParam::streamDef( llvm :: raw_ostream & os) const",5, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::NoEscapeFuncParam::operator <( NoEscapeFuncParam Other) const",6, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::OverloadedFuncInfo::head()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::OverloadedFuncInfo::describe( llvm :: raw_ostream & os)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::OverloadedFuncInfo::undef( llvm :: raw_ostream & os)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::OverloadedFuncInfo::streamDef( llvm :: raw_ostream & os) const",4, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::OverloadedFuncInfo::operator <( OverloadedFuncInfo Other) const",4, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"APIDiffItem::operator ==( const APIDiffItem & Other) const",25, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"getKeyContent( DiffItemKeyKind KK)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"parseKeyKind( StringRef Content)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"parseDiffItemKind( StringRef Content)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"getScalarString( llvm :: yaml :: Node * N)",4, 3, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"getScalarInt( llvm :: yaml :: Node * N)",3, 3, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"serializeDiffItem( llvm :: BumpPtrAllocator & Alloc , llvm :: yaml :: MappingNode * Node)",48, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::json::ScalarEnumerationTraits<APIDiffItemKind>::enumeration( Output & out , APIDiffItemKind & value)",4, 4, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::json::ScalarEnumerationTraits<NodeAnnotation>::enumeration( Output & out , NodeAnnotation & value)",4, 4, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::json::ObjectTraits<APIDiffItem*>::mapping( Output & out , APIDiffItem * & value)",61, 4, 2, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::json::ArrayTraits<ArrayRef<APIDiffItem*>>::size( Output & out , ArrayRef<APIDiffItem*> & seq)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::json::ArrayTraits<ArrayRef<APIDiffItem*>>::element( Output & , ArrayRef<APIDiffItem*> & seq , size_t index)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::json::ObjectTraits<NameCorrectionInfo>::mapping( Output & out , NameCorrectionInfo & value)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::json::ArrayTraits<ArrayRef<NameCorrectionInfo>>::size( Output & out , ArrayRef<NameCorrectionInfo> & seq)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::json::ArrayTraits<ArrayRef<NameCorrectionInfo>>::element( Output & , ArrayRef<NameCorrectionInfo> & seq , size_t index)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::serialize( llvm :: raw_ostream & os , ArrayRef<APIDiffItem*> Items)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::serialize( llvm :: raw_ostream & os , ArrayRef<NameCorrectionInfo> Items)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::Implementation::shouldInclude( APIDiffItem * Item)",14, 4, 2, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::Implementation::Implementation( DiagnosticEngine & Diags)",1, 59, 2, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::Implementation::addStorePath( StringRef FileName)",30, 4, 2, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::getDiffItems( StringRef Key) const",8, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::getAllDiffItems() const",2, 50, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::APIDiffItemStore( DiagnosticEngine & Diags)",2, 38, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::~APIDiffItemStore()",1, 73, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::addStorePath( StringRef Path)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/APIDigesterData.cpp,"swift::ide::api::APIDiffItemStore::printIncomingUsr( bool print)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"swift::sys::CacheValueCostInfo<swift::ide::CodeCompletionCacheImpl::Value>::getCost( const swift :: ide :: CodeCompletionCacheImpl :: Value & V)",3, 8, 6, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"CodeCompletionCache::createValue()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"CodeCompletionCache::get( const Key & K)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"CodeCompletionCache::setImpl( const Key & K , ValueRefCntPtr V , bool setChain)",20, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"CodeCompletionCache::CodeCompletionCache( OnDiskCodeCompletionCache * nextCache)",2, 67, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"CodeCompletionCache::~CodeCompletionCache()",1, 47, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"copyString( llvm :: BumpPtrAllocator & Allocator , StringRef Str)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"copyStringArray( llvm :: BumpPtrAllocator & Allocator , ArrayRef<StringRef> Arr)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"copyStringPairArray( llvm :: BumpPtrAllocator & Allocator , ArrayRef<std::pair<StringRef,StringRef>> Arr)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"readCachedModule( llvm :: MemoryBuffer * in , const CodeCompletionCache :: Key & K , CodeCompletionCache :: Value & V , bool allowOutOfDate = false)",137, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"writeCachedModule( llvm :: raw_ostream & out , const CodeCompletionCache :: Key & K , CodeCompletionCache :: Value & V)",122, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"getName( StringRef cacheDirectory , const CodeCompletionCache :: Key & K)",26, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"OnDiskCodeCompletionCache::get( const Key & K)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"OnDiskCodeCompletionCache::set( const Key & K , ValueRefCntPtr V)",26, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"OnDiskCodeCompletionCache::getFromFile( StringRef filename)",18, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"OnDiskCodeCompletionCache::OnDiskCodeCompletionCache( Twine cacheDirectory)",2, 46, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletionCache.cpp,"OnDiskCodeCompletionCache::~OnDiskCodeCompletionCache()",1, 59, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ContextFinder::contains( ASTNode Enclosing)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ContextFinder::ContextFinder( SourceFile & SF , ASTNode TargetNode , llvm :: function_ref<bool(ASTNode)> IsContext = [ ](ASTNode N) { return true ; })",5, 79, 18, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ContextFinder::ContextFinder( SourceFile & SF , SourceLoc TargetLoc , llvm :: function_ref<bool(ASTNode)> IsContext = [ ](ASTNode N) { return true ; })",7, 20, 18, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ContextFinder::walkToDeclPre( Decl * D , CharSourceRange Range)",1, 86, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ContextFinder::walkToStmtPre( Stmt * S)",1, 63, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ContextFinder::walkToExprPre( Expr * E)",1, 63, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ContextFinder::resolve()",1, 31, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ContextFinder::getContexts() const",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::Renamer( const SourceManager & SM , StringRef OldName)",1, 80, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::~Renamer()",1, 24, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::renameBase( CharSourceRange Range , RefactoringRangeKind RangeKind)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::renameLabels( ArrayRef<CharSourceRange> LabelRanges , LabelRangeType RangeType , bool isCallSite)",19, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::isOperator() const",1, 68, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::splitAndRenameLabel( CharSourceRange Range , LabelRangeType RangeType , size_t NameIndex)",16, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::splitAndRenameParamLabel( CharSourceRange Range , size_t NameIndex , bool IsCollapsible)",42, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::splitAndRenameCallArg( CharSourceRange Range , size_t NameIndex)",24, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::labelRangeMatches( CharSourceRange Range , LabelRangeType RangeType , StringRef Expected)",21, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::renameLabelsLenient( ArrayRef<CharSourceRange> LabelRanges , LabelRangeType RangeType)",42, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::getSyntacticRenameRegionType( const ResolvedLoc & Resolved)",14, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"Renamer::addSyntacticRenameRanges( const ResolvedLoc & Resolved , const RenameLoc & Config)",73, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeDetailCollector::doRenameLabel( CharSourceRange Label , RefactoringRangeKind RangeKind , unsigned NameIndex)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeDetailCollector::doRenameBase( CharSourceRange Range , RefactoringRangeKind RangeKind)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeDetailCollector::RenameRangeDetailCollector( const SourceManager & SM , StringRef OldName)",2, 32, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::registerText( StringRef Text)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::getCallArgLabelReplacement( StringRef OldLabelRange , StringRef NewLabel)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::getCallArgColonReplacement( StringRef OldLabelRange , StringRef NewLabel)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::getCallArgCombinedReplacement( StringRef OldArgLabel , StringRef NewArgLabel)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::getParamNameReplacement( StringRef OldParam , StringRef OldArgLabel , StringRef NewArgLabel)",15, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::getDeclArgumentLabelReplacement( StringRef OldLabelRange , StringRef NewArgLabel)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::getReplacementText( StringRef LabelRange , RefactoringRangeKind RangeKind , StringRef OldLabel , StringRef NewLabel)",22, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::addReplacement( CharSourceRange LabelRange , RefactoringRangeKind RangeKind , StringRef OldLabel , StringRef NewLabel)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::doRenameLabel( CharSourceRange Label , RefactoringRangeKind RangeKind , unsigned NameIndex)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::doRenameBase( CharSourceRange Range , RefactoringRangeKind)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::TextReplacementsRenamer( const SourceManager & SM , StringRef OldName , StringRef NewName , llvm :: StringSet<> & ReplaceTextContext)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TextReplacementsRenamer::getReplacements() const",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"getRelatedSystemDecl( const ValueDecl * VD)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"getAvailableRenameForDecl( const ValueDecl * VD)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::RenameRangeCollector( StringRef USR , StringRef newName)",2, 50, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::RenameRangeCollector( const ValueDecl * D , StringRef newName)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::results() const",1, 60, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::indexLocals()",1, 47, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::failed( StringRef error)",1, 43, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::recordHash( StringRef hash , bool isKnown)",1, 74, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::startDependency( StringRef name , StringRef path , bool isClangModule , bool isSystem , StringRef hash)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::finishDependency( bool isClangModule)",1, 70, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::startSourceEntity( const IndexSymbol & symbol)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::finishSourceEntity( SymbolInfo symInfo , SymbolRoleSet roles)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RenameRangeCollector::indexSymbolToRenameLoc( const index :: IndexSymbol & symbol , StringRef newName)",42, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"collectSourceFiles( ModuleDecl * MD , llvm :: SmallVectorImpl<SourceFile*> & Scratch)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"getContainingFile( ModuleDecl * M , RangeConfig Range)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringAction::RefactoringAction( ModuleDecl * MD , RefactoringOptions & Opts , SourceEditConsumer & EditConsumer , DiagnosticConsumer & DiagConsumer)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"TokenBasedRefactoringAction::TokenBasedRefactoringAction( ModuleDecl * MD , RefactoringOptions & Opts , SourceEditConsumer & EditConsumer , DiagnosticConsumer & DiagConsumer)",11, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RangeBasedRefactoringAction::RangeBasedRefactoringAction( ModuleDecl * MD , RefactoringOptions & Opts , SourceEditConsumer & EditConsumer , DiagnosticConsumer & DiagConsumer)",6, 35, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionLocalRename::isApplicable( ResolvedCursorInfo CursorInfo , DiagnosticEngine & Diag)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"analyzeRenameScope( ValueDecl * VD , DiagnosticEngine & Diags , llvm :: SmallVectorImpl<DeclContext*> & Scopes)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionLocalRename::performChange()",35, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"getDefaultPreferredName( RefactoringKind Kind)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExtractCheckResult::ExtractCheckResult()",1, 46, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExtractCheckResult::ExtractCheckResult( ArrayRef<CannotExtractReason> AllReasons)",2, 77, 4, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExtractCheckResult::success()",1, 41, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExtractCheckResult::success( llvm :: ArrayRef<CannotExtractReason> ExpectedReasons)",12, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"checkExtractConditions( ResolvedRangeInfo & RangeInfo , DiagnosticEngine & DiagEngine)",97, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExtractFunction::isApplicable( ResolvedRangeInfo Info , DiagnosticEngine & Diag)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"correctNameInternal( ASTContext & Ctx , StringRef Name , ArrayRef<ValueDecl*> AllVisibles)",29, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"correctNewDeclName( DeclContext * DC , StringRef Name)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"sanitizeType( Type Ty)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"getNewFuncInsertLoc( DeclContext * DC , DeclContext * & InsertToContext)",46, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"getNotableRegions( StringRef SourceText , unsigned NameOffset , StringRef Name , bool IsFunctionLike = false , bool IsNonProtocolType = false)",46, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExtractFunction::performChange()",151, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExtractExprBase::RefactoringActionExtractExprBase( SourceFile * TheFile , ResolvedRangeInfo RangeInfo , DiagnosticEngine & DiagEngine , bool ExtractRepeated , StringRef PreferredName , SourceEditConsumer & EditConsumer)",10, 24, 4, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ReferenceCollector::ReferenceCollector( Expr * E)",1, 43, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ReferenceCollector::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ReferenceCollector::operator ==( const ReferenceCollector & Other) const",6, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"SimilarExprCollector::compareTokenContent( ArrayRef<Token> Left , ArrayRef<Token> Right)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"SimilarExprCollector::getExprSlice( Expr * E)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"SimilarExprCollector::SimilarExprCollector( SourceManager & SM , Expr * SelectedExpr , llvm :: ArrayRef<Token> AllTokens , llvm :: SetVector<Expr*> & Bucket)",6, 39, 4, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"SimilarExprCollector::walkToExprPre( Expr * E)",17, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExtractExprBase::performChange()",113, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExtractExpr::isApplicable( ResolvedRangeInfo Info , DiagnosticEngine & Diag)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExtractExpr::performChange()",5, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExtractRepeatedExpr::isApplicable( ResolvedRangeInfo Info , DiagnosticEngine & Diag)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExtractRepeatedExpr::performChange()",5, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionMoveMembersToExtension::isApplicable( ResolvedRangeInfo Info , DiagnosticEngine & Diag)",53, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionMoveMembersToExtension::performChange()",20, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FindAllSubDecls::FindAllSubDecls( llvm :: SmallPtrSetImpl<Decl*> & found)",2, 22, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FindAllSubDecls::walkToDeclPre( Decl * D , CharSourceRange range)",11, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionReplaceBodiesWithFatalError::isApplicable( ResolvedRangeInfo Info , DiagnosticEngine & Diag)",26, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionReplaceBodiesWithFatalError::performChange()",20, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"findCollapseNestedIfTarget( ResolvedCursorInfo CursorInfo)",27, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionCollapseNestedIfStmt::isApplicable( ResolvedCursorInfo CursorInfo , DiagnosticEngine & Diag)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionCollapseNestedIfStmt::performChange()",32, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"findConcatenatedExpressions( ResolvedRangeInfo Info , ASTContext & Ctx)",83, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"interpolatedExpressionForm( Expr * E , SourceManager & SM , llvm :: raw_ostream & OS)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionConvertStringsConcatenationToInterpolation::isApplicable( ResolvedRangeInfo Info , DiagnosticEngine & Diag)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionConvertStringsConcatenationToInterpolation::performChange()",12, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableTernaryExprInfo::~ExpandableTernaryExprInfo()",1, 42, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableTernaryExprInfo::shouldDeclareNameAndType()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableTernaryExprInfo::isValid()",10, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableTernaryExprInfo::getNameCharRange( const SourceManager & SM)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableAssignTernaryExprInfo::ExpandableAssignTernaryExprInfo( AssignExpr * Assign)",1, 73, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableAssignTernaryExprInfo::getIf()",6, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableAssignTernaryExprInfo::getNameRange()",11, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableAssignTernaryExprInfo::getType()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableBindingTernaryExprInfo::ExpandableBindingTernaryExprInfo( PatternBindingDecl * Binding)",2, 22, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableBindingTernaryExprInfo::getIf()",9, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableBindingTernaryExprInfo::getNameRange()",6, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableBindingTernaryExprInfo::getType()",6, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ExpandableBindingTernaryExprInfo::getNamePattern()",14, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"findExpandableTernaryExpression( ResolvedRangeInfo Info)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExpandTernaryExpr::isApplicable( ResolvedRangeInfo Info , DiagnosticEngine & Diag)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExpandTernaryExpr::performChange()",58, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ConvertToTernaryExprInfo::ConvertToTernaryExprInfo()",1, 32, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ConvertToTernaryExprInfo::AssignDest()",46, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ConvertToTernaryExprInfo::ThenSrc()",5, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ConvertToTernaryExprInfo::ElseSrc()",5, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"ConvertToTernaryExprInfo::isValid()",7, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"findConvertToTernaryExpression( ResolvedRangeInfo Info)",58, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionConvertToTernaryExpr::isApplicable( ResolvedRangeInfo Info , DiagnosticEngine & Diag)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionConvertToTernaryExpr::performChange()",43, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::FillProtocolStubContext( ExtensionDecl * ED)",4, 56, 4, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::FillProtocolStubContext( NominalTypeDecl * ND)",4, 56, 4, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::FillProtocolStubContext()",1, 78, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::getFillingContents() const",3, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::getFillingContext() const",1, 56, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::canProceed() const",4, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::getAdopter() const",1, 46, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::getContextStartLoc() const",1, 60, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::getBraceStartLoc() const",1, 63, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::getContextFromCursorInfo( ResolvedCursorInfo CursorInfo)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"FillProtocolStubContext::getUnsatisfiedRequirements( const DeclContext * DC)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionFillProtocolStub::isApplicable( ResolvedCursorInfo Tok , DiagnosticEngine & Diag)",4, 3, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionFillProtocolStub::performChange()",25, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"collectAvailableRefactoringsAtCursor( SourceFile * SF , unsigned Line , unsigned Column , std :: vector<RefactoringKind> & Scratch , llvm :: ArrayRef<DiagnosticConsumer*> DiagConsumers)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"getEnumDeclFromSwitchStmt( SwitchStmt * SwitchS)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"performCasesExpansionInSwitchStmt( SwitchStmt * SwitchS , DiagnosticEngine & DiagEngine , SourceLoc ExpandedStmtLoc , EditorConsumerInsertStream & OS)",31, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"findEnclosingSwitchStmt( CaseStmt * CS , SourceFile * SF , DiagnosticEngine & DiagEngine)",26, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExpandDefault::isApplicable( ResolvedCursorInfo CursorInfo , DiagnosticEngine & Diag)",21, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExpandDefault::performChange()",14, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExpandSwitchCases::isApplicable( ResolvedCursorInfo CursorInfo , DiagnosticEngine & DiagEngine)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionExpandSwitchCases::performChange()",27, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"findLocalizeTarget( ResolvedCursorInfo CursorInfo)",22, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionLocalizeString::isApplicable( ResolvedCursorInfo Tok , DiagnosticEngine & Diag)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionLocalizeString::performChange()",8, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"generateMemberwiseInit( SourceEditConsumer & EditConsumer , SourceManager & SM , SmallVectorImpl<std::string> & memberNameVector , SmallVectorImpl<std::string> & memberTypeVector , SourceLoc targetLocation)",29, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"collectMembersForInit( ResolvedCursorInfo CursorInfo , SmallVectorImpl<std::string> & memberNameVector , SmallVectorImpl<std::string> & memberTypeVector)",47, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionMemberwiseInitLocalRefactoring::isApplicable( ResolvedCursorInfo Tok , DiagnosticEngine & Diag)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionMemberwiseInitLocalRefactoring::performChange()",15, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"findSourceRangeToWrapInCatch( ResolvedCursorInfo CursorInfo , SourceFile * TheFile , SourceManager & SM)",28, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionConvertToDoCatch::isApplicable( ResolvedCursorInfo Tok , DiagnosticEngine & Diag)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionConvertToDoCatch::performChange()",17, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"getTrailingNumberLiteral( ResolvedCursorInfo Tok)",29, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"insertUnderscore( StringRef Text)",12, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"insertUnderscoreInDigits( StringRef Digits , llvm :: raw_ostream & OS)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionSimplifyNumberLiteral::isApplicable( ResolvedCursorInfo Tok , DiagnosticEngine & Diag)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionSimplifyNumberLiteral::performChange()",13, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"findTrailingClosureTarget( SourceManager & SM , ResolvedCursorInfo CursorInfo)",45, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionTrailingClosure::isApplicable( ResolvedCursorInfo CursorInfo , DiagnosticEngine & Diag)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"RefactoringActionTrailingClosure::performChange()",55, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"rangeStartMayNeedRename( ResolvedRangeInfo Info)",38, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::getDescriptiveRefactoringKindName( RefactoringKind Kind)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::getDescriptiveRenameUnavailableReason( RenameAvailableKind Kind)",18, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::RangeConfig::getStart( SourceManager & SM)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::RangeConfig::getEnd( SourceManager & SM)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::FindRenameRangesAnnotatingConsumer::Implementation::Implementation( SourceManager & SM , unsigned BufferId , llvm :: raw_ostream & OS)",2, 65, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::FindRenameRangesAnnotatingConsumer::Implementation::tag( RefactoringRangeKind Kind)",23, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::FindRenameRangesAnnotatingConsumer::Implementation::accept( SourceManager & SM , const RenameRangeDetail & Range)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::FindRenameRangesAnnotatingConsumer::FindRenameRangesAnnotatingConsumer( SourceManager & SM , unsigned BufferId , llvm :: raw_ostream & OS)",3, 74, 3, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::FindRenameRangesAnnotatingConsumer::~FindRenameRangesAnnotatingConsumer()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::FindRenameRangesAnnotatingConsumer::accept( SourceManager & SM , RegionType RegionType , ArrayRef<RenameRangeDetail> Ranges)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::collectRenameAvailabilityInfo( const ValueDecl * VD , std :: vector<RenameAvailabiliyInfo> & Scratch)",44, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::collectAvailableRefactorings( SourceFile * SF , ResolvedCursorInfo CursorInfo , std :: vector<RefactoringKind> & Scratch , bool ExcludeRename)",40, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::collectAvailableRefactorings( SourceFile * SF , RangeConfig Range , bool & RangeStartMayNeedRename , std :: vector<RefactoringKind> & Scratch , llvm :: ArrayRef<DiagnosticConsumer*> DiagConsumers)",34, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::refactorSwiftModule( ModuleDecl * M , RefactoringOptions Opts , SourceEditConsumer & EditConsumer , DiagnosticConsumer & DiagConsumer)",30, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"resolveRenameLocations( ArrayRef<RenameLoc> RenameLocs , SourceFile & SF , DiagnosticEngine & Diags)",54, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::syntacticRename( SourceFile * SF , ArrayRef<RenameLoc> RenameLocs , SourceEditConsumer & EditConsumer , DiagnosticConsumer & DiagConsumer)",32, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::findSyntacticRenameRanges( SourceFile * SF , llvm :: ArrayRef<RenameLoc> RenameLocs , FindRenameRangesConsumer & RenameConsumer , DiagnosticConsumer & DiagConsumer)",30, 2, 0, 0
repos/cpp/swift/lib/IDE/Refactoring.cpp,"swift::ide::findLocalRenameRanges( SourceFile * SF , RangeConfig Range , FindRenameRangesConsumer & RenameConsumer , DiagnosticConsumer & DiagConsumer)",30, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::CommentToXMLConverter( raw_ostream & OS)",1, 53, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printRawHTML( StringRef Tag)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printASTNode( const MarkupASTNode * N)",11, 4, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printDocument( const Document * D)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printBlockQuote( const BlockQuote * BQ)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printList( const List * L)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printItem( const Item * I)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printCode( const Code * C)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printCodeBlock( const CodeBlock * CB)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printParagraph( const Paragraph * P)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printHeader( const Header * H)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printHRule( const HRule * HR)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printText( const Text * T)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printHTML( const HTML * H)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printInlineHTML( const InlineHTML * IH)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printEmphasis( const Emphasis * E)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printStrong( const Strong * S)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printLink( const Link * L)",14, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printSoftBreak( const SoftBreak * SB)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printLineBreak( const LineBreak * LB)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printPrivateExtension( const PrivateExtension * PE)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printImage( const Image * I)",15, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printParamField( const ParamField * PF)",20, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printResultDiscussion( const ReturnsField * RF)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printThrowsDiscussion( const ThrowsField * RF)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::printTagFields( ArrayRef<StringRef> Tags)",12, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::visitCommentParts( const swift :: markup :: CommentParts & Parts)",33, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"CommentToXMLConverter::visitDocComment( const DocComment * DC)",82, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"getClangDocumentationCommentAsXML( const clang :: Decl * D , raw_ostream & OS)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"replaceObjcDeclarationsWithSwiftOnes( const Decl * D , StringRef Doc , raw_ostream & OS)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"getLineListFromComment( SourceManager & SourceMgr , swift :: markup :: MarkupContext & MC , const StringRef Text)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"ide::extractPlainTextFromComment( const StringRef Text)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"ide::getDocumentationCommentAsXML( const Decl * D , raw_ostream & OS)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"ide::getLocalizationKey( const Decl * D , raw_ostream & OS)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"ide::convertMarkupToXML( StringRef Text , raw_ostream & OS)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::printIndent()",5, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::indent( unsigned Amount = 2)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::dedent( unsigned Amount = 2)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::print( StringRef Str)",18, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::printNestedParamField( const ParamField * PF)",55, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::DoxygenConverter( llvm :: raw_ostream & OS)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::printNewline()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::printOpeningComment()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::printUncommentedNewline()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitDocument( const Document * D)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitBlockQuote( const BlockQuote * BQ)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitList( const List * BL)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitItem( const Item * I)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitCodeBlock( const CodeBlock * CB)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitCode( const Code * C)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitHTML( const HTML * H)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitInlineHTML( const InlineHTML * IH)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitSoftBreak( const SoftBreak * SB)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitLineBreak( const LineBreak * LB)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitLink( const Link * L)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitImage( const Image * I)",15, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitParagraph( const Paragraph * P)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitEmphasis( const Emphasis * E)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitStrong( const Strong * E)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitHRule( const HRule * HR)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitHeader( const Header * H)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitText( const Text * T)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitPrivateExtension( const PrivateExtension * PE)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitParamField( const ParamField * PF)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitReturnField( const ReturnsField * RF)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::visitThrowField( const ThrowsField * TF)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"DoxygenConverter::~DoxygenConverter()",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CommentConversion.cpp,"ide::getDocumentationCommentAsDoxygen( const DocComment * DC , raw_ostream & OS)",33, 2, 0, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"toInsertableString( CodeCompletionResult * Result)",52, 2, 0, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"toDisplayString( CodeCompletionResult * Result , llvm :: raw_ostream & OS)",59, 2, 0, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"swift::REPLCodeCompletionConsumer::REPLCodeCompletionConsumer( REPLCompletions & Completions)",2, 36, 2, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"swift::REPLCodeCompletionConsumer::handleResults( MutableArrayRef<CodeCompletionResult*> Results)",21, 4, 2, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"REPLCompletions::REPLCompletions()",11, 2, 0, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"doCodeCompletion( SourceFile & SF , StringRef EnteredCode , unsigned * BufferID , CodeCompletionCallbacksFactory * CompletionCallbacksFactory)",35, 2, 0, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"REPLCompletions::populate( SourceFile & SF , StringRef EnteredCode)",40, 2, 0, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"REPLCompletions::getRoot() const",22, 2, 0, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"REPLCompletions::getPreviousStem() const",8, 2, 0, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"REPLCompletions::getNextStem()",12, 2, 0, 0
repos/cpp/swift/lib/IDE/REPLCodeCompletion.cpp,"REPLCompletions::reset()",1, 68, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::ClangCommentPrinter( ASTPrinter & OtherPrinter , ClangModuleLoader & ClangLoader)",3, 34, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printText( StringRef Text)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printDeclLoc( const Decl * D)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printDeclNameEndLoc( const Decl * D)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printDeclNameOrSignatureEndLoc( const Decl * D)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printTypePre( const TypeLoc & TL)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printTypePost( const TypeLoc & TL)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printTypeRef( Type T , const TypeDecl * TD , Identifier Name)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printModuleRef( ModuleEntity Mod , Identifier Name)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printSynthesizedExtensionPre( const ExtensionDecl * ED , TypeOrExtensionDecl Target , Optional<BracketOptions> Bracket)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printSynthesizedExtensionPost( const ExtensionDecl * ED , TypeOrExtensionDecl Target , Optional<BracketOptions> Bracket)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printStructurePre( PrintStructureKind Kind , const Decl * D)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printStructurePost( PrintStructureKind Kind , const Decl * D)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printNamePre( PrintNameContext Context)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printNamePost( PrintNameContext Context)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::getResumeOffset( clang :: FileID FID) const",6, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::setResumeOffset( clang :: FileID FID , unsigned Offset)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"getUnderlyingClangModuleForImport( ImportDecl * Import)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"printTypeNameToString( Type Ty , std :: string & Text)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"swift::ide::printTypeInterface( ModuleDecl * M , Type Ty , ASTPrinter & Printer , std :: string & TypeName , std :: string & Error)",18, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"swift::ide::printTypeInterface( ModuleDecl * M , StringRef TypeUSR , ASTPrinter & Printer , std :: string & TypeName , std :: string & Error)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"swift::ide::printModuleInterface( ModuleDecl * M , Optional<StringRef> Group , ModuleTraversalOptions TraversalOptions , ASTPrinter & Printer , const PrintOptions & Options , const bool PrintSynthesizedExtensions)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"adjustPrintOptions( PrintOptions & AdjustedOptions)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"swift::ide::collectModuleGroups( ModuleDecl * M , std :: vector<StringRef> & Scratch)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"extensionHasClangNode( ExtensionDecl * ext)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"swift::ide::findGroupNameForUSR( ModuleDecl * M , StringRef USR)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"swift::ide::printSubmoduleInterface( ModuleDecl * M , ArrayRef<StringRef> FullModuleName , ArrayRef<StringRef> GroupNames , ModuleTraversalOptions TraversalOptions , ASTPrinter & Printer , const PrintOptions & Options , const bool PrintSynthesizedExtensions)",410, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"getDeclStartPosition( SourceFile & File)",29, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"printUntilFirstDeclStarts( SourceFile & File , ASTPrinter & Printer)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"swift::ide::printSwiftSourceInterface( SourceFile & File , ASTPrinter & Printer , const PrintOptions & Options)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"swift::ide::printHeaderInterface( StringRef Filename , ASTContext & Ctx , ASTPrinter & Printer , const PrintOptions & Options)",50, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::avoidPrintDeclPost( const Decl * D)",22, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printDeclPre( const Decl * D , Optional<BracketOptions> Bracket)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printDeclPost( const Decl * D , Optional<BracketOptions> Bracket)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printCommentsUntil( ClangNode Node)",77, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::printComment( StringRef RawText , unsigned StartCol)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::isDocumentationComment( clang :: SourceLocation CommentLoc , ClangNode Node) const",18, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::shouldPrintNewLineBefore( ClangNode Node) const",20, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::updateLastEntityLine( clang :: SourceLocation Loc)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/ModuleInterfacePrinting.cpp,"ClangCommentPrinter::updateLastEntityLine( clang :: FileID FID , unsigned LineNo)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"getCommandKind( StringRef Command)",12, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"getCommandName( CodeCompletionCommandKind Kind)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"containsInterestedWords( StringRef Content , StringRef Splitter , bool AllowWhitespace)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"splitTextByComma( StringRef Text , std :: vector<StringRef> & Subs)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"clang::comments::WordPairsArrangedViewer::isKeyViewed( StringRef K)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"clang::comments::WordPairsArrangedViewer::WordPairsArrangedViewer( ArrayRef<std::pair<StringRef,StringRef>> Content)",2, 24, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"clang::comments::WordPairsArrangedViewer::hasNext()",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"clang::comments::WordPairsArrangedViewer::next()",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"clang::comments::ClangCommentExtractor::visitChildren( const Comment * C)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"clang::comments::ClangCommentExtractor::ClangCommentExtractor( CommandWordsPairs & Words , const CommandTraits & Traits)",3, 73, 55, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"clang::comments::ClangCommentExtractor::visitInlineCommandComment( const InlineCommandComment * C)",19, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"clang::comments::getClangDocKeyword( ClangImporter & Importer , const Decl * D , CommandWordsPairs & Words)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::markup::SwiftDocWordExtractor::SwiftDocWordExtractor( CommandWordsPairs & Pairs)",2, 59, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::markup::SwiftDocWordExtractor::visitKeywordField( const KeywordField * Field)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::markup::SwiftDocWordExtractor::visitRecommendedField( const RecommendedField * Field)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::markup::SwiftDocWordExtractor::visitRecommendedoverField( const RecommendedoverField * Field)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::markup::SwiftDocWordExtractor::visitMutatingvariantField( const MutatingvariantField * Field)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::markup::SwiftDocWordExtractor::visitNonmutatingvariantField( const NonmutatingvariantField * Field)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::markup::SwiftDocWordExtractor::visitText( const Text * Text)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::markup::getSwiftDocKeyword( const Decl * D , CommandWordsPairs & Words)",29, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"shouldHideDeclFromCompletionResults( const ValueDecl * D)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"DefaultFilter( ValueDecl * VD , DeclVisibilityKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"KeyPathFilter( ValueDecl * decl , DeclVisibilityKind)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"SwiftKeyPathFilter( ValueDecl * decl , DeclVisibilityKind)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::ide::removeCodeCompletionTokens( StringRef Input , StringRef TokenName , unsigned * CompletionOffset)",32, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"StmtFinder::StmtFinder( SourceManager & SM , SourceLoc Loc , StmtKind Kind)",2, 40, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"StmtFinder::walkToStmtPre( Stmt * S)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"StmtFinder::walkToStmtPost( Stmt * S)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"StmtFinder::getFoundStmt() const",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"findNearestStmt( const DeclContext * DC , SourceLoc Loc , StmtKind Kind)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"prepareForRetypechecking( Expr * E)",33, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionString::CodeCompletionString( ArrayRef<Chunk> Chunks)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionString::create( llvm :: BumpPtrAllocator & Allocator , ArrayRef<Chunk> Chunks)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionString::print( raw_ostream & OS) const",82, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionString::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionResult::getCodeCompletionDeclKind( const Decl * D)",86, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionResult::print( raw_ostream & OS) const",203, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionResult::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"copyString( llvm :: BumpPtrAllocator & Allocator , StringRef Str)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"copyStringArray( llvm :: BumpPtrAllocator & Allocator , ArrayRef<StringRef> Arr)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"copyStringPairArray( llvm :: BumpPtrAllocator & Allocator , ArrayRef<std::pair<StringRef,StringRef>> Arr)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionResultBuilder::addChunkWithText( CodeCompletionString :: Chunk :: ChunkKind Kind , StringRef Text)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionResultBuilder::setAssociatedDecl( const Decl * D)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionContext::copyString( StringRef Str)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"shouldCopyAssociatedUSRForDecl( const ValueDecl * VD)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"walkValueDeclAndOverriddenDecls( const Decl * D , const FnTy & Fn)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"copyAssociatedUSRs( llvm :: BumpPtrAllocator & Allocator , const Decl * D)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"calculateTypeRelation( Type Ty , Type ExpectedTy , DeclContext * DC)",23, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"calculateTypeRelationForDecl( const Decl * D , Type ExpectedType , bool IsImplicitlyCurriedInstanceMethod , bool UseFuncResultType = true)",30, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"calculateMaxTypeRelationForDecl( const Decl * D , ArrayRef<Type> ExpectedTypes , bool IsImplicitlyCurriedInstanceMethod = false)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionResult::getCodeCompletionOperatorKind( StringRef name)",58, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"getOperatorName( CodeCompletionString * str)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionResult::getCodeCompletionOperatorKind( CodeCompletionString * str)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionResultBuilder::takeResult()",72, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionResultBuilder::finishResult()",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionContext::takeResults()",10, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionString::getFirstTextChunkIndex( bool includeLeadingPunctuation) const",53, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionString::getFirstTextChunk( bool includeLeadingPunctuation) const",6, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionString::getName( raw_ostream & OS) const",31, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionContext::sortCompletionResults( MutableArrayRef<CodeCompletionResult*> Results)",32, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::addSuperKeyword( CodeCompletionResultSink & Sink)",19, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::typeCheckContext( DeclContext * DC)",46, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::typeCheckParsedExpr()",33, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::typecheckParsedType()",5, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::CodeCompletionCallbacksImpl( Parser & P , CodeCompletionContext & CompletionContext , CodeCompletionConsumer & Consumer)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeExpr()",11, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"isTopLevelContext( const DeclContext * DC)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"getReturnTypeFromContext( const DeclContext * DC)",21, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"protocolForLiteralKind( CodeCompletionLiteralKind kind)",24, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"hasTrivialTrailingClosure( const FuncDecl * FD , AnyFunctionType * funcType)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::foundFunction( const AbstractFunctionDecl * AFD)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::foundFunction( const AnyFunctionType * AFT)",12, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setClangDeclKeywords( const ValueDecl * VD , CommandWordsPairs & Pairs , CodeCompletionResultBuilder & Builder)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::shouldUseFunctionReference( AbstractFunctionDecl * D)",16, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::RequestedResultsTy::fromModule( const ModuleDecl * TheModule)",3, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::RequestedResultsTy::onlyTypes() const",3, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::RequestedResultsTy::onlyPrecedenceGroups() const",4, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::RequestedResultsTy::needLeadingDot( bool NeedDot) const",3, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::RequestedResultsTy::toplevelResults()",3, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::CompletionLookup( CodeCompletionResultSink & Sink , ASTContext & Ctx , const DeclContext * CurrDeclContext , CodeCompletionContext * CompletionContext = nullptr)",18, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setHaveDot( SourceLoc DotLoc)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setIsUnwrappedOptional( bool value)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setIsStaticMetatype( bool value)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setExpectedTypes( ArrayRef<Type> Types)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::hasExpectedTypes() const",1, 67, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::needDot() const",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setHaveLParen( bool Value)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setIsSuperRefExpr()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setIsSelfRefExpr( bool value)",1, 63, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setIsKeyPathExpr()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setIsSwiftKeyPathExpr( bool onRoot)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setIsDynamicLookup()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setPreferFunctionReferencesToCalls()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::setHaveLeadingSpace( bool value)",1, 69, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::includeInstanceMembers()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addSubModuleNames( std :: vector<std::pair<std::string,bool>> & SubModuleNameVisibilityPairs)",17, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::collectImportedModules( llvm :: StringSet<> & ImportedModules)",18, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addImportModuleNames()",45, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getSemanticContext( const Decl * D , DeclVisibilityKind Reason)",56, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addLeadingDot( CodeCompletionResultBuilder & Builder)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addTypeAnnotation( CodeCompletionResultBuilder & Builder , Type T)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addTypeAnnotationForImplicitlyUnwrappedOptional( CodeCompletionResultBuilder & Builder , Type T , bool dynamicOrOptional = false)",17, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::eraseArchetypes( ModuleDecl * M , Type type , GenericSignature * genericSig)",43, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getTypeOfMember( const ValueDecl * VD , Optional<Type> ExprType = None)",53, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getAssociatedTypeType( const AssociatedTypeDecl * ATD)",22, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addVarDeclRef( const VarDecl * VD , DeclVisibilityKind Reason)",42, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addParameters( CodeCompletionResultBuilder & Builder , const ParameterList * params)",20, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::hasInterestingDefaultValues( const AbstractFunctionDecl * func)",14, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addParamPatternFromFunction( CodeCompletionResultBuilder & Builder , const AnyFunctionType * AFT , const AbstractFunctionDecl * AFD , bool includeDefaultArgs = true)",91, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addThrows( CodeCompletionResultBuilder & Builder , const AnyFunctionType * AFT , const AbstractFunctionDecl * AFD)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addPoundAvailable( Optional<StmtKind> ParentKind)",12, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addPoundSelector( bool needPound)",21, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addPoundKeyPath( bool needPound)",22, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addFunctionCallPattern( const AnyFunctionType * AFT , const AbstractFunctionDecl * AFD = nullptr)",48, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::isImplicitlyCurriedInstanceMethod( const AbstractFunctionDecl * FD)",23, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addMethodCall( const FuncDecl * FD , DeclVisibilityKind Reason)",117, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addConstructorCall( const ConstructorDecl * CD , DeclVisibilityKind Reason , Optional<Type> BaseType , Optional<Type> Result , bool IsOnType = true , Identifier addName = Identifier())",83, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addConstructorCallsForType( Type type , Identifier name , DeclVisibilityKind Reason)",22, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addSubscriptCall( const SubscriptDecl * SD , DeclVisibilityKind Reason)",40, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addNominalTypeRef( const NominalTypeDecl * NTD , DeclVisibilityKind Reason)",15, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addTypeAliasRef( const TypeAliasDecl * TAD , DeclVisibilityKind Reason)",30, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addGenericTypeParamRef( const GenericTypeParamDecl * GP , DeclVisibilityKind Reason)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addAssociatedTypeRef( const AssociatedTypeDecl * AT , DeclVisibilityKind Reason)",14, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addPrecedenceGroupRef( PrecedenceGroupDecl * PGD)",10, 5, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addEnumElementRef( const EnumElementDecl * EED , DeclVisibilityKind Reason , bool HasTypeContext)",36, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addKeyword( StringRef Name , Type TypeAnnotation = Type() , SemanticContextKind SK = SemanticContextKind :: None , CodeCompletionKeywordKind KeyKind = CodeCompletionKeywordKind :: None)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addKeyword( StringRef Name , StringRef TypeAnnotation , CodeCompletionKeywordKind KeyKind = CodeCompletionKeywordKind :: None)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addDeclAttrParamKeyword( StringRef Name , StringRef Annotation , bool NeedSpecify)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addDeclAttrKeyword( StringRef Name , StringRef Annotation)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addCompoundFunctionName( AbstractFunctionDecl * AFD , DeclVisibilityKind Reason)",32, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::foundDecl( ValueDecl * D , DeclVisibilityKind Reason)",165, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::handleEnumElement( ValueDecl * D , DeclVisibilityKind Reason)",19, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::tryTupleExprCompletions( Type ExprType)",27, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::tryFunctionCallCompletions( Type ExprType , const ValueDecl * VD)",12, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::tryModuleCompletions( Type ExprType)",12, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::tryUnwrappedCompletions( Type ExprType , bool isIUO)",37, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getValueExprCompletions( Type ExprType , ValueDecl * VD = nullptr)",33, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::collectOperatorsFromMap( SourceFile :: OperatorMap<T> & map , bool includePrivate , std :: vector<OperatorDecl*> & results)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::collectOperatorsFrom( SourceFile * SF , std :: vector<OperatorDecl*> & results)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::collectOperatorsFrom( LoadedFile * F , std :: vector<OperatorDecl*> & results)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::collectOperators()",22, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addPostfixBang( Type resultType)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addPostfixOperatorCompletion( OperatorDecl * op , Type resultType)",17, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::tryPostfixOperator( Expr * expr , PostfixOperatorDecl * op)",11, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addAssignmentOperator( Type RHSType , Type resultType)",18, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addInfixOperatorCompletion( OperatorDecl * op , Type resultType , Type RHSType)",24, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::tryInfixOperatorCompletion( Expr * foldedExpr , InfixOperatorDecl * op)",33, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::typeCheckLeadingSequence( Expr * LHS , ArrayRef<Expr*> leadingSequence)",18, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getOperatorCompletions( Expr * LHS , ArrayRef<Expr*> leadingSequence)",38, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addValueLiteralCompletions()",136, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::FilteredDeclConsumer::FilteredDeclConsumer( swift :: VisibleDeclConsumer & Consumer , DeclFilter Filter)",2, 84, 25, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::FilteredDeclConsumer::foundDecl( ValueDecl * VD , DeclVisibilityKind Kind)",4, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getValueCompletionsInDeclContext( SourceLoc Loc , DeclFilter Filter = DefaultFilter , bool IncludeTopLevel = false , bool RequestCache = true , bool LiteralCompletions = true)",74, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getUnresolvedMemberCompletions( Type T)",78, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getUnresolvedMemberCompletions( ArrayRef<Type> Types)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::addArgNameCompletionResults( ArrayRef<StringRef> Names)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getTypeContextEnumElementCompletions( SourceLoc Loc)",19, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getTypeCompletions( Type BaseType)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::canUseAttributeOnDecl( DeclAttrKind DAK , bool IsInSil , Optional<DeclKind> DK)",14, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getAttributeDeclCompletions( bool IsInSil , Optional<DeclKind> DK)",18, 4, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getAttributeDeclParamCompletions( DeclAttrKind AttrKind , int ParamIndex)",16, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::collectPrecedenceGroups()",29, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getPrecedenceGroupCompletions( SyntaxKind SK)",26, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getPoundAvailablePlatformCompletions()",5, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getTypeCompletionsInDeclContext( SourceLoc Loc)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getToplevelCompletions( bool OnlyTypes)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionLookup::getVisibleDeclsOfModule( const ModuleDecl * TheModule , ArrayRef<std::string> AccessPath , bool ResultsHaveLeadingDot)",21, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::CompletionOverrideLookup( CodeCompletionResultSink & Sink , ASTContext & Ctx , const DeclContext * CurrDeclContext , SmallVectorImpl<StringRef> & ParsedKeywords)",23, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::isKeywordSpecified( StringRef Word)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::missingOverride( DeclVisibilityKind Reason)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::addAccessControl( const ValueDecl * VD , CodeCompletionResultBuilder & Builder)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::addValueOverride( const ValueDecl * VD , DeclVisibilityKind Reason , CodeCompletionResultBuilder & Builder , bool hasDeclIntroducer)",45, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::addMethodOverride( const FuncDecl * FD , DeclVisibilityKind Reason)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::addVarOverride( const VarDecl * VD , DeclVisibilityKind Reason)",15, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::addTypeAlias( const AssociatedTypeDecl * ATD , DeclVisibilityKind Reason)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::addConstructor( const ConstructorDecl * CD , DeclVisibilityKind Reason)",40, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::foundDecl( ValueDecl * D , DeclVisibilityKind Reason)",47, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::addDesignatedInitializers( Type CurrTy)",22, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::addAssociatedTypes( Type CurrTy)",26, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CompletionOverrideLookup::getOverrideCompletions( SourceLoc Loc)",15, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addSelectorModifierKeywords( CodeCompletionResultSink & sink)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeDotExpr( Expr * E , SourceLoc DotLoc)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeStmtOrExpr()",5, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completePostfixExprBeginning( CodeCompletionExpr * E)",20, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeForEachSequenceBeginning( CodeCompletionExpr * E)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completePostfixExpr( Expr * E , bool hasSpace)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completePostfixExprParen( Expr * E , Expr * CodeCompletionE)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeExprSuper( SuperRefExpr * SRE)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeExprSuperDot( SuperRefExpr * SRE)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeExprKeyPath( KeyPathExpr * KPE , SourceLoc DotLoc)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completePoundAvailablePlatform()",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeTypeSimpleBeginning()",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeDeclAttrParam( DeclAttrKind DK , int Index)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeDeclAttrKeyword( Decl * D , bool Sil , bool Param)",12, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeInPrecedenceGroup( SyntaxKind SK)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeTypeIdentifierWithDot( IdentTypeRepr * ITR)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeTypeIdentifierWithoutDot( IdentTypeRepr * ITR)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeCaseStmtBeginning()",6, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeCaseStmtDotPrefix()",6, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeImportDecl( std :: vector<std::pair<Identifier,SourceLoc>> & Path)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeUnresolvedMember( CodeCompletionExpr * E , SourceLoc DotLoc)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeAssignmentRHS( AssignExpr * E)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeCallArg( CodeCompletionExpr * E)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeReturnStmt( CodeCompletionExpr * E)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeYieldStmt( CodeCompletionExpr * E , Optional<unsigned> index)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeAfterPoundExpr( CodeCompletionExpr * E , Optional<StmtKind> ParentKind)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeAfterPoundDirective()",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completePlatformCondition()",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeAfterIfStmt( bool hasElse)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeGenericParams( TypeLoc TL)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeNominalMemberBeginning( SmallVectorImpl<StringRef> & Keywords)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::completeAccessorBeginning()",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"isDynamicLookup( Type T)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"isClangSubModule( ModuleDecl * TheModule)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addKeyword( CodeCompletionResultSink & Sink , StringRef Name , CodeCompletionKeywordKind Kind , StringRef TypeAnnotation = "")",11, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addDeclKeywords( CodeCompletionResultSink & Sink)",30, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addStmtKeywords( CodeCompletionResultSink & Sink , bool MaybeFuncBody)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addLetVarKeywords( CodeCompletionResultSink & Sink)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addAccessorKeywords( CodeCompletionResultSink & Sink)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addObserverKeywords( CodeCompletionResultSink & Sink)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addExprKeywords( CodeCompletionResultSink & Sink)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addAnyTypeKeyword( CodeCompletionResultSink & Sink)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::addKeywords( CodeCompletionResultSink & Sink , bool MaybeFuncBody)",101, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addPoundDirectives( CodeCompletionResultSink & Sink)",55, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addPlatformConditions( CodeCompletionResultSink & Sink)",45, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"addConditionalCompilationFlags( ASTContext & Ctx , CodeCompletionResultSink & Sink)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::arePositionsSame( Expr * E1 , Expr * E2)",4, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::ExprParentFinder( Expr * ChildExpr , llvm :: function_ref<bool(ParentTy,ParentTy)> Predicate)",3, 67, 21, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::walkToExprPre( Expr * E)",12, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::walkToExprPost( Expr * E)",5, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::walkToStmtPre( Stmt * S)",5, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::walkToStmtPost( Stmt * S)",5, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::walkToDeclPre( Decl * D)",5, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::walkToDeclPost( Decl * D)",5, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::walkToPatternPre( Pattern * P)",5, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"ExprParentFinder::walkToPatternPost( Pattern * P)",5, 6, 4, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"collectPossibleCalleesByQualifiedLookup( DeclContext & DC , Type baseTy , DeclBaseName name , SmallVectorImpl<FunctionTypeAndDecl> & candidates)",32, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"collectPossibleCalleesByQualifiedLookup( DeclContext & DC , Expr * baseExpr , DeclBaseName name , SmallVectorImpl<FunctionTypeAndDecl> & candidates)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"collectPossibleCalleesForApply( DeclContext & DC , ApplyExpr * callExpr , SmallVectorImpl<FunctionTypeAndDecl> & candidates)",44, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"collectPossibleCalleesForSubscript( DeclContext & DC , SubscriptExpr * subscriptExpr , SmallVectorImpl<FunctionTypeAndDecl> & candidates)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"getPositionInArgs( DeclContext & DC , Expr * Args , Expr * CCExpr , unsigned & Position , bool & HasName)",26, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"translateArgIndexToParamIndex( Expr * Args , unsigned & Position , bool & HasName)",29, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::recordPossibleType( Type ty)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::recordPossibleName( StringRef name)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::collectArgumentExpectation( DeclContext & DC , Expr * E , Expr * CCExpr)",45, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::CodeCompletionTypeContextAnalyzer( DeclContext * DC , Expr * ParsedExpr)",51, 10, 5, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::analyzeExpr( Expr * Parent)",42, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::analyzeStmt( Stmt * Parent)",25, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::isBoolConditionOf( Stmt * parent)",15, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::containsTarget( Expr * E)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::analyzeDecl( Decl * D)",20, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::analyzePattern( Pattern * P)",14, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::Analyze()",22, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::getPossibleTypes() const",1, 68, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::getPossibleNames() const",1, 73, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionTypeContextAnalyzer::getPossibleCallees() const",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::doneParsing()",448, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksImpl::deliverCompletionResults()",11, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"PrintingCodeCompletionConsumer::handleResults( MutableArrayRef<CodeCompletionResult*> Results)",31, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksFactoryImpl::CodeCompletionCallbacksFactoryImpl( CodeCompletionContext & CompletionContext , CodeCompletionConsumer & Consumer)",3, 68, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"CodeCompletionCallbacksFactoryImpl::createCodeCompletionCallbacks( Parser & P)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::ide::makeCodeCompletionCallbacksFactory( CodeCompletionContext & CompletionContext , CodeCompletionConsumer & Consumer)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::ide::lookupCodeCompletionResultsFromModule( CodeCompletionResultSink & targetSink , const ModuleDecl * module , ArrayRef<std::string> accessPath , bool needLeadingDot , const DeclContext * currDeclContext)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"swift::ide::copyCodeCompletionResults( CodeCompletionResultSink & targetSink , CodeCompletionResultSink & sourceSink , bool onlyTypes , bool onlyPrecedenceGroups)",59, 2, 0, 0
repos/cpp/swift/lib/IDE/CodeCompletion.cpp,"SimpleCachingCodeCompletionConsumer::handleResultsAndModules( CodeCompletionContext & context , ArrayRef<RequestedCachedModule> requestedModules , DeclContext * DCForModules)",24, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"stringWithFormat( const char * fmt_str , ...)",18, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"GetClangTypeKindFromSwiftKind( DeclKind decl_kind)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::VisibleDeclsConsumer::foundDecl( ValueDecl * VD , DeclVisibilityKind Reason)",3, 6, 4, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::VisibleDeclsConsumer::operator bool()",1, 58, 4, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::VisibleDeclsConsumer::begin()",1, 74, 4, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::VisibleDeclsConsumer::end()",1, 70, 4, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::lookupQualified( ModuleDecl * entry , DeclBaseName name , NLOptions options , LazyResolver * typeResolver , ValueDecls & decls)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::lookupValue( ModuleDecl * entry , DeclBaseName name , ModuleDecl :: AccessPathTy accessPath , NLKind lookupKind , ValueDecls & decls)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::GetDeclsLookupSource( ASTContext & ast , ConstString module_name , bool allow_clang_importer = true)",18, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::GetDeclsLookupSource( NominalTypeDecl * decl)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::GetDeclsLookupSource( DeclsLookupSource source , NominalTypeDecl * decl)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::lookupByMangledName( DeclBaseName name , DeclKind decl_kind , ValueDecls & result)",36, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::lookupRelatedEntity( StringRef name , StringRef related_entity_kind , DeclKind decl_kind , ValueDecls & result)",30, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::lookupValue( ModuleDecl :: AccessPathTy path , DeclBaseName name , NLKind kind , ValueDecls & result)",28, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::lookupMember( DeclName id , Identifier priv_decl_id , ValueDecls & result)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::lookupMember( DeclContext * decl_ctx , DeclName id , Identifier priv_decl_id , ValueDecls & result)",11, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::lookupLocalType( StringRef key)",16, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::GetName() const",21, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::~DeclsLookupSource()",1, 26, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::DeclsLookupSource( const DeclsLookupSource & rhs)",21, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::operator =( const DeclsLookupSource & rhs)",25, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::Clear()",4, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::DeclsLookupSource()",1, 72, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::operator bool()",16, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::IsExtension()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::GetExtendedDecl()",4, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::DeclsLookupSource( ModuleDecl * _m)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::DeclsLookupSource( ASTContext * _a , ConstString _m)",9, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::DeclsLookupSource( NominalTypeDecl * _d)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DeclsLookupSource::DeclsLookupSource( ModuleDecl * _m , NominalTypeDecl * _d)",8, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeResult::VisitNodeResult()",2, 74, 6, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeResult::HasSingleType()",1, 72, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeResult::Clear()",7, 4, 2, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"GetIdentifier( ASTContext * ast , const DeclsLookupSource :: PrivateDeclIdentifier & priv_decl_id)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"FilterDeclsForKind( DeclKind decl_kind , ArrayRef<swift::ValueDecl*> decls , VisitNodeResult & result)",23, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"FindFirstNamedDeclWithKind( ASTContext * ast , const DeclBaseName & name , DeclKind decl_kind , VisitNodeResult & result , DeclsLookupSource :: PrivateDeclIdentifier priv_decl_id = DeclsLookupSource :: PrivateDeclIdentifier())",36, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"FindNamedDecls( ASTContext * ast , const DeclBaseName & name , VisitNodeResult & result , DeclsLookupSource :: PrivateDeclIdentifier priv_decl_id = DeclsLookupSource :: PrivateDeclIdentifier())",99, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"GetKindAsDeclKind( Demangle :: Node :: Kind node_kind)",22, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"FixCallingConv( Decl * in_decl , TypeBase * in_type)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeAddressor( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeAssociatedTypeRef( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",31, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeGenericTypealias( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",63, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeBoundGeneric( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",36, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeBuiltinTypeName( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeConstructor( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",88, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeDestructor( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",52, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeDependentMember( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",20, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"DropGenericSignature( Demangle :: NodePointer cur_node)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeDeclContext( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",50, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeExplicitClosure( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",43, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeExtension( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",43, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"AreBothFunctionTypes( TypeKind a , TypeKind b)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"CompareFunctionTypes( const AnyFunctionType * f , const AnyFunctionType * g , Optional<std::vector<StringRef>> fLabels , Optional<std::vector<StringRef>> gLabels , bool * input_matches , bool * output_matches)",47, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodePrivateDeclName( ASTContext * ast , Demangle :: NodePointer parent_node , Demangle :: NodePointer cur_node , VisitNodeResult & result)",33, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitLocalDeclVariableName( ASTContext * ast , Demangle :: NodePointer child , VisitNodeResult & result)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeFunction( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",162, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"CreateFunctionType( ASTContext * ast , const VisitNodeResult & arg_type_result , const VisitNodeResult & return_type_result , bool escaping , bool throws , VisitNodeResult & result)",47, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeFunctionType( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",27, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeImplFunctionType( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",33, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeSetterGetter( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",194, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeIdentifier( ASTContext * ast , Demangle :: NodePointer parent_node , Demangle :: NodePointer cur_node , VisitNodeResult & result)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeLocalDeclName( ASTContext * ast , Demangle :: NodePointer parent_node , Demangle :: NodePointer cur_node , VisitNodeResult & result)",21, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeRelatedEntityDeclName( ASTContext * ast , Demangle :: NodePointer parent_node , Demangle :: NodePointer cur_node , VisitNodeResult & result)",37, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeNominal( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",41, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeTypeAlias( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",28, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeInOut( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeExistentialMetatype( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",23, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeMetatype( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",38, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeModule( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeTuple( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeProtocolList( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeProtocolListWithClass( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",36, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeProtocolListWithAnyObject( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeTupleElement( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",32, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeTypeList( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",31, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeUnowned( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",12, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeWeak( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeGenericParam( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitFirstChildNode( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitAllChildNodes( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNodeGlobal( ASTContext * ast , Demangle :: NodePointer cur_node , VisitNodeResult & result)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"VisitNode( ASTContext * ast , Demangle :: NodePointer node , VisitNodeResult & result)",185, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"ide::getDeclFromUSR( ASTContext & context , StringRef USR , std :: string & error)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"ide::getDeclFromMangledSymbolName( ASTContext & context , StringRef mangledName , std :: string & error)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/TypeReconstruction.cpp,"ide::getTypeFromMangledSymbolname( ASTContext & Ctx , StringRef mangledName , std :: string & error)",19, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"SyntaxModelWalker::anchor()",1, 36, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"SyntaxModelContext::Implementation::Implementation( SourceFile & SrcFile)",4, 51, 6, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"SyntaxModelContext::SyntaxModelContext( SourceFile & SrcFile)",151, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"SyntaxModelContext::~SyntaxModelContext()",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"StructureElement::StructureElement( const SyntaxStructureNode & StructureNode , const ASTNodeType & ASTNode)",3, 56, 4, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::ModelASTWalker( const SourceFile & File , SyntaxModelWalker & Walker)",6, 27, 8, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::shouldWalkIntoGenericParams()",1, 63, 2, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::isVisitedBeforeInIfConfig( ASTNode Node)",3, 4, 2, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::getURLRegex( StringRef Pro)",22, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"syntaxStructureKindFromNominalTypeDecl( NominalTypeDecl * N)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"charSourceRangeFromSourceRange( const SourceManager & SM , const SourceRange & SR)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"innerCharSourceRangeFromSourceRange( const SourceManager & SM , const SourceRange & SR)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"parameterNameRangeOfCallArg( const TupleExpr * TE , const Expr * Arg)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"setDecl( SyntaxStructureNode & N , Decl * D)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"SyntaxModelContext::walk( SyntaxModelWalker & Walker)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::visitSourceFile( SourceFile & SrcFile , ArrayRef<SyntaxNode> Tokens)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::walkToExprPre( Expr * E)",141, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::walkToExprPost( Expr * E)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::walkToStmtPre( Stmt * S)",133, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::walkToStmtPost( Stmt * S)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::walkToDeclPre( Decl * D)",244, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::walkToDeclPost( swift :: Decl * D)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::walkToTypeReprPre( TypeRepr * T)",17, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"IdRefWalker::IdRefWalker( const FnTy & Fn)",1, 42, 2, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"IdRefWalker::walkToExprPre( Expr * E)",13, 4, 2, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::annotateIfConfigConditionIdentifiers( Expr * Cond)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::handleSpecialDeclAttribute( const DeclAttribute * D , ArrayRef<Token> Toks)",24, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::handleAttrs( const DeclAttributes & Attrs)",8, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::handleAttrs( const TypeAttributes & Attrs)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::handleAttrRanges( ArrayRef<DeclAttributeAndRange> DeclRanges)",52, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::shouldPassBraceStructureNode( BraceStmt * S)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::passTokenNodesUntil( SourceLoc Loc , PassNodesBehavior Behavior)",24, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::passNonTokenNode( const SyntaxNode & Node)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::passNode( const SyntaxNode & Node)",24, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::pushStructureNode( const SyntaxStructureNode & Node , const ASTNodeType & ASTNode)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::popStructureNode()",16, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::isCurrentCallArgExpr( const Expr * E)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::processComment( CharSourceRange Range)",36, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::findUrlStartingLoc( StringRef Text , unsigned & Start , std :: regex & Regex)",38, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"sanitizeUnpairedParenthesis( CharSourceRange Range)",22, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::searchForURL( CharSourceRange Range)",30, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"DocFieldParser::advanceIf( char c)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"DocFieldParser::advanceIf( llvm :: function_ref<bool(char)> predicate)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"DocFieldParser::DocFieldParser( StringRef text)",4, 4, 2, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"DocFieldParser::parseFieldName()",39, 4, 2, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::parseFieldNode( StringRef Text , StringRef OrigText , SourceLoc OrigLoc)",12, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::findFieldsInDocCommentLine( SyntaxNode Node)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/SyntaxModel.cpp,"ModelASTWalker::findFieldsInDocCommentBlock( SyntaxNode Node)",50, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::SemaAnnotator( SourceEntityWalker & SEWalker)",2, 29, 2, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::isDone() const",1, 44, 2, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::shouldWalkIntoGenericParams()",3, 4, 2, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::extractDecl( Expr * Fn) const",7, 4, 2, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::walkToDeclPre( Decl * D)",79, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::walkToDeclPost( Decl * D)",41, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::walkToStmtPre( Stmt * S)",21, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::walkToStmtPost( Stmt * S)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"getReferenceKind( Expr * Parent , Expr * E)",7, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::walkToExprPre( Expr * E)",232, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::walkToTypeReprPre( TypeRepr * T)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::walkToExprPost( Expr * E)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::walkToTypeReprPost( TypeRepr * T)",3, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::walkToPatternPre( Pattern * P)",22, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::handleImports( ImportDecl * Import)",25, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::passModulePathElements( ArrayRef<ImportDecl::AccessPathElement> Path , const clang :: Module * ClangMod)",12, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::passSubscriptReference( ValueDecl * D , SourceLoc Loc , Optional<AccessKind> AccKind , bool IsOpenBracket)",13, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::passReference( ValueDecl * D , Type Ty , DeclNameLoc Loc , ReferenceMetaData Data)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::passReference( ValueDecl * D , Type Ty , SourceLoc BaseNameLoc , SourceRange Range , ReferenceMetaData Data)",32, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::passReference( ModuleEntity Mod , std :: pair<Identifier,SourceLoc> IdLoc)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::passCallArgNames( Expr * Fn , TupleExpr * TupleE)",26, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SemaAnnotator::shouldIgnore( Decl * D , bool & ShouldVisitChildren)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::walk( SourceFile & SrcFile)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::walk( ModuleDecl & Mod)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::walk( Stmt * S)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::walk( Expr * E)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::walk( Decl * D)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::walk( DeclContext * DC)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::walk( ASTNode N)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",6, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::visitSubscriptReference( ValueDecl * D , CharSourceRange Range , Optional<AccessKind> AccKind , bool IsOpenBracket)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::visitCallArgName( Identifier Name , CharSourceRange Range , ValueDecl * D)",5, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::visitDeclarationArgumentName( Identifier Name , SourceLoc Start , ValueDecl * D)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::visitModuleReference( ModuleEntity Mod , CharSourceRange Range)",4, 2, 0, 0
repos/cpp/swift/lib/IDE/SourceEntityWalker.cpp,"SourceEntityWalker::anchor()",1, 37, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"shouldPrintAsFavorable( const Decl * D , const PrintOptions & Options)",14, 2, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"ModulePrinterPrintableChecker::shouldPrint( const Decl * D , const PrintOptions & Options)",5, 4, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"PrintOptions::printModuleInterface()",5, 2, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"PrintOptions::printTypeInterface( Type T)",11, 2, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"PrintOptions::printDocInterface()",12, 2, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"eraseAssociatedTypes( Type type)",16, 2, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::isMemberFavored( const NominalTypeDecl * Target , const Decl * D)",10, 4, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::isExtensionFavored( const NominalTypeDecl * Target , const ExtensionDecl * ED)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::SynthesizedExtensionInfo::operator bool() const",1, 42, 4, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::SynthesizedExtensionInfo::SynthesizedExtensionInfo( bool IsSynthesized = false , ExtensionDecl * EnablingExt = nullptr)",3, 68, 8, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::SynthesizedExtensionInfo::operator <( const SynthesizedExtensionInfo & Rhs) const",24, 6, 4, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::ExtensionMergeInfo::Requirement::operator <( const Requirement & Rhs) const",8, 8, 6, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::ExtensionMergeInfo::Requirement::operator ==( const Requirement & Rhs) const",3, 8, 6, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::ExtensionMergeInfo::addRequirement( GenericSignature * GenericSig , Type First , Type Second , RequirementKind Kind)",10, 6, 4, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::ExtensionMergeInfo::operator ==( const ExtensionMergeInfo & Another) const",8, 6, 4, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::ExtensionMergeInfo::isMergeableWithTypeDef()",3, 6, 4, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::ExtensionMergeGroup::ExtensionMergeGroup( SynthesizedExtensionInfo * Info , unsigned RequirementsCount , unsigned InheritanceCount , bool MergeableWithType)",10, 6, 4, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::ExtensionMergeGroup::removeUnfavored( const NominalTypeDecl * Target)",5, 6, 4, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::ExtensionMergeGroup::sortMembers()",6, 6, 4, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::ExtensionMergeGroup::operator <( const ExtensionMergeGroup & Rhs) const",5, 6, 4, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::Implementation( NominalTypeDecl * Target , bool IncludeUnconditional , PrintOptions Options)",9, 57, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::countInherits( ExtensionDecl * ED)",6, 4, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::isApplicable( ExtensionDecl * Ext , bool IsSynthesized , ExtensionDecl * EnablingExt , NormalProtocolConformance * Conf)",94, 4, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::populateMergeGroup( ExtensionInfoMap & InfoMap , ExtensionMergeInfoMap & MergeInfoMap , MergeGroupVector & Results , bool AllowMergeWithDefBody)",22, 4, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::collectSynthesizedExtensionInfoForProtocol( MergeGroupVector & AllGroups)",22, 4, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::isEnumRawType( const Decl * D , TypeLoc TL)",7, 4, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::Implementation::collectSynthesizedExtensionInfo( MergeGroupVector & AllGroups)",77, 4, 2, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::SynthesizedExtensionAnalyzer( NominalTypeDecl * Target , PrintOptions Options , bool IncludeUnconditional)",5, 70, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::~SynthesizedExtensionAnalyzer()",1, 78, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::isInSynthesizedExtension( const ValueDecl * VD)",9, 2, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::forEachExtensionMergeGroup( MergeGroupKind Kind , ExtensionGroupOperation Fn)",15, 2, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"SynthesizedExtensionAnalyzer::hasMergeGroup( MergeGroupKind Kind)",10, 2, 0, 0
repos/cpp/swift/lib/IDE/IDETypeChecking.cpp,"swift::collectDefaultImplementationForProtocolMembers( ProtocolDecl * PD , llvm :: SmallDenseMap<ValueDecl*,ValueDecl*> & DefaultMap)",31, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftFunctionComparator::SwiftFunctionComparator( const Function * F1 , const Function * F2 , GlobalNumberState * GN)",3, 38, 2, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"isEligibleForConstantSharing( const Instruction * I)",10, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftFunctionComparator::cmpOperandsIgnoringConsts( const Instruction * L , const Instruction * R , unsigned opIdx)",37, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftFunctionComparator::cmpBasicBlocksIgnoringConsts( const BasicBlock * BBL , const BasicBlock * BBR)",29, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftFunctionComparator::compareIgnoringConsts()",24, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::SwiftMergeFunctions()",3, 4, 2, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::EquivalenceClass::EquivalenceClass( FunctionEntry * First)",4, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::FunctionNodeCmp::FunctionNodeCmp( GlobalNumberState * GN)",1, 66, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::FunctionNodeCmp::operator ( )( const EquivalenceClass & LHS , const EquivalenceClass & RHS) const",7, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::FunctionEntry::FunctionEntry( Function * F , FnTreeType :: iterator I)",3, 28, 8, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::FunctionInfo::FunctionInfo( Function * F)",2, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::FunctionInfo::init()",4, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::FunctionInfo::nextInst()",13, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::ParamInfo::matches( const FunctionInfos & FInfos , unsigned OpIdx) const",11, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::getEntry( Function * F) const",3, 4, 2, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::isInEquivalenceClass( FunctionEntry * FE) const",8, 4, 2, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"swift::createSwiftMergeFunctionsPass()",4, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::doSanityCheck( std :: vector<WeakTrackingVH> & Worklist)",77, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"mayMergeCallsToFunction( Function & F)",9, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"isEligibleFunction( Function * F)",34, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::runOnModule( Module & M)",123, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::updateUnhandledCalleeCount( FunctionEntry * FE , int Delta)",17, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::tryMergeEquivalenceClass( FunctionEntry * FirstInClass)",43, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::removeFuncWithMostParams( FunctionInfos & FInfos)",13, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::deriveParams( ParamInfos & Params , FunctionInfos & FInfos)",44, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::numOperandsDiffer( FunctionInfos & FInfos)",8, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::constsDiffer( const FunctionInfos & FInfos , unsigned OpIdx)",16, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::tryMapToParameter( FunctionInfos & FInfos , unsigned OpIdx , ParamInfos & Params)",32, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::mergeWithParams( const FunctionInfos & FInfos , ParamInfos & Params)",85, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::removeEquivalenceClassFromTree( FunctionEntry * FE)",20, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"createCast( IRBuilder<> & Builder , Value * V , Type * DestTy)",24, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::writeThunk( Function * ToFunc , Function * Thunk , const ParamInfos & Params , unsigned FuncIdx)",39, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMMergeFunctions.cpp,"SwiftMergeFunctions::replaceDirectCallers( Function * Old , Function * New , const ParamInfos & Params , unsigned FuncIdx)",76, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"swift::createInlineTreePrinterPass()",4, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTreePrinter::getAnalysisUsage( AnalysisUsage & AU) const",3, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::LocationKey::LocationKey( DILocation * DL)",3, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::LocationKey::operator ==( const LocationKey & RHS) const",3, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::LocationKey::operator <( const LocationKey & RHS) const",7, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::Node::getChildren()",5, 6, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::Node::Node( StringRef FunctionName)",1, 65, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::Summary::Summary( StringRef FunctionName)",1, 69, 4, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::getNode( StringRef FunctionName , NodeMap & Nodes)",8, 4, 2, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"printSymbol( StringRef Name , raw_ostream & os)",8, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::sortNodes( const NodeMap & Map , NodeList & Result)",10, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::buildTree( Function * F)",46, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::getPercent( int numInsts) const",8, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::printNode( Node * Nd , int indent , raw_ostream & os)",11, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::build( Module * M)",18, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTree::print( raw_ostream & os)",68, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMInlineTree.cpp,"InlineTreePrinter::runOnModule( Module & M)",6, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftRCIdentity.cpp,"SwiftRCIdentity::doInitialization( Module & M)",3, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftRCIdentity.cpp,"SwiftRCIdentity::stripPointerCasts( llvm :: Value * Val)",3, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftRCIdentity.cpp,"SwiftRCIdentity::stripReferenceForwarding( llvm :: Value * Val)",34, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftRCIdentity.cpp,"SwiftRCIdentity::getSwiftRCIdentityRoot( llvm :: Value * Val)",19, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftRCIdentity.cpp,"swift::createSwiftRCIdentityPass()",4, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftAA.cpp,"getConservativeModRefForKind( const llvm :: Instruction & I)",8, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftAA.cpp,"SwiftAAResult::getModRefInfo( llvm :: ImmutableCallSite CS , const llvm :: MemoryLocation & Loc)",12, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftAA.cpp,"SwiftAAWrapperPass::SwiftAAWrapperPass()",3, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftAA.cpp,"SwiftAAWrapperPass::doInitialization( Module & M)",4, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftAA.cpp,"SwiftAAWrapperPass::doFinalization( Module & M)",4, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftAA.cpp,"SwiftAAWrapperPass::getAnalysisUsage( AnalysisUsage & AU) const",4, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMSwiftAA.cpp,"swift::createSwiftAAWrapperPass()",3, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"canonicalizeInputFunction( Function & F , ARCEntryPointBuilder & B , SwiftRCIdentity * RC)",168, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"performLocalReleaseMotion( CallInst & Release , BasicBlock & BB , SwiftRCIdentity * RC)",141, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"performLocalRetainMotion( CallInst & Retain , BasicBlock & BB , SwiftRCIdentity * RC)",111, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"analyzeDestructor( Value * P)",123, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"performStoreOnlyObjectElimination( CallInst & Allocation , BasicBlock :: iterator & BBI)",131, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"getBaseAddress( Value * val)",13, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"performLocalRetainUnownedOpt( CallInst * Retain , BasicBlock & BB , ARCEntryPointBuilder & B)",39, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"performRedundantCheckUnownedRemoval( BasicBlock & BB)",42, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"performGeneralOptimizations( Function & F , ARCEntryPointBuilder & B , SwiftRCIdentity * RC)",60, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"swift::createSwiftARCOptPass()",4, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"SwiftARCOpt::SwiftARCOpt()",2, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"SwiftARCOpt::getAnalysisUsage( llvm :: AnalysisUsage & AU) const",5, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCOpts.cpp,"SwiftARCOpt::runOnFunction( Function & F)",24, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCContract.cpp,"SwiftARCContractImpl::SwiftARCContractImpl( Function & InF , SwiftRCIdentity * InRC)",2, 48, 2, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCContract.cpp,"SwiftARCContractImpl::performRRNOptimization( DenseMap<Value*,LocalState> & PtrToLocalStateMap)",169, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCContract.cpp,"SwiftARCContractImpl::run()",118, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCContract.cpp,"SwiftARCContract::runOnFunction( Function & F)",4, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCContract.cpp,"swift::createSwiftARCContractPass()",4, 2, 0, 0
repos/cpp/swift/lib/LLVMPasses/LLVMARCContract.cpp,"SwiftARCContract::getAnalysisUsage( llvm :: AnalysisUsage & AU) const",4, 2, 0, 0
repos/cpp/swift/lib/Markup/LineList.cpp,"LineList::str() const",23, 2, 0, 0
repos/cpp/swift/lib/Markup/LineList.cpp,"swift::markup::measureIndentation( StringRef Text)",16, 2, 0, 0
repos/cpp/swift/lib/Markup/LineList.cpp,"LineListBuilder::addLine( llvm :: StringRef Text , swift :: SourceRange Range)",3, 2, 0, 0
repos/cpp/swift/lib/Markup/LineList.cpp,"LineListBuilder::takeLineList() const",3, 2, 0, 0
repos/cpp/swift/lib/Markup/LineList.cpp,"measureASCIIArt( StringRef S , unsigned NumLeadingSpaces)",15, 2, 0, 0
repos/cpp/swift/lib/Markup/LineList.cpp,"MarkupContext::getLineList( swift :: RawComment RC)",70, 2, 0, 0
repos/cpp/swift/lib/Markup/LineList.cpp,"LineList::subListWithRange( MarkupContext & MC , size_t StartLine , size_t EndLine , size_t StartColumn , size_t EndColumn) const",34, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Document::Document( ArrayRef<MarkupASTNode*> Children)",5, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Document::create( MarkupContext & MC , ArrayRef<swift::markup::MarkupASTNode*> Children)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"BlockQuote::BlockQuote( ArrayRef<MarkupASTNode*> Children)",5, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"BlockQuote::create( MarkupContext & MC , ArrayRef<MarkupASTNode*> Children)",5, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"HTML::create( MarkupContext & MC , StringRef LiteralContent)",4, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"InlineHTML::create( MarkupContext & MC , StringRef LiteralContent)",4, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Code::create( MarkupContext & MC , StringRef LiteralContent)",4, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"CodeBlock::create( MarkupContext & MC , StringRef LiteralContent , StringRef Language)",5, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"List::List( ArrayRef<MarkupASTNode*> Children , bool IsOrdered)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"List::create( MarkupContext & MC , ArrayRef<MarkupASTNode*> Children , bool IsOrdered)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Item::Item( ArrayRef<MarkupASTNode*> Children)",5, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Item::create( MarkupContext & MC , ArrayRef<MarkupASTNode*> Children)",5, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Link::Link( StringRef Destination , ArrayRef<MarkupASTNode*> Children)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Link::create( MarkupContext & MC , StringRef Destination , ArrayRef<MarkupASTNode*> Children)",7, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Image::Image( StringRef Destination , Optional<StringRef> Title , ArrayRef<MarkupASTNode*> Children)",7, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Image::create( MarkupContext & MC , StringRef Destination , Optional<StringRef> Title , ArrayRef<MarkupASTNode*> Children)",11, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Header::Header( unsigned Level , ArrayRef<MarkupASTNode*> Children)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Header::create( MarkupContext & MC , unsigned Level , ArrayRef<MarkupASTNode*> Children)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Paragraph::Paragraph( ArrayRef<MarkupASTNode*> Children)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Paragraph::create( MarkupContext & MC , ArrayRef<swift::markup::MarkupASTNode*> Children)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"HRule::create( MarkupContext & MC)",4, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Text::create( MarkupContext & MC , StringRef LiteralContent)",4, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"SoftBreak::create( MarkupContext & MC)",4, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"LineBreak::create( MarkupContext & MC)",4, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Emphasis::Emphasis( ArrayRef<MarkupASTNode*> Children)",5, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Emphasis::create( MarkupContext & MC , ArrayRef<swift::markup::MarkupASTNode*> Children)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Strong::Strong( ArrayRef<MarkupASTNode*> Children)",5, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"Strong::create( MarkupContext & MC , ArrayRef<swift::markup::MarkupASTNode*> Children)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"ParamField::ParamField( StringRef Name , ArrayRef<MarkupASTNode*> Children)",7, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"ParamField::create( MarkupContext & MC , StringRef Name , ArrayRef<MarkupASTNode*> Children)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"MarkupASTNode::getChildren()",12, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"MarkupASTNode::getChildren() const",12, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"swift::markup::printInlinesUnder( const MarkupASTNode * Node , llvm :: raw_ostream & OS , bool PrintDecorators)",75, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"swift::markup::createSimpleField( MarkupContext & MC , StringRef Tag , ArrayRef<swift::markup::MarkupASTNode*> Children)",14, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"swift::markup::isAFieldTag( StringRef Tag)",11, 2, 0, 0
repos/cpp/swift/lib/Markup/AST.cpp,"swift::markup::dump( const MarkupASTNode * Node , llvm :: raw_ostream & OS , unsigned indent)",170, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"ParseState::ParseState( cmark_iter * Iter , cmark_event_type Event = CMARK_EVENT_NONE , cmark_node * Node = nullptr)",3, 46, 4, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"ParseState::next() const",6, 4, 2, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"ParseState::getType() const",3, 4, 2, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"ParseResult::operator ParseResult < MarkupASTNode >()",3, 4, 2, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"getLiteralContent( MarkupContext & MC , LineList & LL , cmark_node * Node)",8, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseChildren( MarkupContext & MC , LineList & LL , ParseState State , SmallVectorImpl<MarkupASTNode*> & Children)",13, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseText( MarkupContext & MC , LineList & LL , ParseState State)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseBlockQuote( MarkupContext & MC , LineList & LL , ParseState State)",10, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseCode( MarkupContext & MC , LineList & LL , ParseState State)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseCodeBlock( MarkupContext & MC , LineList & LL , ParseState State)",16, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseEmphasis( MarkupContext & MC , LineList & LL , ParseState State)",10, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseStrong( MarkupContext & MC , LineList & LL , ParseState State)",10, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseHeader( MarkupContext & MC , LineList & LL , ParseState State)",12, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseHRule( MarkupContext & MC , LineList & LL , ParseState State)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseHTML( MarkupContext & MC , LineList & LL , ParseState State)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseInlineHTML( MarkupContext & MC , LineList & LL , ParseState State)",7, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseImage( MarkupContext & MC , LineList & LL , ParseState State)",15, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseItem( MarkupContext & MC , LineList & LL , ParseState State)",9, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseLineBreak( MarkupContext & MC , LineList & LL , ParseState State)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseSoftBreak( MarkupContext & MC , LineList & LL , ParseState State)",6, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseLink( MarkupContext & MC , LineList & LL , ParseState State)",10, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseList( MarkupContext & MC , LineList & LL , ParseState State)",11, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseParagraph( MarkupContext & MC , LineList & LL , ParseState State)",10, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"parseElement( MarkupContext & MC , LineList & LL , ParseState State)",63, 2, 0, 0
repos/cpp/swift/lib/Markup/Markup.cpp,"swift::markup::parseDocument( MarkupContext & MC , LineList & LL)",23, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::SerializedSILLoader( ASTContext & Ctx , SILModule * SILMod , DeserializationNotificationHandlerSet * callbacks)",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::~SerializedSILLoader()",1, 47, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::lookupSILFunction( SILFunction * Callee)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::lookupSILFunction( StringRef Name , bool declarationOnly , Optional<SILLinkage> Linkage)",29, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::hasSILFunction( StringRef Name , Optional<SILLinkage> Linkage)",11, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::lookupVTable( Identifier Name)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::lookupWitnessTable( SILWitnessTable * WT)",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::lookupDefaultWitnessTable( SILDefaultWitnessTable * WT)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::invalidateCaches()",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::invalidateFunction( SILFunction * F)",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::getAll()",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::getAllForModule( Identifier Mod , FileUnit * PrimaryFile)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::getAllSILFunctions()",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::getAllVTables()",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::getAllWitnessTables()",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::getAllDefaultWitnessTables()",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedSILLoader.cpp,"SerializedSILLoader::getAllProperties()",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoaderBase::SerializedModuleLoaderBase( ASTContext & ctx , DependencyTracker * tracker , ModuleLoadingMode loadMode)",4, 59, 5, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoaderBase::openModuleFiles( AccessPathElem ModuleID , StringRef DirName , StringRef ModuleFilename , StringRef ModuleDocFilename , std :: unique_ptr<llvm::MemoryBuffer> * ModuleBuffer , std :: unique_ptr<llvm::MemoryBuffer> * ModuleDocBuffer , llvm :: SmallVectorImpl<char> & Scratch)",51, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoader::openModuleFiles( AccessPathElem ModuleID , StringRef DirName , StringRef ModuleFilename , StringRef ModuleDocFilename , std :: unique_ptr<llvm::MemoryBuffer> * ModuleBuffer , std :: unique_ptr<llvm::MemoryBuffer> * ModuleDocBuffer , llvm :: SmallVectorImpl<char> & Scratch)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoader::maybeDiagnoseArchitectureMismatch( SourceLoc sourceLocation , StringRef moduleName , StringRef archName , StringRef directoryPath)",34, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"getArchSpecificModuleFileNames( StringRef archName)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoaderBase::findModule( AccessPathElem moduleID , std :: unique_ptr<llvm::MemoryBuffer> * moduleBuffer , std :: unique_ptr<llvm::MemoryBuffer> * moduleDocBuffer , bool & isFramework)",146, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"getOSAndVersionForDiagnostics( const llvm :: Triple & triple)",34, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoaderBase::loadAST( ModuleDecl & M , Optional<SourceLoc> diagLoc , std :: unique_ptr<llvm::MemoryBuffer> moduleInputBuffer , std :: unique_ptr<llvm::MemoryBuffer> moduleDocInputBuffer , bool isFramework)",65, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"swift::serialization::diagnoseSerializedASTLoadFailure( ASTContext & Ctx , SourceLoc diagLoc , const serialization :: ValidationInfo & loadInfo , const serialization :: ExtendedValidationInfo & extendedInfo , StringRef moduleBufferID , StringRef moduleDocBufferID , ModuleFile * loadedModuleFile , Identifier ModuleName)",169, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoaderBase::canImportModule( std :: pair<Identifier,SourceLoc> mID)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoaderBase::loadModule( SourceLoc importLoc , ModuleDecl :: AccessPathTy path)",47, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoaderBase::loadExtensions( NominalTypeDecl * nominal , unsigned previousGeneration)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoaderBase::loadObjCMethods( ClassDecl * classDecl , ObjCSelector selector , bool isInstanceMethod , unsigned previousGeneration , llvm :: TinyPtrVector<AbstractFunctionDecl*> & methods)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedModuleLoaderBase::verifyAllModules()",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getImportedModules( SmallVectorImpl<ModuleDecl::ImportedModule> & imports , ModuleDecl :: ImportFilter filter) const",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::collectLinkLibrariesFromImports( ModuleDecl :: LinkLibraryCallback callback) const",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::collectLinkLibraries( ModuleDecl :: LinkLibraryCallback callback) const",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::isSystemModule() const",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::lookupValue( ModuleDecl :: AccessPathTy accessPath , DeclName name , NLKind lookupKind , SmallVectorImpl<ValueDecl*> & results) const",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::lookupLocalType( llvm :: StringRef MangledName) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::lookupNestedType( Identifier name , const NominalTypeDecl * parent) const",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::lookupOperator( Identifier name , DeclKind fixity) const",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::lookupPrecedenceGroup( Identifier name) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::lookupVisibleDecls( ModuleDecl :: AccessPathTy accessPath , VisibleDeclConsumer & consumer , NLKind lookupKind) const",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::lookupClassMembers( ModuleDecl :: AccessPathTy accessPath , VisibleDeclConsumer & consumer) const",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::lookupClassMember( ModuleDecl :: AccessPathTy accessPath , DeclName name , SmallVectorImpl<ValueDecl*> & decls) const",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::lookupObjCMethods( ObjCSelector selector , SmallVectorImpl<AbstractFunctionDecl*> & results) const",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getCommentForDecl( const Decl * D) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getGroupNameForDecl( const Decl * D) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getSourceFileNameForDecl( const Decl * D) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getSourceOrderForDecl( const Decl * D) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::collectAllGroups( std :: vector<StringRef> & Names) const",3, 3, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getGroupNameByUSR( StringRef USR) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getTopLevelDecls( SmallVectorImpl<Decl*> & results) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getPrecedenceGroups( SmallVectorImpl<PrecedenceGroupDecl*> & results) const",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getLocalTypeDecls( SmallVectorImpl<TypeDecl*> & results) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getDisplayDecls( SmallVectorImpl<Decl*> & results) const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getFilename() const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getUnderlyingClangModule() const",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializedModuleLoader.cpp,"SerializedASTFile::getDiscriminatorForPrivateValue( const ValueDecl * D) const",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILEntityError::anchor()",1, 33, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"fromStableStringEncoding( unsigned value)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"fromStableSILLinkage( unsigned value)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"fromStableVTableEntryKind( unsigned value)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::FuncTableInfo::FuncTableInfo( ModuleFile & MF)",1, 53, 2, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::FuncTableInfo::GetInternalKey( external_key_type ID)",1, 72, 2, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::FuncTableInfo::GetExternalKey( internal_key_type ID)",1, 72, 2, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::FuncTableInfo::ComputeHash( internal_key_type key)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::FuncTableInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::FuncTableInfo::ReadKeyDataLength( const uint8_t * & data)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::FuncTableInfo::ReadKey( const uint8_t * data , unsigned length)",5, 4, 2, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::FuncTableInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",6, 4, 2, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::SILDeserializer( ModuleFile * MF , SILModule & M , DeserializationNotificationHandlerSet * callback)",90, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readFuncTable( ArrayRef<uint64_t> fields , StringRef blobData)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::setLocalValue( ValueBase * Value , ValueID Id)",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getLocalValue( ValueID Id , SILType Type)",20, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getBBForDefinition( SILFunction * Fn , SILBasicBlock * Prev , unsigned ID)",24, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getBBForReference( SILFunction * Fn , unsigned ID)",11, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"getSILType( Type Ty , SILValueCategory Category)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getFuncForReference( StringRef name , SILType type)",32, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getFuncForReference( StringRef name)",21, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getGlobalForReference( StringRef name)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readSILFunction( DeclID FID , SILFunction * existingFn , StringRef name , bool declarationOnly , bool errorIfEmptyBody)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readSILFunctionChecked( DeclID FID , SILFunction * existingFn , StringRef name , bool declarationOnly , bool errorIfEmptyBody)",336, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readSILBasicBlock( SILFunction * Fn , SILBasicBlock * Prev , SmallVectorImpl<uint64_t> & scratch)",35, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"getCastConsumptionKind( unsigned attr)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"getSILDeclRef( ModuleFile * MF , ArrayRef<uint64_t> ListOfValues , unsigned & NextIdx)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readKeyPathComponent( ArrayRef<uint64_t> ListOfValues , unsigned & nextValue)",108, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readSILInstruction( SILFunction * Fn , SILBasicBlock * BB , SILBuilder & Builder , unsigned RecordKind , SmallVectorImpl<uint64_t> & scratch)",1503, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::lookupSILFunction( SILFunction * InFunc)",24, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::hasSILFunction( StringRef Name , Optional<SILLinkage> Linkage)",64, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::lookupSILFunction( StringRef name , bool declarationOnly)",23, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readGlobalVar( StringRef Name)",68, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getAllSILGlobalVariables()",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getAllSILFunctions()",23, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readVTable( DeclID VId)",98, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::lookupVTable( Identifier Name)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getAllVTables()",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readProperty( DeclID PId)",33, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getAllProperties()",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readWitnessTableEntries( llvm :: BitstreamEntry & entry , std :: vector<SILWitnessTable::Entry> & witnessEntries , std :: vector<SILWitnessTable::ConditionalConformance> & conditionalConformances)",75, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readWitnessTable( DeclID WId , SILWitnessTable * existingWt)",111, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getAllWitnessTables()",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::lookupWitnessTable( SILWitnessTable * existingWt)",22, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::readDefaultWitnessTable( DeclID WId , SILDefaultWitnessTable * existingWt)",87, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::getAllDefaultWitnessTables()",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::lookupDefaultWitnessTable( SILDefaultWitnessTable * existingWt)",22, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::~SILDeserializer()",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::invalidateFunctionCache()",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/DeserializeSIL.cpp,"SILDeserializer::invalidateFunction( SILFunction * F)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"YamlGroupInputParser::parseRoot( FileNameToGroupNameMap & Map , llvm :: yaml :: Node * Root , StringRef ParentName)",40, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"YamlGroupInputParser::YamlGroupInputParser( StringRef RecordPath)",1, 72, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"YamlGroupInputParser::getParsedMap()",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"YamlGroupInputParser::parse()",39, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclGroupNameContext::GroupNameCollector::GroupNameCollector( bool Enable)",1, 56, 4, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclGroupNameContext::GroupNameCollector::getGroupName( const Decl * VD)",3, 7, 4, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclGroupNameContext::GroupNameCollectorFromJson::GroupNameCollectorFromJson( StringRef RecordPath , ASTContext & Ctx)",3, 18, 4, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclGroupNameContext::GroupNameCollectorFromJson::getGroupNameInternal( const Decl * VD)",27, 6, 4, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclGroupNameContext::DeclGroupNameContext( StringRef RecordPath , ASTContext & Ctx)",2, 71, 4, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclGroupNameContext::getGroupSequence( const Decl * VD)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclGroupNameContext::getOrderedGroupNames()",7, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclGroupNameContext::isEnable()",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclCommentTableInfo::ComputeHash( key_type_ref key)",5, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclCommentTableInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",23, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclCommentTableInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DeclCommentTableInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",14, 4, 2, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DocSerializer::writeDocBlockInfoBlock()",21, 4, 0, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"writeGroupNames( const comment_block :: GroupNamesLayout & GroupNames , ArrayRef<StringRef> Names)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"writeDeclCommentTable( const comment_block :: DeclCommentListLayout & DeclCommentList , const SourceFile * SF , const ModuleDecl * M , DeclGroupNameContext & GroupContext)",129, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"DocSerializer::writeDocHeader()",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeDoc.cpp,"serialization::writeDocToStream( raw_ostream & os , ModuleOrSourceFile DC , StringRef GroupInfoPath)",23, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"toStableStringEncoding( StringLiteralInst :: Encoding encoding)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"toStableSILLinkage( SILLinkage linkage)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"toStableVTableEntryKind( SILVTable :: Entry :: Kind kind)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"toStableCastConsumptionKind( CastConsumptionKind kind)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"FuncTableInfo::FuncTableInfo( Serializer & S)",1, 52, 4, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"FuncTableInfo::ComputeHash( key_type_ref key)",5, 6, 4, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"FuncTableInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",5, 6, 4, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"FuncTableInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",4, 6, 4, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"FuncTableInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",4, 6, 4, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::registerSILAbbr()",8, 6, 4, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::SILSerializer( Serializer & S , llvm :: BitstreamWriter & Out , bool serializeAll)",2, 60, 4, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::addMandatorySILFunction( const SILFunction * F , bool emitDeclarationsForOnoneSupport)",25, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::addReferencedSILFunction( const SILFunction * F , bool DeclOnly)",27, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::processSILFunctionWorklist()",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::addValueRef( const ValueBase * Val)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILFunction( const SILFunction & F , bool DeclOnly)",108, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILBasicBlock( const SILBasicBlock & BB)",37, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"handleSILDeclRef( Serializer & S , const SILDeclRef & Ref , SmallVectorImpl<ValueID> & ListOfValues)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::addSILFunctionRef( SILFunction * F)",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::handleMethodInst( const MethodInst * MI , SILValue operand , SmallVectorImpl<ValueID> & ListOfValues)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeOneTypeLayout( SILInstructionKind valueKind , SILType type)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeOneOperandLayout( SILInstructionKind valueKind , unsigned attrs , SILValue operand)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeOneOperandExtraAttributeLayout( SILInstructionKind valueKind , unsigned attrs , SILValue operand)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeOneTypeOneOperandLayout( SILInstructionKind valueKind , unsigned attrs , SILType type , SILValue operand)",16, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeOneTypeOneOperandLayout( SILInstructionKind valueKind , unsigned attrs , CanType type , SILValue operand)",16, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeConversionLikeInstruction( const SingleValueInstruction * I , unsigned attrs)",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeKeyPathPatternComponent( const KeyPathPatternComponent & component , SmallVectorImpl<ValueID> & ListOfValues , SmallVectorImpl<ProtocolConformanceRef> & serializeAfter)",84, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILInstruction( const SILInstruction & SI)",1410, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"writeIndexTable( Serializer & S , const sil_index_block :: ListLayout & List , sil_index_block :: RecordKind kind , const SILSerializer :: Table & table)",27, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeIndexTables()",44, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILGlobalVar( const SILGlobalVariable & g)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILVTable( const SILVTable & vt)",32, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILProperty( const SILProperty & prop)",23, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILWitnessTable( const SILWitnessTable & wt)",31, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILWitnessTableEntry( const SILWitnessTable :: Entry & entry)",49, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILDefaultWitnessTable( const SILDefaultWitnessTable & wt)",25, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::shouldEmitFunctionBody( const SILFunction * F , bool isReference)",26, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILBlock( const SILModule * SILMod)",133, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"SILSerializer::writeSILModule( const SILModule * SILMod)",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/SerializeSIL.cpp,"Serializer::writeSIL( const SILModule * SILMod , bool serializeAllSIL)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"checkModuleSignature( llvm :: BitstreamCursor & cursor , ArrayRef<unsigned char> signature)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"enterTopLevelModuleBlock( llvm :: BitstreamCursor & cursor , unsigned ID , bool shouldReadBlockInfo = true)",25, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"readOptionsBlock( llvm :: BitstreamCursor & cursor , SmallVectorImpl<uint64_t> & scratch , ExtendedValidationInfo & extendedInfo)",54, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"validateControlBlock( llvm :: BitstreamCursor & cursor , SmallVectorImpl<uint64_t> & scratch , std :: pair<uint16_t,uint16_t> expectedVersion , ExtendedValidationInfo * extendedInfo)",104, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"validateInputBlock( llvm :: BitstreamCursor & cursor , SmallVectorImpl<uint64_t> & scratch , SmallVectorImpl<SerializationOptions::FileDependency> & dependencies)",27, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"serialization::isSerializedAST( StringRef data)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"serialization::validateSerializedAST( StringRef data , ExtendedValidationInfo * extendedInfo , SmallVectorImpl<SerializationOptions::FileDependency> * dependencies)",59, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::Dependency::getPrettyPrintedPath() const",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclTableInfo::GetInternalKey( external_key_type ID)",7, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclTableInfo::ComputeHash( internal_key_type key)",8, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclTableInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclTableInfo::ReadKeyDataLength( const uint8_t * & data)",5, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclTableInfo::ReadKey( const uint8_t * data , unsigned length)",16, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclTableInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",12, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ExtensionTableInfo::GetInternalKey( external_key_type ID)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ExtensionTableInfo::ComputeHash( internal_key_type key)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ExtensionTableInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ExtensionTableInfo::ReadKeyDataLength( const uint8_t * & data)",5, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ExtensionTableInfo::ReadKey( const uint8_t * data , unsigned length)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ExtensionTableInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",25, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ExtensionTableInfo::ExtensionTableInfo( ModuleFile & file)",1, 64, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::LocalDeclTableInfo::GetInternalKey( external_key_type ID)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::LocalDeclTableInfo::ComputeHash( internal_key_type key)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::LocalDeclTableInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::LocalDeclTableInfo::ReadKeyDataLength( const uint8_t * & data)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::LocalDeclTableInfo::ReadKey( const uint8_t * data , unsigned length)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::LocalDeclTableInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::NestedTypeDeclsTableInfo::GetInternalKey( external_key_type ID)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::NestedTypeDeclsTableInfo::ComputeHash( internal_key_type key)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::NestedTypeDeclsTableInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::NestedTypeDeclsTableInfo::ReadKeyDataLength( const uint8_t * & data)",5, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::NestedTypeDeclsTableInfo::ReadKey( const uint8_t * data , unsigned length)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::NestedTypeDeclsTableInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",12, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMemberNamesTableInfo::GetInternalKey( external_key_type ID)",7, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMemberNamesTableInfo::ComputeHash( internal_key_type key)",8, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMemberNamesTableInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMemberNamesTableInfo::ReadKeyDataLength( const uint8_t * & data)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMemberNamesTableInfo::ReadKey( const uint8_t * data , unsigned length)",18, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMemberNamesTableInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",5, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMembersTableInfo::GetInternalKey( external_key_type ID)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMembersTableInfo::ComputeHash( internal_key_type key)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMembersTableInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMembersTableInfo::ReadKeyDataLength( const uint8_t * & data)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMembersTableInfo::ReadKey( const uint8_t * data , unsigned length)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclMembersTableInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",10, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readDeclTable( ArrayRef<uint64_t> fields , StringRef blobData)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readExtensionTable( ArrayRef<uint64_t> fields , StringRef blobData)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readLocalDeclTable( ArrayRef<uint64_t> fields , StringRef blobData)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readNestedTypeDeclsTable( ArrayRef<uint64_t> fields , StringRef blobData)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readDeclMemberNamesTable( ArrayRef<uint64_t> fields , StringRef blobData)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readDeclMembersTable( ArrayRef<uint64_t> fields , StringRef blobData)",11, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ObjCMethodTableInfo::GetInternalKey( external_key_type ID)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ObjCMethodTableInfo::ComputeHash( internal_key_type key)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ObjCMethodTableInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ObjCMethodTableInfo::ReadKeyDataLength( const uint8_t * & data)",5, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ObjCMethodTableInfo::ReadKey( const uint8_t * data , unsigned length)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ObjCMethodTableInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",17, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readObjCMethodTable( ArrayRef<uint64_t> fields , StringRef blobData)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readIndexBlock( llvm :: BitstreamCursor & cursor)",127, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclCommentTableInfo::DeclCommentTableInfo( ModuleFile & F)",1, 48, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclCommentTableInfo::GetInternalKey( external_key_type key)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclCommentTableInfo::ComputeHash( internal_key_type key)",5, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclCommentTableInfo::EqualKey( internal_key_type lhs , internal_key_type rhs)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclCommentTableInfo::ReadKeyDataLength( const uint8_t * & data)",5, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclCommentTableInfo::ReadKey( const uint8_t * data , unsigned length)",3, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::DeclCommentTableInfo::ReadData( internal_key_type key , const uint8_t * data , unsigned length)",28, 4, 2, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readDeclCommentTable( ArrayRef<uint64_t> fields , StringRef blobData)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readGroupTable( ArrayRef<uint64_t> Fields , StringRef BlobData)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readCommentBlock( llvm :: BitstreamCursor & cursor)",42, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"getActualLibraryKind( unsigned rawKind)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"areCompatibleArchitectures( const llvm :: Triple & moduleTarget , const llvm :: Triple & ctxTarget)",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"areCompatibleOSs( const llvm :: Triple & moduleTarget , const llvm :: Triple & ctxTarget)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"isTargetTooNew( const llvm :: Triple & moduleTarget , const llvm :: Triple & ctxTarget)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::readModuleDocIfPresent()",58, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::ModuleFile( std :: unique_ptr<llvm::MemoryBuffer> moduleInputBuffer , std :: unique_ptr<llvm::MemoryBuffer> moduleDocInputBuffer , bool isFramework , serialization :: ValidationInfo & info , serialization :: ExtendedValidationInfo * extInfo)",237, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::associateWithFileContext( FileUnit * file , SourceLoc diagLoc)",116, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::takeBufferForDiagnostics()",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::~ModuleFile()",1, 30, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::lookupValue( DeclName name , SmallVectorImpl<ValueDecl*> & results)",44, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::lookupLocalType( StringRef MangledName)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::lookupNestedType( Identifier name , const NominalTypeDecl * parent)",30, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::lookupOperator( Identifier name , DeclKind fixity)",19, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::lookupPrecedenceGroup( Identifier name)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getImportedModules( SmallVectorImpl<ModuleDecl::ImportedModule> & results , ModuleDecl :: ImportFilter filter)",30, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getImportDecls( SmallVectorImpl<Decl*> & Results)",67, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::lookupVisibleDecls( ModuleDecl :: AccessPathTy accessPath , VisibleDeclConsumer & consumer , NLKind lookupKind)",37, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::loadExtensions( NominalTypeDecl * nominal)",52, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::loadObjCMethods( ClassDecl * classDecl , ObjCSelector selector , bool isInstanceMethod , llvm :: TinyPtrVector<AbstractFunctionDecl*> & methods)",33, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::loadNamedMembers( const IterableDeclContext * IDC , DeclBaseName N , uint64_t contextData)",55, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::lookupClassMember( ModuleDecl :: AccessPathTy accessPath , DeclName name , SmallVectorImpl<ValueDecl*> & results)",49, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::lookupClassMembers( ModuleDecl :: AccessPathTy accessPath , VisibleDeclConsumer & consumer)",29, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::lookupObjCMethods( ObjCSelector selector , SmallVectorImpl<AbstractFunctionDecl*> & results)",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::collectLinkLibraries( ModuleDecl :: LinkLibraryCallback callback) const",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getTopLevelDecls( SmallVectorImpl<Decl*> & results)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getPrecedenceGroups( SmallVectorImpl<PrecedenceGroupDecl*> & results)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getLocalTypeDecls( SmallVectorImpl<TypeDecl*> & results)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getDisplayDecls( SmallVectorImpl<Decl*> & results)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getCommentForDecl( const Decl * D) const",41, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getGroupNameById( unsigned Id) const",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getSourceFileNameById( unsigned Id) const",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getGroupNameForDecl( const Decl * D) const",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getSourceFileNameForDecl( const Decl * D) const",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getSourceOrderForDecl( const Decl * D) const",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::collectAllGroups( std :: vector<StringRef> & Names) const",16, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getCommentForDeclByUSR( StringRef USR) const",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getGroupNameByUSR( StringRef USR) const",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::getDiscriminatorForPrivateValue( const ValueDecl * D)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"ModuleFile::verify() const",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"SerializedASTFile::hasEntryPoint() const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"SerializedASTFile::getAllGenericSignatures( SmallVectorImpl<GenericSignature*> & genericSignatures)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"SerializedASTFile::getMainClass() const",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/ModuleFile.cpp,"SerializedASTFile::getLanguageVersionBuiltWith() const",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"declIDFitsIn32Bits()",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"bitOffsetFitsIn32Bits()",11, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclTableInfo::ComputeHash( key_type_ref key)",15, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclTableInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",17, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclTableInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",18, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclTableInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",9, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ExtensionTableInfo::ExtensionTableInfo( serialization :: Serializer & serializer)",2, 36, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ExtensionTableInfo::ComputeHash( key_type_ref key)",5, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ExtensionTableInfo::getNameDataForBase( const NominalTypeDecl * nominal , StringRef * dataToWrite = nullptr)",14, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ExtensionTableInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",17, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ExtensionTableInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",3, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ExtensionTableInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",11, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"LocalDeclTableInfo::ComputeHash( key_type_ref key)",5, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"LocalDeclTableInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",11, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"LocalDeclTableInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",3, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"LocalDeclTableInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",6, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"NestedTypeDeclsTableInfo::ComputeHash( key_type_ref key)",5, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"NestedTypeDeclsTableInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",12, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"NestedTypeDeclsTableInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",4, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"NestedTypeDeclsTableInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",9, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclMemberNamesTableInfo::ComputeHash( key_type_ref key)",15, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclMemberNamesTableInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",14, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclMemberNamesTableInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",18, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclMemberNamesTableInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",6, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclMembersTableInfo::ComputeHash( key_type_ref key)",3, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclMembersTableInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",12, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclMembersTableInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",6, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"DeclMembersTableInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",8, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"llvm::DenseMapInfo<Serializer::DeclTypeUnion>::getEmptyKey()",1, 66, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"llvm::DenseMapInfo<Serializer::DeclTypeUnion>::getTombstoneKey()",1, 76, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"llvm::DenseMapInfo<Serializer::DeclTypeUnion>::getHashValue( const DeclTypeUnion & val)",3, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"llvm::DenseMapInfo<Serializer::DeclTypeUnion>::isEqual( const DeclTypeUnion & lhs , const DeclTypeUnion & rhs)",3, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getModule( ModuleOrSourceFile DC)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getContext( ModuleOrSourceFile DC)",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"shouldSerializeAsLocalContext( const DeclContext * DC)",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getDeclForContext( const DeclContext * DC)",27, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawOpaqueReadOwnership( swift :: OpaqueReadOwnership ownership)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawReadImplKind( swift :: ReadImplKind kind)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawWriteImplKind( swift :: WriteImplKind kind)",16, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawReadWriteImplKind( swift :: ReadWriteImplKind kind)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getAccessors( const AbstractStorageDecl * storage)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addLocalDeclContextRef( const DeclContext * DC)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addGenericSignatureRef( const GenericSignature * env)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addGenericEnvironmentRef( const GenericEnvironment * env)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addSubstitutionMapRef( SubstitutionMap substitutions)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addDeclContextRef( const DeclContext * DC)",25, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addDeclRef( const Decl * D , bool allowTypeAliasXRef)",24, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addTypeRef( Type ty)",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addDeclBaseNameRef( DeclBaseName ident)",23, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addUniquedString( StringRef str)",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addFilename( StringRef filename)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addModuleRef( const ModuleDecl * M)",25, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addSILLayoutRef( SILLayout * layout)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::addConformanceRef( const NormalProtocolConformance * conformance)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"SerializerBase::emitBlockID( unsigned ID , StringRef name , SmallVectorImpl<unsigned char> & nameBuffer)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"SerializerBase::emitRecordID( unsigned ID , StringRef name , SmallVectorImpl<unsigned char> & nameBuffer)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeBlockInfoBlock()",136, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeHeader( const SerializationOptions & options)",75, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"flattenImportPath( const ModuleDecl :: ImportedModule & import , ImportPathBlob & out)",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeInputBlock( const SerializationOptions & options)",81, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableDefaultArgumentKind( swift :: DefaultArgumentKind kind)",21, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableMetatypeRepresentation( AnyMetatypeType * metatype)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableResilienceExpansion( swift :: ResilienceExpansion e)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeParameterList( const ParameterList * PL)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writePattern( const Pattern * pattern , DeclContext * owningDC)",87, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableRequirementKind( RequirementKind kind)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeGenericRequirements( ArrayRef<Requirement> requirements , const std :: array<unsigned,256> & abbrCodes)",57, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeInlinableBodyTextIfNeeded( const AbstractFunctionDecl * AFD)",19, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeGenericParams( const GenericParamList * genericParams)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeGenericSignature( const GenericSignature * sig)",24, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeGenericEnvironment( const GenericEnvironment * env)",57, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeSubstitutionMap( const SubstitutionMap substitutions)",27, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeSILLayout( SILLayout * layout)",27, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeNormalConformance( const NormalProtocolConformance * conformance)",75, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeConformance( ProtocolConformance * conformance , const std :: array<unsigned,256> & abbrCodes , GenericEnvironment * genericEnv)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeConformance( ProtocolConformanceRef conformanceRef , const std :: array<unsigned,256> & abbrCodes , GenericEnvironment * genericEnv)",85, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeConformances( ArrayRef<ProtocolConformanceRef> conformances , const std :: array<unsigned,256> & abbrCodes)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeConformances( ArrayRef<ProtocolConformance*> conformances , const std :: array<unsigned,256> & abbrCodes)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableOptionalTypeKind( swift :: OptionalTypeKind kind)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"shouldSerializeMember( Decl * D)",43, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeMembers( DeclID parentID , DeclRange members , bool isClass)",47, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeDefaultWitnessTable( const ProtocolDecl * proto , const std :: array<unsigned,256> & abbrCodes)",24, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getStableAccessorKind( swift :: AccessorKind K)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getStableCtorInitializerKind( swift :: CtorInitializerKind K)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeCrossReference( const DeclContext * DC , uint32_t pathLen)",142, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeCrossReference( const Decl * D)",73, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableAssociativity( swift :: Associativity assoc)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getStableStaticSpelling( swift :: StaticSpellingKind SS)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableAccessLevel( swift :: AccessLevel access)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getStableSelfAccessKind( swift :: SelfAccessKind MM)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"verifyAttrSerializable( const Decl * D)",1, 53, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getOptionalOrZero( const llvm :: Optional<unsigned> & X)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeDeclAttribute( const DeclAttribute * DA)",199, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::isDeclXRef( const Decl * D) const",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeDeclContext( const DeclContext * DC)",37, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writePatternBindingInitializer( PatternBindingDecl * binding , unsigned bindingIndex)",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeDefaultArgumentInitializer( const DeclContext * parentContext , unsigned index)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeAbstractClosureExpr( const DeclContext * parentContext , Type Ty , bool isImplicit , unsigned discriminator)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeLocalDeclContext( const DeclContext * DC)",71, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableForeignErrorConventionKind( ForeignErrorConvention :: Kind kind)",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableVarDeclSpecifier( swift :: VarDecl :: Specifier sf)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeForeignErrorConvention( const ForeignErrorConvention & fec)",30, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"contextDependsOn( const NominalTypeDecl * decl , const ModuleDecl * problemModule)",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"collectDependenciesFromType( llvm :: SmallSetVector<Type,4> & seen , Type ty , const ModuleDecl * excluding)",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"collectDependenciesFromRequirement( llvm :: SmallSetVector<Type,4> & seen , const Requirement & req , const ModuleDecl * excluding)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"collectDependenciesFromType( Type ty)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeDecl( const Decl * D)",900, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableFunctionTypeRepresentation( swift :: FunctionType :: Representation cc)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableSILFunctionTypeRepresentation( swift :: SILFunctionType :: Representation cc)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableSILCoroutineKind( swift :: SILCoroutineKind kind)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableReferenceOwnership( swift :: ReferenceOwnership ownership)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableValueOwnership( swift :: ValueOwnership ownership)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableParameterConvention( swift :: ParameterConvention pc)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"getRawStableResultConvention( swift :: ResultConvention rc)",10, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"findTypeAliasForBuiltin( ASTContext & Ctx , Type T)",16, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeType( Type ty)",392, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeAllDeclsAndTypes()",168, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeAllIdentifiers()",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeOffsets( const index_block :: OffsetsLayout & Offsets , const std :: vector<BitOffset> & values)",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"writeDeclTable( const index_block :: DeclListLayout & DeclList , index_block :: RecordKind kind , const Serializer :: DeclTable & table)",22, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"writeExtensionTable( const index_block :: ExtensionTableLayout & ExtensionTable , const Serializer :: ExtensionTable & table , Serializer & serializer)",24, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"writeLocalDeclTable( const index_block :: DeclListLayout & DeclList , index_block :: RecordKind kind , LocalTypeHashTableGenerator & generator)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"writeNestedTypeDeclsTable( const index_block :: NestedTypeDeclsLayout & declList , const Serializer :: NestedTypeDeclsTable & table)",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"writeDeclMemberNamesTable( const index_block :: DeclMemberNamesLayout & declNames , const Serializer :: DeclMemberNamesTable & table)",23, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"writeDeclMembersTable( const decl_member_tables_block :: DeclMembersLayout & mems , const Serializer :: DeclMembersTable & table)",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ObjCMethodTableInfo::ComputeHash( key_type_ref key)",5, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ObjCMethodTableInfo::EmitKeyDataLength( raw_ostream & out , key_type_ref key , data_type_ref data)",18, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ObjCMethodTableInfo::EmitKey( raw_ostream & out , key_type_ref key , unsigned len)",7, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"ObjCMethodTableInfo::EmitData( raw_ostream & out , key_type_ref key , data_type_ref data , unsigned len)",11, 6, 4, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"writeObjCMethodTable( const index_block :: ObjCMethodTableLayout & out , Serializer :: ObjCMethodTable & objcMethods)",29, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"collectInterestingNestedDeclarations( Serializer & S , Range members , Serializer :: DeclTable & operatorMethodDecls , Serializer :: ObjCMethodTable & objcMethods , Serializer :: NestedTypeDeclsTable & nestedTypeDecls , bool isLocal = false)",74, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeAST( ModuleOrSourceFile DC , bool enableNestedTypeLookupTable)",165, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"SerializerBase::writeToStream( raw_ostream & os)",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"SerializerBase::SerializerBase( ArrayRef<unsigned char> signature , ModuleOrSourceFile DC)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"Serializer::writeToStream( raw_ostream & os , ModuleOrSourceFile DC , const SILModule * SILMod , const SerializationOptions & options)",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/Serialization.cpp,"swift::serialize( ModuleOrSourceFile DC , const SerializationOptions & options , const SILModule * M)",32, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"swift::getNameOfModule( const ModuleFile * MF)",3, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"operator < <( raw_ostream & os , IDAndKind && pair)",4, 4, 2, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"PrettyDeclDeserialization::PrettyDeclDeserialization( ModuleFile * module , const ModuleFile :: Serialized<Decl*> & declOrOffset , DeclID DID , decls_block :: RecordKind kind)",5, 6, 4, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"PrettyDeclDeserialization::getRecordKindString( decls_block :: RecordKind Kind)",8, 6, 4, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"PrettyDeclDeserialization::print( raw_ostream & os) const",18, 6, 4, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"PrettyXRefTrace::PrettyXRefTrace( ModuleDecl & M)",1, 66, 4, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"PrettyXRefTrace::print( raw_ostream & os) const",3, 6, 4, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"DeclDeserializationError::anchor()",1, 43, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"XRefError::anchor()",1, 28, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"XRefNonLoadedModuleError::anchor()",1, 43, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"OverrideError::anchor()",1, 32, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"TypeError::anchor()",1, 28, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ExtensionError::anchor()",1, 33, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"skipRecord( llvm :: BitstreamCursor & cursor , unsigned recordKind)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::fatal( llvm :: Error error)",28, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getModuleFileForDelayedActions()",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::finishPendingActions()",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualAccessorKind( uint8_t raw)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualDefaultArgKind( uint8_t raw)",27, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::readParameterList()",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::readPattern( DeclContext * owningDC)",152, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::readSILLayout( llvm :: BitstreamCursor & Cursor)",36, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::readConformance( llvm :: BitstreamCursor & Cursor , GenericEnvironment * genericEnv)",134, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::readNormalConformance( NormalConformanceID conformanceID)",65, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::maybeReadGenericParams( DeclContext * DC)",36, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::readGenericRequirements( SmallVectorImpl<Requirement> & requirements , llvm :: BitstreamCursor & Cursor)",123, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::configureGenericEnvironment( GenericContext * genericDecl , serialization :: GenericEnvironmentID envID)",21, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getGenericSignature( serialization :: GenericSignatureID ID)",61, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getGenericSignatureOrEnvironment( serialization :: GenericEnvironmentID ID , bool wantEnvironment)",114, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getGenericEnvironment( serialization :: GenericEnvironmentID ID)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getSubstitutionMap( serialization :: SubstitutionMapID id)",70, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::readDefaultWitnessTable( ProtocolDecl * proto)",36, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualCtorInitializerKind( uint8_t raw)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"reExportedToSameModule( const ModuleDecl * fromModule , const ModuleDecl * toModule)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"filterValues( Type expectedTy , ModuleDecl * expectedModule , CanGenericSignature expectedGenericSig , bool isType , bool inProtocolExt , bool importedFromClang , bool isStatic , Optional<swift::CtorInitializerKind> ctorInit , SmallVectorImpl<ValueDecl*> & values)",72, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::resolveCrossReference( ModuleID MID , uint32_t pathLen)",486, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getDeclBaseName( IdentifierID IID)",31, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getIdentifier( IdentifierID IID)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getIdentifierText( IdentifierID IID)",21, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getLocalDeclContext( DeclContextID DCID)",88, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getDeclContext( DeclContextID DCID)",54, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getModule( ModuleID MID)",22, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getModule( ArrayRef<Identifier> name , bool allowLoading)",26, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualAssociativity( uint8_t assoc)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualStaticSpellingKind( uint8_t raw)",11, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"isDeclAttrRecord( unsigned ID)",8, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualAccessLevel( uint8_t raw)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualOptionalTypeKind( uint8_t raw)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualSelfAccessKind( uint8_t raw)",11, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualResilienceExpansion( uint8_t raw)",9, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualVarDeclSpecifier( serialization :: VarDeclSpecifier raw)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualOpaqueReadOwnership( unsigned rawKind)",12, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualReadImplKind( unsigned rawKind)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualWriteImplKind( unsigned rawKind)",16, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualReadWriteImplKind( unsigned rawKind)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::configureStorage( AbstractStorageDecl * decl , uint8_t rawOpaqueReadOwnership , uint8_t rawReadImplKind , uint8_t rawWriteImplKind , uint8_t rawReadWriteImplKind , AccessorRecord & rawIDs)",37, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::createDecl( Args && ... args)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"decodeLazyConformanceContextData( uint64_t contextData)",5, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"encodeLazyConformanceContextData( uint64_t numProtocols , uint64_t bitPosition)",6, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getDecl( DeclID DID)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getDeclChecked( DeclID DID)",15, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"attributeChainContains( DeclAttribute * attr)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getDeclCheckedImpl( DeclID DID)",1828, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualFunctionTypeRepresentation( uint8_t rep)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualSILFunctionTypeRepresentation( uint8_t rep)",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualSILCoroutineKind( uint8_t rep)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualReferenceOwnership( serialization :: ReferenceOwnership raw)",11, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualValueOwnership( serialization :: ValueOwnership raw)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualParameterConvention( uint8_t raw)",17, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"getActualResultConvention( uint8_t raw)",13, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getType( TypeID TID)",7, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::getTypeChecked( TypeID TID)",820, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"handleErrorAndSupplyMissingClassMember( ASTContext & context , llvm :: Error && error , ClassDecl * containingClass)",26, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"handleErrorAndSupplyMissingProtoMember( ASTContext & context , llvm :: Error && error , ProtocolDecl * containingProto)",27, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"handleErrorAndSupplyMissingMiscMember( llvm :: Error && error)",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"handleErrorAndSupplyMissingMember( ASTContext & context , Decl * container , llvm :: Error && error)",14, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::loadAllMembers( Decl * container , uint64_t contextData)",58, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::loadAllConformances( const Decl * D , uint64_t contextData , SmallVectorImpl<ProtocolConformance*> & conformances)",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::loadAssociatedTypeDefault( const swift :: AssociatedTypeDecl * ATD , uint64_t contextData)",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::finishNormalConformance( NormalProtocolConformance * conformance , uint64_t contextData)",212, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::loadGenericEnvironment( const DeclContext * decl , uint64_t contextData)",4, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"decodeRawStableForeignErrorConventionKind( uint8_t kind)",16, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::maybeReadInlinableBodyText()",18, 2, 0, 0
repos/cpp/swift/lib/Serialization/Deserialization.cpp,"ModuleFile::maybeReadForeignErrorConvention()",85, 2, 0, 0
repos/cpp/swift/lib/Syntax/UnknownSyntax.cpp,"UnknownSyntax::validate() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxVisitor.cpp.gyb,"is_visitable( node)",4, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxVisitor.cpp.gyb,"swift::syntax::SyntaxVisitor::visit( Syntax node)",19, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxVisitor.cpp.gyb,"swift::syntax::Syntax::accept( SyntaxVisitor & visitor)",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxSerialization.cpp.gyb,"swift::byteTree::ObjectTraits<ArrayRef<RC<syntax::RawSyntax>>>::write( ByteTreeWriter & Writer , const ArrayRef<RC<syntax::RawSyntax>> & Layout , UserInfoMap & UserInfo)",11, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxSerialization.cpp.gyb,"swift::byteTree::WrapperTypeTraits<tok>::numericValue( const tok & Value)",28, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::make( RC<RawSyntax> Raw , const SyntaxData * Parent , CursorIndex IndexInParent)",7, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::isType() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::isStmt() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::isDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::isExpr() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::isPattern() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::isUnknown() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::dump( llvm :: raw_ostream & OS) const",4, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::dump() const",1, 54, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::getPreviousNode() const",15, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::getNextNode() const",13, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::getFirstToken() const",20, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::getAbsolutePositionBeforeLeadingTrivia() const",13, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::getAbsolutePosition() const",5, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxData.cpp,"SyntaxData::getAbsoluteEndPositionAfterTrailingTrivia() const",9, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeToken( tok Kind , OwnedString Text , const Trivia & LeadingTrivia , const Trivia & TrailingTrivia , SourcePresence Presence , RC<SyntaxArena> Arena)",9, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeUnknownSyntax( llvm :: ArrayRef<TokenSyntax> Tokens , RC<SyntaxArena> Arena)",11, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeBlankCollectionSyntax( SyntaxKind Kind)",11, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::countChildren( SyntaxKind Kind)",14, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::canServeAsCollectionMemberRaw( SyntaxKind CollectionKind , const RC<RawSyntax> & Member)",21, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::canServeAsCollectionMember( SyntaxKind CollectionKind , Syntax Member)",4, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::createRaw( SyntaxKind Kind , llvm :: ArrayRef<RC<RawSyntax>> Elements , RC<SyntaxArena> Arena)",42, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::createSyntax( SyntaxKind Kind , llvm :: ArrayRef<Syntax> Elements , RC<SyntaxArena> Arena)",13, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"is_syntax_collection()",42, 4, 2, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"Token( const Trivia & LeadingTrivia , const Trivia & TrailingTrivia , RC<SyntaxArena> Arena)",8, 4, 2, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeVoidTupleType( RC<SyntaxArena> Arena)",6, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeTupleTypeElement( llvm :: Optional<TokenSyntax> Label , llvm :: Optional<TokenSyntax> Colon , TypeSyntax Type , llvm :: Optional<TokenSyntax> TrailingComma , RC<SyntaxArena> Arena)",8, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeTupleTypeElement( TypeSyntax Type , llvm :: Optional<TokenSyntax> TrailingComma , RC<SyntaxArena> Arena)",6, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeGenericParameter( TokenSyntax Name , llvm :: Optional<TokenSyntax> TrailingComma , RC<SyntaxArena> Arena)",5, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeTypeIdentifier( OwnedString TypeName , const Trivia & LeadingTrivia , const Trivia & TrailingTrivia , RC<SyntaxArena> Arena)",8, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeAnyTypeIdentifier( const Trivia & LeadingTrivia , const Trivia & TrailingTrivia , RC<SyntaxArena> Arena)",6, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeSelfTypeIdentifier( const Trivia & LeadingTrivia , const Trivia & TrailingTrivia , RC<SyntaxArena> Arena)",6, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeTypeToken( const Trivia & LeadingTrivia , const Trivia & TrailingTrivia , RC<SyntaxArena> Arena)",6, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeProtocolToken( const Trivia & LeadingTrivia , const Trivia & TrailingTrivia , RC<SyntaxArena> Arena)",6, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxFactory.cpp.gyb,"SyntaxFactory::makeEqualityOperator( const Trivia & LeadingTrivia , const Trivia & TrailingTrivia , RC<SyntaxArena> Arena)",7, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::getTokenTextInternal( tok kind)",10, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::isTokenTextDetermined( tok kind)",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::getTokenText( tok kind)",5, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::parserShallOmitWhenNoChildren( syntax :: SyntaxKind Kind)",12, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::dumpSyntaxKind( llvm :: raw_ostream & os , const SyntaxKind kind)",15, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::isCollectionKind( SyntaxKind Kind)",12, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::isDeclKind( SyntaxKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::isTypeKind( SyntaxKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::isStmtKind( SyntaxKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::isExprKind( SyntaxKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::isPatternKind( SyntaxKind Kind)",4, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::isTokenKind( SyntaxKind Kind)",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::isUnknownKind( SyntaxKind Kind)",8, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"swift::syntax::getUnknownKind( SyntaxKind Kind)",13, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxKind.cpp.gyb,"llvm::operator < <( llvm :: raw_ostream & OS , swift :: syntax :: SyntaxKind Kind)",17, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"isTrivialSyntaxKind( SyntaxKind Kind)",15, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"printSyntaxKind( SyntaxKind Kind , llvm :: raw_ostream & OS , SyntaxPrintOptions Opts , bool Open)",12, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"dumpTokenKind( llvm :: raw_ostream & OS , tok Kind)",12, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::RawSyntax( SyntaxKind Kind , ArrayRef<RC<RawSyntax>> Layout , SourcePresence Presence , const RC<SyntaxArena> & Arena , llvm :: Optional<unsigned> NodeId)",25, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::RawSyntax( tok TokKind , OwnedString Text , ArrayRef<TriviaPiece> LeadingTrivia , ArrayRef<TriviaPiece> TrailingTrivia , SourcePresence Presence , const RC<SyntaxArena> & Arena , llvm :: Optional<unsigned> NodeId)",32, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::~RawSyntax()",12, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::make( SyntaxKind Kind , ArrayRef<RC<RawSyntax>> Layout , SourcePresence Presence , const RC<SyntaxArena> & Arena , llvm :: Optional<unsigned> NodeId)",11, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::make( tok TokKind , OwnedString Text , ArrayRef<TriviaPiece> LeadingTrivia , ArrayRef<TriviaPiece> TrailingTrivia , SourcePresence Presence , const RC<SyntaxArena> & Arena , llvm :: Optional<unsigned> NodeId)",14, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::append( RC<RawSyntax> NewLayoutElement) const",8, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::replaceChild( CursorIndex Index , RC<RawSyntax> NewLayoutElement) const",16, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::accumulateAbsolutePosition( AbsolutePosition & Pos) const",22, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::accumulateLeadingTrivia( AbsolutePosition & Pos) const",17, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::print( llvm :: raw_ostream & OS , SyntaxPrintOptions Opts) const",27, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::dump( llvm :: raw_ostream & OS , unsigned Indent) const",43, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"AbsolutePosition::printLineAndColumn( llvm :: raw_ostream & OS) const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"AbsolutePosition::dump( llvm :: raw_ostream & OS) const",7, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"RawSyntax::Profile( llvm :: FoldingSetNodeID & ID , tok TokKind , OwnedString Text , ArrayRef<TriviaPiece> LeadingTrivia , ArrayRef<TriviaPiece> TrailingTrivia)",20, 2, 0, 0
repos/cpp/swift/lib/Syntax/RawSyntax.cpp,"llvm::operator < <( raw_ostream & OS , AbsolutePosition Pos)",4, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::getRaw() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::getKind() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::print( llvm :: raw_ostream & OS , SyntaxPrintOptions Opts) const",4, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::dump( llvm :: raw_ostream & OS , unsigned Indent) const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::isType() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::isDecl() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::isStmt() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::isExpr() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::isToken() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::isPattern() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::isUnknown() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::isPresent() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::isMissing() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::getParent() const",7, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::getRoot() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::getNumChildren() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Syntax.cpp,"Syntax::getChild( const size_t N) const",6, 2, 0, 0
repos/cpp/swift/lib/Syntax/SyntaxBuilders.cpp.gyb,"is_buildable()",39, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"TriviaPiece::dump( llvm :: raw_ostream & OS , unsigned Indent) const",19, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"TriviaPiece::isComment() const",13, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"TriviaPiece::accumulateAbsolutePosition( AbsolutePosition & Pos) const",15, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"TriviaPiece::trySquash( const TriviaPiece & Next)",15, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"TriviaPiece::print( llvm :: raw_ostream & OS) const",15, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"Trivia::appendOrSquash( const TriviaPiece & Next)",10, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"Trivia::appending( const Trivia & Other) const",5, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"Trivia::dump( llvm :: raw_ostream & OS , unsigned Indent) const",5, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"Trivia::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"Trivia::print( llvm :: raw_ostream & OS) const",5, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"Trivia::find( const TriviaKind DesiredKind) const",6, 2, 0, 0
repos/cpp/swift/lib/Syntax/Trivia.cpp.gyb,"Trivia::operator +( const Trivia & Other) const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"ColoredStream::ColoredStream( raw_ostream & underlying)",1, 80, 4, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"ColoredStream::~ColoredStream()",1, 43, 4, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"ColoredStream::changeColor( Colors color , bool bold = false , bool bg = false)",5, 6, 4, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"ColoredStream::resetColor()",4, 6, 4, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"ColoredStream::reverseColor()",4, 6, 4, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"ColoredStream::has_colors() const",3, 6, 4, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"ColoredStream::write_impl( const char * ptr , size_t size)",3, 6, 4, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"ColoredStream::current_pos() const",3, 6, 4, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"ColoredStream::preferred_buffer_size() const",3, 6, 4, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"PrintingDiagnosticConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",52, 2, 0, 0
repos/cpp/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp,"SourceManager::GetMessage( SourceLoc Loc , llvm :: SourceMgr :: DiagKind Kind , const Twine & Msg , ArrayRef<llvm::SMRange> Ranges , ArrayRef<llvm::SMFixIt> FixIts) const",60, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"ExpectedDiagnosticInfo::ExpectedDiagnosticInfo( const char * ExpectedStart , llvm :: SourceMgr :: DiagKind Classification)",4, 6, 4, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"getDiagKindString( llvm :: SourceMgr :: DiagKind Kind)",10, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"DiagnosticVerifier::DiagnosticVerifier( SourceManager & SM)",1, 63, 4, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"DiagnosticVerifier::addDiagnostic( const llvm :: SMDiagnostic & Diag)",3, 6, 4, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"DiagnosticVerifier::findDiagnostic( const ExpectedDiagnosticInfo & Expected , StringRef BufferName)",20, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"getColumnNumber( StringRef buffer , llvm :: SMLoc loc)",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"checkForFixIt( const ExpectedFixIt & Expected , const llvm :: SMDiagnostic & D , StringRef buffer)",18, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"renderFixits( ArrayRef<llvm::SMFixIt> fixits , StringRef InputFile)",24, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"DiagnosticVerifier::verifyFile( unsigned BufferID , bool shouldAutoApplyFixes)",421, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"DiagnosticVerifier::verifyUnknown()",17, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"DiagnosticVerifier::autoApplyFixes( unsigned BufferID , ArrayRef<llvm::SMDiagnostic> diags)",51, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"VerifyModeDiagnosticHook( const llvm :: SMDiagnostic & Diag , void * Context)",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"swift::enableDiagnosticVerifier( SourceManager & SM)",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/DiagnosticVerifier.cpp,"swift::verifyDiagnostics( SourceManager & SM , ArrayRef<unsigned> BufferIDs , bool autoApplyFixes , bool ignoreUnknown)",16, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"ArgsToFrontendOutputsConverter::convert( std :: vector<std::string> & mainOutputs , std :: vector<SupplementaryOutputPaths> & supplementaryOutputs)",23, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"ArgsToFrontendOutputsConverter::readOutputFileList( const StringRef filelistPath , DiagnosticEngine & diags)",15, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"OutputFilesComputer::getOutputFilenamesFromCommandLineOrFilelist( const ArgList & args , DiagnosticEngine & diags)",10, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"OutputFilesComputer::create( const llvm :: opt :: ArgList & args , DiagnosticEngine & diags , const FrontendInputsAndOutputs & inputsAndOutputs)",41, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"OutputFilesComputer::OutputFilesComputer( DiagnosticEngine & diags , const FrontendInputsAndOutputs & inputsAndOutputs , std :: vector<std::string> outputFileArguments , const StringRef outputDirectoryArgument , const StringRef firstInput , const FrontendOptions :: ActionType requestedAction , const llvm :: opt :: Arg * moduleNameArg , const StringRef suffix , const bool hasTextualOutput)",13, 60, 6, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"OutputFilesComputer::computeOutputFiles() const",18, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"OutputFilesComputer::computeOutputFile( StringRef outputArg , const InputFile & input) const",17, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"OutputFilesComputer::deriveOutputFileFromInput( const InputFile & input) const",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"OutputFilesComputer::deriveOutputFileForDirectory( const InputFile & input) const",10, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"OutputFilesComputer::determineBaseNameOfOutput( const InputFile & input) const",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"OutputFilesComputer::deriveOutputFileFromParts( StringRef dir , StringRef base) const",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"SupplementaryOutputPathsComputer::SupplementaryOutputPathsComputer( const ArgList & args , DiagnosticEngine & diags , const FrontendInputsAndOutputs & inputsAndOutputs , ArrayRef<std::string> outputFiles , StringRef moduleName)",8, 77, 10, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"SupplementaryOutputPathsComputer::computeOutputPaths() const",37, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"SupplementaryOutputPathsComputer::getSupplementaryOutputPathsFromArguments() const",50, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"SupplementaryOutputPathsComputer::getSupplementaryFilenamesFromArguments( options :: ID pathID) const",18, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"SupplementaryOutputPathsComputer::computeOutputPathsForOneInput( StringRef outputFile , const SupplementaryOutputPaths & pathsFromArguments , const InputFile & input) const",74, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"SupplementaryOutputPathsComputer::deriveDefaultSupplementaryOutputPathExcludingExtension( StringRef outputFilename , const InputFile & input) const",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"SupplementaryOutputPathsComputer::determineSupplementaryOutputFilename( options :: ID emitOpt , std :: string pathFromArguments , file_types :: ID type , StringRef mainOutputIfUsable , StringRef defaultSupplementaryOutputPathExcludingExtension) const",19, 3, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"SupplementaryOutputPathsComputer::deriveModulePathParameters( options :: ID & emitOption , std :: string & extension , std :: string & mainOutputIfUsable) const",22, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"createFromTypeToPathMap( const TypeToPathMap * map)",23, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOutputsConverter.cpp,"SupplementaryOutputPathsComputer::readSupplementaryOutputFileMap() const",55, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"extractSwiftInterfaceVersionAndArgs( DiagnosticEngine & Diags , SourceLoc DiagLoc , clang :: vfs :: FileSystem & FS , StringRef SwiftInterfacePathIn , swift :: version :: Version & Vers , llvm :: StringSaver & SubArgSaver , SmallVectorImpl<const char*> & SubArgs)",32, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"getBufferOfDependency( clang :: vfs :: FileSystem & FS , StringRef ModulePath , StringRef DepPath , DiagnosticEngine & Diags , SourceLoc DiagLoc)",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"getCacheHash( ASTContext & Ctx , const CompilerInvocation & SubInvocation , StringRef InPath)",21, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"createInvocationForBuildingFromInterface( ASTContext & Ctx , StringRef ModuleName , StringRef CacheDir)",32, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"computeCachedOutputPath( ASTContext & Ctx , const CompilerInvocation & SubInvocation , StringRef InPath , llvm :: SmallString<128> & OutPath)",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"ParseableInterfaceModuleLoader::configureSubInvocationInputsAndOutputs( CompilerInvocation & SubInvocation , StringRef InPath , StringRef OutPath)",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"swiftModuleIsUpToDate( clang :: vfs :: FileSystem & FS , std :: pair<Identifier,SourceLoc> ModuleID , StringRef OutPath , DiagnosticEngine & Diags , DependencyTracker * OuterTracker)",38, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"collectDepsForSerialization( clang :: vfs :: FileSystem & FS , CompilerInstance & SubInstance , StringRef InPath , StringRef ModuleCachePath , SmallVectorImpl<FileDependency> & Deps , DiagnosticEngine & Diags , SourceLoc DiagLoc , DependencyTracker * OuterTracker)",54, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"buildSwiftModuleFromSwiftInterface( clang :: vfs :: FileSystem & FS , DiagnosticEngine & Diags , SourceLoc DiagLoc , CompilerInvocation & SubInvocation , StringRef ModuleCachePath , DependencyTracker * OuterTracker)",121, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"serializedASTLooksValidOrCannotBeRead( clang :: vfs :: FileSystem & FS , StringRef ModPath)",10, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"ParseableInterfaceModuleLoader::openModuleFiles( AccessPathElem ModuleID , StringRef DirName , StringRef ModuleFilename , StringRef ModuleDocFilename , std :: unique_ptr<llvm::MemoryBuffer> * ModuleBuffer , std :: unique_ptr<llvm::MemoryBuffer> * ModuleDocBuffer , llvm :: SmallVectorImpl<char> & Scratch)",70, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"ParseableInterfaceModuleLoader::buildSwiftModuleFromSwiftInterface( ASTContext & Ctx , StringRef CacheDir , StringRef ModuleName , StringRef InPath , StringRef OutPath)",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"diagnoseScopedImports( DiagnosticEngine & diags , ArrayRef<ModuleDecl::ImportedModule> imports)",9, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"printToolVersionAndFlagsComment( raw_ostream & out , ParseableInterfaceOptions const & Opts , ModuleDecl * M)",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"swift::getSwiftInterfaceFormatVersionRegex()",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"swift::getSwiftInterfaceModuleFlagsRegex()",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"swift::getModuleCachePathFromClang( const clang :: CompilerInstance & Clang)",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"printImports( raw_ostream & out , ModuleDecl * M)",39, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"isPublicOrUsableFromInline( const ValueDecl * VD)",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"isPublicOrUsableFromInline( Type ty)",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"InheritedProtocolCollector::recordProtocols( ArrayRef<TypeLoc> directlyInherited)",17, 4, 2, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"InheritedProtocolCollector::recordConditionalConformances( ArrayRef<TypeLoc> directlyInherited)",14, 4, 2, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"InheritedProtocolCollector::collectProtocols( PerTypeMap & map , const Decl * D)",33, 4, 2, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"InheritedProtocolCollector::collectSkippedConditionalConformances( PerTypeMap & map , const Decl * D)",13, 4, 2, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"InheritedProtocolCollector::conformanceDeclaredInModule( ModuleDecl * M , const NominalTypeDecl * nominal , ProtocolDecl * proto)",10, 4, 2, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"InheritedProtocolCollector::printSynthesizedExtensionIfNeeded( raw_ostream & out , const PrintOptions & printOptions , ModuleDecl * M , const NominalTypeDecl * nominal) const",50, 4, 2, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"InheritedProtocolCollector::printInaccessibleConformanceExtensionIfNeeded( raw_ostream & out , const PrintOptions & printOptions , const NominalTypeDecl * nominal) const",19, 4, 2, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"InheritedProtocolCollector::printDummyProtocolDeclaration( raw_ostream & out)",4, 4, 2, 0
repos/cpp/swift/lib/Frontend/ParseableInterfaceSupport.cpp,"swift::emitParseableInterface( raw_ostream & out , ParseableInterfaceOptions const & Opts , ModuleDecl * M)",43, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"swift::CompilerInvocation::CompilerInvocation()",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"CompilerInvocation::setMainExecutablePath( StringRef Path)",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"updateRuntimeLibraryPath( SearchPathOptions & SearchPathOpts , llvm :: Triple & Triple)",10, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"CompilerInvocation::setRuntimeResourcePath( StringRef Path)",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"CompilerInvocation::setTargetTriple( StringRef Triple)",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"CompilerInvocation::setTargetTriple( const llvm :: Triple & Triple)",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"CompilerInvocation::getSourceFileKind() const",19, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"ParseFrontendArgs( FrontendOptions & opts , ArgList & args , DiagnosticEngine & diags , SmallVectorImpl<std::unique_ptr<llvm::MemoryBuffer>> * buffers)",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"diagnoseSwiftVersion( Optional<version::Version> & vers , Arg * verArg , ArgList & Args , DiagnosticEngine & diags)",11, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"generateOptimizationRemarkRegex( DiagnosticEngine & Diags , ArgList & Args , Arg * RpassArg)",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"PrintArg( raw_ostream & OS , const char * Arg , StringRef TempDir)",24, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"SaveParseableInterfaceArgs( ParseableInterfaceOptions & Opts , FrontendOptions & FOpts , ArgList & Args , DiagnosticEngine & Diags)",15, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"ParseLangArgs( LangOptions & Opts , ArgList & Args , DiagnosticEngine & Diags , const FrontendOptions & FrontendOpts)",267, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"ParseClangImporterArgs( ClangImporterOptions & Opts , ArgList & Args , DiagnosticEngine & Diags , StringRef workingDirectory)",60, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"ParseSearchPathArgs( SearchPathOptions & Opts , ArgList & Args , DiagnosticEngine & Diags , StringRef workingDirectory)",52, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"ParseDiagnosticArgs( DiagnosticOptions & Opts , ArgList & Args , DiagnosticEngine & Diags)",22, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"parseExclusivityEnforcementOptions( const llvm :: opt :: Arg * A , SILOptions & Opts , DiagnosticEngine & Diags)",26, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"ParseSILArgs( SILOptions & Opts , ArgList & Args , IRGenOptions & IRGenOpts , FrontendOptions & FEOpts , DiagnosticEngine & Diags , const llvm :: Triple & Triple , ClangImporterOptions & ClangOpts)",180, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"CompilerInvocation::buildDebugFlags( std :: string & Output , const ArrayRef<const char*> & Args , StringRef SDKPath , StringRef ResourceDir)",34, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"ParseTBDGenArgs( TBDGenOptions & Opts , ArgList & Args , DiagnosticEngine & Diags , CompilerInvocation & Invocation)",29, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"ParseIRGenArgs( IRGenOptions & Opts , ArgList & Args , DiagnosticEngine & Diags , const FrontendOptions & FrontendOpts , const SILOptions & SILOpts , StringRef SDKPath , StringRef ResourceDir , const llvm :: Triple & Triple)",233, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"getScriptFileName( StringRef name)",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"ParseMigratorArgs( MigratorOptions & Opts , LangOptions & LangOpts , const FrontendOptions & FrontendOpts , StringRef ResourcePath , const ArgList & Args , DiagnosticEngine & Diags)",81, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"CompilerInvocation::parseArgs( ArrayRef<const char*> Args , DiagnosticEngine & Diags , SmallVectorImpl<std::unique_ptr<llvm::MemoryBuffer>> * ConfigurationFileBuffers , StringRef workingDirectory)",81, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"CompilerInvocation::loadFromSerializedAST( StringRef data)",19, 2, 0, 0
repos/cpp/swift/lib/Frontend/CompilerInvocation.cpp,"CompilerInvocation::setUpInputForSILTool( StringRef inputFilename , StringRef moduleNameArg , bool alwaysSetModuleToMain , bool bePrimary , serialization :: ExtendedValidationInfo & extendedInfo)",35, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::needsProperModuleName( ActionType action)",36, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::isActionImmediate( ActionType action)",35, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::shouldActionOnlyParse( ActionType action)",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::forAllOutputPaths( const InputFile & input , llvm :: function_ref<void(StringRef)> fn) const",20, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::formatForPrincipalOutputFileForAction( ActionType action)",62, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::canActionEmitDependencies( ActionType action)",34, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::canActionEmitReferenceDependencies( ActionType action)",34, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::canActionEmitObjCHeader( ActionType action)",34, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::canActionEmitLoadedModuleTrace( ActionType action)",34, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::canActionEmitModule( ActionType action)",34, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::canActionEmitModuleDoc( ActionType action)",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::canActionEmitInterface( ActionType action)",34, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::doesActionProduceOutput( ActionType action)",35, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::doesActionProduceTextualOutput( ActionType action)",35, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::doesActionGenerateSIL( ActionType action)",34, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::getPrimarySpecificPathsForAtMostOnePrimary() const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendOptions.cpp,"FrontendOptions::getPrimarySpecificPathsForPrimary( StringRef filename) const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getPCHHash() const",15, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getPrimarySpecificPathsForAtMostOnePrimary() const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getPrimarySpecificPathsForPrimary( StringRef filename) const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getPrimarySpecificPathsForSourceFile( const SourceFile & SF) const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getOutputFilenameForAtMostOnePrimary() const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getMainInputFilenameForDebugInfoForAtMostOnePrimary() const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getObjCHeaderOutputPathForAtMostOnePrimary() const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getModuleOutputPathForAtMostOnePrimary() const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getReferenceDependenciesFilePathForPrimary( StringRef filename) const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getSerializedDiagnosticsPathForAtMostOnePrimary() const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getTBDPathForWholeModule() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::getParseableInterfaceOutputPathForWholeModule() const",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInvocation::computeSerializationOptions( const SupplementaryOutputPaths & outs , bool moduleIsPublic)",25, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::createSILModule()",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::setSILModule( std :: unique_ptr<SILModule> M)",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::recordPrimaryInputBuffer( unsigned BufID)",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::recordPrimarySourceFile( SourceFile * SF)",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::setup( const CompilerInvocation & Invok)",36, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"loadAndValidateVFSOverlay( const std :: string & File , const llvm :: IntrusiveRefCntPtr<clang::vfs::FileSystem> & BaseFS , const llvm :: IntrusiveRefCntPtr<clang::vfs::OverlayFileSystem> & OverlayFS , DiagnosticEngine & Diag)",24, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::setUpVirtualFileSystemOverlays()",19, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::setUpLLVMArguments()",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::setUpDiagnosticOptions()",11, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::setUpModuleLoaders()",72, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::setUpCodeCompletionBuffer()",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"shouldTreatSingleInputAsMain( InputFileKind inputKind)",14, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::setUpInputs()",25, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::setUpForInput( const InputFile & input)",19, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::getRecordedBufferID( const InputFile & input , bool & failed)",31, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::getInputBufferAndModuleDocBufferIfPresent( const InputFile & input)",27, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::openModuleDoc( const InputFile & input)",19, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::takeSILModule()",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::getMainModule()",16, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"addAdditionalInitialImportsTo( SourceFile * SF , const CompilerInstance :: ImplicitImports & implicitImports)",25, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"shouldImplicityImportSwiftOnoneSupportModule( CompilerInvocation & Invocation)",23, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::performParseAndResolveImportsOnly()",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::performSema()",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::performSemaUpTo( SourceFile :: ASTStage_t LimitStage)",42, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::ImplicitImports::ImplicitImports( CompilerInstance & compiler)",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::loadStdlib()",18, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::importUnderlyingModule()",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::importBridgingHeader()",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::getImplicitlyImportedModules( SmallVectorImpl<ModuleDecl*> & importModules)",26, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::createREPLFile( const ImplicitImports & implicitImports)",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::computeDelayedParsingCallback( bool isPrimary)",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::addMainFileToModule( const ImplicitImports & implicitImports)",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::parseAndCheckTypesUpTo( const ImplicitImports & implicitImports , SourceFile :: ASTStage_t limitStage)",74, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::parseLibraryFile( unsigned BufferID , const ImplicitImports & implicitImports , PersistentParserState & PersistentState , DelayedParsingCallbacks * PrimaryDelayedCB , DelayedParsingCallbacks * SecondaryDelayedCB)",30, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::computeTypeCheckingOptions()",17, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::parsePartialModulesAndLibraryFiles( const ImplicitImports & implicitImports , PersistentParserState & PersistentState , DelayedParsingCallbacks * PrimaryDelayedCB , DelayedParsingCallbacks * SecondaryDelayedCB)",25, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::parseAndTypeCheckMainFileUpTo( SourceFile :: ASTStage_t LimitStage , PersistentParserState & PersistentState , DelayedParsingCallbacks * DelayedParseCB , OptionSet<TypeCheckingFlags> TypeCheckOptions)",74, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"forEachSourceFileIn( ModuleDecl * module , llvm :: function_ref<void(SourceFile&)> fn)",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::forEachFileToTypeCheck( llvm :: function_ref<void(SourceFile&)> fn)",10, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::finishTypeChecking( OptionSet<TypeCheckingFlags> TypeCheckOptions)",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::createSourceFileForMainModule( SourceFileKind fileKind , SourceFile :: ImplicitModuleImportKind importKind , Optional<unsigned> bufferID)",16, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::performParseOnly( bool EvaluateConditionals , bool ParseDelayedBodyOnEnd)",53, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::freeASTContext()",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::freeSILModule()",1, 65, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"performMandatorySILPasses( CompilerInvocation & Invocation , SILModule * SM)",19, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"performSILOptimizations( CompilerInvocation & Invocation , SILModule * SM)",19, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"countStatsPostSILOpt( UnifiedStatsReporter & Stats , const SILModule & Module)",10, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::performSILProcessing( SILModule * silModule , UnifiedStatsReporter * stats)",23, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::getPrimarySpecificPathsForWholeModuleOptimizationMode() const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::getPrimarySpecificPathsForAtMostOnePrimary() const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::getPrimarySpecificPathsForPrimary( StringRef filename) const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/Frontend.cpp,"CompilerInstance::getPrimarySpecificPathsForSourceFile( const SourceFile & SF) const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"debugFailWithAssertion()",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"debugFailWithCrash()",1, 56, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::convert( SmallVectorImpl<std::unique_ptr<llvm::MemoryBuffer>> * buffers)",123, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::handleDebugCrashGroupArguments()",20, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computePrintStatsOptions()",9, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeDebugTimeOptions()",19, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeTBDOptions()",17, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::setUnsignedIntegerArgument( options :: ID optionID , unsigned radix , unsigned & valueToSet)",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computePlaygroundOptions()",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeHelpOptions()",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeDumpScopeMapLocations()",32, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::determineRequestedAction( const ArgList & args)",68, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::setUpInputKindAndImmediateArgs()",36, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeModuleName()",31, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeFallbackModuleName()",28, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeMainAndSupplementaryOutputFilenames()",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::checkUnusedSupplementaryOutputPaths() const",41, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeImportObjCHeaderOptions()",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeImplicitImportModuleNames()",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendOptionsConverter.cpp,"ArgsToFrontendOptionsConverter::computeLLVMArgs()",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::ArgsToFrontendInputsConverter( DiagnosticEngine & diags , const ArgList & args)",5, 80, 6, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::convert( SmallVectorImpl<std::unique_ptr<llvm::MemoryBuffer>> * buffers)",37, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::enforceFilelistExclusion()",16, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::readInputFilesFromCommandLine()",9, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::readInputFilesFromFilelist()",11, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::forAllFilesInFilelist( Arg const * const pathArg , llvm :: function_ref<void(StringRef)> fn)",19, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::addFile( StringRef file)",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::readPrimaryFiles()",10, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::createInputFilesConsumingPrimaries( std :: set<StringRef> primaryFiles)",22, 2, 0, 0
repos/cpp/swift/lib/Frontend/ArgsToFrontendInputsConverter.cpp,"ArgsToFrontendInputsConverter::diagnoseUnusedPrimaryFiles( std :: set<StringRef> primaryFiles)",11, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::FrontendInputsAndOutputs( const FrontendInputsAndOutputs & other)",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::operator =( const FrontendInputsAndOutputs & other)",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::getInputFilenames() const",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::isReadingFromStdin() const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::getFilenameOfFirstInput() const",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::forEachInput( llvm :: function_ref<bool(const InputFile&)> fn) const",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::firstPrimaryInput() const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::lastPrimaryInput() const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::forEachPrimaryInput( llvm :: function_ref<bool(const InputFile&)> fn) const",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::forEachNonPrimaryInput( llvm :: function_ref<bool(const InputFile&)> fn) const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::assertMustNotBeMoreThanOnePrimaryInput() const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::assertMustNotBeMoreThanOnePrimaryInputUnlessBatchModeChecksHaveBeenBypassed() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::getUniquePrimaryInput() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::getRequiredUniquePrimaryInput() const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::getStatsFileMangledInputName() const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::isInputPrimary( StringRef file) const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::numberOfPrimaryInputsEndingWith( StringRef extension) const",10, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::shouldTreatAsLLVM() const",13, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::shouldTreatAsModuleInterface() const",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::shouldTreatAsSIL() const",20, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::areAllNonPrimariesSIB() const",11, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::verifyInputs( DiagnosticEngine & diags , bool treatAsSIL , bool isREPLRequested , bool isNoneRequested) const",31, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::clearInputs()",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::addInput( const InputFile & input)",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::addInputFile( StringRef file , llvm :: MemoryBuffer * buffer)",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::addPrimaryInputFile( StringRef file , llvm :: MemoryBuffer * buffer)",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::countOfInputsProducingMainOutputs() const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::firstInputProducingOutput() const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::lastInputProducingOutput() const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::forEachInputProducingAMainOutputFile( llvm :: function_ref<bool(const InputFile&)> fn) const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::setMainAndSupplementaryOutputs( ArrayRef<std::string> outputFiles , ArrayRef<SupplementaryOutputPaths> supplementaryOutputs)",41, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::copyOutputFilenames() const",9, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::forEachOutputFilename( llvm :: function_ref<void(StringRef)> fn) const",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::getSingleOutputFilename() const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::isOutputFilenameStdout() const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::isOutputFileDirectory() const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasNamedOutputFile() const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::countOfFilesProducingSupplementaryOutput() const",3, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::forEachInputProducingSupplementaryOutput( llvm :: function_ref<bool(const InputFile&)> fn) const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasSupplementaryOutputPath( llvm :: function_ref<const std::string&(const SupplementaryOutputPaths&)> extractorFn) const",9, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasDependenciesPath() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasReferenceDependenciesPath() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasObjCHeaderOutputPath() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasLoadedModuleTracePath() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasModuleOutputPath() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasModuleDocOutputPath() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasParseableInterfaceOutputPath() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasTBDPath() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::hasDependencyTrackerPath() const",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::getPrimarySpecificPathsForAtMostOnePrimary() const",6, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::getPrimarySpecificPathsForPrimary( StringRef filename) const",5, 2, 0, 0
repos/cpp/swift/lib/Frontend/FrontendInputsAndOutputs.cpp,"FrontendInputsAndOutputs::primaryInputNamed( StringRef name) const",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"AbbreviationMap::AbbreviationMap()",1, 23, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"AbbreviationMap::set( unsigned recordID , unsigned abbrevID)",5, 4, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"AbbreviationMap::get( unsigned recordID)",5, 4, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SharedState::SharedState( StringRef serializedDiagnosticsPath)",4, 39, 8, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::SerializedDiagnosticConsumer( StringRef serializedDiagnosticsPath)",4, 4, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::~SerializedDiagnosticConsumer()",3, 4, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::finishProcessing()",35, 4, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::informDriverOfIncompleteBatchModeCompilation()",3, 4, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",8, 24, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::enterDiagBlock()",3, 4, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::exitDiagBlock()",3, 4, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"swift::serialized_diagnostics::createConsumer( StringRef outputPath)",3, 4, 2, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::getEmitFile( StringRef Filename)",23, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::addLocToRecord( SourceLoc Loc , SourceManager & SM , StringRef Filename , RecordDataImpl & Record)",22, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::addRangeToRecord( CharSourceRange Range , SourceManager & SM , StringRef Filename , RecordDataImpl & Record)",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"getDiagnosticLevel( DiagnosticKind Kind)",14, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::emitPreamble()",8, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::emitMetaBlock()",12, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"emitBlockID( unsigned ID , const char * Name , llvm :: BitstreamWriter & Stream , RecordDataImpl & Record)",18, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"emitRecordID( unsigned ID , const char * Name , llvm :: BitstreamWriter & Stream , RecordDataImpl & Record)",11, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"addSourceLocationAbbrev( std :: shared_ptr<llvm::BitCodeAbbrev> Abbrev)",7, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"addRangeLocationAbbrev( std :: shared_ptr<llvm::BitCodeAbbrev> Abbrev)",4, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::emitBlockInfoBlock()",88, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::emitDiagnosticMessage( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef Text , const DiagnosticInfo & Info)",58, 2, 0, 0
repos/cpp/swift/lib/Frontend/SerializedDiagnosticConsumer.cpp,"SerializedDiagnosticConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",35, 2, 0, 0
repos/cpp/swift/lib/Option/SanitizerOptions.cpp,"toStringRef( const SanitizerKind kind)",13, 2, 0, 0
repos/cpp/swift/lib/Option/SanitizerOptions.cpp,"toFileName( const SanitizerKind kind)",13, 2, 0, 0
repos/cpp/swift/lib/Option/SanitizerOptions.cpp,"swift::parseSanitizerCoverageArgValue( const llvm :: opt :: Arg * A , const llvm :: Triple & Triple , DiagnosticEngine & Diags , OptionSet<SanitizerKind> sanitizers)",66, 2, 0, 0
repos/cpp/swift/lib/Option/SanitizerOptions.cpp,"swift::parseSanitizerArgValues( const llvm :: opt :: ArgList & Args , const llvm :: opt :: Arg * A , const llvm :: Triple & Triple , DiagnosticEngine & Diags , llvm :: function_ref<bool(llvm::StringRef,bool)> sanitizerRuntimeLibExists)",64, 2, 0, 0
repos/cpp/swift/lib/Option/Options.cpp,"SwiftOptTable::SwiftOptTable()",1, 43, 2, 0
repos/cpp/swift/lib/Option/Options.cpp,"swift::createSwiftOptTable()",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"isGlobalOrStaticVar( VarDecl * VD)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addSymbol( StringRef name , SymbolKind kind)",9, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addSymbol( SILDeclRef declRef)",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addSymbol( LinkEntity entity)",11, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addDispatchThunk( SILDeclRef declRef)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addMethodDescriptor( SILDeclRef declRef)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addProtocolRequirementsBaseDescriptor( ProtocolDecl * proto)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addAssociatedTypeDescriptor( AssociatedTypeDecl * assocType)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addAssociatedConformanceDescriptor( AssociatedConformance conformance)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addBaseConformanceDescriptor( BaseConformance conformance)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addConformances( DeclContext * DC)",52, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitAbstractFunctionDecl( AbstractFunctionDecl * AFD)",40, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitAccessorDecl( AccessorDecl * AD)",6, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitAbstractStorageDecl( AbstractStorageDecl * ASD)",11, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitVarDecl( VarDecl * VD)",29, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitNominalTypeDecl( NominalTypeDecl * NTD)",18, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitClassDecl( ClassDecl * CD)",97, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitConstructorDecl( ConstructorDecl * CD)",9, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitDestructorDecl( DestructorDecl * DD)",12, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitExtensionDecl( ExtensionDecl * ED)",8, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"protocolDescriptorHasRequirements( ProtocolDecl * proto)",19, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitProtocolDecl( ProtocolDecl * PD)",63, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::visitEnumDecl( EnumDecl * ED)",12, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"TBDGenVisitor::addFirstFileSymbols()",6, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"convertToPacked( const version :: Version & version)",8, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"isApplicationExtensionSafe( const LangOptions & LangOpts)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"enumeratePublicSymbolsAndWrite( ModuleDecl * M , FileUnit * singleFile , StringSet * symbols , llvm :: raw_ostream * os , const TBDGenOptions & opts)",58, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"swift::enumeratePublicSymbols( FileUnit * file , StringSet & symbols , const TBDGenOptions & opts)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"swift::enumeratePublicSymbols( ModuleDecl * M , StringSet & symbols , const TBDGenOptions & opts)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/TBDGen.cpp,"swift::writeTBDFile( ModuleDecl * M , llvm :: raw_ostream & os , const TBDGenOptions & opts)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"operator |( const Flags a , const Flags b)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"operator |=( Flags & a , const Flags b)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"llvm::yaml::MappingTraits<ExportSection>::mapping( IO & io , ExportSection & section)",11, 4, 2, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"llvm::yaml::MappingTraits<UndefinedSection>::mapping( IO & io , UndefinedSection & section)",8, 4, 2, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"llvm::yaml::ScalarBitSetTraits<Flags>::bitset( IO & io , Flags & flags)",6, 4, 2, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"llvm::yaml::MappingTraits<constInterfaceFile*>::NormalizedTBD3::NormalizedTBD3( IO & io)",1, 39, 4, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"llvm::yaml::MappingTraits<constInterfaceFile*>::NormalizedTBD3::NormalizedTBD3( IO & io , const InterfaceFile * & file)",126, 6, 4, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"llvm::yaml::MappingTraits<constInterfaceFile*>::NormalizedTBD3::denormalize( IO & io)",89, 6, 4, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"llvm::yaml::MappingTraits<constInterfaceFile*>::mappingTBD3( IO & io , const InterfaceFile * & file)",19, 4, 2, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"stub::v3::YAMLDocumentHandler::canRead( MemoryBufferRef memBufferRef , FileType types) const",11, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"stub::v3::YAMLDocumentHandler::getFileType( MemoryBufferRef memBufferRef) const",6, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"stub::v3::YAMLDocumentHandler::canWrite( const File * file) const",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/TextStub_v3.cpp,"stub::v3::YAMLDocumentHandler::handleDocument( IO & io , const File * & file) const",16, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSupport.cpp,"PackedVersion::parse32( StringRef str)",33, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSupport.cpp,"PackedVersion::parse64( StringRef str)",46, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSupport.cpp,"PackedVersion::print( raw_ostream & os) const",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSupport.cpp,"operator < <( const DiagnosticBuilder & db , const PackedVersion & version)",8, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"DiagnosticReader::canRead( file_magic fileType , MemoryBufferRef bufferRef , FileType types) const",8, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"DiagnosticReader::getFileType( file_magic magic , MemoryBufferRef bufferRef) const",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"DiagnosticReader::readFile( std :: unique_ptr<MemoryBuffer> memBuffer , ReadFlags readFlags , ArchitectureSet arches) const",8, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::canRead( MemoryBufferRef memBuffer , FileType types) const",11, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::getFileType( MemoryBufferRef memBuffer) const",14, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::canWrite( const File * file) const",8, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::readFile( std :: unique_ptr<MemoryBuffer> memBuffer , ReadFlags readFlags , ArchitectureSet arches) const",14, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::writeFile( const File * file , const std :: string & path) const",13, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::writeFile( raw_ostream & os , const File * file) const",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::addYAMLReaders()",12, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::addYAMLWriters()",12, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::addReexportWriters()",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Registry.cpp,"Registry::addDiagnosticReader()",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"convertSymbolKindToXPIKind( SymbolKind kind)",13, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::addSymbol( XPIKind kind , StringRef name , ArchitectureSet archs , SymbolFlags flags , XPIAccess access)",20, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::addObjCClass( StringRef name , ArchitectureSet archs , XPIAccess access , ObjCClass * superClass)",6, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::addObjCSelector( ObjCContainer * container , StringRef name , ArchitectureSet archs , bool isInstanceMethod , bool isDynamic , XPIAccess access)",6, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::addObjCCategory( ObjCClass * baseClass , StringRef name , ArchitectureSet archs , XPIAccess access)",6, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::addObjCProtocol( StringRef name , ArchitectureSet archs , XPIAccess access)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::addUndefinedSymbol( XPIKind kind , StringRef name , ArchitectureSet archs , SymbolFlags flags)",20, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::contains( XPIKind kind , StringRef name , XPI const ** result) const",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::merge( const ExtendedInterfaceFile * otherInterface , bool allowArchitectureMerges) const",127, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::removeSymbol( XPIKind kind , StringRef name)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::removeSymbol( SymbolKind kind , StringRef name)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::printSymbolsForArch( Architecture arch) const",33, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ExtendedInterfaceFile.cpp,"ExtendedInterfaceFile::printSymbols( ArchitectureSet archs) const",23, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"XPI::isExportedSymbol() const",26, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"XPI::getPrettyName( bool demangle) const",20, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"XPI::getAnnotatedName( bool demangle) const",31, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"XPI::print( raw_ostream & os) const",25, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"GlobalSymbol::create( BumpPtrAllocator & A , StringRef name , XPIAccess access , SymbolFlags flags)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"ObjCInstanceVariable::create( BumpPtrAllocator & A , StringRef name , XPIAccess access)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"ObjCProtocol::create( BumpPtrAllocator & A , StringRef name , XPIAccess access)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"ObjCContainer::addSelector( const ObjCSelector * selector)",15, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"ObjCContainer::findSelector( StringRef name , bool isInstanceMethod) const",13, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"ObjCClass::create( BumpPtrAllocator & A , StringRef name , XPIAccess access)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"ObjCClass::addCategory( const ObjCCategory * category)",12, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"ObjCClassEHType::create( BumpPtrAllocator & A , StringRef name , XPIAccess access)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"ObjCCategory::create( BumpPtrAllocator & A , ObjCClass * baseClass , StringRef name , XPIAccess access)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPI.cpp,"ObjCSelector::create( BumpPtrAllocator & A , StringRef name , bool isInstanceMethod , bool isDynamic , XPIAccess access , bool isDerivedFromProtocol)",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Architecture.cpp,"getArchType( uint32_t CPUType , uint32_t CPUSubType)",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Architecture.cpp,"getArchType( StringRef name)",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Architecture.cpp,"getArchName( Architecture arch)",12, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Architecture.cpp,"getCPUType( Architecture arch)",12, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Architecture.cpp,"operator < <( raw_ostream & os , Architecture arch)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Architecture.cpp,"operator < <( const DiagnosticBuilder & db , Architecture arch)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"llvm::yaml::DocumentListTraits<std::vector<constFile*>>::size( IO & io , std :: vector<const File*> & seq)",3, 4, 2, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"llvm::yaml::DocumentListTraits<std::vector<constFile*>>::element( IO & io , std :: vector<const File*> & seq , size_t index)",6, 4, 2, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"llvm::yaml::MappingTraits<constFile*>::mapping( IO & io , const File * & file)",5, 4, 2, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"DiagHandler( const SMDiagnostic & diag , void * context)",13, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"YAMLBase::canRead( MemoryBufferRef memBufferRef , FileType types) const",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"YAMLBase::canWrite( const File * file) const",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"YAMLBase::getFileType( MemoryBufferRef bufferRef) const",8, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"YAMLBase::handleDocument( IO & io , const File * & file) const",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"YAMLReader::canRead( file_magic magic , MemoryBufferRef memBufferRef , FileType types) const",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"YAMLReader::getFileType( file_magic magic , MemoryBufferRef memBufferRef) const",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"YAMLReader::readFile( std :: unique_ptr<MemoryBuffer> memBuffer , ReadFlags readFlags , ArchitectureSet arches) const",29, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"YAMLWriter::canWrite( const File * file) const",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAMLReaderWriter.cpp,"YAMLWriter::writeFile( raw_ostream & os , const File * file) const",19, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"operator < <( raw_ostream & os , const InterfaceFileRef & ref)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"operator < <( const DiagnosticBuilder & db , const InterfaceFileRef & ref)",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"addEntry( C & container , StringRef installName)",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"InterfaceFileBase::addAllowableClient( StringRef installName , ArchitectureSet archs)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"InterfaceFileBase::addReexportedLibrary( StringRef installName , ArchitectureSet archs)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"InterfaceFileBase::removeReexportedLibrary( StringRef installName)",13, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"InterfaceFileBase::addUUID( Architecture arch , StringRef uuid)",13, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"InterfaceFileBase::addUUID( uint8_t uuid [ 16 ] , Architecture arch)",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"InterfaceFileBase::convertTo( FileType fileType)",20, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFileBase.cpp,"InterfaceFileBase::inlineFramework( std :: shared_ptr<InterfaceFileBase> framework)",23, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<FlowStringRef>::output( const FlowStringRef & value , void * ctx , raw_ostream & os)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<FlowStringRef>::input( StringRef value , void * ctx , FlowStringRef & out)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<FlowStringRef>::mustQuote( StringRef name)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarEnumerationTraits<ObjCConstraint>::enumeration( IO & io , ObjCConstraint & constraint)",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarEnumerationTraits<Platform>::enumeration( IO & io , Platform & platform)",13, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarBitSetTraits<ArchitectureSet>::bitset( IO & io , ArchitectureSet & archs)",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<Architecture>::output( const Architecture & value , void * , raw_ostream & os)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<Architecture>::input( StringRef scalar , void * , Architecture & value)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<Architecture>::mustQuote( StringRef)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<PackedVersion>::output( const PackedVersion & value , void * , raw_ostream & os)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<PackedVersion>::input( StringRef scalar , void * , PackedVersion & value)",6, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<PackedVersion>::mustQuote( StringRef)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<SwiftVersion>::output( const SwiftVersion & value , void * , raw_ostream & os)",20, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<SwiftVersion>::input( StringRef scalar , void * , SwiftVersion & value)",16, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<SwiftVersion>::mustQuote( StringRef)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<AvailabilityInfo>::output( const AvailabilityInfo & value , void * , raw_ostream & os)",11, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<AvailabilityInfo>::input( StringRef scalar , void * , AvailabilityInfo & value)",22, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<AvailabilityInfo>::mustQuote( StringRef)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<UUID>::output( const UUID & value , void * , raw_ostream & os)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<UUID>::input( StringRef scalar , void * , UUID & value)",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarTraits<UUID>::mustQuote( StringRef)",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/YAML.cpp,"llvm::yaml::ScalarEnumerationTraits<InputKind::Language>::enumeration( IO & io , InputKind :: Language & kind)",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addGlobalSymbol( StringRef name , PresumedLoc , XPIAccess access , Architecture arch , const AvailabilityInfo & info , bool isWeakDefined)",29, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCClass( StringRef name , PresumedLoc , XPIAccess access , Architecture arch , const AvailabilityInfo & info , ObjCClass * superClass)",27, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCClassEHType( StringRef name , clang :: PresumedLoc , XPIAccess access , Architecture arch , const AvailabilityInfo & info)",24, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCInstanceVariable( StringRef name , PresumedLoc , XPIAccess access , Architecture arch , const AvailabilityInfo & info)",25, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCSelector( ObjCContainer * container , StringRef name , bool isInstanceMethod , bool isDynamic , clang :: PresumedLoc , XPIAccess access , Architecture arch , const AvailabilityInfo & info , bool isDerivedFromProtocol)",39, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCCategory( ObjCClass * baseClass , StringRef name , PresumedLoc , XPIAccess access , Architecture arch , const AvailabilityInfo & info)",28, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCProtocol( StringRef name , PresumedLoc , XPIAccess access , Architecture arch , const AvailabilityInfo info)",23, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addGlobalSymbol( StringRef name , ArchitectureSet archs , SymbolFlags flags , XPIAccess access)",25, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCClass( StringRef name , ArchitectureSet archs , XPIAccess access , ObjCClass * superClass)",27, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCClassEHType( StringRef name , ArchitectureSet archs , XPIAccess access)",25, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCInstanceVariable( StringRef name , ArchitectureSet archs , XPIAccess access)",27, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCSelector( ObjCContainer * container , StringRef name , ArchitectureSet archs , bool isInstanceMethod , bool isDynamic , XPIAccess access)",35, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCCategory( ObjCClass * baseClass , StringRef name , ArchitectureSet archs , XPIAccess access)",28, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::addObjCProtocol( StringRef name , ArchitectureSet archs , XPIAccess access)",24, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::findSymbol( XPIKind kind , StringRef name) const",10, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::findSymbol( const XPI & xpi) const",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::removeSymbol( XPIKind kind , StringRef name)",12, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::findSelector( const SelectorsMapKey & key) const",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::findCategory( const CategoriesMapKey & key) const",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::findCategory( const ObjCCategory * category) const",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/XPISet.cpp,"XPISet::findProtocol( StringRef key) const",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"convertXPIKindToSymbolKind( XPIKind kind)",14, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::InterfaceFile( ExtendedInterfaceFile && other)",13, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::addSymbolImpl( SymbolKind kind , StringRef name , ArchitectureSet archs , SymbolFlags flags , bool copyStrings)",7, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::addSymbol( SymbolKind kind , StringRef name , ArchitectureSet archs , SymbolFlags flags , bool copyStrings)",14, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::addUndefinedSymbolImpl( SymbolKind kind , StringRef name , ArchitectureSet archs , SymbolFlags flags , bool copyStrings)",8, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::addUndefinedSymbol( SymbolKind kind , StringRef name , ArchitectureSet archs , SymbolFlags flags , bool copyStrings)",14, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::contains( SymbolKind kind , StringRef name , Symbol const ** result) const",14, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::extract( Architecture arch) const",46, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::remove( Architecture arch) const",66, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::merge( const InterfaceFile * otherInterface , bool allowArchitectureMerges) const",139, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::printSymbolsForArch( Architecture arch) const",31, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/InterfaceFile.cpp,"InterfaceFile::printSymbols( ArchitectureSet archs) const",23, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/TapiError.cpp,"TapiError::log( raw_ostream & os) const",8, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/TapiError.cpp,"TapiError::convertToErrorCode() const",3, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/AvailabilityInfo.cpp,"AvailabilityInfo::print( raw_ostream & os) const",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Platform.cpp,"mapToSim( Platform platform , bool wantSim)",12, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Platform.cpp,"mapToPlatform( const Triple & target)",20, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Platform.cpp,"mapToSinglePlatform( ArrayRef<Triple> targets)",15, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Platform.cpp,"getPlatformName( Platform platform)",23, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Platform.cpp,"getOSAndEnvironmentName( Platform platform , std :: string version)",23, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Platform.cpp,"operator < <( raw_ostream & os , Platform platform)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/Platform.cpp,"operator < <( const DiagnosticBuilder & db , Platform platform)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSet.cpp,"ArchitectureSet::hasABICompatibleSlice( Architecture arch) const",14, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSet.cpp,"ArchitectureSet::getABICompatibleSlice( Architecture arch) const",14, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSet.cpp,"ArchitectureSet::operator std :: string() const",14, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSet.cpp,"ArchitectureSet::operator std :: vector < Architecture >() const",9, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSet.cpp,"ArchitectureSet::print( raw_ostream & os) const",1, 81, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSet.cpp,"operator < <( raw_ostream & os , ArchitectureSet set)",4, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSet.cpp,"operator < <( const DiagnosticBuilder & db , ArchitectureSet architectureSet)",5, 2, 0, 0
repos/cpp/swift/lib/TBDGen/tapi/ArchitectureSet.cpp,"mapToArchitectureSet( const std :: vector<Triple> & targets)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprImpl( Diag<> Message , bool isExprBasic)",31, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprIs()",11, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprAs()",31, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprArrow()",17, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprSequence( Diag<> Message , bool isExprBasic , bool isForConditionalDirective)",215, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprSequenceElement( Diag<> message , bool isExprBasic)",70, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"formUnaryArgument( ASTContext & context , Expr * argument)",10, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprUnary( Diag<> Message , bool isExprBasic)",71, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprKeyPath()",60, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprKeyPathObjC()",92, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprSelector()",76, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"getDeclRefKindForOperator( tok kind)",9, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprOperator()",9, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"getImplicitSelfDeclForSuperContext( Parser & P , DeclContext * DC , SourceLoc Loc)",22, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprSuper( bool isExprBasic)",87, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::copyAndStripUnderscores( StringRef orig)",14, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"isStartOfGetSetAccessor( Parser & P)",36, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"isValidTrailingClosure( bool isExprBasic , Parser & P)",47, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"getMagicIdentifierLiteralKind( tok Kind)",22, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprPostfixSuffix( ParserResult<Expr> Result , bool isExprBasic , bool periodHasKeyPathBehavior , bool & hasBindOptional)",256, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprPostfix( Diag<> ID , bool isExprBasic)",22, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprPrimary( Diag<> ID , bool isExprBasic)",326, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"createStringLiteralExprFromSegment( ASTContext & Ctx , const Lexer * L , Lexer :: StringSegment & Segment , SourceLoc TokenLoc)",15, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseStringSegments( SmallVectorImpl<Lexer::StringSegment> & Segments , Token EntireTok , VarDecl * InterpolationVar , SmallVectorImpl<ASTNode> & Stmts , unsigned & LiteralCapacity , unsigned & InterpolationCount)",196, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprStringLiteral()",103, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseOptionalArgumentLabel( Identifier & name , SourceLoc & loc)",23, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseUnqualifiedDeclName( bool afterDot , DeclNameLoc & loc , const Diagnostic & diag , bool allowOperators , bool allowZeroArgCompoundNames , bool allowDeinitAndSubscript)",113, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprIdentifier()",86, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprEditorPlaceholder( Token PlaceholderTok , Identifier PlaceholderId)",58, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"printTupleNames( const TypeRepr * typeRepr , llvm :: raw_ostream & OS)",32, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseClosureSignatureIfPresent( SmallVectorImpl<CaptureListEntry> & captureList , ParameterList * & params , SourceLoc & throwsLoc , SourceLoc & arrowLoc , TypeRepr * & explicitResultType , SourceLoc & inLoc)",338, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprClosure()",138, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprAnonClosureArg()",55, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprList( tok leftTok , tok rightTok , SyntaxKind Kind)",31, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprList( tok leftTok , tok rightTok , bool isPostfix , bool isExprBasic , SourceLoc & leftLoc , SmallVectorImpl<Expr*> & exprs , SmallVectorImpl<Identifier> & exprLabels , SmallVectorImpl<SourceLoc> & exprLabelLocs , SourceLoc & rightLoc , Expr * & trailingClosure , SyntaxKind Kind)",104, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseTrailingClosure( SourceRange calleeRange)",31, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprObjectLiteral( ObjectLiteralExpr :: LiteralKind LitKind , bool isExprBasic)",35, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprPoundUnknown( SourceLoc LSquareLoc)",73, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprPoundCodeCompletion( Optional<StmtKind> ParentKind)",10, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprCallSuffix( ParserResult<Expr> fn , bool isExprBasic)",46, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprCollection()",66, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprArray( SourceLoc LSquareLoc)",40, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseExprDictionary( SourceLoc LSquareLoc)",55, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::addPatternVariablesToScope( ArrayRef<Pattern*> Patterns)",10, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::addParametersToScope( ParameterList * PL)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseAvailabilitySpec()",13, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parseLanguageVersionConstraintSpec()",19, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseExpr.cpp,"Parser::parsePlatformVersionConstraintSpec()",48, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"swift::tokenize( const LangOptions & LangOpts , const SourceManager & SM , unsigned BufferID , unsigned Offset , unsigned EndOffset , DiagnosticEngine * Diags , CommentRetentionMode RetainComments , TriviaRetentionMode TriviaRetention , bool TokenizeInterpolatedString , ArrayRef<Token> SplitTokens , DF && DestFunc)",58, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"DelayedParsingCallbacks::anchor()",1, 43, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"SILParserTUStateBase::anchor()",1, 40, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParseDelayedFunctionBodies::ParseDelayedFunctionBodies( PersistentParserState & ParserState , CodeCompletionCallbacksFactory * Factory)",3, 66, 5, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParseDelayedFunctionBodies::walkToDeclPre( Decl * D)",9, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParseDelayedFunctionBodies::parseFunctionBody( AbstractFunctionDecl * AFD)",20, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"parseDelayedDecl( PersistentParserState & ParserState , CodeCompletionCallbacksFactory * CodeCompletionFactory)",35, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"swift::Parser::BacktrackingScope::~BacktrackingScope()",6, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"swift::performDelayedParsing( DeclContext * DC , PersistentParserState & PersistentState , CodeCompletionCallbacksFactory * CodeCompletionFactory)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"getStringPartTokens( const Token & Tok , const LangOptions & LangOpts , const SourceManager & SM , int BufID , std :: vector<Token> & Toks)",63, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"swift::tokenize( const LangOptions & LangOpts , const SourceManager & SM , unsigned BufferID , unsigned Offset , unsigned EndOffset , DiagnosticEngine * Diags , bool KeepComments , bool TokenizeInterpolatedString , ArrayRef<Token> SplitTokens)",22, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"swift::tokenizeWithTrivia( const LangOptions & LangOpts , const SourceManager & SM , unsigned BufferID , unsigned Offset , unsigned EndOffset , DiagnosticEngine * Diags)",26, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::Parser( unsigned BufferID , SourceFile & SF , SILParserTUStateBase * SIL , PersistentParserState * PersistentState)",3, 79, 4, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::Parser( unsigned BufferID , SourceFile & SF , DiagnosticEngine * LexerDiags , SILParserTUStateBase * SIL , PersistentParserState * PersistentState)",18, 39, 11, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"TokenRecorder::lower_bound( SourceLoc Loc)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"TokenRecorder::lower_bound( Token Tok)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"TokenRecorder::relexComment( CharSourceRange CommentRange , llvm :: SmallVectorImpl<Token> & Scratch)",17, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"TokenRecorder::TokenRecorder( SourceFile & SF)",5, 44, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"TokenRecorder::finalize()",20, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"TokenRecorder::registerTokenKindChange( SourceLoc Loc , tok NewKind)",12, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"TokenRecorder::receive( Token Tok)",29, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::Parser( std :: unique_ptr<Lexer> Lex , SourceFile & SF , SILParserTUStateBase * SIL , PersistentParserState * PersistentState)",32, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::~Parser()",5, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::allowTopLevelCode() const",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::peekToken()",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::consumeTokenWithoutFeedingReceiver()",11, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::consumeExtraToken( Token Extra)",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::consumeToken()",5, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::getEndOfPreviousLoc()",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::consumeStartingCharacterOfCurrentToken( tok Kind , size_t Len)",23, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::markSplitToken( tok Kind , StringRef Txt)",7, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::consumeStartingLess()",4, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::consumeStartingGreater()",4, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipSingle()",35, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipUntil( tok T1 , tok T2)",7, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipUntilAnyOperator()",5, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipUntilGreaterInTypeList( bool protocolComposition)",40, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipUntilDeclRBrace()",7, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipUntilDeclStmtRBrace( tok T1)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipUntilDeclStmtRBrace( tok T1 , tok T2)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipUntilDeclRBrace( tok T1 , tok T2)",7, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipUntilConditionalBlockClose()",6, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::skipUntilTokenOrEndOfLine( tok T1)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::loadCurrentSyntaxNodeFromCache()",16, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::parseEndIfDirective( SourceLoc & Loc)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"getStructureMarkerKindForToken( const Token & tok)",12, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::StructureMarkerRAII::StructureMarkerRAII( Parser & parser , const Token & tok)",4, 66, 26, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::StructureMarkerRAII::pushStructureMarker( Parser & parser , SourceLoc loc , StructureMarkerKind kind)",17, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::parseIdentifier( Identifier & Result , SourceLoc & Loc , const Diagnostic & D)",14, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::parseSpecificIdentifier( StringRef expected , SourceLoc & loc , const Diagnostic & D)",9, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::parseAnyIdentifier( Identifier & Result , SourceLoc & Loc , const Diagnostic & D)",30, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::parseToken( tok K , SourceLoc & TokLoc , const Diagnostic & D)",10, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::parseMatchingToken( tok K , SourceLoc & TokLoc , Diag<> ErrorDiag , SourceLoc OtherLoc)",18, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"getListElementKind( SyntaxKind ListKind)",20, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::parseList( tok RightK , SourceLoc LeftLoc , SourceLoc & RightLoc , bool AllowSepAfterLast , Diag<> ErrorDiag , SyntaxKind Kind , llvm :: function_ref<ParserStatus()> callback)",90, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::diagnoseRedefinition( ValueDecl * Prev , ValueDecl * New)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"Parser::getStringLiteralIfNotInterpolated( SourceLoc Loc , StringRef DiagText)",21, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::Implementation::Implementation( SourceManager & SM , SourceFileKind SFKind , unsigned BufferID , const LangOptions & Opts , StringRef ModuleName)",12, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::Implementation::~Implementation()",6, 4, 2, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::ParserUnit( SourceManager & SM , SourceFileKind SFKind , unsigned BufferID)",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::ParserUnit( SourceManager & SM , SourceFileKind SFKind , unsigned BufferID , const LangOptions & LangOpts , StringRef ModuleName , SyntaxParsingCache * SyntaxCache)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::ParserUnit( SourceManager & SM , SourceFileKind SFKind , unsigned BufferID , unsigned Offset , unsigned EndOffset)",14, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::~ParserUnit()",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::getParser()",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::getDiagnosticEngine()",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::getLangOptions() const",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParserUnit::getSourceFile()",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"swift::parseDeclName( StringRef name)",109, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"ParsedDeclName::formDeclName( ASTContext & ctx) const",4, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"swift::formDeclName( ASTContext & ctx , StringRef baseName , ArrayRef<StringRef> argumentLabels , bool isFunctionName , bool isInitializer)",35, 2, 0, 0
repos/cpp/swift/lib/Parse/Parser.cpp,"swift::parseDeclName( ASTContext & ctx , StringRef name)",3, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::DebuggerContextChange( Parser & P)",7, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::DebuggerContextChange( Parser & P , Identifier & Name , DeclKind Kind)",15, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::movedToTopLevel()",3, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::fixupParserResult( ParserResult<T> & Result)",4, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::fixupParserResult( T * D)",6, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::fixupParserResult( ParserStatus Status , T * D)",8, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::~DebuggerContextChange()",1, 33, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::getDebuggerClient()",8, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::inDebuggerContext()",14, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::switchContext()",4, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"DebuggerContextChange::swapDecl( Decl * D)",9, 6, 4, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"PersistentParserState::parseMembers( IterableDeclContext * IDC)",20, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseTopLevel()",97, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseExtendedAvailabilitySpecList( SourceLoc AtLoc , SourceLoc AttrLoc , StringRef AttrName)",290, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseSpecializeAttributeArguments( swift :: tok ClosingBrace , bool & DiscardAttribute , Optional<bool> & Exported , Optional<SpecializeAttr::SpecializationKind> & Kind , swift :: TrailingWhereClause * & TrailingWhereClause)",112, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseSpecializeAttribute( swift :: tok ClosingBrace , SourceLoc AtLoc , SourceLoc Loc , SpecializeAttr * & Attr)",46, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseImplementsAttribute( SourceLoc AtLoc , SourceLoc Loc)",59, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseObjCSelector( SmallVector<Identifier,4> & Names , SmallVector<SourceLoc,4> & NameLocs , bool & IsNullarySelector)",61, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseNewDeclAttribute( DeclAttributes & Attributes , SourceLoc AtLoc , DeclAttrKind DK)",748, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseVersionTuple( llvm :: VersionTuple & Version , SourceRange & Range , const Diagnostic & D)",62, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclAttribute( DeclAttributes & Attributes , SourceLoc AtLoc)",128, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::canParseTypeAttribute()",4, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseTypeAttribute( TypeAttributes & Attributes , bool justChecking)",273, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclAttributeList( DeclAttributes & Attributes , bool & FoundCCToken)",25, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclModifierList( DeclAttributes & Attributes , SourceLoc & StaticLoc , StaticSpellingKind & StaticSpelling)",106, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseTypeAttributeListPresent( VarDecl :: Specifier & Specifier , SourceLoc & SpecifierLoc , TypeAttributes & Attributes)",37, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"isStartOfOperatorDecl( const Token & Tok , const Token & Tok2)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"diagnoseOperatorFixityAttributes( Parser & P , DeclAttributes & Attrs , const Decl * D)",43, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"skipUntilMatchingRBrace( Parser & P , bool & HasPoundDirective , SyntaxParsingContext * & SyntaxContext)",30, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"swift::isKeywordPossibleDeclStart( const Token & Tok)",44, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"isParenthesizedUnowned( Parser & P)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::isStartOfDecl()",89, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::consumeDecl( ParserPosition BeginParserPosition , ParseDeclOptions Flags , bool IsTopLevel)",23, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::setLocalDiscriminator( ValueDecl * D)",13, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::setLocalDiscriminatorToParamList( ParameterList * PL)",7, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::delayParseFromBeginningToHere( ParserPosition BeginParserPosition , ParseDeclOptions Flags)",14, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDecl( ParseDeclOptions Flags , llvm :: function_ref<void(Decl*)> Handler)",317, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclListDelayed( IterableDeclContext * IDC)",61, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclDelayed()",37, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclImport( ParseDeclOptions Flags , DeclAttributes & Attributes)",90, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseInheritance( SmallVectorImpl<TypeLoc> & Inherited , bool allowClassRequirement , bool allowAnyObject)",78, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"parseIdentifierDeclName( Parser & P , Identifier & Result , SourceLoc & Loc , StringRef DeclKindName , tok ResyncT1 , tok ResyncT2 , tok ResyncT3 , tok ResyncT4 , TokenProperty ResyncP1)",60, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"parseIdentifierDeclName( Parser & P , Identifier & Result , SourceLoc & L , StringRef DeclKindName , tok ResyncT1 , tok ResyncT2)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"parseIdentifierDeclName( Parser & P , Identifier & Result , SourceLoc & L , StringRef DeclKindName , tok ResyncT1 , tok ResyncT2 , tok ResyncT3 , tok ResyncT4)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"parseIdentifierDeclName( Parser & P , Identifier & Result , SourceLoc & L , StringRef DeclKindName , tok ResyncT1 , tok ResyncT2 , TokenProperty ResyncP1)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"parseIdentifierDeclName( Parser & P , Identifier & Result , SourceLoc & L , StringRef DeclKindName , tok ResyncT1 , tok ResyncT2 , tok ResyncT3 , TokenProperty ResyncP1)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::diagnoseConsecutiveIDs( StringRef First , SourceLoc FirstLoc , StringRef DeclKindName)",25, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclItem( bool & PreviousHadSemi , Parser :: ParseDeclOptions Options , llvm :: function_ref<void(Decl*)> handler)",42, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclList( SourceLoc LBLoc , SourceLoc & RBLoc , Diag<> ErrorDiag , ParseDeclOptions Options , llvm :: function_ref<void(Decl*)> handler)",26, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::canDelayMemberDeclParsing()",30, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclExtension( ParseDeclOptions Flags , DeclAttributes & Attributes)",85, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclPoundDiagnostic()",83, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseLineDirective( bool isLine)",141, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclTypeAlias( Parser :: ParseDeclOptions Flags , DeclAttributes & Attributes)",105, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclAssociatedType( Parser :: ParseDeclOptions Flags , DeclAttributes & Attributes)",84, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"createAccessorFunc( SourceLoc DeclLoc , ParameterList * param , GenericParamList * GenericParams , ParameterList * Indices , TypeLoc ElementTy , SourceLoc StaticLoc , Parser :: ParseDeclOptions Flags , AccessorKind Kind , AbstractStorageDecl * storage , Parser * P , SourceLoc AccessorKeywordLoc)",101, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"createSetterAccessorArgument( SourceLoc nameLoc , Identifier name , AccessorKind accessorKind , Parser & P , TypeLoc elementType)",32, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"parseOptionalAccessorArgument( SourceLoc SpecifierLoc , Parser & P , AccessorKind Kind , TypeLoc ElementTy)",46, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"skipBracedBlock( Parser & P , SyntaxParsingContext * & SyntaxContext)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"getAccessorNameForDiagnostic( AccessorKind accessorKind , bool article)",22, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"getAccessorNameForDiagnostic( AccessorDecl * accessor , bool article)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"diagnoseRedundantAccessors( Parser & P , SourceLoc loc , AccessorKind accessorKind , bool isSubscript , AccessorDecl * previous)",13, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"isAllowedInLimitedSyntax( AccessorKind kind)",16, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::ParsedAccessors::findFirstNonObserver()",7, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::ParsedAccessors::findFirstMutator() const",6, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"parseAccessorIntroducer( Parser & P , DeclAttributes & Attributes , AccessorKind & Kind , SourceLoc & Loc)",41, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseGetSet( ParseDeclOptions Flags , GenericParamList * GenericParams , ParameterList * Indices , TypeLoc ElementTy , ParsedAccessors & accessors , AbstractStorageDecl * storage , SourceLoc StaticLoc)",183, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"fillInAccessorTypeErrors( Parser & P , FuncDecl * accessor , AccessorKind kind)",32, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"fillInAccessorTypeErrors( Parser & P , Parser :: ParsedAccessors & accessors)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclVarGetSet( Pattern * pattern , ParseDeclOptions Flags , SourceLoc StaticLoc , SourceLoc VarLoc , bool hasInitializer , const DeclAttributes & Attributes , SmallVectorImpl<Decl*> & Decls)",132, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::ParsedAccessors::add( AccessorDecl * accessor)",16, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::ParsedAccessors::record( Parser & P , AbstractStorageDecl * storage , bool invalid , ParseDeclOptions flags , SourceLoc staticLoc , const DeclAttributes & attrs , TypeLoc elementTy , ParameterList * indices , SmallVectorImpl<Decl*> & decls)",13, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"flagInvalidAccessor( AccessorDecl * func)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"ignoreInvalidAccessor( AccessorDecl * & func)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"diagnoseConflictingAccessors( Parser & P , AccessorDecl * first , AccessorDecl * & second)",12, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"diagnoseAndIgnoreObservers( Parser & P , Parser :: ParsedAccessors & accessors , Diag<unsigned,DiagArgs...> diagnostic , typename std :: enable_if<true,DiagArgs> :: type ... args)",13, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"classifyWithHasStorageAttr( Parser :: ParsedAccessors & accessors , ASTContext & ctx , AbstractStorageDecl * storage , const DeclAttributes & attrs)",48, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::ParsedAccessors::classify( Parser & P , AbstractStorageDecl * storage , bool invalid , ParseDeclOptions flags , SourceLoc staticLoc , const DeclAttributes & attrs , TypeLoc elementTy , ParameterList * indices)",181, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclVar( ParseDeclOptions Flags , DeclAttributes & Attributes , SmallVectorImpl<Decl*> & Decls , SourceLoc StaticLoc , StaticSpellingKind StaticSpelling , SourceLoc TryLoc)",276, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::consumeAbstractFunctionBody( AbstractFunctionDecl * AFD , const DeclAttributes & Attrs)",32, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclFunc( SourceLoc StaticLoc , StaticSpellingKind StaticSpelling , ParseDeclOptions Flags , DeclAttributes & Attributes)",161, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseAbstractFunctionBody( AbstractFunctionDecl * AFD)",38, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseAbstractFunctionBodyDelayed( AbstractFunctionDecl * AFD)",43, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclEnum( ParseDeclOptions Flags , DeclAttributes & Attributes)",88, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclEnumCase( ParseDeclOptions Flags , DeclAttributes & Attributes , llvm :: SmallVectorImpl<Decl*> & Decls)",172, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclStruct( ParseDeclOptions Flags , DeclAttributes & Attributes)",92, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclClass( ParseDeclOptions Flags , DeclAttributes & Attributes)",119, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclProtocol( ParseDeclOptions Flags , DeclAttributes & Attributes)",91, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclSubscript( ParseDeclOptions Flags , DeclAttributes & Attributes , SmallVectorImpl<Decl*> & Decls)",139, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclInit( ParseDeclOptions Flags , DeclAttributes & Attributes)",120, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclDeinit( ParseDeclOptions Flags , DeclAttributes & Attributes)",60, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclOperator( ParseDeclOptions Flags , DeclAttributes & Attributes)",44, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclOperatorImpl( SourceLoc OperatorLoc , Identifier Name , SourceLoc NameLoc , DeclAttributes & Attributes)",113, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseDecl.cpp,"Parser::parseDeclPrecedenceGroup( ParseDeclOptions flags , DeclAttributes & attributes)",237, 2, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::PersistentParserState( ASTContext & Ctx)",2, 40, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::~PersistentParserState()",1, 80, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::delayFunctionBodyParsing( AbstractFunctionDecl * AFD , SourceRange BodyRange , SourceLoc PreviousLoc)",10, 2, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::takeFunctionBodyState( AbstractFunctionDecl * AFD)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::hasFunctionBodyState( AbstractFunctionDecl * AFD)",3, 2, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::takeDelayedDeclListState( IterableDeclContext * IDC)",7, 2, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::delayDecl( DelayedDeclKind Kind , unsigned Flags , DeclContext * ParentContext , SourceRange BodyRange , SourceLoc PreviousLoc)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::delayDeclList( IterableDeclContext * D , unsigned Flags , DeclContext * ParentContext , SourceRange BodyRange , SourceLoc PreviousLoc)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::parseAllDelayedDeclLists()",9, 2, 0, 0
repos/cpp/swift/lib/Parse/PersistentParserState.cpp,"PersistentParserState::delayTopLevel( TopLevelCodeDecl * TLCD , SourceRange BodyRange , SourceLoc PreviousLoc)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/Scope.cpp,"isResolvableScope( ScopeKind SK)",24, 2, 0, 0
repos/cpp/swift/lib/Parse/Scope.cpp,"Scope::Scope( Parser * P , ScopeKind SC , bool isInactiveConfigBlock)",19, 2, 0, 0
repos/cpp/swift/lib/Parse/Scope.cpp,"Scope::Scope( Parser * P , SavedScope && SS)",13, 2, 0, 0
repos/cpp/swift/lib/Parse/Scope.cpp,"Scope::isResolvable() const",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Scope.cpp,"checkValidOverload( const ValueDecl * D1 , const ValueDecl * D2 , Parser & P)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/Scope.cpp,"ScopeInfo::addToScope( ValueDecl * D , Parser & TheParser)",35, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::SyntaxParsingContext( SyntaxParsingContext * & CtxtHolder , SourceFile & SF , unsigned BufferID)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::loadFromCache( size_t LexerOffset)",19, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::makeUnknownSyntax( SyntaxKind Kind , ArrayRef<RC<RawSyntax>> Parts)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::createSyntaxAs( SyntaxKind Kind , ArrayRef<RC<RawSyntax>> Parts)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::bridgeAs( SyntaxContextKind Kind , ArrayRef<RC<RawSyntax>> Parts)",58, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::addRawSyntax( RC<RawSyntax> Raw)",3, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::getRoot() const",6, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::addToken( Token & Tok , Trivia & LeadingTrivia , Trivia & TrailingTrivia)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::addSyntax( Syntax Node)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::createNodeInPlace( SyntaxKind Kind , size_t N)",14, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::createNodeInPlace( SyntaxKind Kind)",35, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::collectNodesInPlace( SyntaxKind ColletionKind)",15, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxVerifier::getSourceLoc( T Node)",4, 4, 2, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxVerifier::SyntaxVerifier( RootContextData & RootData)",1, 68, 2, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxVerifier::visit( UnknownDeclSyntax Node)",5, 4, 2, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxVerifier::visit( UnknownExprSyntax Node)",5, 4, 2, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxVerifier::visit( UnknownStmtSyntax Node)",5, 4, 2, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxVerifier::visit( UnknownTypeSyntax Node)",5, 4, 2, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxVerifier::visit( UnknownPatternSyntax Node)",5, 4, 2, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxVerifier::verify( Syntax Node)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"finalizeSourceFile( RootContextData & RootData , ArrayRef<RC<RawSyntax>> Parts)",44, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::finalizeRoot()",20, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::synthesize( tok Kind , StringRef Text)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::synthesize( SyntaxKind Kind)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::dumpStorage() const",7, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"SyntaxParsingContext::~SyntaxParsingContext()",64, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"shouldCacheNode( tok TokKind , OwnedString & Text , llvm :: ArrayRef<TriviaPiece> LeadingTrivia , llvm :: ArrayRef<TriviaPiece> TrailingTrivia)",23, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"RawSyntaxTokenCache::getToken( RC<SyntaxArena> & Arena , tok TokKind , OwnedString Text , llvm :: ArrayRef<TriviaPiece> LeadingTrivia , llvm :: ArrayRef<TriviaPiece> TrailingTrivia)",32, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingContext.cpp,"RawSyntaxTokenCache::~RawSyntaxTokenCache()",12, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::isStartOfStmt()",60, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseExprOrStmt( ASTNode & Result)",58, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"isAtStartOfSwitchCase( Parser & parser , bool needsToBacktrack = true)",21, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::isTerminatorForBraceItemListKind( BraceItemListKind Kind , ArrayRef<ASTNode> ParsedDecls)",50, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::consumeTopLevelDecl( ParserPosition BeginParserPosition , TopLevelCodeDecl * TLCD)",13, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseBraceItems( SmallVectorImpl<ASTNode> & Entries , BraceItemListKind Kind , BraceItemListKind ConditionalBlockKind)",226, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseTopLevelCodeDeclDelayed()",46, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"recoverFromInvalidCase( Parser & P)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmt()",99, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseBraceItemList( Diag<> ID)",25, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtBreak()",17, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtContinue()",17, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtReturn( SourceLoc tryLoc)",60, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtYield( SourceLoc tryLoc)",70, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtThrow( SourceLoc tryLoc)",29, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtDefer()",58, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"parseWhereGuard( Parser & P , GuardedPattern & result , ParserStatus & status , GuardedPatternContext parsingContext , bool isExprBasic)",40, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"parseGuardedPattern( Parser & P , GuardedPattern & result , ParserStatus & status , SmallVectorImpl<VarDecl*> & boundDecls , GuardedPatternContext parsingContext , bool isFirstPattern)",154, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"validateAvailabilitySpecList( Parser & P , ArrayRef<AvailabilitySpec*> Specs)",44, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtConditionPoundAvailable()",38, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseAvailabilitySpecList( SmallVectorImpl<AvailabilitySpec*> & Specs)",82, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtConditionElement( SmallVectorImpl<StmtConditionElement> & result , Diag<> DefaultID , StmtKind ParentKind , StringRef & BindingKindStr)",165, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtCondition( StmtCondition & Condition , Diag<> DefaultID , StmtKind ParentKind)",53, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtIf( LabeledStmtInfo LabelInfo , bool IfWasImplicitlyInserted)",108, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtGuard()",72, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtWhile( LabeledStmtInfo LabelInfo)",48, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtRepeat( LabeledStmtInfo labelInfo)",39, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtDo( LabeledStmtInfo labelInfo)",72, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtCatch()",30, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"isStmtForCStyle( Parser & P)",28, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtForEach( LabeledStmtInfo LabelInfo)",121, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtSwitch( LabeledStmtInfo LabelInfo)",53, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtCases( SmallVectorImpl<ASTNode> & cases , bool IsActive)",53, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"parseStmtCase( Parser & P , SourceLoc & CaseLoc , SmallVectorImpl<CaseLabelItem> & LabelItems , SmallVectorImpl<VarDecl*> & BoundDecls , SourceLoc & ColonLoc)",37, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"parseStmtCaseDefault( Parser & P , SourceLoc & CaseLoc , SmallVectorImpl<CaseLabelItem> & LabelItems , SourceLoc & ColonLoc)",34, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtCase( bool IsActive)",78, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseStmt.cpp,"Parser::parseStmtPoundAssert()",47, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"getDefaultArgKind( Expr * init)",23, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::DefaultArgumentInfo::setFunctionContext( DeclContext * DC , ParameterList * paramList)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"parseDefaultArgument( Parser & P , Parser :: DefaultArgumentInfo * defaultArgs , unsigned argIndex , Expr * & init , Parser :: ParameterContextKind paramContext)",63, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"startsParameterName( Parser & parser , bool isClosure)",19, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parseParameterClause( SourceLoc & leftParenLoc , SmallVectorImpl<ParsedParameter> & params , SourceLoc & rightParenLoc , DefaultArgumentInfo * defaultArgs , ParameterContextKind paramContext)",244, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"validateParameterWithSpecifier( Parser & parser , Parser :: ParsedParameter & paramInfo , StringRef specifierName , bool parsingEnumElt)",28, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"mapParsedParameters( Parser & parser , SourceLoc leftParenLoc , MutableArrayRef<Parser::ParsedParameter> params , SourceLoc rightParenLoc , SmallVectorImpl<Identifier> * argNames , Parser :: ParameterContextKind paramContext)",192, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parseSingleParameterClause( ParameterContextKind paramContext , SmallVectorImpl<Identifier> * namePieces , DefaultArgumentInfo * defaultArgs)",48, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parseFunctionArguments( SmallVectorImpl<Identifier> & NamePieces , ParameterList * & BodyParams , ParameterContextKind paramContext , DefaultArgumentInfo & DefaultArgs)",28, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parseFunctionSignature( Identifier SimpleName , DeclName & FullName , ParameterList * & bodyParams , DefaultArgumentInfo & defaultArgs , SourceLoc & throwsLoc , bool & rethrows , TypeRepr * & retType)",97, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parseTypedPattern()",61, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parsePattern()",86, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::createBindingFromPattern( SourceLoc loc , Identifier name , VarDecl :: Specifier specifier)",7, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parsePatternTupleElement()",21, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parsePatternTuple()",36, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parseOptionalPatternTypeAnnotation( ParserResult<Pattern> result , bool isOptional)",36, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parseMatchingPattern( bool isExprBasic)",53, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::parseMatchingPatternAsLetOrVar( bool isLet , SourceLoc varLoc , bool isExprBasic)",22, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::isOnlyStartOfMatchingPattern()",3, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"canParsePattern( Parser & P)",17, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"canParsePatternTuple( Parser & P)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/ParsePattern.cpp,"Parser::canParseTypedPattern()",7, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingCache.cpp,"SyntaxParsingCache::addEdit( size_t Start , size_t End , size_t ReplacementLength)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingCache.cpp,"SyntaxParsingCache::nodeCanBeReused( const Syntax & Node , size_t NodeStart , size_t Position , SyntaxKind Kind) const",38, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingCache.cpp,"SyntaxParsingCache::lookUpFrom( const Syntax & Node , size_t NodeStart , size_t Position , SyntaxKind Kind)",24, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingCache.cpp,"SyntaxParsingCache::translateToPreEditPosition( size_t PostEditPosition , ArrayRef<SourceEdit> Edits)",16, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingCache.cpp,"SyntaxParsingCache::lookUp( size_t NewPosition , SyntaxKind Kind)",12, 2, 0, 0
repos/cpp/swift/lib/Parse/SyntaxParsingCache.cpp,"SyntaxParsingCache::getReusedRegions( const SourceFileSyntax & SyntaxTree) const",45, 2, 0, 0
repos/cpp/swift/lib/Parse/Confusables.cpp,"swift::confusable::tryConvertConfusableCharacterToASCII( uint32_t codepoint)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::applyAttributeToType( TypeRepr * ty , const TypeAttributes & attrs , VarDecl :: Specifier specifier , SourceLoc specifierLoc)",30, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseLayoutConstraint( Identifier LayoutConstraintID)",76, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseTypeSimple( Diag<> MessageID , bool HandleCodeCompletion)",119, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseType()",3, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseSILBoxType( GenericParamList * generics , const TypeAttributes & attrs , Optional<Scope> & GenericsScope)",70, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseType( Diag<> MessageID , bool HandleCodeCompletion , bool IsSILFuncDecl)",142, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseGenericArguments( SmallVectorImpl<TypeRepr*> & Args , SourceLoc & LAngleLoc , SourceLoc & RAngleLoc)",45, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseTypeIdentifier()",109, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseTypeSimpleOrComposition( Diag<> MessageID , bool HandleCodeCompletion)",62, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseAnyType()",7, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseOldStyleProtocolComposition()",94, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseTypeTupleBody()",168, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseTypeArray( TypeRepr * Base)",34, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseTypeCollection()",71, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::isOptionalToken( const Token & T) const",13, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::isImplicitlyUnwrappedOptionalToken( const Token & T) const",14, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::consumeOptionalToken()",4, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::consumeImplicitlyUnwrappedOptionalToken()",5, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseTypeOptional( TypeRepr * base)",19, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::parseTypeImplicitlyUnwrappedOptional( TypeRepr * base)",15, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"isGenericTypeDisambiguatingToken( Parser & P)",36, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::canParseAsGenericArgumentList()",11, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::canParseGenericArguments()",19, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::canParseType()",81, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::canParseTypeIdentifierOrTypeComposition()",16, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::canParseTypeIdentifier()",22, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::canParseOldStyleProtocolComposition()",30, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseType.cpp,"Parser::canParseTypeTupleBody()",48, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"getPlatformConditionKind( StringRef Name)",10, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"extractExprSource( SourceManager & SM , Expr * E)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"isValidPrefixUnaryOperator( Optional<StringRef> UnaryOperator)",4, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"isValidVersion( const version :: Version & Version , const version :: Version & ExpectedVersion , StringRef UnaryOperator)",9, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::getDeclRefStr( Expr * E , DeclRefKind Kind)",10, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::diagnoseUnsupportedExpr( Expr * E)",5, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::foldSequence( Expr * LHS , ArrayRef<Expr*> & S , bool isRecurse = false)",64, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::ValidateIfConfigCondition( ASTContext & Ctx , DiagnosticEngine & D)",2, 41, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::visitUnresolvedDeclRefExpr( UnresolvedDeclRefExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::visitBooleanLiteralExpr( BooleanLiteralExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::visitIntegerLiteralExpr( IntegerLiteralExpr * E)",13, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::visitCallExpr( CallExpr * E)",107, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::visitParenExpr( ParenExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::visitPrefixUnaryExpr( PrefixUnaryExpr * E)",10, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::visitSequenceExpr( SequenceExpr * E)",8, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::visitExpr( Expr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::validate( Expr * E)",6, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"ValidateIfConfigCondition::hasError() const",3, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"validateIfConfigCondition( Expr * & condition , ASTContext & Context , DiagnosticEngine & D)",7, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::getDeclRefStr( Expr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::EvaluateIfConfigCondition( ASTContext & Ctx)",1, 59, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::visitBooleanLiteralExpr( BooleanLiteralExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::visitIntegerLiteralExpr( IntegerLiteralExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::visitUnresolvedDeclRefExpr( UnresolvedDeclRefExpr * E)",4, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::visitCallExpr( CallExpr * E)",35, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::visitPrefixUnaryExpr( PrefixUnaryExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::visitParenExpr( ParenExpr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::visitBinaryExpr( BinaryExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"EvaluateIfConfigCondition::visitExpr( Expr * E)",1, 74, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"evaluateIfConfigCondition( Expr * Condition , ASTContext & Context)",3, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"IsVersionIfConfigCondition::getDeclRefStr( Expr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"IsVersionIfConfigCondition::IsVersionIfConfigCondition()",1, 34, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"IsVersionIfConfigCondition::visitBinaryExpr( BinaryExpr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"IsVersionIfConfigCondition::visitCallExpr( CallExpr * E)",5, 4, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"IsVersionIfConfigCondition::visitPrefixUnaryExpr( PrefixUnaryExpr * E)",1, 79, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"IsVersionIfConfigCondition::visitParenExpr( ParenExpr * E)",1, 71, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"IsVersionIfConfigCondition::visitExpr( Expr * E)",1, 44, 2, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"isVersionIfConfigCondition( Expr * Condition)",3, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"getDeclRefStr( Expr * E)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"isPlatformConditionDisjunction( Expr * E , PlatformConditionKind Kind , ArrayRef<StringRef> Vals)",25, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"findAnyLikelySimulatorEnvironmentTest( Expr * Condition)",40, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseIfConfig.cpp,"Parser::parseIfConfig( llvm :: function_ref<void(SmallVectorImpl<ASTNode>&,bool)> parseElements)",88, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"EncodeToUTF8( unsigned CharValue , SmallVectorImpl<char> & Result)",39, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"CLO8( unsigned char C)",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"isStartOfUTF8Character( unsigned char C)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"swift::validateUTF8CharacterAndAdvance( const char * & Ptr , const char * End)",56, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::Lexer( const PrincipalTag & , const LangOptions & LangOpts , const SourceManager & SourceMgr , unsigned BufferID , DiagnosticEngine * Diags , bool InSILMode , HashbangMode HashbangAllowed , CommentRetentionMode RetainComments , TriviaRetentionMode TriviaRetention)",9, 74, 6, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::initialize( unsigned Offset , unsigned EndOffset)",35, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::Lexer( const LangOptions & Options , const SourceManager & SourceMgr , unsigned BufferID , DiagnosticEngine * Diags , bool InSILMode , HashbangMode HashbangAllowed , CommentRetentionMode RetainComments , TriviaRetentionMode TriviaRetention)",9, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::Lexer( const LangOptions & Options , const SourceManager & SourceMgr , unsigned BufferID , DiagnosticEngine * Diags , bool InSILMode , HashbangMode HashbangAllowed , CommentRetentionMode RetainComments , TriviaRetentionMode TriviaRetention , unsigned Offset , unsigned EndOffset)",9, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::Lexer( Lexer & Parent , State BeginState , State EndState)",16, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::diagnose( const char * Loc , Diagnostic Diag)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getTokenAt( SourceLoc Loc)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::formToken( tok Kind , const char * TokStart)",34, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::formEscapedIdentifierToken( const char * TokStart)",16, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::formStringLiteralToken( const char * TokStart , bool IsMultilineString , unsigned CustomDelimiterLen)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getStateForBeginningOfTokenLoc( SourceLoc Loc) const",26, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"diagnoseEmbeddedNul( DiagnosticEngine * Diags , const char * Ptr)",12, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"advanceToEndOfLine( const char * & CurPtr , const char * BufferEnd , const char * CodeCompletionPtr = nullptr , DiagnosticEngine * Diags = nullptr)",34, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::skipToEndOfLine( bool EatNewline)",7, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::skipSlashSlashComment( bool EatNewline)",4, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::skipHashbang( bool EatNewline)",5, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"skipToEndOfSlashStarComment( const char * & CurPtr , const char * BufferEnd , const char * CodeCompletionPtr = nullptr , DiagnosticEngine * Diags = nullptr)",76, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::skipSlashStarComment()",6, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"isValidIdentifierContinuationCodePoint( uint32_t c)",53, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"isValidIdentifierStartCodePoint( uint32_t c)",16, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"advanceIf( char const * & ptr , char const * end , bool(*predicate)(uint32_t))",13, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"advanceIfValidStartOfIdentifier( char const * & ptr , char const * end)",4, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"advanceIfValidContinuationOfIdentifier( char const * & ptr , char const * end)",4, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"advanceIfValidStartOfOperator( char const * & ptr , char const * end)",4, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"advanceIfValidContinuationOfOperator( char const * & ptr , char const * end)",4, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::isIdentifier( StringRef string)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::isOperator( StringRef string)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::kindOfIdentifier( StringRef Str , bool InSILMode)",12, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexIdentifier()",13, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexHash()",28, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"isLeftBound( const char * tokBegin , const char * bufferBegin)",27, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"isRightBound( const char * tokEnd , bool isLeftBound , const char * codeCompletionPtr)",35, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"rangeContainsPlaceholderEnd( const char * CurPtr , const char * End)",12, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexOperatorIdentifier()",124, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexDollarIdent()",43, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexHexNumber()",104, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexNumber()",115, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexUnicodeEscape( const char * & CurPtr , Lexer * Diags)",27, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"maybeConsumeNewlineEscape( const char * & CurPtr , ssize_t Offset)",19, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"diagnoseZeroWidthMatchAndAdvance( char Target , const char * & CurPtr , DiagnosticEngine * Diags)",6, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"advanceIfMultilineDelimiter( const char * & CurPtr , DiagnosticEngine * Diags)",11, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"advanceIfCustomDelimiter( const char * & CurPtr , DiagnosticEngine * Diags)",14, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"delimiterMatches( unsigned CustomDelimiterLen , const char * & BytesPtr , DiagnosticEngine * Diags , bool IsClosing = false)",21, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexCharacter( const char * & CurPtr , char StopQuote , bool EmitDiagnostics , bool IsMultilineString , unsigned CustomDelimiterLen)",109, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"skipToEndOfInterpolatedExpression( const char * CurPtr , const char * EndPtr , bool IsMultilineString)",144, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"getStringLiteralContent( const Token & Str)",13, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"commonPrefixLength( StringRef shorter , StringRef longer)",8, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"getMultilineTrailingIndent( StringRef Bytes , DiagnosticEngine * Diags = nullptr , unsigned CustomDelimiterLen = 0)",48, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"diagnoseInvalidMultilineIndents( DiagnosticEngine * Diags , StringRef ExpectedIndent , SourceLoc IndentLoc , StringRef Bytes , SmallVector<size_t,4> LineStarts , size_t MistakeOffset , StringRef ActualIndent)",52, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"validateMultilineIndents( const Token & Str , DiagnosticEngine * Diags)",60, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"diagnoseSingleQuoteStringLiteral( const char * TokStart , const char * TokEnd , DiagnosticEngine * D)",42, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexStringLiteral( unsigned CustomDelimiterLen)",68, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::findEndOfCurlyQuoteStringLiteral( const char * Body , bool EmitDiagnostics)",37, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexEscapedIdentifier()",31, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"findConflictEnd( const char * CurPtr , const char * BufferEnd , ConflictMarkerKind CMK)",22, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::tryLexConflictMarker( bool EatNewline)",29, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexUnknown( bool EmitDiagnosticsIfToken)",83, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getNulCharacterKind( const char * Ptr) const",10, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::tryLexEditorPlaceholder()",25, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getEncodedStringSegmentImpl( StringRef Bytes , SmallVectorImpl<char> & TempString , bool IsFirstSegment , bool IsLastSegment , unsigned IndentToStrip , unsigned CustomDelimiterLen)",99, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getStringLiteralSegments( const Token & Str , SmallVectorImpl<StringSegment> & Segments , DiagnosticEngine * Diags)",60, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexImpl()",173, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getTokenAtLocation( const SourceManager & SM , SourceLoc Loc)",23, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::lexTrivia( syntax :: Trivia & Pieces , bool IsForTrailingTrivia)",141, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getLocForEndOfToken( const SourceManager & SM , SourceLoc Loc)",3, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"getLocForStartOfTokenInBuf( SourceManager & SM , unsigned BufferID , unsigned Offset , unsigned BufferStart , unsigned BufferEnd)",52, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"findStartOfLine( const char * bufStart , const char * current)",12, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getLocForStartOfToken( SourceManager & SM , SourceLoc Loc)",7, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getLocForStartOfToken( SourceManager & SM , unsigned BufferID , unsigned Offset)",23, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getLocForStartOfLine( SourceManager & SM , SourceLoc Loc)",19, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getLocForEndOfLine( SourceManager & SM , SourceLoc Loc)",24, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"Lexer::getIndentationForLine( SourceManager & SM , SourceLoc Loc , StringRef * ExtraIndentation)",33, 2, 0, 0
repos/cpp/swift/lib/Parse/Lexer.cpp,"swift::slice_token_array( ArrayRef<Token> AllTokens , SourceLoc StartLoc , SourceLoc EndLoc)",9, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseGeneric.cpp,"Parser::parseGenericParameters()",6, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseGeneric.cpp,"Parser::parseGenericParametersBeforeWhere( SourceLoc LAngleLoc , SmallVectorImpl<GenericTypeParamDecl*> & GenericParams)",80, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseGeneric.cpp,"Parser::parseGenericParameters( SourceLoc LAngleLoc)",42, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseGeneric.cpp,"Parser::maybeParseGenericParams()",21, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseGeneric.cpp,"Parser::diagnoseWhereClauseInGenericParamList( const GenericParamList * GenericParams)",49, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseGeneric.cpp,"Parser::parseGenericWhereClause( SourceLoc & WhereLoc , SmallVectorImpl<RequirementRepr> & Requirements , bool & FirstTypeInComplete , bool AllowLayoutConstraints)",108, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseGeneric.cpp,"Parser::parseFreestandingGenericWhereClause( GenericParamList * & genericParams , WhereClauseKind kind)",27, 2, 0, 0
repos/cpp/swift/lib/Parse/ParseGeneric.cpp,"Parser::parseProtocolOrAssociatedTypeWhereClause( TrailingWhereClause * & trailingWhere , bool isProtocol)",17, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::Context()",2, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::~Context()",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::clear()",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::demangleSymbolAsNode( llvm :: StringRef MangledName)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::demangleTypeAsNode( llvm :: StringRef MangledName)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::demangleSymbolAsString( llvm :: StringRef MangledName , const DemangleOptions & Options)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::demangleTypeAsString( llvm :: StringRef MangledName , const DemangleOptions & Options)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::isThunkSymbol( llvm :: StringRef MangledName)",47, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::getThunkTarget( llvm :: StringRef MangledName)",29, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::Context::hasSwiftCallingConvention( llvm :: StringRef MangledName)",24, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::demangleSymbolAsString( const char * MangledName , size_t MangledNameLength , const DemangleOptions & Options)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Context.cpp,"swift::Demangle::demangleTypeAsString( const char * MangledName , size_t MangledNameLength , const DemangleOptions & Options)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"FindPtr::FindPtr( Node * v)",1, 36, 4, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"FindPtr::operator ( )( NodePointer sp) const",3, 6, 4, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"isStartOfIdentifier( char c)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"isStartOfNominalType( char c)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"isStartOfEntity( char c)",13, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"nominalTypeMarkerToNodeKind( char c)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::NameSource( StringRef text)",1, 45, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::hasAtLeast( size_t len)",1, 63, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::isEmpty()",1, 42, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::operator bool()",1, 50, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::peek()",8, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::next()",6, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::nextIf( char c)",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::nextIf( StringRef str)",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::slice( size_t len)",1, 62, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::str()",1, 35, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::advanceOffset( size_t len)",3, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::getString()",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"NameSource::readUntil( char c , std :: string & result)",8, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::OldDemangler( llvm :: StringRef mangled , NodeFactory & Factory)",2, 44, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleTopLevel()",43, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleTypeName()",3, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::addChild( NodePointer Parent , NodePointer Child)",3, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleDirectness()",7, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleNatural( Node :: IndexType & num)",20, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleBuiltinSize( Node :: IndexType & num)",7, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleValueWitnessKind()",16, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleGlobal()",174, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleGenericSpecialization( NodePointer specialization)",18, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleFuncSigSpecializationConstantProp( NodePointer parent)",71, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleFuncSigSpecializationClosureProp( NodePointer parent)",24, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleFunctionSignatureSpecialization( NodePointer specialization)",70, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleSpecializedAttribute()",41, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleDeclName()",31, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleIdentifier( Optional<Node::Kind> kind = None)",79, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleIndex( Node :: IndexType & natural)",13, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleIndexAsNode( Node :: Kind kind = Node :: Kind :: Number)",6, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::createSwiftType( Node :: Kind typeKind , StringRef name)",6, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleSubstitutionIndex()",47, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleModule()",18, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleDeclarationName( Node :: Kind kind)",13, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleProtocolName()",8, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleProtocolNameGivenContext( NodePointer context)",10, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleProtocolNameImpl()",25, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleNominalType()",13, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleBoundGenericArgs( NodePointer nominalType)",62, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleBoundGenericType()",11, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleContext()",43, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleProtocolList()",12, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleProtocolConformance()",17, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleEntity()",214, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::getDependentGenericParamType( unsigned depth , unsigned index)",11, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleGenericParamIndex()",20, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleDependentMemberTypeName( NodePointer base)",34, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleAssociatedTypeSimple()",12, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleAssociatedTypeCompound()",18, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleDependentType()",15, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleConstrainedTypeImpl()",11, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleConstrainedType()",9, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleGenericSignature( bool isPseudogeneric = false)",46, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleMetatypeRepresentation()",14, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleGenericRequirement()",118, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleArchetypeType()",27, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleTuple( IsVariadic isV)",30, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::postProcessReturnTypeNode( NodePointer out_args)",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleType()",8, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleFunctionType( Node :: Kind kind)",24, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleTypeImpl()",304, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleReabstractSignature( NodePointer signature)",17, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleImplFunctionType()",46, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleImplConvention( ImplConventionContext ctxt)",22, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleImplCalleeConvention( NodePointer type)",13, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::addImplFunctionAttribute( NodePointer parent , StringRef attr , Node :: Kind kind = Node :: Kind :: ImplFunctionAttribute)",4, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleImplParameters( NodePointer parent)",8, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleImplResults( NodePointer parent)",8, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"OldDemangler::demangleImplParameterOrResult( Node :: Kind kind)",30, 4, 2, 0
repos/cpp/swift/lib/Demangling/OldDemangler.cpp,"swift::Demangle::demangleOldSymbolAsNode( StringRef MangledName , NodeFactory & Factory)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"digit_value( int digit)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"digit_index( char value)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"isValidUnicodeScalar( uint32_t S)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"adapt( int delta , int numpoints , bool firsttime)",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"Punycode::decodePunycode( StringRef InputPunycode , std :: vector<uint32_t> & OutCodePoints)",61, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"Punycode::encodePunycode( const std :: vector<uint32_t> & InputCodePoints , std :: string & OutPunycode)",59, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"encodeToUTF8( const std :: vector<uint32_t> & Scalars , std :: string & OutUTF8)",61, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"Punycode::decodePunycodeUTF8( StringRef InputPunycode , std :: string & OutUTF8)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"isContinuationByte( uint8_t unit)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"convertUTF8toUTF32( llvm :: StringRef InputUTF8 , std :: vector<uint32_t> & OutUTF32 , bool mapNonSymbolChars)",54, 2, 0, 0
repos/cpp/swift/lib/Demangling/Punycode.cpp,"Punycode::encodePunycodeUTF8( StringRef InputUTF8 , std :: string & OutPunycode , bool mapNonSymbolChars)",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/ManglingUtils.cpp,"Mangle::isNonAscii( StringRef str)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/ManglingUtils.cpp,"Mangle::needsPunycodeEncoding( StringRef str)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/ManglingUtils.cpp,"Mangle::translateOperatorChar( char op)",22, 2, 0, 0
repos/cpp/swift/lib/Demangling/ManglingUtils.cpp,"Mangle::translateOperator( StringRef Op)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/ManglingUtils.cpp,"Mangle::getStandardTypeSubst( StringRef TypeName)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/TypeDecoder.cpp,"Demangle::stripGenericArgsFromContextNode( NodePointer node , NodeFactory & factory)",62, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"unreachable( const char * Message)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"SubstitutionEntry::setNode( Node * node , bool treatAsIdentifier)",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"SubstitutionEntry::Hasher::operator ( )( const SubstitutionEntry & entry) const",3, 6, 4, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"SubstitutionEntry::operator ==( const SubstitutionEntry & lhs , const SubstitutionEntry & rhs)",10, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"SubstitutionEntry::combineHash( size_t newValue)",3, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"SubstitutionEntry::combineHash( StringRef Text)",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"SubstitutionEntry::deepHash( Node * node)",16, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"SubstitutionEntry::deepEquals( Node * lhs , Node * rhs) const",28, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::getBufferStr() const",1, 67, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::resetBuffer( size_t toPos)",1, 62, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::EntityContext::ManglingContextRAII::ManglingContextRAII( EntityContext & ctx)",4, 8, 6, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::EntityContext::ManglingContextRAII::~ManglingContextRAII()",3, 8, 6, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::getSingleChild( Node * node)",4, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::getSingleChild( Node * node , Node :: Kind kind)",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::skipType( Node * node)",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::getChildOfType( Node * node)",4, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleIndex( Node :: IndexType value)",7, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleChildNodes( Node * node)",3, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleChildNodesReversed( Node * node)",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleListSeparator( bool & isFirstListItem)",6, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleEndOfList( bool isFirstListItem)",4, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleNodes( Node :: iterator i , Node :: iterator e)",5, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSingleChildNode( Node * node)",4, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleChildNode( Node * node , unsigned index)",4, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::manglePureProtocol( Node * Proto)",7, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFunctionSignature( Node * FuncType)",3, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::Remangler( DemanglerPrinter & Buffer , SymbolicResolver Resolver)",2, 79, 12, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangle( Node * node)",7, 4, 2, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::trySubstitution( Node * node , SubstitutionEntry & entry , bool treatAsIdentifier)",24, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::addSubstitution( const SubstitutionEntry & entry)",15, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleIdentifierImpl( Node * node , bool isOperator)",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleStandardSubstitution( Node * node)",23, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentGenericParamIndex( Node * node , const char * nonZeroPrefix , char zeroOp)",20, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleConstrainedType( Node * node)",26, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAnyGenericType( Node * node , StringRef TypeOp)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAnyNominalType( Node * node)",33, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericArgs( Node * node , char & Separator)",62, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAbstractStorage( Node * node , StringRef accessorCode)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAllocator( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleArgumentTuple( Node * node)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAssociatedType( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAssociatedTypeRef( Node * node)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAssociatedTypeDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAssociatedConformanceDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDefaultAssociatedConformanceAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBaseConformanceDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAssociatedTypeMetadataAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDefaultAssociatedTypeMetadataAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAssociatedTypeWitnessTableAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBaseWitnessTableAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAutoClosureType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleEscapingAutoClosureType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleNoEscapeFunctionType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBoundGenericClass( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBoundGenericEnum( Node * node)",17, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBoundGenericStructure( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBoundGenericOtherNominalType( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBoundGenericProtocol( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBoundGenericTypeAlias( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBoundGenericFunction( Node * node)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleBuiltinTypeName( Node * node)",43, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleCFunctionPointer( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleClass( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAnyConstructor( Node * node , char kindOp)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleConstructor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleCoroutineContinuationPrototype( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDeallocator( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDeclContext( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDefaultArgumentInitializer( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentAssociatedTypeRef( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentGenericConformanceRequirement( Node * node)",25, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentGenericParamCount( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentGenericParamType( Node * node)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentGenericSameTypeRequirement( Node * node)",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentGenericLayoutRequirement( Node * node)",19, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentGenericSignature( Node * node)",29, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentGenericType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentMemberType( Node * node)",17, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentPseudogenericSignature( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDestructor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDidSet( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDirectness( Node * node)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDynamicAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDirectMethodReferenceAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDynamicSelf( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleEnum( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleErrorType( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleExistentialMetatype( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleExplicitClosure( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleExtension( Node * node)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAnonymousContext( Node * node)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFieldOffset( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleEnumCase( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFullTypeMetadata( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFunction( Node * node)",19, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFunctionSignatureSpecialization( Node * node)",51, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFunctionSignatureSpecializationParam( Node * node)",86, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFunctionSignatureSpecializationParamKind( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFunctionSignatureSpecializationParamPayload( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFunctionType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericProtocolWitnessTable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericProtocolWitnessTableInstantiationFunction( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleResilientProtocolWitnessTable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericPartialSpecialization( Node * node)",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericPartialSpecializationNotReAbstracted( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericSpecialization( Node * node)",29, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericSpecializationNotReAbstracted( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleInlinedGenericFunction( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericSpecializationParam( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericTypeMetadataPattern( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGenericTypeParamDecl( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGetter( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGlobal( Node * node)",39, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleGlobalGetter( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleIdentifier( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleIndex( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleIVarInitializer( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleIVarDestroyer( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleImplEscaping( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleImplConvention( Node * node)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleImplFunctionAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleImplFunctionType( Node * node)",91, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleImplicitClosure( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleImplParameter( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleImplResult( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleImplErrorResult( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleInOut( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleShared( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOwned( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleInfixOperator( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleInitializer( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleLazyProtocolWitnessTableAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleLazyProtocolWitnessTableCacheVariable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleLocalDeclName( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleMaterializeForSet( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleMetatype( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleMetatypeRepresentation( Node * node)",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleMetaclass( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleModifyAccessor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleModule( Node * node)",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleNativeOwningAddressor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleNativeOwningMutableAddressor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleNativePinningAddressor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleNativePinningMutableAddressor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleClassMetadataBaseOffset( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleNominalTypeDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::manglePropertyDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleNonObjCAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTuple( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleNumber( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleObjCAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleObjCBlock( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOwningAddressor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOwningMutableAddressor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::manglePartialApplyForwarder( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::manglePartialApplyObjCForwarder( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleMergedFunction( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDynamicallyReplaceableFunctionImpl( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDynamicallyReplaceableFunctionKey( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDynamicallyReplaceableFunctionVar( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::manglePostfixOperator( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::manglePrefixOperator( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::manglePrivateDeclName( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocol( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleRetroactiveConformance( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolConformance( Node * node)",15, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolConformanceRef( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleConcreteProtocolConformance( Node * node)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentProtocolConformanceRoot( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentProtocolConformanceInherited( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentAssociatedConformance( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDependentProtocolConformanceAssociated( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAnyProtocolConformance( Node * node)",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAnyProtocolConformanceList( Node * node)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolRequirementsBaseDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolSelfConformanceDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolConformanceDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolList( Node * node , Node * superclass , bool hasExplicitAnyObject)",19, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolList( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolListWithClass( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolListWithAnyObject( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolSelfConformanceWitness( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolWitness( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolSelfConformanceWitnessTable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolWitnessTable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolWitnessTablePattern( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolWitnessTableAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleReabstractionThunk( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleReabstractionThunkHelper( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleReadAccessor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleKeyPathThunkHelper( Node * node , StringRef op)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleKeyPathGetterThunkHelper( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleKeyPathSetterThunkHelper( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleKeyPathEqualsThunkHelper( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleKeyPathHashThunkHelper( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleReturnType( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleRelatedEntityDeclName( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSILBoxType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSetter( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSpecializationPassID( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleIsSerialized( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleStatic( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOtherNominalType( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleStructure( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSubscript( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSuffix( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleThinFunctionType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTupleElement( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTupleElementName( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleType( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeAlias( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeList( Node * node)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleLabelList( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeMangling( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeMetadata( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeMetadataAccessFunction( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeMetadataInstantiationCache( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeMetadataInstantiationFunction( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeMetadataSingletonInitializationCache( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeMetadataCompletionFunction( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeMetadataLazyCache( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleUncurriedFunctionType( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleUnsafeAddressor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleUnsafeMutableAddressor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleValueWitness( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleValueWitnessTable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleVariable( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleVTableAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleVTableThunk( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleWillSet( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleReflectionMetadataBuiltinDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleReflectionMetadataFieldDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleReflectionMetadataAssocTypeDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleReflectionMetadataSuperclassDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleCurryThunk( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleDispatchThunk( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleMethodDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleMethodLookupFunction( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleObjCMetadataUpdateFunction( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleThrowsAnnotation( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleEmptyList( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleFirstElementMarker( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleVariadicMarker( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedCopy( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedConsume( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedRetain( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedRelease( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedInitializeWithTake( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedInitializeWithCopy( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedAssignWithTake( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedAssignWithCopy( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedDestroy( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedVariable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleOutlinedBridgedMethod( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSILBoxTypeWithLayout( Node * node)",35, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSILBoxLayout( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSILBoxMutableField( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleSILBoxImmutableField( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAssocTypePath( Node * node)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleModuleDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleExtensionDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAnonymousDescriptor( Node * node)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleAssociatedTypeGenericParamRef( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleTypeSymbolicReference( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Remangler::mangleProtocolSymbolicReference( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Demangle::mangleNode( const NodePointer & node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Demangle::mangleNode( const NodePointer & node , SymbolicResolver resolver)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Demangle::isSpecialized( Node * node)",37, 2, 0, 0
repos/cpp/swift/lib/Demangling/Remangler.cpp,"Demangle::getUnspecialized( Node * node , NodeFactory & Factory)",72, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodeDumper.cpp,"Demangle::getNodeKindString( swift :: Demangle :: Node :: Kind k)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodeDumper.cpp,"printNode( DemanglerPrinter & Out , const Node * node , unsigned depth)",21, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodeDumper.cpp,"Demangle::getNodeTreeAsString( NodePointer Root)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodeDumper.cpp,"swift::Demangle::Node::dump()",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodeDumper.cpp,"Demangler::dump()",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"unreachable( const char * Message)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"mangleOperatorChar( char op)",22, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"isNonAscii( StringRef str)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"mangleOperatorKind( OperatorKind operatorKind)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"mangleIdentifier( StringRef ident , OperatorKind operatorKind , bool usePunycode , DemanglerPrinter & out)",37, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Demangle::mangleIdentifier( const char * data , size_t length , OperatorKind operatorKind , std :: string & out , bool usePunycode)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"DeepHasher::combine( size_t newValue)",3, 6, 4, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"DeepHasher::hash( Node * node)",14, 6, 4, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"deepHash( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"deepEquals( Node * lhs , Node * rhs)",28, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"SubstitutionEntry::Hasher::operator ( )( const SubstitutionEntry & entry) const",3, 8, 6, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"SubstitutionEntry::operator ==( const SubstitutionEntry & lhs , const SubstitutionEntry & rhs)",5, 6, 4, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::Remangler( DemanglerPrinter & out)",1, 51, 4, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::EntityContext::isAsContext() const",3, 8, 6, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::EntityContext::setAnonymousContextDiscriminator( StringRef discriminator)",3, 8, 6, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::EntityContext::takeAnonymousContextDiscriminator()",5, 8, 6, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::EntityContext::ManglingContextRAII::ManglingContextRAII( EntityContext & ctx)",4, 10, 8, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::EntityContext::ManglingContextRAII::~ManglingContextRAII()",3, 10, 8, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangle( Node * node)",7, 6, 4, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleChildNodes( Node * node)",1, 83, 4, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNodes( Node :: iterator i , Node :: iterator e)",5, 6, 4, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSingleChildNode( Node * node)",4, 6, 4, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleChildNode( Node * node , unsigned index)",4, 6, 4, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"applyParamLabels( NodePointer LabelList , NodePointer OrigType , NodeFactory & Factory)",61, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::resetSubstitutions()",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::trySubstitution( Node * node , SubstitutionEntry & entry)",16, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"isInSwiftModule( Node * node)",7, 3, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleStandardSubstitution( Node * node)",54, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::addSubstitution( const SubstitutionEntry & entry)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleIdentifier( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::manglePrefixOperator( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::manglePostfixOperator( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleInfixOperator( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleIdentifier( StringRef ident , OperatorKind operatorKind)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNumber( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleIndex( Node :: IndexType value)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGlobal( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSuffix( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericSpecialization( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericSpecializationNotReAbstracted( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleInlinedGenericFunction( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericPartialSpecialization( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericPartialSpecializationNotReAbstracted( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericSpecializationParam( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleFunctionSignatureSpecialization( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSpecializationPassID( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleIsSerialized( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleFunctionSignatureSpecializationParam( Node * node)",73, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleFunctionSignatureSpecializationParamPayload( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleFunctionSignatureSpecializationParamKind( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleRetroactiveConformance( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolConformanceRef( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleConcreteProtocolConformance( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAnyProtocolConformanceList( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentAssociatedConformance( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentProtocolConformanceRoot( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentProtocolConformanceInherited( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentProtocolConformanceAssociated( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolConformance( Node * node)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleObjCAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNonObjCAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDirectMethodReferenceAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDynamicAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleVTableAttribute( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericTypeMetadataPattern( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeMetadataAccessFunction( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeMetadataInstantiationCache( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeMetadataInstantiationFunction( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeMetadataSingletonInitializationCache( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeMetadataCompletionFunction( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeMetadataLazyCache( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleMetaclass( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleClassMetadataBaseOffset( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNominalTypeDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::manglePropertyDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeMetadata( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleFullTypeMetadata( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolRequirementsBaseDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolWitnessTablePattern( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolConformanceDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolSelfConformanceDescriptor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::manglePartialApplyForwarder( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::manglePartialApplyObjCForwarder( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleMergedFunction( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDynamicallyReplaceableFunctionImpl( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDynamicallyReplaceableFunctionKey( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDynamicallyReplaceableFunctionVar( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDirectness( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleValueWitness( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleValueWitnessTable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleThrowsAnnotation( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleFieldOffset( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleEnumCase( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolSelfConformanceWitnessTable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolWitnessTable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericProtocolWitnessTable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleResilientProtocolWitnessTable( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericProtocolWitnessTableInstantiationFunction( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolWitnessTableAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleLazyProtocolWitnessTableAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleLazyProtocolWitnessTableCacheVariable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAssociatedTypeDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAssociatedConformanceDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDefaultAssociatedConformanceAccessor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBaseConformanceDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAssociatedTypeMetadataAccessor( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDefaultAssociatedTypeMetadataAccessor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAssociatedTypeWitnessTableAccessor( Node * node)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBaseWitnessTableAccessor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleReabstractionThunkHelper( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleReabstractionThunk( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolSelfConformanceWitness( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolWitness( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleFunction( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleVariable( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSubscript( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAccessor( Node * storageNode , StringRef accessorCode , EntityContext & ctx)",39, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleInitializer( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDefaultArgumentInitializer( Node * node , EntityContext & ctx)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDeallocator( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDestructor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAllocator( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleConstructor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleIVarInitializer( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleIVarDestroyer( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGetter( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGlobalGetter( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSetter( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleMaterializeForSet( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleWillSet( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDidSet( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOwningMutableAddressor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNativeOwningMutableAddressor( Node * node , EntityContext & ctx)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNativePinningMutableAddressor( Node * node , EntityContext & ctx)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleUnsafeMutableAddressor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOwningAddressor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNativeOwningAddressor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNativePinningAddressor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleUnsafeAddressor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleReadAccessor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleModifyAccessor( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleExplicitClosure( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleImplicitClosure( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleStatic( Node * node , EntityContext & ctx)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSimpleEntity( Node * node , char basicKind , StringRef entityKind , EntityContext & ctx)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNamedEntity( Node * node , char basicKind , StringRef entityKind , EntityContext & ctx , StringRef artificialPrivateDiscriminator)",27, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypedEntity( Node * node , char basicKind , StringRef entityKind , EntityContext & ctx)",16, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNamedAndTypedEntity( Node * node , char basicKind , StringRef entityKind , EntityContext & ctx)",17, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleEntityContext( Node * node , EntityContext & ctx)",33, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleEntityType( Node * node , EntityContext & ctx)",29, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleLocalDeclName( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::manglePrivateDeclName( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleRelatedEntityDeclName( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeMangling( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleType( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"stripPrefix( StringRef & string , const char(&data) [ N ])",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBuiltinTypeName( Node * node)",39, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeAlias( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleFunctionType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleUncurriedFunctionType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleObjCBlock( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleCFunctionPointer( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAutoClosureType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNoEscapeFunctionType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleEscapingAutoClosureType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleThinFunctionType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleArgumentTuple( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleReturnType( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleImplFunctionType( Node * node)",38, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleImplFunctionAttribute( Node * node)",16, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleImplParameter( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleImplErrorResult( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleImplResult( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleImplEscaping( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleImplConvention( Node * node)",25, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDynamicSelf( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleErrorType( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSILBoxType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleMetatype( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleExistentialMetatype( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleMetatypeRepresentation( Node * node)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolList( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolListWithoutPrefix( Node * node , Node * additionalProto)",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleShared( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOwned( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleInOut( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTuple( Node * node)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTupleElement( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTupleElementName( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentGenericType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentPseudogenericSignature( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentGenericSignature( Node * node)",34, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentGenericParamCount( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentGenericConformanceRequirement( Node * node)",13, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentGenericSameTypeRequirement( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentGenericLayoutRequirement( Node * node)",19, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleConstrainedType( Node * node)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAssociatedType( Node * node)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDeclContext( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleExtension( Node * node , EntityContext & ctx)",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAnonymousContext( Node * node , EntityContext & ctx)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleModule( Node * node , EntityContext & ctx)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAssociatedTypeRef( Node * node)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentMemberType( Node * node)",27, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentAssociatedTypeRef( Node * node)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentGenericParamIndex( Node * node)",18, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDependentGenericParamType( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleIndex( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocol( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolWithoutPrefix( Node * node)",13, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericArgs( Node * node , EntityContext & ctx)",35, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAnyNominalType( Node * node , EntityContext & ctx)",35, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleStructure( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleEnum( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleClass( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOtherNominalType( Node * node , EntityContext & ctx)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleNominalType( Node * node , char kind , EntityContext & ctx , StringRef artificialPrivateDiscriminator)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBoundGenericClass( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBoundGenericStructure( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBoundGenericEnum( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBoundGenericOtherNominalType( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBoundGenericProtocol( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBoundGenericTypeAlias( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleBoundGenericFunction( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeList( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleLabelList( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleReflectionMetadataBuiltinDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleReflectionMetadataFieldDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleReflectionMetadataAssocTypeDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleReflectionMetadataSuperclassDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleGenericTypeParamDecl( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleCurryThunk( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleDispatchThunk( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleMethodDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleMethodLookupFunction( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleObjCMetadataUpdateFunction( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleEmptyList( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleFirstElementMarker( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleVariadicMarker( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedCopy( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedConsume( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedRetain( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedRelease( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedInitializeWithTake( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedInitializeWithCopy( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedAssignWithTake( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedAssignWithCopy( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedDestroy( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedVariable( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleOutlinedBridgedMethod( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleCoroutineContinuationPrototype( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleKeyPathGetterThunkHelper( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleKeyPathSetterThunkHelper( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleKeyPathEqualsThunkHelper( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleKeyPathHashThunkHelper( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolListWithClass( Node * node)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolListWithAnyObject( Node * node)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleVTableThunk( Node * node)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSILBoxTypeWithLayout( Node * node)",26, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSILBoxLayout( Node * node)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSILBoxMutableField( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleSILBoxImmutableField( Node * node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAssocTypePath( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleModuleDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleExtensionDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAnonymousDescriptor( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleAssociatedTypeGenericParamRef( Node * node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleTypeSymbolicReference( Node * node , EntityContext &)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Remangler::mangleProtocolSymbolicReference( Node * node , EntityContext &)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/OldRemangler.cpp,"Demangle::mangleNodeOld( const NodePointer & node)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"printer_unreachable( const char * Message)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"DemanglerPrinter::operator < <( unsigned long long n) &",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"DemanglerPrinter::writeHex( unsigned long long n) &",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"DemanglerPrinter::operator < <( long long n) &",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"Demangle::archetypeName( Node :: IndexType index , Node :: IndexType depth)",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"QuotedString::QuotedString( std :: string Value)",1, 61, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"operator < <( DemanglerPrinter & printer , const QuotedString & QS)",30, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"toString( Directness d)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"toString( ValueWitnessKind k)",53, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::NodePrinter( DemangleOptions options)",1, 61, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printRoot( NodePointer root)",7, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::setInvalid()",1, 41, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printChildren( Node :: iterator begin , Node :: iterator end , const char * sep = nullptr)",10, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printChildren( NodePointer Node , const char * sep = nullptr)",6, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::getFirstChildOfKind( NodePointer Node , Node :: Kind kind)",9, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printBoundGenericNoSugar( NodePointer Node)",9, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::isSwiftModule( NodePointer node)",4, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printContext( NodePointer Context)",10, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::isIdentifier( NodePointer node , StringRef desired)",4, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::isSimpleType( NodePointer Node)",239, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::findSugar( NodePointer Node)",52, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printBoundGeneric( NodePointer Node)",62, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::getChildIf( NodePointer Node , Node :: Kind Kind)",7, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printFunctionParameters( NodePointer LabelList , NodePointer ParameterType , bool showTypes)",59, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printFunctionType( NodePointer LabelList , NodePointer node)",20, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printImplFunctionType( NodePointer fn)",33, 4, 2, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"isExistentialType( NodePointer node)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printFunctionSigSpecializationParam( NodePointer Node , unsigned Idx)",78, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printSpecializationPrefix( NodePointer node , StringRef Description , StringRef ParamPrefix)",37, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"isClassType( NodePointer Node)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"needSpaceBeforeType( NodePointer Type)",13, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::print( NodePointer Node , bool asPrefixContext)",1245, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printAbstractStorage( NodePointer Node , bool asPrefixContent , StringRef ExtraName)",15, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printEntity( NodePointer Entity , bool asPrefixContext , TypePrinting TypePr , bool hasName , StringRef ExtraName , int ExtraIndex , StringRef OverwriteName)",115, 3, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"NodePrinter::printEntityType( NodePointer Entity , NodePointer type , NodePointer genericFunctionTypeList)",23, 2, 0, 0
repos/cpp/swift/lib/Demangling/NodePrinter.cpp,"Demangle::nodeToString( NodePointer root , const DemangleOptions & options)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isDeclName( Node :: Kind kind)",16, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isContext( Node :: Kind kind)",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isAnyGeneric( Node :: Kind kind)",15, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isEntity( Node :: Kind kind)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isRequirement( Node :: Kind kind)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isFunctionAttr( Node :: Kind kind)",26, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::makeSymbolicMangledNameStringRef( const char * base)",15, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::getManglingPrefixLength( llvm :: StringRef mangledName)",16, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::isSwiftSymbol( llvm :: StringRef mangledName)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::isSwiftSymbol( const char * mangledName)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::isObjCSymbol( llvm :: StringRef mangledName)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::isOldFunctionTypeMangling( llvm :: StringRef mangledName)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::dropSwiftManglingPrefix( StringRef mangledName)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isAliasNode( Demangle :: NodePointer Node)",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::isAlias( llvm :: StringRef mangledName)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isClassNode( Demangle :: NodePointer Node)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::isClass( llvm :: StringRef mangledName)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isEnumNode( Demangle :: NodePointer Node)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::isEnum( llvm :: StringRef mangledName)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isProtocolNode( Demangle :: NodePointer Node)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::isProtocol( llvm :: StringRef mangledName)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"isStructNode( Demangle :: NodePointer Node)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"swift::Demangle::isStruct( llvm :: StringRef mangledName)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Node::addChild( NodePointer Child , NodeFactory & Factory)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Node::removeChildAt( unsigned Pos , swift :: Demangle :: NodeFactory & factory)",16, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Node::reverseChildren( size_t StartingAt)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"NodeFactory::freeSlabs( Slab * slab)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"NodeFactory::clear()",15, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"NodeFactory::createNode( Node :: Kind K)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"NodeFactory::createNode( Node :: Kind K , Node :: IndexType Index)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"NodeFactory::createNodeWithAllocatedText( Node :: Kind K , llvm :: StringRef Text)",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"NodeFactory::createNode( Node :: Kind K , const CharVector & Text)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"NodeFactory::createNode( Node :: Kind K , const char * Text)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"CharVector::append( StringRef Rhs , NodeFactory & Factory)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"CharVector::append( int Number , NodeFactory & Factory)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::clear()",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::init( StringRef MangledName)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleSymbol( StringRef MangledName)",44, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleType( StringRef MangledName)",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::parseAndPushNodes()",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::addChild( NodePointer Parent , NodePointer Child)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::createWithChild( Node :: Kind kind , NodePointer Child)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::createType( NodePointer Child)",3, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::Demangler::createWithChildren( Node :: Kind kind , NodePointer Child1 , NodePointer Child2)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::createWithChildren( Node :: Kind kind , NodePointer Child1 , NodePointer Child2 , NodePointer Child3)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::createWithChildren( Node :: Kind kind , NodePointer Child1 , NodePointer Child2 , NodePointer Child3 , NodePointer Child4)",13, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::changeKind( NodePointer Node , Node :: Kind NewKind)",16, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleTypeMangling()",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleSymbolicReference( unsigned char rawKind , const void * at)",38, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleOperator()",80, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleNatural()",15, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleIndex()",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleIndexAsNode()",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleMultiSubstitutions()",40, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::pushMultiSubstitutions( int RepeatCount , size_t SubstIdx)",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::createSwiftType( Node :: Kind typeKind , const char * name)",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleStandardSubstitution()",29, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::createStandardSubstitution( char Subst)",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleIdentifier()",74, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleOperatorIdentifier()",28, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleLocalIdentifier()",22, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popModule()",5, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popContext()",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popTypeAndGetChild()",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popTypeAndGetAnyGeneric()",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleBuiltinType()",76, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleAnyGenericType( Node :: Kind kind)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleExtensionContext()",9, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demanglePlainFunction()",18, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popFunctionType( Node :: Kind kind)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popFunctionParams( Node :: Kind kind)",22, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popFunctionParamLabels( NodePointer Type)",84, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popTuple()",25, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popTypeList()",17, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popProtocol()",20, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popAnyProtocolConformanceList()",17, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popAnyProtocolConformance()",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popProtocolConformanceRef()",12, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleConcreteProtocolConformance()",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popDependentProtocolConformance()",13, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleDependentProtocolConformanceRoot()",19, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleDependentProtocolConformanceInherited()",20, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popDependentAssociatedConformance()",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleDependentProtocolConformanceAssociated()",21, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleRetroactiveConformance()",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleBoundGenericType()",32, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleBoundGenericArgs( NodePointer Nominal , const Vector<NodePointer> & TypeLists , size_t TypeListIdx)",117, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleImplParamConvention()",21, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleImplResultConvention( Node :: Kind ConvKind)",15, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleImplFunctionType()",66, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleMetatype()",62, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demanglePrivateContextDescriptor()",47, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleArchetype()",34, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleAssociatedTypeSimple( NodePointer GenericParamIdx)",7, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleAssociatedTypeCompound( NodePointer GenericParamIdx)",21, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popAssocTypeName()",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popAssocTypePath()",13, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::getDependentGenericParamType( int depth , int index)",18, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleGenericParamIndex()",11, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::popProtocolConformance()",20, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleThunkOrSpecialization()",201, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleBridgedMethodParams()",22, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleGenericSpecialization( Node :: Kind SpecKind)",13, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleFunctionSpecialization()",58, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleFuncSpecParam( Node :: IndexType ParamIdx)",123, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::addFuncSpecParamNumber( NodePointer Param , FunctionSigSpecializationParamKind Kind)",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleSpecAttributes( Node :: Kind SpecKind)",16, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleWitness()",147, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleSpecialType()",116, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleMetatypeRepresentation()",13, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleAccessor( NodePointer ChildNode)",36, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleFunctionEntity()",62, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleEntity( Node :: Kind Kind)",8, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleVariable()",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleSubscript()",14, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleProtocolList()",17, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleProtocolListType()",4, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleGenericSignature( bool hasParamCounts)",23, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleGenericRequirement()",111, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleGenericType()",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"decodeValueWitnessKind( StringRef CodeStr)",6, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleValueWitness()",10, 2, 0, 0
repos/cpp/swift/lib/Demangling/Demangler.cpp,"Demangler::demangleObjCTypeName()",41, 2, 0, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"ConvertForWcharSize<2>::ConvertFromUTF8( const char ** sourceStart , const char * sourceEnd , wchar_t ** targetStart , wchar_t * targetEnd , llvm :: ConversionFlags flags)",11, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"ConvertForWcharSize<2>::ConvertToUTF8( const wchar_t ** sourceStart , const wchar_t * sourceEnd , char ** targetStart , char * targetEnd , llvm :: ConversionFlags flags)",12, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"ConvertForWcharSize<4>::ConvertFromUTF8( const char ** sourceStart , const char * sourceEnd , wchar_t ** targetStart , wchar_t * targetEnd , llvm :: ConversionFlags flags)",11, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"ConvertForWcharSize<4>::ConvertToUTF8( const wchar_t ** sourceStart , const wchar_t * sourceEnd , char ** targetStart , char * targetEnd , llvm :: ConversionFlags flags)",12, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"convertFromUTF8( llvm :: StringRef utf8 , llvm :: SmallVectorImpl<wchar_t> & out)",13, 2, 0, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"convertToUTF8( llvm :: ArrayRef<wchar_t> wide , llvm :: SmallVectorImpl<char> & out)",13, 2, 0, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"typeCheckREPLInput( ModuleDecl * MostRecentModule , StringRef Name , PersistentParserState & PersistentState , std :: unique_ptr<llvm::MemoryBuffer> Buffer)",42, 2, 0, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"appendEscapeSequence( SmallVectorImpl<wchar_t> & dest , llvm :: StringRef src)",7, 2, 0, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"PrettyStackTraceREPL::PrettyStackTraceREPL( REPLInput & Input)",1, 59, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::REPLInput( REPLEnvironment & env)",51, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::~REPLInput()",12, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::getREPLInput( SmallVectorImpl<char> & Result)",93, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::PromptFn( EditLine * e)",5, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::getPrompt()",30, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::GetCharFn( EditLine * e , wchar_t * out)",21, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::BindingFn( EditLine * e , int ch)",5, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::isAtStartOfLine( const LineInfoW * line)",8, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::lineLooksLikeLabel( const LineInfoW * line)",17, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::lineLooksLikeSetter( const LineInfoW * line)",26, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::lineLooksLikeCase( const LineInfoW * line)",16, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::outdent()",8, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::onColon( int ch)",19, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::onCloseBrace( int ch)",15, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::onIndentOrComplete( int ch)",17, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::insertStringRef( StringRef s)",9, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::displayCompletions( llvm :: ArrayRef<llvm::StringRef> list)",28, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::onComplete( int ch)",53, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"printOrDumpDecl( Decl * d , PrintOrDump which)",7, 2, 0, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLEnvironment::stripPreviouslyGenerated( llvm :: Module & M)",93, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLEnvironment::executeSwiftSource( llvm :: StringRef Line , const ProcessCmdLine & CmdLine)",88, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLEnvironment::REPLEnvironment( CompilerInstance & CI , const ProcessCmdLine & CmdLine , llvm :: LLVMContext & LLVMCtx , bool ParseStdlib)",80, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLEnvironment::getDumpSource() const",1, 57, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLEnvironment::getInput()",1, 42, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLEnvironment::getFileForCodeCompletion()",3, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLEnvironment::handleREPLInput( REPLInputKind inputKind , llvm :: StringRef Line)",153, 4, 2, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"REPLInput::getFileForCodeCompletion()",3, 2, 0, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"PrettyStackTraceREPL::print( llvm :: raw_ostream & out) const",6, 2, 0, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"swift::runREPL( CompilerInstance & CI , const ProcessCmdLine & CmdLine , bool ParseStdlib)",12, 2, 0, 0
repos/cpp/swift/lib/Immediate/REPL.cpp,"swift::runREPL( CompilerInstance & CI , const ProcessCmdLine & CmdLine , bool ParseStdlib)",8, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"loadRuntimeLib( StringRef runtimeLibPathWithName)",7, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"loadRuntimeLib( StringRef sharedLibName , StringRef runtimeLibPath)",6, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"swift::immediate::loadSwiftRuntime( StringRef runtimeLibPath)",3, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"tryLoadLibrary( LinkLibrary linkLib , SearchPathOptions searchPathOpts)",66, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"swift::immediate::tryLoadLibraries( ArrayRef<LinkLibrary> LinkLibraries , SearchPathOptions SearchPathOpts , DiagnosticEngine & Diags)",24, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"linkerDiagnosticHandlerNoCtx( const llvm :: DiagnosticInfo & DI)",13, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"linkerDiagnosticHandler( const llvm :: DiagnosticInfo & DI , void * Context)",9, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"swift::immediate::linkLLVMModules( llvm :: Module * Module , std :: unique_ptr<llvm::Module> SubModule)",15, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"swift::immediate::autolinkImportedModules( ModuleDecl * M , IRGenOptions & IRGenOpts)",14, 2, 0, 0
repos/cpp/swift/lib/Immediate/Immediate.cpp,"swift::RunImmediately( CompilerInstance & CI , const ProcessCmdLine & CmdLine , IRGenOptions & IRGenOpts , const SILOptions & SILOpts)",98, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"setToMask( SpareBitVector & bits , unsigned size , uint64_t mask)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"configureARM64( IRGenModule & IGM , const llvm :: Triple & triple , SwiftTargetInfo & target)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"configureX86_64( IRGenModule & IGM , const llvm :: Triple & triple , SwiftTargetInfo & target)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"configureX86( IRGenModule & IGM , const llvm :: Triple & triple , SwiftTargetInfo & target)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"configureARM( IRGenModule & IGM , const llvm :: Triple & triple , SwiftTargetInfo & target)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"configurePowerPC64( IRGenModule & IGM , const llvm :: Triple & triple , SwiftTargetInfo & target)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"configureSystemZ( IRGenModule & IGM , const llvm :: Triple & triple , SwiftTargetInfo & target)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"SwiftTargetInfo::SwiftTargetInfo( llvm :: Triple :: ObjectFormatType outputObjectFormat , unsigned numPointerBits)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"SwiftTargetInfo::get( IRGenModule & IGM)",48, 2, 0, 0
repos/cpp/swift/lib/IRGen/SwiftTargetInfo.cpp,"SwiftTargetInfo::hasObjCTaggedPointers() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"OutliningMetadataCollector::collectTypeMetadataForLayout( SILType type)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"OutliningMetadataCollector::collectFormalTypeMetadata( CanType type)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"OutliningMetadataCollector::addMetadataArguments( SmallVectorImpl<llvm::Value*> & args) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"OutliningMetadataCollector::addMetadataParameterTypes( SmallVectorImpl<llvm::Type*> & paramTys) const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"OutliningMetadataCollector::bindMetadataParameters( IRGenFunction & IGF , Explosion & params) const",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"irgen::getTypeAndGenericSignatureForManglingOutlineFunction( SILType type)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"TypeInfo::callOutlinedCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , IsInitialization_t isInit , IsTake_t isTake) const",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"OutliningMetadataCollector::emitCallToOutlinedCopy( Address dest , Address src , SILType T , const TypeInfo & ti , IsInitialization_t isInit , IsTake_t isTake) const",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"IRGenModule::getOrCreateOutlinedInitializeWithTakeFunction( SILType T , const TypeInfo & ti , const OutliningMetadataCollector & collector)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"IRGenModule::getOrCreateOutlinedInitializeWithCopyFunction( SILType T , const TypeInfo & ti , const OutliningMetadataCollector & collector)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"IRGenModule::getOrCreateOutlinedAssignWithTakeFunction( SILType T , const TypeInfo & ti , const OutliningMetadataCollector & collector)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"IRGenModule::getOrCreateOutlinedAssignWithCopyFunction( SILType T , const TypeInfo & ti , const OutliningMetadataCollector & collector)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"IRGenModule::getOrCreateOutlinedCopyAddrHelperFunction( SILType T , const TypeInfo & ti , const OutliningMetadataCollector & collector , StringRef funcName , CopyAddrHelperGenerator generator)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"TypeInfo::callOutlinedDestroy( IRGenFunction & IGF , Address addr , SILType T) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"OutliningMetadataCollector::emitCallToOutlinedDestroy( Address addr , SILType T , const TypeInfo & ti) const",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"IRGenModule::getOrCreateOutlinedDestroyFunction( SILType T , const TypeInfo & ti , const OutliningMetadataCollector & collector)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"IRGenModule::getOrCreateRetainFunction( const TypeInfo & ti , SILType t , llvm :: Type * llvmType)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/Outlining.cpp,"IRGenModule::getOrCreateReleaseFunction( const TypeInfo & ti , SILType t , llvm :: Type * llvmType)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"forcePayloadValue( EnumPayload :: LazyValue & value)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"getPayloadType( EnumPayload :: LazyValue value)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::zero( IRGenModule & IGM , EnumPayloadSchema schema)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::fromBitPattern( IRGenModule & IGM , APInt bitPattern , EnumPayloadSchema schema)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"withValueInPayload( IRGenFunction & IGF , const EnumPayload & payload , llvm :: Type * valueType , int numBitsUsedInValue , unsigned payloadOffset , Fn && f)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::insertValue( IRGenFunction & IGF , llvm :: Value * value , unsigned payloadOffset , int numBitsUsedInValue)",71, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::extractValue( IRGenFunction & IGF , llvm :: Type * type , unsigned payloadOffset) const",64, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::fromExplosion( IRGenModule & IGM , Explosion & in , EnumPayloadSchema schema)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::explode( IRGenModule & IGM , Explosion & out) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::packIntoEnumPayload( IRGenFunction & IGF , EnumPayload & outerPayload , unsigned bitOffset) const",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::unpackFromEnumPayload( IRGenFunction & IGF , const EnumPayload & outerPayload , unsigned bitOffset , EnumPayloadSchema schema)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"getPayloadStorageType( IRGenModule & IGM , const EnumPayload & payload)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::load( IRGenFunction & IGF , Address address , EnumPayloadSchema schema)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::store( IRGenFunction & IGF , Address address) const",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"ult::operator ( )( const APInt & a , const APInt & b) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"emitSubSwitch( IRGenFunction & IGF , MutableArrayRef<EnumPayload::LazyValue> values , APInt mask , MutableArrayRef<std::pair<APInt,llvm::BasicBlock*>> cases , SwitchDefaultDest dflt)",118, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::emitSwitch( IRGenFunction & IGF , APInt mask , ArrayRef<std::pair<APInt,llvm::BasicBlock*>> cases , SwitchDefaultDest dflt) const",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::emitCompare( IRGenFunction & IGF , APInt mask , APInt value) const",56, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::emitApplyAndMask( IRGenFunction & IGF , APInt mask)",39, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::emitApplyOrMask( IRGenFunction & IGF , APInt mask)",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::emitApplyOrMask( IRGenFunction & IGF , EnumPayload mask)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"irgen::emitGatherSpareBits( IRGenFunction & IGF , const SpareBitVector & spareBitMask , llvm :: Value * spareBits , unsigned resultLowBit , unsigned resultBitWidth)",60, 2, 0, 0
repos/cpp/swift/lib/IRGen/EnumPayload.cpp,"EnumPayload::emitGatherSpareBits( IRGenFunction & IGF , const SpareBitVector & spareBits , unsigned firstBitOffset , unsigned bitWidth) const",51, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getMemberIndexForKind( Kind kind)",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( const Address & address)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( const StackAddress & address)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( const DynamicallyEnforcedAddress & address)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( const Address & container , ContainerForUnallocatedAddress_t)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( const ContainedAddress & address)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( const FunctionPointer & fn)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( ObjCMethod && objcMethod)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( Explosion & e)",13, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( const OwnedAddress & boxWithAddress)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( CoroutineState && state)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::LoweredValue( LoweredValue && lv)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::operator =( LoweredValue && lv)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::~LoweredValue()",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::isAddress() const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::isUnallocatedAddressInBuffer() const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::isBoxWithAddress() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getStackAddress() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getContainerOfAddress() const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getAddressInContainer() const",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getDynamicallyEnforcedAddress() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getAnyAddress() const",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getAddressOfBox() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getKnownExplosionVector() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getKnownSingletonExplosion() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getFunctionPointer() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getObjCMethod() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getCoroutineState() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getExplosion( IRGenFunction & IGF , SILType type) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredBB::LoweredBB( llvm :: BasicBlock * bb , PHINodeVector && phis)",3, 5, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredValue( SILValue v , LoweredValue && lv)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredAddress( SILValue v , const Address & address)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredStackAddress( SILValue v , const StackAddress & address)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredDynamicallyEnforcedAddress( SILValue v , const Address & address , llvm :: Value * scratch)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setContainerOfUnallocatedAddress( SILValue v , const Address & buffer)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::overwriteAllocatedAddress( SILValue v , const Address & address)",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredExplosion( SILValue v , Explosion & e)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setCorrespondingLoweredValues( SILInstructionResultArray results , Explosion & allValues)",20, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredBox( SILValue v , const OwnedAddress & box)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredFunctionPointer( SILValue v , const FunctionPointer & fnPtr)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredObjCMethod( SILValue v , SILDeclRef method)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredObjCMethodBounded( SILValue v , SILDeclRef method , SILType searchType , bool startAtSuper)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setLoweredCoroutine( SILValue tokenResult , CoroutineState && state)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getUndefLoweredValue( SILType t)",31, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getLoweredValue( SILValue v)",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getLoweredAddress( SILValue v)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getLoweredStackAddress( SILValue v)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getLoweredDynamicEnforcementScratchBuffer( BeginAccessInst * v)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getLoweredCoroutine( SILValue v)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getLoweredExplosion( SILValue v , Explosion & e)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getLoweredExplosion( SILValue v)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getLoweredSingletonExplosion( SILValue v)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getLoweredBB( SILBasicBlock * bb)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getOrCreateAnonymousVarName( VarDecl * Decl)",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::getVarName( DebugVarCarryingInst * i , bool & IsAnonymous)",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitLifetimeExtendingUse( llvm :: Value * Var)",32, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitDebugVariableRangeExtension( const SILBasicBlock * CurBB)",32, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::zeroInit( llvm :: AllocaInst * AI)",17, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::needsShadowCopy( llvm :: Value * Storage)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitShadowCopy( llvm :: Value * Storage , const SILDebugScope * Scope , StringRef Name , unsigned ArgNo , Alignment Align)",14, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitShadowCopyIfNeeded( llvm :: Value * Storage , const SILDebugScope * Scope , StringRef Name , unsigned ArgNo , bool IsAnonymous , Alignment Align = Alignment(0))",32, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitShadowCopyIfNeeded( Address Storage , const SILDebugScope * Scope , StringRef Name , unsigned ArgNo , bool IsAnonymous)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitShadowCopyIfNeeded( SILValue & SILVal , const SILDebugScope * Scope , StringRef Name , unsigned ArgNo , bool IsAnonymous , llvm :: SmallVectorImpl<llvm::Value*> & copy)",29, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::bindArchetypes( swift :: Type Ty)",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitDebugVariableDeclaration( StorageType Storage , DebugTypeInfo Ty , SILType SILTy , const SILDebugScope * DS , VarDecl * VarDecl , StringRef Name , unsigned ArgNo = 0 , IndirectionKind Indirection = DirectValue)",17, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitFailBB()",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAssignInst( AssignInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitMarkUninitializedInst( MarkUninitializedInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitMarkFunctionEscapeInst( MarkFunctionEscapeInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitLoadBorrowInst( LoadBorrowInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitObjectInst( ObjectInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDestructureTupleInst( DestructureTupleInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDestructureStructInst( DestructureStructInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitEndLifetimeInst( EndLifetimeInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUncheckedOwnershipConversionInst( UncheckedOwnershipConversionInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitBeginBorrowInst( BeginBorrowInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitEndBorrowInst( EndBorrowInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitStoreBorrowInst( StoreBorrowInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUnmanagedRetainValueInst( UnmanagedRetainValueInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUnmanagedReleaseValueInst( UnmanagedReleaseValueInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUnmanagedAutoreleaseValueInst( UnmanagedAutoreleaseValueInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitCopyBlockWithoutEscapingInst( CopyBlockWithoutEscapingInst * i)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getExplosion( IRGenFunction & IGF , SILType type , Explosion & ex) const",35, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getSingletonExplosion( IRGenFunction & IGF , SILType type) const",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::IRGenSILFunction( IRGenModule & IGM , SILFunction * f)",37, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::~IRGenSILFunction()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitPHINodesForType( IRGenSILFunction & IGF , SILType type , const TypeInfo & ti , unsigned predecessors , ValueVector & phis)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitPHINodesForBBArgs( IRGenSILFunction & IGF , SILBasicBlock * silBB , llvm :: BasicBlock * llBB)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitEntryPointIndirectReturn( IRGenSILFunction & IGF , SILBasicBlock * entry , Explosion & params , CanSILFunctionType funcTy , llvm :: function_ref<bool(SILType)> requiresIndirectResult)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"bindParameter( IRGenSILFunction & IGF , SILArgument * param , Explosion & allParamValues)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitEntryPointArgumentsNativeCC( IRGenSILFunction & IGF , SILBasicBlock * entry , Explosion & allParamValues)",75, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitEntryPointArgumentsCOrObjC( IRGenSILFunction & IGF , SILBasicBlock * entry , Explosion & params , CanSILFunctionType funcTy)",93, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitLocalSelfMetadata( IRGenSILFunction & IGF)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenModule::emitSILFunction( SILFunction * f)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitSILFunction()",120, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::estimateStackSize()",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitSILBasicBlock( SILBasicBlock * BB)",82, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitFunctionRefBaseInst( FunctionRefBaseInst * i)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitFunctionRefInst( FunctionRefInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDynamicFunctionRefInst( DynamicFunctionRefInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitPreviousDynamicFunctionRefInst( PreviousDynamicFunctionRefInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAllocGlobalInst( AllocGlobalInst * i)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitGlobalAddrInst( GlobalAddrInst * i)",37, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitGlobalValueInst( GlobalValueInst * i)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitMetatypeInst( swift :: MetatypeInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getClassBaseValue( IRGenSILFunction & IGF , SILValue v)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitValueMetatypeInst( swift :: ValueMetatypeInst * i)",37, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitExistentialMetatypeInst( swift :: ExistentialMetatypeInst * i)",34, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitApplyArgument( IRGenSILFunction & IGF , SILValue arg , SILType paramType , Explosion & out)",35, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getObjCClassForValue( IRGenFunction & IGF , llvm :: Value * selfValue , CanAnyMetatypeType selfType)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitWitnessTableForLoweredCallee( IRGenSILFunction & IGF , CanSILFunctionType substCalleeType)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"LoweredValue::getCallee( IRGenFunction & IGF , llvm :: Value * selfValue , CalleeInfo && calleeInfo) const",76, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getCallEmissionForLoweredValue( IRGenSILFunction & IGF , CanSILFunctionType origCalleeType , CanSILFunctionType substCalleeType , const LoweredValue & lv , llvm :: Value * selfValue , SubstitutionMap substitutions , WitnessMetadata * witnessMetadata , Explosion & args)",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitBuiltinInst( swift :: BuiltinInst * i)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitApplyInst( swift :: ApplyInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitTryApplyInst( swift :: TryApplyInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitFullApplySite( FullApplySite site)",135, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getPartialApplicationFunction( IRGenSILFunction & IGF , SILValue v , SubstitutionMap subs , CanSILFunctionType substFnType)",63, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitPartialApplyInst( swift :: PartialApplyInst * i)",61, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitIntegerLiteralInst( swift :: IntegerLiteralInst * i)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitFloatLiteralInst( swift :: FloatLiteralInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitStringLiteralInst( swift :: StringLiteralInst * i)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUnreachableInst( swift :: UnreachableInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitCoroutineExit( IRGenSILFunction & IGF)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitReturnInst( IRGenSILFunction & IGF , SILType resultTy , Explosion & result)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitReturnInst( swift :: ReturnInst * i)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitThrowInst( swift :: ThrowInst * i)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUnwindInst( swift :: UnwindInst * i)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitYieldInst( swift :: YieldInst * i)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitBeginApplyInst( BeginApplyInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitEndApplyInst( EndApplyInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAbortApplyInst( AbortApplyInst * i)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitEndApply( BeginApplyInst * i , bool isAbort)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitBBMapForSwitchValue( IRGenSILFunction & IGF , SmallVectorImpl<std::pair<SILValue,llvm::BasicBlock*>> & dests , SwitchValueInst * inst)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getSwitchCaseValue( IRGenFunction & IGF , SILValue val)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitSwitchValueDispatch( IRGenSILFunction & IGF , SILType ty , Explosion & value , ArrayRef<std::pair<SILValue,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest)",66, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitSwitchValueInst( SwitchValueInst * inst)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"addIncomingExplosionToPHINodes( IRGenSILFunction & IGF , ArrayRef<llvm::Value*> phis , Explosion & argValue)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"addIncomingExplosionToPHINodes( IRGenSILFunction & IGF , LoweredBB & lbb , unsigned & phiIndex , Explosion & argValue)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"addIncomingAddressToPHINodes( IRGenSILFunction & IGF , ArrayRef<llvm::Value*> phis , Address argValue)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"addIncomingAddressToPHINodes( IRGenSILFunction & IGF , LoweredBB & lbb , unsigned & phiIndex , Address argValue)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"addIncomingSILArgumentsToPHINodes( IRGenSILFunction & IGF , LoweredBB & lbb , OperandValueArrayRef args)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitBBMapForSwitchEnum( IRGenSILFunction & IGF , SmallVectorImpl<std::pair<EnumElementDecl*,llvm::BasicBlock*>> & dests , SwitchEnumInstBase * inst)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitSwitchEnumInst( SwitchEnumInst * inst)",34, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitSwitchEnumAddrInst( SwitchEnumAddrInst * inst)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitBBMapForSelect( IRGenSILFunction & IGF , Explosion & resultPHI , SmallVectorImpl<std::pair<T,llvm::BasicBlock*>> & BBs , llvm :: BasicBlock * & defaultBB , SelectInstBase<C,T,B> * inst)",62, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"mapTriviallyToInt( IRGenSILFunction & IGF , const EnumImplStrategy & EIS , SelectEnumInst * inst)",66, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getLoweredValueForSelect( IRGenSILFunction & IGF , Explosion & result , SelectInstBase<C,T,B> * inst)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitSingleEnumMemberSelectResult( IRGenSILFunction & IGF , SelectEnumInstBase * inst , llvm :: Value * isTrue , Explosion & result)",47, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitSelectEnumInst( SelectEnumInst * inst)",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitSelectEnumAddrInst( SelectEnumAddrInst * inst)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitSelectValueInst( SelectValueInst * inst)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDynamicMethodBranchInst( DynamicMethodBranchInst * i)",64, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitBranchInst( swift :: BranchInst * i)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitCondBranchInst( swift :: CondBranchInst * i)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitRetainValueInst( swift :: RetainValueInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitRetainValueAddrInst( swift :: RetainValueAddrInst * i)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitCopyValueInst( swift :: CopyValueInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAutoreleaseValueInst( swift :: AutoreleaseValueInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitSetDeallocatingInst( SetDeallocatingInst * i)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitReleaseValueInst( swift :: ReleaseValueInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitReleaseValueAddrInst( swift :: ReleaseValueAddrInst * i)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDestroyValueInst( swift :: DestroyValueInst * i)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitStructInst( swift :: StructInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitTupleInst( swift :: TupleInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitEnumInst( swift :: EnumInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitInitEnumDataAddrInst( swift :: InitEnumDataAddrInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUncheckedEnumDataInst( swift :: UncheckedEnumDataInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUncheckedTakeEnumDataAddrInst( swift :: UncheckedTakeEnumDataAddrInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitInjectEnumAddrInst( swift :: InjectEnumAddrInst * i)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitTupleExtractInst( swift :: TupleExtractInst * i)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitTupleElementAddrInst( swift :: TupleElementAddrInst * i)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitStructExtractInst( swift :: StructExtractInst * i)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitStructElementAddrInst( swift :: StructElementAddrInst * i)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitRefElementAddrInst( swift :: RefElementAddrInst * i)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitRefTailAddrInst( RefTailAddrInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"isInvariantAddress( SILValue v)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitLoadInst( swift :: LoadInst * i)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitStoreInst( swift :: StoreInst * i)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitErrorResultVar( SILResultInfo ErrorInfo , DebugValueInst * DbgValue)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDebugValueInst( DebugValueInst * i)",46, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDebugValueAddrInst( DebugValueAddrInst * i)",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitFixLifetimeInst( swift :: FixLifetimeInst * i)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitMarkDependenceInst( swift :: MarkDependenceInst * i)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitCopyBlockInst( CopyBlockInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitStrongRetainInst( swift :: StrongRetainInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitStrongReleaseInst( swift :: StrongReleaseInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getReferentTypeInfo( IRGenFunction & IGF , SILType silType)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"hasReferenceSemantics( IRGenSILFunction & IGF , SILType silType)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitIsUnique( IRGenSILFunction & IGF , SILValue operand , SourceLoc loc)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitIsUniqueInst( swift :: IsUniqueInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitIsEscapingClosureInst( swift :: IsEscapingClosureInst * i)",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::emitDebugInfoForAllocStack( AllocStackInst * i , const TypeInfo & type , llvm :: Value * addr)",64, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAllocStackInst( swift :: AllocStackInst * i)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"buildTailArrays( IRGenSILFunction & IGF , SmallVectorImpl<std::pair<SILType,llvm::Value*>> & TailArrays , AllocRefInstBase * ARI)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAllocRefInst( swift :: AllocRefInst * i)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAllocRefDynamicInst( swift :: AllocRefDynamicInst * i)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDeallocStackInst( swift :: DeallocStackInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDeallocRefInst( swift :: DeallocRefInst * i)",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDeallocPartialRefInst( swift :: DeallocPartialRefInst * i)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDeallocBoxInst( swift :: DeallocBoxInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAllocBoxInst( swift :: AllocBoxInst * i)",56, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitProjectBoxInst( swift :: ProjectBoxInst * i)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getExclusivityAction( SILAccessKind kind)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getExclusivityFlags( SILModule & M , SILAccessKind kind , bool noNestedConflict)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getEffectiveEnforcement( IRGenFunction & IGF , BeginAccessInst * access)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"getExclusivityFlags( BeginAccessInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitBeginAccessInst( BeginAccessInst * access)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"hasBeenInlined( BeginUnpairedAccessInst * access)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitBeginUnpairedAccessInst( BeginUnpairedAccessInst * access)",45, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitEndAccessInst( EndAccessInst * i)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitEndUnpairedAccessInst( EndUnpairedAccessInst * i)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitConvertFunctionInst( swift :: ConvertFunctionInst * i)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitConvertEscapeToNoEscapeInst( swift :: ConvertEscapeToNoEscapeInst * i)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitThinFunctionToPointerInst( swift :: ThinFunctionToPointerInst * i)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitPointerToThinFunctionInst( swift :: PointerToThinFunctionInst * i)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAddressToPointerInst( swift :: AddressToPointerInst * i)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitPointerToAddressInst( swift :: PointerToAddressInst * i)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitPointerCastInst( IRGenSILFunction & IGF , SILValue src , SILValue dest , const TypeInfo & ti)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUncheckedRefCastInst( swift :: UncheckedRefCastInst * i)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUncheckedRefCastAddrInst( swift :: UncheckedRefCastAddrInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUncheckedAddrCastInst( swift :: UncheckedAddrCastInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"isStructurallySame( const llvm :: Type * T1 , const llvm :: Type * T2)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitTrapAndUndefValue( IRGenSILFunction & IGF , Explosion & in , Explosion & out , const LoadableTypeInfo & outTI)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitUncheckedValueBitCast( IRGenSILFunction & IGF , SourceLoc loc , Explosion & in , const LoadableTypeInfo & inTI , Explosion & out , const LoadableTypeInfo & outTI)",37, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"emitValueBitwiseCast( IRGenSILFunction & IGF , SourceLoc loc , Explosion & in , const LoadableTypeInfo & inTI , Explosion & out , const LoadableTypeInfo & outTI)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUncheckedTrivialBitCastInst( swift :: UncheckedTrivialBitCastInst * i)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUncheckedBitwiseCastInst( swift :: UncheckedBitwiseCastInst * i)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitRefToRawPointerInst( swift :: RefToRawPointerInst * i)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitRawPointerToRefInst( swift :: RawPointerToRefInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"trivialRefConversion( IRGenSILFunction & IGF , SILValue input , SILValue result)",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitThinToThickFunctionInst( swift :: ThinToThickFunctionInst * i)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitThickToObjCMetatypeInst( ThickToObjCMetatypeInst * i)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitObjCToThickMetatypeInst( ObjCToThickMetatypeInst * i)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUnconditionalCheckedCastInst( swift :: UnconditionalCheckedCastInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitObjCMetatypeToObjectInst( ObjCMetatypeToObjectInst * i)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitObjCExistentialMetatypeToObjectInst( ObjCExistentialMetatypeToObjectInst * i)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitObjCProtocolInst( ObjCProtocolInst * i)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitRefToBridgeObjectInst( swift :: RefToBridgeObjectInst * i)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitClassifyBridgeObjectInst( ClassifyBridgeObjectInst * i)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitValueToBridgeObjectInst( ValueToBridgeObjectInst * i)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitBridgeObjectToRefInst( swift :: BridgeObjectToRefInst * i)",70, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitBridgeObjectToWordInst( swift :: BridgeObjectToWordInst * i)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUnconditionalCheckedCastAddrInst( swift :: UnconditionalCheckedCastAddrInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUnconditionalCheckedCastValueInst( swift :: UnconditionalCheckedCastValueInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitCheckedCastValueBranchInst( swift :: CheckedCastValueBranchInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitCheckedCastBranchInst( swift :: CheckedCastBranchInst * i)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitCheckedCastAddrBranchInst( swift :: CheckedCastAddrBranchInst * i)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitKeyPathInst( swift :: KeyPathInst * I)",92, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitUpcastInst( swift :: UpcastInst * i)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitIndexAddrInst( swift :: IndexAddrInst * i)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitTailAddrInst( swift :: TailAddrInst * i)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitIndexRawPointerInst( swift :: IndexRawPointerInst * i)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAllocValueBufferInst( swift :: AllocValueBufferInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitProjectValueBufferInst( swift :: ProjectValueBufferInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDeallocValueBufferInst( swift :: DeallocValueBufferInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitInitExistentialAddrInst( swift :: InitExistentialAddrInst * i)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitInitExistentialValueInst( swift :: InitExistentialValueInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitInitExistentialMetatypeInst( InitExistentialMetatypeInst * i)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitInitExistentialRefInst( InitExistentialRefInst * i)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDeinitExistentialAddrInst( swift :: DeinitExistentialAddrInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDeinitExistentialValueInst( swift :: DeinitExistentialValueInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitOpenExistentialAddrInst( OpenExistentialAddrInst * i)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitOpenExistentialRefInst( OpenExistentialRefInst * i)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitOpenExistentialMetatypeInst( OpenExistentialMetatypeInst * i)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitOpenExistentialValueInst( OpenExistentialValueInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitProjectBlockStorageInst( ProjectBlockStorageInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitInitBlockStorageHeaderInst( InitBlockStorageHeaderInst * i)",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitAllocExistentialBoxInst( AllocExistentialBoxInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDeallocExistentialBoxInst( DeallocExistentialBoxInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitOpenExistentialBoxInst( OpenExistentialBoxInst * i)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitOpenExistentialBoxValueInst( OpenExistentialBoxValueInst * i)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitProjectExistentialBoxInst( ProjectExistentialBoxInst * i)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitWitnessMethodInst( swift :: WitnessMethodInst * i)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::setAllocatedAddressForBuffer( SILValue v , const Address & allocedAddress)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitCopyAddrInst( swift :: CopyAddrInst * i)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitBindMemoryInst( swift :: BindMemoryInst *)",1, 71, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitDestroyAddrInst( swift :: DestroyAddrInst * i)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitCondFailInst( swift :: CondFailInst * i)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitSuperMethodInst( swift :: SuperMethodInst * i)",82, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitObjCSuperMethodInst( swift :: ObjCSuperMethodInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitClassMethodInst( swift :: ClassMethodInst * i)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenSILFunction::visitObjCMethodInst( swift :: ObjCMethodInst * i)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenSIL.cpp,"IRGenModule::emitSILStaticInitializers()",38, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"bindPolymorphicArgumentsFromComponentIndices( IRGenFunction & IGF , const KeyPathPatternComponent & component , GenericEnvironment * genericEnv , ArrayRef<GenericRequirement> requirements , llvm :: Value * args , llvm :: Value * size , bool hasSubscriptIndices)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"getAccessorForComputedComponent( IRGenModule & IGM , const KeyPathPatternComponent & component , KeyPathAccessor whichAccessor , GenericEnvironment * genericEnv , ArrayRef<GenericRequirement> requirements , bool hasSubscriptIndices)",164, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"getLayoutFunctionForComputedComponent( IRGenModule & IGM , const KeyPathPatternComponent & component , GenericEnvironment * genericEnv , ArrayRef<GenericRequirement> requirements)",76, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"getWitnessTableForComputedComponent( IRGenModule & IGM , const KeyPathPatternComponent & component , GenericEnvironment * genericEnv , ArrayRef<GenericRequirement> requirements)",164, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"getInitializerForComputedComponent( IRGenModule & IGM , const KeyPathPatternComponent & component , ArrayRef<KeyPathIndexOperand> operands , GenericEnvironment * genericEnv , ArrayRef<GenericRequirement> requirements)",133, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"emitGeneratorForKeyPath( IRGenModule & IGM , StringRef name , CanType type , llvm :: Type * returnType , GenericEnvironment * genericEnv , ArrayRef<GenericRequirement> requirements , llvm :: function_ref<void(IRGenFunction&,CanType)> emit)",50, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"emitMetadataGeneratorForKeyPath( IRGenModule & IGM , CanType type , GenericEnvironment * genericEnv , ArrayRef<GenericRequirement> requirements)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"emitWitnessTableGeneratorForKeyPath( IRGenModule & IGM , CanType type , ProtocolConformanceRef conformance , GenericEnvironment * genericEnv , ArrayRef<GenericRequirement> requirements)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"getClassFieldIndex( ClassDecl * classDecl , VarDecl * property)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"emitKeyPathComponent( IRGenModule & IGM , ConstantStructBuilder & fields , const KeyPathPatternComponent & component , bool isInstantiableOnce , GenericEnvironment * genericEnv , ArrayRef<GenericRequirement> requirements , CanType baseTy , ArrayRef<KeyPathIndexOperand> operands , bool hasSubscriptIndices)",342, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"IRGenModule::getAddrOfKeyPathPattern( KeyPathPattern * pattern , SILLocation diagLoc)",133, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenKeyPath.cpp,"IRGenModule::emitSILProperty( SILProperty * prop)",74, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataKey::getCachingKey() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataKind::getCachingKind() const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::getOrCreateLocalTypeData()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::destroyLocalTypeData()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::CacheEntry::cost() const",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::CacheEntry::costForRequest( LocalTypeDataKey key , DynamicMetadataRequest request) const",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::ConcreteCacheEntry::costForRequest( LocalTypeDataKey key , DynamicMetadataRequest request) const",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::AbstractCacheEntry::costForRequest( LocalTypeDataKey key , DynamicMetadataRequest request) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::CacheEntry::erase() const",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"immediatelySatisfies( LocalTypeDataKey key , MetadataState storedState , DynamicMetadataRequest request)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::CacheEntry::immediatelySatisfies( LocalTypeDataKey key , DynamicMetadataRequest request) const",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::ConcreteCacheEntry::immediatelySatisfies( LocalTypeDataKey key , DynamicMetadataRequest request) const",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::AbstractCacheEntry::immediatelySatisfies( LocalTypeDataKey key , DynamicMetadataRequest request) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::tryGetLocalTypeMetadataForLayout( SILType layoutType , DynamicMetadataRequest request)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::tryGetLocalTypeMetadata( CanType type , DynamicMetadataRequest request)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::tryGetLocalTypeMetadata( LocalTypeDataKey key , DynamicMetadataRequest request)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::tryGetConcreteLocalTypeData( LocalTypeDataKey key , DynamicMetadataRequest request)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::tryGetLocalTypeDataForLayout( SILType type , LocalTypeDataKind kind)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::tryGetLocalTypeData( CanType type , LocalTypeDataKind kind)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::tryGetLocalTypeData( LocalTypeDataKey key)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::tryGet( IRGenFunction & IGF , LocalTypeDataKey key , bool allowAbstract , DynamicMetadataRequest request)",89, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::AbstractCacheEntry::follow( IRGenFunction & IGF , AbstractSource & source , DynamicMetadataRequest request) const",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"maybeEmitDebugInfoForLocalTypeData( IRGenFunction & IGF , LocalTypeDataKey key , MetadataResponse value)",52, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::setScopedLocalTypeMetadataForLayout( SILType type , MetadataResponse response)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::setScopedLocalTypeMetadata( CanType type , MetadataResponse response)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::setScopedLocalTypeData( CanType type , LocalTypeDataKind kind , llvm :: Value * data)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::setScopedLocalTypeDataForLayout( SILType type , LocalTypeDataKind kind , llvm :: Value * data)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::setScopedLocalTypeData( LocalTypeDataKey key , MetadataResponse value)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::setUnscopedLocalTypeMetadata( CanType type , MetadataResponse response)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::setUnscopedLocalTypeData( CanType type , LocalTypeDataKind kind , llvm :: Value * data)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::setUnscopedLocalTypeData( LocalTypeDataKey key , MetadataResponse value)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::bindLocalTypeDataFromTypeMetadata( CanType type , IsExact_t isExact , llvm :: Value * metadata , MetadataState state)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::bindLocalTypeDataFromSelfWitnessTable( const ProtocolConformance * conformance , llvm :: Value * selfTable , llvm :: function_ref<CanType(CanType)> getTypeInContext)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::addAbstractForTypeMetadata( IRGenFunction & IGF , CanType type , IsExact_t isExact , MetadataResponse metadata)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::addAbstractForFulfillments( IRGenFunction & IGF , FulfillmentMap && fulfillments , llvm :: function_ref<AbstractSource()> createSource)",101, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::dump() const",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataKey::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataKey::print( llvm :: raw_ostream & out) const",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataKind::dump() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataKind::print( llvm :: raw_ostream & out) const",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"IRGenFunction::ConditionalDominanceScope::~ConditionalDominanceScope()",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/LocalTypeData.cpp,"LocalTypeDataCache::eraseConditional( ArrayRef<LocalTypeDataKey> keys)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"getNumLowObjCReservedBits( const IRGenModule & IGM)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"getPointerExtraInhabitantCount( const IRGenModule & IGM , unsigned numReservedLowBits)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"irgen::getHeapObjectExtraInhabitantCount( const IRGenModule & IGM)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"irgen::getFunctionPointerExtraInhabitantCount( IRGenModule & IGM)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"getPointerFixedExtraInhabitantValue( const IRGenModule & IGM , unsigned bits , unsigned index , unsigned offset , unsigned numReservedLowBits)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"irgen::getHeapObjectFixedExtraInhabitantValue( const IRGenModule & IGM , unsigned bits , unsigned index , unsigned offset)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"irgen::getFunctionPointerFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index , unsigned offset)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"getPointerExtraInhabitantIndex( IRGenFunction & IGF , Address src , unsigned numReservedLowBits)",64, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"irgen::getHeapObjectExtraInhabitantIndex( IRGenFunction & IGF , Address src)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"irgen::getFunctionPointerExtraInhabitantIndex( IRGenFunction & IGF , Address src)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"storePointerExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , unsigned numReservedLowBits)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"irgen::storeHeapObjectExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/ExtraInhabitants.cpp,"irgen::storeFunctionPointerExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"getMetadataKind( IRGenModule & IGM , MetadataKind kind)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"HeapLayout::HeapLayout( IRGenModule & IGM , LayoutStrategy strategy , ArrayRef<SILType> fieldTypes , ArrayRef<const TypeInfo*> fieldTypeInfos , llvm :: StructType * typeToFill , NecessaryBindings && bindings)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"calcInitOffset( swift :: irgen :: IRGenFunction & IGF , unsigned int i , const swift :: irgen :: HeapLayout & layout)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"HeapNonFixedOffsets::HeapNonFixedOffsets( IRGenFunction & IGF , const HeapLayout & layout)",53, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitDeallocateHeapObject( IRGenFunction & IGF , llvm :: Value * object , llvm :: Value * size , llvm :: Value * alignMask)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"emitDeallocateUninitializedHeapObject( IRGenFunction & IGF , llvm :: Value * object , llvm :: Value * size , llvm :: Value * alignMask)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitDeallocateClassInstance( IRGenFunction & IGF , llvm :: Value * object , llvm :: Value * size , llvm :: Value * alignMask)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitDeallocatePartialClassInstance( IRGenFunction & IGF , llvm :: Value * object , llvm :: Value * metadata , llvm :: Value * size , llvm :: Value * alignMask)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"createDtorFn( IRGenModule & IGM , const HeapLayout & layout)",46, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"HeapLayout::createSizeFn( IRGenModule & IGM) const",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"buildPrivateMetadata( IRGenModule & IGM , const HeapLayout & layout , llvm :: Constant * dtorFn , llvm :: Constant * captureDescriptor , MetadataKind kind)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"HeapLayout::getPrivateMetadata( IRGenModule & IGM , llvm :: Constant * captureDescriptor) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitUnmanagedAlloc( const HeapLayout & layout , const llvm :: Twine & name , llvm :: Constant * captureDescriptor , const HeapNonFixedOffsets * offsets)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"BuiltinNativeObjectTypeInfo::BuiltinNativeObjectTypeInfo( llvm :: PointerType * storage , Size size , SpareBitVector spareBits , Alignment align)",4, 55, 4, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"BuiltinNativeObjectTypeInfo::getReferenceCounting() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"TypeConverter::convertBuiltinNativeObject()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenModule::getReferenceStorageExtraInhabitantCount( ReferenceOwnership ownership , ReferenceCounting style) const",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenModule::getReferenceStorageSpareBits( ReferenceOwnership ownership , ReferenceCounting style) const",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenModule::getReferenceStorageExtraInhabitantValue( unsigned bits , unsigned index , ReferenceOwnership ownership , ReferenceCounting style) const",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenModule::getReferenceStorageExtraInhabitantMask( ReferenceOwnership ownership , ReferenceCounting style) const",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::getReferenceStorageExtraInhabitantIndex( Address src , ReferenceOwnership ownership , ReferenceCounting style)",34, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::storeReferenceStorageExtraInhabitant( llvm :: Value * index , Address dest , ReferenceOwnership ownership , ReferenceCounting style)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"doesNotRequireRefCounting( llvm :: Value * value)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"getTypeOfFunction( llvm :: Constant * fn)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"emitUnaryRefCountCall( IRGenFunction & IGF , llvm :: Constant * fn , llvm :: Value * value)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"emitCopyLikeCall( IRGenFunction & IGF , llvm :: Constant * fn , llvm :: Value * dest , llvm :: Value * src)",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"emitLoadWeakLikeCall( IRGenFunction & IGF , llvm :: Constant * fn , llvm :: Value * addr , llvm :: Type * resultType)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"emitStoreWeakLikeCall( IRGenFunction & IGF , llvm :: Constant * fn , llvm :: Value * addr , llvm :: Value * value)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitNativeStrongRetain( llvm :: Value * value , Atomicity atomicity)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitNativeStrongAssign( llvm :: Value * newValue , Address address)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitNativeStrongInit( llvm :: Value * newValue , Address address)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitStrongRelease( llvm :: Value * value , ReferenceCounting refcounting , Atomicity atomicity)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitStrongRetain( llvm :: Value * value , ReferenceCounting refcounting , Atomicity atomicity)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenModule::getReferenceType( ReferenceCounting refcounting)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitNativeStrongRelease( llvm :: Value * value , Atomicity atomicity)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitNativeSetDeallocating( llvm :: Value * value)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenModule::getFixLifetimeFn()",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitFixLifetime( llvm :: Value * value)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitUnknownStrongRetain( llvm :: Value * value , Atomicity atomicity)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitUnknownStrongRelease( llvm :: Value * value , Atomicity atomicity)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitBridgeStrongRetain( llvm :: Value * value , Atomicity atomicity)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitBridgeStrongRelease( llvm :: Value * value , Atomicity atomicity)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitErrorStrongRetain( llvm :: Value * value)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitErrorStrongRelease( llvm :: Value * value)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitLoadRefcountedPtr( Address addr , ReferenceCounting style)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitIsUniqueCall( llvm :: Value * value , SourceLoc loc , bool isNonNull)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::emitIsEscapingClosureCall( llvm :: Value * value , SourceLoc sourceLoc , unsigned verificationType)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"BoxTypeInfo::BoxTypeInfo( IRGenModule & IGM)",4, 5, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"BoxTypeInfo::getReferenceCounting() const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"EmptyBoxTypeInfo::EmptyBoxTypeInfo( IRGenModule & IGM)",1, 59, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"EmptyBoxTypeInfo::allocate( IRGenFunction & IGF , SILType boxedType , GenericEnvironment * env , const llvm :: Twine & name) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"EmptyBoxTypeInfo::deallocate( IRGenFunction & IGF , llvm :: Value * box , SILType boxedType) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"EmptyBoxTypeInfo::project( IRGenFunction & IGF , llvm :: Value * box , SILType boxedType) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"NonFixedBoxTypeInfo::NonFixedBoxTypeInfo( IRGenModule & IGM)",1, 62, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"NonFixedBoxTypeInfo::allocate( IRGenFunction & IGF , SILType boxedType , GenericEnvironment * env , const llvm :: Twine & name) const",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"NonFixedBoxTypeInfo::deallocate( IRGenFunction & IGF , llvm :: Value * box , SILType boxedType) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"NonFixedBoxTypeInfo::project( IRGenFunction & IGF , llvm :: Value * box , SILType boxedType) const",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"FixedBoxTypeInfoBase::FixedBoxTypeInfoBase( IRGenModule & IGM , HeapLayout && layout)",3, 5, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"FixedBoxTypeInfoBase::allocate( IRGenFunction & IGF , SILType boxedType , GenericEnvironment * env , const llvm :: Twine & name) const",16, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"FixedBoxTypeInfoBase::deallocate( IRGenFunction & IGF , llvm :: Value * box , SILType _) const",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"FixedBoxTypeInfoBase::project( IRGenFunction & IGF , llvm :: Value * box , SILType boxedType) const",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"getHeapLayoutForSingleTypeInfo( IRGenModule & IGM , const TypeInfo & ti)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"PODBoxTypeInfo::PODBoxTypeInfo( IRGenModule & IGM , Size stride , Alignment alignment)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"SingleRefcountedBoxTypeInfo::SingleRefcountedBoxTypeInfo( IRGenModule & IGM , ReferenceCounting refcounting)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"FixedBoxTypeInfo::FixedBoxTypeInfo( IRGenModule & IGM , SILType T)",4, 5, 2, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"TypeConverter::convertBoxType( SILBoxType * T)",56, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitAllocateBox( IRGenFunction & IGF , CanSILBoxType boxType , GenericEnvironment * env , const llvm :: Twine & name)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitDeallocateBox( IRGenFunction & IGF , llvm :: Value * box , CanSILBoxType boxType)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitProjectBox( IRGenFunction & IGF , llvm :: Value * box , CanSILBoxType boxType)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitAllocateExistentialBoxInBuffer( IRGenFunction & IGF , SILType boxedType , Address destBuffer , GenericEnvironment * env , const llvm :: Twine & name , bool isOutlined)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"IRGenFunction::getLocalSelfMetadata()",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitLoadOfObjCHeapMetadataRef( IRGenFunction & IGF , llvm :: Value * object)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"emitLoadOfHeapMetadataRef( IRGenFunction & IGF , llvm :: Value * object , IsaEncoding isaEncoding , bool suppressCast)",60, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitHeapMetadataRefForHeapObject( IRGenFunction & IGF , llvm :: Value * object , CanType objectType , bool suppressCast)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitHeapMetadataRefForHeapObject( IRGenFunction & IGF , llvm :: Value * object , SILType objectType , bool suppressCast)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitDynamicTypeOfOpaqueHeapObject( IRGenFunction & IGF , llvm :: Value * object , MetatypeRepresentation repr)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitHeapMetadataRefForUnknownHeapObject( IRGenFunction & IGF , llvm :: Value * object)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::emitDynamicTypeOfHeapObject( IRGenFunction & IGF , llvm :: Value * object , MetatypeRepresentation repr , SILType objectType , bool allowArtificialSubclasses)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"getRootClass( ClassDecl * theClass)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenHeap.cpp,"irgen::getIsaEncodingForType( IRGenModule & IGM , CanType type)",34, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenBuiltin.cpp,"emitCastBuiltin( IRGenFunction & IGF , SILType destType , Explosion & result , Explosion & args , llvm :: Instruction :: CastOps opcode)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenBuiltin.cpp,"emitCastOrBitCastBuiltin( IRGenFunction & IGF , SILType destType , Explosion & result , Explosion & args , BuiltinValueKind BV)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenBuiltin.cpp,"emitCompareBuiltin( IRGenFunction & IGF , Explosion & result , Explosion & args , llvm :: CmpInst :: Predicate pred)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenBuiltin.cpp,"emitTypeTraitBuiltin( IRGenFunction & IGF , Explosion & out , Explosion & args , SubstitutionMap substitutions , TypeTraitResult(TypeBase::*trait)())",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenBuiltin.cpp,"getLoweredTypeAndTypeInfo( IRGenModule & IGM , Type unloweredType)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenBuiltin.cpp,"irgen::emitBuiltinCall( IRGenFunction & IGF , const BuiltinInfo & Builtin , Identifier FnId , SILType resultType , Explosion & args , Explosion & out , SubstitutionMap substitutions)",891, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::tryEnableLazyTypeMetadata( NominalTypeDecl * Nominal)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::CategoryInitializerVisitor( IRGenFunction & IGF , ExtensionDecl * ext)",29, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::visitMembers( ExtensionDecl * ext)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::visitTypeDecl( TypeDecl * type)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::visitMissingMemberDecl( MissingMemberDecl * placeholder)",1, 65, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::visitFuncDecl( FuncDecl * method)",25, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::visitDestructorDecl( DestructorDecl * dtor)",1, 52, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::visitConstructorDecl( ConstructorDecl * constructor)",20, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::visitPatternBindingDecl( PatternBindingDecl * binding)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::visitVarDecl( VarDecl * prop)",32, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"CategoryInitializerVisitor::visitSubscriptDecl( SubscriptDecl * subscript)",24, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"ObjCProtocolInitializerVisitor::ObjCProtocolInitializerVisitor( IRGenFunction & IGF)",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"ObjCProtocolInitializerVisitor::visitMembers( ProtocolDecl * proto)",59, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"ObjCProtocolInitializerVisitor::visitTypeDecl( TypeDecl * type)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"ObjCProtocolInitializerVisitor::visitMissingMemberDecl( MissingMemberDecl * placeholder)",1, 65, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"ObjCProtocolInitializerVisitor::visitAbstractFunctionDecl( AbstractFunctionDecl * method)",26, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"ObjCProtocolInitializerVisitor::visitPatternBindingDecl( PatternBindingDecl * binding)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"ObjCProtocolInitializerVisitor::visitAbstractStorageDecl( AbstractStorageDecl * prop)",36, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"PrettySourceFileEmission::PrettySourceFileEmission( const SourceFile & SF)",1, 70, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"PrettySourceFileEmission::print( raw_ostream & os) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitSourceFile( SourceFile & SF)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"collectGlobalList( IRGenModule & IGM , SmallVectorImpl<llvm::WeakTrackingVH> & list , StringRef name)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"emitGlobalList( IRGenModule & IGM , ArrayRef<llvm::WeakTrackingVH> handles , StringRef name , StringRef section , llvm :: GlobalValue :: LinkageTypes linkage , llvm :: Type * eltTy , bool isConstant)",37, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitRuntimeRegistration()",174, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfParentContextDescriptor( DeclContext * from , bool fromAnonymousContext)",86, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::addUsedGlobal( llvm :: GlobalValue * global)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::addCompilerUsedGlobal( llvm :: GlobalValue * global)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::addObjCClass( llvm :: Constant * classPtr , bool nonlazy)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::addRuntimeResolvableType( NominalTypeDecl * nominal)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getConstantReferenceForProtocolDescriptor( ProtocolDecl * proto)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::addLazyConformances( DeclContext * dc)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::GetObjCSectionName( StringRef Section , StringRef MachOAttributes)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::SetCStringLiteralSection( llvm :: GlobalVariable * GV , ObjCLabelType Type)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitGlobalLists()",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"hasCodeCoverageInstrumentation( SILFunction & f , SILModule & m)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::emitGlobalTopLevel( bool emitForParallelEmission)",65, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::finishEmitAfterTopLevel()",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::emitSwiftProtocols()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::emitProtocolConformances()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::emitTypeMetadataRecords()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::emitLazyDefinitions()",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::addLazyFunction( SILFunction * f)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::noteUseOfTypeGlobals( NominalTypeDecl * type , bool isUseOfMetadata , RequireMetadata_t requireMetadata)",53, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getDynamicReplacementSection( IRGenModule & IGM)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getGlobalForDynamicallyReplaceableThunk( LinkEntity & entity , llvm :: Type * type , ForDefinition_t forDefinition)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getChainEntryForDynamicReplacement( IRGenModule & IGM , SILFunction * SILFn , llvm :: Function * implFunction = nullptr , ForDefinition_t forDefinition = ForDefinition)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::emitDynamicReplacements()",73, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenerator::emitEagerClassInitialization()",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitVTableStubs()",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getIRLinkage( const UniversalLinkageInfo & info , SILLinkage linkage , ForDefinition_t isDefinition , bool isWeakImported)",67, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"irgen::updateLinkageForDefinition( IRGenModule & IGM , llvm :: GlobalValue * global , const LinkEntity & entity)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"LinkInfo::get( IRGenModule & IGM , const LinkEntity & entity , ForDefinition_t isDefinition)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"LinkInfo::get( const UniversalLinkageInfo & linkInfo , ModuleDecl * swiftModule , const LinkEntity & entity , ForDefinition_t isDefinition)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"LinkInfo::get( const UniversalLinkageInfo & linkInfo , StringRef name , SILLinkage linkage , ForDefinition_t isDefinition , bool isWeakImported)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"isPointerTo( llvm :: Type * ptrTy , llvm :: Type * objTy)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"irgen::createFunction( IRGenModule & IGM , LinkInfo & linkInfo , const Signature & signature , llvm :: Function * insertBefore , OptimizationMode FuncOptMode)",55, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"LinkInfo::isUsed( IRLinkage IRL)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"swift::irgen::createVariable( IRGenModule & IGM , LinkInfo & linkInfo , llvm :: Type * storageType , Alignment alignment , DebugTypeInfo DbgTy , Optional<SILLocation> DebugLoc , StringRef DebugName , bool inFixedBuffer , bool indirectForDebugInfo)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"swift::irgen::disableAddressSanitizer( IRGenModule & IGM , llvm :: GlobalVariable * var)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitGlobalDecl( Decl * D)",79, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfSILGlobalVariable( SILGlobalVariable * var , const TypeInfo & ti , ForDefinition_t forDefinition)",154, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"isReadOnlyFunction( SILFunction * f)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getClangGlobalDeclForFunction( const clang :: Decl * decl)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"addLLVMFunctionAttributes( SILFunction * f , Signature & signature)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"createGlobalForDynamicReplacementFunctionKey( IRGenModule & IGM , SILFunction * SILFn , llvm :: GlobalVariable * linkEntry)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"emitDynamicallyReplaceableThunk( IRGenModule & IGM , SILFunction * SILFn , llvm :: Function * dispatchFn , llvm :: Function * implFn , Signature & signature)",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitDynamicReplacementOriginalFunctionThunk( SILFunction * f)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfSILFunction( SILFunction * f , ForDefinition_t forDefinition , bool isDynamicallyReplaceableImplementation , bool shouldCallPreviousImplementation)",113, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"createGOTEquivalent( IRGenModule & IGM , llvm :: Constant * global , LinkEntity entity)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getOrCreateGOTEquivalent( llvm :: Constant * global , LinkEntity entity)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getElementBitCast( llvm :: Constant * ptr , llvm :: Type * newEltType)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfLLVMVariable( LinkEntity entity , ConstantInit definition , DebugTypeInfo debugType , SymbolReferenceKind refKind , llvm :: Type * overrideDeclType)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfLLVMVariable( LinkEntity entity , ForDefinition_t forDefinition , DebugTypeInfo debugType)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfLLVMVariable( LinkEntity entity , ConstantInit definition , DebugTypeInfo DbgTy , llvm :: Type * overrideDeclType)",93, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfLLVMVariableOrGOTEquivalent( LinkEntity entity , ConstantReference :: Directness forceIndirectness)",103, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getContextDescriptorEntityReference( IRGenModule & IGM , const LinkEntity & entity)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getTypeContextDescriptorEntityReference( IRGenModule & IGM , NominalTypeDecl * decl)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getProtocolDescriptorEntityReference( IRGenModule & IGM , ProtocolDecl * protocol)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getObjCClassByNameReference( IRGenModule & IGM , ClassDecl * cls)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getTypeEntityReference( NominalTypeDecl * decl)",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitRelativeReference( ConstantReference target , llvm :: Constant * base , ArrayRef<unsigned> baseIndices)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitDirectRelativeReference( llvm :: Constant * target , llvm :: Constant * base , ArrayRef<unsigned> baseIndices)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitSwiftProtocols()",51, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::addProtocolConformance( ConformanceDescription && record)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitProtocolConformances()",52, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitTypeMetadataRecords()",66, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitFieldDescriptors()",48, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfObjCClassRef( ClassDecl * theClass)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfObjCClass( ClassDecl * theClass , ForDefinition_t forDefinition)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfMetaclassObject( ClassDecl * decl , ForDefinition_t forDefinition)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfObjCMetadataUpdateFunction( ClassDecl * classDecl , ForDefinition_t forDefinition)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadataAccessFunction( CanType type , ForDefinition_t forDefinition)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfGenericTypeMetadataAccessFunction( NominalTypeDecl * nominal , ArrayRef<llvm::Type*> genericArgs , ForDefinition_t forDefinition)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadataLazyCacheVariable( CanType type , ForDefinition_t forDefinition)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadataSingletonInitializationCache( NominalTypeDecl * D , ForDefinition_t forDefinition)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::defineAlias( LinkEntity entity , llvm :: Constant * definition)",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::defineTypeMetadata( CanType concreteType , bool isPattern , bool isConstant , ConstantInitFuture init , llvm :: StringRef section)",67, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadata( CanType concreteType)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadata( CanType concreteType , SymbolReferenceKind refKind)",83, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadataPattern( NominalTypeDecl * D)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadataPattern( NominalTypeDecl * D , ConstantInit init , StringRef section)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfClassMetadataBounds( ClassDecl * D , ForDefinition_t forDefinition)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadataInstantiationCache( NominalTypeDecl * D , ForDefinition_t forDefinition)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadataInstantiationFunction( NominalTypeDecl * D , ForDefinition_t forDefinition)",46, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeMetadataCompletionFunction( NominalTypeDecl * D , ForDefinition_t forDefinition)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfTypeContextDescriptor( NominalTypeDecl * D , RequireMetadata_t requireMetadata , ConstantInit definition)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfReflectionBuiltinDescriptor( CanType type , ConstantInit definition)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfReflectionFieldDescriptor( CanType type , ConstantInit definition)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfReflectionAssociatedTypeDescriptor( const ProtocolConformance * c , ConstantInit definition)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfPropertyDescriptor( AbstractStorageDecl * D , ConstantInit definition)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfProtocolDescriptor( ProtocolDecl * D , ConstantInit definition)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfProtocolRequirementsBaseDescriptor( ProtocolDecl * proto)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::defineProtocolRequirementsBaseDescriptor( ProtocolDecl * proto , llvm :: Constant * definition)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfAssociatedTypeDescriptor( AssociatedTypeDecl * assocType)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::defineAssociatedTypeDescriptor( AssociatedTypeDecl * assocType , llvm :: Constant * definition)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfAssociatedConformanceDescriptor( AssociatedConformance conformance)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::defineAssociatedConformanceDescriptor( AssociatedConformance conformance , llvm :: Constant * definition)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfBaseConformanceDescriptor( BaseConformance conformance)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::defineBaseConformanceDescriptor( BaseConformance conformance , llvm :: Constant * definition)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfProtocolConformanceDescriptor( const RootProtocolConformance * conformance , ConstantInit definition)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfIVarInitDestroy( ClassDecl * cd , bool isDestroyer , bool isForeign , ForDefinition_t forDefinition)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfValueWitness( CanType abstractType , ValueWitness index , ForDefinition_t forDefinition)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfValueWitnessTable( CanType concreteType , ConstantInit definition)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"getAddrOfSimpleVariable( IRGenModule & IGM , llvm :: DenseMap<LinkEntity,llvm::Constant*> & cache , LinkEntity entity , ForDefinition_t forDefinition)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfFieldOffset( VarDecl * var , ForDefinition_t forDefinition)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfEnumCase( EnumElementDecl * Case , ForDefinition_t forDefinition)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitNestedTypeDecls( DeclRange members)",53, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"shouldEmitCategory( IRGenModule & IGM , ExtensionDecl * ext)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::emitExtension( ExtensionDecl * ext)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenFunction::createAlloca( llvm :: Type * type , Alignment alignment , const llvm :: Twine & name)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenFunction::createAlloca( llvm :: Type * type , llvm :: Value * ArraySize , Alignment alignment , const llvm :: Twine & name)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenFunction::createFixedSizeBufferAlloca( const llvm :: Twine & name)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfGlobalString( StringRef data , bool willBeRelativelyAddressed)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfGlobalUTF16String( StringRef utf8)",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::isResilient( NominalTypeDecl * D , ResilienceExpansion expansion)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::hasResilientMetadata( ClassDecl * D , ResilienceExpansion expansion)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getResilienceExpansionForAccess( NominalTypeDecl * decl)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getResilienceExpansionForLayout( NominalTypeDecl * decl)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getResilienceExpansionForLayout( SILGlobalVariable * global)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfGenericWitnessTableInstantiationFunction( const NormalProtocolConformance * conf)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfWitnessTableLazyAccessFunction( const NormalProtocolConformance * conf , CanType conformingType , ForDefinition_t forDefinition)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfWitnessTableLazyCacheVariable( const NormalProtocolConformance * conf , CanType conformingType , ForDefinition_t forDefinition)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfWitnessTable( const RootProtocolConformance * conf , ConstantInit definition)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfWitnessTablePattern( const NormalProtocolConformance * conf , ConstantInit definition)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfAssociatedTypeWitnessTableAccessFunction( const NormalProtocolConformance * conformance , const AssociatedConformance & association)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfDefaultAssociatedConformanceAccessor( AssociatedConformance requirement)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getAddrOfContinuationPrototype( CanSILFunctionType fnType)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"shouldDefineHelper( IRGenModule & IGM , llvm :: Constant * fn , bool setIsNoInline)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenDecl.cpp,"IRGenModule::getOrCreateHelperFunction( StringRef fnName , llvm :: Type * resultTy , ArrayRef<llvm::Type*> paramTys , llvm :: function_ref<void(IRGenFunction&IGF)> generate , bool setIsNoInline)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::DebugLocKey::DebugLocKey( SILLocation :: DebugLoc DL)",2, 59, 8, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::DebugLocKey::operator ==( const SILLocation :: DebugLoc & DL) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getBuilder()",1, 53, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getDebugInfoFormat()",1, 77, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getFilenameFromDC( const DeclContext * DC)",10, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getDeserializedLoc( Pattern *)",1, 69, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getDeserializedLoc( Expr *)",1, 66, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getDeserializedLoc( Stmt *)",1, 66, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getDeserializedLoc( Decl * D)",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getDebugLoc( IRGenDebugInfo & DI , WithLoc * S , bool End = false)",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getStartLocation( Optional<SILLocation> OptLoc)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::sanitizeCodeViewDebugLoc( SILLocation :: DebugLoc DLoc)",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::decodeDebugLoc( SILLocation Loc)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getDebugLocation( Optional<SILLocation> OptLoc)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::BumpAllocatedString( const char * Data , size_t Length)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::BumpAllocatedString( std :: string S)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::BumpAllocatedString( StringRef S)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getSizeInBits( llvm :: DIType * Ty)",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getSizeInBits( const llvm :: DILocalVariable * Var)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::isExplicitClosure( const SILFunction * SILFn)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createInlinedAt( const SILDebugScope * DS)",20, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::parentScopesAreSane( const SILDebugScope * DS)",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getOrCreateFile( StringRef Filename)",37, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getName( const FuncDecl & FD)",44, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getName( SILLocation L)",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getFunctionType( SILType SILTy)",13, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getOrCreateContext( DeclContext * DC)",50, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createParameterType( llvm :: SmallVectorImpl<llvm::Metadata*> & Parameters , SILType type , DeclContext * DeclCtx , GenericEnvironment * GE)",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getResultTypeForDebugInfo( CanSILFunctionType fnTy)",14, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createParameterTypes( SILType SILTy , DeclContext * DeclCtx , GenericEnvironment * GE)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createParameterTypes( CanSILFunctionType FnTy , DeclContext * DeclCtx , GenericEnvironment * GE)",20, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::isAllocatingConstructor( SILFunctionTypeRepresentation Rep , DeclContext * DeclCtx)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getOrCreateModule( const void * Key , llvm :: DIScope * Parent , StringRef Name , StringRef IncludePath , StringRef ConfigMacros = StringRef())",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getOrCreateModule( clang :: ExternalASTSource :: ASTSourceDescriptor Desc)",16, 5, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getOrCreateModule( ModuleDecl :: ImportedModule IM)",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getMetadataType()",10, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getFile( llvm :: DIScope * Scope)",17, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getStorageSize( const llvm :: DataLayout & DL , ArrayRef<llvm::Value*> Storage)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getMangledName( DebugTypeInfo DbgTy)",13, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createMemberType( DebugTypeInfo DbgTy , StringRef Name , unsigned & OffsetInBits , llvm :: DIScope * Scope , llvm :: DIFile * File , llvm :: DINode :: DIFlags Flags)",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getTupleElements( TupleType * TupleTy , llvm :: DIScope * Scope , llvm :: DIFile * File , llvm :: DINode :: DIFlags Flags , DeclContext * DeclContext , GenericEnvironment * GE , unsigned & SizeInBits)",17, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getStructMembers( NominalTypeDecl * D , Type BaseTy , llvm :: DIScope * Scope , llvm :: DIFile * File , llvm :: DINode :: DIFlags Flags , unsigned & SizeInBits)",23, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createStructType( DebugTypeInfo DbgTy , NominalTypeDecl * Decl , Type BaseTy , llvm :: DIScope * Scope , llvm :: DIFile * File , unsigned Line , unsigned SizeInBits , unsigned AlignInBits , llvm :: DINode :: DIFlags Flags , llvm :: DIType * DerivedFrom , unsigned RuntimeLang , StringRef UniqueID)",32, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getEnumElements( DebugTypeInfo DbgTy , EnumDecl * ED , llvm :: DIScope * Scope , llvm :: DIFile * File , llvm :: DINode :: DIFlags Flags)",45, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createEnumType( DebugTypeInfo DbgTy , EnumDecl * Decl , StringRef MangledName , llvm :: DIScope * Scope , llvm :: DIFile * File , unsigned Line , llvm :: DINode :: DIFlags Flags)",28, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getOrCreateDesugaredType( Type Ty , DebugTypeInfo DbgTy)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getSizeOfBasicType( DebugTypeInfo DbgTy)",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createPointerSizedStruct( llvm :: DIScope * Scope , StringRef Name , llvm :: DIFile * File , unsigned Line , llvm :: DINode :: DIFlags Flags , StringRef MangledName)",16, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createPointerSizedStruct( llvm :: DIScope * Scope , StringRef Name , llvm :: DIType * PointeeTy , llvm :: DIFile * File , unsigned Line , llvm :: DINode :: DIFlags Flags , StringRef MangledName)",14, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createDoublePointerSizedStruct( llvm :: DIScope * Scope , StringRef Name , llvm :: DIType * PointeeTy , llvm :: DIFile * File , unsigned Line , llvm :: DINode :: DIFlags Flags , StringRef MangledName)",17, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createFunctionPointer( DebugTypeInfo DbgTy , llvm :: DIScope * Scope , unsigned SizeInBits , unsigned AlignInBits , llvm :: DINode :: DIFlags Flags , StringRef MangledName)",49, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createTuple( DebugTypeInfo DbgTy , llvm :: DIScope * Scope , unsigned SizeInBits , unsigned AlignInBits , llvm :: DINode :: DIFlags Flags , StringRef MangledName)",29, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createOpaqueStruct( llvm :: DIScope * Scope , StringRef Name , llvm :: DIFile * File , unsigned Line , unsigned SizeInBits , unsigned AlignInBits , llvm :: DINode :: DIFlags Flags , StringRef MangledName)",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::createType( DebugTypeInfo DbgTy , StringRef MangledName , llvm :: DIScope * Scope , llvm :: DIFile * File)",378, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::canMangle( TypeBase * Ty)",10, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getTypeOrNull( TypeBase * Ty)",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getFilePrivateScope( llvm :: DIScope * Parent , TypeDecl * Decl)",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getOrCreateType( DebugTypeInfo DbgTy)",74, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::IRGenDebugInfoImpl( const IRGenOptions & Opts , ClangImporter & CI , IRGenModule & IGM , llvm :: Module & M , StringRef MainOutputFilenameForDebugInfo)",74, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::finalize()",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::lineEntryIsSane( SILLocation :: DebugLoc DL , const SILDebugScope * DS)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::setCurrentLoc( IRBuilder & Builder , const SILDebugScope * DS , SILLocation Loc)",59, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::clearLoc( IRBuilder & Builder)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::pushLoc()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::popLoc()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::setInlinedTrapLocation( IRBuilder & Builder , const SILDebugScope * Scope)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::setEntryPointLoc( IRBuilder & Builder)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getEntryPointFn()",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::getOrCreateScope( const SILDebugScope * DS)",49, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::emitImport( ImportDecl * D)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::emitFunction( SILFunction & SILFn , llvm :: Function * Fn)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::emitFunction( const SILDebugScope * DS , llvm :: Function * Fn , SILFunctionTypeRepresentation Rep , SILType SILTy , DeclContext * DeclCtx , GenericEnvironment * GE)",130, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::emitArtificialFunction( IRBuilder & Builder , llvm :: Function * Fn , SILType SILTy)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::emitVariableDeclaration( IRBuilder & Builder , ArrayRef<llvm::Value*> Storage , DebugTypeInfo DbgTy , const SILDebugScope * DS , ValueDecl * VarDecl , StringRef Name , unsigned ArgNo , IndirectionKind Indirection , ArtificialKind Artificial)",96, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::emitDbgIntrinsic( IRBuilder & Builder , llvm :: Value * Storage , llvm :: DILocalVariable * Var , llvm :: DIExpression * Expr , unsigned Line , unsigned Col , llvm :: DILocalScope * Scope , const SILDebugScope * DS)",34, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::emitGlobalVariableDeclaration( llvm :: GlobalVariable * Var , StringRef Name , StringRef LinkageName , DebugTypeInfo DbgTy , bool IsLocalToUnit , bool Indirect , Optional<SILLocation> Loc)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::emitTypeMetadata( IRGenFunction & IGF , llvm :: Value * Metadata , unsigned Depth , unsigned Index , StringRef AssocType)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfoImpl::decodeSourceLoc( SourceLoc SL)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::createIRGenDebugInfo( const IRGenOptions & Opts , ClangImporter & CI , IRGenModule & IGM , llvm :: Module & M , StringRef MainOutputFilenameForDebugInfo)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::~IRGenDebugInfo()",1, 37, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::finalize()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::setCurrentLoc( IRBuilder & Builder , const SILDebugScope * DS , SILLocation Loc)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::clearLoc( IRBuilder & Builder)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::pushLoc()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::popLoc()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::setInlinedTrapLocation( IRBuilder & Builder , const SILDebugScope * Scope)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::setEntryPointLoc( IRBuilder & Builder)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::getEntryPointFn()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::getOrCreateScope( const SILDebugScope * DS)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::emitImport( ImportDecl * D)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::emitFunction( const SILDebugScope * DS , llvm :: Function * Fn , SILFunctionTypeRepresentation Rep , SILType Ty , DeclContext * DeclCtx , GenericEnvironment * GE)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::emitFunction( SILFunction & SILFn , llvm :: Function * Fn)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::emitArtificialFunction( IRBuilder & Builder , llvm :: Function * Fn , SILType SILTy)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::emitVariableDeclaration( IRBuilder & Builder , ArrayRef<llvm::Value*> Storage , DebugTypeInfo Ty , const SILDebugScope * DS , ValueDecl * VarDecl , StringRef Name , unsigned ArgNo , IndirectionKind Indirection , ArtificialKind Artificial)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::emitDbgIntrinsic( IRBuilder & Builder , llvm :: Value * Storage , llvm :: DILocalVariable * Var , llvm :: DIExpression * Expr , unsigned Line , unsigned Col , llvm :: DILocalScope * Scope , const SILDebugScope * DS)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::emitGlobalVariableDeclaration( llvm :: GlobalVariable * Storage , StringRef Name , StringRef LinkageName , DebugTypeInfo DebugType , bool IsLocalToUnit , bool Indirect , Optional<SILLocation> Loc)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::emitTypeMetadata( IRGenFunction & IGF , llvm :: Value * Metadata , unsigned Depth , unsigned Index , StringRef AssocType)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::getBuilder()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"IRGenDebugInfo::decodeSourceLoc( SourceLoc SL)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"AutoRestoreLocation::AutoRestoreLocation( IRGenDebugInfo * DI , IRBuilder & Builder)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"AutoRestoreLocation::~AutoRestoreLocation()",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"ArtificialLocation::ArtificialLocation( const SILDebugScope * DS , IRGenDebugInfo * DI , IRBuilder & Builder)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenDebugInfo.cpp,"PrologueLocation::PrologueLocation( IRGenDebugInfo * DI , IRBuilder & Builder)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleFieldInfo::TupleFieldInfo( unsigned index , StringRef name , const TypeInfo & type)",3, 7, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleFieldInfo::getFieldName() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleFieldInfo::getField( SILType T) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleFieldInfo::getType( IRGenModule & , SILType t) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"loadTupleOffsetFromMetadata( IRGenFunction & IGF , llvm :: Value * metadata , unsigned index)",18, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeInfoBase::TupleTypeInfoBase( As && ... args)",1, 74, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeInfoBase::projectElementFromExplosion( IRGenFunction & IGF , Explosion & tuple , unsigned fieldNo , Explosion & out) const",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeInfoBase::projectFieldAddress( IRGenFunction & IGF , Address addr , SILType T , const TupleFieldInfo & field) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeInfoBase::projectElementAddress( IRGenFunction & IGF , Address tuple , SILType T , unsigned fieldNo) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeInfoBase::getFixedElementOffset( IRGenModule & IGM , unsigned fieldNo) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeInfoBase::getElementStructIndex( IRGenModule & IGM , unsigned fieldNo) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeInfoBase::initializeFromParams( IRGenFunction & IGF , Explosion & params , Address src , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeInfoBase::verify( IRGenTypeVerifierFunction & IGF , llvm :: Value * metadata , SILType tupleType) const",27, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"LoadableTupleTypeInfo::LoadableTupleTypeInfo( ArrayRef<TupleFieldInfo> fields , unsigned explosionSize , llvm :: Type * ty , Size size , SpareBitVector && spareBits , Alignment align , IsPOD_t isPOD , IsFixedSize_t alwaysFixedSize)",10, 9, 6, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"LoadableTupleTypeInfo::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"LoadableTupleTypeInfo::getNonFixedOffsets( IRGenFunction & IGF) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"LoadableTupleTypeInfo::getNonFixedOffsets( IRGenFunction & IGF , SILType T) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"FixedTupleTypeInfo::FixedTupleTypeInfo( ArrayRef<TupleFieldInfo> fields , llvm :: Type * ty , Size size , SpareBitVector && spareBits , Alignment align , IsPOD_t isPOD , IsBitwiseTakable_t isBT , IsFixedSize_t alwaysFixedSize)",7, 7, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"FixedTupleTypeInfo::getNonFixedOffsets( IRGenFunction & IGF) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"FixedTupleTypeInfo::getNonFixedOffsets( IRGenFunction & IGF , SILType T) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleNonFixedOffsets::TupleNonFixedOffsets( SILType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleNonFixedOffsets::getOffsetForIndex( IRGenFunction & IGF , unsigned index)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"NonFixedTupleTypeInfo::NonFixedTupleTypeInfo( ArrayRef<TupleFieldInfo> fields , FieldsAreABIAccessible_t fieldsABIAccessible , llvm :: Type * T , Alignment minAlign , IsPOD_t isPOD , IsBitwiseTakable_t isBT , IsABIAccessible_t tupleAccessible)",8, 72, 26, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"NonFixedTupleTypeInfo::getNonFixedOffsets( IRGenFunction & IGF , SILType T) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"NonFixedTupleTypeInfo::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address structAddr , SILType structType , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"NonFixedTupleTypeInfo::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * index , llvm :: Value * numEmptyCases , Address structAddr , SILType structType , bool isOutlined) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeBuilder::TupleTypeBuilder( IRGenModule & IGM , SILType theTuple)",2, 54, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeBuilder::createFixed( ArrayRef<TupleFieldInfo> fields , StructLayout && layout)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeBuilder::createLoadable( ArrayRef<TupleFieldInfo> fields , StructLayout && layout , unsigned explosionSize)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeBuilder::createNonFixed( ArrayRef<TupleFieldInfo> fields , FieldsAreABIAccessible_t fieldsAccessible , StructLayout && layout)",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeBuilder::getFieldInfo( unsigned index , const TupleTypeElt & field , const TypeInfo & fieldTI)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeBuilder::getType( const TupleTypeElt & field)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TupleTypeBuilder::performLayout( ArrayRef<const TypeInfo*> fieldTypes)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"TypeConverter::convertTupleType( TupleType * tuple)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"irgen::projectTupleElementFromExplosion( IRGenFunction & IGF , SILType tupleType , Explosion & tuple , unsigned fieldNo , Explosion & out)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"irgen::projectTupleElementAddress( IRGenFunction & IGF , Address tuple , SILType tupleType , unsigned fieldNo)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"irgen::getFixedTupleElementOffset( IRGenModule & IGM , SILType tupleType , unsigned fieldNo)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenTuple.cpp,"irgen::getPhysicalTupleElementStructIndex( IRGenModule & IGM , SILType tupleType , unsigned fieldNo)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutDumper.cpp,"NominalTypeWalker::NominalTypeWalker( std :: vector<NominalTypeDecl*> & Results)",2, 26, 2, 0
repos/cpp/swift/lib/IRGen/TypeLayoutDumper.cpp,"NominalTypeWalker::walkToDeclPre( Decl * D)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/TypeLayoutDumper.cpp,"mangleTypeAsContext( const NominalTypeDecl * type)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutDumper.cpp,"createYAMLTypeInfoNode( NominalTypeDecl * NTD , IRGenModule & IGM , const FixedTypeInfo * fixedTI)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutDumper.cpp,"addYAMLTypeInfoNode( NominalTypeDecl * NTD , IRGenModule & IGM , std :: vector<YAMLTypeInfoNode> & Result)",35, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutDumper.cpp,"createYAMLModuleNode( ModuleDecl * Mod , IRGenModule & IGM)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutDumper.cpp,"TypeLayoutDumper::write( ArrayRef<ModuleDecl*> AllModules , llvm :: raw_ostream & os) const",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutDumper.cpp,"swift::performDumpTypeInfo( IRGenOptions & Opts , SILModule & SILMod , llvm :: LLVMContext & LLVMContext)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassTypeInfo::ClassTypeInfo( llvm :: PointerType * irType , Size size , SpareBitVector spareBits , Alignment align , ClassDecl * theClass , ReferenceCounting refcount)",5, 50, 8, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassTypeInfo::getReferenceCounting() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassTypeInfo::getClass() const",1, 53, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"getSelfType( ClassDecl * base)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"classHasIncompleteLayout( IRGenModule & IGM , ClassDecl * theClass)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::ClassLayoutBuilder( IRGenModule & IGM , SILType classType , ReferenceCounting refcounting , bool completelyFragileLayout , Optional<ArrayRef<SILType>> tailTypes = None)",42, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::getElements() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::isFixedSize() const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::doesMetadataRequireInitialization() const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::doesMetadataRequireRelocation() const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::getClassLayout( llvm :: Type * classTy) const",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::addTailElement( const ElementLayout & Elt)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::addFieldsForClass( ClassDecl * theClass , SILType classType , bool superclass)",49, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::addDirectFieldsFromClass( ClassDecl * theClass , SILType classType , bool superclass)",91, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassLayoutBuilder::getFieldAccess()",19, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassTypeInfo::generateLayout( IRGenModule & IGM , SILType classType , bool completelyFragileLayout) const",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassTypeInfo::createLayoutWithTailElems( IRGenModule & IGM , SILType classType , ArrayRef<SILType> tailTypes) const",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassTypeInfo::getClassLayout( IRGenModule & IGM , SILType classType , bool forBackwardDeployment) const",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"IRGenFunction::emitByteOffsetGEP( llvm :: Value * base , llvm :: Value * offset , llvm :: Type * objectType , const llvm :: Twine & name)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"IRGenFunction::emitByteOffsetGEP( llvm :: Value * base , llvm :: Value * offset , const TypeInfo & type , const llvm :: Twine & name)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"emitAddressAtOffset( IRGenFunction & IGF , SILType baseType , llvm :: Value * base , llvm :: Value * offset , VarDecl * field)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::tryEmitConstantClassFragilePhysicalMemberOffset( IRGenModule & IGM , SILType baseType , VarDecl * field)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::getClassFieldAccess( IRGenModule & IGM , SILType baseType , VarDecl * field)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::getClassFieldOffset( IRGenModule & IGM , SILType baseType , VarDecl * field)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::getClassLayoutWithTailElems( IRGenModule & IGM , SILType classType , ArrayRef<SILType> tailTypes)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::projectPhysicalClassMemberAddress( IRGenFunction & IGF , llvm :: Value * base , SILType baseType , SILType fieldType , VarDecl * field)",45, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::getPhysicalClassMemberAccessStrategy( IRGenModule & IGM , SILType baseType , VarDecl * field)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitTailProjection( IRGenFunction & IGF , llvm :: Value * Base , SILType ClassType , SILType TailType)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"stackPromote( IRGenFunction & IGF , const ClassLayout & FieldLayout , int & StackAllocSize , ArrayRef<std::pair<SILType,llvm::Value*>> TailArrays)",55, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::appendSizeForTailAllocatedArrays( IRGenFunction & IGF , llvm :: Value * size , llvm :: Value * alignMask , TailArraysRef TailArrays)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitClassAllocation( IRGenFunction & IGF , SILType selfType , bool objc , int & StackAllocSize , TailArraysRef TailArrays)",51, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitClassAllocationDynamic( IRGenFunction & IGF , llvm :: Value * metadata , SILType selfType , bool objc , TailArraysRef TailArrays)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"getInstanceSizeAndAlignMask( IRGenFunction & IGF , SILType selfType , ClassDecl * selfClass , llvm :: Value * selfValue , llvm :: Value * & size , llvm :: Value * & alignMask)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitClassDeallocation( IRGenFunction & IGF , SILType selfType , llvm :: Value * selfValue)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitPartialClassDeallocation( IRGenFunction & IGF , SILType selfType , llvm :: Value * selfValue , llvm :: Value * metadataValue)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"IRGenModule::emitClassDecl( ClassDecl * D)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::getClass() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::getProtocol() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::isBuildingClass() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::isBuildingCategory() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::isBuildingProtocol() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::MethodDescriptor::MethodDescriptor( Kind kind , void * ptr)",1, 66, 6, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::MethodDescriptor::MethodDescriptor( AbstractFunctionDecl * method)",4, 8, 6, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::MethodDescriptor::getIVarInitializer( llvm :: Function * fn)",4, 8, 6, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::MethodDescriptor::getIVarDestroyer( llvm :: Function * fn)",4, 8, 6, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::MethodDescriptor::getKind() const",1, 53, 6, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::MethodDescriptor::getMethod()",4, 8, 6, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::MethodDescriptor::getImpl()",4, 8, 6, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::getMethodList( ValueDecl * decl)",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::ClassDataBuilder( IRGenModule & IGM , ClassDecl * theClass , const ClassLayout & fieldLayout)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::ClassDataBuilder( IRGenModule & IGM , ClassDecl * theClass , ExtensionDecl * theExtension)",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::ClassDataBuilder( IRGenModule & IGM , ProtocolDecl * theProtocol)",25, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitConformances( DeclContext * dc)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::getObjCProtocols( ProtocolDecl * proto , llvm :: SmallSetVector<ProtocolDecl*,2> & result)",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::getMetaclassRefOrNull( ClassDecl * theClass)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildMetaclassStub()",38, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildCategoryName( SmallVectorImpl<char> & s)",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::emitCategory()",39, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::emitProtocol()",51, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::emitRODataFields( ConstantStructBuilder & b , ForMetaClass_t forMeta , HasUpdateCallback_t hasUpdater)",78, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::emitROData( ForMetaClass_t forMeta , HasUpdateCallback_t hasUpdater)",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildFlags( ForMetaClass_t forMeta , HasUpdateCallback_t hasUpdater)",23, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildName()",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::null()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitFuncDecl( FuncDecl * method)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitConstructorDecl( ConstructorDecl * constructor)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::hasObjCDeallocDefinition( DestructorDecl * destructor)",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitDestructorDecl( DestructorDecl * destructor)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitMissingMemberDecl( MissingMemberDecl * placeholder)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::addIVarInitializer()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::addIVarDestroyer()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildMethod( ConstantArrayBuilder & descriptors , MethodDescriptor descriptor)",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildMethod( ConstantArrayBuilder & descriptors , AbstractFunctionDecl * method)",23, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::chooseNamePrefix( StringRef forClass , StringRef forCategory , StringRef forProtocol)",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildClassMethodList()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildInstanceMethodList()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildOptClassMethodList()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildOptInstanceMethodList()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildOptExtendedMethodTypes()",18, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildExtMethodTypes( ConstantArrayBuilder & array , ArrayRef<MethodDescriptor> methods)",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildMethodList( ArrayRef<MethodDescriptor> methods , StringRef name)",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildProtocolRef( ProtocolDecl * protocol)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildProtocolList()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildProtocol( ConstantArrayBuilder & array , ProtocolDecl * protocol)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitVarDecl( VarDecl * var)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitStoredVar( VarDecl * var)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildIvar( ConstantArrayBuilder & ivars , VarDecl * ivar)",60, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildIvarList()",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitProperty( VarDecl * var)",24, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildPropertyAttributes( VarDecl * prop , SmallVectorImpl<char> & out)",49, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildProperty( ConstantArrayBuilder & properties , VarDecl * prop)",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildPropertyList( ForMetaClass_t classOrMeta)",19, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildPropertyList( ArrayRef<VarDecl*> properties , StringRef namePrefix)",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildOptionalList( const C & objects , Size optionalEltSize , StringRef nameBase , Fn && buildElement)",43, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::getEntityName( llvm :: SmallVectorImpl<char> & buffer) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::buildGlobalVariable( B & fields , StringRef nameBase)",28, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitTypeDecl( TypeDecl * type)",1, 42, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitPatternBindingDecl( PatternBindingDecl * binding)",1, 65, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"ClassDataBuilder::visitSubscriptDecl( SubscriptDecl * subscript)",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"emitObjCMetadataUpdateFunction( IRGenModule & IGM , ClassDecl * cls)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitClassPrivateData( IRGenModule & IGM , ClassDecl * cls)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitClassPrivateDataFields( IRGenModule & IGM , ConstantStructBuilder & init , ClassDecl * cls)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitCategoryData( IRGenModule & IGM , ExtensionDecl * ext)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitObjCProtocolData( IRGenModule & IGM , ProtocolDecl * proto)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"TypeConverter::convertClassType( CanType type , ClassDecl * D)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"IRGenModule::getObjCRuntimeBaseClass( Identifier name , Identifier objcName)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"IRGenModule::getObjCRuntimeBaseForSwiftRootClass( ClassDecl * theClass)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::getRootClassForMetaclass( IRGenModule & IGM , ClassDecl * C)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::doesClassMetadataRequireRelocation( IRGenModule & IGM , ClassDecl * theClass)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::doesClassMetadataRequireInitialization( IRGenModule & IGM , ClassDecl * theClass)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::doesClassMetadataRequireUpdate( IRGenModule & IGM , ClassDecl * theClass)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::hasKnownSwiftMetadata( IRGenModule & IGM , CanType type)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::hasKnownSwiftMetadata( IRGenModule & IGM , ClassDecl * theClass)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitClassResilientInstanceSizeAndAlignMask( IRGenFunction & IGF , ClassDecl * theClass , llvm :: Value * metadata)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitVirtualMethodValue( IRGenFunction & IGF , llvm :: Value * metadata , SILDeclRef method , CanSILFunctionType methodType)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClass.cpp,"irgen::emitVirtualMethodValue( IRGenFunction & IGF , llvm :: Value * base , SILType baseType , SILDeclRef method , CanSILFunctionType methodType , bool useSuperVTable)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutVerifier.cpp,"IRGenTypeVerifierFunction::IRGenTypeVerifierFunction( IRGenModule & IGM , llvm :: Function * f)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutVerifier.cpp,"IRGenTypeVerifierFunction::emit( ArrayRef<CanType> formalTypes)",141, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutVerifier.cpp,"IRGenTypeVerifierFunction::verifyValues( llvm :: Value * typeMetadata , llvm :: Value * runtimeVal , llvm :: Value * staticVal , const llvm :: Twine & description)",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutVerifier.cpp,"IRGenTypeVerifierFunction::verifyBuffers( llvm :: Value * typeMetadata , Address runtimeBuf , Address staticBuf , Size size , const llvm :: Twine & description)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/TypeLayoutVerifier.cpp,"IRGenModule::emitTypeVerifier()",81, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"isHoistable( AllocStackInst * Inst , irgen :: IRGenModule & Mod)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"Partition::Partition( AllocStackInst * A)",1, 47, 2, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"Partition::Partition()",1, 17, 2, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"eraseDeallocStacks( AllocStackInst * AllocStack)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"insertDeallocStackAtEndOf( SmallVectorImpl<SILInstruction*> & FunctionExits , AllocStackInst * AllocStack)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"moveAllocStackToBeginningOfBlock( AllocStackInst * AS , SILBasicBlock * BB)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"Partition::assignStackLocation( SmallVectorImpl<SILInstruction*> & FunctionExits)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"getSingleDeallocStack( AllocStackInst * ASI)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"Liveness::Liveness( Partition & P)",1, 28, 2, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"Liveness::mayOverlap( AllocStackInst * A , AllocStackInst * B)",34, 4, 2, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"MergeStackSlots::MergeStackSlots( SmallVectorImpl<AllocStackInst*> & AllocStacks , SmallVectorImpl<SILInstruction*> & FuncExits)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"MergeStackSlots::mergeSlots()",52, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"HoistAllocStack::HoistAllocStack( SILFunction * F , irgen :: IRGenModule & Mod)",2, 31, 2, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"indicatesDynamicAvailabilityCheckUse( SILInstruction * I)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"HoistAllocStack::collectHoistableInstructions()",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"HoistAllocStack::hoist()",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"HoistAllocStack::run()",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"AllocStackHoisting::run()",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/AllocStackHoisting.cpp,"irgen::createAllocStackHoisting()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"PassManagerBuilderWrapper::PassManagerBuilderWrapper( const IRGenOptions & IRGOpts)",2, 50, 2, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"addSwiftARCOptPass( const PassManagerBuilder & Builder , PassManagerBase & PM)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"addSwiftContractPass( const PassManagerBuilder & Builder , PassManagerBase & PM)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"addSwiftMergeFunctionsPass( const PassManagerBuilder & Builder , PassManagerBase & PM)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"addAddressSanitizerPasses( const PassManagerBuilder & Builder , legacy :: PassManagerBase & PM)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"addThreadSanitizerPass( const PassManagerBuilder & Builder , legacy :: PassManagerBase & PM)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"addSanitizerCoveragePass( const PassManagerBuilder & Builder , legacy :: PassManagerBase & PM)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::getIRTargetOptions( IRGenOptions & Opts , ASTContext & Ctx)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"setModuleFlags( IRGenModule & IGM)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::performLLVMOptimizations( IRGenOptions & Opts , llvm :: Module * Module , llvm :: TargetMachine * TargetMachine)",140, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"MD5Stream::write_impl( const char * Ptr , size_t Size)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"MD5Stream::current_pos() const",1, 56, 2, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"MD5Stream::final( MD5 :: MD5Result & Result)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"getHashOfModule( MD5 :: MD5Result & Result , IRGenOptions & Opts , llvm :: Module * Module , llvm :: TargetMachine * TargetMachine , version :: Version const & effectiveLanguageVersion)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"needsRecompile( StringRef OutputFilename , ArrayRef<uint8_t> HashData , llvm :: GlobalVariable * HashGlobal , llvm :: sys :: Mutex * DiagMutex)",51, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"countStatsPostIRGen( UnifiedStatsReporter & Stats , const llvm :: Module & Module)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::performLLVM( IRGenOptions & Opts , DiagnosticEngine * Diags , llvm :: sys :: Mutex * DiagMutex , llvm :: GlobalVariable * HashGlobal , llvm :: Module * Module , llvm :: TargetMachine * TargetMachine , const version :: Version & effectiveLanguageVersion , StringRef OutputFilename , UnifiedStatsReporter * Stats)",128, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::createTargetMachine( IRGenOptions & Opts , ASTContext & Ctx)",44, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"IRGenerator::IRGenerator( IRGenOptions & options , SILModule & module)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"IRGenerator::createTargetMachine()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"embedBitcode( llvm :: Module * M , const IRGenOptions & Opts)",77, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"initLLVMModule( const IRGenModule & IGM , ModuleDecl & M)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::irgen::createIRGenModule( SILModule * SILMod , StringRef OutputFilename , StringRef MainInputFilenameForDebugInfo , llvm :: LLVMContext & LLVMContext)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::irgen::deleteIRGenModule( std :: pair<IRGenerator*,IRGenModule*> & IRGenPair)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"runIRGenPreparePasses( SILModule & Module , irgen :: IRGenModule & IRModule)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"performIRGeneration( IRGenOptions & Opts , ModuleDecl * M , std :: unique_ptr<SILModule> SILMod , StringRef ModuleName , const PrimarySpecificPaths & PSPs , llvm :: LLVMContext & LLVMContext , SourceFile * SF = nullptr , llvm :: GlobalVariable ** outModuleHash = nullptr)",107, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"ThreadEntryPoint( IRGenerator * irgen , llvm :: sys :: Mutex * DiagMutex , int ThreadIdx)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"performParallelIRGeneration( IRGenOptions & Opts , swift :: ModuleDecl * M , std :: unique_ptr<SILModule> SILMod , StringRef ModuleName , int numThreads , ArrayRef<std::string> outputFilenames)",195, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::performIRGeneration( IRGenOptions & Opts , swift :: ModuleDecl * M , std :: unique_ptr<SILModule> SILMod , StringRef ModuleName , const PrimarySpecificPaths & PSPs , llvm :: LLVMContext & LLVMContext , ArrayRef<std::string> parallelOutputFilenames , llvm :: GlobalVariable ** outModuleHash)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::performIRGeneration( IRGenOptions & Opts , SourceFile & SF , std :: unique_ptr<SILModule> SILMod , StringRef ModuleName , const PrimarySpecificPaths & PSPs , llvm :: LLVMContext & LLVMContext , llvm :: GlobalVariable ** outModuleHash)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::createSwiftModuleObjectFile( SILModule & SILMod , StringRef Buffer , StringRef OutputPath)",48, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGen.cpp,"swift::performLLVM( IRGenOptions & Opts , ASTContext & Ctx , llvm :: Module * Module , StringRef OutputFilename , UnifiedStatsReporter * Stats)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"emitEnumLayoutFlags( IRGenModule & IGM , bool isVWTMutable)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"getBitVectorFromAPInt( const APInt & bits , unsigned startBit = 0)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"areElementsABIAccessible( ArrayRef<EnumImplStrategy::Element> elts)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::EnumImplStrategy( IRGenModule & IGM , TypeInfoKind tik , IsFixedSize_t alwaysFixedSize , unsigned NumElements , std :: vector<Element> && eltsWithPayload , std :: vector<Element> && eltsWithNoPayload)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::initializeFromParams( IRGenFunction & IGF , Explosion & params , Address dest , SILType T , bool isOutlined) const",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::isReflectable() const",1, 62, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::getPayloadSizeForMetadata() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::loadRefcountedPtr( IRGenFunction & IGF , SourceLoc loc , Address addr) const",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::projectDataForStore( IRGenFunction & IGF , EnumElementDecl * elt , Address enumAddr) const",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::destructiveProjectDataForLoad( IRGenFunction & IGF , SILType enumType , Address enumAddr , EnumElementDecl * Case) const",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::getTagIndex( EnumElementDecl * Case) const",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"emitResilientTagIndex( IRGenModule & IGM , const EnumImplStrategy * strategy , EnumElementDecl * Case)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::emitResilientTagIndices( IRGenModule & IGM) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::callOutlinedCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , IsInitialization_t isInit , IsTake_t isTake) const",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::callOutlinedDestroy( IRGenFunction & IGF , Address addr , SILType T) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::needsPayloadSizeInMetadata() const",1, 71, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getSingleton() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getFixedSingleton() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getLoadableSingleton() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getSingletonAddress( IRGenFunction & IGF , Address addr) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getSingletonType( IRGenModule & IGM , SILType T) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::SingletonEnumImplStrategy( IRGenModule & IGM , TypeInfoKind tik , IsFixedSize_t alwaysFixedSize , unsigned NumElements , std :: vector<Element> && WithPayload , std :: vector<Element> && WithNoPayload)",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::emitGetEnumTag( IRGenFunction & IGF , SILType T , Address enumAddr) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::emitValueCaseTest( IRGenFunction & IGF , Explosion & value , EnumElementDecl * Case) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::emitIndirectCaseTest( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::emitSingletonSwitch( IRGenFunction & IGF , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::emitValueSwitch( IRGenFunction & IGF , Explosion & value , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::emitIndirectSwitch( IRGenFunction & IGF , SILType T , Address addr , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::emitValueProject( IRGenFunction & IGF , Explosion & in , EnumElementDecl * theCase , Explosion & out) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::emitValueInjection( IRGenFunction & IGF , EnumElementDecl * elt , Explosion & params , Explosion & out) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::destructiveProjectDataForLoad( IRGenFunction & IGF , SILType T , Address enumAddr) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::storeTag( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::emitStoreTag( IRGenFunction & IGF , SILType T , Address enumAddr , llvm :: Value * tag) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getSchema( ExplosionSchema & schema) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getExplosionSize() const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::loadAsCopy( IRGenFunction & IGF , Address addr , Explosion & e) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::loadForSwitch( IRGenFunction & IGF , Address addr , Explosion & e) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::loadAsTake( IRGenFunction & IGF , Address addr , Explosion & e) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::assign( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::assignWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::initialize( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::initializeWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::initializeWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::collectMetadataForOutlining( OutliningMetadataCollector & collector , SILType T) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::reexplode( IRGenFunction & IGF , Explosion & src , Explosion & dest) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::copy( IRGenFunction & IGF , Explosion & src , Explosion & dest , Atomicity atomicity) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::consume( IRGenFunction & IGF , Explosion & src , Atomicity atomicity) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::fixLifetime( IRGenFunction & IGF , Explosion & src) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::destroy( IRGenFunction & IGF , Address addr , SILType T , bool isOutlined) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::packIntoEnumPayload( IRGenFunction & IGF , EnumPayload & payload , Explosion & in , unsigned offset) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::unpackFromEnumPayload( IRGenFunction & IGF , const EnumPayload & payload , Explosion & dest , unsigned offset) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::initializeMetadata( IRGenFunction & IGF , llvm :: Value * metadata , bool isVWTMutable , SILType T , MetadataDependencyCollector * collector) const",19, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::mayHaveExtraInhabitants( IRGenModule & IGM) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * index , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",17, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getFixedExtraInhabitantCount( IRGenModule & IGM) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getFixedExtraInhabitantMask( IRGenModule & IGM) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getTagBitsForPayloads() const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getBitPatternForNoPayloadElement( EnumElementDecl * theCase) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::getBitMaskForNoPayloadElements() const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::isSingleRetainablePointer( ResilienceExpansion expansion , ReferenceCounting * rc) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::getDiscriminatorType() const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::getDiscriminatorIdxConst( EnumElementDecl * target) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::NoPayloadEnumImplStrategyBase( IRGenModule & IGM , TypeInfoKind tik , IsFixedSize_t alwaysFixedSize , unsigned NumElements , std :: vector<Element> && WithPayload , std :: vector<Element> && WithNoPayload)",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::needsPayloadSizeInMetadata() const",1, 71, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::getFixedSize() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitGetEnumTag( IRGenFunction & IGF , SILType T , Address enumAddr) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitValueCaseTest( IRGenFunction & IGF , Explosion & value , EnumElementDecl * Case) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitIndirectCaseTest( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitValueSwitch( IRGenFunction & IGF , Explosion & value , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",28, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitIndirectSwitch( IRGenFunction & IGF , SILType T , Address addr , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitValueProject( IRGenFunction & IGF , Explosion & in , EnumElementDecl * elt , Explosion & out) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitValueInjection( IRGenFunction & IGF , EnumElementDecl * elt , Explosion & params , Explosion & out) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::destructiveProjectDataForLoad( IRGenFunction & IGF , SILType T , Address enumAddr) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::storeTag( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitStoreTag( IRGenFunction & IGF , SILType T , Address enumAddr , llvm :: Value * tag) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::initializeMetadata( IRGenFunction & IGF , llvm :: Value * metadata , bool isVWTMutable , SILType T , MetadataDependencyCollector * collector) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::getScalarType() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::projectScalar( IRGenFunction & IGF , Address addr)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitScalarRetain( IRGenFunction & IGF , llvm :: Value * value , Atomicity atomicity) const",2, 56, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitScalarRelease( IRGenFunction & IGF , llvm :: Value * value , Atomicity atomicity) const",2, 57, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::emitScalarFixLifetime( IRGenFunction & IGF , llvm :: Value * value) const",1, 80, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::initializeWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::collectMetadataForOutlining( OutliningMetadataCollector & collector , SILType T) const",2, 66, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::getTagBitsForPayloads() const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::getBitPatternForNoPayloadElement( EnumElementDecl * theCase) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::getBitMaskForNoPayloadElements() const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategyBase::getFixedExtraInhabitantMask( IRGenModule & IGM) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::NoPayloadEnumImplStrategy( IRGenModule & IGM , TypeInfoKind tik , IsFixedSize_t alwaysFixedSize , unsigned NumElements , std :: vector<Element> && WithPayload , std :: vector<Element> && WithNoPayload)",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::getDiscriminatorIndex( EnumElementDecl * elt) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::emitExtractDiscriminator( IRGenFunction & IGF , Explosion & value) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::mayHaveExtraInhabitants( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::getFixedExtraInhabitantCount( IRGenModule & IGM) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",29, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * index , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::getDiscriminatorIndex( EnumElementDecl * target) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::CCompatibleEnumImplStrategy( IRGenModule & IGM , TypeInfoKind tik , IsFixedSize_t alwaysFixedSize , unsigned NumElements , std :: vector<Element> && WithPayload , std :: vector<Element> && WithNoPayload)",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::mayHaveExtraInhabitants( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::getFixedExtraInhabitantCount( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * index , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::isReflectable() const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"getIntegerBitSizeForTag( unsigned tagBits)",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"getIntegerTypeForTag( IRGenModule & IGM , unsigned tagBits)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::getExtraTagBitConstant( uint64_t value) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::setTaggedEnumBody( IRGenModule & IGM , llvm :: StructType * bodyStruct , unsigned payloadBits , unsigned extraTagBits)",32, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::PayloadEnumImplStrategyBase( IRGenModule & IGM , TypeInfoKind tik , IsFixedSize_t alwaysFixedSize , unsigned NumElements , std :: vector<Element> && WithPayload , std :: vector<Element> && WithNoPayload , EnumPayloadSchema schema)",25, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::~PayloadEnumImplStrategyBase()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::getSchema( ExplosionSchema & schema) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",18, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::getExplosionSize() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::projectPayload( IRGenFunction & IGF , Address addr) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::projectExtraTagBits( IRGenFunction & IGF , Address addr) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::getOffsetOfExtraTagBits() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::loadForSwitch( IRGenFunction & IGF , Address addr , Explosion & e) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::loadAsTake( IRGenFunction & IGF , Address addr , Explosion & e) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::loadAsCopy( IRGenFunction & IGF , Address addr , Explosion & e) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::assign( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::initialize( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::collectMetadataForOutlining( OutliningMetadataCollector & collector , SILType T) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::reexplode( IRGenFunction & IGF , Explosion & src , Explosion & dest) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::emitPrimitiveCopy( IRGenFunction & IGF , Address dest , Address src , SILType T) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::emitPrimitiveStorePayloadAndExtraTag( IRGenFunction & IGF , Address dest , const EnumPayload & payload , llvm :: Value * extraTag) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::getPayloadAndExtraTagFromExplosion( IRGenFunction & IGF , Explosion & src) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::getPayloadAndExtraTagFromExplosionOutlined( IRGenFunction & IGF , Explosion & src) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::emitPrimitiveLoadPayloadAndExtraTag( IRGenFunction & IGF , Address addr) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::packIntoEnumPayload( IRGenFunction & IGF , EnumPayload & outerPayload , Explosion & src , unsigned offset) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"PayloadEnumImplStrategyBase::unpackFromEnumPayload( IRGenFunction & IGF , const EnumPayload & outerPayload , Explosion & dest , unsigned offset) const",18, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"computePayloadTypesAndTagType( IRGenModule & IGM , const TypeInfo & TI , SmallVector<llvm::Type*,2> & PayloadTypesAndTagType)",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"createOutlineLLVMFunction( IRGenModule & IGM , std :: string & name , ArrayRef<llvm::Type*> PayloadTypesAndTagType)",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::needsPayloadSizeInMetadata() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getPayloadElement() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getPayloadType( IRGenModule & IGM , SILType T) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getPayloadTypeInfo() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getFixedPayloadTypeInfo() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getLoadablePayloadTypeInfo() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitPayloadMetadataForLayout( IRGenFunction & IGF , SILType T) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitCopyEnumFunction( IRGenModule & IGM , SILType theEnumType) const",35, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitConsumeEnumFunction( IRGenModule & IGM , SILType theEnumType) const",35, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getPreferredPayloadSchema( Element payloadElement)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::SinglePayloadEnumImplStrategy( IRGenModule & IGM , TypeInfoKind tik , IsFixedSize_t alwaysFixedSize , unsigned NumElements , std :: vector<Element> && WithPayload , std :: vector<Element> && WithNoPayload)",36, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getNumExtraInhabitantTagValues() const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitGetEnumTag( IRGenFunction & IGF , SILType T , Address enumAddr) const",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::projectPayloadData( IRGenFunction & IGF , Address addr) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::destructiveProjectDataForLoad( IRGenFunction & IGF , SILType T , Address enumAddr) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitIndirectCaseTest( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",29, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitValueCaseTest( IRGenFunction & IGF , Explosion & value , EnumElementDecl * Case) const",92, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitValueSwitch( IRGenFunction & IGF , Explosion & value , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",165, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitDynamicSwitch( IRGenFunction & IGF , SILType T , Address addr , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",48, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitIndirectSwitch( IRGenFunction & IGF , SILType T , Address addr , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitValueProject( IRGenFunction & IGF , Explosion & inEnum , EnumElementDecl * theCase , Explosion & out) const",17, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getNoPayloadCaseValue( EnumElementDecl * elt) const",43, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitValueInjection( IRGenFunction & IGF , EnumElementDecl * elt , Explosion & params , Explosion & out) const",27, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::testFixedEnumContainsPayload( IRGenFunction & IGF , const EnumPayload & payload , llvm :: Value * extraBits) const",55, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::testEnumContainsPayload( IRGenFunction & IGF , Address addr , SILType T) const",27, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getRefcountedPtrType( IRGenModule & IGM) const",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::retainRefcountedPayload( IRGenFunction & IGF , llvm :: Value * ptr) const",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::fixLifetimeOfRefcountedPayload( IRGenFunction & IGF , llvm :: Value * ptr) const",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::releaseRefcountedPayload( IRGenFunction & IGF , llvm :: Value * ptr) const",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::fillExplosionForOutlinedCall( IRGenFunction & IGF , Explosion & src , Explosion & out) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::copy( IRGenFunction & IGF , Explosion & src , Explosion & dest , Atomicity atomicity) const",59, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::consume( IRGenFunction & IGF , Explosion & src , Atomicity atomicity) const",54, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::fixLifetime( IRGenFunction & IGF , Explosion & src) const",45, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::destroy( IRGenFunction & IGF , Address addr , SILType T , bool isOutlined) const",49, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::loadRefcountedPtr( IRGenFunction & IGF , SourceLoc loc , Address addr) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getZeroExtraTagConstant( IRGenModule & IGM) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitInitializeExtraTagBitsForPayload( IRGenFunction & IGF , Address dest , SILType T) const",23, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitIndirectAssign( IRGenFunction & IGF , Address dest , Address src , SILType T , IsTake_t isTake , bool isOutlined) const",107, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitIndirectInitialize( IRGenFunction & IGF , Address dest , Address src , SILType T , IsTake_t isTake , bool isOutlined) const",64, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::assignWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::initializeWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::initializeWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::collectMetadataForOutlining( OutliningMetadataCollector & collector , SILType T) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::storeTag( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",52, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::emitStoreTag( IRGenFunction & IGF , SILType T , Address enumAddr , llvm :: Value * tag) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::initializeMetadata( IRGenFunction & IGF , llvm :: Value * metadata , bool isVWTMutable , SILType T , MetadataDependencyCollector * collector) const",20, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::mayHaveExtraInhabitants( IRGenModule & IGM) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getFixedExtraInhabitantCount( IRGenModule & IGM) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::adjustPayloadExtraInhabitantIndex( IRGenFunction & IGF , llvm :: Value * index) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::adjustExtraInhabitantIndexForPayload( IRGenFunction & IGF , llvm :: Value * index) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address addr , SILType T , bool isOutlined) const",41, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::adjustPayloadExtraInhabitantTag( IRGenFunction & IGF , llvm :: Value * tag) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * tag , llvm :: Value * numEmptyCases , Address dest , SILType T , bool isOutlined) const",38, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::adjustExtraInhabitantTagForPayload( IRGenFunction & IGF , llvm :: Value * tag , bool isKnownNonZero) const",21, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getFixedExtraInhabitantMask( IRGenModule & IGM) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getBitPatternForNoPayloadElement( EnumElementDecl * theCase) const",21, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getBitMaskForNoPayloadElements() const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::getTagBitsForPayloads() const",18, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitCopyEnumFunction( IRGenModule & IGM , SILType type) const",28, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitConsumeEnumFunction( IRGenModule & IGM , SILType type) const",26, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getPayloadSchema( ArrayRef<Element> payloads)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::MultiPayloadEnumImplStrategy( IRGenModule & IGM , TypeInfoKind tik , IsFixedSize_t alwaysFixedSize , bool allowFixedLayoutOptimizations , unsigned NumElements , std :: vector<Element> && WithPayload , std :: vector<Element> && WithNoPayload)",61, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::needsPayloadSizeInMetadata() const",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getPayloadSizeForMetadata() const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getNumCaseBits() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getNumCasesPerTag() const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::extractPayloadTag( IRGenFunction & IGF , const EnumPayload & payload , llvm :: Value * extraTagBits) const",27, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getRefcountedPtrType( IRGenModule & IGM) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::retainRefcountedPayload( IRGenFunction & IGF , llvm :: Value * ptr) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::fixLifetimeOfRefcountedPayload( IRGenFunction & IGF , llvm :: Value * ptr) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::releaseRefcountedPayload( IRGenFunction & IGF , llvm :: Value * ptr) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getEmptyCasePayload( IRGenModule & IGM , unsigned tag , unsigned tagIndex) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getEmptyCasePayload( IRGenFunction & IGF , llvm :: Value * tag , llvm :: Value * tagIndex) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::destructureLoadableEnum( IRGenFunction & IGF , Explosion & src) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::destructureAndTagLoadableEnum( IRGenFunction & IGF , Explosion & src) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::destructureAndTagLoadableEnumFromOutlined( IRGenFunction & IGF , Explosion & src) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::loadDynamicTag( IRGenFunction & IGF , Address addr , SILType T) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::loadPayloadTag( IRGenFunction & IGF , Address addr , SILType T) const",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitGetEnumTag( IRGenFunction & IGF , SILType T , Address addr) const",80, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitIndirectCaseTest( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",17, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitValueCaseTest( IRGenFunction & IGF , Explosion & value , EnumElementDecl * Case) const",56, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitValueSwitch( IRGenFunction & IGF , Explosion & value , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",124, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitDynamicSwitch( IRGenFunction & IGF , SILType T , Address addr , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",52, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitIndirectSwitch( IRGenFunction & IGF , SILType T , Address addr , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::projectPayloadValue( IRGenFunction & IGF , EnumPayload payload , unsigned payloadTag , const LoadableTypeInfo & payloadTI , Explosion & out) const",24, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitValueProject( IRGenFunction & IGF , Explosion & inValue , EnumElementDecl * theCase , Explosion & out) const",21, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::packIntoEnumPayload( IRGenFunction & IGF , EnumPayload & outerPayload , Explosion & src , unsigned offset) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::unpackFromEnumPayload( IRGenFunction & IGF , const EnumPayload & outerPayload , Explosion & dest , unsigned offset) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitPayloadInjection( IRGenFunction & IGF , const FixedTypeInfo & payloadTI , Explosion & params , Explosion & out , unsigned tag) const",29, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getNoPayloadCaseValue( unsigned index) const",36, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getNoPayloadCaseValue( IRGenFunction & IGF , llvm :: Value * index) const",54, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitNoPayloadInjection( IRGenFunction & IGF , Explosion & out , unsigned index) const",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::forNontrivialPayloads( IRGenFunction & IGF , llvm :: Value * tag , llvm :: function_ref<void(unsigned,EnumImplStrategy::Element)> f) const",45, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::maskTagBitsFromPayload( IRGenFunction & IGF , EnumPayload & payload) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::fillExplosionForOutlinedCall( IRGenFunction & IGF , Explosion & src , Explosion & out) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitValueInjection( IRGenFunction & IGF , EnumElementDecl * elt , Explosion & params , Explosion & out) const",19, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::copy( IRGenFunction & IGF , Explosion & src , Explosion & dest , Atomicity atomicity) const",61, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::consume( IRGenFunction & IGF , Explosion & src , Atomicity atomicity) const",49, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::fixLifetime( IRGenFunction & IGF , Explosion & src) const",39, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitIndirectAssign( IRGenFunction & IGF , Address dest , Address src , SILType T , IsTake_t isTake , bool isOutlined) const",51, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitIndirectInitialize( IRGenFunction & IGF , Address dest , Address src , SILType T , IsTake_t isTake , bool isOutlined) const",132, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::assignWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::initializeWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::initializeWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::collectMetadataForOutlining( OutliningMetadataCollector & collector , SILType T) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::destroy( IRGenFunction & IGF , Address addr , SILType T , bool isOutlined) const",47, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::storePayloadTag( IRGenFunction & IGF , Address enumAddr , unsigned index , SILType T) const",32, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::storePayloadTag( IRGenFunction & IGF , Address enumAddr , llvm :: Value * tag , SILType T) const",45, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::storeNoPayloadTag( IRGenFunction & IGF , Address enumAddr , unsigned index , SILType T) const",17, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::storeNoPayloadTag( IRGenFunction & IGF , Address enumAddr , llvm :: Value * tag , SILType T) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::storeDynamicTag( IRGenFunction & IGF , Address enumAddr , llvm :: Value * tag , SILType T) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::storeTag( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",18, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitStoreTag( IRGenFunction & IGF , SILType T , Address enumAddr , llvm :: Value * tag) const",45, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::destructiveProjectDataForLoad( IRGenFunction & IGF , SILType T , Address enumAddr) const",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::emitPayloadLayoutArray( IRGenFunction & IGF , SILType T , MetadataDependencyCollector * collector) const",25, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::initializeMetadata( IRGenFunction & IGF , llvm :: Value * metadata , bool isVWTMutable , SILType T , MetadataDependencyCollector * collector) const",18, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::mayHaveExtraInhabitants( IRGenModule & IGM) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getExtraTagBitCountForExtraInhabitants() const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::projectExtraTagBitsForExtraInhabitants( IRGenFunction & IGF , Address base) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getRotationAmountsForExtraInhabitants() const",17, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getExtraInhabitantIndexImpl( IRGenFunction & IGF , Address src , SILType T , bool isOutlined , unsigned xiCount) const",61, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",53, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * index , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getFixedExtraInhabitantMask( IRGenModule & IGM) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getFixedExtraInhabitantCount( IRGenModule & IGM) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",46, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getBitPatternForNoPayloadElement( EnumElementDecl * theCase) const",31, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getBitMaskForNoPayloadElements() const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::getTagBitsForPayloads() const",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::ResilientEnumImplStrategy( IRGenModule & IGM , unsigned NumElements , std :: vector<Element> && WithPayload , std :: vector<Element> && WithNoPayload)",9, 8, 5, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::loadResilientTagIndex( IRGenFunction & IGF , EnumElementDecl * Case) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::destructiveProjectDataForLoad( IRGenFunction & IGF , SILType T , Address enumAddr) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::storeTag( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::testResilientTag( IRGenFunction & IGF , llvm :: Value * tag , EnumElementDecl * Case) const",37, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::emitIndirectCaseTest( IRGenFunction & IGF , SILType T , Address enumAddr , EnumElementDecl * Case) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::emitIndirectSwitch( IRGenFunction & IGF , SILType T , Address enumAddr , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",65, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::assignWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::initializeWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::initializeWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::collectMetadataForOutlining( OutliningMetadataCollector & collector , SILType T) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::destroy( IRGenFunction & IGF , Address addr , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getSchema( ExplosionSchema & schema) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getTagBitsForPayloads() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getBitPatternForNoPayloadElement( EnumElementDecl * theCase) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getBitMaskForNoPayloadElements() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::initializeFromParams( IRGenFunction & IGF , Explosion & params , Address dest , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::emitValueInjection( IRGenFunction & IGF , EnumElementDecl * elt , Explosion & params , Explosion & out) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::emitValueCaseTest( IRGenFunction & IGF , Explosion & value , EnumElementDecl * Case) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::emitValueSwitch( IRGenFunction & IGF , Explosion & value , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::emitValueProject( IRGenFunction & IGF , Explosion & inValue , EnumElementDecl * theCase , Explosion & out) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getExplosionSize() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::loadAsCopy( IRGenFunction & IGF , Address addr , Explosion & e) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::loadAsTake( IRGenFunction & IGF , Address addr , Explosion & e) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::assign( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::initialize( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::reexplode( IRGenFunction & IGF , Explosion & src , Explosion & dest) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::copy( IRGenFunction & IGF , Explosion & src , Explosion & dest , Atomicity atomicity) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::consume( IRGenFunction & IGF , Explosion & src , Atomicity atomicity) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::fixLifetime( IRGenFunction & IGF , Explosion & src) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::packIntoEnumPayload( IRGenFunction & IGF , EnumPayload & outerPayload , Explosion & src , unsigned offset) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::unpackFromEnumPayload( IRGenFunction & IGF , const EnumPayload & outerPayload , Explosion & dest , unsigned offset) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::emitGetEnumTag( IRGenFunction & IGF , SILType T , Address addr) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::emitStoreTag( IRGenFunction & IGF , SILType T , Address enumAddr , llvm :: Value * tag) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::needsPayloadSizeInMetadata() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::initializeMetadata( IRGenFunction & IGF , llvm :: Value * metadata , bool isVWTMutable , SILType T , MetadataDependencyCollector * collector) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::mayHaveExtraInhabitants( IRGenModule &) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * index , llvm :: Value * numEmptyCases , Address src , SILType T , bool isOutlined) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getFixedExtraInhabitantMask( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getFixedExtraInhabitantCount( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::get( TypeConverter & TC , SILType type , EnumDecl * theEnum)",143, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::EnumTypeInfoBase( EnumImplStrategy & strategy , AA && ... args)",2, 71, 6, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::~EnumTypeInfoBase()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::getStorageType() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::getSchema( ExplosionSchema & s) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::destroy( IRGenFunction & IGF , Address addr , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::initializeFromParams( IRGenFunction & IGF , Explosion & params , Address dest , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::initializeWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::initializeWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::collectMetadataForOutlining( OutliningMetadataCollector & collector , SILType T) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::assignWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::mayHaveExtraInhabitants( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address enumAddr , SILType T , bool isOutlined) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * whichCase , llvm :: Value * numEmptyCases , Address enumAddr , SILType T , bool isOutlined) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumTypeInfoBase::isSingleRetainablePointer( ResilienceExpansion expansion , ReferenceCounting * rc) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"FixedEnumTypeInfoBase::getFixedExtraInhabitantCount( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"FixedEnumTypeInfoBase::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"FixedEnumTypeInfoBase::getFixedExtraInhabitantMask( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"FixedEnumTypeInfoBase::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"FixedEnumTypeInfoBase::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"FixedEnumTypeInfo::FixedEnumTypeInfo( EnumImplStrategy & strategy , llvm :: StructType * T , Size S , SpareBitVector SB , Alignment A , IsPOD_t isPOD , IsBitwiseTakable_t isBT , IsFixedSize_t alwaysFixedSize)",6, 50, 6, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::LoadableEnumTypeInfo( EnumImplStrategy & strategy , llvm :: StructType * T , Size S , SpareBitVector SB , Alignment A , IsPOD_t isPOD , IsFixedSize_t alwaysFixedSize)",6, 50, 6, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::getExplosionSize() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::loadAsCopy( IRGenFunction & IGF , Address addr , Explosion & e) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::loadAsTake( IRGenFunction & IGF , Address addr , Explosion & e) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::assign( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::initialize( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::reexplode( IRGenFunction & IGF , Explosion & src , Explosion & dest) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::copy( IRGenFunction & IGF , Explosion & src , Explosion & dest , Atomicity atomicity) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::consume( IRGenFunction & IGF , Explosion & src , Atomicity atomicity) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::fixLifetime( IRGenFunction & IGF , Explosion & src) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::packIntoEnumPayload( IRGenFunction & IGF , EnumPayload & payload , Explosion & in , unsigned offset) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::unpackFromEnumPayload( IRGenFunction & IGF , const EnumPayload & payload , Explosion & dest , unsigned offset) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"LoadableEnumTypeInfo::loadRefcountedPtr( IRGenFunction & IGF , SourceLoc loc , Address addr) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NonFixedEnumTypeInfo::NonFixedEnumTypeInfo( EnumImplStrategy & strategy , llvm :: Type * irTy , Alignment align , IsPOD_t pod , IsBitwiseTakable_t bt , IsABIAccessible_t abiAccessible)",7, 75, 6, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumTypeInfo::ResilientEnumTypeInfo( EnumImplStrategy & strategy , llvm :: Type * irTy , IsABIAccessible_t abiAccessible)",3, 59, 7, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::getEnumImplStrategy( IRGenModule & IGM , SILType ty)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::getEnumImplStrategy( IRGenModule & IGM , CanType ty)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"EnumImplStrategy::getFixedEnumTypeInfo( llvm :: StructType * T , Size S , SpareBitVector SB , Alignment A , IsPOD_t isPOD , IsBitwiseTakable_t isBT)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SingletonEnumImplStrategy::completeEnumTypeLayout( TypeConverter & TC , SILType Type , EnumDecl * theEnum , llvm :: StructType * enumTy)",48, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"NoPayloadEnumImplStrategy::completeEnumTypeLayout( TypeConverter & TC , SILType Type , EnumDecl * theEnum , llvm :: StructType * enumTy)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"CCompatibleEnumImplStrategy::completeEnumTypeLayout( TypeConverter & TC , SILType Type , EnumDecl * theEnum , llvm :: StructType * enumTy)",44, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::completeFixedLayout( TypeConverter & TC , SILType Type , EnumDecl * theEnum , llvm :: StructType * enumTy)",71, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::completeDynamicLayout( TypeConverter & TC , SILType Type , EnumDecl * theEnum , llvm :: StructType * enumTy)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"SinglePayloadEnumImplStrategy::completeEnumTypeLayout( TypeConverter & TC , SILType type , EnumDecl * theEnum , llvm :: StructType * enumTy)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::completeFixedLayout( TypeConverter & TC , SILType Type , EnumDecl * theEnum , llvm :: StructType * enumTy)",154, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::completeDynamicLayout( TypeConverter & TC , SILType Type , EnumDecl * theEnum , llvm :: StructType * enumTy)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"MultiPayloadEnumImplStrategy::completeEnumTypeLayout( TypeConverter & TC , SILType Type , EnumDecl * theEnum , llvm :: StructType * enumTy)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"ResilientEnumImplStrategy::completeEnumTypeLayout( TypeConverter & TC , SILType Type , EnumDecl * theEnum , llvm :: StructType * enumTy)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"TypeConverter::convertEnumType( TypeBase * key , CanType type , EnumDecl * theEnum)",81, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"IRGenModule::emitEnumDecl( EnumDecl * theEnum)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::emitSwitchAddressOnlyEnumDispatch( IRGenFunction & IGF , SILType enumTy , Address enumAddr , ArrayRef<std::pair<EnumElementDecl*,llvm::BasicBlock*>> dests , llvm :: BasicBlock * defaultDest)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::emitInjectLoadableEnum( IRGenFunction & IGF , SILType enumTy , EnumElementDecl * theCase , Explosion & data , Explosion & out)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::emitProjectLoadableEnum( IRGenFunction & IGF , SILType enumTy , Explosion & inEnumValue , EnumElementDecl * theCase , Explosion & out)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::emitProjectEnumAddressForStore( IRGenFunction & IGF , SILType enumTy , Address enumAddr , EnumElementDecl * theCase)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::emitDestructiveProjectEnumAddressForLoad( IRGenFunction & IGF , SILType enumTy , Address enumAddr , EnumElementDecl * theCase)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::emitStoreEnumTagToAddress( IRGenFunction & IGF , SILType enumTy , Address enumAddr , EnumElementDecl * theCase)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::emitScatterSpareBits( IRGenFunction & IGF , const SpareBitVector & spareBitMask , llvm :: Value * packedBits , unsigned packedLowBit)",57, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::interleaveSpareBits( IRGenModule & IGM , const SpareBitVector & spareBits , unsigned bits , unsigned spareValue , unsigned occupiedValue)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"irgen::interleaveSpareBits( IRGenFunction & IGF , const EnumPayloadSchema & schema , const SpareBitVector & spareBitVector , llvm :: Value * value)",46, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"setAlignmentBits( SpareBitVector & v , Alignment align)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"IRGenModule::getHeapObjectSpareBits() const",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenEnum.cpp,"IRGenModule::getFunctionPointerSpareBits() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"getStructTypeInfoKind( const TypeInfo & type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructFieldInfo::StructFieldInfo( VarDecl * field , const TypeInfo & type)",2, 43, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructFieldInfo::getFieldName() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructFieldInfo::getType( IRGenModule & IGM , SILType T) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangFieldInfo::ClangFieldInfo( VarDecl * swiftField , const ElementLayout & layout , unsigned explosionBegin , unsigned explosionEnd)",4, 29, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangFieldInfo::getFieldName() const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangFieldInfo::getType( IRGenModule & IGM , SILType T) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::StructTypeInfoBase( StructTypeInfoKind kind , As && ... args)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::getFieldInfo( VarDecl * field) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::projectFieldFromExplosion( IRGenFunction & IGF , Explosion & in , VarDecl * field , Explosion & out) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::projectFieldAddress( IRGenFunction & IGF , Address addr , SILType T , const FieldInfoType & field) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::projectFieldAddress( IRGenFunction & IGF , Address addr , SILType T , VarDecl * field) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::getConstantFieldOffset( IRGenModule & IGM , VarDecl * field) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::getFieldAccessStrategy( IRGenModule & IGM , SILType T , VarDecl * field) const",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::getFieldIndex( IRGenModule & IGM , VarDecl * field) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::getFieldIndexIfNotEmpty( IRGenModule & IGM , VarDecl * field) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::isSingleRetainablePointer( ResilienceExpansion expansion , ReferenceCounting * rc) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeInfoBase::verify( IRGenTypeVerifierFunction & IGF , llvm :: Value * metadata , SILType structType) const",68, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordTypeInfo::ClangRecordTypeInfo( ArrayRef<ClangFieldInfo> fields , unsigned explosionSize , llvm :: Type * storageType , Size size , SpareBitVector && spareBits , Alignment align , const clang :: RecordDecl * clangDecl)",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordTypeInfo::initializeFromParams( IRGenFunction & IGF , Explosion & params , Address addr , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordTypeInfo::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordTypeInfo::getNonFixedOffsets( IRGenFunction & IGF) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordTypeInfo::getNonFixedOffsets( IRGenFunction & IGF , SILType T) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordTypeInfo::getNonFixedFieldAccessStrategy( IRGenModule & IGM , SILType T , const ClangFieldInfo & field) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"LoadableStructTypeInfo::LoadableStructTypeInfo( ArrayRef<StructFieldInfo> fields , unsigned explosionSize , llvm :: Type * storageType , Size size , SpareBitVector && spareBits , Alignment align , IsPOD_t isPOD , IsFixedSize_t alwaysFixedSize)",11, 7, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"LoadableStructTypeInfo::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"LoadableStructTypeInfo::initializeFromParams( IRGenFunction & IGF , Explosion & params , Address addr , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"LoadableStructTypeInfo::getNonFixedOffsets( IRGenFunction & IGF) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"LoadableStructTypeInfo::getNonFixedOffsets( IRGenFunction & IGF , SILType T) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"LoadableStructTypeInfo::getNonFixedFieldAccessStrategy( IRGenModule & IGM , SILType T , const StructFieldInfo & field) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"FixedStructTypeInfo::FixedStructTypeInfo( ArrayRef<StructFieldInfo> fields , llvm :: Type * T , Size size , SpareBitVector && spareBits , Alignment align , IsPOD_t isPOD , IsBitwiseTakable_t isBT , IsFixedSize_t alwaysFixedSize)",8, 7, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"FixedStructTypeInfo::getNonFixedOffsets( IRGenFunction & IGF) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"FixedStructTypeInfo::getNonFixedOffsets( IRGenFunction & IGF , SILType T) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"FixedStructTypeInfo::getNonFixedFieldAccessStrategy( IRGenModule & IGM , SILType T , const StructFieldInfo & field) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructNonFixedOffsets::StructNonFixedOffsets( SILType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructNonFixedOffsets::getOffsetForIndex( IRGenFunction & IGF , unsigned index)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructNonFixedOffsets::getFieldAccessStrategy( IRGenModule & IGM , unsigned nonFixedIndex)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"NonFixedStructTypeInfo::NonFixedStructTypeInfo( ArrayRef<StructFieldInfo> fields , FieldsAreABIAccessible_t fieldsAccessible , llvm :: Type * T , Alignment align , IsPOD_t isPOD , IsBitwiseTakable_t isBT , IsABIAccessible_t structAccessible)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"NonFixedStructTypeInfo::getSchema( ExplosionSchema & s) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"NonFixedStructTypeInfo::getNonFixedOffsets( IRGenFunction & IGF , SILType T) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"NonFixedStructTypeInfo::getNonFixedFieldAccessStrategy( IRGenModule & IGM , SILType T , const StructFieldInfo & field) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"NonFixedStructTypeInfo::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address structAddr , SILType structType , bool isOutlined) const",28, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"NonFixedStructTypeInfo::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * whichCase , llvm :: Value * numEmptyCases , Address structAddr , SILType structType , bool isOutlined) const",31, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeBuilder::StructTypeBuilder( IRGenModule & IGM , llvm :: StructType * structTy , CanType type)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeBuilder::createLoadable( ArrayRef<StructFieldInfo> fields , StructLayout && layout , unsigned explosionSize)",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeBuilder::createFixed( ArrayRef<StructFieldInfo> fields , StructLayout && layout)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeBuilder::createNonFixed( ArrayRef<StructFieldInfo> fields , FieldsAreABIAccessible_t fieldsAccessible , StructLayout && layout)",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeBuilder::getFieldInfo( unsigned index , VarDecl * field , const TypeInfo & fieldTI)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeBuilder::getType( VarDecl * field)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"StructTypeBuilder::performLayout( ArrayRef<const TypeInfo*> fieldTypes)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::ClangRecordLowering( IRGenModule & IGM , StructDecl * swiftDecl , const clang :: RecordDecl * clangDecl , SILType swiftType)",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::collectRecordFields()",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::createTypeInfo( llvm :: StructType * llvmType)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::collectUnionFields()",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::isImportOfClangField( VarDecl * swiftField , const clang :: FieldDecl * clangField)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::collectStructFields()",65, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::addStructField( const clang :: FieldDecl * clangField , VarDecl * swiftField)",18, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::addOpaqueBitField( unsigned bitBegin , unsigned bitEnd)",13, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::addOpaqueField( Size offset , Size fieldSize)",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::addField( VarDecl * swiftField , Size offset , const LoadableTypeInfo & fieldType)",10, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::addFieldInfo( VarDecl * swiftField , const LoadableTypeInfo & fieldType)",24, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ClangRecordLowering::addPaddingField( Size offset)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"irgen::projectPhysicalStructMemberAddress( IRGenFunction & IGF , Address base , SILType baseType , VarDecl * field)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"irgen::projectPhysicalStructMemberFromExplosion( IRGenFunction & IGF , SILType baseType , Explosion & base , VarDecl * field , Explosion & out)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"irgen::emitPhysicalStructMemberFixedOffset( IRGenModule & IGM , SILType baseType , VarDecl * field)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"irgen::getPhysicalStructMemberAccessStrategy( IRGenModule & IGM , SILType baseType , VarDecl * field)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"irgen::getPhysicalStructFieldIndex( IRGenModule & IGM , SILType baseType , VarDecl * field)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"IRGenModule::emitStructDecl( StructDecl * st)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"ResilientStructTypeInfo::ResilientStructTypeInfo( llvm :: Type * T , IsABIAccessible_t abiAccessible)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"TypeConverter::convertResilientStruct( IsABIAccessible_t abiAccessible)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenStruct.cpp,"TypeConverter::convertStructType( TypeBase * key , CanType type , StructDecl * D)",53, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"requiresHeapHeader( LayoutKind kind)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayout::StructLayout( IRGenModule & IGM , NominalTypeDecl * decl , LayoutKind layoutKind , LayoutStrategy strategy , ArrayRef<const TypeInfo*> types , llvm :: StructType * typeToFill)",63, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"irgen::applyLayoutAttributes( IRGenModule & IGM , NominalTypeDecl * decl , bool IsFixedLayout , Alignment & MinimumAlign)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayout::emitSize( IRGenModule & IGM) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayout::emitAlignMask( IRGenModule & IGM) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayout::emitCastTo( IRGenFunction & IGF , llvm :: Value * ptr , const llvm :: Twine & name) const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"ElementLayout::project( IRGenFunction & IGF , Address baseAddr , NonFixedOffsets offsets , const llvm :: Twine & suffix) const",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addHeapHeader()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addNSObjectHeader()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addFields( llvm :: MutableArrayRef<ElementLayout> elts , LayoutStrategy strategy)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addField( ElementLayout & elt , LayoutStrategy strategy)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addFixedSizeElement( ElementLayout & elt)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addNonFixedSizeElement( ElementLayout & elt)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addEmptyElement( ElementLayout & elt)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addElementAtFixedOffset( ElementLayout & elt)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addElementAtNonFixedOffset( ElementLayout & elt)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::addNonFixedSizeElementAtOffsetZero( ElementLayout & elt)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::getAsAnonStruct() const",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/StructLayout.cpp,"StructLayoutBuilder::setAsBodyOfStruct( llvm :: StructType * type) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"irgen::emitArchetypeTypeMetadataRef( IRGenFunction & IGF , CanArchetypeType archetype , DynamicMetadataRequest request)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"OpaqueArchetypeTypeInfo::OpaqueArchetypeTypeInfo( llvm :: Type * type)",2, 50, 4, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"OpaqueArchetypeTypeInfo::create( llvm :: Type * type)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"OpaqueArchetypeTypeInfo::collectMetadataForOutlining( OutliningMetadataCollector & collector , SILType T) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"ClassArchetypeTypeInfo::ClassArchetypeTypeInfo( llvm :: PointerType * storageType , Size size , const SpareBitVector & spareBits , Alignment align , ReferenceCounting refCount)",7, 5, 2, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"ClassArchetypeTypeInfo::create( llvm :: PointerType * storageType , Size size , const SpareBitVector & spareBits , Alignment align , ReferenceCounting refCount)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"ClassArchetypeTypeInfo::getReferenceCounting() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"FixedSizeArchetypeTypeInfo::FixedSizeArchetypeTypeInfo( llvm :: Type * type , Size size , Alignment align , const SpareBitVector & spareBits)",3, 65, 6, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"FixedSizeArchetypeTypeInfo::create( llvm :: Type * type , Size size , Alignment align , const SpareBitVector & spareBits)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"irgen::emitArchetypeWitnessTableRef( IRGenFunction & IGF , CanArchetypeType archetype , ProtocolDecl * protocol)",108, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"irgen::emitAssociatedTypeMetadataRef( IRGenFunction & IGF , CanArchetypeType origin , AssociatedType association , DynamicMetadataRequest request)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"TypeConverter::convertArchetypeType( ArchetypeType * archetype)",68, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"setMetadataRef( IRGenFunction & IGF , ArchetypeType * archetype , llvm :: Value * metadata , MetadataState metadataState)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"setWitnessTable( IRGenFunction & IGF , ArchetypeType * archetype , unsigned protocolIndex , llvm :: Value * wtable)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"IRGenFunction::bindArchetype( ArchetypeType * archetype , llvm :: Value * metadata , MetadataState metadataState , ArrayRef<llvm::Value*> wtables)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenArchetype.cpp,"irgen::emitDynamicTypeOfOpaqueArchetype( IRGenFunction & IGF , Address addr , SILType type)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/ClassLayout.cpp,"ClassLayout::ClassLayout( const StructLayoutBuilder & builder , bool isFixedSize , bool metadataRequiresInitialization , bool metadataRequiresRelocation , llvm :: Type * classTy , ArrayRef<VarDecl*> allStoredProps , ArrayRef<FieldAccess> allFieldAccesses , ArrayRef<ElementLayout> allElements)",18, 33, 4, 0
repos/cpp/swift/lib/IRGen/ClassLayout.cpp,"ClassLayout::getInstanceStart() const",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenThunk.cpp,"IRGenModule::getAddrOfDispatchThunk( SILDeclRef declRef , ForDefinition_t forDefinition)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenThunk.cpp,"lookupMethod( IRGenFunction & IGF , SILDeclRef declRef)",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenThunk.cpp,"IRGenModule::emitDispatchThunk( SILDeclRef declRef)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenThunk.cpp,"IRGenModule::defineMethodDescriptor( SILDeclRef declRef , NominalTypeDecl * nominalDecl , llvm :: Constant * definition)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenThunk.cpp,"IRGenModule::getAddrOfMethodDescriptor( SILDeclRef declRef , ForDefinition_t forDefinition)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenThunk.cpp,"IRGenModule::getAddrOfMethodLookupFunction( ClassDecl * classDecl , ForDefinition_t forDefinition)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenThunk.cpp,"IRGenModule::emitMethodLookupFunction( ClassDecl * classDecl)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"LayoutScanner::LayoutScanner( As && ... args)",1, 74, 2, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"LayoutScanner::noteAddressPoint()",1, 63, 2, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"LayoutScanner::getNextOffset() const",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"LayoutScanner::getAddressPoint() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"LayoutScanner::getMetadataSize() const",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"IRGenModule::getClassMetadataLayout( ClassDecl * decl)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"IRGenModule::getForeignMetadataLayout( ClassDecl * decl)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"IRGenModule::getMetadataLayout( EnumDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"IRGenModule::getMetadataLayout( StructDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"IRGenModule::getNominalMetadataLayout( NominalTypeDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"IRGenModule::getMetadataLayout( NominalTypeDecl * decl)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"IRGenModule::destroyMetadataLayoutMap()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"MetadataLayout::destroy() const",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"NominalMetadataLayout::emitOffset( IRGenFunction & IGF , StoredOffset offset) const",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"NominalMetadataLayout::getStaticGenericRequirementsOffset() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"NominalMetadataLayout::getGenericRequirementsOffset( IRGenFunction & IGF) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"emitLoadOfGenericRequirement( IRGenFunction & IGF , llvm :: Value * metadata , NominalTypeDecl * decl , unsigned reqtIndex , llvm :: Type * reqtTy)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"irgen::emitArgumentMetadataRef( IRGenFunction & IGF , NominalTypeDecl * decl , const GenericTypeRequirements & reqts , unsigned reqtIndex , llvm :: Value * metadata)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"irgen::emitArgumentWitnessTableRef( IRGenFunction & IGF , NominalTypeDecl * decl , const GenericTypeRequirements & reqts , unsigned reqtIndex , llvm :: Value * metadata)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"irgen::emitAddressOfFieldOffsetVector( IRGenFunction & IGF , llvm :: Value * metadata , NominalTypeDecl * decl)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::ClassMetadataLayout( IRGenModule & IGM , ClassDecl * decl)",113, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getMetadataSizeOffset() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getMetadataAddressPointOffset() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getInstanceSizeOffset() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getInstanceAlignMaskOffset() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getMethodInfo( IRGenFunction & IGF , SILDeclRef method) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getFieldOffset( IRGenFunction & IGF , VarDecl * field) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getStaticFieldOffset( VarDecl * field) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getRelativeGenericRequirementsOffset() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getStaticFieldOffsetVectorOffset() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getRelativeFieldOffsetVectorOffset() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getStaticVTableOffset() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getRelativeVTableOffset() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ClassMetadataLayout::getFieldOffsetVectorOffset( IRGenFunction & IGF) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"irgen::getClassFieldOffsetOffset( IRGenModule & IGM , ClassDecl * theClass , VarDecl * field)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"irgen::emitClassFieldOffset( IRGenFunction & IGF , ClassDecl * theClass , VarDecl * field , llvm :: Value * metadata)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"irgen::emitAddressOfClassFieldOffset( IRGenFunction & IGF , llvm :: Value * metadata , ClassDecl * theClass , VarDecl * field)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"irgen::emitAddressOfSuperclassRefInClassMetadata( IRGenFunction & IGF , llvm :: Value * metadata)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"EnumMetadataLayout::EnumMetadataLayout( IRGenModule & IGM , EnumDecl * decl)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"EnumMetadataLayout::getPayloadSizeOffset() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"StructMetadataLayout::StructMetadataLayout( IRGenModule & IGM , StructDecl * decl)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"StructMetadataLayout::getFieldOffset( IRGenFunction & IGF , VarDecl * field) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"StructMetadataLayout::getStaticFieldOffset( VarDecl * field) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"StructMetadataLayout::getFieldOffsetVectorOffset() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataLayout.cpp,"ForeignClassMetadataLayout::ForeignClassMetadataLayout( IRGenModule & IGM , ClassDecl * theClass)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCoverage.cpp,"getCoverageSection( IRGenModule & IGM)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCoverage.cpp,"IRGenModule::emitCoverageMapping()",131, 2, 0, 0
repos/cpp/swift/lib/IRGen/Fulfillment.cpp,"isLeafTypeMetadata( CanType type)",69, 2, 0, 0
repos/cpp/swift/lib/IRGen/Fulfillment.cpp,"FulfillmentMap::searchTypeMetadata( IRGenModule & IGM , CanType type , IsExact_t isExact , MetadataState metadataState , unsigned source , MetadataPath && path , const InterestingKeysCallback & keys)",53, 2, 0, 0
repos/cpp/swift/lib/IRGen/Fulfillment.cpp,"FulfillmentMap::searchConformance( IRGenModule & IGM , const ProtocolConformance * conformance , unsigned sourceIndex , MetadataPath && path , const InterestingKeysCallback & interestingKeys)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/Fulfillment.cpp,"FulfillmentMap::searchWitnessTable( IRGenModule & IGM , CanType type , ProtocolDecl * protocol , unsigned source , MetadataPath && path , const InterestingKeysCallback & keys)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/Fulfillment.cpp,"FulfillmentMap::searchWitnessTable( IRGenModule & IGM , CanType type , ProtocolDecl * protocol , unsigned source , MetadataPath && path , const InterestingKeysCallback & keys , llvm :: SmallPtrSetImpl<ProtocolDecl*> * interestingConformances)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/Fulfillment.cpp,"FulfillmentMap::searchNominalTypeMetadata( IRGenModule & IGM , CanType type , MetadataState metadataState , unsigned source , MetadataPath && path , const InterestingKeysCallback & keys)",55, 2, 0, 0
repos/cpp/swift/lib/IRGen/Fulfillment.cpp,"FulfillmentMap::addFulfillment( FulfillmentKey key , unsigned source , MetadataPath && path , MetadataState metadataState)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/Fulfillment.cpp,"getStateName( MetadataState state)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/Fulfillment.cpp,"FulfillmentMap::dump() const",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"createStructType( IRGenModule & IGM , StringRef name , std :: initializer_list<llvm::Type*> types , bool packed = false)",9, 3, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"createStructPointerType( IRGenModule & IGM , StringRef name , std :: initializer_list<llvm::Type*> types)",5, 3, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"createClangCodeGenerator( ASTContext & Context , llvm :: LLVMContext & LLVMContext , IRGenOptions & Opts , StringRef ModuleName)",52, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::IRGenModule( IRGenerator & irgen , std :: unique_ptr<llvm::TargetMachine> && target , SourceFile * SF , llvm :: LLVMContext & LLVMContext , StringRef ModuleName , StringRef OutputFilename , StringRef MainInputFilenameForDebugInfo)",354, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::~IRGenModule()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"isReturnAttribute( llvm :: Attribute :: AttrKind Attr)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"isReturnedAttribute( llvm :: Attribute :: AttrKind Attr)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"isStandardLibrary( const llvm :: Module & M)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::isStandardLibrary() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"swift::getRuntimeFn( llvm :: Module & Module , llvm :: Constant * & cache , const char * name , llvm :: CallingConv :: ID cc , llvm :: ArrayRef<llvm::Type*> retTypes , llvm :: ArrayRef<llvm::Type*> argTypes , ArrayRef<Attribute::AttrKind> attrs)",55, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::createStringConstant( StringRef Str , bool willBeRelativelyAddressed , StringRef sectionName)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getObjCEmptyCachePtr()",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getObjCEmptyVTablePtr()",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getAddrOfObjCISAMask()",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getSwiftModule() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getSILTypes() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getClangCGM() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getModule() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::releaseModule()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenerator::canEmitWitnessTableLazily( SILWitnessTable * wt)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenerator::addLazyWitnessTable( const ProtocolConformance * Conf)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenerator::addClassForEagerInitialization( ClassDecl * ClassDecl)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getAllocAttrs()",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"swift::irgen::shouldRemoveTargetFeature( StringRef feature)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::constructInitialFnAttributes( llvm :: AttrBuilder & Attrs , OptimizationMode FuncOptMode)",39, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::constructInitialAttributes()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getInt32( uint32_t value)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getSize( Size size)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::getOpaquePtr( llvm :: Constant * ptr)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"appendEncodedName( raw_ostream & os , StringRef name)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"appendEncodedName( llvm :: SmallVectorImpl<char> & buf , StringRef name)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"swift::irgen::encodeForceLoadSymbolName( llvm :: SmallVectorImpl<char> & buf , StringRef name)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"getTargetDependentLibraryOption( const llvm :: Triple & T , StringRef library)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::addLinkLibrary( const LinkLibrary & linkLib)",50, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"replaceModuleFlagsEntry( llvm :: LLVMContext & Ctx , llvm :: Module & Module , StringRef EntryName , llvm :: Module :: ModFlagBehavior Behavior , llvm :: Metadata * Val)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"isFirstObjectFileInModule( IRGenModule & IGM)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::emitAutolinkInfo()",71, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::cleanupClangCodeGenMetadata()",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::finalize()",49, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::emitLazyPrivateDefinitions()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::createProfileWeights( uint64_t TrueCount , uint64_t FalseCount) const",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::unimplemented( SourceLoc loc , StringRef message)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::fatal_unimplemented( SourceLoc loc , StringRef message)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::error( SourceLoc loc , const Twine & message)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenModule::useDllStorage()",1, 70, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenerator::addGenModule( SourceFile * SF , IRGenModule * IGM)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenerator::getGenModule( DeclContext * ctxt)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenerator::getGenModule( SILFunction * f)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenerator::getEffectiveClangTriple()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenModule.cpp,"IRGenerator::getClangDataLayout()",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenFunction::emitObjCStrongRelease( llvm :: Value * value)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getCastOfRetainFn( IRGenModule & IGM , llvm :: Constant * fn , llvm :: Type * valueTy)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenFunction::emitObjCStrongRetain( llvm :: Value * v)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenFunction::emitObjCRetainCall( llvm :: Value * value)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenFunction::emitObjCAutoreleaseCall( llvm :: Value * val)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::getObjCRetainAutoreleasedReturnValueMarker()",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCRetainAutoreleasedReturnValue( IRGenFunction & IGF , llvm :: Value * value)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCAutoreleaseReturnValue( IRGenFunction & IGF , llvm :: Value * value)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"UnknownTypeInfo::UnknownTypeInfo( llvm :: PointerType * storageType , Size size , SpareBitVector spareBits , Alignment align)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"UnknownTypeInfo::getReferenceCounting() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"TypeConverter::convertBuiltinUnknownObject()",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"BridgeObjectTypeInfo::BridgeObjectTypeInfo( llvm :: PointerType * storageType , Size size , SpareBitVector spareBits , Alignment align)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"BridgeObjectTypeInfo::getReferenceCounting() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"TypeConverter::convertBuiltinBridgeObject()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::getObjCClassPtrTypeInfo()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"TypeConverter::getObjCClassPtrTypeInfo()",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::getAddrOfObjCMethodName( StringRef selector)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::getAddrOfObjCSelectorRef( StringRef selector)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::getAddrOfObjCProtocolRecord( ProtocolDecl * proto , ForDefinition_t forDefinition)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::getAddrOfObjCProtocolRef( ProtocolDecl * proto , ForDefinition_t forDefinition)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::getObjCProtocolGlobalVars( ProtocolDecl * proto)",44, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::emitLazyObjCProtocolDefinition( ProtocolDecl * proto)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::emitLazyObjCProtocolDefinitions()",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"Selector::Selector( FuncDecl * method)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"Selector::Selector( ConstructorDecl * ctor)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"Selector::Selector( ValueDecl * methodOrCtorOrDtor)",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"Selector::Selector( AbstractStorageDecl * asd , ForGetter_t)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"Selector::Selector( AbstractStorageDecl * asd , ForSetter_t)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"Selector::Selector( SILDeclRef ref)",33, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"Selector::str() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenModule::getAddrOfObjCSelectorRef( SILDeclRef method)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"emitSuperArgument( IRGenFunction & IGF , bool isInstanceMethod , llvm :: Value * selfValue , CanType searchClass)",47, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getMsgSendSuperTy( IRGenModule & IGM , llvm :: FunctionType * fnTy , bool indirectResult)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::getObjCMethodCallee( IRGenFunction & IGF , const ObjCMethod & methodInfo , llvm :: Value * selfValue , CalleeInfo && info)",78, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCAllocObjectCall( IRGenFunction & IGF , llvm :: Value * self , SILType selfType)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"emitObjCPartialApplicationForwarder( IRGenModule & IGM , ObjCMethod method , CanSILFunctionType origMethodType , CanSILFunctionType resultType , const HeapLayout & layout , SILType selfType)",184, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCPartialApplication( IRGenFunction & IGF , ObjCMethod method , CanSILFunctionType origMethodType , CanSILFunctionType resultType , llvm :: Value * self , SILType selfType , Explosion & out)",45, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"findSwiftAsObjCThunk( IRGenModule & IGM , SILDeclRef ref , SILFunction * & SILFn)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCGetterPointer( IRGenModule & IGM , AbstractStorageDecl * property , SILFunction * & silFn)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCSetterPointer( IRGenModule & IGM , AbstractStorageDecl * property , SILFunction * & silFn)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCMethodPointer( IRGenModule & IGM , FuncDecl * method , SILFunction * & silFn)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCMethodPointer( IRGenModule & IGM , ConstructorDecl * constructor , SILFunction * & silFn)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCMethodPointer( IRGenModule & IGM , DestructorDecl * destructor , SILFunction * & silFn)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCMethodRef( AbstractFunctionDecl * method)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCMethodType( IRGenModule & IGM , AbstractFunctionDecl * method)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCPropertyType( IRGenModule & IGM , VarDecl * property)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::getObjCEncodingForPropertyType( IRGenModule & IGM , VarDecl * property , std :: string & s)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"HelperGetObjCEncodingForType( const clang :: ASTContext & Context , clang :: CanQualType T , std :: string & S , bool Extended)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCEncodingForTypes( IRGenModule & IGM , SILType resultType , ArrayRef<SILParameterInfo> params , StringRef fixedParamsString , Size :: int_type parmOffset , bool useExtendedEncoding)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"getObjCEncodingForMethodType( IRGenModule & IGM , CanSILFunctionType fnType , bool useExtendedEncoding)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCMethodDescriptorParts( IRGenModule & IGM , AbstractFunctionDecl * method , bool concrete , llvm :: Constant * & selectorRef , llvm :: Constant * & atEncoding , llvm :: Constant * & impl)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCGetterDescriptorParts( IRGenModule & IGM , VarDecl * property , llvm :: Constant * & selectorRef , llvm :: Constant * & atEncoding , llvm :: Constant * & impl)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCGetterDescriptorParts( IRGenModule & IGM , SubscriptDecl * subscript , llvm :: Constant * & selectorRef , llvm :: Constant * & atEncoding , llvm :: Constant * & impl)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCGetterDescriptorParts( IRGenModule & IGM , AbstractStorageDecl * decl , llvm :: Constant * & selectorRef , llvm :: Constant * & atEncoding , llvm :: Constant * & impl)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCSetterDescriptorParts( IRGenModule & IGM , VarDecl * property , llvm :: Constant * & selectorRef , llvm :: Constant * & atEncoding , llvm :: Constant * & impl)",38, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCSetterDescriptorParts( IRGenModule & IGM , SubscriptDecl * subscript , llvm :: Constant * & selectorRef , llvm :: Constant * & atEncoding , llvm :: Constant * & impl)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCSetterDescriptorParts( IRGenModule & IGM , AbstractStorageDecl * decl , llvm :: Constant * & selectorRef , llvm :: Constant * & atEncoding , llvm :: Constant * & impl)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"buildMethodDescriptor( ConstantArrayBuilder & descriptors , llvm :: Constant * selectorRef , llvm :: Constant * atEncoding , llvm :: Constant * impl)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCMethodDescriptor( IRGenModule & IGM , ConstantArrayBuilder & descriptors , AbstractFunctionDecl * method)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCIVarInitDestroyDescriptor( IRGenModule & IGM , ConstantArrayBuilder & descriptors , ClassDecl * cd , llvm :: Function * objcImpl , bool isDestroyer)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::getMethodTypeExtendedEncoding( IRGenModule & IGM , AbstractFunctionDecl * method)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::getBlockTypeExtendedEncoding( IRGenModule & IGM , CanSILFunctionType invokeTy)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCGetterDescriptor( IRGenModule & IGM , ConstantArrayBuilder & descriptors , AbstractStorageDecl * storage)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::emitObjCSetterDescriptor( IRGenModule & IGM , ConstantArrayBuilder & descriptors , AbstractStorageDecl * storage)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::requiresObjCMethodDescriptor( FuncDecl * method)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::requiresObjCMethodDescriptor( ConstructorDecl * constructor)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::requiresObjCPropertyDescriptor( IRGenModule & IGM , VarDecl * property)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"irgen::requiresObjCSubscriptDescriptor( IRGenModule & IGM , SubscriptDecl * subscript)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenFunction::emitBlockCopyCall( llvm :: Value * value)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenObjC.cpp,"IRGenFunction::emitBlockRelease( llvm :: Value * value)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::getConformsTo( Type t)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::getSuperclassBound( Type t)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::getSources() const",1, 66, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::getSource( size_t SourceIndex) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::FulfillmentMapCallback::FulfillmentMapCallback( PolymorphicConvention & self)",1, 72, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::FulfillmentMapCallback::isInterestingType( CanType type) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::FulfillmentMapCallback::hasInterestingType( CanType type) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::FulfillmentMapCallback::hasLimitedInterestingConformances( CanType type) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::FulfillmentMapCallback::getInterestingConformances( CanType type) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::FulfillmentMapCallback::getSuperclassBound( CanType type) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::PolymorphicConvention( IRGenModule & IGM , CanSILFunctionType fnType)",47, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::addPseudogenericFulfillments()",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::enumerateGenericSignatureRequirements( CanGenericSignature signature , const RequirementCallback & callback)",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::enumerateRequirements( const RequirementCallback & callback)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::enumerateUnfulfilledRequirements( const RequirementCallback & callback)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::initGenerics()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::considerNewTypeSource( MetadataSource :: Kind kind , unsigned paramIndex , CanType type , IsExact_t isExact)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::considerType( CanType type , IsExact_t isExact , unsigned sourceIndex , MetadataPath && path)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::considerWitnessSelf( CanSILFunctionType fnType)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::considerObjCGenericSelf( CanSILFunctionType fnType)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::considerParameter( SILParameterInfo param , unsigned paramIndex , bool isSelfParameter)",60, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::addSelfMetadataFulfillment( CanType arg)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::addSelfWitnessTableFulfillment( CanType arg , ProtocolConformanceRef conformance)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"PolymorphicConvention::getFulfillmentForTypeMetadata( CanType type) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::enumerateGenericParamFulfillments( IRGenModule & IGM , CanSILFunctionType fnType , GenericParamFulfillmentCallback callback)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicParameters::EmitPolymorphicParameters( IRGenFunction & IGF , SILFunction & Fn)",4, 24, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicParameters::getTypeInContext( CanType type) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicParameters::getArgTypeInContext( unsigned paramIndex) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicParameters::bindExtraSource( const MetadataSource & source , Explosion & in , WitnessMetadata * witnessMetadata)",71, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicParameters::bindParameterSources( const GetParameterFn & getParameter)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicParameters::bindParameterSource( SILParameterInfo param , unsigned paramIndex , const GetParameterFn & getParameter)",39, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicParameters::isClassPointerSource( unsigned paramIndex)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"BindPolymorphicParameter::BindPolymorphicParameter( IRGenFunction & IGF , CanSILFunctionType & origFnType , CanSILFunctionType & SubstFnType)",4, 36, 6, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"BindPolymorphicParameter::isClassPointerSource( unsigned paramIndex)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"BindPolymorphicParameter::emit( Explosion & nativeParam , unsigned paramIndex)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::bindPolymorphicParameter( IRGenFunction & IGF , CanSILFunctionType & OrigFnType , CanSILFunctionType & SubstFnType , Explosion & nativeParam , unsigned paramIndex)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"shouldSetName( IRGenModule & IGM , llvm :: Value * value , CanType type)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::setTypeMetadataName( IRGenModule & IGM , llvm :: Value * metadata , CanType type)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::setProtocolWitnessTableName( IRGenModule & IGM , llvm :: Value * wtable , CanType type , ProtocolDecl * requirement)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableLayout::WitnessTableLayout( ProtocolInfoKind resultKind)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableLayout::shouldVisitRequirementSignatureOnly()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableLayout::addProtocolConformanceDescriptor()",1, 48, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableLayout::addOutOfLineBaseProtocol( ProtocolDecl * baseProto)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableLayout::addMethod( SILDeclRef func)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableLayout::addPlaceholder( MissingMemberDecl * placeholder)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableLayout::addAssociatedType( AssociatedType requirement)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableLayout::addAssociatedConformance( const AssociatedConformance & req)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableLayout::getEntries() const",1, 71, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolPath::ProtocolPath( IRGenModule & IGM , ArrayRef<T> origins , ProtocolDecl * dest)",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolPath::getOriginIndex() const",1, 60, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolPath::apply( IRGenFunction & IGF , llvm :: Value * wtable) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolPath::considerOrigin( ProtocolDecl * origin , const ProtocolInfo & originInfo , unsigned originIndex)",21, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolPath::findBetterPath( ProtocolDecl * proto , const ProtocolInfo & protoInfo , unsigned lengthSoFar)",61, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"isResilientConformance( const NormalProtocolConformance * conformance)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"isResilientConformance( const RootProtocolConformance * root)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"hasDependentTypeWitness( const NormalProtocolConformance * conformance)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"isDependentConformance( const RootProtocolConformance * rootConformance , bool considerResilience , llvm :: SmallPtrSet<const NormalProtocolConformance*,4> & visited)",46, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"isDependentConformance( const RootProtocolConformance * conformance , bool considerResilience)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"isSynthesizedNonUnique( const RootProtocolConformance * conformance)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"emitConditionalConformancesBuffer( IRGenFunction & IGF , const ProtocolConformance * substConformance)",45, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"emitWitnessTableAccessorCall( IRGenFunction & IGF , const ProtocolConformance * conformance , llvm :: Value ** srcMetadataCache)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"getWitnessTableLazyAccessFunction( IRGenModule & IGM , const ProtocolConformance * conformance)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"mapConformanceIntoContext( IRGenModule & IGM , const RootProtocolConformance & conf , DeclContext * dc)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolInfo::getAssociatedTypeIndex( IRGenModule & IGM , AssociatedType assocType) const",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"DirectConformanceInfo::DirectConformanceInfo( const RootProtocolConformance * C)",2, 30, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"DirectConformanceInfo::getTable( IRGenFunction & IGF , llvm :: Value ** conformingMetadataCache) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"DirectConformanceInfo::tryGetConstantTable( IRGenModule & IGM , CanType conformingType) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"AccessorConformanceInfo::AccessorConformanceInfo( const ProtocolConformance * C)",1, 76, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"AccessorConformanceInfo::getTable( IRGenFunction & IGF , llvm :: Value ** typeMetadataCache) const",18, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"AccessorConformanceInfo::tryGetConstantTable( IRGenModule & IGM , CanType conformingType) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::WitnessTableBuilder( IRGenModule & IGM , ConstantArrayBuilder & table , SILWitnessTable * SILWT)",22, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::getTableSize() const",1, 56, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::getTablePrivateSize() const",1, 74, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::requiresSpecialization() const",1, 75, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::addProtocolConformanceDescriptor()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::addOutOfLineBaseProtocol( ProtocolDecl * baseProto)",40, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::addMethod( SILDeclRef requirement)",32, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::addPlaceholder( MissingMemberDecl * placeholder)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::addAssociatedType( AssociatedType requirement)",31, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::addAssociatedConformance( AssociatedConformance requirement)",42, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::addConditionalConformances()",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::getNextPrivateDataIndex()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::getAddressOfPrivateDataSlot( IRGenFunction & IGF , Address table , unsigned index)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::getFulfillmentMap()",32, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::build()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"IRGenModule::getAssociatedTypeWitness( CanType type , bool inProtocolContext)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"buildAssociatedTypeValueName( CanType depAssociatedType , SmallString<128> & name)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::getAssociatedConformanceWitness( AssociatedConformance requirement , CanType associatedType , ProtocolConformanceRef conformance)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::defineAssociatedTypeWitnessTableAccessFunction( AssociatedConformance requirement , CanType associatedType , ProtocolConformanceRef associatedConformance)",123, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::collectResilientWitnesses( SmallVectorImpl<llvm::Constant*> & resilientWitnesses)",77, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"WitnessTableBuilder::buildInstantiationFunction()",69, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::ProtocolConformanceDescriptorBuilder( IRGenModule & IGM , ConstantStructBuilder & B , const ConformanceDescription & description)",6, 64, 8, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::layout()",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::addProtocol()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::addConformingType()",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::addWitnessTable()",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::addFlags()",17, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::addContext()",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::addConditionalRequirements()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::addResilientWitnesses()",54, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolConformanceDescriptorBuilder::addGenericWitnessTable()",26, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"IRGenModule::emitProtocolConformance( const ConformanceDescription & record)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"IRGenModule::ensureRelativeSymbolCollocation( SILWitnessTable & wt)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"IRGenModule::getProtocolInfo( ProtocolDecl * protocol , ProtocolInfoKind kind)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"TypeConverter::getProtocolInfo( ProtocolDecl * protocol , ProtocolInfoKind kind)",34, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ProtocolInfo::create( ArrayRef<WitnessTableEntry> table , ProtocolInfoKind kind)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ConformanceInfo::anchor()",1, 34, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"IRGenModule::getConformanceInfo( const ProtocolDecl * protocol , const ProtocolConformance * conformance)",47, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"isConstantWitnessTable( SILWitnessTable * wt)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"IRGenModule::emitSILWitnessTable( SILWitnessTable * wt)",68, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::hasPolymorphicParameters( CanSILFunctionType ty)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicParameters::emit( Explosion & in , WitnessMetadata * witnessMetadata , const GetParameterFn & getParameter)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"MetadataPath::followFromTypeMetadata( IRGenFunction & IGF , CanType sourceType , MetadataResponse source , DynamicMetadataRequest request , Map<MetadataResponse> * cache) const",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"MetadataPath::followFromWitnessTable( IRGenFunction & IGF , CanType conformingType , ProtocolConformanceRef conformance , MetadataResponse source , DynamicMetadataRequest request , Map<MetadataResponse> * cache) const",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"MetadataPath::follow( IRGenFunction & IGF , LocalTypeDataKey sourceKey , MetadataResponse source , iterator begin , iterator end , DynamicMetadataRequest finalRequest , Map<MetadataResponse> * cache)",82, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"emitAssociatedTypeWitnessTableRef( IRGenFunction & IGF , llvm :: Value * parentMetadata , llvm :: Value * wtable , AssociatedConformance conformance , llvm :: Value * associatedTypeMetadata)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"MetadataPath::followComponent( IRGenFunction & IGF , LocalTypeDataKey & sourceKey , MetadataResponse source , Component component , DynamicMetadataRequest request)",202, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"MetadataPath::dump() const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"MetadataPath::print( llvm :: raw_ostream & out) const",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::collectTrailingWitnessMetadata( IRGenFunction & IGF , SILFunction & fn , Explosion & params , WitnessMetadata & witnessMetadata)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitPolymorphicParameters( IRGenFunction & IGF , SILFunction & Fn , Explosion & in , WitnessMetadata * witnessMetadata , const GetParameterFn & getParameter)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitPolymorphicParametersFromArray( IRGenFunction & IGF , NominalTypeDecl * typeDecl , Address array , MetadataState state)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"NecessaryBindings::getBufferSize( IRGenModule & IGM) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"NecessaryBindings::restore( IRGenFunction & IGF , Address buffer , MetadataState metadataState) const",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"NecessaryBindings::save( IRGenFunction & IGF , Address buffer) const",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"NecessaryBindings::addTypeMetadata( CanType type)",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"NecessaryBindings::addProtocolConformance( CanType type , ProtocolConformanceRef conf)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitImpliedWitnessTableRef( IRGenFunction & IGF , ArrayRef<ProtocolEntry> entries , ProtocolDecl * target , const GetWitnessTableFn & getWitnessTable)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitWitnessTableRef( IRGenFunction & IGF , CanType srcType , ProtocolConformanceRef conformance)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitWitnessTableRef( IRGenFunction & IGF , CanType srcType , llvm :: Value ** srcMetadataCache , ProtocolConformanceRef conformance)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"getSubstSelfType( CanSILFunctionType origFnType , SubstitutionMap subs)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicArguments::EmitPolymorphicArguments( IRGenFunction & IGF , CanSILFunctionType polyFn)",3, 60, 6, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicArguments::emitEarlySources( SubstitutionMap subs , Explosion & out)",23, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitPolymorphicArguments( IRGenFunction & IGF , CanSILFunctionType origFnType , SubstitutionMap subs , WitnessMetadata * witnessMetadata , Explosion & out)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"EmitPolymorphicArguments::emit( SubstitutionMap subs , WitnessMetadata * witnessMetadata , Explosion & out)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"NecessaryBindings::forFunctionInvocations( IRGenModule & IGM , CanSILFunctionType origType , SubstitutionMap subs)",50, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"GenericTypeRequirements::GenericTypeRequirements( IRGenModule & IGM , NominalTypeDecl * typeDecl)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"GenericTypeRequirements::enumerateFulfillments( IRGenModule & IGM , SubstitutionMap subs , FulfillmentCallback callback)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"GenericTypeRequirements::emitInitOfBuffer( IRGenFunction & IGF , SubstitutionMap subs , Address buffer)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitInitOfGenericRequirementsBuffer( IRGenFunction & IGF , ArrayRef<GenericRequirement> requirements , Address buffer , EmitGenericRequirementFn emitRequirement)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitGenericRequirementFromSubstitutions( IRGenFunction & IGF , CanGenericSignature generics , ModuleDecl & module , GenericRequirement requirement , SubstitutionMap subs)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"GenericTypeRequirements::bindFromBuffer( IRGenFunction & IGF , Address buffer , MetadataState metadataState , GetTypeParameterInContextFn getInContext)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::bindFromGenericRequirementsBuffer( IRGenFunction & IGF , ArrayRef<GenericRequirement> requirements , Address buffer , MetadataState metadataState , GetTypeParameterInContextFn getInContext)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::bindGenericRequirement( IRGenFunction & IGF , GenericRequirement requirement , llvm :: Value * value , MetadataState metadataState , GetTypeParameterInContextFn getInContext)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ExpandPolymorphicSignature::ExpandPolymorphicSignature( IRGenModule & IGM , CanSILFunctionType fn)",2, 42, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ExpandPolymorphicSignature::expand( SmallVectorImpl<llvm::Type*> & out)",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"ExpandPolymorphicSignature::addEarlySource( const MetadataSource & source , SmallVectorImpl<llvm::Type*> & out)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::expandPolymorphicSignature( IRGenModule & IGM , CanSILFunctionType polyFn , SmallVectorImpl<llvm::Type*> & out)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::expandTrailingWitnessSignature( IRGenModule & IGM , CanSILFunctionType polyFn , SmallVectorImpl<llvm::Type*> & out)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitWitnessMethodValue( IRGenFunction & IGF , llvm :: Value * wtable , SILDeclRef member)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitWitnessMethodValue( IRGenFunction & IGF , CanType baseTy , llvm :: Value ** baseMetadataCache , SILDeclRef member , ProtocolConformanceRef conformance)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::computeResilientWitnessTableIndex( IRGenFunction & IGF , ProtocolDecl * proto , llvm :: Constant * reqtDescriptor)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitAssociatedTypeMetadataRef( IRGenFunction & IGF , llvm :: Value * parentMetadata , llvm :: Value * wtable , AssociatedType associatedType , DynamicMetadataRequest request)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"IRGenModule::getAssociatedTypeWitnessTableAccessFunctionSignature()",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"irgen::emitProtocolDescriptorRef( IRGenFunction & IGF , ProtocolDecl * protocol)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenProto.cpp,"IRGenModule::getAddrOfGenericEnvironment( CanGenericSignature signature)",54, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitAddressOfMetadataSlotAtIndex( IRGenFunction & IGF , llvm :: Value * metadata , int index , llvm :: Type * objectTy)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitLoadFromMetadataAtIndex( IRGenFunction & IGF , llvm :: Value * metadata , int index , llvm :: Type * objectTy , const llvm :: Twine & suffix = "")",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"createPointerSizedGEP( IRGenFunction & IGF , Address base , Size offset)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenModule::setTrueConstGlobal( llvm :: GlobalVariable * var)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"needsSingletonMetadataInitialization( IRGenModule & IGM , NominalTypeDecl * typeDecl)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitMetadataCompletionFunction( IRGenModule & IGM , NominalTypeDecl * typeDecl , llvm :: function_ref<MetadataCompletionBodyEmitter> body)",38, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"needsForeignMetadataCompletionFunction( StructDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"needsForeignMetadataCompletionFunction( EnumDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"needsForeignMetadataCompletionFunction( ClassDecl * decl)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"getMethodDescriptorFlags( ValueDecl * fn)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::asImpl()",1, 57, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::ContextDescriptorBuilderBase( IRGenModule & IGM)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::layout()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::addFlags()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::addParent()",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::addGenericSignature()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::addGenericParametersHeader()",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::addGenericParameters()",24, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::addGenericParameter( GenericParamKind kind , bool isKeyArgument , bool isExtraArgument)",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::addGenericRequirements()",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::finishGenericParameters()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::getVersion()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ContextDescriptorBuilderBase::getKindSpecificFlags()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ModuleContextDescriptorBuilder::ModuleContextDescriptorBuilder( IRGenModule & IGM , ModuleDecl * M)",3, 7, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ModuleContextDescriptorBuilder::layout()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ModuleContextDescriptorBuilder::addName()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ModuleContextDescriptorBuilder::isUniqueDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ModuleContextDescriptorBuilder::getParent()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ModuleContextDescriptorBuilder::getContextKind()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ModuleContextDescriptorBuilder::getGenericSignature()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ModuleContextDescriptorBuilder::emit()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ExtensionContextDescriptorBuilder::ExtensionContextDescriptorBuilder( IRGenModule & IGM , ExtensionDecl * E)",3, 7, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ExtensionContextDescriptorBuilder::layout()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ExtensionContextDescriptorBuilder::addExtendedContext()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ExtensionContextDescriptorBuilder::getParent()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ExtensionContextDescriptorBuilder::isUniqueDescriptor()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ExtensionContextDescriptorBuilder::getContextKind()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ExtensionContextDescriptorBuilder::getGenericSignature()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ExtensionContextDescriptorBuilder::emit()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"AnonymousContextDescriptorBuilder::AnonymousContextDescriptorBuilder( IRGenModule & IGM , DeclContext * DC)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"AnonymousContextDescriptorBuilder::layout()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"AnonymousContextDescriptorBuilder::getParent()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"AnonymousContextDescriptorBuilder::getContextKind()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"AnonymousContextDescriptorBuilder::getGenericSignature()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"AnonymousContextDescriptorBuilder::isUniqueDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"AnonymousContextDescriptorBuilder::emit()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::ProtocolDescriptorBuilder( IRGenModule & IGM , ProtocolDecl * Proto , SILDefaultWitnessTable * defaultWitnesses)",4, 75, 8, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::layout()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::getParent()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::getContextKind()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::getGenericSignature()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::isUniqueDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::getKindSpecificFlags()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::emit()",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::addName()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::addRequirementSignature()",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::getRequirementInfo( const WitnessTableEntry & entry)",45, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::addRequirements()",77, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::findDefaultWitness( SILDeclRef func)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::findDefaultTypeWitness( AssociatedTypeDecl * assocType)",18, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::findDefaultAssociatedConformanceWitness( CanType association , ProtocolDecl * requirement)",20, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::defineDefaultAssociatedConformanceAccessFunction( AssociatedConformance requirement , ProtocolConformanceRef conformance)",58, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ProtocolDescriptorBuilder::addAssociatedTypeNames()",21, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::TypeContextDescriptorBuilderBase( IRGenModule & IGM , DeclType * Type , RequireMetadata_t requireMetadata)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::layout()",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::computeIdentity()",36, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::getMutableImportInfo()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::addName()",20, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::addAccessFunction()",24, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::getParent()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::getGenericSignature()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::addGenericParametersHeader()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::addMetadataInstantiationPattern()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::addMetadataInstantiationCache()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::isUniqueDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::emit()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::setCommonFlags( TypeContextDescriptorFlags & flags)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::setClangImportedFlags( TypeContextDescriptorFlags & flags)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::computeMetadataInitialization()",19, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::setMetadataInitializationKind( TypeContextDescriptorFlags & flags)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::maybeAddMetadataInitialization()",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::addForeignMetadataInitialization()",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::needsForeignMetadataCompletionFunction()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::addSingletonMetadataInitialization()",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::addIncompleteMetadata()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"TypeContextDescriptorBuilderBase::addIncompleteMetadataOrRelocationFunction()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"getFieldNameString( const ValueDeclRange & fields , llvm :: SmallVectorImpl<char> & out)",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructContextDescriptorBuilder::getType()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructContextDescriptorBuilder::StructContextDescriptorBuilder( IRGenModule & IGM , StructDecl * Type , RequireMetadata_t requireMetadata)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructContextDescriptorBuilder::getContextKind()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructContextDescriptorBuilder::addLayoutInfo()",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructContextDescriptorBuilder::getKindSpecificFlags()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructContextDescriptorBuilder::maybeAddResilientSuperclass()",1, 43, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructContextDescriptorBuilder::addReflectionFieldDescriptor()",12, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumContextDescriptorBuilder::getType()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumContextDescriptorBuilder::EnumContextDescriptorBuilder( IRGenModule & IGM , EnumDecl * Type , RequireMetadata_t requireMetadata)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumContextDescriptorBuilder::getContextKind()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumContextDescriptorBuilder::addLayoutInfo()",21, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumContextDescriptorBuilder::getKindSpecificFlags()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumContextDescriptorBuilder::maybeAddResilientSuperclass()",1, 43, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumContextDescriptorBuilder::addReflectionFieldDescriptor()",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::getType()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::ClassContextDescriptorBuilder( IRGenModule & IGM , ClassDecl * Type , RequireMetadata_t requireMetadata)",17, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::addMethod( SILDeclRef fn)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::addMethodOverride( SILDeclRef baseRef , SILDeclRef declRef)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::layout()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::addIncompleteMetadataOrRelocationFunction()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::getContextKind()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::getKindSpecificFlags()",26, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::maybeAddResilientSuperclass()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::addReflectionFieldDescriptor()",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::getFieldVectorOffset()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::addVTable()",18, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::emitMethodDescriptor( SILDeclRef fn)",40, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::addOverrideTable()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::emitMethodOverrideDescriptor( SILDeclRef baseRef , SILDeclRef declRef)",31, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::addPlaceholder( MissingMemberDecl * MMD)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassContextDescriptorBuilder::addLayoutInfo()",56, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"eraseExistingTypeContextDescriptor( IRGenModule & IGM , NominalTypeDecl * type)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::emitLazyTypeContextDescriptor( IRGenModule & IGM , NominalTypeDecl * type , RequireMetadata_t requireMetadata)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::emitLazyTypeMetadata( IRGenModule & IGM , NominalTypeDecl * type)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenModule::getAddrOfSharedContextDescriptor( LinkEntity entity , ConstantInit definition , llvm :: function_ref<void()> emit)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenModule::getAddrOfModuleContextDescriptor( ModuleDecl * D , ConstantInit definition)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenModule::getAddrOfObjCModuleContextDescriptor()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenModule::getAddrOfClangImporterModuleContextDescriptor()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenModule::getAddrOfExtensionContextDescriptor( ExtensionDecl * ED , ConstantInit definition)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenModule::getAddrOfAnonymousContextDescriptor( DeclContext * DC , ConstantInit definition)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitInitializeFieldOffsetVector( IRGenFunction & IGF , SILType T , llvm :: Value * metadata , bool isVWTMutable , MetadataDependencyCollector * collector)",81, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitInitializeValueMetadata( IRGenFunction & IGF , NominalTypeDecl * nominalDecl , llvm :: Value * metadata , bool isVWTMutable , MetadataDependencyCollector * collector)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitInitializeClassMetadata( IRGenFunction & IGF , ClassDecl * classDecl , const ClassLayout & fieldLayout , llvm :: Value * metadata , MetadataDependencyCollector * collector)",39, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"getMetadataKind( NominalTypeDecl * nominalDecl)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::GenericMetadataBuilderBase( IRGenModule & IGM , DeclType * Target , ConstantStructBuilder & B)",3, 42, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::emitInstantiationCache()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::asImpl()",1, 57, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::emitInstantiationFunction()",37, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::emitCompletionFunction()",24, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::addPartialPattern( PartialPattern pattern)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::createMetadataAccessFunction()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::layout()",22, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::layoutHeader()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::addInstantiationFunction()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::addCompletionFunction()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::addPatternFlags()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::getPatternFlags()",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::hasExtraDataPattern()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::addExtraDataPattern()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::buildExtraDataPattern()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::hasImmediateMembersPattern()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::addImmediateMembersPattern()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::buildImmediateMembersPattern()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericMetadataBuilderBase::emitInstantiationDefinitions()",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericValueMetadataBuilderBase::GenericValueMetadataBuilderBase( IRGenModule & IGM , DeclType * Target , ConstantStructBuilder & B)",3, 33, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericValueMetadataBuilderBase::getLoweredType()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericValueMetadataBuilderBase::layoutHeader()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericValueMetadataBuilderBase::getPatternFlags()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericValueMetadataBuilderBase::addValueWitnessTable()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericValueMetadataBuilderBase::emitInitializeMetadata( IRGenFunction & IGF , llvm :: Value * metadata , bool isVWTMutable , MetadataDependencyCollector * collector)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"createSingletonInitializationMetadataAccessFunction( IRGenModule & IGM , NominalTypeDecl * typeDecl , CanType type)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"createNonGenericMetadataAccessFunction( IRGenModule & IGM , NominalTypeDecl * typeDecl)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitClassMetadataBaseOffset( IRGenModule & IGM , ClassDecl * classDecl)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"getAddrOfDestructorFunction( IRGenModule & IGM , ClassDecl * classDecl)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitFieldOffsetGlobals( IRGenModule & IGM , ClassDecl * classDecl , const ClassLayout & fragileLayout , const ClassLayout & resilientLayout)",56, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"getClassFlags( ClassDecl * classDecl)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::ClassMetadataBuilderBase( IRGenModule & IGM , ClassDecl * theClass , ConstantStructBuilder & builder , const ClassLayout & fieldLayout)",7, 61, 8, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::noteAddressPoint()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addClassFlags()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::noteResilientSuperclass()",1, 38, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::noteStartOfImmediateMembers( ClassDecl * theClass)",1, 61, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addMetadataFlags()",19, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addSuperclass()",33, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addDestructorFunction()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addIVarDestroyer()",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::emitNominalTypeDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addNominalTypeDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::canBeConstant()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addInstanceAddressPoint()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addInstanceSize()",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addInstanceAlignMask()",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addRuntimeReservedBits()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addClassSize()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addClassAddressPoint()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addClassCacheData()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addClassDataPointer()",21, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addMethod( SILDeclRef fn)",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addPlaceholder( MissingMemberDecl * m)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::addMethodOverride( SILDeclRef baseRef , SILDeclRef declRef)",1, 70, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ClassMetadataBuilderBase::createMetadataAccessFunction()",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"FixedClassMetadataBuilder::FixedClassMetadataBuilder( IRGenModule & IGM , ClassDecl * theClass , ConstantStructBuilder & builder , const ClassLayout & fieldLayout)",4, 54, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"FixedClassMetadataBuilder::addFieldOffset( VarDecl * var)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"FixedClassMetadataBuilder::addValueWitnessTable()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"FixedClassMetadataBuilder::addFieldOffsetPlaceholders( MissingMemberDecl * placeholder)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"FixedClassMetadataBuilder::addGenericArgument( ClassDecl * forClass)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"FixedClassMetadataBuilder::addGenericWitnessTable( ClassDecl * forClass)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"SingletonClassMetadataBuilder::SingletonClassMetadataBuilder( IRGenModule & IGM , ClassDecl * theClass , ConstantStructBuilder & builder , const ClassLayout & fieldLayout)",4, 54, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"SingletonClassMetadataBuilder::addFieldOffset( VarDecl * var)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"SingletonClassMetadataBuilder::addValueWitnessTable()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"SingletonClassMetadataBuilder::addFieldOffsetPlaceholders( MissingMemberDecl * placeholder)",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"SingletonClassMetadataBuilder::addGenericArgument( ClassDecl * forClass)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"SingletonClassMetadataBuilder::addGenericWitnessTable( ClassDecl * forClass)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::ResilientClassMetadataBuilder( IRGenModule & IGM , ClassDecl * theClass , ConstantStructBuilder & builder , const ClassLayout & fieldLayout)",4, 76, 6, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::emitNominalTypeDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::layout()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::addRelocationFunction()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::addDestructorFunction()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::addIVarDestroyer()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::addClassFlags()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::addClassDataPointer()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::addMetaclass()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ResilientClassMetadataBuilder::createMetadataAccessFunction()",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::GenericClassMetadataBuilder( IRGenModule & IGM , ClassDecl * theClass , ConstantStructBuilder & B , const ClassLayout & fieldLayout)",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::layoutHeader()",33, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::emitNominalTypeDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::getPatternFlags()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::emitInstantiationDefinitions()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::addDestructorFunction()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::addIVarDestroyer()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::hasExtraDataPattern()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::buildExtraDataPattern()",32, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::addMetaclassObject( ConstantStructBuilder & B)",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::hasImmediateMembersPattern()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::emitAllocateMetadata( IRGenFunction & IGF , llvm :: Value * descriptor , llvm :: Value * arguments , llvm :: Value * templatePointer)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::hasCompletionFunction()",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericClassMetadataBuilder::emitInitializeMetadata( IRGenFunction & IGF , llvm :: Value * metadata , bool isVWTMutable , MetadataDependencyCollector * collector)",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitObjCClassSymbol( IRGenModule & IGM , ClassDecl * classDecl , llvm :: GlobalValue * metadata)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::emitClassMetadata( IRGenModule & IGM , ClassDecl * classDecl , const ClassLayout & fragileLayout , const ClassLayout & resilientLayout)",75, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenFunction::emitInvariantLoad( Address address , const llvm :: Twine & name)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenFunction::setInvariantLoad( llvm :: LoadInst * load)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenFunction::setDereferenceableLoad( llvm :: LoadInst * load , unsigned size)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"emitInvariantLoadFromMetadataAtIndex( IRGenFunction & IGF , llvm :: Value * metadata , int index , llvm :: Type * objectTy , const Twine & suffix = Twine :: createNull())",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenFunction::emitValueWitnessTableRefForMetadata( llvm :: Value * metadata)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenFunction::emitValueWitnessTableRef( SILType type , llvm :: Value ** metadataSlot)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenFunction::emitValueWitnessTableRef( SILType type , DynamicMetadataRequest request , llvm :: Value ** metadataSlot)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ValueMetadataBuilderBase::getLoweredType()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ValueMetadataBuilderBase::maybeCreateSingletonMetadataInitialization()",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::StructMetadataBuilderBase( IRGenModule & IGM , StructDecl * theStruct , ConstantStructBuilder & B)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::noteStartOfTypeSpecificMembers()",1, 45, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::addMetadataFlags()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::emitNominalTypeDescriptor()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::addNominalTypeDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::emitValueWitnessTable()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::addValueWitnessTable()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::addFieldOffset( VarDecl * var)",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::noteEndOfFieldOffsets()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::addGenericArgument()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilderBase::addGenericWitnessTable()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilder::StructMetadataBuilder( IRGenModule & IGM , StructDecl * theStruct , ConstantStructBuilder & B)",3, 56, 6, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilder::flagUnfilledFieldOffset()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilder::canBeConstant()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"StructMetadataBuilder::createMetadataAccessFunction()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"getValueWitnessTableForGenericValueType( IRGenModule & IGM , NominalTypeDecl * decl , bool & dependent)",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericStructMetadataBuilder::GenericStructMetadataBuilder( IRGenModule & IGM , StructDecl * theStruct , ConstantStructBuilder & B)",3, 36, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericStructMetadataBuilder::emitAllocateMetadata( IRGenFunction & IGF , llvm :: Value * descriptor , llvm :: Value * arguments , llvm :: Value * templatePointer)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericStructMetadataBuilder::flagUnfilledFieldOffset()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericStructMetadataBuilder::emitNominalTypeDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericStructMetadataBuilder::emitValueWitnessTable()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericStructMetadataBuilder::hasExtraDataPattern()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericStructMetadataBuilder::buildExtraDataPattern()",38, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericStructMetadataBuilder::hasCompletionFunction()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::emitStructMetadata( IRGenModule & IGM , StructDecl * structDecl)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenerator::noteUseOfAnyParentTypeMetadata( NominalTypeDecl * type)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"getConstantPayloadSize( IRGenModule & IGM , EnumDecl * enumDecl)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilderBase::EnumMetadataBuilderBase( IRGenModule & IGM , EnumDecl * theEnum , ConstantStructBuilder & B)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilderBase::noteStartOfTypeSpecificMembers()",1, 45, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilderBase::addMetadataFlags()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilderBase::emitValueWitnessTable()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilderBase::addValueWitnessTable()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilderBase::emitNominalTypeDescriptor()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilderBase::addNominalTypeDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilderBase::addGenericArgument()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilderBase::addGenericWitnessTable()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilder::EnumMetadataBuilder( IRGenModule & IGM , EnumDecl * theEnum , ConstantStructBuilder & B)",3, 52, 6, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilder::addPayloadSize()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilder::canBeConstant()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"EnumMetadataBuilder::createMetadataAccessFunction()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericEnumMetadataBuilder::GenericEnumMetadataBuilder( IRGenModule & IGM , EnumDecl * theEnum , ConstantStructBuilder & B)",3, 34, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericEnumMetadataBuilder::emitAllocateMetadata( IRGenFunction & IGF , llvm :: Value * descriptor , llvm :: Value * arguments , llvm :: Value * templatePointer)",28, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericEnumMetadataBuilder::emitNominalTypeDescriptor()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericEnumMetadataBuilder::emitValueWitnessTable()",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"GenericEnumMetadataBuilder::hasCompletionFunction()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::emitEnumMetadata( IRGenModule & IGM , EnumDecl * theEnum)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenFunction::emitObjCSelectorRefLoad( StringRef selector)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignMetadataBuilderBase::ForeignMetadataBuilderBase( T && ... args)",1, 81, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignMetadataBuilderBase::noteAddressPoint()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignMetadataBuilderBase::canBeConstant()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignMetadataBuilderBase::getOffsetOfAddressPoint() const",1, 66, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignMetadataBuilderBase::createMetadataAccessFunction()",21, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignMetadataBuilderBase::needsMetadataCompletionFunction()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignMetadataBuilderBase::createMetadataCompletionFunction()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignClassMetadataBuilderBase::ForeignClassMetadataBuilderBase( IRGenModule & IGM , ClassDecl * target , ConstantStructBuilder & B)",3, 58, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignClassMetadataBuilder::ForeignClassMetadataBuilder( IRGenModule & IGM , ClassDecl * target , ConstantStructBuilder & B)",3, 54, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignClassMetadataBuilder::emitInitializeMetadata( IRGenFunction & IGF , llvm :: Value * metadata , MetadataDependencyCollector * collector)",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignClassMetadataBuilder::addValueWitnessTable()",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignClassMetadataBuilder::addMetadataFlags()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignClassMetadataBuilder::addNominalTypeDescriptor()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignClassMetadataBuilder::addSuperclass()",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignClassMetadataBuilder::addReservedWord()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignStructMetadataBuilder::ForeignStructMetadataBuilder( IRGenModule & IGM , StructDecl * target , ConstantStructBuilder & builder)",3, 62, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignStructMetadataBuilder::getTargetType() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignStructMetadataBuilder::createMetadataCompletionFunction()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignStructMetadataBuilder::addValueWitnessTable()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignStructMetadataBuilder::flagUnfilledFieldOffset()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignEnumMetadataBuilder::ForeignEnumMetadataBuilder( IRGenModule & IGM , EnumDecl * target , ConstantStructBuilder & builder)",3, 60, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignEnumMetadataBuilder::getTargetType() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignEnumMetadataBuilder::createMetadataCompletionFunction()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignEnumMetadataBuilder::addValueWitnessTable()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"ForeignEnumMetadataBuilder::addPayloadSize() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::requiresForeignTypeMetadata( CanType type)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::requiresForeignTypeMetadata( NominalTypeDecl * decl)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenModule::getAddrOfForeignTypeMetadataCandidate( CanType type)",92, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::getSpecialProtocolID( ProtocolDecl * P)",52, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"IRGenModule::emitProtocolDecl( ProtocolDecl * protocol)",35, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"addGenericRequirement( IRGenModule & IGM , ConstantStructBuilder & B , GenericRequirementsMetadata & metadata , GenericSignature * sig , GenericRequirementFlags flags , Type paramType , llvm :: function_ref<void()> addReference)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::addGenericRequirements( IRGenModule & IGM , ConstantStructBuilder & B , GenericSignature * sig , ArrayRef<Requirement> requirements)",79, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenMeta.cpp,"irgen::emitMetatypeInstanceType( IRGenFunction & IGF , llvm :: Value * metatypeMetadata)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::IRGenFunction( IRGenModule & IGM , llvm :: Function * Fn , OptimizationMode OptMode , const SILDebugScope * DbgScope , Optional<SILLocation> DbgLoc)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::~IRGenFunction()",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::getEffectiveOptimizationMode() const",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::getSwiftModule() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::getSILModule() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::getSILTypes() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::getOptions() const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::getDefaultAtomicity()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitMemCpy( llvm :: Value * dest , llvm :: Value * src , Size size , Alignment align)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitMemCpy( llvm :: Value * dest , llvm :: Value * src , llvm :: Value * size , Alignment align)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitMemCpy( Address dest , Address src , Size size)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitMemCpy( Address dest , Address src , llvm :: Value * size)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"emitAllocatingCall( IRGenFunction & IGF , llvm :: Constant * fn , ArrayRef<llvm::Value*> args , const llvm :: Twine & name)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitAllocRawCall( llvm :: Value * size , llvm :: Value * alignMask , const llvm :: Twine & name)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitAllocObjectCall( llvm :: Value * metadata , llvm :: Value * size , llvm :: Value * alignMask , const llvm :: Twine & name)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitInitStackObjectCall( llvm :: Value * metadata , llvm :: Value * object , const llvm :: Twine & name)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitInitStaticObjectCall( llvm :: Value * metadata , llvm :: Value * object , const llvm :: Twine & name)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitVerifyEndOfLifetimeCall( llvm :: Value * object , const llvm :: Twine & name)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitAllocBoxCall( llvm :: Value * typeMetadata , llvm :: Value * & box , llvm :: Value * & valueAddress)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitMakeBoxUniqueCall( llvm :: Value * box , llvm :: Value * typeMetadata , llvm :: Value * alignMask , llvm :: Value * & outBox , llvm :: Value * & outValueAddress)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitDeallocBoxCall( llvm :: Value * box , llvm :: Value * typeMetadata)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitProjectBoxCall( llvm :: Value * box , llvm :: Value * typeMetadata)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitAllocEmptyBoxCall()",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"emitDeallocatingCall( IRGenFunction & IGF , llvm :: Constant * fn , std :: initializer_list<llvm::Value*> args)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitDeallocRawCall( llvm :: Value * pointer , llvm :: Value * size , llvm :: Value * alignMask)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitTSanInoutAccessCall( llvm :: Value * address)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitStoreOfRelativeIndirectablePointer( llvm :: Value * value , Address addr , bool isFar)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitLoadOfRelativeIndirectablePointer( Address addr , bool isFar , llvm :: PointerType * expectedType , const llvm :: Twine & name)",46, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitFakeExplosion( const TypeInfo & type , Explosion & explosion)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::unimplemented( SourceLoc Loc , StringRef Message)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"Explosion::print( llvm :: raw_ostream & OS)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"Explosion::dump()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"Offset::getAsValue( IRGenFunction & IGF) const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"Offset::offsetBy( IRGenFunction & IGF , Size other) const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitAddressAtOffset( llvm :: Value * base , Offset offset , llvm :: Type * objectTy , Alignment objectAlignment , const llvm :: Twine & name)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRBuilder::CreateNonMergeableTrap( IRGenModule & IGM)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenFunction.cpp,"IRGenFunction::emitTrap( bool EmitUnreachable)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenPoly.cpp,"applyPrimaryArchetypes( IRGenFunction & IGF , SILType type)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenPoly.cpp,"irgen::reemitAsUnsubstituted( IRGenFunction & IGF , SILType expectedTy , SILType substTy , Explosion & in , Explosion & out)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::IntegerLiteralTypeInfo( llvm :: StructType * storageType , Size size , Alignment align , SpareBitVector && spareBits)",4, 50, 25, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::getFirstElementSize( IRGenModule & IGM)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::getFirstElementLabel()",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::isFirstElementTrivial()",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::emitRetainFirstElement( IRGenFunction & IGF , llvm :: Value * fn , Optional<Atomicity> atomicity = None) const",2, 77, 30, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::emitReleaseFirstElement( IRGenFunction & IGF , llvm :: Value * fn , Optional<Atomicity> atomicity = None) const",2, 78, 31, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::emitAssignFirstElement( IRGenFunction & IGF , llvm :: Value * fn , Address fnAddr) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::getSecondElementOffset( IRGenModule & IGM)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::getSecondElementSize( IRGenModule & IGM)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::getSecondElementLabel()",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::isSecondElementTrivial() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::emitRetainSecondElement( IRGenFunction & IGF , llvm :: Value * data , Optional<Atomicity> atomicity = None) const",2, 78, 31, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::emitReleaseSecondElement( IRGenFunction & IGF , llvm :: Value * data , Optional<Atomicity> atomicity = None) const",2, 79, 32, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::emitAssignSecondElement( IRGenFunction & IGF , llvm :: Value * context , Address dataAddr) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::mayHaveExtraInhabitants( IRGenModule & IGM) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::getFixedExtraInhabitantCount( IRGenModule & IGM) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::getFixedExtraInhabitantMask( IRGenModule & IGM) const",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IntegerLiteralTypeInfo::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IRGenModule::getIntegerLiteralTy()",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"TypeConverter::getIntegerLiteralTypeInfo()",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"irgen::emitConstantIntegerLiteral( IRGenModule & IGM , IntegerLiteralInst * ILI)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"IRGenModule::getConstantIntegerLiteral( APInt value)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"ConstantIntegerLiteralMap::get( IRGenModule & IGM , APInt && value)",57, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"irgen::emitIntegerLiteralCheckedTrunc( IRGenFunction & IGF , Explosion & in , llvm :: IntegerType * resultTy , bool resultIsSigned , Explosion & out)",147, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"emitIntegerLiteralToFloatCall( IRGenFunction & IGF , llvm :: Value * data , llvm :: Value * flags , unsigned bitWidth)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenIntegerLiteral.cpp,"irgen::emitIntegerLiteralToFP( IRGenFunction & IGF , Explosion & in , llvm :: Type * toType)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"swift::irgen::useDllStorage( const llvm :: Triple & triple)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"UniversalLinkageInfo::UniversalLinkageInfo( IRGenModule & IGM)",3, 66, 4, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"UniversalLinkageInfo::UniversalLinkageInfo( const llvm :: Triple & triple , bool hasMultipleIGMs , bool isWholeModule)",6, 38, 6, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"LinkEntity::mangle( SmallVectorImpl<char> & buffer) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"LinkEntity::mangle( raw_ostream & buffer) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"LinkEntity::mangleAsString() const",289, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"LinkEntity::getLinkage( ForDefinition_t forDefinition) const",236, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"isAvailableExternally( IRGenModule & IGM , SILFunction * F)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"isAvailableExternally( IRGenModule & IGM , const DeclContext * dc)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"isAvailableExternally( IRGenModule & IGM , const Decl * decl)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"isAvailableExternally( IRGenModule & IGM , Type type)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"LinkEntity::isAvailableExternally( IRGenModule & IGM) const",117, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"LinkEntity::getDefaultDeclarationType( IRGenModule & IGM) const",84, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"LinkEntity::getAlignment( IRGenModule & IGM) const",45, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"LinkEntity::isWeakImported( ModuleDecl * module) const",97, 2, 0, 0
repos/cpp/swift/lib/IRGen/Linking.cpp,"LinkEntity::getSourceFileForEmission() const",122, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenInit.cpp,"IRGenModule::emitSILGlobalVariable( SILGlobalVariable * var)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenInit.cpp,"FixedTypeInfo::allocateStack( IRGenFunction & IGF , SILType T , const Twine & name) const",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenInit.cpp,"FixedTypeInfo::destroyStack( IRGenFunction & IGF , StackAddress addr , SILType T , bool isOutlined) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenInit.cpp,"FixedTypeInfo::deallocateStack( IRGenFunction & IGF , StackAddress addr , SILType T) const",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenInit.cpp,"TemporarySet::destroyAll( IRGenFunction & IGF) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenInit.cpp,"Temporary::destroy( IRGenFunction & IGF) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::DebugTypeInfo( DeclContext * DC , GenericEnvironment * GE , swift :: Type Ty , llvm :: Type * StorageTy , Size size , Alignment align , bool HasDefaultAlignment)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"hasDefaultAlignment( swift :: Type Ty)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::getFromTypeInfo( DeclContext * DC , GenericEnvironment * GE , swift :: Type Ty , const TypeInfo & Info)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::getLocalVariable( DeclContext * DC , GenericEnvironment * GE , VarDecl * Decl , swift :: Type Ty , const TypeInfo & Info)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::getMetadata( swift :: Type Ty , llvm :: Type * StorageTy , Size size , Alignment align)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::getGlobal( SILGlobalVariable * GV , llvm :: Type * StorageTy , Size size , Alignment align)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::getObjCClass( ClassDecl * theClass , llvm :: Type * StorageType , Size size , Alignment align)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::operator ==( DebugTypeInfo T) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::operator !=( DebugTypeInfo T) const",1, 81, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::getDecl() const",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/DebugTypeInfo.cpp,"DebugTypeInfo::dump() const",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangDecl.cpp,"ClangDeclRefFinder::ClangDeclRefFinder( Fn fn)",1, 55, 2, 0
repos/cpp/swift/lib/IRGen/GenClangDecl.cpp,"ClangDeclRefFinder::VisitDeclRefExpr( clang :: DeclRefExpr * DRE)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenClangDecl.cpp,"IRGenModule::emitClangDecl( const clang :: Decl * decl)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangDecl.cpp,"IRGenModule::getAddrOfClangGlobalDecl( clang :: GlobalDecl global , ForDefinition_t forDefinition)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangDecl.cpp,"IRGenModule::finalizeClangCodeGen()",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"getNamedSwiftType( ModuleDecl * stdlib , StringRef name)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"getClangBuiltinTypeFromKind( const clang :: ASTContext & context , clang :: BuiltinType :: Kind kind)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"getClangSelectorType( const clang :: ASTContext & clangCtx)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"getClangMetatypeType( const clang :: ASTContext & clangCtx)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"getClangIdType( const clang :: ASTContext & clangCtx)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"getClangDecayedVaListType( const clang :: ASTContext & clangCtx)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::GenClangType( IRGenModule & IGM , ClangTypeConverter & converter)",2, 40, 2, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::getClangASTContext() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::getCanonicalType( clang :: QualType type)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::convertMemberType( NominalTypeDecl * DC , StringRef memberName)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"getClangVectorType( const clang :: ASTContext & ctx , clang :: BuiltinType :: Kind eltKind , clang :: VectorType :: VectorKind vecKind , StringRef numEltsString)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitStructType( CanStructType type)",39, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"getClangBuiltinTypeFromTypedef( clang :: Sema & sema , StringRef typedefName)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"ClangTypeConverter::reverseBuiltinTypeMapping( IRGenModule & IGM , CanStructType type)",81, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitTupleType( CanTupleType type)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitProtocolType( CanProtocolType type)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitMetatypeType( CanMetatypeType type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitExistentialMetatypeType( CanExistentialMetatypeType type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitClassType( CanClassType type)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitBoundGenericClassType( CanBoundGenericClassType type)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitBoundGenericType( CanBoundGenericType type)",84, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitEnumType( CanEnumType type)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitFunctionType( CanFunctionType type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitSILFunctionType( CanSILFunctionType type)",77, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitSILBlockStorageType( CanSILBlockStorageType type)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitProtocolCompositionType( CanProtocolCompositionType type)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitBuiltinRawPointerType( CanBuiltinRawPointerType type)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitBuiltinIntegerType( CanBuiltinIntegerType type)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitBuiltinFloatType( CanBuiltinFloatType type)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitBuiltinUnknownObjectType( CanBuiltinUnknownObjectType type)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitArchetypeType( CanArchetypeType type)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitDynamicSelfType( CanDynamicSelfType type)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitGenericTypeParamType( CanGenericTypeParamType type)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"GenClangType::visitType( CanType type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"ClangTypeConverter::convert( IRGenModule & IGM , CanType type)",37, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"IRGenModule::getClangType( CanType type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"IRGenModule::getClangType( SILType type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"IRGenModule::getClangType( SILParameterInfo params)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"IRGenModule::initClangTypeConverter()",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenClangType.cpp,"IRGenModule::destroyClangTypeConverter()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"MetadataSourceEncoder::MetadataSourceEncoder( llvm :: raw_ostream & OS)",1, 59, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"MetadataSourceEncoder::visitClosureBindingMetadataSource( const ClosureBindingMetadataSource * CB)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"MetadataSourceEncoder::visitReferenceCaptureMetadataSource( const ReferenceCaptureMetadataSource * RC)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"MetadataSourceEncoder::visitMetadataCaptureMetadataSource( const MetadataCaptureMetadataSource * MC)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"MetadataSourceEncoder::visitGenericArgumentMetadataSource( const GenericArgumentMetadataSource * GA)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"MetadataSourceEncoder::visitSelfMetadataSource( const SelfMetadataSource * S)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"MetadataSourceEncoder::visitSelfWitnessTableMetadataSource( const SelfWitnessTableMetadataSource * S)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::indent( unsigned Amount)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::printHeader( std :: string Name)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::printField( std :: string name , const T & value)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::printRec( const reflection :: MetadataSource * MS)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::closeForm()",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::PrintMetadataSource( llvm :: raw_ostream & OS , unsigned Indent)",2, 32, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::visitClosureBindingMetadataSource( const ClosureBindingMetadataSource * CB)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::visitReferenceCaptureMetadataSource( const ReferenceCaptureMetadataSource * RC)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::visitMetadataCaptureMetadataSource( const MetadataCaptureMetadataSource * MC)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::visitGenericArgumentMetadataSource( const GenericArgumentMetadataSource * GA)",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::visitSelfMetadataSource( const SelfMetadataSource * S)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"PrintMetadataSource::visitSelfWitnessTableMetadataSource( const SelfWitnessTableMetadataSource * S)",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getTypeRef( CanType type , MangledTypeRefRole role)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getMangledAssociatedConformance( const NormalProtocolConformance * conformance , const AssociatedConformance & requirement)",68, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"ReflectionMetadataBuilder::ReflectionMetadataBuilder( IRGenModule & IGM)",2, 66, 4, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"ReflectionMetadataBuilder::~ReflectionMetadataBuilder()",1, 42, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"ReflectionMetadataBuilder::addBuiltinTypeRefs( CanType type)",19, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"ReflectionMetadataBuilder::addTypeRef( CanType type)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"ReflectionMetadataBuilder::addNominalRef( const NominalTypeDecl * nominal)",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"ReflectionMetadataBuilder::emit( Optional<llvm::function_ref<GetAddrOfEntityFn>> getAddr , const char * section)",29, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"ReflectionMetadataBuilder::emit( llvm :: function_ref<GetAddrOfEntityFn> getAddr , const char * section)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"ReflectionMetadataBuilder::emit( NoneType none , const char * section)",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"AssociatedTypeMetadataBuilder::layout()",22, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"AssociatedTypeMetadataBuilder::AssociatedTypeMetadataBuilder( IRGenModule & IGM , const ProtocolConformance * Conformance , ArrayRef<std::pair<StringRef,CanType>> AssociatedTypes)",5, 42, 6, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"AssociatedTypeMetadataBuilder::emit()",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FieldTypeMetadataBuilder::addFieldDecl( const ValueDecl * value , CanType type , bool indirect = false)",24, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FieldTypeMetadataBuilder::layoutRecord()",22, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FieldTypeMetadataBuilder::layoutEnum()",35, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FieldTypeMetadataBuilder::layoutProtocol()",13, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FieldTypeMetadataBuilder::layout()",35, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FieldTypeMetadataBuilder::FieldTypeMetadataBuilder( IRGenModule & IGM , const NominalTypeDecl * NTD)",3, 50, 5, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FieldTypeMetadataBuilder::emit()",9, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FixedTypeMetadataBuilder::FixedTypeMetadataBuilder( IRGenModule & IGM , CanType builtinType)",7, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FixedTypeMetadataBuilder::FixedTypeMetadataBuilder( IRGenModule & IGM , const NominalTypeDecl * nominalDecl)",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FixedTypeMetadataBuilder::layout()",14, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"FixedTypeMetadataBuilder::emit()",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::emitBuiltinTypeMetadataRecord( CanType builtinType)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::emitOpaqueTypeMetadataRecord( const NominalTypeDecl * nominalDecl)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::shouldEmitOpaqueTypeMetadataRecord( const NominalTypeDecl * nominalDecl)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"BoxDescriptorBuilder::BoxDescriptorBuilder( IRGenModule & IGM , CanType BoxedType)",2, 62, 4, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"BoxDescriptorBuilder::layout()",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"BoxDescriptorBuilder::emit()",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"CaptureDescriptorBuilder::CaptureDescriptorBuilder( IRGenModule & IGM , CanSILFunctionType OrigCalleeType , CanSILFunctionType SubstCalleeType , SubstitutionMap Subs , const HeapLayout & Layout)",9, 24, 6, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"CaptureDescriptorBuilder::addMetadataSource( const reflection :: MetadataSource * Source)",14, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"CaptureDescriptorBuilder::hasOpenedExistential( CanSILFunctionType OrigCalleeType , const HeapLayout & Layout)",26, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"CaptureDescriptorBuilder::getElementTypes()",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"CaptureDescriptorBuilder::getMetadataSourceMap()",65, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"CaptureDescriptorBuilder::getCaptureTypes()",23, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"CaptureDescriptorBuilder::layout()",24, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"CaptureDescriptorBuilder::emit()",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"getReflectionSectionName( IRGenModule & IGM , StringRef LongName , StringRef FourCC)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getFieldTypeMetadataSectionName()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getBuiltinTypeMetadataSectionName()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getAssociatedTypeMetadataSectionName()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getCaptureDescriptorMetadataSectionName()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getReflectionStringsSectionName()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getReflectionTypeRefSectionName()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getAddrOfFieldName( StringRef Name)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getAddrOfBoxDescriptor( CanType BoxedType)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::getAddrOfCaptureDescriptor( SILFunction & Caller , CanSILFunctionType OrigCalleeType , CanSILFunctionType SubstCalleeType , SubstitutionMap Subs , const HeapLayout & Layout)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::emitAssociatedTypeMetadataRecord( const RootProtocolConformance * conformance)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::emitBuiltinReflectionMetadata()",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenerator::emitBuiltinReflectionMetadata()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::emitFieldMetadataRecord( const NominalTypeDecl * Decl)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenModule::emitReflectionMetadataVersion()",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenReflection.cpp,"IRGenerator::emitReflectionMetadataVersion()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"getGenericEnvironment( CanSILFunctionType loweredTy)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::LargeSILTypeMapper()",1, 26, 2, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"isLargeLoadableType( GenericEnvironment * GenericEnv , SILType t , irgen :: IRGenModule & Mod)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"modifiableFunction( CanSILFunctionType funcType)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::shouldTransformParameter( GenericEnvironment * env , SILParameterInfo param , irgen :: IRGenModule & IGM)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"isFuncOrOptionalFuncType( SILType Ty)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::shouldTransformFunctionType( GenericEnvironment * env , CanSILFunctionType fnType , irgen :: IRGenModule & IGM)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"containsFunctionSignature( GenericEnvironment * genEnv , irgen :: IRGenModule & Mod , SILType storageType , SILType newSILType)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::newResultsDiffer( GenericEnvironment * GenericEnv , ArrayRef<SILResultInfo> origResults , irgen :: IRGenModule & Mod)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"modNonFuncTypeResultType( GenericEnvironment * genEnv , CanSILFunctionType loweredTy , irgen :: IRGenModule & Mod)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::getNewResults( GenericEnvironment * GenericEnv , CanSILFunctionType fnType , irgen :: IRGenModule & Mod)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::getNewSILFunctionType( GenericEnvironment * env , CanSILFunctionType fnType , irgen :: IRGenModule & IGM)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"getInnerFunctionType( SILType storageType)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::getNewOptionalFunctionType( GenericEnvironment * GenericEnv , SILType storageType , irgen :: IRGenModule & Mod)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::shouldTransformResults( GenericEnvironment * genEnv , CanSILFunctionType loweredTy , irgen :: IRGenModule & Mod)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"modResultType( SILFunction * F , irgen :: IRGenModule & Mod , LargeSILTypeMapper & Mapper)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"shouldTransformYields( GenericEnvironment * genEnv , CanSILFunctionType loweredTy , irgen :: IRGenModule & Mod , LargeSILTypeMapper & Mapper)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"modYieldType( SILFunction * F , irgen :: IRGenModule & Mod , LargeSILTypeMapper & Mapper)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::getNewParameter( GenericEnvironment * env , SILParameterInfo param , irgen :: IRGenModule & IGM)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::getNewParameters( GenericEnvironment * env , CanSILFunctionType fnType , irgen :: IRGenModule & IGM)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::getNewYields( GenericEnvironment * env , CanSILFunctionType fnType , irgen :: IRGenModule & IGM)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::getNewTupleType( GenericEnvironment * GenericEnv , irgen :: IRGenModule & Mod , const SILType & nonOptionalType , const SILType & storageType)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::getNewSILType( GenericEnvironment * GenericEnv , SILType storageType , irgen :: IRGenModule & Mod)",39, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"StructLoweringState::StructLoweringState( SILFunction * F , irgen :: IRGenModule & Mod , LargeSILTypeMapper & Mapper)",3, 42, 2, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"StructLoweringState::isLargeLoadableType( SILType type)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"StructLoweringState::getNewSILType( SILType type)",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"StructLoweringState::hasLargeLoadableYields()",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::LargeValueVisitor( StructLoweringState & pass)",2, 45, 2, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::mapReturnInstrs()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::mapValueStorage()",102, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"modifiableApply( ApplySite applySite , irgen :: IRGenModule & Mod)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitApply( ApplySite applySite)",49, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"isMethodInstUnmodifiable( MethodInst * instr)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitMethodInst( MethodInst * instr)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitStoreInst( StoreInst * instr)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeSILTypeMapper::shouldConvertBBArg( SILArgument * arg , irgen :: IRGenModule & Mod)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitSwitchEnumInst( SwitchEnumInst * instr)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitStructExtractInst( StructExtractInst * instr)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitRetainInst( RetainValueInst * instr)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitReleaseInst( ReleaseValueInst * instr)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitDebugValueInst( DebugValueInst * instr)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitDestroyValueInst( DestroyValueInst * instr)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitResultTyInst( SingleValueInstruction * instr)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitTupleInst( SingleValueInstruction * instr)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitAllocStackInst( AllocStackInst * instr)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitPointerToAddressInst( PointerToAddressInst * instr)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"modNonFuncTypeResultType( SILFunction * F , irgen :: IRGenModule & Mod)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitReturnInst( ReturnInst * instr)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitYieldInst( YieldInst * instr)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitDeallocInst( DeallocStackInst * instr)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LargeValueVisitor::visitInstr( SILInstruction * instr)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::LoadableStorageAllocation( StructLoweringState & pass)",1, 80, 2, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"allocate( StructLoweringState & pass , SILLocation loc , SILType type)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"getStoreInitOwnership( StructLoweringState & pass , SILType type)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"createStoreInit( StructLoweringState & pass , SILBasicBlock :: iterator where , SILLocation loc , SILValue value , SILValue address)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"createOutlinedCopyCall( SILBuilder & copyBuilder , SILValue src , SILValue tgt , StructLoweringState & pass , SILLocation * loc = nullptr)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::replaceLoadWithCopyAddr( LoadInst * optimizableLoad)",80, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"isYieldUseRewriteable( StructLoweringState & pass , YieldInst * inst , Operand * operand)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"hasMandatoryRewriteUse( StructLoweringState & pass , SILValue value)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::replaceLoadWithCopyAddrForModifiable( LoadInst * unoptimizableLoad)",100, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::allocateLoadableStorage()",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::replaceArgType( SILBuilder & argBuilder , SILArgument * arg , SILType newSILType)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::insertIndirectReturnArgs()",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::convertIndirectFunctionArgs()",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"convertBBArgType( SILBuilder & argBuilder , SILType newSILType , SILArgument * arg)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::convertApplyResults()",59, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::convertIndirectFunctionPointerArgsForUnmodifiable()",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::convertIndirectBasicBlockArgs()",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::allocateForArg( SILValue value)",73, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::allocateForApply( SILInstruction * apply , SILType type)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"rewriteUsesOfSscalar( StructLoweringState & pass , SILValue address , SILValue scalar , StoreInst * storeToAddress)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"allocateAndSetForInstResult( StructLoweringState & pass , SILValue instResult , SILInstruction * inst)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"allocateAndSetForArgument( StructLoweringState & pass , SILArgument * value , SILInstruction * user)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"allUsesAreReplaceable( StructLoweringState & pass , SingleValueInstruction * instr)",44, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableStorageAllocation::replaceLoad( LoadInst * load)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"allocateAndSet( StructLoweringState & pass , LoadableStorageAllocation & allocator , SILValue operand , SILInstruction * user)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"allocateAndSetAll( StructLoweringState & pass , LoadableStorageAllocation & allocator , SILInstruction * user , MutableArrayRef<Operand> operands)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"castTupleInstr( SingleValueInstruction * instr , IRGenModule & Mod , LargeSILTypeMapper & Mapper)",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"createCopyOfEnum( StructLoweringState & pass , SwitchEnumInst * orig)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"createResultTyInstrAndLoad( LoadableStorageAllocation & allocator , SingleValueInstruction * instr , StructLoweringState & pass)",37, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"rewriteFunction( StructLoweringState & pass , LoadableStorageAllocation & allocator)",339, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"rewriteFunctionReturn( StructLoweringState & pass)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::runOnFunction( SILFunction * F)",57, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"getOperandTypeWithCastIfNecessary( SILInstruction * containingInstr , SILValue op , IRGenModule & Mod , SILBuilder & builder , LargeSILTypeMapper & Mapper)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::recreateSingleApply( SILInstruction * applyInst)",124, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::recreateApplies()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::recreateLoadInstrs()",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::recreateUncheckedEnumDataInstrs()",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::recreateUncheckedTakeEnumDataAddrInst()",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::fixStoreToBlockStorageInstrs()",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::recreateConvInstrs()",58, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::recreateBuiltinInstrs()",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::updateLoweredTypes( SILFunction * F)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"LoadableByAddress::run()",160, 2, 0, 0
repos/cpp/swift/lib/IRGen/LoadableByAddress.cpp,"irgen::createLoadableByAddress()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::getFixedBufferSize( IRGenModule & IGM)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::getFixedBufferAlignment( IRGenModule & IGM)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenModule::getFixedBufferTy()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"createWitnessType( IRGenModule & IGM , ValueWitness index)",96, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"getValueWitnessAttrs( IRGenModule & IGM , ValueWitness index)",45, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenModule::getValueWitnessTy( ValueWitness index)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenModule::getValueWitnessSignature( ValueWitness index)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"getValueWitnessLabel( ValueWitness index)",35, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"getOrCreateValueWitnessTablePtrTy( IRGenModule & IGM , llvm :: PointerType * & cache , StringRef name , bool includeEnumWitnesses)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenModule::getValueWitnessTableTy()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenModule::getValueWitnessTablePtrTy()",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenModule::getEnumValueWitnessTableTy()",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenModule::getEnumValueWitnessTablePtrTy()",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInvariantLoadOfOpaqueWitness( IRGenFunction & IGF , llvm :: Value * table , WitnessIndex index)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInvariantLoadOfOpaqueWitness( IRGenFunction & IGF , llvm :: Value * table , llvm :: Value * index)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"emitLoadOfValueWitnessValue( IRGenFunction & IGF , llvm :: Value * table , ValueWitness witness)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"emitLoadOfValueWitnessValueFromMetadata( IRGenFunction & IGF , llvm :: Value * metadata , ValueWitness index)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"emitLoadOfValueWitnessFunction( IRGenFunction & IGF , llvm :: Value * table , ValueWitness index)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"emitLoadOfValueWitnessFunctionFromMetadata( IRGenFunction & IGF , llvm :: Value * metadata , ValueWitness index)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenFunction::emitValueWitnessValue( SILType type , ValueWitness index)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenFunction::emitValueWitnessFunctionRef( SILType type , llvm :: Value * & metadataSlot , ValueWitness index)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"emitCastToOpaquePtr( IRGenFunction & IGF , Address object)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeBufferWithCopyOfBufferCall( IRGenFunction & IGF , SILType T , Address destBuffer , Address srcBuffer)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeBufferWithCopyOfBufferCall( IRGenFunction & IGF , llvm :: Value * metadata , Address destBuffer , Address srcBuffer)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenFunction::emitDynamicAlloca( SILType T , const llvm :: Twine & name)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenFunction::emitDynamicAlloca( llvm :: Type * eltTy , llvm :: Value * arraySize , Alignment align , const llvm :: Twine & name)",53, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"IRGenFunction::emitDeallocateDynamicAlloca( StackAddress address)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeArrayWithCopyCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject , llvm :: Value * count)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeArrayWithTakeNoAliasCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject , llvm :: Value * count)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeArrayWithTakeFrontToBackCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject , llvm :: Value * count)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeArrayWithTakeBackToFrontCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject , llvm :: Value * count)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitAssignWithCopyCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitAssignWithCopyCall( IRGenFunction & IGF , llvm :: Value * metadata , Address destObject , Address srcObject)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitAssignArrayWithCopyNoAliasCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject , llvm :: Value * count)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitAssignArrayWithCopyFrontToBackCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject , llvm :: Value * count)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitAssignArrayWithCopyBackToFrontCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject , llvm :: Value * count)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitAssignWithTakeCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitAssignArrayWithTakeCall( IRGenFunction & IGF , SILType T , Address destObject , Address srcObject , llvm :: Value * count)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitDestroyArrayCall( IRGenFunction & IGF , SILType T , Address object , llvm :: Value * count)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"getGetEnumTagSinglePayloadTrampolineFn( IRGenModule & IGM)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"getStoreEnumTagSinglePayloadTrampolineFn( IRGenModule & IGM)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitGetEnumTagSinglePayloadCall( IRGenFunction & IGF , SILType T , llvm :: Value * numEmptyCases , Address destObject)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitStoreEnumTagSinglePayloadCall( IRGenFunction & IGF , SILType T , llvm :: Value * whichCase , llvm :: Value * numEmptyCases , Address destObject)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitGetEnumTagCall( IRGenFunction & IGF , SILType T , Address srcObject)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitDestructiveProjectEnumDataCall( IRGenFunction & IGF , SILType T , Address srcObject)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitDestructiveInjectEnumTagCall( IRGenFunction & IGF , SILType T , llvm :: Value * tagValue , Address srcObject)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitLoadOfSize( IRGenFunction & IGF , SILType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitLoadOfAlignmentMask( IRGenFunction & IGF , SILType T)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitLoadOfIsPOD( IRGenFunction & IGF , SILType T)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitLoadOfIsBitwiseTakable( IRGenFunction & IGF , SILType T)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitLoadOfIsInline( IRGenFunction & IGF , SILType T)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitLoadOfStride( IRGenFunction & IGF , SILType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitLoadOfExtraInhabitantCount( IRGenFunction & IGF , SILType T)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitLoadOfIsInline( IRGenFunction & IGF , llvm :: Value * metadata)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitLoadOfSize( IRGenFunction & IGF , llvm :: Value * metadata)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitAlignMaskFromFlags( IRGenFunction & IGF , llvm :: Value * flags)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeWithCopyCall( IRGenFunction & IGF , SILType T , Address dest , Address src)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeWithCopyCall( IRGenFunction & IGF , llvm :: Value * metadata , Address dest , Address src)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeWithTakeCall( IRGenFunction & IGF , SILType T , Address dest , Address src)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitInitializeWithTakeCall( IRGenFunction & IGF , llvm :: Value * metadata , Address dest , Address src)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitDestroyCall( IRGenFunction & IGF , SILType T , Address object)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitDestroyCall( IRGenFunction & IGF , llvm :: Value * metadata , Address object)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"getAllocateValueBufferFunction( IRGenModule & IGM)",48, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitAllocateValueInBuffer( IRGenFunction & IGF , SILType type , Address buffer)",44, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"getProjectValueInBufferFunction( IRGenModule & IGM)",44, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitProjectValueInBuffer( IRGenFunction & IGF , SILType type , Address buffer)",37, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"getDeallocateValueInBufferFunction( IRGenModule & IGM)",38, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitDeallocateValueInBuffer( IRGenFunction & IGF , SILType type , Address buffer)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitGetEnumTagSinglePayloadGenericCall( IRGenFunction & IGF , SILType payloadType , const TypeInfo & payloadTI , llvm :: Value * numExtraCases , Address address , GetExtraInhabitantTagEmitter emitter)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::getOrCreateGetExtraInhabitantTagFunction( IRGenModule & IGM , SILType objectType , const TypeInfo & objectTI , GetExtraInhabitantTagEmitter emitter)",39, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::emitStoreEnumTagSinglePayloadGenericCall( IRGenFunction & IGF , SILType payloadType , const TypeInfo & payloadTI , llvm :: Value * whichCase , llvm :: Value * numExtraCases , Address address , StoreExtraInhabitantTagEmitter emitter)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"irgen::getOrCreateStoreExtraInhabitantTagFunction( IRGenModule & IGM , SILType objectType , const TypeInfo & objectTI , StoreExtraInhabitantTagEmitter emitter)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"TypeInfo::getExtraInhabitantTagDynamic( IRGenFunction & IGF , Address address , SILType T , llvm :: Value * knownXICount , bool isOutlined) const",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenOpaque.cpp,"TypeInfo::storeExtraInhabitantTagDynamic( IRGenFunction & IGF , llvm :: Value * tag , Address address , SILType T , bool isOutlined) const",17, 1, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"DynamicMetadataRequest::get( IRGenFunction & IGF) const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"DynamicMetadataRequest::getRequiredState( IRGenFunction & IGF) const",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"MetadataResponse::getUndef( IRGenFunction & IGF)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"MetadataResponse::handle( IRGenFunction & IGF , DynamicMetadataRequest request , llvm :: Value * pair)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"MetadataResponse::combine( IRGenFunction & IGF) const",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"MetadataResponse::ensureDynamicState( IRGenFunction & IGF) &",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"MetadataResponse::getCompletedState( IRGenModule & IGM)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"MetadataDependency::combine( IRGenFunction & IGF) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"MetadataDependency::getTrivialCombinedDependency( IRGenModule & IGM)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"MetadataDependencyCollector::checkDependency( IRGenFunction & IGF , DynamicMetadataRequest request , llvm :: Value * metadata , llvm :: Value * metadataState)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"MetadataDependencyCollector::finish( IRGenFunction & IGF)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"IRGenModule::getAddrOfStringForMetadataRef( StringRef symbolName , unsigned alignment , bool shouldSetLowBit , llvm :: function_ref<ConstantInitFuture(ConstantInitBuilder&)> body)",47, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"IRGenModule::getAddrOfStringForTypeRef( StringRef str , MangledTypeRefRole role)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"IRGenModule::getAddrOfStringForTypeRef( const SymbolicMangling & mangling , MangledTypeRefRole role)",107, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::emitObjCMetadataRefForMetadata( IRGenFunction & IGF , llvm :: Value * classPtr)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"emitObjCMetadataRef( IRGenFunction & IGF , ClassDecl * theClass)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"GenericArguments::getNumGenericArguments( IRGenModule & IGM , NominalTypeDecl * nominal)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"GenericArguments::collectTypes( IRGenModule & IGM , NominalTypeDecl * nominal)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"GenericArguments::collectTypes( IRGenModule & IGM , const GenericTypeRequirements & requirements)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"GenericArguments::collect( IRGenFunction & IGF , CanType type)",19, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"isTypeErasedGenericClass( NominalTypeDecl * ntd)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"isTypeErasedGenericClassType( CanType type)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::getRuntimeReifiedType( IRGenModule & IGM , CanType type)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::tryEmitConstantHeapMetadataRef( IRGenModule & IGM , CanType type , bool allowDynamicUninitialized)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::tryEmitConstantTypeMetadataRef( IRGenModule & IGM , CanType type , SymbolReferenceKind refKind)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::emitObjCHeapMetadataRef( IRGenFunction & IGF , ClassDecl * theClass , bool allowUninitialized)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"emitNominalMetadataRef( IRGenFunction & IGF , NominalTypeDecl * theDecl , CanType theType , DynamicMetadataRequest request)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::isTypeMetadataAccessTrivial( IRGenModule & IGM , CanType type)",65, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::getTypeMetadataAccessStrategy( CanType type)",46, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"getTupleLabelsString( IRGenModule & IGM , CanTupleType type , bool useLabels)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"emitEmptyTupleTypeMetadataRef( IRGenModule & IGM)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"emitTupleTypeMetadataRef( IRGenFunction & IGF , CanTupleType type , DynamicMetadataRequest request , bool useLabels , GetElementMetadataFn getMetadataRecursive)",108, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::EmitTypeMetadataRef( IRGenFunction & IGF)",1, 58, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::emitDirectMetadataRef( CanType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBuiltinIntegerType( CanBuiltinIntegerType type , DynamicMetadataRequest request)",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBuiltinIntegerLiteralType( CanBuiltinIntegerLiteralType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBuiltinNativeObjectType( CanBuiltinNativeObjectType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBuiltinBridgeObjectType( CanBuiltinBridgeObjectType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBuiltinUnknownObjectType( CanBuiltinUnknownObjectType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBuiltinUnsafeValueBufferType( CanBuiltinUnsafeValueBufferType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBuiltinRawPointerType( CanBuiltinRawPointerType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBuiltinFloatType( CanBuiltinFloatType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBuiltinVectorType( CanBuiltinVectorType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitNominalType( CanNominalType type , DynamicMetadataRequest request)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitBoundGenericType( CanBoundGenericType type , DynamicMetadataRequest request)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitTupleType( CanTupleType type , DynamicMetadataRequest request)",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitGenericFunctionType( CanGenericFunctionType type , DynamicMetadataRequest request)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::getFunctionParameterRef( AnyFunctionType :: CanParam & param)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitFunctionType( CanFunctionType type , DynamicMetadataRequest request)",175, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitAnyMetatypeType( CanAnyMetatypeType type , DynamicMetadataRequest request)",23, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitModuleType( CanModuleType type , DynamicMetadataRequest request)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitDynamicSelfType( CanDynamicSelfType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::emitExistentialTypeMetadata( CanType type , DynamicMetadataRequest request)",70, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitProtocolType( CanProtocolType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitProtocolCompositionType( CanProtocolCompositionType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitReferenceStorageType( CanReferenceStorageType type , DynamicMetadataRequest request)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitSILFunctionType( CanSILFunctionType type , DynamicMetadataRequest request)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitSILTokenType( CanSILTokenType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitArchetypeType( CanArchetypeType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitGenericTypeParamType( CanGenericTypeParamType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitDependentMemberType( CanDependentMemberType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitLValueType( CanLValueType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitInOutType( CanInOutType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitErrorType( CanErrorType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitSILBlockStorageType( CanSILBlockStorageType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::visitSILBoxType( CanSILBoxType type , DynamicMetadataRequest request)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::tryGetLocal( CanType type , DynamicMetadataRequest request)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRef::setLocal( CanType type , MetadataResponse response)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"emitDirectTypeMetadataRef( IRGenFunction & IGF , CanType type , DynamicMetadataRequest request)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"isLoadFrom( llvm :: Value * value , Address address)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::emitCacheAccessFunction( IRGenModule & IGM , llvm :: Function * accessor , llvm :: Constant * cacheVariable , CacheStrategy cacheStrategy , CacheEmitter getValue , bool isReadNone)",180, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"IRGenFunction::emitGenericTypeMetadataAccessFunctionCall( llvm :: Function * accessFunction , ArrayRef<llvm::Value*> args , DynamicMetadataRequest request)",52, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"emitGenericTypeMetadataAccessFunction( IRGenFunction & IGF , Explosion & params , NominalTypeDecl * nominal , GenericArguments & genericArgs)",59, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"emitIdempotentClassMetadataInitialization( IRGenFunction & IGF , llvm :: Value * metadata)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"emitDirectTypeMetadataAccessFunctionBody( IRGenFunction & IGF , DynamicMetadataRequest request , CanType type)",54, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"getAccessFunctionPrototype( IRGenModule & IGM , CanType type , ForDefinition_t forDefinition)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::getOtherwiseDefinedTypeMetadataAccessFunction( IRGenModule & IGM , CanType type)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::createTypeMetadataAccessFunction( IRGenModule & IGM , CanType type , CacheStrategy cacheStrategy , MetadataAccessGenerator generator , bool allowExistingDefinition)",53, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::createDirectTypeMetadataAccessFunction( IRGenModule & IGM , CanType type , bool allowExistingDefinition)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::getGenericTypeMetadataAccessFunction( IRGenModule & IGM , NominalTypeDecl * nominal , ForDefinition_t shouldDefine)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"emitCallToTypeMetadataAccessFunction( IRGenFunction & IGF , CanType type , DynamicMetadataRequest request)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"IRGenFunction::emitAbstractTypeMetadataRef( CanType type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"IRGenFunction::emitTypeMetadataRef( CanType type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"IRGenFunction::emitTypeMetadataRef( CanType type , DynamicMetadataRequest request)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::getOrCreateTypeMetadataAccessFunction( IRGenModule & IGM , CanType type)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::EmitTypeMetadataRefForLayout( IRGenFunction & IGF)",1, 67, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::emitDirectMetadataRef( CanType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::visitType( CanType t , DynamicMetadataRequest request)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::visitBoundGenericEnumType( CanBoundGenericEnumType type , DynamicMetadataRequest request)",26, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::visitTupleType( CanTupleType type , DynamicMetadataRequest request)",16, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::visitAnyFunctionType( CanAnyFunctionType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::visitSILFunctionType( CanSILFunctionType type , DynamicMetadataRequest request)",29, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::visitAnyMetatypeType( CanAnyMetatypeType type , DynamicMetadataRequest request)",22, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::tryGetLocal( CanType type , DynamicMetadataRequest request)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeMetadataRefForLayout::setLocal( CanType type , MetadataResponse response)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"IRGenFunction::emitTypeMetadataRefForLayout( SILType type)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"IRGenFunction::emitTypeMetadataRefForLayout( SILType type , DynamicMetadataRequest request)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::EmitTypeLayoutRef( IRGenFunction & IGF)",1, 56, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::emitFromValueWitnessTablePointer( llvm :: Value * vwtable)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::emitFromValueWitnessTable( CanType t)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::emitFromTypeMetadata( CanType t , DynamicMetadataRequest request)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::emitFromFixedLayout( CanType t)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::tryEmitFromFixedLayout( CanType t)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::hasVisibleValueWitnessTable( CanType t) const",34, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::visitType( CanType t , DynamicMetadataRequest request)",22, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::visitAnyFunctionType( CanAnyFunctionType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::visitSILFunctionType( CanSILFunctionType type , DynamicMetadataRequest request)",27, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::visitAnyMetatypeType( CanAnyMetatypeType type , DynamicMetadataRequest request)",25, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::visitAnyClassType( ClassDecl * classDecl , DynamicMetadataRequest request)",20, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::visitClassType( CanClassType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::visitBoundGenericClassType( CanBoundGenericClassType type , DynamicMetadataRequest request)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"EmitTypeLayoutRef::visitTupleType( CanTupleType type , DynamicMetadataRequest request)",96, 6, 4, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::emitTypeLayoutRef( IRGenFunction & IGF , SILType type , MetadataDependencyCollector * collector)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::emitClassHeapMetadataRefForMetatype( IRGenFunction & IGF , llvm :: Value * metatype , CanType type)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::emitClassHeapMetadataRef( IRGenFunction & IGF , CanType type , MetadataValueType desiredType , DynamicMetadataRequest request , bool allowUninitialized)",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::emitMetatypeRef( IRGenFunction & IGF , CanMetatypeType type , Explosion & explosion)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"canCheckStateWithBranch( DynamicMetadataRequest request , MetadataResponse response)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::emitCheckTypeMetadataState( IRGenFunction & IGF , DynamicMetadataRequest request , MetadataResponse response)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::getCheckTypeMetadataStateCost( DynamicMetadataRequest request , MetadataResponse response)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/MetadataRequest.cpp,"irgen::emitGetTypeMetadataDynamicState( IRGenFunction & IGF , DynamicMetadataRequest request , llvm :: Value * metadata)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::OpaqueExistentialLayout( unsigned numTables)",2, 32, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::getNumTables() const",1, 56, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::getSize( IRGenModule & IGM) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::getAlignment( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::projectExistentialBuffer( IRGenFunction & IGF , Address addr) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::projectWitnessTable( IRGenFunction & IGF , Address addr , unsigned which) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::loadWitnessTable( IRGenFunction & IGF , Address addr , unsigned which) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::projectMetadataRef( IRGenFunction & IGF , Address addr)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::getMetadataRefOffset( IRGenModule & IGM)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialLayout::loadMetadataRef( IRGenFunction & IGF , Address addr)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::asDerived() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::asDerived()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::ExistentialTypeInfoBase( ArrayRef<const ProtocolDecl*> protocols , As && ... args)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::create( ArrayRef<const ProtocolDecl*> protocols , As && ... args)",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::getNumStoredProtocols() const",1, 74, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::getStoredProtocols() const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::loadWitnessTable( IRGenFunction & IGF , Address obj , unsigned which) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::emitCopyOfTables( IRGenFunction & IGF , Address dest , Address src) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::emitLoadOfTables( IRGenFunction & IGF , Address existential , Explosion & out) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialTypeInfoBase::emitStoreOfTables( IRGenFunction & IGF , Explosion & in , Address existential) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"AddressOnlyClassExistentialTypeInfoBase::AddressOnlyClassExistentialTypeInfoBase( ArrayRef<const ProtocolDecl*> protocols , ReferenceCounting refcounting , As && ... args)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"AddressOnlyClassExistentialTypeInfoBase::projectWitnessTable( IRGenFunction & IGF , Address container , unsigned index) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"AddressOnlyClassExistentialTypeInfoBase::projectValue( IRGenFunction & IGF , Address existential) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"AddressOnlyClassExistentialTypeInfoBase::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"AddressOnlyClassExistentialTypeInfoBase::initializeWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"AddressOnlyClassExistentialTypeInfoBase::assignWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"AddressOnlyClassExistentialTypeInfoBase::initializeWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"AddressOnlyClassExistentialTypeInfoBase::destroy( IRGenFunction & IGF , Address existential , SILType T , bool isOutlined) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::ScalarExistentialTypeInfoBase( T && ... args)",2, 43, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getStorageType() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getExplosionSize() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getSchema( ExplosionSchema & schema) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::projectWitnessTable( IRGenFunction & IGF , Address address , unsigned n) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getValueType() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::projectValue( IRGenFunction & IGF , Address address) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::loadValue( IRGenFunction & IGF , Address addr) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::extractWitnessTable( IRGenFunction & IGF , Explosion & container , unsigned which) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getWitnessTablesAndValue( Explosion & container) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getValue( IRGenFunction & IGF , Explosion & container) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::loadAsCopy( IRGenFunction & IGF , Address address , Explosion & out) const",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::loadAsTake( IRGenFunction & IGF , Address address , Explosion & e) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::assign( IRGenFunction & IGF , Explosion & e , Address address , bool isOutlined) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::initialize( IRGenFunction & IGF , Explosion & e , Address address , bool isOutlined) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::copy( IRGenFunction & IGF , Explosion & src , Explosion & dest , Atomicity atomicity) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::consume( IRGenFunction & IGF , Explosion & src , Atomicity atomicity) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::fixLifetime( IRGenFunction & IGF , Explosion & src) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::destroy( IRGenFunction & IGF , Address addr , SILType T , bool isOutlined) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::packIntoEnumPayload( IRGenFunction & IGF , EnumPayload & payload , Explosion & src , unsigned offset) const",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::unpackFromEnumPayload( IRGenFunction & IGF , const EnumPayload & payload , Explosion & dest , unsigned offset) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::mayHaveExtraInhabitants( IRGenModule & IGM) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getFixedExtraInhabitantCount( IRGenModule & IGM) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ScalarExistentialTypeInfoBase::getFixedExtraInhabitantMask( IRGenModule & IGM) const",9, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::OpaqueExistentialTypeInfo( ArrayRef<const ProtocolDecl*> protocols , llvm :: Type * ty , Size size , SpareBitVector && spareBits , Alignment align)",7, 56, 12, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::getLayout() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::projectWitnessTable( IRGenFunction & IGF , Address obj , unsigned index) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",14, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::copyType( IRGenFunction & IGF , Address dest , Address src) const",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::initializeWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",20, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::initializeWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",15, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::destroy( IRGenFunction & IGF , Address addr , SILType T , bool isOutlined) const",10, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::getFixedExtraInhabitantCount( IRGenModule & IGM) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::getFixedExtraInhabitantMask( IRGenModule & IGM) const",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"OpaqueExistentialTypeInfo::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::ClassExistentialTypeInfo( ArrayRef<const ProtocolDecl*> protocols , llvm :: Type * ty , Size size , SpareBitVector && spareBits , Alignment align , ReferenceCounting refcounting)",13, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::mergeExplosion( Explosion & In , Explosion & Out , IRGenFunction & IGF) const",11, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::decomposeExplosion( Explosion & InE , Explosion & OutE , IRGenFunction & IGF) const",18, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::getPayloadType() const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::isSingleRetainablePointer( ResilienceExpansion expansion , ReferenceCounting * refcounting) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::getValueTypeInfoForExtraInhabitants( IRGenModule & IGM) const",6, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::strongRetain( IRGenFunction & IGF , Explosion & e , Atomicity atomicity) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::strongRelease( IRGenFunction & IGF , Explosion & e , Atomicity atomicity) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::emitValueRetain( IRGenFunction & IGF , llvm :: Value * value , Atomicity atomicity) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::emitValueRelease( IRGenFunction & IGF , llvm :: Value * value , Atomicity atomicity) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::emitValueFixLifetime( IRGenFunction & IGF , llvm :: Value * value) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::loadRefcountedPtr( IRGenFunction & IGF , SourceLoc loc , Address existential) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ClassExistentialTypeInfo::buildReferenceStorageType( IRGenModule & IGM , llvm :: Type * refStorageTy) const",8, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialMetatypeTypeInfo::ExistentialMetatypeTypeInfo( ArrayRef<const ProtocolDecl*> storedProtocols , llvm :: Type * ty , Size size , SpareBitVector && spareBits , Alignment align , const LoadableTypeInfo & metatypeTI)",9, 32, 7, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialMetatypeTypeInfo::getValueTypeInfoForExtraInhabitants( IRGenModule & IGM) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialMetatypeTypeInfo::emitValueRetain( IRGenFunction & IGF , llvm :: Value * value , Atomicity atomicity) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialMetatypeTypeInfo::emitValueRelease( IRGenFunction & IGF , llvm :: Value * value , Atomicity atomicity) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ExistentialMetatypeTypeInfo::emitValueFixLifetime( IRGenFunction & IGF , llvm :: Value * value) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ErrorExistentialTypeInfo::ErrorExistentialTypeInfo( llvm :: PointerType * storage , Size size , SpareBitVector spareBits , Alignment align , const ProtocolDecl * errorProto , ReferenceCounting refcounting)",7, 34, 4, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ErrorExistentialTypeInfo::getReferenceCounting() const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"ErrorExistentialTypeInfo::getStoredProtocols() const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"createErrorExistentialTypeInfo( IRGenModule & IGM , const ExistentialLayout & layout)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"createExistentialTypeInfo( IRGenModule & IGM , CanType T)",128, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"TypeConverter::convertProtocolType( ProtocolType * T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"TypeConverter::convertProtocolCompositionType( ProtocolCompositionType * T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"TypeConverter::convertExistentialMetatypeType( ExistentialMetatypeType * T)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"forEachProtocolWitnessTable( IRGenFunction & IGF , CanType srcType , llvm :: Value ** srcMetadataCache , CanType destType , ArrayRef<const ProtocolDecl*> protocols , ArrayRef<ProtocolConformanceRef> conformances , llvm :: function_ref<void(unsigned,llvm::Value*)> body)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitBoxedExistentialProjection( IRGenFunction & IGF , Explosion & base , SILType baseTy , CanType projectedType)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitOpenExistentialBox( IRGenFunction & IGF , Explosion & base , SILType baseTy , CanArchetypeType openedArchetype)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitBoxedExistentialContainerAllocation( IRGenFunction & IGF , SILType destType , CanType formalSrcType , ArrayRef<ProtocolConformanceRef> conformances)",37, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitBoxedExistentialContainerDeallocation( IRGenFunction & IGF , Explosion & container , SILType containerType , CanType valueType)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitClassExistentialContainer( IRGenFunction & IGF , Explosion & out , SILType outType , llvm :: Value * instance , CanType instanceFormalType , SILType instanceLoweredType , ArrayRef<ProtocolConformanceRef> conformances)",38, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitOpaqueExistentialContainerInit( IRGenFunction & IGF , Address dest , SILType destType , CanType formalSrcType , SILType loweredSrcType , ArrayRef<ProtocolConformanceRef> conformances)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitExistentialMetatypeContainer( IRGenFunction & IGF , Explosion & out , SILType outType , llvm :: Value * metatype , SILType metatypeType , ArrayRef<ProtocolConformanceRef> conformances)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitMetatypeOfOpaqueExistential( IRGenFunction & IGF , Address addr , SILType type , Explosion & out)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitMetatypeOfBoxedExistential( IRGenFunction & IGF , Explosion & value , SILType type , Explosion & out)",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitMetatypeOfClassExistential( IRGenFunction & IGF , Explosion & value , SILType metatypeTy , SILType existentialTy , Explosion & out)",26, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitMetatypeOfMetatype( IRGenFunction & IGF , Explosion & value , SILType existentialTy , Explosion & out)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitClassExistentialProjection( IRGenFunction & IGF , Explosion & base , SILType baseTy , CanArchetypeType openedArchetype)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitExistentialMetatypeProjection( IRGenFunction & IGF , Explosion & base , SILType baseTy , CanType openedTy)",47, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"castToOpaquePtr( IRGenFunction & IGF , Address addr)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"getAllocateBoxedOpaqueExistentialBufferFunction( IRGenModule & IGM , OpaqueExistentialLayout existLayout , llvm :: Type * existContainerPointerTy)",53, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitAllocateBoxedOpaqueExistentialBuffer( IRGenFunction & IGF , SILType existentialType , SILType valueType , Address existentialContainer , GenericEnvironment * genericEnv , bool isOutlined)",39, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"getDeallocateBoxedOpaqueExistentialBufferFunction( IRGenModule & IGM , OpaqueExistentialLayout existLayout , llvm :: Type * existContainerPointerTy)",72, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitDeallocateBoxedOpaqueExistentialBuffer( IRGenFunction & IGF , SILType existentialType , Address existentialContainer)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"getProjectBoxedOpaqueExistentialFunction( IRGenFunction & IGF , OpenedExistentialAccess accessKind , OpaqueExistentialLayout existLayout)",80, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"irgen::emitOpaqueBoxedExistentialProjection( IRGenFunction & IGF , OpenedExistentialAccess accessKind , Address base , SILType existentialTy , CanArchetypeType openedArchetype)",55, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"initBufferWithCopyOfReference( IRGenFunction & IGF , OpaqueExistentialLayout existLayout , Address destBuffer , Address srcBuffer)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"getAssignBoxedOpaqueExistentialBufferFunction( IRGenModule & IGM , OpaqueExistentialLayout existLayout , llvm :: Type * existContainerPointerTy)",215, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenExistential.cpp,"getDestroyBoxedOpaqueExistentialBufferFunction( IRGenModule & IGM , OpaqueExistentialLayout existLayout , llvm :: Type * existContainerPointerTy)",52, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncSignatureInfo::FuncSignatureInfo( CanSILFunctionType formalType)",2, 34, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"ThinFuncTypeInfo::ThinFuncTypeInfo( CanSILFunctionType formalType , llvm :: Type * storageType , Size size , Alignment align , const SpareBitVector & spareBits)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"ThinFuncTypeInfo::create( CanSILFunctionType formalType , llvm :: Type * storageType , Size size , Alignment align , const SpareBitVector & spareBits)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"ThinFuncTypeInfo::mayHaveExtraInhabitants( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"ThinFuncTypeInfo::getFixedExtraInhabitantCount( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"ThinFuncTypeInfo::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"ThinFuncTypeInfo::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"ThinFuncTypeInfo::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::FuncTypeInfo( CanSILFunctionType formalType , llvm :: StructType * storageType , Size size , Alignment align , SpareBitVector && spareBits , IsPOD_t pod)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::create( CanSILFunctionType formalType , llvm :: StructType * storageType , Size size , Alignment align , SpareBitVector && spareBits , IsPOD_t pod)",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::getFirstElementSize( IRGenModule & IGM)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::getFirstElementLabel()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::isFirstElementTrivial()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::emitRetainFirstElement( IRGenFunction & IGF , llvm :: Value * fn , Optional<Atomicity> atomicity = None) const",2, 79, 32, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::emitReleaseFirstElement( IRGenFunction & IGF , llvm :: Value * fn , Optional<Atomicity> atomicity = None) const",2, 80, 33, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::emitAssignFirstElement( IRGenFunction & IGF , llvm :: Value * fn , Address fnAddr) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::getSecondElementOffset( IRGenModule & IGM)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::getSecondElementSize( IRGenModule & IGM)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::getSecondElementLabel()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::isSecondElementTrivial() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::emitRetainSecondElement( IRGenFunction & IGF , llvm :: Value * data , Optional<Atomicity> atomicity = None) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::emitReleaseSecondElement( IRGenFunction & IGF , llvm :: Value * data , Optional<Atomicity> atomicity = None) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::emitAssignSecondElement( IRGenFunction & IGF , llvm :: Value * context , Address dataAddr) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::projectFunction( IRGenFunction & IGF , Address address) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::projectData( IRGenFunction & IGF , Address address) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::strongRetain( IRGenFunction & IGF , Explosion & e , Atomicity atomicity) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::strongRelease( IRGenFunction & IGF , Explosion & e , Atomicity atomicity) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::mayHaveExtraInhabitants( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::getFixedExtraInhabitantCount( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::getFixedExtraInhabitantMask( IRGenModule & IGM) const",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncTypeInfo::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"BlockTypeInfo::BlockTypeInfo( CanSILFunctionType ty , llvm :: PointerType * storageType , Size size , SpareBitVector spareBits , Alignment align)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"BlockTypeInfo::getReferenceCounting() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"BlockStorageTypeInfo::BlockStorageTypeInfo( llvm :: Type * type , Size size , Alignment align , SpareBitVector && spareBits , IsPOD_t pod , IsBitwiseTakable_t bt , Size captureOffset)",7, 7, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"BlockStorageTypeInfo::projectBlockHeader( IRGenFunction & IGF , Address storage) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"BlockStorageTypeInfo::projectCapture( IRGenFunction & IGF , Address storage) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"BlockStorageTypeInfo::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"BlockStorageTypeInfo::initializeWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"BlockStorageTypeInfo::destroy( IRGenFunction & IGF , Address addr , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"TypeConverter::convertBlockStorageType( SILBlockStorageType * T)",41, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"irgen::projectBlockStorageCapture( IRGenFunction & IGF , Address storageAddr , CanSILBlockStorageType storageTy)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"TypeConverter::convertFunctionType( SILFunctionType * T)",44, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"FuncSignatureInfo::getSignature( IRGenModule & IGM) const",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"getFuncSignatureInfoForLowered( IRGenModule & IGM , CanSILFunctionType type)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"IRGenModule::getSignature( CanSILFunctionType type)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"IRGenModule::getFunctionType( CanSILFunctionType type , llvm :: AttributeList & attrs , ForeignFunctionInfo * foreignInfo)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"IRGenModule::getForeignFunctionInfo( CanSILFunctionType type)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"emitApplyArgument( IRGenFunction & IGF , SILParameterInfo origParam , SILParameterInfo substParam , Explosion & in , Explosion & out)",42, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"getArgumentLoweringType( CanType type , SILParameterInfo paramInfo)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"isABIIgnoredParameterWithoutStorage( IRGenModule & IGM , IRGenFunction & IGF , CanSILFunctionType substType , unsigned paramIdx)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"findSinglePartiallyAppliedParameterIndexIgnoringEmptyTypes( IRGenFunction & IGF , CanSILFunctionType substType , CanSILFunctionType outType)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"emitPartialApplicationForwarder( IRGenModule & IGM , const Optional<FunctionPointer> & staticFnPtr , bool calleeHasContext , const Signature & origSig , CanSILFunctionType origType , CanSILFunctionType substType , CanSILFunctionType outType , SubstitutionMap subs , HeapLayout const * layout , ArrayRef<ParameterConvention> conventions)",572, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"irgen::emitFunctionPartialApplication( IRGenFunction & IGF , SILFunction & SILFn , const FunctionPointer & fn , llvm :: Value * fnContext , Explosion & args , ArrayRef<SILParameterInfo> params , SubstitutionMap subs , CanSILFunctionType origType , CanSILFunctionType substType , CanSILFunctionType outType , Explosion & out , bool isOutlined)",278, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"emitBlockCopyHelper( IRGenModule & IGM , CanSILBlockStorageType blockTy , const BlockStorageTypeInfo & blockTL)",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"emitBlockDisposeHelper( IRGenModule & IGM , CanSILBlockStorageType blockTy , const BlockStorageTypeInfo & blockTL)",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenFunc.cpp,"irgen::emitBlockHeader( IRGenFunction & IGF , Address storage , CanSILBlockStorageType blockTy , llvm :: Constant * invokeFunction , CanSILFunctionType invokeTy , ForeignFunctionInfo foreignInfo)",88, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"getYieldOnceCoroutineBufferSize( IRGenModule & IGM)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"getYieldOnceCoroutineBufferAlignment( IRGenModule & IGM)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"getYieldManyCoroutineBufferSize( IRGenModule & IGM)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"getYieldManyCoroutineBufferAlignment( IRGenModule & IGM)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"getCoroutineContextSize( IRGenModule & IGM , CanSILFunctionType fnType)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ExplosionSchema::getScalarResultType( IRGenModule & IGM) const",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"addDereferenceableAttributeToBuilder( IRGenModule & IGM , llvm :: AttrBuilder & b , const TypeInfo & ti)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"addIndirectValueParameterAttributes( IRGenModule & IGM , llvm :: AttributeList & attrs , const TypeInfo & ti , unsigned argIndex)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"addInoutParameterAttributes( IRGenModule & IGM , llvm :: AttributeList & attrs , const TypeInfo & ti , unsigned argIndex , bool aliasable)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"getFreestandingConvention( IRGenModule & IGM)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::expandCallingConv( IRGenModule & IGM , SILFunctionTypeRepresentation convention)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"addIndirectResultAttributes( IRGenModule & IGM , llvm :: AttributeList & attrs , unsigned paramIndex , bool allowSRet)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenModule::addSwiftSelfAttributes( llvm :: AttributeList & attrs , unsigned argIndex)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenModule::addSwiftErrorAttributes( llvm :: AttributeList & attrs , unsigned argIndex)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::addByvalArgumentAttributes( IRGenModule & IGM , llvm :: AttributeList & attrs , unsigned argIndex , Alignment align)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::addExtendAttribute( IRGenModule & IGM , llvm :: AttributeList & attrs , unsigned index , bool signExtend)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"swift::irgen::SignatureExpansion::SignatureExpansion( IRGenModule & IGM , CanSILFunctionType fnType)",2, 36, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"swift::irgen::SignatureExpansion::getSILFuncConventions() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"swift::irgen::SignatureExpansion::getCurParamIndex()",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"swift::irgen::SignatureExpansion::claimSRet()",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"swift::irgen::SignatureExpansion::claimSelf()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"swift::irgen::SignatureExpansion::claimError()",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"swift::irgen::SignatureExpansion::addPointerParameter( llvm :: Type * storageType)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::addIndirectResult()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::expandResult()",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"YieldSchema::YieldSchema( IRGenModule & IGM , SILFunctionConventions fnConv , SILYieldInfo yield)",11, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"YieldSchema::getSILType() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"YieldSchema::getTypeInfo() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"YieldSchema::isIndirect() const",1, 51, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"YieldSchema::isFormalIndirect() const",1, 66, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"YieldSchema::getIndirectPointerType() const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"YieldSchema::getDirectSchema() const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"YieldSchema::enumerateDirectComponents( llvm :: function_ref<void(llvm::Type*)> fn)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::expandCoroutineResult( bool forContinuation)",83, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::expandCoroutineContinuationParameters()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::addCoroutineContextParameter()",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"NativeConventionSchema::NativeConventionSchema( IRGenModule & IGM , const TypeInfo * ti , bool IsResult)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"NativeConventionSchema::getExpandedType( IRGenModule & IGM) const",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"NativeConventionSchema::getCoercionTypes( IRGenModule & IGM , SmallVectorImpl<unsigned> & expandedTyIndicesMap) const",100, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::expandDirectResult()",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"getLargestUnionField( const clang :: RecordDecl * record , const clang :: ASTContext & ctx)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpand::ClangExpand( IRGenModule & IGM)",1, 79, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpand::asImpl()",1, 57, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpand::visit( clang :: CanQualType type , Args ... args)",98, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpand::getSizeOfType( clang :: QualType type)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpand::convertVectorType( clang :: CanQual<clang::VectorType> type)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpand::convertBuiltinType( clang :: CanQual<clang::BuiltinType> type)",93, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpand::convertFloatingType( const llvm :: fltSemantics & format)",15, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpand::convertTypeAsInteger( clang :: QualType type)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandProjection::ClangExpandProjection( IRGenFunction & IGF)",2, 36, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandProjection::visit( clang :: CanQualType type , Address addr)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandProjection::beginArrayElements( clang :: CanQualType element)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandProjection::visitArrayElement( clang :: CanQualType element , unsigned i , Size elementSize , Address arrayAddr)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandProjection::visitComplexElement( clang :: CanQualType element , unsigned i , Address complexAddr)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandProjection::visitUnionField( const clang :: RecordDecl * record , const clang :: FieldDecl * field , Address structAddr)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandProjection::beginStructFields( const clang :: RecordDecl * record)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandProjection::visitStructField( const clang :: RecordDecl * record , const clang :: FieldDecl * field , const clang :: ASTRecordLayout & layout , Address structAddr)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandProjection::createGEPAtOffset( Address addr , Size offset)",7, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandTypeCollector::ClangExpandTypeCollector( IRGenModule & IGM , SmallVectorImpl<llvm::Type*> & types)",3, 42, 8, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandTypeCollector::beginArrayElements( clang :: CanQualType element)",1, 73, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandTypeCollector::visitArrayElement( clang :: CanQualType element , unsigned i , bool _)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandTypeCollector::visitComplexElement( clang :: CanQualType element , unsigned i)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandTypeCollector::visitUnionField( const clang :: RecordDecl * record , const clang :: FieldDecl * field)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandTypeCollector::beginStructFields( const clang :: RecordDecl * record)",1, 77, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandTypeCollector::visitStructField( const clang :: RecordDecl * record , const clang :: FieldDecl * field , bool _)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandTypeCollector::visitScalar( llvm :: Type * type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"doesClangExpansionMatchSchema( IRGenModule & IGM , clang :: CanQualType type , const ExplosionSchema & schema)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::expandExternalSignatureTypes()",165, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"expandScalarOrStructTypeToArray( llvm :: Type * & ty)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::expand( SILParameterInfo param)",51, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::hasSelfContextParameter( CanSILFunctionType fnType)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::expandParameters()",85, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::expandFunctionType()",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::expandCoroutineContinuationType()",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"SignatureExpansion::getSignature()",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"Signature::getUncached( IRGenModule & IGM , CanSILFunctionType formalType)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"Signature::forCoroutineContinuation( IRGenModule & IGM , CanSILFunctionType fnType)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::extractScalarResults( IRGenFunction & IGF , llvm :: Type * bodyType , llvm :: Value * call , Explosion & out)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::emitToUnmappedExplosion( Explosion & out)",47, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::emitToUnmappedMemory( Address result)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::emitCallSite()",62, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRBuilder::CreateCall( const FunctionPointer & fn , ArrayRef<llvm::Value*> args)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::emitToMemory( Address addr , const LoadableTypeInfo & indirectedResultTI , bool isOutlined)",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"emitCastToSubstSchema( IRGenFunction & IGF , Explosion & in , const ExplosionSchema & schema , Explosion & out)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::emitYieldsToExplosion( Explosion & out)",76, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::emitToExplosion( Explosion & out , bool isOutlined)",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::CallEmission( CallEmission && other)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::~CallEmission()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"Callee::Callee( CalleeInfo && info , const FunctionPointer & fn , llvm :: Value * firstData , llvm :: Value * secondData)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"Callee::getSwiftContext() const",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"Callee::getBlockObject() const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"Callee::getObjCMethodReceiver() const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"Callee::getObjCMethodSelector() const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::setFromCallee()",56, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::canCoerceToSchema( IRGenModule & IGM , ArrayRef<llvm::Type*> expandedTys , const ExplosionSchema & schema)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"getOutputType( TranslationDirection direction , unsigned index , const ExplosionSchema & nativeSchema , ArrayRef<llvm::Type*> expandedForeignTys)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"emitCoerceAndExpand( IRGenFunction & IGF , Explosion & in , Explosion & out , SILType paramTy , const LoadableTypeInfo & paramTI , llvm :: StructType * coercionTy , ArrayRef<llvm::Type*> expandedTys , TranslationDirection direction , bool isOutlined)",87, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"emitDirectExternalArgument( IRGenFunction & IGF , SILType argType , const clang :: CodeGen :: ABIArgInfo & AI , Explosion & in , Explosion & out , bool isOutlined)",61, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandLoadEmitter::ClangExpandLoadEmitter( IRGenFunction & IGF , Explosion & out)",2, 48, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandLoadEmitter::visitScalar( llvm :: Type * scalarTy , Address addr)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandStoreEmitter::ClangExpandStoreEmitter( IRGenFunction & IGF , Explosion & in)",2, 46, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"ClangExpandStoreEmitter::visitScalar( llvm :: Type * scalarTy , Address addr)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"emitClangExpandedArgument( IRGenFunction & IGF , Explosion & in , Explosion & out , clang :: CanQualType clangType , SILType swiftType , const LoadableTypeInfo & swiftTI , bool isOutlined)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::emitClangExpandedParameter( IRGenFunction & IGF , Explosion & in , Explosion & out , clang :: CanQualType clangType , SILType swiftType , const LoadableTypeInfo & swiftTI)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"externalizeArguments( IRGenFunction & IGF , const Callee & callee , Explosion & in , Explosion & out , TemporarySet & temporaries , bool isOutlined)",111, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::addNativeArgument( IRGenFunction & IGF , Explosion & in , SILParameterInfo origParamInfo , Explosion & out , bool isOutlined)",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"emitDirectForeignParameter( IRGenFunction & IGF , Explosion & in , const clang :: CodeGen :: ABIArgInfo & AI , Explosion & out , SILType paramType , const LoadableTypeInfo & paramTI)",75, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::emitForeignParameter( IRGenFunction & IGF , Explosion & params , ForeignFunctionInfo foreignInfo , unsigned foreignParamIndex , SILType paramTy , const LoadableTypeInfo & paramTI , Explosion & paramExplosion , bool isOutlined)",53, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"emitRetconCoroutineEntry( IRGenFunction & IGF , CanSILFunctionType fnType , Explosion & allParamValues , llvm :: Intrinsic :: ID idIntrinsic , Size bufferSize , Alignment bufferAlignment)",35, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::emitYieldOnceCoroutineEntry( IRGenFunction & IGF , CanSILFunctionType fnType , Explosion & allParamValues)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::emitYieldManyCoroutineEntry( IRGenFunction & IGF , CanSILFunctionType fnType , Explosion & allParamValues)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"createOpaqueBufferAlloca( IRGenFunction & IGF , Size size , Alignment align)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::emitAllocYieldOnceCoroutineBuffer( IRGenFunction & IGF)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::emitAllocYieldManyCoroutineBuffer( IRGenFunction & IGF)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::emitDeallocYieldOnceCoroutineBuffer( IRGenFunction & IGF , Address buffer)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::emitDeallocYieldManyCoroutineBuffer( IRGenFunction & IGF , Address buffer)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::emitYield( IRGenFunction & IGF , CanSILFunctionType coroutineType , Explosion & substValues)",77, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::setArgs( Explosion & original , bool isOutlined , WitnessMetadata * witnessMetadata)",86, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"CallEmission::addAttribute( unsigned index , llvm :: Attribute :: AttrKind attr)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::collectParameters()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::getErrorResultSlot( SILType errorType)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::getCallerErrorResultSlot()",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::setErrorResultSlot( llvm :: Value * address)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::emitBBForReturn()",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::emitPrologue()",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::emitBranchToReturnBB()",32, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::emitEpilogue()",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::allocateForCoercion( IRGenFunction & IGF , llvm :: Type * fromTy , llvm :: Type * toTy , const llvm :: Twine & basename)",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::coerceValue( llvm :: Value * value , llvm :: Type * toTy , const llvm :: DataLayout & DL)",34, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::emitScalarReturn( llvm :: Type * resultType , Explosion & result)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"adjustAllocaAlignment( const llvm :: DataLayout & DL , Address allocaAddr , llvm :: StructType * type)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"NativeConventionSchema::size() const",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"canMatchByTruncation( IRGenModule & IGM , ArrayRef<llvm::Type*> expandedTys , const ExplosionSchema & schema)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"NativeConventionSchema::mapFromNative( IRGenModule & IGM , IRGenFunction & IGF , Explosion & native , SILType type) const",131, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"NativeConventionSchema::mapIntoNative( IRGenModule & IGM , IRGenFunction & IGF , Explosion & fromNonNative , SILType type , bool isOutlined) const",135, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"IRGenFunction::emitScalarReturn( SILType resultType , Explosion & result , bool isSwiftCCReturn , bool isOutlined)",61, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"emitCastOfFunctionPointer( IRGenFunction & IGF , llvm :: Value * & fnPtr , CanSILFunctionType fnType)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::getBlockPointerCallee( IRGenFunction & IGF , llvm :: Value * blockPtr , CalleeInfo && info)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::getSwiftFunctionPointerCallee( IRGenFunction & IGF , llvm :: Value * fnPtr , llvm :: Value * dataPtr , CalleeInfo && calleeInfo , bool castOpaqueToRefcountedContext)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"irgen::getCFunctionPointerCallee( IRGenFunction & IGF , llvm :: Value * fnPtr , CalleeInfo && calleeInfo)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"FunctionPointer::forDirect( IRGenModule & IGM , llvm :: Constant * fnPtr , CanSILFunctionType fnType)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"FunctionPointer::forExplosionValue( IRGenFunction & IGF , llvm :: Value * fnPtr , CanSILFunctionType fnType)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCall.cpp,"FunctionPointer::getExplosionValue( IRGenFunction & IGF , CanSILFunctionType fnType) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenConstant.cpp,"irgen::emitConstantInt( IRGenModule & IGM , IntegerLiteralInst * ILI)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenConstant.cpp,"irgen::emitConstantFP( IRGenModule & IGM , FloatLiteralInst * FLI)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenConstant.cpp,"irgen::emitAddrOfConstantString( IRGenModule & IGM , StringLiteralInst * SLI)",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenConstant.cpp,"emitConstantValue( IRGenModule & IGM , SILValue operand)",52, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenConstant.cpp,"insertPadding( SmallVectorImpl<llvm::Constant*> & Elements , llvm :: StructType * sTy)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenConstant.cpp,"emitConstantStructOrTuple( IRGenModule & IGM , InstTy inst , NextIndexFunc nextIndex)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenConstant.cpp,"irgen::emitConstantStruct( IRGenModule & IGM , StructInst * SI)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenConstant.cpp,"irgen::emitConstantTuple( IRGenModule & IGM , TupleInst * TI)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenConstant.cpp,"irgen::emitConstantObject( IRGenModule & IGM , ObjectInst * OI , StructLayout * ClassLayout)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"getManglingForWitness( swift :: Demangle :: ValueWitnessKind kind)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleValueWitness( Type type , ValueWitness witness)",29, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::manglePartialApplyForwarder( StringRef FuncName)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::withSymbolicReferences( IRGenModule & IGM , llvm :: function_ref<void()> body)",45, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleTypeForReflection( IRGenModule & IGM , Type Ty)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleProtocolConformanceDescriptor( const RootProtocolConformance * conformance)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleProtocolConformanceForReflection( IRGenModule & IGM , Type ty , ProtocolConformanceRef conformance)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleTypeForLLVMTypeName( CanType Ty)",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleProtocolForLLVMTypeName( ProtocolCompositionType * type)",38, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleSymbolNameForSymbolicMangling( const SymbolicMangling & mangling , MangledTypeRefRole role)",38, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleSymbolNameForAssociatedConformanceWitness( const NormalProtocolConformance * conformance , CanType associatedType , const ProtocolDecl * proto)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleSymbolNameForKeyPathMetadata( const char * kind , CanGenericSignature genericSig , CanType type , ProtocolConformanceRef conformance)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/IRGenMangler.cpp,"IRGenMangler::mangleSymbolNameForGenericEnvironment( CanGenericSignature genericSig)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getCappedAlignment( Alignment align)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::Types_t::getCacheFor( bool isDependent , TypeConverter :: Mode mode)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::assign( IRGenFunction & IGF , Address dest , Address src , IsTake_t isTake , SILType T , bool isOutlined) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::initialize( IRGenFunction & IGF , Address dest , Address src , IsTake_t isTake , SILType T , bool isOutlined) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::isSingleRetainablePointer( ResilienceExpansion expansion , ReferenceCounting * refcounting) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::getSchema() const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::~TypeInfo()",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::getAddressForPointer( llvm :: Value * ptr) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::getUndefAddress() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::isKnownEmpty( ResilienceExpansion expansion) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::nativeReturnValueSchema( IRGenModule & IGM) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::nativeParameterValueSchema( IRGenModule & IGM) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::initializeWithTake( IRGenFunction & IGF , Address destAddr , Address srcAddr , SILType T , bool isOutlined) const",20, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LoadableTypeInfo::initializeWithCopy( IRGenFunction & IGF , Address destAddr , Address srcAddr , SILType T , bool isOutlined) const",21, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LoadableTypeInfo::loadRefcountedPtr( IRGenFunction & IGF , SourceLoc loc , Address addr) const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LoadableTypeInfo::addScalarToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , llvm :: Type * type , Size offset , Size storageSize)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"asSizeConstant( IRGenModule & IGM , Size size)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getSize( IRGenFunction & IGF , SILType T) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getStaticSize( IRGenModule & IGM) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getAlignmentMask( IRGenFunction & IGF , SILType T) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getStaticAlignmentMask( IRGenModule & IGM) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getStride( IRGenFunction & IGF , SILType T) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getIsPOD( IRGenFunction & IGF , SILType T) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getIsBitwiseTakable( IRGenFunction & IGF , SILType T) const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getStaticStride( IRGenModule & IGM) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::isDynamicallyPackedInline( IRGenFunction & IGF , SILType T) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getSpareBitExtraInhabitantCount() const",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::applyFixedSpareBitsMask( SpareBitVector & mask , const SpareBitVector & spareBits)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::applyFixedSpareBitsMask( SpareBitVector & mask) const",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getSpareBitFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getSpareBitExtraInhabitantIndex( IRGenFunction & IGF , Address src) const",58, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"computeExtraTagBytes( IRGenFunction & IGF , IRBuilder & Builder , Size fixedSize , llvm :: Value * numEmptyCases)",63, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::getEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * numEmptyCases , Address enumAddr , SILType T , bool isOutlined) const",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"irgen::getFixedTypeEnumTagSinglePayload( IRGenFunction & IGF , const FixedTypeInfo & ti , llvm :: Value * numEmptyCases , Address enumAddr , SILType T , bool isOutlined)",113, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"emitSpecializedMemOperation( IRGenFunction & IGF , llvm :: function_ref<void(IRBuilder&,Size)> emitMemOpFn , llvm :: Value * size)",43, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"emitMemZero( IRGenFunction & IGF , Address addr , llvm :: Value * size)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"emitMemCpy( IRGenFunction & IGF , Address to , Address from , llvm :: Value * size)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::storeEnumTagSinglePayload( IRGenFunction & IGF , llvm :: Value * whichCase , llvm :: Value * numEmptyCases , Address enumAddr , SILType T , bool isOutlined) const",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"irgen::storeFixedTypeEnumTagSinglePayload( IRGenFunction & IGF , const FixedTypeInfo & ti , llvm :: Value * whichCase , llvm :: Value * numEmptyCases , Address enumAddr , SILType T , bool isOutlined)",128, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"FixedTypeInfo::storeSpareBitExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest) const",49, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::EmptyTypeInfo( llvm :: Type * ty)",3, 39, 6, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::getExplosionSize() const",1, 61, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::getSchema( ExplosionSchema & schema) const",1, 62, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",2, 57, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::loadAsCopy( IRGenFunction & IGF , Address addr , Explosion & e) const",2, 52, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::loadAsTake( IRGenFunction & IGF , Address addr , Explosion & e) const",2, 52, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::assign( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",2, 51, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::initialize( IRGenFunction & IGF , Explosion & e , Address addr , bool isOutlined) const",2, 55, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::copy( IRGenFunction & IGF , Explosion & src , Explosion & dest , Atomicity atomicity) const",2, 70, 14, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::consume( IRGenFunction & IGF , Explosion & src , Atomicity atomicity) const",2, 56, 17, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::fixLifetime( IRGenFunction & IGF , Explosion & src) const",1, 75, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::destroy( IRGenFunction & IGF , Address addr , SILType T , bool isOutlined) const",2, 52, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::packIntoEnumPayload( IRGenFunction & IGF , EnumPayload & payload , Explosion & src , unsigned offset) const",2, 80, 29, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"EmptyTypeInfo::unpackFromEnumPayload( IRGenFunction & IGF , const EnumPayload & payload , Explosion & dest , unsigned offset) const",4, 66, 31, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"PrimitiveTypeInfo::PrimitiveTypeInfo( llvm :: Type * storage , Size size , SpareBitVector && spareBits , Alignment align)",4, 79, 6, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"RawPointerTypeInfo::RawPointerTypeInfo( llvm :: Type * storage , Size size , Alignment align)",5, 20, 10, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"RawPointerTypeInfo::mayHaveExtraInhabitants( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"RawPointerTypeInfo::getFixedExtraInhabitantCount( IRGenModule & IGM) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"RawPointerTypeInfo::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"RawPointerTypeInfo::getExtraInhabitantIndex( IRGenFunction & IGF , Address src , SILType T , bool isOutlined) const",13, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"RawPointerTypeInfo::storeExtraInhabitant( IRGenFunction & IGF , llvm :: Value * index , Address dest , SILType T , bool isOutlined) const",8, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::OpaqueStorageTypeInfo( llvm :: ArrayType * storage , llvm :: IntegerType * scalarType , Size size , SpareBitVector && spareBits , Alignment align)",9, 7, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::getStorageType() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::getExplosionSize() const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::loadAsCopy( IRGenFunction & IGF , Address addr , Explosion & explosion) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::loadAsTake( IRGenFunction & IGF , Address addr , Explosion & explosion) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::assign( IRGenFunction & IGF , Explosion & explosion , Address addr , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::initialize( IRGenFunction & IGF , Explosion & explosion , Address addr , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::reexplode( IRGenFunction & IGF , Explosion & sourceExplosion , Explosion & targetExplosion) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::copy( IRGenFunction & IGF , Explosion & sourceExplosion , Explosion & targetExplosion , Atomicity atomicity) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::consume( IRGenFunction & IGF , Explosion & explosion , Atomicity atomicity) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::fixLifetime( IRGenFunction & IGF , Explosion & explosion) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::destroy( IRGenFunction & IGF , Address address , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::getSchema( ExplosionSchema & schema) const",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::addToAggLowering( IRGenModule & IGM , SwiftAggLowering & lowering , Size offset) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::packIntoEnumPayload( IRGenFunction & IGF , EnumPayload & payload , Explosion & source , unsigned offset) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"OpaqueStorageTypeInfo::unpackFromEnumPayload( IRGenFunction & IGF , const EnumPayload & payload , Explosion & target , unsigned offset) const",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"ImmovableTypeInfo::ImmovableTypeInfo( llvm :: Type * storage , Size size , SpareBitVector && spareBits , Alignment align)",5, 72, 25, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"ImmovableTypeInfo::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"ImmovableTypeInfo::assignWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"ImmovableTypeInfo::initializeWithTake( IRGenFunction & IGF , Address destAddr , Address srcAddr , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"ImmovableTypeInfo::initializeWithCopy( IRGenFunction & IGF , Address destAddr , Address srcAddr , SILType T , bool isOutlined) const",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"ImmovableTypeInfo::destroy( IRGenFunction & IGF , Address address , SILType T , bool isOutlined) const",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::createPrimitive( llvm :: Type * type , Size size , Alignment align)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::createPrimitiveForAlignedPointer( llvm :: PointerType * type , Size size , Alignment align , Alignment pointerAlignment)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::createImmovable( llvm :: Type * type , Size size , Alignment align)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"invalidTypeInfo()",1, 61, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::readLegacyTypeInfo( StringRef path)",28, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"mangleTypeAsContext( const NominalTypeDecl * decl)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getLegacyTypeInfo( NominalTypeDecl * decl) const",12, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::TypeConverter( IRGenModule & IGM)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::~TypeConverter()",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::pushGenericContext( CanGenericSignature signature)",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::popGenericContext( CanGenericSignature signature)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getGenericEnvironment()",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getGenericEnvironment()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::addForwardDecl( TypeBase * key)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getWitnessTablePtrTypeInfo()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getWitnessTablePtrTypeInfo()",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getWitnessTablePtrSpareBits() const",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getTypeMetadataPtrTypeInfo()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getTypeMetadataPtrTypeInfo()",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getReferenceObjectTypeInfo( ReferenceCounting refcounting)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getNativeObjectTypeInfo()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getNativeObjectTypeInfo()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getUnknownObjectTypeInfo()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getUnknownObjectTypeInfo()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getBridgeObjectTypeInfo()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getBridgeObjectTypeInfo()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getRawPointerTypeInfo()",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getRawPointerTypeInfo()",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getEmptyTypeInfo()",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getResilientStructTypeInfo( IsABIAccessible_t isAccessible)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenFunction::getTypeInfoForUnlowered( Type subst)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenFunction::getTypeInfoForUnlowered( AbstractionPattern orig , Type subst)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenFunction::getTypeInfoForUnlowered( AbstractionPattern orig , CanType subst)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenFunction::getTypeInfoForLowered( CanType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenFunction::getTypeInfo( SILType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getLoweredType( AbstractionPattern orig , Type subst)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getLoweredType( Type subst)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getStoragePointerType( SILType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getStoragePointerTypeForUnlowered( Type T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getStoragePointerTypeForLowered( CanType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getStorageTypeForUnlowered( Type subst)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getStorageType( SILType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getStorageTypeForLowered( CanType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getTypeInfoForUnlowered( Type subst)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getTypeInfoForUnlowered( AbstractionPattern orig , Type subst)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getTypeInfoForUnlowered( AbstractionPattern orig , CanType subst)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getTypeInfo( SILType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getTypeInfoForLowered( CanType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getCompleteTypeInfo( CanType T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getExemplarArchetype( ArchetypeType * t)",25, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getExemplarType( CanType contextTy)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getTypeEntry( CanType canonicalTy)",62, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getOpaqueStorageTypeInfo( Size size , Alignment align)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getOpaqueStorageTypeInfo( Size size , Alignment align)",23, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"convertPrimitiveBuiltin( IRGenModule & IGM , CanType canTy)",59, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::convertType( CanType ty)",95, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::convertInOutType( InOutType * T)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"overwriteForwardDecl( llvm :: DenseMap<TypeBase*,const TypeInfo*> & cache , TypeBase * key , const TypeInfo * result)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::IsIRTypeDependent( IRGenModule & IGM)",1, 54, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visit( CanType type)",5, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitStructType( CanStructType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitBoundGenericStructType( CanBoundGenericStructType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitStructDecl( StructDecl * decl)",10, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitEnumType( CanEnumType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitBoundGenericEnumType( CanBoundGenericEnumType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitEnumDecl( EnumDecl * decl)",14, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitClassType( CanClassType type)",3, 7, 5, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitBoundGenericClassType( CanBoundGenericClassType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitClassDecl( ClassDecl * theClass)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitReferenceStorageType( CanReferenceStorageType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitAnyFunctionType( CanAnyFunctionType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IsIRTypeDependent::visitType( CanType type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"isIRTypeDependent( IRGenModule & IGM , NominalTypeDecl * decl)",11, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::LegacyTypeInfo( llvm :: Type * type , const SpareBitVector & spareBits , const YAMLTypeInfoNode & node)",10, 55, 6, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::getFixedExtraInhabitantCount( IRGenModule & IGM) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::getFixedExtraInhabitantMask( IRGenModule & IGM) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::getFixedExtraInhabitantValue( IRGenModule & IGM , unsigned bits , unsigned index) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::getSchema( ExplosionSchema & schema) const",3, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::assignWithCopy( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::assignWithTake( IRGenFunction & IGF , Address dest , Address src , SILType T , bool isOutlined) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::initializeWithCopy( IRGenFunction & IGF , Address destAddr , Address srcAddr , SILType T , bool isOutlined) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::initializeFromParams( IRGenFunction & IGF , Explosion & params , Address src , SILType T , bool isOutlined) const",5, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"LegacyTypeInfo::destroy( IRGenFunction & IGF , Address address , SILType T , bool isOutlined) const",4, 4, 2, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::convertAnyNominalType( CanType type , NominalTypeDecl * decl)",92, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::convertModuleType( ModuleType * T)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::convertMetatypeType( MetatypeType * T)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::getMetatypeTypeInfo( MetatypeRepresentation representation)",16, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::createNominalType( CanType type)",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::createNominalType( ProtocolCompositionType * type)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getSpareBitsForType( llvm :: Type * scalarTy , Size size)",33, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getBuiltinIntegerWidth( BuiltinIntegerType * t)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenModule::getBuiltinIntegerWidth( BuiltinIntegerWidth w)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"IRGenFunction::setLocalSelfMetadata( llvm :: Value * value , IRGenFunction :: LocalSelfKind kind)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeConverter::isExemplarArchetype( ArchetypeType * arch) const",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"irgen::getSingletonAggregateFieldType( IRGenModule & IGM , SILType t , ResilienceExpansion expansion)",51, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenType.cpp,"TypeInfo::verify( IRGenTypeVerifierFunction & IGF , llvm :: Value * typeMetadata , SILType T) const",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"irgen::getValueWitnessName( ValueWitness witness)",22, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"DynamicPackingPHIMapping<llvm::Value*>::collect( IRGenFunction & IGF , llvm :: Value * value)",6, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"DynamicPackingPHIMapping<llvm::Value*>::complete( IRGenFunction & IGF)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"DynamicPackingPHIMapping<llvm::Value*>::get( IRGenFunction & IGF , SILType T , const TypeInfo & type)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"DynamicPackingPHIMapping<Address>::collect( IRGenFunction & IGF , Address value)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"DynamicPackingPHIMapping<Address>::complete( IRGenFunction & IGF)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"DynamicPackingPHIMapping<Address>::get( IRGenFunction & IGF , SILType T , const TypeInfo & type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"LambdaDynamicPackingOperation::LambdaDynamicPackingOperation( FnTy && fn)",1, 66, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"LambdaDynamicPackingOperation::emitForPacking( IRGenFunction & IGF , SILType T , const TypeInfo & type , FixedPacking packing)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"LambdaDynamicPackingOperation::complete( IRGenFunction & IGF)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"LambdaDynamicPackingOperation::get( IRGenFunction & IGF , SILType T , const TypeInfo & type)",3, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"LambdaDynamicPackingOperation<void,FnTy>::LambdaDynamicPackingOperation( FnTy && fn)",1, 66, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"LambdaDynamicPackingOperation<void,FnTy>::emitForPacking( IRGenFunction & IGF , SILType T , const TypeInfo & type , FixedPacking packing)",4, 6, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"LambdaDynamicPackingOperation<void,FnTy>::complete( IRGenFunction & IGF)",1, 50, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"LambdaDynamicPackingOperation<void,FnTy>::get( IRGenFunction & IGF , SILType T , const TypeInfo & type)",1, 69, 4, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"emitDynamicPackingOperation( IRGenFunction & IGF , SILType T , const TypeInfo & type , DynamicPackingOperation & operation)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"makeLambdaDynamicPackingOperation( FnTy && fn)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"emitForDynamicPacking( IRGenFunction & IGF , ResultTy(*fn)(ParamTys...) , SILType T , const TypeInfo & type , ArgTys ... args)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"emitDefaultProjectBuffer( IRGenFunction & IGF , Address buffer , SILType T , const TypeInfo & type , FixedPacking packing)",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"emitDefaultAllocateBuffer( IRGenFunction & IGF , Address buffer , SILType T , const TypeInfo & type , FixedPacking packing)",27, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"emitDefaultInitializeBufferWithCopyOfBuffer( IRGenFunction & IGF , Address destBuffer , Address srcBuffer , SILType T , const TypeInfo & type , FixedPacking packing)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getArg( llvm :: Function :: arg_iterator & it , StringRef name)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getArgAs( IRGenFunction & IGF , llvm :: Function :: arg_iterator & it , const TypeInfo & type , StringRef name)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getArgAsBuffer( IRGenFunction & IGF , llvm :: Function :: arg_iterator & it , StringRef name)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getFormalTypeInContext( CanType abstractType , DeclContext * dc)",24, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getFormalTypeInContext( CanType abstractType)",5, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"irgen::getArgAsLocalSelfTypeMetadata( IRGenFunction & IGF , llvm :: Value * arg , CanType abstractType)",9, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getArgAsLocalSelfTypeMetadata( IRGenFunction & IGF , llvm :: Function :: arg_iterator & it , CanType abstractType)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"buildValueWitnessFunction( IRGenModule & IGM , llvm :: Function * fn , ValueWitness index , FixedPacking packing , CanType abstractType , SILType concreteType , const TypeInfo & type)",170, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getNoOpVoidFunction( IRGenModule & IGM)",8, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getAssignWithCopyStrongFunction( IRGenModule & IGM)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getAssignWithTakeStrongFunction( IRGenModule & IGM)",18, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getInitWithCopyStrongFunction( IRGenModule & IGM)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getDestroyStrongFunction( IRGenModule & IGM)",10, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getMemCpyFunction( IRGenModule & IGM , const TypeInfo & objectTI)",31, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"addValueWitness( IRGenModule & IGM , ConstantStructBuilder & B , ValueWitness index , FixedPacking packing , CanType abstractType , SILType concreteType , const TypeInfo & concreteTI)",132, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"shouldAddEnumWitnesses( CanType abstractType)",4, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getValueWitnessTableType( IRGenModule & IGM , CanType abstractType)",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"addValueWitnesses( IRGenModule & IGM , ConstantStructBuilder & B , FixedPacking packing , CanType abstractType , SILType concreteType , const TypeInfo & concreteTI)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"irgen::hasDependentValueWitnessTable( IRGenModule & IGM , CanType ty)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"addValueWitnessesForAbstractType( IRGenModule & IGM , ConstantStructBuilder & B , CanType abstractType , bool & canBeConstant)",17, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"sizeAndAlignment( Size size , Alignment alignment)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"getAddrOfKnownValueWitnessTable( IRGenModule & IGM , CanType type)",92, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"irgen::emitValueWitnessTable( IRGenModule & IGM , CanType abstractType , bool isPattern)",40, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"IRGenModule::emitFixedTypeLayout( CanType t , const FixedTypeInfo & ti)",72, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::getFixedPacking( IRGenModule & IGM) const",36, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::indexArray( IRGenFunction & IGF , Address base , llvm :: Value * index , SILType T) const",34, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::roundUpToTypeAlignment( IRGenFunction & IGF , Address base , SILType T) const",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::destroyArray( IRGenFunction & IGF , Address array , llvm :: Value * count , SILType T) const",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::initializeArrayWithCopy( IRGenFunction & IGF , Address dest , Address src , llvm :: Value * count , SILType T) const",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::initializeArrayWithTakeNoAlias( IRGenFunction & IGF , Address dest , Address src , llvm :: Value * count , SILType T) const",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::initializeArrayWithTakeFrontToBack( IRGenFunction & IGF , Address dest , Address src , llvm :: Value * count , SILType T) const",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::initializeArrayWithTakeBackToFront( IRGenFunction & IGF , Address dest , Address src , llvm :: Value * count , SILType T) const",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::assignArrayWithCopyNoAlias( IRGenFunction & IGF , Address dest , Address src , llvm :: Value * count , SILType T) const",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::assignArrayWithCopyFrontToBack( IRGenFunction & IGF , Address dest , Address src , llvm :: Value * count , SILType T) const",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::assignArrayWithCopyBackToFront( IRGenFunction & IGF , Address dest , Address src , llvm :: Value * count , SILType T) const",14, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::assignArrayWithTake( IRGenFunction & IGF , Address dest , Address src , llvm :: Value * count , SILType T) const",15, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenValueWitness.cpp,"TypeInfo::collectMetadataForOutlining( OutliningMetadataCollector & c , SILType T) const",6, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenControl.cpp,"IRBuilder::emitBlock( llvm :: BasicBlock * BB)",7, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenControl.cpp,"IRGenFunction::createBasicBlock( const llvm :: Twine & Name)",3, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"getDynamicCastFlags( CastConsumptionKind consumptionKind , CheckedCastMode mode)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"irgen::emitCheckedCast( IRGenFunction & IGF , Address src , CanType srcType , Address dest , CanType targetType , CastConsumptionKind consumptionKind , CheckedCastMode mode)",30, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"irgen::emitClassIdenticalCast( IRGenFunction & IGF , llvm :: Value * from , SILType fromType , SILType toType)",47, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"getDynamicCastArguments( IRGenFunction & IGF , llvm :: Value *(&argsBuf) [ n ] , CheckedCastMode mode)",19, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"irgen::emitClassDowncast( IRGenFunction & IGF , llvm :: Value * from , SILType toType , CheckedCastMode mode)",89, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"irgen::emitMetatypeDowncast( IRGenFunction & IGF , llvm :: Value * metatype , CanMetatypeType toMetatype , CheckedCastMode mode , Explosion & ex)",65, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"irgen::emitReferenceToObjCProtocol( IRGenFunction & IGF , ProtocolDecl * proto)",13, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"emitExistentialScalarCastFn( IRGenModule & IGM , unsigned numProtocols , CheckedCastMode mode , bool checkClassConstraint , bool checkSuperclassConstraint)",126, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"irgen::emitMetatypeToAnyObjectDowncast( IRGenFunction & IGF , llvm :: Value * metatypeValue , CanAnyMetatypeType type , CheckedCastMode mode)",71, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"irgen::emitScalarExistentialDowncast( IRGenFunction & IGF , llvm :: Value * value , SILType srcType , SILType destType , CheckedCastMode mode , Optional<MetatypeRepresentation> metatypeKind , Explosion & ex)",294, 2, 0, 0
repos/cpp/swift/lib/IRGen/GenCast.cpp,"irgen::emitScalarCheckedCast( IRGenFunction & IGF , Explosion & value , SILType sourceType , SILType targetType , CheckedCastMode mode , Explosion & out)",140, 2, 0, 0
repos/cpp/swift/lib/Basic/Edit.cpp,"swift::writeEditsInJson( ArrayRef<SingleEdit> AllEdits , llvm :: raw_ostream & OS)",27, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"OpStatEntry::OpStatEntry()",1, 38, 2, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::recordOpStatImpl( StringRef op , size_t OldPos)",7, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangle::printManglingStats()",43, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::beginManglingWithoutPrefix()",7, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::beginMangling()",4, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::finalize()",12, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::finalize( llvm :: raw_ostream & stream)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"treeContains( Demangle :: NodePointer Nd , Demangle :: Node :: Kind Kind)",10, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::verify( StringRef nameStr)",40, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::appendIdentifier( StringRef ident)",12, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::dump()",3, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::tryMangleSubstitution( const void * ptr)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/Mangler.cpp,"Mangler::mangleSubstitution( unsigned Idx)",17, 2, 0, 0
repos/cpp/swift/lib/Basic/ThreadSafeRefCounted.cpp,"swift::ThreadSafeRefCountedBaseVPTR::anchor()",1, 55, 0, 0
repos/cpp/swift/lib/Basic/UUID.cpp,"swift::UUID::UUID( FromRandom_t)",10, 2, 0, 0
repos/cpp/swift/lib/Basic/UUID.cpp,"swift::UUID::UUID( FromTime_t)",10, 2, 0, 0
repos/cpp/swift/lib/Basic/UUID.cpp,"swift::UUID::UUID()",10, 2, 0, 0
repos/cpp/swift/lib/Basic/UUID.cpp,"swift::UUID::fromString( const char * s)",20, 2, 0, 0
repos/cpp/swift/lib/Basic/UUID.cpp,"swift::UUID::toString( llvm :: SmallVectorImpl<char> & out) const",18, 2, 0, 0
repos/cpp/swift/lib/Basic/UUID.cpp,"swift::UUID::compare( UUID y) const",14, 2, 0, 0
repos/cpp/swift/lib/Basic/UUID.cpp,"swift::operator < <( llvm :: raw_ostream & os , UUID uuid)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/Unicode.cpp,"graphemeBreakOverride( llvm :: UTF32 lhs , llvm :: UTF32 rhs)",18, 2, 0, 0
repos/cpp/swift/lib/Basic/Unicode.cpp,"swift::unicode::extractFirstExtendedGraphemeCluster( StringRef S)",43, 2, 0, 0
repos/cpp/swift/lib/Basic/Unicode.cpp,"extractFirstUnicodeScalarImpl( StringRef S , unsigned & Scalar)",21, 2, 0, 0
repos/cpp/swift/lib/Basic/Unicode.cpp,"swift::unicode::isSingleUnicodeScalar( StringRef S)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/Unicode.cpp,"swift::unicode::extractFirstUnicodeScalar( StringRef S)",7, 2, 0, 0
repos/cpp/swift/lib/Basic/Unicode.cpp,"swift::unicode::getUTF16Length( StringRef Str)",18, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::loadFromPath( StringRef Path , StringRef workingDirectory)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::loadFromBuffer( StringRef Data , StringRef workingDirectory)",5, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::loadFromBuffer( std :: unique_ptr<llvm::MemoryBuffer> Buffer , StringRef workingDirectory)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::getOutputMapForInput( StringRef Input) const",7, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::getOrCreateOutputMapForInput( StringRef Input)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::getOutputMapForSingleOutput() const",3, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::getOrCreateOutputMapForSingleOutput()",3, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::dump( llvm :: raw_ostream & os , bool Sort) const",37, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"writeQuotedEscaped( llvm :: raw_ostream & os , const StringRef fileName)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::write( llvm :: raw_ostream & os , ArrayRef<StringRef> inputs) const",25, 2, 0, 0
repos/cpp/swift/lib/Basic/OutputFileMap.cpp,"OutputFileMap::parse( std :: unique_ptr<llvm::MemoryBuffer> Buffer , StringRef workingDirectory)",102, 2, 0, 0
repos/cpp/swift/lib/Basic/LangOptions.cpp,"contains( const StringRef(&Array) [ N ] , const StringRef & V , std :: vector<StringRef> & suggestions)",21, 2, 0, 0
repos/cpp/swift/lib/Basic/LangOptions.cpp,"LangOptions::checkPlatformConditionSupported( PlatformConditionKind Kind , StringRef Value , std :: vector<StringRef> & suggestions)",26, 2, 0, 0
repos/cpp/swift/lib/Basic/LangOptions.cpp,"LangOptions::getPlatformConditionValue( PlatformConditionKind Kind) const",8, 2, 0, 0
repos/cpp/swift/lib/Basic/LangOptions.cpp,"LangOptions::checkPlatformCondition( PlatformConditionKind Kind , StringRef Value) const",14, 2, 0, 0
repos/cpp/swift/lib/Basic/LangOptions.cpp,"LangOptions::isCustomConditionalCompilationFlagSet( StringRef Name) const",5, 2, 0, 0
repos/cpp/swift/lib/Basic/LangOptions.cpp,"LangOptions::setTarget( llvm :: Triple triple)",129, 2, 0, 0
repos/cpp/swift/lib/Basic/QuotedString.cpp,"swift::printAsQuotedString( llvm :: raw_ostream & out , llvm :: StringRef text)",28, 2, 0, 0
repos/cpp/swift/lib/Basic/PrimitiveParsing.cpp,"swift::measureNewline( const char * BufferPtr , const char * BufferEnd)",13, 2, 0, 0
repos/cpp/swift/lib/Basic/PrimitiveParsing.cpp,"swift::trimLeadingWhitespaceFromLines( StringRef RawText , unsigned WhitespaceToTrim , SmallVectorImpl<StringRef> & OutLines)",38, 2, 0, 0
repos/cpp/swift/lib/Basic/DiverseStack.cpp,"DiverseStackBase::pushNewStorageSlow( std :: size_t needed)",24, 4, 1, 0
repos/cpp/swift/lib/Basic/DiverseStack.cpp,"DiverseListBase::addNewStorageSlow( std :: size_t needed)",24, 4, 1, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"DefaultCacheKey::DefaultCacheKey( void * Key , CacheImpl :: CallBacks * CBs)",1, 80, 2, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"DefaultCache::DefaultCache( CacheImpl :: CallBacks CBs)",1, 76, 2, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"llvm::DenseMapInfo<DefaultCacheKey>::getEmptyKey()",3, 4, 2, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"llvm::DenseMapInfo<DefaultCacheKey>::getTombstoneKey()",3, 4, 2, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"llvm::DenseMapInfo<DefaultCacheKey>::getHashValue( const DefaultCacheKey & Val)",4, 4, 2, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"llvm::DenseMapInfo<DefaultCacheKey>::isEqual( const DefaultCacheKey & LHS , const DefaultCacheKey & RHS)",10, 4, 2, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"CacheImpl::create( StringRef Name , const CallBacks & CBs)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"CacheImpl::setAndRetain( void * Key , void * Value , size_t Cost)",20, 2, 0, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"CacheImpl::getAndRetain( const void * Key , void ** Value_out)",14, 2, 0, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"CacheImpl::releaseValue( void * Value)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"CacheImpl::remove( const void * Key)",14, 2, 0, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"CacheImpl::removeAll()",10, 2, 0, 0
repos/cpp/swift/lib/Basic/Cache.cpp,"CacheImpl::destroy()",4, 2, 0, 0
repos/cpp/swift/lib/Basic/PrefixMap.cpp,"TreePrinter::TreePrinter( llvm :: raw_ostream & out , void(&printNodeData)(llvm::raw_ostream&out,void*node))",3, 48, 5, 0
repos/cpp/swift/lib/Basic/PrefixMap.cpp,"TreePrinter::IndentScope::IndentScope( TreePrinter * printer , StringRef indent)",4, 6, 4, 0
repos/cpp/swift/lib/Basic/PrefixMap.cpp,"TreePrinter::IndentScope::~IndentScope()",1, 58, 4, 0
repos/cpp/swift/lib/Basic/PrefixMap.cpp,"TreePrinter::print( Node * node , ChildKind childKind)",42, 4, 2, 0
repos/cpp/swift/lib/Basic/PrefixMap.cpp,"swift::printOpaquePrefixMap( raw_ostream & out , void * _root , void(*printNodeData)(raw_ostream&out,void*node))",9, 2, 0, 0
repos/cpp/swift/lib/Basic/PrefixMap.cpp,"PrefixMapKeyPrinter<char>::print( raw_ostream & out , ArrayRef<char> key)",3, 3, 0, 0
repos/cpp/swift/lib/Basic/PrefixMap.cpp,"PrefixMapKeyPrinter<unsignedchar>::print( raw_ostream & out , ArrayRef<unsigned char> key)",9, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::environmentVariableRequestedMaximumDeterminism()",5, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::getChildrenMaxResidentSetSize()",18, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::makeFileName( StringRef Prefix , StringRef ProgramName , StringRef AuxName , StringRef Suffix)",17, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::makeStatsFileName( StringRef ProgramName , StringRef AuxName)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::makeTraceFileName( StringRef ProgramName , StringRef AuxName)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::makeProfileDirName( StringRef ProgramName , StringRef AuxName)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::cleanName( StringRef n)",13, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::auxName( StringRef ModuleName , StringRef InputName , StringRef TripleName , StringRef OutputType , StringRef OptType)",25, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::RecursionSafeTimers::beginTimer( StringRef Name)",7, 4, 2, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::RecursionSafeTimers::endTimer( StringRef Name)",10, 4, 2, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::StatsProfiler::Node::Node( Node * P = nullptr)",2, 7, 4, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::StatsProfiler::Node::print( std :: vector<Key> & Context , raw_ostream & OS) const",23, 6, 4, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::StatsProfiler::Node::getChild( StringRef Name , const void * Entity , const UnifiedStatsReporter :: TraceFormatter * TF)",14, 6, 4, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::StatsProfiler::StatsProfiler()",3, 5, 2, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::StatsProfiler::print( raw_ostream & OS) const",4, 4, 2, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::StatsProfiler::printToFile( StringRef Dirname , StringRef Filename) const",12, 4, 2, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::StatsProfiler::profileEvent( StringRef Name , double DeltaSeconds , bool IsEntry , const void * Entity = nullptr , const UnifiedStatsReporter :: TraceFormatter * TF = nullptr)",8, 4, 2, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::StatsProfiler::profileEvent( StringRef Name , int64_t Delta , bool IsEntry , const void * Entity = nullptr , const UnifiedStatsReporter :: TraceFormatter * TF = nullptr)",17, 4, 2, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::StatsProfilers::StatsProfilers()",3, 5, 2, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::UnifiedStatsReporter( StringRef ProgramName , StringRef ModuleName , StringRef InputName , StringRef TripleName , StringRef OutputType , StringRef OptType , StringRef Directory , SourceManager * SM , clang :: SourceManager * CSM , bool TraceEvents , bool ProfileEvents , bool ProfileEntities)",23, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::UnifiedStatsReporter( StringRef ProgramName , StringRef AuxName , StringRef Directory , SourceManager * SM , clang :: SourceManager * CSM , bool TraceEvents , bool ProfileEvents , bool ProfileEntities)",36, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::getDriverCounters()",6, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::getFrontendCounters()",6, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::noteCurrentProcessExitStatus( int status)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::publishAlwaysOnStatsToLLVM()",22, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::printAlwaysOnStatsAndTimers( raw_ostream & OS)",30, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::FrontendStatsTracer::FrontendStatsTracer( UnifiedStatsReporter * Reporter , StringRef EventName , const void * Entity , const UnifiedStatsReporter :: TraceFormatter * Formatter)",10, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::FrontendStatsTracer::operator =( FrontendStatsTracer && other)",10, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::FrontendStatsTracer::FrontendStatsTracer( FrontendStatsTracer && other)",9, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::FrontendStatsTracer::~FrontendStatsTracer()",5, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::updateProcessWideFrontendCounters( UnifiedStatsReporter :: AlwaysOnFrontendCounters & C)",24, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::saveEvent( StringRef StatName , int64_t Curr , int64_t Last , uint64_t NowUS , uint64_t LiveUS , std :: vector<UnifiedStatsReporter::FrontendStatsEvent> & Events , FrontendStatsTracer const & T , bool IsEntry)",13, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::saveAnyFrontendStatsEvents( FrontendStatsTracer const & T , bool IsEntry)",80, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::TraceFormatter::~TraceFormatter()",1, 59, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::~UnifiedStatsReporter()",73, 2, 0, 0
repos/cpp/swift/lib/Basic/Statistic.cpp,"swift::UnifiedStatsReporter::flushTracesAndProfiles()",67, 2, 0, 0
repos/cpp/swift/lib/Basic/ExponentialGrowthAppendingBinaryByteStream.cpp,"ExponentialGrowthAppendingBinaryByteStream::readBytes( uint32_t Offset , uint32_t Size , ArrayRef<uint8_t> & Buffer)",9, 2, 0, 0
repos/cpp/swift/lib/Basic/ExponentialGrowthAppendingBinaryByteStream.cpp,"ExponentialGrowthAppendingBinaryByteStream::readLongestContiguousChunk( uint32_t Offset , ArrayRef<uint8_t> & Buffer)",9, 2, 0, 0
repos/cpp/swift/lib/Basic/ExponentialGrowthAppendingBinaryByteStream.cpp,"ExponentialGrowthAppendingBinaryByteStream::reserve( size_t Size)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/ExponentialGrowthAppendingBinaryByteStream.cpp,"ExponentialGrowthAppendingBinaryByteStream::writeBytes( uint32_t Offset , ArrayRef<uint8_t> Buffer)",19, 2, 0, 0
repos/cpp/swift/lib/Basic/FileSystem.cpp,"OpenFileRAII::~OpenFileRAII()",4, 6, 4, 0
repos/cpp/swift/lib/Basic/FileSystem.cpp,"canUseTemporaryForWrite( const StringRef outputPath)",25, 2, 0, 0
repos/cpp/swift/lib/Basic/FileSystem.cpp,"tryToOpenTemporaryFile( Optional<llvm::raw_fd_ostream> & openedStream , const StringRef outputPath)",30, 2, 0, 0
repos/cpp/swift/lib/Basic/FileSystem.cpp,"swift::atomicallyWritingToFile( const StringRef outputPath , const llvm :: function_ref<void(llvm::raw_pwrite_stream&)> action)",47, 2, 0, 0
repos/cpp/swift/lib/Basic/FileSystem.cpp,"swift::moveFileIfDifferent( const llvm :: Twine & source , const llvm :: Twine & destination)",59, 2, 0, 0
repos/cpp/swift/lib/Basic/FileSystem.cpp,"swift::vfs::getFileOrSTDIN( clang :: vfs :: FileSystem & FS , const llvm :: Twine & Filename , int64_t FileSize , bool RequiresNullTerminator , bool IsVolatile)",13, 2, 0, 0
repos/cpp/swift/lib/Basic/ClusteredBitVector.cpp,"ClusteredBitVector::fromAPInt( const llvm :: APInt & bits)",12, 2, 0, 0
repos/cpp/swift/lib/Basic/ClusteredBitVector.cpp,"ClusteredBitVector::asAPInt() const",14, 2, 0, 0
repos/cpp/swift/lib/Basic/ClusteredBitVector.cpp,"ClusteredBitVector::reallocate( size_t newCapacityInChunks)",31, 2, 0, 0
repos/cpp/swift/lib/Basic/ClusteredBitVector.cpp,"ClusteredBitVector::appendReserved( size_t numBits , llvm :: function_ref<ChunkType(size_t numBitsWanted)> generator)",40, 2, 0, 0
repos/cpp/swift/lib/Basic/ClusteredBitVector.cpp,"ClusteredBitVector::appendConstantBitsReserved( size_t numBits , bool addOnes)",10, 2, 0, 0
repos/cpp/swift/lib/Basic/ClusteredBitVector.cpp,"ClusteredBitVector::appendReserved( size_t numBits , const ChunkType * nextChunk)",43, 2, 0, 0
repos/cpp/swift/lib/Basic/ClusteredBitVector.cpp,"ClusteredBitVector::equalsSlowCase( const ClusteredBitVector & lhs , const ClusteredBitVector & rhs)",25, 2, 0, 0
repos/cpp/swift/lib/Basic/ClusteredBitVector.cpp,"ClusteredBitVector::dump() const",3, 2, 0, 0
repos/cpp/swift/lib/Basic/ClusteredBitVector.cpp,"ClusteredBitVector::print( llvm :: raw_ostream & out) const",13, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"swift::canBeArgumentLabel( StringRef identifier)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"swift::canBeMemberName( StringRef identifier)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"swift::getPrepositionKind( StringRef word)",11, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"swift::getPartOfSpeech( StringRef word)",55, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"isPluralSuffix( StringRef word)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"WordIterator::computeNextPosition() const",49, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"WordIterator::computePrevPosition() const",45, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::getFirstWord( StringRef string)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::getLastWord( StringRef string)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::sameWordIgnoreFirstCase( StringRef word1 , StringRef word2)",9, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::startsWithIgnoreFirstCase( StringRef word1 , StringRef word2)",9, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::toLowercaseWord( StringRef string , SmallVectorImpl<char> & scratch)",19, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::toSentencecase( StringRef string , SmallVectorImpl<char> & scratch)",15, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::dropPrefix( StringRef string)",20, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::appendSentenceCase( SmallVectorImpl<char> & buffer , StringRef string)",11, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::findWord( StringRef string , StringRef word)",27, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"skipTypeSuffix( StringRef typeName)",39, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"matchNameWordToTypeWord( StringRef nameWord , StringRef typeWord)",36, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"swift::matchLeadingTypeName( StringRef name , OmissionTypeName typeName)",41, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"StringScratchSpace::copyString( StringRef string)",5, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"InheritedNameSet::add( StringRef name)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"InheritedNameSet::contains( StringRef name) const",9, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::toLowercaseWord( StringRef string , StringScratchSpace & scratch)",9, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"omitNeedlessWordsFromPrefix( StringRef name , OmissionTypeName type , StringScratchSpace & scratch)",32, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"isVacuousName( StringRef name)",7, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"textMatchesPropertyName( StringRef text , const InheritedNameSet * allPropertyNames)",32, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"omitNeedlessWords( StringRef name , OmissionTypeName typeName , NameRole role , const InheritedNameSet * allPropertyNames , StringScratchSpace & scratch)",257, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::toLowercaseInitialisms( StringRef string , StringScratchSpace & scratch)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"camel_case::toLowercaseInitialisms( StringRef string , SmallVectorImpl<char> & scratch)",35, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"wordConflictsBeforePreposition( StringRef word , StringRef preposition)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"wordConflictsAfterPreposition( StringRef word , StringRef preposition)",25, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"shouldPlacePrepositionOnArgLabel( StringRef beforePreposition , StringRef preposition , StringRef afterPreposition)",11, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"priorWordExtendsPreposition( StringRef preceding , StringRef preposition)",29, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"isVacuousPreposition( StringRef beforePreposition , StringRef preposition , StringRef afterPreposition , const OmissionTypeName & paramType)",24, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"findLastPreposition( ReverseWordIterator first , ReverseWordIterator last , bool recursive = false)",23, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"splitBaseNameAfterLastPreposition( StringRef & baseName , StringRef & argName , const OmissionTypeName & paramType)",96, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"splitBaseName( StringRef & baseName , StringRef & argName , const OmissionTypeName & paramType , StringRef paramName)",30, 2, 0, 0
repos/cpp/swift/lib/Basic/StringExtras.cpp,"swift::omitNeedlessWords( StringRef & baseName , MutableArrayRef<StringRef> argNames , StringRef firstParamName , OmissionTypeName resultType , OmissionTypeName contextType , ArrayRef<OmissionTypeName> paramTypes , bool returnsSelf , bool isProperty , const InheritedNameSet * allPropertyNames , StringScratchSpace & scratch)",124, 2, 0, 0
repos/cpp/swift/lib/Basic/TaskQueue.cpp,"swift::sys::TaskProcessInformation::ResourceUsage::provideMapping( json :: Output & out)",5, 2, 0, 0
repos/cpp/swift/lib/Basic/TaskQueue.cpp,"swift::sys::TaskProcessInformation::provideMapping( json :: Output & out)",5, 2, 0, 0
repos/cpp/swift/lib/Basic/TaskQueue.cpp,"TaskQueue::TaskQueue( unsigned NumberOfParallelTasks , UnifiedStatsReporter * USR)",4, 17, 2, 0
repos/cpp/swift/lib/Basic/TaskQueue.cpp,"DummyTaskQueue::DummyTaskQueue( unsigned NumberOfParallelTasks)",2, 40, 0, 0
repos/cpp/swift/lib/Basic/TaskQueue.cpp,"DummyTaskQueue::addTask( const char * ExecPath , ArrayRef<const char*> Args , ArrayRef<const char*> Env , void * Context , bool SeparateErrors)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/TaskQueue.cpp,"DummyTaskQueue::execute( TaskQueue :: TaskBeganCallback Began , TaskQueue :: TaskFinishedCallback Finished , TaskQueue :: TaskSignalledCallback Signalled)",43, 2, 0, 0
repos/cpp/swift/lib/Basic/Platform.cpp,"swift::tripleIsiOSSimulator( const llvm :: Triple & triple)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/Platform.cpp,"swift::tripleIsAppleTVSimulator( const llvm :: Triple & triple)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/Platform.cpp,"swift::tripleIsWatchSimulator( const llvm :: Triple & triple)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/Platform.cpp,"swift::tripleIsAnySimulator( const llvm :: Triple & triple)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/Platform.cpp,"swift::getDarwinPlatformKind( const llvm :: Triple & triple)",24, 2, 0, 0
repos/cpp/swift/lib/Basic/Platform.cpp,"swift::getNonSimulatorPlatform( DarwinPlatformKind platform)",16, 2, 0, 0
repos/cpp/swift/lib/Basic/Platform.cpp,"getPlatformNameForDarwin( const DarwinPlatformKind platform)",19, 2, 0, 0
repos/cpp/swift/lib/Basic/Platform.cpp,"swift::getPlatformNameForTriple( const llvm :: Triple & triple)",55, 2, 0, 0
repos/cpp/swift/lib/Basic/Platform.cpp,"swift::getMajorArchitectureName( const llvm :: Triple & Triple)",17, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::verifyAllBuffers() const",15, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::getCodeCompletionLoc() const",4, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::getDisplayNameForLoc( SourceLoc Loc) const",20, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::addNewSourceBuffer( std :: unique_ptr<llvm::MemoryBuffer> Buffer)",7, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::addMemBufferCopy( llvm :: MemoryBuffer * Buffer)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::addMemBufferCopy( StringRef InputData , StringRef BufIdentifier)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::openVirtualFile( SourceLoc loc , StringRef name , int lineOffset)",26, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::closeVirtualFile( SourceLoc end)",24, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::getVirtualFile( SourceLoc Loc) const",15, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::getIDForBufferIdentifier( StringRef BufIdentifier)",7, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::getIdentifierForBuffer( unsigned bufferID) const",5, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::getRangeForBuffer( unsigned bufferID) const",5, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::getLocOffsetInBuffer( SourceLoc Loc , unsigned BufferID) const",9, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::getByteDistance( SourceLoc Start , SourceLoc End) const",14, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::getEntireTextForBuffer( unsigned BufferID) const",3, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::extractText( CharSourceRange Range , Optional<unsigned> BufferID) const",10, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::findBufferContainingLoc( SourceLoc Loc) const",15, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceRange::widen( SourceRange Other)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceLoc::printLineAndColumn( raw_ostream & OS , const SourceManager & SM , unsigned BufferID) const",10, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceLoc::print( raw_ostream & OS , const SourceManager & SM , unsigned & LastBufferID) const",18, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceLoc::dump( const SourceManager & SM) const",3, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceRange::print( raw_ostream & OS , const SourceManager & SM , unsigned & LastBufferID , bool PrintText) const",9, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceRange::dump( const SourceManager & SM) const",3, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"CharSourceRange::CharSourceRange( const SourceManager & SM , SourceLoc Start , SourceLoc End)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"CharSourceRange::print( raw_ostream & OS , const SourceManager & SM , unsigned & LastBufferID , bool PrintText) const",15, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"CharSourceRange::dump( const SourceManager & SM) const",3, 2, 0, 0
repos/cpp/swift/lib/Basic/SourceLoc.cpp,"SourceManager::resolveFromLineCol( unsigned BufferId , unsigned Line , unsigned Col) const",32, 2, 0, 0
repos/cpp/swift/lib/Basic/Program.cpp,"swift::ExecuteInPlace( const char * Program , const char ** args , const char ** env)",22, 2, 0, 0
repos/cpp/swift/lib/Basic/AnyValue.cpp,"AnyValue::HolderBase::~HolderBase()",1, 40, 0, 0
repos/cpp/swift/lib/Basic/AnyValue.cpp,"AnyValue::getAsString() const",8, 2, 0, 0
repos/cpp/swift/lib/Basic/LLVMContext.cpp,"swift::getGlobalLLVMContext()",3, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::beginArray()",5, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::preflightElement( unsigned , void * &)",11, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::postflightElement( void *)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::endArray()",9, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::canElideEmptyArray()",8, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::beginObject()",4, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::endObject()",9, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::preflightKey( StringRef Key , bool Required , bool SameAsDefault , bool & UseDefault , void * &)",19, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::postflightKey( void *)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::beginEnumScalar()",3, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::matchEnumScalar( const char * Str , bool Match)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::endEnumScalar()",4, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::beginBitSetScalar( bool & DoClear)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::bitSetMatch( const char * Str , bool Matches)",12, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::endBitSetScalar()",5, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::scalarString( StringRef & S , bool MustQuote)",69, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::null()",3, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"Output::indent()",3, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarReferenceTraits<bool>::stringRef( const bool & Val)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarReferenceTraits<StringRef>::stringRef( const StringRef & Val)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarReferenceTraits<std::string>::stringRef( const std :: string & Val)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<uint8_t>::output( const uint8_t & Val , raw_ostream & Out)",6, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<uint16_t>::output( const uint16_t & Val , raw_ostream & Out)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<uint32_t>::output( const uint32_t & Val , raw_ostream & Out)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<unsignedlong>::output( const unsigned long & Val , raw_ostream & Out)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<uint64_t>::output( const uint64_t & Val , raw_ostream & Out)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<int8_t>::output( const int8_t & Val , raw_ostream & Out)",5, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<int16_t>::output( const int16_t & Val , raw_ostream & Out)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<int32_t>::output( const int32_t & Val , raw_ostream & Out)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<int64_t>::output( const int64_t & Val , raw_ostream & Out)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<double>::output( const double & Val , raw_ostream & Out)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/JSONSerialization.cpp,"ScalarTraits<float>::output( const float & Val , raw_ostream & Out)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/PrettyStackTrace.cpp,"PrettyStackTraceStringAction::print( llvm :: raw_ostream & out) const",3, 2, 0, 0
repos/cpp/swift/lib/Basic/PrettyStackTrace.cpp,"PrettyStackTraceFileContents::print( llvm :: raw_ostream & out) const",7, 2, 0, 0
repos/cpp/swift/lib/Basic/FileTypes.cpp,"getInfo( unsigned Id)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/FileTypes.cpp,"file_types::getTypeName( ID Id)",1, 70, 0, 0
repos/cpp/swift/lib/Basic/FileTypes.cpp,"file_types::getExtension( ID Id)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/FileTypes.cpp,"file_types::lookupTypeForExtension( StringRef Ext)",10, 2, 0, 0
repos/cpp/swift/lib/Basic/FileTypes.cpp,"file_types::lookupTypeForName( StringRef Name)",7, 2, 0, 0
repos/cpp/swift/lib/Basic/FileTypes.cpp,"file_types::isTextual( ID Id)",40, 2, 0, 0
repos/cpp/swift/lib/Basic/FileTypes.cpp,"file_types::isAfterLLVM( ID Id)",40, 2, 0, 0
repos/cpp/swift/lib/Basic/FileTypes.cpp,"file_types::isPartOfSwiftCompilation( ID Id)",40, 2, 0, 0
repos/cpp/swift/lib/Basic/EditorPlaceholder.cpp,"swift::parseEditorPlaceholder( StringRef PlaceholderText)",40, 2, 0, 0
repos/cpp/swift/lib/Basic/EditorPlaceholder.cpp,"swift::isEditorPlaceholder( StringRef IdentifierText)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::printFullRevisionString( raw_ostream & out)",22, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::splitVersionComponents( SmallVectorImpl<std::pair<StringRef,SourceRange>> & SplitComponents , StringRef & VersionString , SourceLoc Loc , bool skipQuote = false)",23, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::parseCompilerVersionString( StringRef VersionString , SourceLoc Loc , DiagnosticEngine * Diags)",70, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::parseVersionString( StringRef VersionString , SourceLoc Loc , DiagnosticEngine * Diags)",48, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::Version( StringRef VersionString , SourceLoc Loc , DiagnosticEngine * Diags)",5, 3, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::getCurrentCompilerVersion()",13, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::getCurrentLanguageVersion()",7, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::operator < <( raw_ostream & os , const Version & version)",8, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::preprocessorDefinition( StringRef macroName , ArrayRef<uint64_t> componentWeights) const",14, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::operator llvm :: VersionTuple() const",24, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::getEffectiveLanguageVersion() const",41, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::asMajorVersion() const",7, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::Version::asAPINotesVersionString() const",9, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::operator >=( const class Version & lhs , const class Version & rhs)",21, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::operator <( const class Version & lhs , const class Version & rhs)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::operator ==( const class Version & lhs , const class Version & rhs)",11, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::getSwiftNumericVersion()",3, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::getSwiftFullVersion( Version effectiveVersion)",35, 2, 0, 0
repos/cpp/swift/lib/Basic/Version.cpp,"swift::version::getSwiftRevision()",7, 2, 0, 0
repos/cpp/swift/lib/Basic/UnicodeExtendedGraphemeClusters.cpp.gyb,"swift::unicode::getGraphemeClusterBreakProperty( uint32_t C)",14, 2, 0, 0
repos/cpp/swift/lib/Basic/Darwin/Cache-Mac.cpp,"CacheImpl::create( StringRef Name , const CallBacks & CBs)",20, 2, 0, 0
repos/cpp/swift/lib/Basic/Darwin/Cache-Mac.cpp,"CacheImpl::setAndRetain( void * Key , void * Value , size_t Cost)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/Darwin/Cache-Mac.cpp,"CacheImpl::getAndRetain( const void * Key , void ** Value_out)",5, 2, 0, 0
repos/cpp/swift/lib/Basic/Darwin/Cache-Mac.cpp,"CacheImpl::releaseValue( void * Value)",3, 2, 0, 0
repos/cpp/swift/lib/Basic/Darwin/Cache-Mac.cpp,"CacheImpl::remove( const void * Key)",4, 2, 0, 0
repos/cpp/swift/lib/Basic/Darwin/Cache-Mac.cpp,"CacheImpl::removeAll()",3, 2, 0, 0
repos/cpp/swift/lib/Basic/Darwin/Cache-Mac.cpp,"CacheImpl::destroy()",3, 2, 0, 0
repos/cpp/swift/lib/SwiftDemangle/SwiftDemangle.cpp,"swift_demangle_getDemangledName_Options( const char * MangledName , char * OutputBuffer , size_t Length , swift :: Demangle :: DemangleOptions DemangleOptions)",22, 2, 0, 0
repos/cpp/swift/lib/SwiftDemangle/SwiftDemangle.cpp,"swift_demangle_getDemangledName( const char * MangledName , char * OutputBuffer , size_t Length)",8, 2, 0, 0
repos/cpp/swift/lib/SwiftDemangle/SwiftDemangle.cpp,"swift_demangle_getSimplifiedDemangledName( const char * MangledName , char * OutputBuffer , size_t Length)",7, 2, 0, 0
repos/cpp/swift/lib/SwiftDemangle/SwiftDemangle.cpp,"swift_demangle_hasSwiftCallingConvention( const char * MangledName)",6, 2, 0, 0
repos/cpp/swift/lib/SwiftDemangle/SwiftDemangle.cpp,"fnd_get_demangled_name( const char * MangledName , char * OutputBuffer , size_t Length)",4, 2, 0, 0
repos/cpp/swift/lib/SwiftDemangle/MangleHack.cpp,"vasprintf( char ** strp , const char * fmt , va_list ap)",15, 2, 0, 0
repos/cpp/swift/lib/SwiftDemangle/MangleHack.cpp,"asprintf( char ** strp , const char * fmt , ...)",7, 2, 0, 0
repos/cpp/swift/lib/SwiftDemangle/MangleHack.cpp,"_swift_mangleSimpleClass( const char * module , const char * class_)",17, 2, 0, 0
repos/cpp/swift/lib/SwiftDemangle/MangleHack.cpp,"_swift_mangleSimpleProtocol( const char * module , const char * protocol)",17, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/TBD.cpp,"sortSymbols( llvm :: StringSet<> & symbols)",7, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/TBD.cpp,"swift::writeTBD( ModuleDecl * M , StringRef OutputFilename , const TBDGenOptions & Opts)",14, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/TBD.cpp,"swift::inputFileKindCanHaveTBDValidated( InputFileKind kind)",18, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/TBD.cpp,"validateSymbolSet( DiagnosticEngine & diags , llvm :: StringSet<> symbols , llvm :: Module & IRModule , bool diagnoseExtraSymbolsInTBD)",51, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/TBD.cpp,"swift::validateTBD( ModuleDecl * M , llvm :: Module & IRModule , const TBDGenOptions & opts , bool diagnoseExtraSymbolsInTBD)",9, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/TBD.cpp,"swift::validateTBD( FileUnit * file , llvm :: Module & IRModule , const TBDGenOptions & opts , bool diagnoseExtraSymbolsInTBD)",10, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ReferenceDependenciesEmitter::ReferenceDependenciesEmitter( SourceFile * const SF , const DependencyTracker & depTracker , llvm :: raw_ostream & out)",4, 52, 8, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::ProvidesEmitter( const SourceFile * const SF , llvm :: raw_ostream & out)",2, 28, 2, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"DependsEmitter::DependsEmitter( const SourceFile * SF , const DependencyTracker & depTracker , llvm :: raw_ostream & out)",3, 52, 6, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"mangleTypeAsContext( const NominalTypeDecl * type)",4, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"swift::reversePathSortedFilenames( const ArrayRef<std::string> elts)",9, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"escape( DeclBaseName name)",3, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ReferenceDependenciesEmitter::emit( DiagnosticEngine & diags , SourceFile * const SF , const DependencyTracker & depTracker , StringRef outputPath)",13, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ReferenceDependenciesEmitter::emit( SourceFile * SF , const DependencyTracker & depTracker , llvm :: raw_ostream & out)",5, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ReferenceDependenciesEmitter::emit() const",7, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"swift::emitReferenceDependencies( DiagnosticEngine & diags , SourceFile * SF , const DependencyTracker & depTracker , StringRef outputPath)",5, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emit() const",6, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emit( const SourceFile * SF , llvm :: raw_ostream & out)",3, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ReferenceDependenciesEmitter::emitProvides() const",3, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ReferenceDependenciesEmitter::emitDepends() const",3, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ReferenceDependenciesEmitter::emitInterfaceHash() const",6, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emitTopLevelNames() const",10, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emitTopLevelDecl( const Decl * const D , CollectedDeclarations & cpd) const",58, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emitExtensionDecl( const ExtensionDecl * const ED , CollectedDeclarations & cpd) const",24, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emitNominalTypeDecl( const NominalTypeDecl * const NTD , CollectedDeclarations & cpd) const",11, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::CollectedDeclarations::findNominalsAndOperators( const DeclRange members)",23, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emitValueDecl( const ValueDecl * const VD) const",8, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emitNominalTypes( const llvm :: MapVector<const NominalTypeDecl*,bool> & extendedNominals) const",12, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emitMembers( const CollectedDeclarations & cpd) const",23, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::emitDynamicLookupMembers() const",32, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::extendedTypeIsPrivate( TypeLoc inheritedType)",20, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"ProvidesEmitter::declIsPrivate( const Decl * member)",25, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"DependsEmitter::emit( const SourceFile * SF , const DependencyTracker & depTracker , llvm :: raw_ostream & out)",5, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"DependsEmitter::emit() const",35, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"DependsEmitter::emitTopLevelNames( const ReferencedNameTracker * const tracker) const",11, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"DependsEmitter::emitMembers( ArrayRef<MemberTableEntryTy> sortedMembers) const",19, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"DependsEmitter::emitNominalTypes( ArrayRef<MemberTableEntryTy> sortedMembers) const",21, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"DependsEmitter::emitDynamicLookup( const ReferencedNameTracker * const tracker) const",11, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"DependsEmitter::emitExternal( const DependencyTracker & depTracker) const",6, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ReferenceDependencies.cpp,"DependsEmitter::sortedByName( const llvm :: DenseMap<DeclBaseName,bool> map)",9, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ImportedModules.cpp,"getTopLevelName( const clang :: Module * module)",3, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ImportedModules.cpp,"findAllClangImports( const clang :: Module * module , llvm :: SetVector<StringRef> & modules)",11, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/ImportedModules.cpp,"swift::emitImportedModules( ASTContext & Context , ModuleDecl * mainModule , const FrontendOptions & opts)",70, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"displayName( StringRef MainExecutablePath)",5, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"emitMakeDependenciesIfNeeded( DiagnosticEngine & diags , DependencyTracker * depTracker , const FrontendOptions & opts , const InputFile & input)",56, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"emitMakeDependenciesIfNeeded( DiagnosticEngine & diags , DependencyTracker * depTracker , const FrontendOptions & opts)",8, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"swift::json::ObjectTraits<LoadedModuleTraceFormat>::mapping( Output & out , LoadedModuleTraceFormat & contents)",5, 4, 2, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"emitLoadedModuleTraceIfNeeded( ASTContext & ctxt , DependencyTracker * depTracker , StringRef loadedModuleTracePath , StringRef moduleName)",65, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"emitLoadedModuleTraceForAllPrimariesIfNeeded( ASTContext & ctxt , DependencyTracker * depTracker , const FrontendOptions & opts)",9, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"getFileOutputStream( StringRef OutputFilename , ASTContext & Ctx)",11, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"emitSyntax( SourceFile * SF , LangOptions & LangOpts , SourceManager & SM , StringRef OutputFilename)",16, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"writeSIL( SILModule & SM , ModuleDecl * M , bool EmitVerboseSIL , StringRef OutputFilename , bool SortSIL)",7, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"writeSIL( SILModule & SM , const PrimarySpecificPaths & PSPs , CompilerInstance & Instance , CompilerInvocation & Invocation)",7, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"printAsObjCIfNeeded( StringRef outputPath , ModuleDecl * M , StringRef bridgingHeader , bool moduleIsPublic)",11, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"printParseableInterfaceIfNeeded( StringRef outputPath , ParseableInterfaceOptions const & Opts , ModuleDecl * M)",10, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"getOutputKind( FrontendOptions :: ActionType Action)",17, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"JSONFixitWriter::JSONFixitWriter( std :: string fixitsOutputPath , const DiagnosticOptions & DiagOpts)",4, 55, 6, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"JSONFixitWriter::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",11, 4, 2, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"JSONFixitWriter::finishProcessing()",20, 4, 2, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"debugFailWithAssertion()",9, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"debugFailWithCrash()",3, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"countStatsOfSourceFile( UnifiedStatsReporter & Stats , CompilerInstance & Instance , SourceFile * SF)",20, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"countStatsPostSema( UnifiedStatsReporter & Stats , CompilerInstance & Instance)",35, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"countStatsPostSILGen( UnifiedStatsReporter & Stats , const SILModule & Module)",10, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"createOptRecordFile( StringRef Filename , DiagnosticEngine & DE)",13, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"precompileBridgingHeader( CompilerInvocation & Invocation , CompilerInstance & Instance)",21, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"buildModuleFromParseableInterface( CompilerInvocation & Invocation , CompilerInstance & Instance)",10, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"compileLLVMIR( CompilerInvocation & Invocation , CompilerInstance & Instance , UnifiedStatsReporter * Stats)",46, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"verifyGenericSignaturesIfNeeded( CompilerInvocation & Invocation , ASTContext & Context)",9, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"dumpOneScopeMapLocation( unsigned bufferID , std :: pair<unsigned,unsigned> lineColumn , SourceManager & sourceMgr , ASTScope & scope)",28, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"dumpAndPrintScopeMap( CompilerInvocation & Invocation , CompilerInstance & Instance , SourceFile * SF)",18, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"getPrimaryOrMainSourceFile( CompilerInvocation & Invocation , CompilerInstance & Instance)",9, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"dumpAST( CompilerInvocation & Invocation , CompilerInstance & Instance)",20, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"dumpASTIfNeeded( CompilerInvocation & Invocation , CompilerInstance & Instance)",47, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"emitReferenceDependenciesForAllPrimaryInputsIfNeeded( CompilerInvocation & Invocation , CompilerInstance & Instance)",19, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"writeTBDIfNeeded( CompilerInvocation & Invocation , CompilerInstance & Instance)",17, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"generateSILModules( CompilerInvocation & Invocation , CompilerInstance & Instance)",56, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"emitIndexData( CompilerInvocation & Invocation , CompilerInstance & Instance)",9, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"emitAnyWholeModulePostTypeCheckSupplementaryOutputs( CompilerInstance & Instance , CompilerInvocation & Invocation , bool moduleIsPublic)",28, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"performCompile( CompilerInstance & Instance , CompilerInvocation & Invocation , ArrayRef<const char*> Args , int & ReturnValue , FrontendObserver * observer , UnifiedStatsReporter * Stats)",125, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"setPrivateDiscriminatorIfNeeded( IRGenOptions & IRGenOpts , ModuleOrSourceFile MSF)",12, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"serializeSIB( SILModule * SM , const PrimarySpecificPaths & PSPs , ASTContext & Context , ModuleOrSourceFile MSF)",14, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"generateIR( IRGenOptions & IRGenOpts , std :: unique_ptr<SILModule> SM , const PrimarySpecificPaths & PSPs , StringRef OutputFilename , ModuleOrSourceFile MSF , std :: unique_ptr<llvm::Module> & IRModule , llvm :: GlobalVariable * & HashGlobal , ArrayRef<std::string> parallelOutputFilenames)",18, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"processCommandLineAndRunImmediately( CompilerInvocation & Invocation , CompilerInstance & Instance , std :: unique_ptr<SILModule> SM , ModuleOrSourceFile MSF , FrontendObserver * observer , int & ReturnValue)",20, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"validateTBDIfNeeded( CompilerInvocation & Invocation , ModuleOrSourceFile MSF , bool astGuaranteedToCorrespondToSIL , llvm :: Module & IRModule)",37, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"generateCode( CompilerInvocation & Invocation , CompilerInstance & Instance , StringRef OutputFilename , llvm :: Module * IRModule , llvm :: GlobalVariable * HashGlobal , UnifiedStatsReporter * Stats)",29, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"performCompileStepsPostSILGen( CompilerInstance & Instance , CompilerInvocation & Invocation , std :: unique_ptr<SILModule> SM , bool astGuaranteedToCorrespondToSIL , ModuleOrSourceFile MSF , const PrimarySpecificPaths & PSPs , bool moduleIsPublic , int & ReturnValue , FrontendObserver * observer , UnifiedStatsReporter * Stats)",153, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"emitIndexDataIfNeeded( SourceFile * PrimarySourceFile , const CompilerInvocation & Invocation , CompilerInstance & Instance)",50, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"dumpAPI( ModuleDecl * Mod , StringRef OutDir)",60, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"silOptModeArgStr( OptimizationMode mode)",10, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"computeStatsReporter( const CompilerInvocation & Invocation , CompilerInstance * Instance)",31, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"createDispatchingDiagnosticConsumerIfNeeded( const FrontendInputsAndOutputs & inputsAndOutputs , llvm :: function_ref<std::unique_ptr<DiagnosticConsumer>(const InputFile&)> maybeCreateConsumerForDiagnosticsFrom)",37, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"createSerializedDiagnosticConsumerIfNeeded( const FrontendInputsAndOutputs & inputsAndOutputs)",11, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"createJSONFixItDiagnosticConsumerIfNeeded( const CompilerInvocation & invocation)",12, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"swift::performFrontend( ArrayRef<const char*> Args , const char * Argv0 , void * MainAddr , FrontendObserver * observer)",218, 2, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"FrontendObserver::parsedArgs( CompilerInvocation & invocation)",1, 69, 0, 0
repos/cpp/swift/lib/FrontendTool/FrontendTool.cpp,"FrontendObserver::configuredCompiler( CompilerInstance & instance)",1, 73, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::create( ASTContext & ctx , const ClangImporterOptions & importerOpts , DependencyTracker * tracker)",8, 2, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::DWARFModuleUnit( ModuleDecl & M)",2, 52, 6, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::isSystemModule() const",1, 65, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::lookupValue( ModuleDecl :: AccessPathTy accessPath , DeclName name , NLKind lookupKind , SmallVectorImpl<ValueDecl*> & results) const",3, 71, 14, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::lookupNestedType( Identifier name , const NominalTypeDecl * baseType) const",4, 4, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::lookupVisibleDecls( ModuleDecl :: AccessPathTy accessPath , VisibleDeclConsumer & consumer , NLKind lookupKind) const",3, 71, 34, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::lookupClassMembers( ModuleDecl :: AccessPathTy accessPath , VisibleDeclConsumer & consumer) const",2, 70, 21, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::lookupClassMember( ModuleDecl :: AccessPathTy accessPath , DeclName name , SmallVectorImpl<ValueDecl*> & decls) const",2, 75, 20, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::lookupObjCMethods( ObjCSelector selector , SmallVectorImpl<AbstractFunctionDecl*> & results) const",3, 74, 6, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::getTopLevelDecls( SmallVectorImpl<Decl*> & results) const",1, 71, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::getDisplayDecls( SmallVectorImpl<Decl*> & results) const",1, 70, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::getImportedModules( SmallVectorImpl<ModuleDecl::ImportedModule> & imports , ModuleDecl :: ImportFilter filter) const",2, 72, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::getImportedModulesForLookup( SmallVectorImpl<ModuleDecl::ImportedModule> & imports) const",2, 79, 6, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::collectLinkLibraries( ModuleDecl :: LinkLibraryCallback callback) const",2, 67, 6, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::getDiscriminatorForPrivateValue( const ValueDecl * D) const",3, 4, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::getFilename() const",1, 64, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::getUnderlyingClangModule() const",3, 4, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::classof( const FileUnit * file)",3, 4, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFModuleUnit::classof( const DeclContext * DC)",3, 4, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::Implementation::Implementation( ASTContext & ctx , const ClangImporterOptions & clangImporterOpts)",2, 29, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::Implementation::loadModule( SourceLoc importLoc , ArrayRef<std::pair<Identifier,SourceLoc>> path)",22, 4, 2, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::DWARFImporter( ASTContext & ctx , const ClangImporterOptions & clangImporterOpts , DependencyTracker * tracker)",5, 59, 6, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::~DWARFImporter()",1, 50, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::canImportModule( std :: pair<Identifier,SourceLoc> named)",3, 2, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::addSearchPath( StringRef newSearchPath , bool isFramework , bool isSystem)",4, 2, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::loadModule( SourceLoc importLoc , ArrayRef<std::pair<Identifier,SourceLoc>> path)",4, 2, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::isInOverlayModuleForImportedModule( const DeclContext * overlayDC , const DeclContext * importedDC)",4, 2, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::loadExtensions( NominalTypeDecl * nominal , unsigned previousGeneration)",2, 67, 35, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::loadObjCMethods( ClassDecl * classDecl , ObjCSelector selector , bool isInstanceMethod , unsigned previousGeneration , llvm :: TinyPtrVector<AbstractFunctionDecl*> & methods)",4, 61, 4, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::getImportedHeaderModule() const",1, 79, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::verifyAllModules()",1, 43, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::getClangASTContext() const",3, 2, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::getClangPreprocessor() const",3, 2, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::getClangSema() const",1, 72, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::getClangInstance() const",3, 2, 0, 0
repos/cpp/swift/lib/DWARFImporter/DWARFImporter.cpp,"DWARFImporter::printStatistics() const",1, 47, 0, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"isNSObjectOrAnyHashable( ASTContext & ctx , Type type)",12, 2, 0, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"isAnyObjectOrAny( Type type)",3, 2, 0, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"isClangKeyword( Identifier name)",17, 2, 0, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"looksLikeInitMethod( ObjCSelector selector)",7, 2, 0, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"maybeGetOSObjectBaseName( const clang :: NamedDecl * decl)",20, 2, 0, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"isOSObjectType( const clang :: Decl * decl)",6, 2, 0, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::ObjCPrinter( ModuleDecl & mod , raw_ostream & out , DelayedMemberSet & delayed , AccessLevel access)",3, 77, 4, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::print( const Decl * D)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::maybePrintObjCGenericParameters( const ClassDecl * importedClass)",16, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printAdHocCategory( iterator_range<const ValueDecl*const*> members)",13, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::shouldInclude( const ValueDecl * VD)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printProtocols( ArrayRef<ProtocolDecl*> protos)",20, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printMembers( R && members)",18, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printDocumentationComment( Decl * D)",6, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printEncodedString( StringRef str , bool includeQuotes = true)",34, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::getObjectTypeAndOptionality( const Decl * D , Type ty)",13, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitDecl( Decl * D)",1, 29, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitClassDecl( ClassDecl * CD)",22, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::isEmptyExtensionDecl( ExtensionDecl * ED)",18, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitExtensionDecl( ExtensionDecl * ED)",16, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitProtocolDecl( ProtocolDecl * PD)",22, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitEnumDecl( EnumDecl * ED)",40, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printSingleMethodParam( StringRef selectorPiece , const ParamDecl * param , const clang :: ParmVarDecl * clangParam , bool isNSUIntegerSubscript , bool isLastPiece)",27, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::findClangBase( const T * member)",8, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::isNSUInteger( clang :: QualType clangTy)",13, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::getForeignResultType( AbstractFunctionDecl * AFD , FunctionType * methodTy , Optional<ForeignErrorConvention> errorConvention)",27, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::selectorIsInit( ObjCSelector sel)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printAbstractFunctionAsMethod( AbstractFunctionDecl * AFD , bool isClassMethod , bool isNSUIntegerSubscript = false)",185, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printAbstractFunctionAsFunction( FuncDecl * FD)",54, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printAvailability( const Decl * D , PrintLeadingSpace printLeadingSpace = PrintLeadingSpace :: Yes)",136, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printRenameForDecl( const AvailableAttr * AvAttr , const ValueDecl * D , bool includeQuotes)",54, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printSwift3ObjCDeprecatedInference( ValueDecl * VD)",29, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitFuncDecl( FuncDecl * FD)",6, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitConstructorDecl( ConstructorDecl * CD)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::maybePrintIBOutletCollection( Type ty)",17, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::isCFTypeRef( Type ty)",14, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::isObjCReferenceCountableObjectType( Type ty)",16, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitVarDecl( VarDecl * VD)",150, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitSubscriptDecl( SubscriptDecl * SD)",15, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitPart( Type ty , Optional<OptionalTypeKind> optionalKind)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printNullability( Optional<OptionalTypeKind> kind , NullabilityPrintKind printKind = NullabilityPrintKind :: After)",41, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::hasGenericObjCType( const NominalTypeDecl * nominal)",11, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::getObjCBridgedClass( const NominalTypeDecl * nominal)",28, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printObjCBridgeableType( const NominalTypeDecl * swiftNominal , const ClassDecl * objcClass , ArrayRef<Type> typeArgs , Optional<OptionalTypeKind> optionalKind)",68, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printIfObjCBridgeable( const NominalTypeDecl * nominal , ArrayRef<Type> typeArgs , Optional<OptionalTypeKind> optionalKind)",9, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::getKnownTypeInfo( const TypeDecl * typeDecl)",89, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printIfKnownSimpleType( const TypeDecl * typeDecl , Optional<OptionalTypeKind> optionalKind)",10, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitType( TypeBase * Ty , Optional<OptionalTypeKind> optionalKind)",6, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::isClangPointerType( const clang :: TypeDecl * clangTypeDecl) const",7, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printImportedAlias( const TypeAliasDecl * alias , Optional<OptionalTypeKind> optionalKind)",25, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitNameAliasType( NameAliasType * aliasTy , Optional<OptionalTypeKind> optionalKind)",11, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::maybePrintTagKeyword( const TypeDecl * NTD)",20, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitStructType( StructType * ST , Optional<OptionalTypeKind> optionalKind)",20, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printCollectionElement( Type ty)",28, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printIfKnownGenericStruct( const BoundGenericStructType * BGT , Optional<OptionalTypeKind> optionalKind)",37, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitBoundGenericStructType( BoundGenericStructType * BGT , Optional<OptionalTypeKind> optionalKind)",12, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printGenericArgs( BoundGenericType * BGT)",7, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitBoundGenericClassType( BoundGenericClassType * BGT , Optional<OptionalTypeKind> optionalKind)",21, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitBoundGenericType( BoundGenericType * BGT , Optional<OptionalTypeKind> optionalKind)",13, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitEnumType( EnumType * ET , Optional<OptionalTypeKind> optionalKind)",10, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitClassType( ClassType * CT , Optional<OptionalTypeKind> optionalKind)",21, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitExistentialType( Type T , Optional<OptionalTypeKind> optionalKind , bool isMetatype = false)",35, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitProtocolType( ProtocolType * PT , Optional<OptionalTypeKind> optionalKind)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitProtocolCompositionType( ProtocolCompositionType * PCT , Optional<OptionalTypeKind> optionalKind)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitExistentialMetatypeType( ExistentialMetatypeType * MT , Optional<OptionalTypeKind> optionalKind)",5, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitMetatypeType( MetatypeType * MT , Optional<OptionalTypeKind> optionalKind)",12, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitGenericTypeParamType( GenericTypeParamType * type , Optional<OptionalTypeKind> optionalKind)",22, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::printFunctionType( FunctionType * FT , char pointerSigil , Optional<OptionalTypeKind> optionalKind)",7, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitFunctionType( FunctionType * FT , Optional<OptionalTypeKind> optionalKind)",14, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::finishFunctionType( const FunctionType * FT)",14, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitTupleType( TupleType * TT , Optional<OptionalTypeKind> optionalKind)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitParenType( ParenType * PT , Optional<OptionalTypeKind> optionalKind)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitSyntaxSugarType( SyntaxSugarType * SST , Optional<OptionalTypeKind> optionalKind)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitDynamicSelfType( DynamicSelfType * DST , Optional<OptionalTypeKind> optionalKind)",5, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::visitReferenceStorageType( ReferenceStorageType * RST , Optional<OptionalTypeKind> optionalKind)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::PrintMultiPartType::PrintMultiPartType( ObjCPrinter & Printer)",4, 6, 4, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::PrintMultiPartType::finish()",9, 6, 4, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::PrintMultiPartType::~PrintMultiPartType()",3, 6, 4, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ObjCPrinter::print( Type ty , Optional<OptionalTypeKind> optionalKind , Identifier name = Identifier() , IsFunctionParam_t isFuncParam = IsNotFunctionParam)",20, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::ReferencedTypeFinder( ModuleDecl & mod , decltype(Callback) callback)",2, 36, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitType( TypeBase * base)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitNameAliasType( NameAliasType * aliasTy)",8, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitParenType( ParenType * parenTy)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitTupleType( TupleType * tupleTy)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitReferenceStorageType( ReferenceStorageType * ty)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitNominalType( NominalType * nominal)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitAnyMetatypeType( AnyMetatypeType * metatype)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitDynamicSelfType( DynamicSelfType * module)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitArchetypeType( ArchetypeType * archetype)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitGenericTypeParamType( GenericTypeParamType * param)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitDependentMemberType( DependentMemberType * member)",4, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitAnyFunctionType( AnyFunctionType * fnTy)",5, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitSyntaxSugarType( SyntaxSugarType * sugar)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitProtocolCompositionType( ProtocolCompositionType * composition)",7, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitLValueType( LValueType * lvalue)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitInOutType( InOutType * inout)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::isConstrained( GenericSignature * sig , GenericTypeParamType * paramTy)",8, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::visitBoundGenericType( BoundGenericType * boundGeneric)",19, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::needsDefinition() const",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ReferencedTypeFinder::walk( ModuleDecl & mod , Type ty , decltype(Callback) callback)",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::ModuleWriter( ModuleDecl & mod , StringRef header , AccessLevel access)",2, 80, 4, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::addImport( const Decl * D)",30, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::hasBeenRequested( const TypeDecl * D) const",3, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::tryRequire( const TypeDecl * D)",8, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::require( const TypeDecl * D)",19, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::forwardDeclare( const NominalTypeDecl * NTD , llvm :: function_ref<void(void)> Printer)",10, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::forwardDeclare( const ClassDecl * CD)",9, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::forwardDeclare( const ProtocolDecl * PD)",7, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::forwardDeclare( const EnumDecl * ED)",9, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::forwardDeclareMemberTypes( DeclRange members , const Decl * container)",101, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::writeClass( const ClassDecl * CD)",27, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::writeFunc( const FuncDecl * FD)",7, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::writeProtocol( const ProtocolDecl * PD)",25, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::writeExtension( const ExtensionDecl * ED)",22, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::writeEnum( const EnumDecl * ED)",28, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::writePrologue( raw_ostream & out)",192, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::isUnderlyingModule( ModuleDecl * import)",9, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::compareImportModulesByName( const ImportModuleTy * left , const ImportModuleTy * right)",44, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::writeImports( raw_ostream & out)",45, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"ModuleWriter::writeToStream( raw_ostream & out)",156, 4, 2, 0
repos/cpp/swift/lib/PrintAsObjC/PrintAsObjC.cpp,"swift::printAsObjC( llvm :: raw_ostream & os , ModuleDecl * M , StringRef bridgingHeader , AccessLevel minRequiredAccess)",6, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"SymbolTracker::SymbolRelation::hash() const",1, 84, 4, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"SymbolTracker::SymbolOccurrence::hash() const",7, 6, 4, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"SymbolTracker::Symbol::hash() const",7, 6, 4, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"SymbolTracker::getSymbol( size_t index)",4, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"SymbolTracker::getOccurrences()",14, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"SymbolTracker::addSymbol( const IndexRelation & indexSym)",15, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"SymbolTracker::addOccurrence( const IndexSymbol & indexOccur)",16, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"SymbolTracker::hashRecord() const",1, 60, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"IndexRecordingConsumer::IndexRecordingConsumer( std :: function<void(SymbolTracker&)> onFinish)",2, 41, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"IndexRecordingConsumer::failed( StringRef error)",3, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"IndexRecordingConsumer::recordHash( StringRef hash , bool isKnown)",1, 74, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"IndexRecordingConsumer::startDependency( StringRef name , StringRef path , bool isClangModule , bool isSystem , StringRef hash)",4, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"IndexRecordingConsumer::finishDependency( bool isClangModule)",1, 70, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"IndexRecordingConsumer::startSourceEntity( const IndexSymbol & symbol)",4, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"IndexRecordingConsumer::finishSourceEntity( SymbolInfo sym , SymbolRoleSet roles)",7, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"IndexRecordingConsumer::finish()",1, 47, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StdlibGroupsIndexRecordingConsumer::StdlibGroupsIndexRecordingConsumer( std :: function<bool(StringRef groupName,SymbolTracker&)> onFinish)",2, 41, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StdlibGroupsIndexRecordingConsumer::failed( StringRef error)",3, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StdlibGroupsIndexRecordingConsumer::recordHash( StringRef hash , bool isKnown)",1, 74, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StdlibGroupsIndexRecordingConsumer::startDependency( StringRef name , StringRef path , bool isClangModule , bool isSystem , StringRef hash)",4, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StdlibGroupsIndexRecordingConsumer::finishDependency( bool isClangModule)",1, 70, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StdlibGroupsIndexRecordingConsumer::startSourceEntity( const IndexSymbol & symbol)",4, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StdlibGroupsIndexRecordingConsumer::finishSourceEntity( SymbolInfo sym , SymbolRoleSet roles)",12, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StdlibGroupsIndexRecordingConsumer::finish()",9, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"findGroupNameForDecl( const Decl * D)",10, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StdlibGroupsIndexRecordingConsumer::findGroupForSymbol( const IndexSymbol & sym)",16, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"writeRecord( SymbolTracker & record , std :: string Filename , std :: string indexStorePath , DiagnosticEngine * diags , std :: string & outRecordFile)",52, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"makeRecordingConsumer( std :: string Filename , std :: string indexStorePath , DiagnosticEngine * diags , std :: string * outRecordFile , bool * outFailed)",9, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"recordSourceFile( SourceFile * SF , StringRef indexStorePath , DiagnosticEngine & diags , llvm :: function_ref<void(StringRef,StringRef)> callback)",13, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"StringScratchSpace::createString( StringRef str)",4, 4, 2, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"getModuleInfoFromOpaqueModule( clang :: index :: writer :: OpaqueModule mod , SmallVectorImpl<char> & Scratch)",6, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"addModuleDependencies( ArrayRef<ModuleDecl::ImportedModule> imports , StringRef indexStorePath , bool indexSystemModules , StringRef targetTriple , const clang :: CompilerInstance & clangCI , DiagnosticEngine & diags , IndexUnitWriter & unitWriter , StringScratchSpace & moduleNameScratch)",64, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"emitDataForSwiftSerializedModule( ModuleDecl * module , StringRef indexStorePath , bool indexSystemModules , StringRef targetTriple , const clang :: CompilerInstance & clangCI , DiagnosticEngine & diags , IndexUnitWriter & parentUnitWriter)",125, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"recordSourceFileUnit( SourceFile * primarySourceFile , StringRef indexUnitToken , StringRef indexStorePath , bool indexSystemModules , bool isDebugCompilation , StringRef targetTriple , ArrayRef<const clang::FileEntry*> fileDependencies , const clang :: CompilerInstance & clangCI , DiagnosticEngine & diags)",44, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"collectFileDependencies( llvm :: SetVector<const clang::FileEntry*> & result , const DependencyTracker & dependencyTracker , ModuleDecl * module , clang :: FileManager & fileMgr)",15, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"index::indexAndRecord( SourceFile * primarySourceFile , StringRef indexUnitToken , StringRef indexStorePath , bool indexSystemModules , bool isDebugCompilation , StringRef targetTriple , const DependencyTracker & dependencyTracker)",36, 2, 0, 0
repos/cpp/swift/lib/Index/IndexRecord.cpp,"index::indexAndRecord( ModuleDecl * module , ArrayRef<std::string> indexUnitTokens , StringRef moduleUnitToken , StringRef indexStorePath , bool indexSystemModules , bool isDebugCompilation , StringRef targetTriple , const DependencyTracker & dependencyTracker)",55, 2, 0, 0
repos/cpp/swift/lib/Index/IndexDataConsumer.cpp,"IndexDataConsumer::anchor()",1, 36, 0, 0
repos/cpp/swift/lib/Index/IndexSymbol.cpp,"getNominalParent( const ValueDecl * D)",3, 2, 0, 0
repos/cpp/swift/lib/Index/IndexSymbol.cpp,"isUnitTestCase( const ClassDecl * D)",10, 2, 0, 0
repos/cpp/swift/lib/Index/IndexSymbol.cpp,"isUnitTest( const ValueDecl * D)",43, 2, 0, 0
repos/cpp/swift/lib/Index/IndexSymbol.cpp,"setFuncSymbolInfo( const FuncDecl * FD , SymbolInfo & sym)",41, 2, 0, 0
repos/cpp/swift/lib/Index/IndexSymbol.cpp,"getVarSymbolKind( const VarDecl * VD)",12, 2, 0, 0
repos/cpp/swift/lib/Index/IndexSymbol.cpp,"index::getSymbolInfoForModule( ModuleEntity Mod)",18, 2, 0, 0
repos/cpp/swift/lib/Index/IndexSymbol.cpp,"index::getSymbolInfoForDecl( const Decl * D)",88, 2, 0, 0
repos/cpp/swift/lib/Index/IndexSymbol.cpp,"index::getSubKindForAccessor( AccessorKind AK)",15, 2, 0, 0
repos/cpp/swift/lib/Index/IndexSymbol.cpp,"index::isLocalSymbol( const swift :: Decl * D)",5, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"printArtificialName( const swift :: AbstractStorageDecl * ASD , AccessorKind AK , llvm :: raw_ostream & OS)",24, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"printDisplayName( const swift :: ValueDecl * D , llvm :: raw_ostream & OS)",11, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"isMemberwiseInit( swift :: ValueDecl * D)",5, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"getLocForExtension( ExtensionDecl * D)",6, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"SourceFileOrModule::SourceFileOrModule( SourceFile & SF)",1, 55, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"SourceFileOrModule::SourceFileOrModule( ModuleDecl & Mod)",1, 57, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"SourceFileOrModule::getAsSourceFile() const",3, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"SourceFileOrModule::getAsModule() const",1, 79, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"SourceFileOrModule::getModule() const",5, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"SourceFileOrModule::getFiles() const",4, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"SourceFileOrModule::getFilename() const",5, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"SourceFileOrModule::getImportedModules( SmallVectorImpl<ModuleDecl::ImportedModule> & Modules) const",8, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getNameAndUSR( ValueDecl * D , ExtensionDecl * ExtD , StringRef & name , StringRef & USR)",29, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getModuleNameAndUSR( ModuleEntity Mod , StringRef & name , StringRef & USR)",21, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getPseudoAccessorNameAndUSR( AbstractStorageDecl * D , AccessorKind AK , StringRef & Name , StringRef & USR)",25, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::addRelation( IndexSymbol & Info , SymbolRoleSet RelationRoles , Decl * D)",28, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::IndexSwiftASTWalker( IndexDataConsumer & IdxConsumer , ASTContext & Ctx , unsigned BufferID = - 1)",4, 56, 6, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::~IndexSwiftASTWalker()",4, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::walkToDeclPre( Decl * D , CharSourceRange Range)",17, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::walkToDeclPost( Decl * D)",9, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::handleMemberwiseInitRefs( Expr * E)",44, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::walkToExprPre( Expr * E)",8, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::walkToExprPost( Expr * E)",7, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",17, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::visitModuleReference( ModuleEntity Mod , CharSourceRange Range)",23, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getParentDecl() const",5, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::repressRefAtLoc( SourceLoc Loc)",5, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::isRepressed( SourceLoc Loc) const",7, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getContainingExpr( size_t index) const",5, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getCurrentExpr() const",3, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getParentExpr() const",3, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::reportPseudoGetterDecl( VarDecl * D)",4, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::reportPseudoSetterDecl( VarDecl * D)",4, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::finishCurrentEntity()",5, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::finishSourceEntity( SymbolInfo symInfo , SymbolRoleSet roles)",7, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getLineCol( SourceLoc Loc)",5, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::shouldIndex( ValueDecl * D , bool IsRef) const",13, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::warn( F log)",8, 4, 2, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::visitDeclContext( DeclContext * Context)",10, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::visitModule( ModuleDecl & Mod , StringRef KnownHash)",30, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::handleSourceOrModuleFile( SourceFileOrModule SFOrMod , StringRef KnownHash , bool & HashIsKnown)",19, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::visitImports( SourceFileOrModule TopMod , llvm :: SmallPtrSetImpl<ModuleDecl*> & Visited)",71, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::handleValueWitnesses( Decl * D , SmallVectorImpl<ValueWitness> & explicitValueWitnesses)",37, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::startEntity( Decl * D , IndexSymbol & Info , bool IsRef)",20, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::startEntityDecl( ValueDecl * D)",51, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::reportRelatedRef( ValueDecl * D , SourceLoc Loc , bool isImplicit , SymbolRoleSet Relations , Decl * Related)",21, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::reportInheritedTypeRefs( ArrayRef<TypeLoc> Inherited , Decl * Inheritee)",7, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::reportRelatedTypeRef( const TypeLoc & Ty , SymbolRoleSet Relations , Decl * Related)",34, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"isDynamicVarAccessorOrFunc( ValueDecl * D , SymbolInfo symInfo)",17, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::reportPseudoAccessor( AbstractStorageDecl * D , AccessorKind AccKind , bool IsRef , SourceLoc Loc)",63, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getTypeLocAsNominalTypeDecl( const TypeLoc & Ty)",10, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::reportExtension( ExtensionDecl * D)",23, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::report( ValueDecl * D)",62, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"hasUsefulRoleInSystemModule( SymbolRoleSet roles)",10, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::reportRef( ValueDecl * D , SourceLoc Loc , IndexSymbol & Info , Optional<AccessKind> AccKind)",40, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::reportImplicitValueConformance( ValueDecl * witness , ValueDecl * requirement , Decl * container)",27, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::initIndexSymbol( ValueDecl * D , SourceLoc Loc , bool IsRef , IndexSymbol & Info)",31, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::initIndexSymbol( ExtensionDecl * ExtD , ValueDecl * ExtendedD , SourceLoc Loc , IndexSymbol & Info)",18, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"getNominalParent( ValueDecl * D)",3, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::initFuncDeclIndexSymbol( FuncDecl * D , IndexSymbol & Info)",26, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"isSuperRefExpr( Expr * E)",9, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"isDynamicCall( Expr * BaseE , ValueDecl * D)",19, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"isBeingCalled( Expr * Target , Expr * Parent , Expr * GrandParent)",10, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::initFuncRefIndexSymbol( ValueDecl * D , SourceLoc Loc , IndexSymbol & Info)",49, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::initVarRefIndexSymbols( Expr * CurrentE , ValueDecl * D , SourceLoc Loc , IndexSymbol & Info , Optional<AccessKind> AccKind)",24, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::indexComment( const Decl * D)",55, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::hashFileReference( llvm :: hash_code code , SourceFileOrModule SFOrMod)",23, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::hashModule( llvm :: hash_code code , SourceFileOrModule SFOrMod)",11, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getRecursiveModuleImports( ModuleDecl & Mod , SmallVectorImpl<ModuleDecl*> & Imports)",61, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::collectRecursiveModuleImports( ModuleDecl & TopMod , llvm :: SmallPtrSetImpl<ModuleDecl*> & Visited)",31, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"IndexSwiftASTWalker::getModuleHash( SourceFileOrModule Mod , llvm :: raw_ostream & OS)",6, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"getContextFreeInterfaceType( ValueDecl * VD)",6, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"swift::canDeclProvideDefaultImplementationFor( ValueDecl * VD , llvm :: SmallVectorImpl<ValueDecl*> & Scratch)",32, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"swift::getOverriddenDecls( ValueDecl * VD , bool IncludeProtocolRequirements , bool Transitive)",25, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"index::indexDeclContext( DeclContext * DC , IndexDataConsumer & consumer)",7, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"index::indexSourceFile( SourceFile * SF , StringRef hash , IndexDataConsumer & consumer)",8, 2, 0, 0
repos/cpp/swift/lib/Index/Index.cpp,"index::indexModule( ModuleDecl * module , StringRef hash , IndexDataConsumer & consumer)",7, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::getLocInfo( swift :: SourceLoc Loc) const",5, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::cacheReplacement( CharSourceRange Range , StringRef Text) const",13, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::getClangFileIDForSwiftBufferID( unsigned BufferID) const",17, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::translateSourceLoc( SourceLoc SwiftLoc) const",7, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::translateSourceRange( SourceRange SwiftSourceRange) const",5, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::translateCharSourceRange( CharSourceRange SwiftSourceSourceRange) const",6, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::insert( SourceLoc Loc , StringRef Text , bool AfterToken , bool BeforePreviousInsertions)",13, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::insertFromRange( SourceLoc Loc , CharSourceRange Range , bool AfterToken , bool BeforePreviousInsertions)",18, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::insertWrap( StringRef Before , CharSourceRange Range , StringRef After)",5, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::remove( CharSourceRange Range)",7, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::replace( CharSourceRange Range , StringRef Text)",8, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::replaceWithInner( CharSourceRange Range , CharSourceRange InnerRange)",10, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::replaceText( SourceLoc Loc , StringRef Text , StringRef ReplacementText)",11, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::insertFromRange( SourceLoc Loc , SourceRange TokenRange , bool AfterToken , bool BeforePreviousInsertions)",7, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::insertWrap( StringRef Before , SourceRange TokenRange , StringRef After)",5, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::remove( SourceLoc TokenLoc)",4, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::remove( SourceRange TokenRange)",4, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::replace( SourceRange TokenRange , StringRef Text)",4, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::replaceWithInner( SourceRange TokenRange , SourceRange TokenInnerRange)",6, 2, 0, 0
repos/cpp/swift/lib/Migrator/EditorAdapter.cpp,"EditorAdapter::replaceToken( SourceLoc TokenLoc , StringRef Text)",4, 2, 0, 0
repos/cpp/swift/lib/Migrator/MigrationState.cpp,"MigrationState::getInputText() const",3, 2, 0, 0
repos/cpp/swift/lib/Migrator/MigrationState.cpp,"MigrationState::getOutputText() const",3, 2, 0, 0
repos/cpp/swift/lib/Migrator/MigrationState.cpp,"quickDumpText( StringRef OutFilename , StringRef Text)",14, 2, 0, 0
repos/cpp/swift/lib/Migrator/MigrationState.cpp,"MigrationState::print( size_t StateNumber , StringRef OutDir) const",33, 2, 0, 0
repos/cpp/swift/lib/Migrator/FixitApplyDiagnosticConsumer.cpp,"FixitApplyDiagnosticConsumer::FixitApplyDiagnosticConsumer( const StringRef Text , const StringRef BufferName)",6, 2, 0, 0
repos/cpp/swift/lib/Migrator/FixitApplyDiagnosticConsumer.cpp,"FixitApplyDiagnosticConsumer::printResult( llvm :: raw_ostream & OS) const",3, 2, 0, 0
repos/cpp/swift/lib/Migrator/FixitApplyDiagnosticConsumer.cpp,"FixitApplyDiagnosticConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",48, 2, 0, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"FoundResult::isValid() const",1, 56, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::ChildIndexFinder( ArrayRef<uint8_t> ChildIndices)",3, 41, 6, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::findChild( AbstractFunctionDecl * Parent)",23, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::hasNextIndex() const",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::consumeNext()",5, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::isUserTypeAlias( TypeRepr * T) const",9, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::findChild( TypeLoc Loc)",5, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::handleParent( TypeRepr * Parent , const ArrayRef<T> Children , bool Optional = false , bool Suffixable = true)",19, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::handleParent( TypeRepr * Parent , TypeRepr * FirstChild , TypeRepr * SecondChild , bool Optional = false , bool Suffixable = true)",7, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::handleParent( TypeRepr * Parent , TypeRepr * Base , bool Optional = false , bool Suffixable = true)",4, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitTypeRepr( TypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitErrorTypeRepr( ErrorTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitAttributedTypeRepr( AttributedTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitInOutTypeRepr( InOutTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitSharedTypeRepr( SharedTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitOwnedTypeRepr( OwnedTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitArrayTypeRepr( ArrayTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitDictionaryTypeRepr( DictionaryTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitTupleTypeRepr( TupleTypeRepr * T)",13, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitFunctionTypeRepr( FunctionTypeRepr * T)",4, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitCompositionTypeRepr( CompositionTypeRepr * T)",4, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitSimpleIdentTypeRepr( SimpleIdentTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitGenericIdentTypeRepr( GenericIdentTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitCompoundIdentTypeRepr( CompoundIdentTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitOptionalTypeRepr( OptionalTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitImplicitlyUnwrappedOptionalTypeRepr( ImplicitlyUnwrappedOptionalTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitProtocolTypeRepr( ProtocolTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitMetatypeTypeRepr( MetatypeTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ChildIndexFinder::visitFixedTypeRepr( FixedTypeRepr * T)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"getReferencedDecl( Expr * E)",14, 2, 0, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ConversionFunctionInfo::ConversionFunctionInfo( Expr * ExpressionToWrap)",2, 42, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ConversionFunctionInfo::getFuncDef() const",1, 56, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"ConversionFunctionInfo::getFuncName() const",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::isNilExpr( Expr * E)",5, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::isDotMember( CharSourceRange Range)",4, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::isDotMember( SourceRange Range)",4, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::isDotMember( Expr * E)",4, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::getRelatedDiffItems( ValueDecl * VD)",20, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::getFuncRename( ValueDecl * VD , llvm :: SmallString<32> & Buffer , bool & IgnoreBase)",27, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::isSimpleReplacement( APIDiffItem * Item , bool isDotMember , std :: string & Text)",26, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::isRecognizedTypeAliasChange( Expr * E)",14, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::APIDiffMigratorPass( EditorAdapter & Editor , SourceFile * SF , const MigratorOptions & Opts)",5, 60, 4, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::~APIDiffMigratorPass()",64, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::run()",8, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::updateStringRepresentableDeclRef( APIDiffItem * Diff , CharSourceRange Range)",17, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",12, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::ReferenceCollector::ReferenceCollector( ValueDecl * Target)",1, 62, 4, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::ReferenceCollector::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",9, 6, 4, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::emitRenameLabelChanges( Expr * Arg , DeclNameViewer NewName , llvm :: ArrayRef<unsigned> IgnoreArgIndex)",33, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleFuncRename( ValueDecl * FD , Expr * FuncRefContainer , Expr * Arg)",12, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleQualifiedReplacement( Expr * Call)",33, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleSpecialCases( ValueDecl * FD , CallExpr * Call , Expr * Arg)",134, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleTypeHoist( ValueDecl * FD , CallExpr * Call , Expr * Arg)",87, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleFunctionCallToPropertyChange( ValueDecl * FD , Expr * FuncRefContainer , Expr * Arg)",35, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::replaceExpr( Expr * E , StringRef Text)",4, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::wrapAttributeReference( Expr * Reference , Expr * WrapperTarget , bool FromString)",31, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleAssignDestMigration( Expr * E)",14, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleAttributeReference( Expr * E)",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::insertHelperFunction( NodeAnnotation Anno , StringRef RawType , StringRef NewType , bool FromString , Expr * Wrappee)",78, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleStringRepresentableArg( ValueDecl * FD , Expr * Arg , Expr * Call)",32, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::hasRevertRawRepresentableChange( ValueDecl * VD)",10, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleRevertRawRepresentable( Expr * E)",48, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::walkToExprPre( Expr * E)",51, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::collectParamters( AbstractFunctionDecl * AFD , SmallVectorImpl<ParamDecl*> & Results)",6, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleFuncDeclRename( AbstractFunctionDecl * AFD , CharSourceRange NameRange)",32, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::typeReplacementMayNeedParens( StringRef Replacement) const",3, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleOverridingTypeChange( AbstractFunctionDecl * AFD , CommonDiffItem * DiffItem)",43, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleOverridingPropertyChange( AbstractFunctionDecl * AFD , CommonDiffItem * DiffItem)",33, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::handleLocalParameterBridge( AbstractFunctionDecl * AFD , CommonDiffItem * DiffItem)",38, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::funcNamesForOverrideRemoval()",23, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::shouldRemoveOverride( AbstractFunctionDecl * AFD)",21, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::SuperRemoval::SuperRemoval( EditorAdapter & Editor , llvm :: StringSet<> & USRs)",2, 36, 4, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::SuperRemoval::isSuperExpr( Expr * E)",22, 6, 4, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::SuperRemoval::walkToStmtPre( Stmt * S)",11, 6, 4, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"APIDiffMigratorPass::walkToDeclPre( Decl * D , CharSourceRange Range)",26, 4, 2, 0
repos/cpp/swift/lib/Migrator/APIDiffMigratorPass.cpp,"migrator::runAPIDiffMigratorPass( EditorAdapter & Editor , SourceFile * SF , const MigratorOptions & Opts)",5, 2, 0, 0
repos/cpp/swift/lib/Migrator/RewriteBufferEditsReceiver.cpp,"RewriteBufferEditsReceiver::insert( clang :: SourceLocation ClangLoc , StringRef NewText)",5, 2, 0, 0
repos/cpp/swift/lib/Migrator/RewriteBufferEditsReceiver.cpp,"RewriteBufferEditsReceiver::replace( clang :: CharSourceRange ClangRange , StringRef ReplacementText)",7, 2, 0, 0
repos/cpp/swift/lib/Migrator/RewriteBufferEditsReceiver.cpp,"RewriteBufferEditsReceiver::printResult( llvm :: raw_ostream & OS) const",3, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"migrator::updateCodeAndEmitRemapIfNeeded( CompilerInstance * Instance , const CompilerInvocation & Invocation)",62, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"Migrator::Migrator( CompilerInstance * StartInstance , const CompilerInvocation & StartInvocation)",9, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"Migrator::repeatFixitMigrations( const unsigned Iterations , version :: Version SwiftLanguageVersion)",14, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"Migrator::performAFixItMigration( version :: Version SwiftLanguageVersion)",56, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"Migrator::performSyntacticPasses()",50, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"printReplacement( const StringRef Filename , const Replacement & Rep , llvm :: raw_ostream & OS)",28, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"printRemap( const StringRef OriginalFilename , const StringRef InputText , const StringRef OutputText , llvm :: raw_ostream & OS)",96, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"Migrator::emitRemap() const",20, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"Migrator::emitMigratedFile() const",19, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"Migrator::dumpStates() const",13, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"Migrator::getMigratorOptions() const",3, 2, 0, 0
repos/cpp/swift/lib/Migrator/Migrator.cpp,"Migrator::getInputFilename() const",5, 2, 0, 0
repos/cpp/swift/lib/Migrator/OptionalTryMigratorPass.cpp,"OptionalTryMigratorPass::walkToExprPre( Expr * E)",24, 6, 4, 0
repos/cpp/swift/lib/Migrator/OptionalTryMigratorPass.cpp,"OptionalTryMigratorPass::walkToExprPost( Expr * E)",4, 6, 4, 0
repos/cpp/swift/lib/Migrator/OptionalTryMigratorPass.cpp,"OptionalTryMigratorPass::wrapTryInCastIfNeeded( const OptionalTryExpr * optTryExpr)",19, 6, 4, 0
repos/cpp/swift/lib/Migrator/OptionalTryMigratorPass.cpp,"OptionalTryMigratorPass::OptionalTryMigratorPass( EditorAdapter & Editor , SourceFile * SF , const MigratorOptions & Opts)",4, 43, 5, 0
repos/cpp/swift/lib/Migrator/OptionalTryMigratorPass.cpp,"migrator::runOptionalTryMigratorPass( EditorAdapter & Editor , SourceFile * SF , const MigratorOptions & Opts)",5, 2, 0, 0
repos/cpp/swift/tools/lldb-moduleimport-test/lldb-moduleimport-test.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/lldb-moduleimport-test/lldb-moduleimport-test.cpp,"validateModule( llvm :: StringRef data , bool Verbose , swift :: serialization :: ValidationInfo & info , swift :: serialization :: ExtendedValidationInfo & extendedInfo)",31, 2, 0, 0
repos/cpp/swift/tools/lldb-moduleimport-test/lldb-moduleimport-test.cpp,"resolveDeclFromMangledNameList( swift :: ASTContext & Ctx , llvm :: ArrayRef<std::string> MangledNames)",14, 2, 0, 0
repos/cpp/swift/tools/lldb-moduleimport-test/lldb-moduleimport-test.cpp,"resolveTypeFromMangledNameList( swift :: ASTContext & Ctx , llvm :: ArrayRef<std::string> MangledNames)",14, 2, 0, 0
repos/cpp/swift/tools/lldb-moduleimport-test/lldb-moduleimport-test.cpp,"collectMangledNames( const std :: string & FilePath , llvm :: SmallVectorImpl<std::string> & MangledNames)",10, 2, 0, 0
repos/cpp/swift/tools/lldb-moduleimport-test/lldb-moduleimport-test.cpp,"collectASTModules( llvm :: cl :: list<std::string> & InputNames , llvm :: SmallVectorImpl<std::pair<char*,uint64_t>> & Modules)",55, 2, 0, 0
repos/cpp/swift/tools/lldb-moduleimport-test/lldb-moduleimport-test.cpp,"main( int argc , char ** argv)",162, 2, 0, 0
repos/cpp/swift/tools/sil-nm/SILNM.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/sil-nm/SILNM.cpp,"printAndSortNames( std :: vector<StringRef> & Names , char Code)",12, 2, 0, 0
repos/cpp/swift/tools/sil-nm/SILNM.cpp,"nmModule( SILModule * M)",32, 2, 0, 0
repos/cpp/swift/tools/sil-nm/SILNM.cpp,"main( int argc , char ** argv)",77, 2, 0, 0
repos/cpp/swift/tools/swift-remoteast-test/swift-remoteast-test.cpp,"printMetadataType( const Metadata * typeMetadata)",18, 2, 0, 0
repos/cpp/swift/tools/swift-remoteast-test/swift-remoteast-test.cpp,"printHeapMetadataType( void * object)",26, 2, 0, 0
repos/cpp/swift/tools/swift-remoteast-test/swift-remoteast-test.cpp,"printMemberOffset( const Metadata * typeMetadata , StringRef memberName , bool passMetadata)",32, 2, 0, 0
repos/cpp/swift/tools/swift-remoteast-test/swift-remoteast-test.cpp,"printTypeMemberOffset( const Metadata * typeMetadata , const char * memberName)",4, 2, 0, 0
repos/cpp/swift/tools/swift-remoteast-test/swift-remoteast-test.cpp,"printTypeMetadataMemberOffset( const Metadata * typeMetadata , const char * memberName)",4, 2, 0, 0
repos/cpp/swift/tools/swift-remoteast-test/swift-remoteast-test.cpp,"printDynamicTypeAndAddressForExistential( void * object , const Metadata * typeMetadata)",29, 2, 0, 0
repos/cpp/swift/tools/swift-remoteast-test/swift-remoteast-test.cpp,"Observer::configuredCompiler( CompilerInstance & instance)",3, 4, 2, 0
repos/cpp/swift/tools/swift-remoteast-test/swift-remoteast-test.cpp,"main( int argc , const char * argv [ ])",17, 2, 0, 0
repos/cpp/swift/tools/swift-demangle/swift-demangle.cpp,"substrBefore( llvm :: StringRef whole , llvm :: StringRef part)",4, 2, 0, 0
repos/cpp/swift/tools/swift-demangle/swift-demangle.cpp,"substrAfter( llvm :: StringRef whole , llvm :: StringRef part)",4, 2, 0, 0
repos/cpp/swift/tools/swift-demangle/swift-demangle.cpp,"demangle( llvm :: raw_ostream & os , llvm :: StringRef name , swift :: Demangle :: Context & DCtx , const swift :: Demangle :: DemangleOptions & options)",88, 2, 0, 0
repos/cpp/swift/tools/swift-demangle/swift-demangle.cpp,"demangleSTDIN( const swift :: Demangle :: DemangleOptions & options)",21, 2, 0, 0
repos/cpp/swift/tools/swift-demangle/swift-demangle.cpp,"main( int argc , char ** argv)",31, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRange::ByteBasedSourceRange( uintptr_t Start , uintptr_t End)",4, 4, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRange::ByteBasedSourceRange()",1, 57, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRange::intersect( const ByteBasedSourceRange & Other)",9, 4, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRange::empty()",1, 40, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRange::toCharSourceRange( SourceManager & SourceMgr , unsigned BufferID)",5, 4, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRangeSet::ByteBasedSourceRangeSet()",1, 31, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRangeSet::ByteBasedSourceRangeSet( std :: vector<SyntaxReuseRegion> Ranges)",5, 4, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRangeSet::addRange( ByteBasedSourceRange Range)",1, 73, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRangeSet::invert( unsigned FileLength)",17, 4, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"ByteBasedSourceRangeSet::intersect( ByteBasedSourceRangeSet Other)",12, 4, 2, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"getTokensFromFile( unsigned BufferID , LangOptions & LangOpts , SourceManager & SourceMgr , swift :: DiagnosticEngine & Diags , std :: vector<std::pair<RC<syntax::RawSyntax>,syntax::AbsolutePosition>> & Tokens)",11, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"getTokensFromFile( const StringRef InputFilename , LangOptions & LangOpts , SourceManager & SourceMgr , DiagnosticEngine & Diags , std :: vector<std::pair<RC<syntax::RawSyntax>,syntax::AbsolutePosition>> & Tokens)",16, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"parseReparseRegionArguments( ByteBasedSourceRangeSet & ParsedRegions , SourceManager & SourceMgr , unsigned BufferID)",45, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"parseIncrementalEditArguments( SyntaxParsingCache * Cache , StringRef OldFileName)",54, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"useColoredOutput()",3, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"printVisualNodeReuseInformation( SourceManager & SourceMgr , unsigned BufferID , SyntaxParsingCache * Cache , const SourceFileSyntax & NewSyntaxTree)",44, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"saveReuseLog( SyntaxParsingCache * Cache , const SourceFileSyntax & NewSyntaxTree)",14, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"verifyReusedRegions( ByteBasedSourceRangeSet ExpectedReparseRegions , SyntaxParsingCache * SyntaxCache , SourceManager & SourceMgr , unsigned BufferID , SourceFile * SF)",56, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"parseFile( const char * MainExecutablePath , const StringRef InputFileName , llvm :: function_ref<int(SourceFile*,SyntaxParsingCache*SyntaxCache)> ActionSpecificCallback)",105, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"doFullLexRoundTrip( const StringRef InputFilename)",20, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"doDumpRawTokenSyntax( const StringRef InputFile)",22, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"doFullParseRoundTrip( const char * MainExecutablePath , const StringRef InputFile)",8, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"doSerializeRawTree( const char * MainExecutablePath , const StringRef InputFile)",65, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"doDeserializeRawTree( const char * MainExecutablePath , const StringRef InputFile , const StringRef OutputFileName)",13, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"doParseOnly( const char * MainExecutablePath , const StringRef InputFile)",6, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"dumpParserGen( const char * MainExecutablePath , const StringRef InputFile)",11, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"dumpEOFSourceLoc( const char * MainExecutablePath , const StringRef InputFile)",22, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"invokeCommand( const char * MainExecutablePath , const StringRef InputSourceFilename)",39, 2, 0, 0
repos/cpp/swift/tools/swift-syntax-test/swift-syntax-test.cpp,"main( int argc , char * argv [ ])",48, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/Context.cpp,"SourceKit::Context::Context( StringRef RuntimeLibPath , llvm :: function_ref<std::unique_ptr<LangSupport>(Context&)> LangSupportFactoryFn , bool shouldDispatchNotificationsOnMain)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/Context.cpp,"SourceKit::Context::~Context()",2, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/LangSupport.cpp,"IndexingConsumer::anchor()",1, 36, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/LangSupport.cpp,"CodeCompletionConsumer::anchor()",1, 42, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/LangSupport.cpp,"EditorConsumer::anchor()",1, 34, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/LangSupport.cpp,"OptionsDictionary::anchor()",1, 36, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/LangSupport.cpp,"DocInfoConsumer::anchor()",1, 35, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/LangSupport.cpp,"LangSupport::anchor()",1, 31, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/NotificationCenter.cpp,"NotificationCenter::NotificationCenter( bool dispatchToMain)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/NotificationCenter.cpp,"NotificationCenter::~NotificationCenter()",1, 45, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/NotificationCenter.cpp,"NotificationCenter::addDocumentUpdateNotificationReceiver( DocumentUpdateNotificationReceiver Receiver)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Core/NotificationCenter.cpp,"NotificationCenter::postDocumentUpdateNotification( StringRef DocumentName) const",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Tracing.cpp,"trace::anyEnabled()",1, 73, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Tracing.cpp,"trace::enabled( OperationKind op)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Tracing.cpp,"trace::startOperation( trace :: OperationKind OpKind , const trace :: SwiftInvocation & Inv , const trace :: StringPairs & OpArgs)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Tracing.cpp,"trace::operationFinished( uint64_t OpId , trace :: OperationKind OpKind , ArrayRef<DiagnosticEntryInfo> Diagnostics)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Tracing.cpp,"updateTracedOperations()",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Tracing.cpp,"trace::registerConsumer( trace :: TraceConsumer * Consumer)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Tracing.cpp,"trace::unregisterConsumer( trace :: TraceConsumer * Consumer)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"getGlobalRegistry()",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIdent::UIdent( llvm :: StringRef Str)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIdent::getName() const",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIdent::c_str() const",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIdent::setTag( void * Tag)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIdent::getTag() const",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIdent::dump() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIdent::print( llvm :: raw_ostream & OS) const",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIDRegistryImpl::get( StringRef Str)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIDRegistryImpl::getName( void * Ptr)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIDRegistryImpl::setTag( void * Ptr , void * Tag)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/UIDRegistry.cpp,"UIDRegistryImpl::getTag( void * Ptr)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ThreadSafeRefCntPtr.cpp,"ThreadSafeRefCntPtrImpl::getMutex( void * Ptr)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Logging.cpp,"Logger::operator < <( UIdent UID)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Logging.cpp,"Logger::operator < <( const llvm :: format_object_base & Fmt)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Logging.cpp,"Logger::~Logger()",36, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/FuzzyStringMatcher.cpp,"FuzzyStringMatcher::FuzzyStringMatcher( StringRef pattern_)",28, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/FuzzyStringMatcher.cpp,"FuzzyStringMatcher::matchesCandidate( StringRef candidate) const",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/FuzzyStringMatcher.cpp,"isTokenizingChar( char c)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/FuzzyStringMatcher.cpp,"populateTokenTable( SmallVectorImpl<Range> & tokens , llvm :: MutableArrayRef<unsigned> characterToTokenIndex , StringRef candidate)",31, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/FuzzyStringMatcher.cpp,"FuzzyStringMatcher::scoreCandidate( StringRef candidate) const",38, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/FuzzyStringMatcher.cpp,"CandidateSpecificMatcher::CandidateSpecificMatcher( StringRef pattern , StringRef lowercasePattern , StringRef candidate , const llvm :: BitVector & charactersInPattern , unsigned & firstPatternPos)",31, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/FuzzyStringMatcher.cpp,"CandidateSpecificMatcher::scoreCandidate( unsigned firstPatternPos)",29, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/FuzzyStringMatcher.cpp,"scoreRun( unsigned runStart , unsigned runLength , unsigned prevTokenStart , unsigned tokenIndex , unsigned uppercaseMatches , bool isTokenizingChar)",25, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/FuzzyStringMatcher.cpp,"CandidateSpecificMatcher::scoreCandidateTrial( unsigned firstPatternPos)",238, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"Semaphore::Impl::create( long count)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"Semaphore::Impl::signal( Ty Obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"Semaphore::Impl::wait( Ty Obj)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"Semaphore::Impl::wait( Ty Obj , long milliseconds)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"Semaphore::Impl::retain( Ty Obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"Semaphore::Impl::release( Ty Obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"toDispatchPriority( WorkQueue :: Priority Prio)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"toDispatchDequeuing( WorkQueue :: Dequeuing DeqKind)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"getDispatchGlobalQueue( WorkQueue :: Priority Prio)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::create( Dequeuing DeqKind , Priority Prio , llvm :: StringRef Label)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"ExecuteOnLargeStackInfo::~ExecuteOnLargeStackInfo()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"executeBlock( void * Data)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"executeOnLargeStackThread( void * Data)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"toCFunction( void * Ctx , WorkQueue :: DispatchFn Fn , bool isStackDeep)",20, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::dispatch( Ty Obj , const DispatchData & Fn)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::dispatchSync( Ty Obj , const DispatchData & Fn)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::dispatchBarrier( Ty Obj , const DispatchData & Fn)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::dispatchBarrierSync( Ty Obj , const DispatchData & Fn)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::dispatchOnMain( const DispatchData & Fn)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::dispatchConcurrent( Priority Prio , const DispatchData & Fn)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::suspend( Ty Obj)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::resume( Ty Obj)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::setPriority( Ty Obj , Priority Prio)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::getLabel( const Ty Obj)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::retain( Ty Obj)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/Concurrency-libdispatch.cpp,"WorkQueue::Impl::release( Ty Obj)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextUpdate::anchor()",1, 38, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextBuffer::ImmutableTextBuffer( std :: unique_ptr<llvm::MemoryBuffer> MemBuf , uint64_t Stamp)",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextBuffer::ImmutableTextBuffer( StringRef Filename , StringRef Text , uint64_t Stamp)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextBuffer::getFilename() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextBuffer::getText() const",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextBuffer::getInternalBuffer() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextBuffer::getLineAndColumn( unsigned ByteOffset) const",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ReplaceImmutableTextUpdate::ReplaceImmutableTextUpdate( unsigned ByteOffset , unsigned Length , StringRef Text , uint64_t Stamp)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ReplaceImmutableTextUpdate::getText() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextSnapshot::getFilename() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextSnapshot::getStamp() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextSnapshot::getBuffer() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextSnapshot::getSize() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextSnapshot::precedesOrSame( ImmutableTextSnapshotRef Other)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"ImmutableTextSnapshot::foreachReplaceUntil( ImmutableTextSnapshotRef EndSnapshot , std :: function<bool(ReplaceImmutableTextUpdateRef Upd)> Fn)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBuffer::EditableTextBuffer( StringRef Filename , StringRef Text)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBuffer::getSnapshot() const",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBuffer::insert( unsigned ByteOffset , StringRef Text)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBuffer::erase( unsigned ByteOffset , unsigned Length)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBuffer::replace( unsigned ByteOffset , unsigned Length , StringRef Text)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBuffer::addAtomicUpdate( ImmutableTextUpdateRef NewUpd)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"getMemBufferFromRope( StringRef Filename , const RewriteRope & Rope)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBuffer::getBufferForSnapshot( const ImmutableTextSnapshot & Snap)",48, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBuffer::getSizeForSnapshot( const ImmutableTextSnapshot & Snap) const",29, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBuffer::refresh()",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBufferManager::getOrCreateBuffer( StringRef Filename , StringRef Text)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/Support/ImmutableTextBuffer.cpp,"EditableTextBufferManager::resetBuffer( StringRef Filename , StringRef Text)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SourceKit::createSwiftLangSupport( SourceKit :: Context & SKCtx)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"UIdentVisitor::UIdentVisitor( bool IsRef)",1, 56, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"UIdentVisitor::visitDecl( const Decl * D)",1, 55, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"UIdentVisitor::visitFuncDecl( const FuncDecl * D)",32, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"UIdentVisitor::visitVarDecl( const VarDecl * D)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"UIdentVisitor::visitParamDecl( const ParamDecl * D)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"UIdentVisitor::visitExtensionDecl( const ExtensionDecl * D)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::SwiftLangSupport( SourceKit :: Context & SKCtx)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::~SwiftLangSupport()",2, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForDecl( const Decl * D , bool IsRef)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForExtensionOfDecl( const Decl * D)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForLocalVar( bool IsRef)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForAccessor( const ValueDecl * D , AccessorKind AccKind , bool IsRef)",25, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForModuleRef()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForRefactoringKind( ide :: RefactoringKind Kind)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForCodeCompletionDeclKind( ide :: CodeCompletionDeclKind Kind , bool IsRef)",61, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForSyntaxNodeKind( SyntaxNodeKind SC)",46, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForSyntaxStructureKind( SyntaxStructureKind Kind)",79, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForSyntaxStructureElementKind( SyntaxStructureElementKind Kind)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForRangeKind( swift :: ide :: RangeKind Kind)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForRegionType( swift :: ide :: RegionType Type)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForRefactoringRangeKind( ide :: RefactoringRangeKind Kind)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForSymbol( SymbolInfo sym , bool isRef)",89, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForNameKind( swift :: ide :: NameKind Kind)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getNameKindForUID( SourceKit :: UIdent Id)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getUIDForDeclAttribute( const swift :: DeclAttribute * Attr)",96, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::UIDsFromDeclAttributes( const DeclAttributes & Attrs)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::printDisplayName( const swift :: ValueDecl * D , llvm :: raw_ostream & OS)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::printUSR( const ValueDecl * D , llvm :: raw_ostream & OS)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::printDeclTypeUSR( const ValueDecl * D , llvm :: raw_ostream & OS)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::printTypeUSR( Type Ty , llvm :: raw_ostream & OS)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::printAccessorUSR( const AbstractStorageDecl * D , AccessorKind AccKind , llvm :: raw_ostream & OS)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::resolvePathSymlinks( StringRef FilePath)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SwiftLangSupport::getStatistics( StatisticsReceiver receiver)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"CloseClangModuleFiles::~CloseClangModuleFiles()",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftLangSupport.cpp,"SourceKit::disableExpensiveSILOptions( SILOptions & Opts)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::Implementation::TextReference::TextReference( const ValueDecl * D , unsigned Offset , unsigned Length)",2, 48, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::Implementation::TextReference::TextReference( const ModuleEntity Mod , unsigned Offset , unsigned Length)",2, 41, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::Implementation::TextDecl::TextDecl( const Decl * D , TextRange Range)",2, 32, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"getModuleByFullName( ASTContext & Ctx , StringRef ModuleName)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"getModuleByFullName( ASTContext & Ctx , Identifier ModuleName)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"AnnotatingPrinter::DeclUSR::DeclUSR( const Decl * D , StringRef USR)",1, 64, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"AnnotatingPrinter::AnnotatingPrinter( SourceTextInfo & Info , llvm :: raw_ostream & OS)",2, 40, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"AnnotatingPrinter::~AnnotatingPrinter()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"AnnotatingPrinter::printSynthesizedExtensionPre( const ExtensionDecl * ED , TypeOrExtensionDecl Target , Optional<BracketOptions> Bracket)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"AnnotatingPrinter::printSynthesizedExtensionPost( const ExtensionDecl * ED , TypeOrExtensionDecl Target , Optional<BracketOptions> Bracket)",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"AnnotatingPrinter::printDeclLoc( const Decl * D)",25, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"AnnotatingPrinter::printDeclNameOrSignatureEndLoc( const Decl * D)",15, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"AnnotatingPrinter::printTypeRef( Type T , const TypeDecl * TD , Identifier Name)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"AnnotatingPrinter::printModuleRef( ModuleEntity Mod , Identifier Name)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"DocSyntaxWalker::DocSyntaxWalker( SourceManager & SM , unsigned BufferID , EditorConsumer & Consumer)",3, 56, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"DocSyntaxWalker::walkToNodePre( SyntaxNode Node)",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"makeParserAST( CompilerInstance & CI , StringRef Text , CompilerInvocation Invocation)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"reportSyntacticAnnotations( CompilerInstance & CI , EditorConsumer & Consumer)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"reportDocumentStructure( CompilerInstance & CI , EditorConsumer & Consumer)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"reportSemanticAnnotations( const SourceTextInfo & IFaceInfo , EditorConsumer & Consumer)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"getModuleInterfaceInfo( ASTContext & Ctx , StringRef ModuleName , Optional<StringRef> Group , SwiftInterfaceGenContext :: Implementation & Impl , std :: string & ErrMsg , bool SynthesizedExtensions , Optional<StringRef> InterestedUSR)",59, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"getHeaderInterfaceInfo( ASTContext & Ctx , StringRef HeaderName , SourceTextInfo & Info , std :: string & ErrMsg)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::createForSwiftSource( StringRef DocumentName , StringRef SourceFileName , ASTUnitRef AstUnit , CompilerInvocation Invocation , std :: string & ErrMsg)",24, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::create( StringRef DocumentName , bool IsModule , StringRef ModuleOrHeaderName , Optional<StringRef> Group , CompilerInvocation Invocation , std :: string & ErrMsg , bool SynthesizedExtensions , Optional<StringRef> InterestedUSR)",63, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::createForTypeInterface( CompilerInvocation Invocation , StringRef TypeUSR , std :: string & ErrorMsg)",46, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::SwiftInterfaceGenContext()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::~SwiftInterfaceGenContext()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::getDocumentName() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::getModuleOrHeaderName() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::isModule() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::matches( StringRef ModuleName , const swift :: CompilerInvocation & Invok)",32, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::reportEditorInfo( EditorConsumer & Consumer) const",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::accessASTAsync( std :: function<void()> Fn)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::resolveEntityForOffset( unsigned Offset) const",37, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::findUSRRange( StringRef USR) const",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenContext::applyTo( swift :: CompilerInvocation & CompInvok) const",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenMap::get( StringRef Name) const",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenMap::set( StringRef Name , SwiftInterfaceGenContextRef IFaceGen)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenMap::remove( StringRef Name)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftInterfaceGenMap::find( StringRef ModuleName , const CompilerInvocation & Invok)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftLangSupport::editorOpenTypeInterface( EditorConsumer & Consumer , ArrayRef<const char*> Args , StringRef TypeUSR)",32, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftLangSupport::editorOpenInterface( EditorConsumer & Consumer , StringRef Name , StringRef ModuleName , Optional<StringRef> Group , ArrayRef<const char*> Args , bool SynthesizedExtensions , Optional<StringRef> InterestedUSR)",41, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"PrimaryFileInterfaceConsumer::PrimaryFileInterfaceConsumer( StringRef Name , StringRef SourceFileName , SwiftInterfaceGenMap & Contexts , std :: shared_ptr<EditorConsumer> Consumer , SwiftInvocationRef ASTInvok)",6, 48, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"PrimaryFileInterfaceConsumer::failed( StringRef Error)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"PrimaryFileInterfaceConsumer::handlePrimaryAST( ASTUnitRef AstUnit)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftLangSupport::editorOpenSwiftSourceInterface( StringRef Name , StringRef SourceName , ArrayRef<const char*> Args , std :: shared_ptr<EditorConsumer> Consumer)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftLangSupport::editorOpenHeaderInterface( EditorConsumer & Consumer , StringRef Name , StringRef HeaderName , ArrayRef<const char*> Args , bool UsingSwiftArgs , bool SynthesizedExtensions , StringRef swiftVersion)",53, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditorInterfaceGen.cpp,"SwiftLangSupport::findInterfaceDocument( StringRef ModuleName , ArrayRef<const char*> Args , std :: function<void(const InterfaceDocInfo&)> Receiver)",75, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"AnnotatedDeclarationPrinter::AnnotatedDeclarationPrinter( raw_ostream & OS)",2, 32, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"AnnotatedDeclarationPrinter::printTypeRef( Type T , const TypeDecl * TD , Identifier Name)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"getTagForDecl( const Decl * D , bool isRef)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"getTagForParameter( PrintStructureKind context)",25, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"getDeclNameTagForDecl( const Decl * D)",17, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"PrintContext::hasTag( unsigned tag) const",1, 71, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"PrintContext::PrintContext( const Decl * D)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"PrintContext::PrintContext( PrintStructureKind K)",2, 69, 6, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"PrintContext::PrintContext( TypeLoc unused)",1, 51, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"PrintContext::getDecl() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"PrintContext::getPrintStructureKind() const",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"PrintContext::is( PrintStructureKind kind) const",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"PrintContext::isType() const",1, 50, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::FullyAnnotatedDeclarationPrinter( raw_ostream & OS)",1, 80, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printDeclPre( const Decl * D , Optional<BracketOptions> Bracket)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printDeclPost( const Decl * D , Optional<BracketOptions> Bracket)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printDeclLoc( const Decl * D)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printDeclNameEndLoc( const Decl * D)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printTypePre( const TypeLoc & TL)",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printTypePost( const TypeLoc & TL)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printStructurePre( PrintStructureKind kind , const Decl * D)",17, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printStructurePost( PrintStructureKind kind , const Decl * D)",16, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printNamePre( PrintNameContext context)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printNamePost( PrintNameContext context)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::printTypeRef( Type T , const TypeDecl * TD , Identifier name)",8, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::openTag( StringRef tag)",1, 59, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::closeTag( StringRef tag)",1, 61, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::openTagWithUSRForDecl( StringRef tag , const ValueDecl * VD)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::getTypeTagForCurrentContext() const",31, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::getTagForPrintNameContext( PrintNameContext context)",27, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"FullyAnnotatedDeclarationPrinter::fixupTuple( PrintStructureKind & kind)",16, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"findBaseTypeForReplacingArchetype( const ValueDecl * VD , const Type Ty)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"printAnnotatedDeclaration( const ValueDecl * VD , const Type BaseTy , raw_ostream & OS)",21, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::printFullyAnnotatedDeclaration( const ValueDecl * VD , Type BaseTy , raw_ostream & OS)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::printFullyAnnotatedGenericReq( const swift :: GenericSignature * Sig , llvm :: raw_ostream & OS)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::printFullyAnnotatedSynthesizedDeclaration( const swift :: ValueDecl * VD , TypeOrExtensionDecl Target , llvm :: raw_ostream & OS)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"walkRelatedDecls( const ValueDecl * VD , const FnTy & Fn)",34, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"getSourceToken( unsigned Offset , ImmutableTextSnapshotRef Snap)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"mapOffsetToOlderSnapshot( unsigned Offset , ImmutableTextSnapshotRef NewSnap , ImmutableTextSnapshotRef OldSnap)",24, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"mapOffsetToNewerSnapshot( unsigned Offset , ImmutableTextSnapshotRef OldSnap , ImmutableTextSnapshotRef NewSnap)",20, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"tryRemappingLocToLatestSnapshot( SwiftLangSupport & Lang , std :: pair<unsigned,unsigned> Range , StringRef Filename , ArrayRef<ImmutableTextSnapshotRef> PreviousASTSnaps)",31, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"passCursorInfoForModule( ModuleEntity Mod , SwiftInterfaceGenMap & IFaceGenContexts , const CompilerInvocation & Invok , std :: function<void(const CursorInfoData&)> Receiver)",21, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"collectAvailableRenameInfo( const ValueDecl * VD , std :: vector<UIdent> & RefactoringIds , DelayedStringRetriever & RefactroingNameOS , DelayedStringRetriever & RefactoringReasonOS)",17, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"serializeRefactoringKinds( ArrayRef<RefactoringKind> AllKinds , std :: vector<UIdent> & RefactoringIds , DelayedStringRetriever & RefactroingNameOS , DelayedStringRetriever & RefactoringReasonOS)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"collectAvailableRefactoringsOtherThanRename( SourceFile * SF , ResolvedCursorInfo CursorInfo , std :: vector<UIdent> & RefactoringIds , DelayedStringRetriever & RefactroingNameOS , DelayedStringRetriever & RefactoringReasonOS)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"getParamParentNameOffset( const ValueDecl * VD , SourceLoc Cursor)",26, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"passCursorInfoForDecl( SourceFile * SF , const ValueDecl * VD , const ModuleDecl * MainModule , const Type ContainerTy , bool IsRef , bool RetrieveRefactoring , ResolvedCursorInfo TheTok , Optional<unsigned> OrigBufferID , SourceLoc CursorLoc , ArrayRef<RefactoringInfo> KownRefactoringInfoFromRange , SwiftLangSupport & Lang , const CompilerInvocation & Invok , ArrayRef<ImmutableTextSnapshotRef> PreviousASTSnaps , std :: function<void(const CursorInfoData&)> Receiver)",270, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"getClangDeclarationName( const clang :: NamedDecl * ND , NameTranslatingInfo & Info)",39, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"getSwiftDeclName( const ValueDecl * VD , NameTranslatingInfo & Info)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"passNameInfoForDecl( ResolvedCursorInfo CursorInfo , NameTranslatingInfo & Info , std :: function<void(const NameTranslatingInfo&)> Receiver)",77, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"CursorRangeInfoConsumer::getPreviousASTSnaps()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"CursorRangeInfoConsumer::CursorRangeInfoConsumer( StringRef InputFile , unsigned Offset , unsigned Length , SwiftLangSupport & Lang , SwiftInvocationRef ASTInvok , bool TryExistingAST , bool CancelOnSubsequentRequest)",6, 62, 6, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"CursorRangeInfoConsumer::canUseASTWithSnapshots( ArrayRef<ImmutableTextSnapshotRef> Snapshots)",52, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"resolveCursor( SwiftLangSupport & Lang , StringRef InputFile , unsigned Offset , unsigned Length , bool Actionables , SwiftInvocationRef Invok , bool TryExistingAST , bool CancelOnSubsequentRequest , std :: function<void(const CursorInfoData&)> Receiver)",190, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"resolveName( SwiftLangSupport & Lang , StringRef InputFile , unsigned Offset , SwiftInvocationRef Invok , bool TryExistingAST , NameTranslatingInfo & Input , std :: function<void(const NameTranslatingInfo&)> Receiver)",86, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"resolveRange( SwiftLangSupport & Lang , StringRef InputFile , unsigned Offset , unsigned Length , SwiftInvocationRef Invok , bool TryExistingAST , bool CancelOnSubsequentRequest , std :: function<void(const RangeInfo&)> Receiver)",87, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::getCursorInfo( StringRef InputFile , unsigned Offset , unsigned Length , bool Actionables , bool CancelOnSubsequentRequest , ArrayRef<const char*> Args , std :: function<void(const CursorInfoData&)> Receiver)",43, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::getRangeInfo( StringRef InputFile , unsigned Offset , unsigned Length , bool CancelOnSubsequentRequest , ArrayRef<const char*> Args , std :: function<void(const RangeInfo&)> Receiver)",24, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::getNameInfo( StringRef InputFile , unsigned Offset , NameTranslatingInfo & Input , ArrayRef<const char*> Args , std :: function<void(const NameTranslatingInfo&)> Receiver)",37, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"resolveCursorFromUSR( SwiftLangSupport & Lang , StringRef InputFile , StringRef USR , SwiftInvocationRef Invok , bool TryExistingAST , bool CancelOnSubsequentRequest , std :: function<void(const CursorInfoData&)> Receiver)",117, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::getCursorInfoFromUSR( StringRef filename , StringRef USR , bool CancelOnSubsequentRequest , ArrayRef<const char*> args , std :: function<void(const CursorInfoData&)> receiver)",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::findUSRRange( StringRef DocumentName , StringRef USR)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"RelatedIdScanner::RelatedIdScanner( SourceFile & SrcFile , unsigned BufferID , ValueDecl * D , llvm :: SmallVectorImpl<std::pair<unsigned,unsigned>> & Ranges)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"RelatedIdScanner::walkToDeclPre( Decl * D , CharSourceRange Range)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"RelatedIdScanner::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"RelatedIdScanner::passId( CharSourceRange Range)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::findRelatedIdentifiersInFile( StringRef InputFile , unsigned Offset , bool CancelOnSubsequentRequest , ArrayRef<const char*> Args , std :: function<void(const RelatedIdentsInfo&)> Receiver)",93, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"getIDERefactoringKind( SemanticRefactoringInfo Info)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp,"SwiftLangSupport::semanticRefactoring( StringRef Filename , SemanticRefactoringInfo Info , ArrayRef<const char*> Args , CategorizedEditsReceiver Receiver)",53, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"getSortedBufferIDs( const llvm :: DenseMap<unsigned,std::vector<DiagnosticEntryInfo>> & Map)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"EditorDiagConsumer::getAllDiagnostics( SmallVectorImpl<DiagnosticEntryInfo> & Result)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"EditorDiagConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",138, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocumentFileMap::getByUnresolvedName( StringRef FilePath)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocumentFileMap::findByPath( StringRef FilePath)",16, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocumentFileMap::getOrUpdate( StringRef FilePath , SwiftLangSupport & LangSupport , SwiftEditorDocumentRef & EditorDoc)",20, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocumentFileMap::remove( StringRef FilePath)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"mergeSplitRanges( unsigned Off1 , unsigned Len1 , unsigned Off2 , unsigned Len2 , std :: function<void(unsigned BeforeOff,unsigned BeforeLen,unsigned AfterOff,unsigned AfterLen)> applier)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxToken::createInvalid()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxToken::SwiftSyntaxToken( unsigned Offset , unsigned Length , SyntaxNodeKind Kind)",2, 52, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxToken::endOffset() const",1, 57, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxToken::isInvalid() const",1, 49, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxToken::operator ==( const SwiftSyntaxToken & Other) const",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxToken::operator !=( const SwiftSyntaxToken & Other) const",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorCharRange::SwiftEditorCharRange( unsigned Offset , unsigned EndOffset)",2, 44, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorCharRange::SwiftEditorCharRange( SwiftSyntaxToken Token)",2, 58, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorCharRange::length() const",1, 55, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorCharRange::isEmpty() const",1, 55, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorCharRange::intersects( const SwiftSyntaxToken & Token) const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorCharRange::extendToInclude( const SwiftEditorCharRange & Range)",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorCharRange::extendToInclude( unsigned OtherOffset)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"TokenMismatch::TokenMismatch( Iter CurrTok , Iter CurrEnd , Iter PrevTok , Iter PrevEnd)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"TokenMismatch::foundMismatch() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"TokenMismatch::mismatchStart() const",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"TokenMismatch::mismatchEnd() const",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"TokenMismatch::skipInvalid()",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"TokenMismatch::advance()",8, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxMap::SwiftSyntaxMap( unsigned Capacity = 0)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxMap::addToken( const SwiftSyntaxToken & Token)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxMap::mergeToken( const SwiftSyntaxToken & Token)",19, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxMap::adjustForReplacement( unsigned Offset , unsigned Len , unsigned NewLen)",44, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxMap::forEach( EditorConsumer & Consumer)",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSyntaxMap::forEachChanged( const SwiftSyntaxMap & Prev , llvm :: Optional<SwiftEditorCharRange> & Affected , EditorConsumer & Consumer) const",42, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"EditorConsumerSyntaxMapEntry::EditorConsumerSyntaxMapEntry( unsigned Offset , unsigned Length , UIdent Kind)",2, 52, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSemanticToken::SwiftSemanticToken( CodeCompletionDeclKind Kind , unsigned ByteOffset , unsigned Length , bool IsRef , bool IsSystem)",5, 43, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSemanticToken::getIsRef() const",1, 61, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSemanticToken::getIsSystem() const",1, 67, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftSemanticToken::getUIdentForKind() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::SwiftDocumentSemanticInfo( StringRef Filename , std :: weak_ptr<SwiftASTManager> ASTMgr , std :: shared_ptr<NotificationCenter> NotificationCtr)",4, 80, 8, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::getInvocation() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::setCompilerArgs( ArrayRef<const char*> Args)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::removeCachedAST()",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSyntaxInfo::SwiftDocumentSyntaxInfo( const CompilerInvocation & CompInv , ImmutableTextSnapshotRef Snapshot , std :: vector<std::string> & Args , StringRef FilePath)",29, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSyntaxInfo::parse()",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSyntaxInfo::getSourceFile()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSyntaxInfo::getBufferID()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSyntaxInfo::getLangOptions()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSyntaxInfo::getSourceManager()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSyntaxInfo::hasUpToDateAST()",1, 51, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSyntaxInfo::getDiagnostics()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::getASTGeneration() const",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::readSemanticInfo( ImmutableTextSnapshotRef NewSnapshot , std :: vector<SwiftSemanticToken> & Tokens , Optional<std::vector<DiagnosticEntryInfo>> & Diags , ArrayRef<DiagnosticEntryInfo> ParserDiags)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::takeSemanticTokens( ImmutableTextSnapshotRef NewSnapshot)",44, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::getSemanticDiagnostics( ImmutableTextSnapshotRef NewSnapshot , ArrayRef<DiagnosticEntryInfo> ParserDiags)",67, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::updateSemanticInfo( std :: vector<SwiftSemanticToken> Toks , std :: vector<DiagnosticEntryInfo> Diags , ImmutableTextSnapshotRef Snapshot , uint64_t ASTGeneration)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SemanticAnnotator::SemanticAnnotator( SourceManager & SM , unsigned BufferID)",2, 36, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SemanticAnnotator::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",16, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SemanticAnnotator::visitSubscriptReference( ValueDecl * D , CharSourceRange Range , Optional<AccessKind> AccKind , bool IsOpenBracket)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SemanticAnnotator::annotate( const Decl * D , bool IsRef , CharSourceRange Range)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"AnnotAndDiagASTConsumer::AnnotAndDiagASTConsumer( EditableTextBufferRef EditableBuffer , RefPtr<SwiftDocumentSemanticInfo> SemaInfoRef)",4, 46, 6, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"AnnotAndDiagASTConsumer::failed( StringRef Error)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"AnnotAndDiagASTConsumer::handlePrimaryAST( ASTUnitRef AstUnit)",56, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentSemanticInfo::processLatestSnapshotAsync( EditableTextBufferRef EditableBuffer)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::Implementation::getSyntaxInfo()",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::Implementation::Implementation( StringRef FilePath , SwiftLangSupport & LangSupport , CodeFormatOptions options)",8, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"getAccessLevelUID( AccessLevel Access)",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentStructureWalker::SwiftDocumentStructureWalker( SourceManager & SrcManager , unsigned BufferID , EditorConsumer & Consumer)",4, 73, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentStructureWalker::walkToSubStructurePre( SyntaxStructureNode Node)",132, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentStructureWalker::getObjCRuntimeName( const Decl * D , SmallString<64> & Buf)",26, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentStructureWalker::getObjCSelectorName( const Decl * D , SmallString<64> & Buf)",8, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentStructureWalker::walkToSubStructurePost( SyntaxStructureNode Node)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentStructureWalker::walkToNodePre( SyntaxNode Node)",18, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftDocumentStructureWalker::walkToNodePost( SyntaxNode Node)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorSyntaxWalker::SwiftEditorSyntaxWalker( SwiftSyntaxMap & SyntaxMap , SourceManager & SrcManager , EditorConsumer & Consumer , unsigned BufferID)",5, 61, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorSyntaxWalker::walkToNodePre( SyntaxNode Node)",18, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorSyntaxWalker::walkToNodePost( SyntaxNode Node)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorSyntaxWalker::walkToSubStructurePre( SyntaxStructureNode Node)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorSyntaxWalker::walkToSubStructurePost( SyntaxStructureNode Node)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::Param::Param( CharSourceRange NameRange , CharSourceRange TypeRange)",2, 54, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::PlaceholderFinder::PlaceholderFinder( SourceLoc PlaceholderLoc , EditorPlaceholderExpr * & Found)",4, 6, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::PlaceholderFinder::walkToExprPre( Expr * E)",7, 6, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::ClosureTypeWalker::ClosureTypeWalker( SourceManager & SM , ClosureInfo & Info)",2, 21, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::ClosureTypeWalker::walkToTypeReprPre( TypeRepr * T)",23, 6, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::ClosureTypeWalker::walkToTypeReprPost( TypeRepr * T)",4, 6, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::containClosure( Expr * E)",17, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::scanClosureType( SourceFile & SF , SourceLoc PlaceholderLoc)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::enclosingCallExprArg( SourceFile & SF , SourceLoc SL)",80, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::shouldUseTrailingClosureInTuple( TupleExpr * TE , SourceLoc PlaceHolderStartLoc)",15, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::PlaceholderExpansionScanner( SourceManager & SM)",1, 71, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"PlaceholderExpansionScanner::scan( SourceFile & SF , unsigned BufID , unsigned Offset , unsigned Length , std :: function<void(Expr*Args,bool UseTrailingClosure,ArrayRef<Param>,CharSourceRange)> Callback , std :: function<bool(EditorPlaceholderExpr*)> NonClosureCallback)",34, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::SwiftEditorDocument( StringRef FilePath , SwiftLangSupport & LangSupport , CodeFormatOptions Options)",3, 65, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::~SwiftEditorDocument()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::initializeText( llvm :: MemoryBuffer * Buf , ArrayRef<const char*> Args , bool ProvideSemanticInfo)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"updateSemaInfo( RefPtr<SwiftDocumentSemanticInfo> SemanticInfo , EditableTextBufferRef EditableBuffer)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::replaceText( unsigned Offset , unsigned Length , llvm :: MemoryBuffer * Buf , bool ProvideSemanticInfo , std :: string & error)",51, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::updateSemaInfo()",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::parse( ImmutableTextSnapshotRef Snapshot , SwiftLangSupport & Lang , bool BuildSyntaxTree , SyntaxParsingCache * SyntaxCache)",36, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::readSyntaxInfo( EditorConsumer & Consumer)",52, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::readSemanticInfo( ImmutableTextSnapshotRef Snapshot , EditorConsumer & Consumer)",31, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::removeCachedAST()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::applyFormatOptions( OptionsDictionary & FmtOptions)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::getFormatOptions()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::getSyntaxTree() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::getFilePath() const",1, 79, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::hasUpToDateAST() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::formatText( unsigned Line , unsigned Length , EditorConsumer & Consumer)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"isReturningVoid( SourceManager & SM , CharSourceRange Range)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::expandPlaceholder( unsigned Offset , unsigned Length , EditorConsumer & Consumer)",124, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::getLatestSnapshot() const",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftEditorDocument::reportDocumentStructure( SourceFile & SrcFile , EditorConsumer & Consumer)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftLangSupport::editorOpen( StringRef Name , llvm :: MemoryBuffer * Buf , EditorConsumer & Consumer , ArrayRef<const char*> Args)",39, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftLangSupport::editorClose( StringRef Name , bool RemoveCache)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"verifyIncrementalParse( SwiftEditorDocumentRef EditorDoc , unsigned EditOffset , unsigned EditLength , StringRef PreEditText , StringRef ReplaceText)",86, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftLangSupport::editorReplaceText( StringRef Name , llvm :: MemoryBuffer * Buf , unsigned Offset , unsigned Length , EditorConsumer & Consumer)",86, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftLangSupport::editorApplyFormatOptions( StringRef Name , OptionsDictionary & FmtOptions)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftLangSupport::editorFormatText( StringRef Name , unsigned Line , unsigned Length , EditorConsumer & Consumer)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftLangSupport::editorExtractTextFromComment( StringRef Source , EditorConsumer & Consumer)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftLangSupport::editorConvertMarkupToXML( StringRef Source , EditorConsumer & Consumer)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftEditor.cpp,"SwiftLangSupport::editorExpandPlaceholder( StringRef Name , unsigned Offset , unsigned Length , EditorConsumer & Consumer)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"getModuleByFullName( ASTContext & Ctx , StringRef ModuleName)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"getModuleByFullName( ASTContext & Ctx , Identifier ModuleName)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"TextEntity::TextEntity( const Decl * D , TypeOrExtensionDecl SynthesizeTarget , const Decl * DefaultImplementationOf , unsigned StartOffset , bool IsSynthesizedExtension)",6, 58, 8, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"TextEntity::TextEntity( const Decl * D , TypeOrExtensionDecl SynthesizeTarget , const Decl * DefaultImplementationOf , TextRange TR , unsigned LocOffset , bool IsSynthesizedExtension)",5, 80, 8, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"TextEntity::TextEntity( const Decl * D , TypeOrExtensionDecl SynthesizeTarget , const Decl * DefaultImplementationOf , StringRef Arg , TextRange TR , unsigned LocOffset , bool IsSynthesizedExtension)",7, 58, 8, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"TextReference::TextReference( const ValueDecl * D , unsigned Offset , unsigned Length , const Type Ty = Type())",2, 83, 16, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::initDefaultMapToUse( const Decl * D)",15, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::deinitDefaultMapToUse( const Decl * D)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::getDefaultImplementation( const Decl * D)",10, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::~AnnotatingPrinter()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::shouldContinuePre( const Decl * D , Optional<BracketOptions> Bracket)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::shouldContinuePost( const Decl * D , Optional<BracketOptions> Bracket)",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::printSynthesizedExtensionPre( const ExtensionDecl * ED , TypeOrExtensionDecl Target , Optional<BracketOptions> Bracket)",10, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::printSynthesizedExtensionPost( const ExtensionDecl * ED , TypeOrExtensionDecl Target , Optional<BracketOptions> Bracket)",13, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::printDeclPre( const Decl * D , Optional<BracketOptions> Bracket)",15, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::printDeclLoc( const Decl * D)",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::printDeclPost( const Decl * D , Optional<BracketOptions> Bracket)",19, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"AnnotatingPrinter::printTypeRef( Type T , const TypeDecl * TD , Identifier Name)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"initDocGenericParams( const Decl * D , DocEntityInfo & Info)",39, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"initDocEntityInfo( const Decl * D , TypeOrExtensionDecl SynthesizedTarget , const Decl * DefaultImplementationOf , bool IsRef , bool IsSynthesizedExtension , DocEntityInfo & Info , StringRef Arg = StringRef())",140, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"initDocEntityInfo( const TextEntity & Entity , DocEntityInfo & Info)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"getTypeDeclFromType( Type Ty)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"passInherits( const ValueDecl * D , DocInfoConsumer & Consumer)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"passConforms( const ValueDecl * D , DocInfoConsumer & Consumer)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"passInherits( ArrayRef<TypeLoc> InheritedTypes , DocInfoConsumer & Consumer)",24, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"passConforms( ArrayRef<ValueDecl*> Dcls , DocInfoConsumer & Consumer)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"passExtends( const ValueDecl * D , DocInfoConsumer & Consumer)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"passInheritsAndConformancesForValueDecl( const ValueDecl * VD , DocInfoConsumer & Consumer)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"reportRelated( ASTContext & Ctx , const Decl * D , TypeOrExtensionDecl SynthesizedTarget , DocInfoConsumer & Consumer)",42, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"getDeclAttributes( const Decl * D , std :: vector<const DeclAttribute*> & Scratch)",17, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"reportAttributes( ASTContext & Ctx , const Decl * D , DocInfoConsumer & Consumer)",55, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"reportDocEntities( ASTContext & Ctx , ArrayRef<TextEntity> Entities , DocInfoConsumer & Consumer)",17, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"DocSyntaxWalker::DocSyntaxWalker( SourceManager & SM , unsigned BufferID , ArrayRef<TextReference> References , DocInfoConsumer & Consumer)",4, 80, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"DocSyntaxWalker::walkToNodePre( SyntaxNode Node)",48, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"DocSyntaxWalker::finished()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"DocSyntaxWalker::walkToSubStructurePre( SyntaxStructureNode Node)",32, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"DocSyntaxWalker::reportRefsUntil( unsigned Offset)",13, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"makeParserAST( CompilerInstance & CI , StringRef Text , CompilerInvocation Invocation)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"collectFuncEntities( std :: vector<TextEntity> & Ents , std :: vector<TextEntity*> & FuncEntities)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"addParameters( ArrayRef<Identifier> & ArgNames , const ParameterList * paramList , TextEntity & Ent , SourceManager & SM , unsigned BufferID)",30, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"addParameters( const AbstractFunctionDecl * FD , TextEntity & Ent , SourceManager & SM , unsigned BufferID)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"addParameters( const SubscriptDecl * D , TextEntity & Ent , SourceManager & SM , unsigned BufferID)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"FuncWalker::FuncWalker( SourceManager & SM , unsigned BufferID , llvm :: MutableArrayRef<TextEntity*> FuncEnts)",3, 56, 5, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"FuncWalker::walkToDeclPre( Decl * D)",30, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"addParameterEntities( CompilerInstance & CI , SourceTextInfo & IFaceInfo)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"reportSourceAnnotations( const SourceTextInfo & IFaceInfo , CompilerInstance & CI , DocInfoConsumer & Consumer)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"getModuleInterfaceInfo( ASTContext & Ctx , StringRef ModuleName , SourceTextInfo & Info)",26, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"reportModuleDocInfo( CompilerInvocation Invocation , StringRef ModuleName , DocInfoConsumer & Consumer)",29, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SourceDocASTWalker::SourceDocASTWalker( SourceManager & SM , unsigned BufferID)",2, 36, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SourceDocASTWalker::~SourceDocASTWalker()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SourceDocASTWalker::walkToDeclPre( Decl * D , CharSourceRange Range)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SourceDocASTWalker::walkToDeclPost( Decl * D)",12, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SourceDocASTWalker::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type Ty , ReferenceMetaData Data)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SourceDocASTWalker::visitSubscriptReference( ValueDecl * D , CharSourceRange Range , Optional<AccessKind> AccKind , bool IsOpenBracket)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SourceDocASTWalker::isLocal( Decl * D) const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SourceDocASTWalker::getOffset( SourceLoc Loc) const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SourceDocASTWalker::getTextRange( SourceRange R) const",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"getSourceTextInfo( CompilerInstance & CI , SourceTextInfo & Info)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"reportSourceDocInfo( CompilerInvocation Invocation , llvm :: MemoryBuffer * InputBuf , DocInfoConsumer & Consumer)",36, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRefactoringEditConsumer::Implementation::Implementation( CategorizedEditsReceiver Receiver)",2, 70, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRefactoringEditConsumer::Implementation::~Implementation()",15, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRefactoringEditConsumer::Implementation::accept( SourceManager & SM , RegionType RegionType , ArrayRef<Replacement> Replacements)",26, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRefactoringEditConsumer::RequestRefactoringEditConsumer( CategorizedEditsReceiver Receiver)",3, 41, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRefactoringEditConsumer::~RequestRefactoringEditConsumer()",2, 53, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRefactoringEditConsumer::accept( SourceManager & SM , RegionType RegionType , ArrayRef<Replacement> Replacements)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRefactoringEditConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRenameRangeConsumer::Implementation::Implementation( CategorizedRenameRangesReceiver Receiver)",2, 63, 6, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRenameRangeConsumer::Implementation::~Implementation()",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRenameRangeConsumer::Implementation::accept( SourceManager & SM , RegionType RegionType , ArrayRef<ide::RenameRangeDetail> Ranges)",17, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRenameRangeConsumer::RequestRenameRangeConsumer( CategorizedRenameRangesReceiver Receiver)",3, 45, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRenameRangeConsumer::~RequestRenameRangeConsumer()",1, 76, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRenameRangeConsumer::accept( SourceManager & SM , RegionType RegionType , ArrayRef<ide::RenameRangeDetail> Ranges)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"RequestRenameRangeConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"getNameUsage( RenameType Type)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SwiftLangSupport::syntacticRename( llvm :: MemoryBuffer * InputBuf , ArrayRef<RenameLocations> RenameLocations , ArrayRef<const char*> Args , CategorizedEditsReceiver Receiver)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SwiftLangSupport::findRenameRanges( llvm :: MemoryBuffer * InputBuf , ArrayRef<RenameLocations> RenameLocations , ArrayRef<const char*> Args , CategorizedRenameRangesReceiver Receiver)",17, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SwiftLangSupport::findLocalRenameRanges( StringRef Filename , unsigned Line , unsigned Column , unsigned Length , ArrayRef<const char*> Args , CategorizedRenameRangesReceiver Receiver)",40, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SwiftLangSupport::getSyntacticSourceFile( llvm :: MemoryBuffer * InputBuf , ArrayRef<const char*> Args , CompilerInstance & ParseCI , std :: string & Error)",35, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"getSyntacticRenameLocs( ArrayRef<RenameLocations> RenameLocations)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SwiftLangSupport::getDocInfo( llvm :: MemoryBuffer * InputBuf , StringRef ModuleName , ArrayRef<const char*> Args , DocInfoConsumer & Consumer)",32, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftDocSupport.cpp,"SwiftLangSupport::findModuleGroups( StringRef ModuleName , ArrayRef<const char*> Args , std :: function<void(ArrayRef<StringRef>,StringRef Error)> Receiver)",45, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"StreamDiagConsumer::StreamDiagConsumer( llvm :: raw_ostream & OS)",1, 56, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"StreamDiagConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",14, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTConsumer::failed( StringRef Error)",1, 51, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"InvocationOptions::InvocationOptions( ArrayRef<const char*> CArgs , StringRef PrimaryFile , CompilerInvocation Invok)",12, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"InvocationOptions::_convertArgs( ArrayRef<const char*> CArgs)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftInvocation::Implementation::Implementation( InvocationOptions opts)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftInvocation::~SwiftInvocation()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftInvocation::applyTo( swift :: CompilerInvocation & CompInvok) const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftInvocation::raw( std :: vector<std::string> & Args , std :: string & PrimaryFile) const",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"InvocationOptions::applyTo( CompilerInvocation & CompInvok) const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"InvocationOptions::applyToSubstitutingInputs( CompilerInvocation & CompInvok , FrontendInputsAndOutputs && inputsAndOutputs) const",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"InvocationOptions::raw( std :: vector<std::string> & Args , std :: string & PrimaryFile) const",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"InvocationOptions::profile( llvm :: FoldingSetNodeID & ID) const",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::Implementation::Implementation( uint64_t Generation , std :: shared_ptr<SwiftStatistics> Stats)",2, 50, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::Implementation::consumeAsync( SwiftASTConsumerRef ConsumerRef , ASTUnitRef ASTRef)",15, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::ASTUnit( uint64_t Generation , std :: shared_ptr<SwiftStatistics> Stats)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::~ASTUnit()",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::getCompilerInstance() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::getGeneration() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::getSnapshots() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::getPrimarySourceFile() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::getEditorDiagConsumer() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SourceKit::ASTUnit::performAsync( std :: function<void()> Fn)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"FileContent::FileContent( ImmutableTextSnapshotRef Snapshot , std :: string Filename , std :: unique_ptr<llvm::MemoryBuffer> Buffer , bool IsPrimary , BufferStamp Stamp)",5, 73, 8, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"FileContent::operator InputFile() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::ASTProducer( SwiftInvocationRef InvokRef)",2, 39, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::getExistingAST()",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::getMemoryCost() const",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"swift::sys::CacheValueCostInfo<ASTProducer>::getCost( const ASTProducer & Unit)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"swift::sys::CacheKeyHashInfo<ASTKey>::getHashValue( const ASTKey & Key)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"swift::sys::CacheKeyHashInfo<ASTKey>::isEqual( void * LHS , void * RHS)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::Implementation::Implementation( std :: shared_ptr<SwiftEditorDocumentFileMap> EditorDocs , std :: shared_ptr<SwiftStatistics> Stats , StringRef RuntimeResourcePath)",5, 52, 8, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::SwiftASTManager( std :: shared_ptr<SwiftEditorDocumentFileMap> EditorDocs , std :: shared_ptr<SwiftStatistics> Stats , StringRef RuntimeResourcePath)",4, 75, 4, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::~SwiftASTManager()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::getMemoryBuffer( StringRef Filename , std :: string & Error)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"convertFileContentsToInputs( const SmallVectorImpl<FileContent> & contents)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"resolveSymbolicLinksInInputs( FrontendInputsAndOutputs & inputsAndOutputs , StringRef UnresolvedPrimaryFile , std :: string & Error)",32, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::initCompilerInvocation( CompilerInvocation & Invocation , ArrayRef<const char*> OrigArgs , DiagnosticEngine & Diags , StringRef UnresolvedPrimaryFile , std :: string & Error)",62, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::initCompilerInvocation( CompilerInvocation & CompInvok , ArrayRef<const char*> OrigArgs , StringRef PrimaryFile , std :: string & Error)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::initCompilerInvocationNoInputs( swift :: CompilerInvocation & Invocation , ArrayRef<const char*> OrigArgs , swift :: DiagnosticEngine & Diags , std :: string & Error , bool AllowInputs)",20, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::getInvocation( ArrayRef<const char*> OrigArgs , StringRef PrimaryFile , std :: string & Error)",30, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::processASTAsync( SwiftInvocationRef InvokRef , SwiftASTConsumerRef ASTConsumer , const void * OncePerASTToken , ArrayRef<ImmutableTextSnapshotRef> Snapshots)",36, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::removeCachedAST( SwiftInvocationRef Invok)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::Implementation::getASTProducer( SwiftInvocationRef InvokRef)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"getFileContentFromSnap( ImmutableTextSnapshotRef Snap , bool IsPrimary , StringRef FilePath)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::Implementation::getFileContent( StringRef UnresolvedPath , bool IsPrimary , std :: string & Error)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::Implementation::getBufferStamp( StringRef FilePath)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"SwiftASTManager::Implementation::getMemoryBuffer( StringRef Filename , std :: string & Error)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::getASTUnitAsync( std :: shared_ptr<SwiftASTManager> Mgr , ArrayRef<ImmutableTextSnapshotRef> Snaps , std :: function<void(ASTUnitRef Unit,StringRef Error)> Receiver)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::getASTUnitImpl( SwiftASTManager :: Implementation & MgrImpl , ArrayRef<ImmutableTextSnapshotRef> Snapshots , std :: string & Error)",36, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::enqueueConsumer( SwiftASTConsumerRef consumer , ArrayRef<ImmutableTextSnapshotRef> snapshots , const void * oncePerASTToken)",16, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::takeConsumers( ConsumerPredicate predicate)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::shouldRebuild( SwiftASTManager :: Implementation & MgrImpl , ArrayRef<ImmutableTextSnapshotRef> Snapshots)",34, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"collectModuleDependencies( ModuleDecl * TopMod , llvm :: SmallPtrSetImpl<ModuleDecl*> & Visited , SmallVectorImpl<std::string> & Filenames)",48, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::createASTUnit( SwiftASTManager :: Implementation & MgrImpl , ArrayRef<ImmutableTextSnapshotRef> Snapshots , std :: string & Error)",95, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp,"ASTProducer::findSnapshotAndOpenFiles( SwiftASTManager :: Implementation & MgrImpl , ArrayRef<ImmutableTextSnapshotRef> Snapshots , SmallVectorImpl<FileContent> & Contents , std :: string & Error) const",32, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftToSourceKitCompletionAdapter::handleResult( SourceKit :: CodeCompletionConsumer & consumer , CodeCompletionResult * result)",25, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftCodeCompletionConsumer::SwiftCodeCompletionConsumer( HandlerFunc handleResultsImpl)",2, 48, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftCodeCompletionConsumer::setContext( swift :: ASTContext * context , swift :: CompilerInvocation * invocation , swift :: ide :: CodeCompletionContext * completionContext)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftCodeCompletionConsumer::clearContext()",1, 64, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftCodeCompletionConsumer::handleResults( MutableArrayRef<CodeCompletionResult*> Results)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"swiftCodeCompleteImpl( SwiftLangSupport & Lang , llvm :: MemoryBuffer * UnresolvedInputFile , unsigned Offset , SwiftCodeCompletionConsumer & SwiftConsumer , ArrayRef<const char*> Args , std :: string & Error)",92, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftLangSupport::codeComplete( llvm :: MemoryBuffer * UnresolvedInputFile , unsigned Offset , SourceKit :: CodeCompletionConsumer & SKConsumer , ArrayRef<const char*> Args)",39, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"getResultStructure( CodeCompletion :: SwiftResult * result , bool leadingPunctuation , CodeCompletionInfo :: DescriptionStructure & structure , std :: vector<CodeCompletionInfo::ParameterStructure> & parameters)",131, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"getUIDForCodeCompletionLiteralKind( CodeCompletionLiteralKind kind)",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftToSourceKitCompletionAdapter::handleResult( SourceKit :: CodeCompletionConsumer & Consumer , Completion * Result , bool leadingPunctuation , bool legacyLiteralToKeyword)",133, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"getCodeCompletionLiteralKindForUID( UIdent uid)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"getCodeCompletionKeywordKindForUID( UIdent uid)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"constructTextForCallParam( ArrayRef<CodeCompletionString::Chunk> ParamGroup , raw_ostream & OS)",50, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftToSourceKitCompletionAdapter::getResultSourceText( const CodeCompletionString * CCStr , raw_ostream & OS)",24, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftToSourceKitCompletionAdapter::getResultTypeName( const CodeCompletionString * CCStr , raw_ostream & OS)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftToSourceKitCompletionAdapter::getResultAssociatedUSRs( ArrayRef<StringRef> AssocUSRs , raw_ostream & OS)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCache::setSortedCompletions( std :: vector<Completion*> && completions)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCache::getSortedCompletions()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCache::getBuffer()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCache::getCompilerArgs()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCache::getCompletionKind()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCache::getCompletionHasExpectedTypes()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCache::getCompletionMayUseImplicitMemberExpr()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCache::getFilterRules()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCacheMap::getBufferID( StringRef name) const",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCacheMap::get( StringRef name , unsigned offset) const",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCacheMap::set( StringRef name , unsigned offset , CodeCompletion :: SessionCacheRef s)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"CodeCompletion::SessionCacheMap::remove( StringRef name , unsigned offset)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftGroupedCodeCompletionConsumer::SwiftGroupedCodeCompletionConsumer( GroupedCodeCompletionConsumer & consumer)",2, 30, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftGroupedCodeCompletionConsumer::handleResult( Completion * result)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftGroupedCodeCompletionConsumer::startGroup( StringRef name)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftGroupedCodeCompletionConsumer::endGroup()",1, 52, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"translateCodeCompletionOptions( OptionsDictionary & from , CodeCompletion :: Options & to , StringRef & filterText , unsigned & resultOffset , unsigned & maxResults)",49, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"canonicalizeFilterName( const char * origName , SmallVectorImpl<char> & Result)",28, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"translateFilterRules( ArrayRef<FilterRule> rawFilterRules , CodeCompletion :: FilterRules & filterRules)",50, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"checkInnerResult( CodeCompletionResult * result , bool & hasDot , bool & hasQDot , bool & hasInit)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"filterInnerResults( ArrayRef<Result*> results , bool includeInner , bool includeInnerOperators , bool & hasDot , bool & hasQDot , bool & hasInit , const CodeCompletion :: FilterRules & rules)",33, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"transformAndForwardResults( GroupedCodeCompletionConsumer & consumer , SwiftLangSupport & lang , CodeCompletion :: SessionCacheRef session , const NameToPopularityMap * nameToPopularity , CodeCompletion :: Options options , unsigned offset , StringRef filterText , unsigned resultOffset , unsigned maxResults)",159, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftLangSupport::codeCompleteOpen( StringRef name , llvm :: MemoryBuffer * inputBuf , unsigned offset , OptionsDictionary * options , ArrayRef<FilterRule> rawFilterRules , GroupedCodeCompletionConsumer & consumer , ArrayRef<const char*> args)",91, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftLangSupport::codeCompleteClose( StringRef name , unsigned offset , GroupedCodeCompletionConsumer & consumer)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftLangSupport::codeCompleteUpdate( StringRef name , unsigned offset , OptionsDictionary * options , GroupedCodeCompletionConsumer & consumer)",33, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftCompletionCache::getCache()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftCompletionCache::~SwiftCompletionCache()",1, 49, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftLangSupport::codeCompleteCacheOnDisk( StringRef path)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftLangSupport::codeCompleteSetPopularAPI( ArrayRef<const char*> popularAPI , ArrayRef<const char*> unpopularAPI)",20, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftCompletion.cpp,"SwiftLangSupport::codeCompleteSetCustom( ArrayRef<CustomCompletionInfo> completions)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"Item::getKind() const",1, 67, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"Item::Item( ItemKind k = ItemKind :: None)",2, 65, 6, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"Item::~Item()",1, 21, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"Result::Result( Completion * result = nullptr)",2, 49, 6, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"Result::classof( const Item * item)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"ImportDepth::lookup( StringRef module)",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletion::Group::Group()",1, 37, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletion::Group::classof( const Item * item)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"SourceKit::CodeCompletion::extendCompletions( ArrayRef<SwiftResult*> swiftResults , CompletionSink & sink , SwiftCompletionInfo & info , const NameToPopularityMap * nameToPopularity , const Options & options , Completion * prefix , Optional<SemanticContextKind> overrideContext , Optional<SemanticContextKind> overrideOperatorContext)",60, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"SourceKit::CodeCompletion::addCustomCompletions( CompletionSink & sink , std :: vector<Completion*> & completions , ArrayRef<CustomCompletionInfo> customCompletions , CompletionKind completionKind)",60, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::Impl::groupOverloads()",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::Impl::groupStems()",19, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::Impl::takeView()",10, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::CodeCompletionOrganizer( const Options & options , CompletionKind kind , bool hasExpectedTypes)",4, 67, 8, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::~CodeCompletionOrganizer()",1, 70, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::preSortCompletions( llvm :: MutableArrayRef<Completion*> completions)",16, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::addCompletionsWithFilter( ArrayRef<Completion*> completions , StringRef filterText , const FilterRules & rules , Completion * & exactMatch)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::groupAndSort( const Options & options)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::takeResultsView()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"ImportDepth::ImportDepth( ASTContext & context , CompilerInvocation & invocation)",59, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"copyString( llvm :: BumpPtrAllocator & allocator , StringRef str)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"make_group( StringRef name)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"make_result( Completion * result)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::Impl::Impl( CompletionKind kind , bool hasExpectedTypes)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"matchesExpectedStyle( Completion * completion , NameStyle style)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"isHighPriorityKeyword( CodeCompletionKeywordKind kind)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"FilterRules::hideFilterName( StringRef name) const",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"FilterRules::hideCompletion( Completion * completion) const",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"FilterRules::hideCompletion( SwiftResult * completion , StringRef filterName , StringRef description , void * customKind) const",55, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::Impl::addCompletionsWithFilter( ArrayRef<Completion*> completions , StringRef filterText , Options options , const FilterRules & rules , Completion * & exactMatch)",121, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"getSemanticContextScore( bool useImportDepth , Completion * completion)",30, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"combinedScore( const Options & options , double matchScore , Completion * completion)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"compareResultName( Item & a , Item & b)",8, 3, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"getResultBucket( Item & item , bool hasExpectedTypes , bool skipMetaGroups = false)",45, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"compareHighPriorityKeywords( Item & a_ , Item & b_)",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"compareLiterals( Item & a_ , Item & b_)",32, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"compareOperators( Item & a_ , Item & b_)",72, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"isTopNonLiteralResult( Item & item , ResultBucket literalBucket)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"sortTopN( const Options & options , Group * group , bool hasExpectedTypes)",56, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"sortRecursive( const Options & options , Group * group , bool hasExpectedTypes)",79, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::Impl::sort( Options options)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionOrganizer::Impl::groupStemsRecursive( Group * group , bool recurseIntoNewGroups , StringRef(getStem)(StringRef))",67, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"walkRecursive( CodeCompletionView :: Walker & walker , const Item * item)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionView::walk( CodeCompletionView :: Walker & walker) const",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CodeCompletionView::~CodeCompletionView()",1, 64, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"LimitedResultView::getNextOffset() const",1, 68, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"LimitedResultView::walk( CodeCompletionView :: Walker & walker) const",27, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CompletionBuilder::getFilterName( CodeCompletionString * str , raw_ostream & OS)",54, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CompletionBuilder::getDescription( SwiftResult * result , raw_ostream & OS , bool leadingPunctuation)",30, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CompletionBuilder::CompletionBuilder( CompletionSink & sink , SwiftResult & base)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CompletionBuilder::setPrefix( CodeCompletionString * prefix)",20, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"CompletionBuilder::finish()",41, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/CodeCompletionOrganizer.cpp,"NameStyle::NameStyle( StringRef name)",58, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"getUIDForDependencyKind( bool isClangModule)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::SKIndexDataConsumer( IndexingConsumer & C)",1, 56, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::failed( StringRef error)",1, 64, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::warning( StringRef warning)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::enableWarnings()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::recordHash( StringRef hash , bool isKnown)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::startDependency( StringRef name , StringRef path , bool isClangModule , bool isSystem , StringRef hash)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::finishDependency( bool isClangModule)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::startSourceEntity( const IndexSymbol & symbol)",33, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::finishSourceEntity( SymbolInfo symInfo , SymbolRoleSet roles)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::withEntityInfo( const IndexSymbol & symbol , F func)",22, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SKIndexDataConsumer::withEntityInfo( const IndexRelation & relation , F func)",18, 4, 2, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"indexModule( llvm :: MemoryBuffer * Input , StringRef ModuleName , StringRef Hash , IndexingConsumer & IdxConsumer , CompilerInstance & CI , ArrayRef<const char*> Args)",42, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"initTraceInfoImpl( trace :: SwiftInvocation & SwiftArgs , StringRef InputFile , ArrayRef<Str> Args)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"trace::initTraceInfo( trace :: SwiftInvocation & SwiftArgs , StringRef InputFile , ArrayRef<const char*> Args)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"trace::initTraceInfo( trace :: SwiftInvocation & SwiftArgs , StringRef InputFile , ArrayRef<std::string> Args)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/lib/SwiftLang/SwiftIndexing.cpp,"SwiftLangSupport::indexSource( StringRef InputFile , IndexingConsumer & IdxConsumer , ArrayRef<const char*> OrigArgs , StringRef Hash)",85, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"parseOptions( ArrayRef<const char*> args , TestOptions & options , std :: string & error)",151, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"main( int argc , const char ** argv)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"notification_receiver( sourcekitd_response_t resp)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"skt_main( int argc , const char ** argv)",77, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"removeCodeCompletionTokens( StringRef Input , StringRef TokenName , SmallVectorImpl<std::string> & prefixes , unsigned * CompletionOffset)",45, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"ResponsePrinter::ResponsePrinter( llvm :: raw_ostream & OS , unsigned indentWidth , unsigned startingIndent , bool structure)",4, 39, 6, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"ResponsePrinter::printResponse( sourcekitd_response_t resp)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"ResponsePrinter::printArray( sourcekitd_variant_t array)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"ResponsePrinter::printGroupOrCompletion( sourcekitd_variant_t value)",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"ResponsePrinter::printCompletion( sourcekitd_variant_t completion)",87, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"ResponsePrinter::printGroup( sourcekitd_variant_t dict)",17, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"ResponsePrinter::dictGetString( sourcekitd_variant_t dict , sourcekitd_uid_t key)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"ResponsePrinter::indent()",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"printResponse( sourcekitd_response_t resp , bool raw , bool structure , unsigned indentation)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"getBufferForFilename( StringRef name)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"createBaseRequest( sourcekitd_uid_t requestUID , const char * name , unsigned offset)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"sendRequestSync( sourcekitd_object_t request , HandlerFunc func)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"codeCompleteRequest( sourcekitd_uid_t requestUID , const char * name , unsigned offset , const char * sourceText , const char * filterText , TestOptions & options , HandlerFunc func)",81, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"readPopularAPIList( StringRef filename , std :: vector<std::string> & result)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"setupPopularAPI( const TestOptions & options)",42, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/complete-test/complete-test.cpp,"handleTestInvocation( TestOptions & options)",84, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CodeCompletionResultsArray.cpp,"CodeCompletionResultsArrayBuilder::CodeCompletionResultsArrayBuilder()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CodeCompletionResultsArray.cpp,"CodeCompletionResultsArrayBuilder::~CodeCompletionResultsArrayBuilder()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CodeCompletionResultsArray.cpp,"CodeCompletionResultsArrayBuilder::add( UIdent Kind , StringRef Name , StringRef Description , StringRef SourceText , StringRef TypeName , Optional<StringRef> ModuleName , Optional<StringRef> DocBrief , Optional<StringRef> AssocUSRs , UIdent SemanticContext , bool NotRecommended , unsigned NumBytesToErase)",26, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CodeCompletionResultsArray.cpp,"CodeCompletionResultsArrayBuilder::createBuffer()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CodeCompletionResultsArray.cpp,"CodeCompletionResultsArray::dictionary_apply( void * Buf , size_t Index , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",60, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CodeCompletionResultsArray.cpp,"sourcekitd::getVariantFunctionsForCodeCompletionResultsArray()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::CustomXPCData( xpc_object_t xobj)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::getXObj() const",1, 48, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::getKind() const",1, 53, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::getPtr() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::getLength() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::isError() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::getErrorDescription() const",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::createErrorRequestInvalid( const char * Description)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::createErrorRequestFailed( const char * Description)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::createErrorRequestInterrupted( const char * Description)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::createErrorRequestCancelled( const char * Description)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"CustomXPCData::createKindAndString( Kind K , const char * Str)",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"SKDObjectVisitor::compKeys( const std :: pair<UIdent,sourcekitd_object_t> & LHS , const std :: pair<UIdent,sourcekitd_object_t> & RHS)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"SKDObjectVisitor::visit( sourcekitd_object_t Obj)",34, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"SKDObjectPrinter::SKDObjectPrinter( raw_ostream & OS , unsigned Indent = 0)",2, 49, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd::printRequestObject( sourcekitd_object_t Obj , raw_ostream & OS)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::ResponseBuilder()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::~ResponseBuilder()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::ResponseBuilder( const ResponseBuilder & Other)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::operator =( const ResponseBuilder & Other)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::getDictionary()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::createResponse()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , SourceKit :: UIdent UID)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , sourcekitd_uid_t UID)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , const char * Str)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , llvm :: StringRef Str)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , const std :: string & Str)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , int64_t val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::set( SourceKit :: UIdent Key , ArrayRef<StringRef> Strs)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::set( SourceKit :: UIdent Key , ArrayRef<std::string> Strs)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::setBool( UIdent Key , bool val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::setArray( UIdent Key)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::setDictionary( UIdent Key)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Dictionary::setCustomBuffer( SourceKit :: UIdent Key , CustomBufferKind Kind , std :: unique_ptr<llvm::MemoryBuffer> MemBuf)",17, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"ResponseBuilder::Array::appendDictionary()",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"RequestDict::getUID( UIdent Key)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"RequestDict::getString( UIdent Key)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"RequestDict::getDictionary( SourceKit :: UIdent Key)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"RequestDict::getStringArray( SourceKit :: UIdent Key , llvm :: SmallVectorImpl<const char*> & Arr , bool isOptional)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"RequestDict::getUIDArray( SourceKit :: UIdent Key , llvm :: SmallVectorImpl<sourcekitd_uid_t> & Arr , bool isOptional)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"RequestDict::dictionaryArrayApply( SourceKit :: UIdent key , llvm :: function_ref<bool(RequestDict)> applier)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"RequestDict::getInt64( SourceKit :: UIdent Key , int64_t & Val , bool isOptional)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"RequestDict::getOptionalInt64( SourceKit :: UIdent Key)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd::createErrorRequestInvalid( const char * Description)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd::createErrorRequestFailed( const char * Description)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd::createErrorRequestInterrupted( const char * Description)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd::createErrorRequestCancelled()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"strFromUID( sourcekitd_uid_t uid)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_retain( sourcekitd_object_t object)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_release( sourcekitd_object_t object)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_dictionary_create( const sourcekitd_uid_t * keys , const sourcekitd_object_t * values , size_t count)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_dictionary_set_value( sourcekitd_object_t dict , sourcekitd_uid_t key , sourcekitd_object_t value)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_dictionary_set_string( sourcekitd_object_t dict , sourcekitd_uid_t key , const char * string)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_dictionary_set_stringbuf( sourcekitd_object_t dict , sourcekitd_uid_t key , const char * buf , size_t length)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_dictionary_set_int64( sourcekitd_object_t dict , sourcekitd_uid_t key , int64_t val)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_dictionary_set_uid( sourcekitd_object_t dict , sourcekitd_uid_t key , sourcekitd_uid_t uid)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_array_create( const sourcekitd_object_t * objects , size_t count)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_array_set_value( sourcekitd_object_t array , size_t index , sourcekitd_object_t value)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_array_set_string( sourcekitd_object_t array , size_t index , const char * string)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_array_set_stringbuf( sourcekitd_object_t array , size_t index , const char * buf , size_t length)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_array_set_int64( sourcekitd_object_t array , size_t index , int64_t val)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_array_set_uid( sourcekitd_object_t array , size_t index , sourcekitd_uid_t uid)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_int64_create( int64_t val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_string_create( const char * string)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_request_uid_create( sourcekitd_uid_t uid)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_response_dispose( sourcekitd_response_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_response_is_error( sourcekitd_response_t obj)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_response_error_get_kind( sourcekitd_response_t obj)",25, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_response_error_get_description( sourcekitd_response_t obj)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"sourcekitd_response_get_value( sourcekitd_response_t resp)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_get_type( sourcekitd_variant_t var)",40, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_array_apply( sourcekitd_variant_t array , llvm :: function_ref<bool(size_t,sourcekitd_variant_t)> applier)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_array_get_bool( sourcekitd_variant_t array , size_t index)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_array_get_count( sourcekitd_variant_t array)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_array_get_int64( sourcekitd_variant_t array , size_t index)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_array_get_string( sourcekitd_variant_t array , size_t index)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_array_get_uid( sourcekitd_variant_t array , size_t index)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_array_get_value( sourcekitd_variant_t array , size_t index)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_bool_get_value( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_dictionary_apply( sourcekitd_variant_t dict , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_dictionary_get_bool( sourcekitd_variant_t dict , sourcekitd_uid_t key)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_dictionary_get_int64( sourcekitd_variant_t dict , sourcekitd_uid_t key)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_dictionary_get_string( sourcekitd_variant_t dict , sourcekitd_uid_t key)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_dictionary_get_value( sourcekitd_variant_t dict , sourcekitd_uid_t key)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_dictionary_get_uid( sourcekitd_variant_t dict , sourcekitd_uid_t key)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_string_get_length( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_string_get_ptr( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_data_get_size( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_data_get_ptr( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_int64_get_value( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"XPCVar_uid_get_value( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-XPC.cpp,"variantFromXPCObject( xpc_object_t obj)",36, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocSupportAnnotationArray.cpp,"DocSupportAnnotationArrayBuilder::DocSupportAnnotationArrayBuilder()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocSupportAnnotationArray.cpp,"DocSupportAnnotationArrayBuilder::~DocSupportAnnotationArrayBuilder()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocSupportAnnotationArray.cpp,"DocSupportAnnotationArrayBuilder::add( const DocEntityInfo & Info)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocSupportAnnotationArray.cpp,"DocSupportAnnotationArrayBuilder::createBuffer()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocSupportAnnotationArray.cpp,"DocSupportAnnotationArray::dictionary_apply( void * Buf , size_t Index , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",37, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocSupportAnnotationArray.cpp,"sourcekitd::getVariantFunctionsForDocSupportAnnotationArray()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"LazySKDUID::LazySKDUID( const char * Name)",1, 48, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"LazySKDUID::get() const",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"LazySKDUID::operator sourcekitd_uid_t() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"LazySKDUID::str() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"onDocumentUpdateNotification( StringRef DocumentName)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"sourcekitd::initialize()",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"sourcekitd::shutdown()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"getGlobalContext()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"syntaxTransferModeFromUID( sourcekitd_uid_t UID)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"syntaxSerializationFormatFromUID( sourcekitd_uid_t UID)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"sourcekitd::handleRequest( sourcekitd_object_t Req , ResponseReceiver Receiver)",16, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"getInputBufForRequest( Optional<StringRef> SourceFile , Optional<StringRef> SourceText , llvm :: SmallString<64> & ErrBuf)",31, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"handleRequestImpl( sourcekitd_object_t ReqObj , ResponseReceiver Rec)",464, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"handleSemanticRequest( RequestDict Req , ResponseReceiver Rec , sourcekitd_uid_t ReqUID , Optional<StringRef> SourceFile , Optional<StringRef> SourceText , ArrayRef<const char*> Args)",221, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKIndexingConsumer::SKIndexingConsumer( ResponseBuilder & RespBuilder)",12, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKIndexingConsumer::~SKIndexingConsumer()",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"indexSource( StringRef Filename , ArrayRef<const char*> Args , StringRef KnownHash)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKIndexingConsumer::failed( StringRef ErrDescription)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKIndexingConsumer::recordHash( StringRef Hash , bool isKnown)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKIndexingConsumer::startDependency( UIdent Kind , StringRef Name , StringRef Path , bool IsSystem , StringRef Hash)",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKIndexingConsumer::finishDependency( UIdent Kind)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKIndexingConsumer::startSourceEntity( const EntityInfo & Info)",39, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKIndexingConsumer::recordRelatedEntity( const EntityInfo & Info)",21, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKIndexingConsumer::finishSourceEntity( UIdent Kind)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::SKDocConsumer( ResponseBuilder & RespBuilder)",13, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::~SKDocConsumer()",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::createResponse()",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"demangleNames( ArrayRef<const char*> MangledNames , bool Simplified)",31, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"mangleSimpleClass( StringRef moduleName , StringRef className)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"mangleSimpleClassNames( ArrayRef<std::pair<StringRef,StringRef>> ModuleClassPairs)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"reportDocInfo( llvm :: MemoryBuffer * InputBuf , StringRef ModuleName , ArrayRef<const char*> Args)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::addDocEntityInfoToDict( const DocEntityInfo & Info , ResponseBuilder :: Dictionary Elem)",53, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::failed( StringRef ErrDescription)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::handleSourceText( StringRef Text)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::handleAnnotation( const DocEntityInfo & Info)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::startSourceEntity( const DocEntityInfo & Info)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::handleInheritsEntity( const DocEntityInfo & Info)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::handleConformsToEntity( const DocEntityInfo & Info)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::handleExtendsEntity( const DocEntityInfo & Info)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::handleAvailableAttribute( const AvailableAttrInfo & Info)",25, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::finishSourceEntity( UIdent Kind)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKDocConsumer::handleDiagnostic( const DiagnosticEntryInfo & Info)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"reportCursorInfo( const CursorInfoData & Info , ResponseReceiver Rec)",81, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"reportRangeInfo( const RangeInfo & Info , ResponseReceiver Rec)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"reportNameInfo( const NameTranslatingInfo & Info , ResponseReceiver Rec)",30, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"findRelatedIdents( StringRef Filename , int64_t Offset , bool CancelOnSubsequentRequest , ArrayRef<const char*> Args , ResponseReceiver Rec)",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKCodeCompletionConsumer::SKCodeCompletionConsumer( ResponseBuilder & RespBuilder)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKCodeCompletionConsumer::createResponse()",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"codeComplete( llvm :: MemoryBuffer * InputBuf , int64_t Offset , ArrayRef<const char*> Args)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKCodeCompletionConsumer::failed( StringRef ErrDescription)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKCodeCompletionConsumer::handleResult( const CodeCompletionInfo & R)",26, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKGroupedCodeCompletionConsumer::SKGroupedCodeCompletionConsumer( ResponseBuilder & RespBuilder)",2, 36, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKGroupedCodeCompletionConsumer::createResponse()",6, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKOptionsDictionary::SKOptionsDictionary( RequestDict & Options)",1, 75, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKOptionsDictionary::valueForOption( UIdent Key , unsigned & Val)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKOptionsDictionary::valueForOption( UIdent Key , bool & Val)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKOptionsDictionary::valueForOption( UIdent Key , StringRef & Val)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"codeCompleteOpen( StringRef Name , llvm :: MemoryBuffer * InputBuf , int64_t Offset , Optional<RequestDict> optionsDict , ArrayRef<const char*> Args)",89, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"codeCompleteClose( StringRef Name , int64_t Offset)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"codeCompleteUpdate( StringRef name , int64_t offset , Optional<RequestDict> optionsDict)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKGroupedCodeCompletionConsumer::failed( StringRef ErrDescription)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKGroupedCodeCompletionConsumer::handleResult( const CodeCompletionInfo & R)",56, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKGroupedCodeCompletionConsumer::startGroup( UIdent kind , StringRef name)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKGroupedCodeCompletionConsumer::endGroup()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKGroupedCodeCompletionConsumer::setNextRequestStart( unsigned offset)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::SKEditorConsumer( SKEditorConsumerOptions Opts)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::SKEditorConsumer( ResponseReceiver RespReceiver , SKEditorConsumerOptions Opts)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::needsSemanticInfo()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::syntaxMapEnabled()",1, 68, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::documentStructureEnabled()",1, 76, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::syntaxTreeTransferMode()",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::finished()",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorOpen( StringRef Name , llvm :: MemoryBuffer * Buf , SKEditorConsumerOptions Opts , ArrayRef<const char*> Args)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorOpenInterface( StringRef Name , StringRef ModuleName , Optional<StringRef> Group , ArrayRef<const char*> Args , bool SynthesizedExtensions , Optional<StringRef> InterestedUSR)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorOpenSwiftSourceInterface( StringRef Name , StringRef HeaderName , ArrayRef<const char*> Args , ResponseReceiver Rec)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorOpenSwiftTypeInterface( StringRef TypeUsr , ArrayRef<const char*> Args , ResponseReceiver Rec)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorExtractTextFromComment( StringRef Source)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorConvertMarkupToXML( StringRef Source)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorOpenHeaderInterface( StringRef Name , StringRef HeaderName , ArrayRef<const char*> Args , bool UsingSwiftArgs , bool SynthesizedExtensions , StringRef swiftVersion)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorClose( StringRef Name , bool RemoveCache)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorReplaceText( StringRef Name , llvm :: MemoryBuffer * Buf , unsigned Offset , unsigned Length , SKEditorConsumerOptions Opts)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorApplyFormatOptions( StringRef Name , RequestDict & FmtOptions)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorFormatText( StringRef Name , unsigned Line , unsigned Length)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorExpandPlaceholder( StringRef Name , unsigned Offset , unsigned Length)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::createResponse()",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::handleRequestError( const char * Description)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::handleSyntaxMap( unsigned Offset , unsigned Length , UIdent Kind)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::handleSemanticAnnotation( unsigned Offset , unsigned Length , UIdent Kind , bool isSystem)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::beginDocumentSubStructure( unsigned Offset , unsigned Length , UIdent Kind , UIdent AccessLevel , UIdent SetterAccessLevel , unsigned NameOffset , unsigned NameLength , unsigned BodyOffset , unsigned BodyLength , unsigned DocOffset , unsigned DocLength , StringRef DisplayName , StringRef TypeName , StringRef RuntimeName , StringRef SelectorName , ArrayRef<StringRef> InheritedTypes , ArrayRef<std::tuple<UIdent,unsigned,unsigned>> Attrs)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::endDocumentSubStructure()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::handleDocumentSubStructureElement( UIdent Kind , unsigned Offset , unsigned Length)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::recordAffectedRange( unsigned Offset , unsigned Length)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::recordAffectedLineRange( unsigned Line , unsigned Length)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::recordFormattedText( StringRef Text)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"fillDictionaryForDiagnosticInfo( ResponseBuilder :: Dictionary Elem , const DiagnosticEntryInfo & Info)",27, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"fillDictionaryForDiagnosticInfoBase( ResponseBuilder :: Dictionary Elem , const DiagnosticEntryInfoBase & Info)",32, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::setDiagnosticStage( UIdent DiagStage)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::handleDiagnostic( const DiagnosticEntryInfo & Info , UIdent DiagStage)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::handleSourceText( StringRef Text)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"serializeSyntaxTreeAsByteTree( const swift :: syntax :: SourceFileSyntax & SyntaxTree , std :: unordered_set<unsigned> & ReusedNodeIds , ResponseBuilder :: Dictionary & Dict)",31, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"serializeSyntaxTreeAsJson( const swift :: syntax :: SourceFileSyntax & SyntaxTree , std :: unordered_set<unsigned> ReusedNodeIds , ResponseBuilder :: Dictionary & Dict)",30, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"SKEditorConsumer::handleSyntaxTree( const swift :: syntax :: SourceFileSyntax & SyntaxTree , std :: unordered_set<unsigned> & ReusedNodeIds)",28, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorFindUSR( StringRef DocumentName , StringRef USR)",17, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorFindInterfaceDoc( StringRef ModuleName , ArrayRef<const char*> Args)",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"editorFindModuleGroups( StringRef ModuleName , ArrayRef<const char*> Args)",20, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"buildRenameLocationsFromDict( RequestDict & Req , bool UseNewName , std :: vector<RenameLocations> & RenameLocations , llvm :: SmallString<64> & Error)",82, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"createCategorizedEditsResponse( ArrayRef<CategorizedEdits> AllEdits , StringRef Error)",36, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"syntacticRename( llvm :: MemoryBuffer * InputBuf , ArrayRef<RenameLocations> RenameLocations , ArrayRef<const char*> Args)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"createCategorizedRenameRangesResponse( ArrayRef<CategorizedRenameRanges> Ranges , StringRef Error)",26, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"findRenameRanges( llvm :: MemoryBuffer * InputBuf , ArrayRef<RenameLocations> RenameLocations , ArrayRef<const char*> Args)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"isSemanticEditorDisabled()",35, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"CompileTrackingConsumer::desiredOperations()",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"CompileTrackingConsumer::operationStarted( uint64_t OpId , trace :: OperationKind OpKind , const trace :: SwiftInvocation & Inv , const trace :: StringPairs & OpArgs)",16, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"CompileTrackingConsumer::operationFinished( uint64_t OpId , trace :: OperationKind OpKind , ArrayRef<DiagnosticEntryInfo> Diagnostics)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,"enableCompileNotifications( bool value)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/RawData.cpp,"RawDataFuncs::get_type( sourcekitd_variant_t var)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/RawData.cpp,"RawDataFuncs::data_get_size( sourcekitd_variant_t variant)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/RawData.cpp,"RawDataFuncs::data_get_ptr( sourcekitd_variant_t variant)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/RawData.cpp,"sourcekitd::getVariantFunctionsForRawData()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"addScalar( T Val , SmallVectorImpl<uint8_t> & Buf)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::CompactArrayBuilderImpl()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::addImpl( uint8_t Val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::addImpl( unsigned Val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::addImpl( StringRef Val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::addImpl( UIdent Val)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::addImpl( Optional<llvm::StringRef> Val)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::getOffsetForString( StringRef Str)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::createBuffer() const",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::appendTo( SmallVectorImpl<char> & Buf) const",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::copyInto( char * BufPtr , size_t Length) const",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::empty() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayBuilderImpl::sizeInBytes() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"readScalar( const uint8_t * Buf , T & Val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayReaderImpl::readImpl( size_t Offset , uint8_t & Val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayReaderImpl::readImpl( size_t Offset , unsigned & Val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayReaderImpl::readImpl( size_t Offset , const char * & Val)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/CompactArray.cpp,"CompactArrayReaderImpl::readImpl( size_t Offset , sourcekitd_uid_t & Val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArrayBuilder::TokenAnnotationsArrayBuilder()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArrayBuilder::~TokenAnnotationsArrayBuilder()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArrayBuilder::add( UIdent Kind , unsigned Offset , unsigned Length , bool IsSystem)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArrayBuilder::empty() const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArrayBuilder::createBuffer()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArray::readElements( void * Buf , size_t Index , sourcekitd_uid_t & Kind , unsigned & Offset , unsigned & Length , bool & IsSystem)",14, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArray::apply( sourcekitd_uid_t Kind , unsigned Offset , unsigned Length , bool IsSystem , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",22, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArray::getBool( sourcekitd_uid_t Key , sourcekitd_uid_t Kind , unsigned Offset , unsigned Length , bool IsSystem)",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArray::getInt( sourcekitd_uid_t Key , sourcekitd_uid_t Kind , unsigned Offset , unsigned Length , bool IsSystem)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"TokenAnnotationsArray::getUID( sourcekitd_uid_t Key , sourcekitd_uid_t Kind , unsigned Offset , unsigned Length , bool IsSystem)",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"sourcekitd::CompactVariantFuncs<TokenAnnotationsArray>::get_type( sourcekitd_variant_t var)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"sourcekitd::CompactVariantFuncs<TokenAnnotationsArray>::getElement( sourcekitd_variant_t dict , sourcekitd_uid_t key , const FnTy & Fn)",14, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"sourcekitd::CompactVariantFuncs<TokenAnnotationsArray>::dictionary_apply( sourcekitd_variant_t dict , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",14, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"sourcekitd::CompactVariantFuncs<TokenAnnotationsArray>::dictionary_get_bool( sourcekitd_variant_t dict , sourcekitd_uid_t key)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"sourcekitd::CompactVariantFuncs<TokenAnnotationsArray>::dictionary_get_int64( sourcekitd_variant_t dict , sourcekitd_uid_t key)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"sourcekitd::CompactVariantFuncs<TokenAnnotationsArray>::dictionary_get_uid( sourcekitd_variant_t dict , sourcekitd_uid_t key)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/TokenAnnotationsArray.cpp,"sourcekitd::getVariantFunctionsForTokenAnnotationsArray()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"findPrintOrderForDictKey( UIdent Key)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd::compareDictKeys( UIdent LHS , UIdent RHS)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"VariantVisitor::compKeys( const std :: pair<UIdent,sourcekitd_variant_t> & LHS , const std :: pair<UIdent,sourcekitd_variant_t> & RHS)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"VariantVisitor::visit( sourcekitd_variant_t Obj)",47, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"VariantPrinter::VariantPrinter( raw_ostream & OS , unsigned Indent = 0 , bool PrintAsJSON = false)",2, 62, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd::writeEscaped( llvm :: StringRef Str , llvm :: raw_ostream & OS)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"printError( sourcekitd_response_t Err , raw_ostream & OS)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"printVariant( sourcekitd_variant_t obj , raw_ostream & OS)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd::printResponse( sourcekitd_response_t Resp , raw_ostream & OS)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"fatal_error_handler( void * user_data , const std :: string & reason , bool gen_crash_diag)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd::enableLogging( StringRef LoggerName)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_initialize( void)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_shutdown( void)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_response_description_dump( sourcekitd_response_t resp)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_response_description_dump_filedesc( sourcekitd_response_t resp , int fd)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_response_description_copy( sourcekitd_response_t resp)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_uid_get_from_cstr( const char * string)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_uid_get_from_buf( const char * buf , size_t length)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_uid_get_length( sourcekitd_uid_t uid)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_uid_get_string_ptr( sourcekitd_uid_t uid)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_request_description_dump( sourcekitd_object_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_request_description_copy( sourcekitd_object_t obj)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_get_type( sourcekitd_variant_t var)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_dictionary_get_value( sourcekitd_variant_t dict , sourcekitd_uid_t key)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_dictionary_get_string( sourcekitd_variant_t dict , sourcekitd_uid_t key)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_dictionary_get_int64( sourcekitd_variant_t dict , sourcekitd_uid_t key)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_dictionary_get_bool( sourcekitd_variant_t dict , sourcekitd_uid_t key)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_dictionary_get_uid( sourcekitd_variant_t dict , sourcekitd_uid_t key)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_dictionary_apply( sourcekitd_variant_t dict , sourcekitd_variant_dictionary_applier_t applier)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_dictionary_apply_impl( sourcekitd_variant_t dict , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_dictionary_apply_f( sourcekitd_variant_t dict , sourcekitd_variant_dictionary_applier_f_t applier , void * context)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_array_get_count( sourcekitd_variant_t array)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_array_get_value( sourcekitd_variant_t array , size_t index)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_array_get_string( sourcekitd_variant_t array , size_t index)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_array_get_int64( sourcekitd_variant_t array , size_t index)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_array_get_bool( sourcekitd_variant_t array , size_t index)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_array_get_uid( sourcekitd_variant_t array , size_t index)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_array_apply( sourcekitd_variant_t array , sourcekitd_variant_array_applier_t applier)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_array_apply_impl( sourcekitd_variant_t array , llvm :: function_ref<bool(size_t,sourcekitd_variant_t)> applier)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_array_apply_f( sourcekitd_variant_t array , sourcekitd_variant_array_applier_f_t applier , void * context)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_int64_get_value( sourcekitd_variant_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_bool_get_value( sourcekitd_variant_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_string_get_length( sourcekitd_variant_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_string_get_ptr( sourcekitd_variant_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_data_get_size( sourcekitd_variant_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_data_get_ptr( sourcekitd_variant_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_uid_get_value( sourcekitd_variant_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_description_dump( sourcekitd_variant_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_description_dump_filedesc( sourcekitd_variant_t obj , int fd)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_description_copy( sourcekitd_variant_t obj)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_variant_json_description_copy( sourcekitd_variant_t obj)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"YAMLRequestParser::withError( StringRef Desc , llvm :: yaml :: Node * Node , std :: string & Error)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"YAMLRequestParser::withBoolError( StringRef Desc , llvm :: yaml :: Node * Node , std :: string & Error)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"sourcekitd_request_create_from_yaml( const char * yaml , char ** error)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"YAMLRequestParser::parse( StringRef YAMLStr , std :: string & Error)",17, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"YAMLRequestParser::createObjFromNode( llvm :: yaml :: Node * Value , std :: string & Error)",43, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"YAMLRequestParser::parseDict( sourcekitd_object_t Dict , llvm :: yaml :: MappingNode * Node , std :: string & Error)",31, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"YAMLRequestParser::parseArray( sourcekitd_object_t Array , llvm :: yaml :: SequenceNode * Node , std :: string & Error)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-Common.cpp,"YAMLRequestParser::initError( StringRef Desc , llvm :: yaml :: Node * Node , std :: string & Error)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::Implementation::Implementation()",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::Implementation::addInheritedTypes( ArrayRef<StringRef> inheritedTypes)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::Implementation::addAttrs( ArrayRef<std::tuple<UIdent,unsigned,unsigned>> attrs)",16, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::Implementation::addElements( ArrayRef<Node::Element> elements)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::Implementation::addChildren( ArrayRef<unsigned> offsets)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::DocStructureArrayBuilder()",2, 37, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::~DocStructureArrayBuilder()",1, 72, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::beginSubStructure( unsigned Offset , unsigned Length , SourceKit :: UIdent Kind , SourceKit :: UIdent AccessLevel , SourceKit :: UIdent SetterAccessLevel , unsigned NameOffset , unsigned NameLength , unsigned BodyOffset , unsigned BodyLength , unsigned DocOffset , unsigned DocLength , StringRef DisplayName , StringRef TypeName , StringRef RuntimeName , StringRef SelectorName , ArrayRef<StringRef> InheritedTypes , ArrayRef<std::tuple<UIdent,unsigned,unsigned>> Attrs)",34, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::addElement( SourceKit :: UIdent Kind , unsigned Offset , unsigned Length)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::endSubStructure()",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayBuilder::createBuffer()",45, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getElementsBuffer( size_t offset) const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getInheritedTypesBuffer( size_t offset) const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getAttrsBuffer( size_t offset) const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getStructureArrayBufferStart() const",1, 75, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getStructureBufferStart() const",1, 70, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getElementsBufferStart() const",1, 69, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getAttrsBufferStart() const",1, 66, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getInheritedTypesBufferStart() const",1, 75, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getTopStructureArrayOffset() const",1, 74, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::DocStructureArrayReader( void * buffer)",2, 24, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::readStructure( size_t index)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::readStructureArray( size_t offset)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getBufferStart( unsigned index) const",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayReader::getHeaderValue( unsigned index) const",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"ElementReader::dictionary_apply( void * buffer , size_t index , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",14, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"InheritedTypeReader::dictionary_apply( void * buffer , size_t index , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"AttributesReader::dictionary_apply( void * buffer , size_t index , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",15, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureReader::dictionary_apply( void * buffer , size_t index , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",60, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayFuncs::get_type( sourcekitd_variant_t var)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayFuncs::array_get_count( sourcekitd_variant_t array)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"DocStructureArrayFuncs::array_get_value( sourcekitd_variant_t array , size_t index)",13, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"sourcekitd::getVariantFunctionsForDocStructureElementArray()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"sourcekitd::getVariantFunctionsForInheritedTypesArray()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"sourcekitd::getVariantFunctionsForAttributesArray()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/DocStructureArray.cpp,"sourcekitd::getVariantFunctionsForDocStructureArray()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::SKDObject( ObjectKind K)",1, 39, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::getKind() const",1, 46, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::set( sourcekitd_uid_t Key , SKDObjectRef Value)",1, 64, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::set( size_t Index , SKDObjectRef Value)",1, 56, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::get( sourcekitd_uid_t Key) const",1, 75, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::get( size_t Index) const",1, 67, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::getCount() const",1, 48, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::getUID() const",1, 62, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::getInt64() const",1, 62, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::getString() const",1, 65, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::getCString() const",1, 61, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::getBool() const",1, 49, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::getDataPtr() const",1, 61, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObject::getDataSize() const",1, 51, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDDictionary::SKDDictionary()",1, 57, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDDictionary::getVariantType() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDDictionary::set( sourcekitd_uid_t Key , SKDObjectRef Value)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDDictionary::get( sourcekitd_uid_t Key) const",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDDictionary::apply( llvm :: function_ref<bool(sourcekitd_uid_t,SKDObjectRef)> Applier) const",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDDictionary::classof( const SKDObject * O)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDArray::SKDArray()",1, 47, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDArray::getVariantType() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDArray::set( size_t Index , SKDObjectRef Value)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDArray::get( size_t Index) const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDArray::getCount() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDArray::apply( llvm :: function_ref<bool(size_t,SKDObjectRef)> Applier) const",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDArray::classof( const SKDObject * O)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDString::SKDString( std :: string && Value)",1, 84, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDString::getVariantType() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDString::getString() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDString::getCString() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDString::classof( const SKDObject * O)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDInt64::SKDInt64( int64_t Value)",1, 76, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDInt64::getVariantType() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDInt64::getInt64() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDInt64::classof( const SKDObject * O)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDUID::SKDUID( sourcekitd_uid_t Value)",1, 81, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDUID::getVariantType() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDUID::getUID() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDUID::classof( const SKDObject * O)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDBool::SKDBool( bool Value)",1, 71, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDBool::getVariantType() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDBool::getBool() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDBool::classof( const SKDObject * O)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDCustomData::SKDCustomData( CustomBufferKind BufferKind , std :: unique_ptr<llvm::MemoryBuffer> & MemBuf)",7, 7, 4, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDCustomData::getVariantType() const",15, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDCustomData::getBufferKind() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDCustomData::getDataPtr() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDCustomData::getDataSize() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDCustomData::classof( const SKDObject * O)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDError::SKDError( sourcekitd_error_t ErrorKind , StringRef Description)",2, 84, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDError::getVariantType() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDError::getErrorKind() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDError::getDescription() const",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDError::classof( const SKDObject * O)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObjectVisitor::compKeys( const std :: pair<UIdent,sourcekitd_object_t> & LHS , const std :: pair<UIdent,sourcekitd_object_t> & RHS)",4, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObjectVisitor::visit( sourcekitd_object_t Obj)",34, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObjectPrinter::SKDObjectPrinter( raw_ostream & OS , unsigned Indent = 0)",2, 31, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObjectPrinter::visitDictionary( const DictMap & Map)",16, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObjectPrinter::visitArray( ArrayRef<sourcekitd_object_t> Arr)",14, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObjectPrinter::visitInt64( int64_t Val)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObjectPrinter::visitString( StringRef Str)",7, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDObjectPrinter::visitUID( StringRef UID)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"retained( SKDObject * object)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_retain( sourcekitd_object_t object)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_release( sourcekitd_object_t object)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_dictionary_create( const sourcekitd_uid_t * keys , const sourcekitd_object_t * values , size_t count)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_dictionary_set_value( sourcekitd_object_t dict , sourcekitd_uid_t key , sourcekitd_object_t value)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_dictionary_set_string( sourcekitd_object_t dict , sourcekitd_uid_t key , const char * string)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_dictionary_set_stringbuf( sourcekitd_object_t dict , sourcekitd_uid_t key , const char * buf , size_t length)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_dictionary_set_int64( sourcekitd_object_t dict , sourcekitd_uid_t key , int64_t val)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_dictionary_set_uid( sourcekitd_object_t dict , sourcekitd_uid_t key , sourcekitd_uid_t uid)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_array_create( const sourcekitd_object_t * objects , size_t count)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_array_set_value( sourcekitd_object_t array , size_t index , sourcekitd_object_t value)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_array_set_string( sourcekitd_object_t array , size_t index , const char * string)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_array_set_stringbuf( sourcekitd_object_t array , size_t index , const char * buf , size_t length)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_array_set_int64( sourcekitd_object_t array , size_t index , int64_t val)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_array_set_uid( sourcekitd_object_t array , size_t index , sourcekitd_uid_t uid)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_int64_create( int64_t val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_string_create( const char * string)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_request_uid_create( sourcekitd_uid_t uid)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_response_dispose( sourcekitd_response_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_response_is_error( sourcekitd_response_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_response_error_get_kind( sourcekitd_response_t obj)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_response_error_get_description( sourcekitd_response_t obj)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd_response_get_value( sourcekitd_response_t resp)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd::printRequestObject( sourcekitd_object_t Obj , raw_ostream & OS)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::ResponseBuilder()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::~ResponseBuilder()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::ResponseBuilder( const ResponseBuilder & Other)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::operator =( const ResponseBuilder & Other)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::getDictionary()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::createResponse()",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , SourceKit :: UIdent UID)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , sourcekitd_uid_t UID)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , const char * Str)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , StringRef Str)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , const std :: string & Str)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::set( UIdent Key , int64_t Val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::set( SourceKit :: UIdent Key , ArrayRef<StringRef> Strs)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::set( SourceKit :: UIdent Key , ArrayRef<std::string> Strs)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::setBool( UIdent Key , bool Val)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::setDictionary( UIdent Key)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::setCustomBuffer( SourceKit :: UIdent Key , CustomBufferKind Kind , std :: unique_ptr<llvm::MemoryBuffer> MemBuf)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Dictionary::setArray( UIdent Key)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"ResponseBuilder::Array::appendDictionary()",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"RequestDict::getUID( UIdent Key)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"RequestDict::getString( UIdent Key)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"RequestDict::getDictionary( SourceKit :: UIdent Key)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"RequestDict::getStringArray( SourceKit :: UIdent Key , llvm :: SmallVectorImpl<const char*> & Arr , bool isOptional)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"RequestDict::getUIDArray( SourceKit :: UIdent Key , llvm :: SmallVectorImpl<sourcekitd_uid_t> & Arr , bool isOptional)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"RequestDict::dictionaryArrayApply( SourceKit :: UIdent Key , llvm :: function_ref<bool(RequestDict)> Applier)",16, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"RequestDict::getInt64( SourceKit :: UIdent Key , int64_t & Val , bool isOptional)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"RequestDict::getOptionalInt64( SourceKit :: UIdent Key)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd::createErrorRequestInvalid( const char * Description)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd::createErrorRequestFailed( const char * Description)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"sourcekitd::createErrorRequestCancelled()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_get_type( sourcekitd_variant_t var)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_array_apply( sourcekitd_variant_t array , llvm :: function_ref<bool(size_t,sourcekitd_variant_t)> applier)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_array_get_bool( sourcekitd_variant_t array , size_t index)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_array_get_count( sourcekitd_variant_t array)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_array_get_int64( sourcekitd_variant_t array , size_t index)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_array_get_string( sourcekitd_variant_t array , size_t index)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_array_get_uid( sourcekitd_variant_t array , size_t index)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_array_get_value( sourcekitd_variant_t array , size_t index)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_bool_get_value( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_dictionary_apply( sourcekitd_variant_t dict , llvm :: function_ref<bool(sourcekitd_uid_t,sourcekitd_variant_t)> applier)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_dictionary_get_bool( sourcekitd_variant_t dict , sourcekitd_uid_t key)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_dictionary_get_int64( sourcekitd_variant_t dict , sourcekitd_uid_t key)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_dictionary_get_string( sourcekitd_variant_t dict , sourcekitd_uid_t key)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_dictionary_get_value( sourcekitd_variant_t dict , sourcekitd_uid_t key)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_dictionary_get_uid( sourcekitd_variant_t dict , sourcekitd_uid_t key)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_string_get_length( sourcekitd_variant_t obj)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_string_get_ptr( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_int64_get_value( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_uid_get_value( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_data_get_ptr( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"SKDVar_data_get_size( sourcekitd_variant_t obj)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/lib/API/sourcekitdAPI-InProc.cpp,"variantFromSKDObject( SKDObjectRef Object)",36, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd_set_uid_handler( sourcekitd_uid_handler_t handler)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd_set_uid_handlers( sourcekitd_uid_from_str_handler_t uid_from_str , sourcekitd_str_from_uid_handler_t str_from_uid)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd::SKDUIDFromUIdent( UIdent UID)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd::UIdentFromSKDUID( sourcekitd_uid_t uid)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd::getRuntimeLibPath()",21, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd::set_interrupted_connection_handler( llvm :: function_ref<void()> handler)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd_send_request_sync( sourcekitd_object_t req)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd_send_request( sourcekitd_object_t req , sourcekitd_request_handle_t * out_handle , sourcekitd_response_receiver_t receiver)",16, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd_cancel_request( sourcekitd_request_handle_t handle)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd_set_interrupted_connection_handler( sourcekitd_interrupted_connection_handler_t handler)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd_set_notification_handler( sourcekitd_response_receiver_t receiver)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/InProc/sourcekitdInProc.cpp,"sourcekitd::postNotification( sourcekitd_response_t Notification)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"sourcekitd::postNotification( sourcekitd_response_t Notification)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"sourcekitd::SKDUIDFromUIdent( UIdent UID)",36, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"sourcekitd::UIdentFromSKDUID( sourcekitd_uid_t SKDUID)",37, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"anchorForGetMainExecutableInXPCService()",1, 49, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"XPCResponder::XPCResponder( xpc_object_t event , xpc_connection_t peer)",2, 76, 4, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"XPCResponder::~XPCResponder()",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"XPCResponder::sendReply( sourcekitd_response_t response)",14, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"sourcekitd::getRuntimeLibPath()",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"sourcekitdServer_peer_event_handler( xpc_connection_t peer , xpc_object_t event)",50, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"getInitializationInfo( xpc_connection_t peer)",29, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"sourcekitdServer_event_handler( xpc_connection_t peer)",25, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"fatal_error_handler( void * user_data , const std :: string & reason , bool gen_crash_diag)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"main( int argc , const char * argv [ ])",25, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"SKUIDToUIDMap::get( sourcekitd_uid_t SKDUID)",10, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XPCService.cpp,"SKUIDToUIDMap::set( sourcekitd_uid_t SKDUID , UIdent UID)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd_set_uid_handler( sourcekitd_uid_handler_t handler)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd_set_uid_handlers( sourcekitd_uid_from_str_handler_t uid_from_str , sourcekitd_str_from_uid_handler_t str_from_uid)",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd::SKDUIDFromUIdent( UIdent UID)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd::UIdentFromSKDUID( sourcekitd_uid_t uid)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd_set_interrupted_connection_handler( sourcekitd_interrupted_connection_handler_t handler)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd_set_notification_handler( sourcekitd_response_receiver_t receiver)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd_send_request_sync( sourcekitd_object_t req)",39, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd_send_request( sourcekitd_object_t req , sourcekitd_request_handle_t * out_handle , sourcekitd_response_receiver_t receiver)",49, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd_cancel_request( sourcekitd_request_handle_t handle)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"handleInternalInitRequest( xpc_object_t reply)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"handleInternalUIDRequest( xpc_object_t XVal , xpc_object_t reply)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd::initialize()",68, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sourcekitd::shutdown()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"getGlobalConnection()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"pingService( xpc_connection_t ping_conn)",54, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"sendNotification( xpc_object_t event)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"updateSemanticEditorDelay()",35, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,"handleInterruptedConnection( xpc_object_t event , xpc_connection_t conn)",19, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/TestOptions.cpp,"TestOptTable::TestOptTable()",1, 74, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/TestOptions.cpp,"parseLineCol( StringRef LineCol)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/TestOptions.cpp,"TestOptions::parseArgs( llvm :: ArrayRef<const char*> Args)",282, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/TestOptions.cpp,"TestOptions::printHelp( bool ShowHidden) const",12, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"realpath( const char * path , char * resolved_path)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"NotificationBuffer::add( sourcekitd_response_t note)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"NotificationBuffer::handleNotifications( llvm :: function_ref<void(sourcekitd_response_t)> f)",10, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"syncNotificationsWithService()",17, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printBufferedNotifications( bool syncWithService = true)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"main( int argc , const char ** argv)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"skt_main( int argc , const char ** argv)",65, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"getInterfaceGenDocumentName()",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"addCodeCompleteOptions( sourcekitd_object_t Req , TestOptions & Opts)",25, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"readPopularAPIList( StringRef filename , std :: vector<std::string> & result)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"PrintingTimer::PrintingTimer( std :: string desc , llvm :: raw_ostream & OS = llvm :: errs())",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"PrintingTimer::~PrintingTimer()",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"sendRequestSync( sourcekitd_object_t req , const TestOptions & opts)",9, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"handleJsonRequestPath( StringRef QueryPath , const TestOptions & Opts)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"handleTestInvocation( ArrayRef<const char*> Args , TestOptions & InitOpts)",28, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"handleTestInvocation( TestOptions Opts , TestOptions & InitOpts)",538, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"handleResponse( sourcekitd_response_t Resp , const TestOptions & Opts , const std :: string & SourceFile , std :: unique_ptr<llvm::MemoryBuffer> SourceBuf , TestOptions * InitOpts)",217, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"getSemanticInfoImpl( sourcekitd_variant_t Info)",6, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"getSemanticInfo( sourcekitd_variant_t Info , StringRef Filename)",16, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printAnnotations()",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printDiags()",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printSemanticInfo()",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"notification_receiver( sourcekitd_response_t resp)",28, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printNameTranslationInfo( sourcekitd_variant_t Info , llvm :: raw_ostream & OS)",58, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printCursorInfo( sourcekitd_variant_t Info , StringRef FilenameIn , llvm :: raw_ostream & OS)",170, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printRangeInfo( sourcekitd_variant_t Info , StringRef FilenameIn , llvm :: raw_ostream & OS)",31, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printFoundInterface( sourcekitd_variant_t Info , llvm :: raw_ostream & OS)",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printFoundUSR( sourcekitd_variant_t Info , llvm :: MemoryBuffer * SourceBuf , llvm :: raw_ostream & OS)",21, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printNormalizedDocComment( sourcekitd_variant_t Info)",5, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printDocInfo( sourcekitd_variant_t Info , StringRef Filename)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"checkTextIsASCII( const char * Text)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printModuleGroupNames( sourcekitd_variant_t Info , llvm :: raw_ostream & OS)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"getLineColRange( StringRef Text , int64_t StartLine , int64_t StartCol , int64_t EndLine , int64_t EndCol)",22, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printSyntacticRenameEdits( sourcekitd_variant_t Info , llvm :: raw_ostream & OS)",52, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printRenameRanges( sourcekitd_variant_t Info , llvm :: raw_ostream & OS)",37, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printInterfaceGen( sourcekitd_variant_t Info , bool CheckASCII)",23, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printRelatedIdents( sourcekitd_variant_t Info , StringRef Filename , llvm :: raw_ostream & OS)",14, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"prepareDemangleRequest( sourcekitd_object_t Req , const TestOptions & Opts)",39, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"prepareMangleRequest( sourcekitd_object_t Req , const TestOptions & Opts)",30, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printDemangleResults( sourcekitd_variant_t Info , raw_ostream & OS)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printMangleResults( sourcekitd_variant_t Info , raw_ostream & OS)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"printStatistics( sourcekitd_variant_t Info , raw_ostream & OS)",11, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"initializeRewriteBuffer( StringRef Input , clang :: RewriteBuffer & RewriteBuf)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"getPlaceholderRanges( StringRef Source)",18, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"expandPlaceholders( llvm :: MemoryBuffer * SourceBuf , llvm :: raw_ostream & OS)",40, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"resolveToLineCol( unsigned Offset , StringRef Filename)",3, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"resolveToLineCol( unsigned Offset , llvm :: MemoryBuffer * InputBuf)",8, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"resolveToLineColFromBuf( unsigned Offset , const char * Ptr)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"resolveFromLineCol( unsigned Line , unsigned Col , StringRef Filename)",4, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"resolveFromLineCol( unsigned Line , unsigned Col , llvm :: MemoryBuffer * InputBuf)",33, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp,"getBufferForFilename( StringRef Filename)",15, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"ConvertForWcharSize<2>::ConvertFromUTF8( const char ** sourceStart , const char * sourceEnd , wchar_t ** targetStart , wchar_t * targetEnd , ConversionFlags flags)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"ConvertForWcharSize<2>::ConvertToUTF8( const wchar_t ** sourceStart , const wchar_t * sourceEnd , char ** targetStart , char * targetEnd , ConversionFlags flags)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"ConvertForWcharSize<4>::ConvertFromUTF8( const char ** sourceStart , const char * sourceEnd , wchar_t ** targetStart , wchar_t * targetEnd , ConversionFlags flags)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"ConvertForWcharSize<4>::ConvertToUTF8( const wchar_t ** sourceStart , const wchar_t * sourceEnd , char ** targetStart , char * targetEnd , ConversionFlags flags)",11, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"convertFromUTF8( llvm :: StringRef utf8 , llvm :: SmallVectorImpl<wchar_t> & out)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"convertToUTF8( llvm :: ArrayRef<wchar_t> wide , llvm :: SmallVectorImpl<char> & out)",13, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"appendEscapeSequence( SmallVectorImpl<wchar_t> & dest , llvm :: StringRef src)",7, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::REPLInput()",51, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::~REPLInput()",12, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::getREPLInput( SmallVectorImpl<char> & Result)",110, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::PromptFn( EditLine * e)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::getPrompt()",30, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::GetCharFn( EditLine * e , wchar_t * out)",19, 4, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::BindingFn( EditLine * e , int ch)",5, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::isAtStartOfLine( const LineInfoW * line)",8, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::lineLooksLikeLabel( const LineInfoW * line)",17, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::lineLooksLikeSetter( const LineInfoW * line)",26, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::lineLooksLikeCase( const LineInfoW * line)",16, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::outdent()",8, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::onColon( int ch)",19, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::onCloseBrace( int ch)",15, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::onIndentOrComplete( int ch)",17, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::insertStringRef( StringRef s)",9, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"REPLInput::onComplete( int ch)",3, 4, 2, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"handleREPLInput( REPLInputKind inputKind , llvm :: StringRef Line)",26, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"printResponse( sourcekitd_response_t Resp)",10, 3, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"handleRequest( StringRef ReqStr , std :: string & ErrorMessage)",45, 2, 0, 0
repos/cpp/swift/tools/SourceKit/tools/sourcekitd-repl/sourcekitd-repl.cpp,"main( int argc , const char ** argv)",24, 2, 0, 0
repos/cpp/swift/tools/sil-opt/SILOpt.cpp,"createOptRemarkRegex( StringRef Val)",11, 2, 0, 0
repos/cpp/swift/tools/sil-opt/SILOpt.cpp,"runCommandLineSelectedPasses( SILModule * Module , irgen :: IRGenModule * IRGenMod)",17, 2, 0, 0
repos/cpp/swift/tools/sil-opt/SILOpt.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/sil-opt/SILOpt.cpp,"main( int argc , char ** argv)",236, 2, 0, 0
repos/cpp/swift/tools/sil-llvm-gen/SILLLVMGen.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/sil-llvm-gen/SILLLVMGen.cpp,"main( int argc , char ** argv)",101, 2, 0, 0
repos/cpp/swift/tools/swift-reflection-dump/swift-reflection-dump.cpp,"unwrap( llvm :: Expected<T> value)",6, 2, 0, 0
repos/cpp/swift/tools/swift-reflection-dump/swift-reflection-dump.cpp,"ObjectMemoryReader::ObjectMemoryReader( const std :: vector<const ObjectFile*> & ObjectFiles)",4, 4, 2, 0
repos/cpp/swift/tools/swift-reflection-dump/swift-reflection-dump.cpp,"ObjectMemoryReader::queryDataLayout( DataLayoutQueryType type , void * inBuffer , void * outBuffer)",17, 4, 2, 0
repos/cpp/swift/tools/swift-reflection-dump/swift-reflection-dump.cpp,"ObjectMemoryReader::getSymbolAddress( const std :: string & name)",11, 4, 2, 0
repos/cpp/swift/tools/swift-reflection-dump/swift-reflection-dump.cpp,"ObjectMemoryReader::isAddressValid( RemoteAddress addr , uint64_t size) const",14, 4, 2, 0
repos/cpp/swift/tools/swift-reflection-dump/swift-reflection-dump.cpp,"ObjectMemoryReader::readBytes( RemoteAddress address , uint64_t size)",7, 4, 2, 0
repos/cpp/swift/tools/swift-reflection-dump/swift-reflection-dump.cpp,"ObjectMemoryReader::readString( RemoteAddress address , std :: string & dest)",9, 4, 2, 0
repos/cpp/swift/tools/swift-reflection-dump/swift-reflection-dump.cpp,"doDumpReflectionSections( ArrayRef<std::string> binaryFilenames , StringRef arch , ActionType action , std :: ostream & OS)",79, 2, 0, 0
repos/cpp/swift/tools/swift-reflection-dump/swift-reflection-dump.cpp,"main( int argc , char * argv [ ])",8, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"NullDebuggerClient::shouldGlobalize( Identifier Name , DeclKind Kind)",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"NullDebuggerClient::didGlobalize( Decl * D)",1, 41, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"NullDebuggerClient::lookupOverrides( DeclBaseName Name , DeclContext * DC , SourceLoc Loc , bool IsTypeLookup , ResultVector & RV)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"NullDebuggerClient::lookupAdditions( DeclBaseName Name , DeclContext * DC , SourceLoc Loc , bool IsTypeLookup , ResultVector & RV)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"NullDebuggerClient::getAsSILDebuggerClient()",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrivateDiscriminatorPreferenceClient::PrivateDiscriminatorPreferenceClient( ASTContext & C , StringRef DiscriminatorStr)",4, 60, 8, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrivateDiscriminatorPreferenceClient::getPreferredPrivateDiscriminator()",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"removeCodeCompletionTokens( llvm :: MemoryBuffer * Input , StringRef TokenName , unsigned * CodeCompletionOffset)",11, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doCodeCompletion( const CompilerInvocation & InitInvok , StringRef SourceFilename , StringRef SecondSourceFileName , StringRef CodeCompletionToken , bool CodeCompletionDiagnostics , bool CodeCompletionKeywords , bool CodeCompletionComments)",72, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doREPLCodeCompletion( const CompilerInvocation & InitInvok , StringRef SourceFilename)",39, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::PrintSyntaxColorWalker( SourceManager & SM , unsigned BufferID , llvm :: raw_ostream & OS , bool TerminalOutput)",11, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::walkToNodePre( SyntaxNode Node)",9, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::walkToNodePost( SyntaxNode Node)",14, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::wrap( SyntaxNodeKind Kind , bool Begin)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::shouldIgnore( SyntaxNode Node) const",9, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::getPtr( SourceLoc Loc) const",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::printSourceUntil( const char * Ptr)",15, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::wrapForTest( SyntaxNodeKind Kind , bool Begin)",30, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::wrapForTerminal( SyntaxNodeKind Kind , bool Begin)",37, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintSyntaxColorWalker::finished()",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doSyntaxColoring( const CompilerInvocation & InitInvok , StringRef SourceFilename , bool TerminalOutput , bool RunTypeChecker , bool Playground)",41, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doDumpImporterLookupTables( const CompilerInvocation & InitInvok , StringRef SourceFilename)",27, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::StructureAnnotator( SourceManager & SM , unsigned BufID)",6, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::printResult( raw_ostream & OS)",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::walkToSubStructurePre( SyntaxStructureNode Node)",21, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::tagRange( CharSourceRange Range , StringRef tagName , const SyntaxStructureNode & Node)",12, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::getTagName( SyntaxStructureKind K)",42, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::getTagName( SyntaxStructureElementKind K)",11, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::walkToSubStructurePost( SyntaxStructureNode Node)",6, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::checkNode( const SyntaxStructureNode & Node , const SyntaxStructureNode * Parent)",4, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::checkRange( CharSourceRange Range , const SyntaxStructureNode * Parent)",12, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"StructureAnnotator::removeCheckLines( StringRef Input)",16, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doStructureAnnotation( const CompilerInvocation & InitInvok , StringRef SourceFilename)",24, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::AnnotationPrinter( SourceManager & SM , unsigned BufferID , llvm :: raw_ostream & OS , bool TerminalOutput)",11, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::finished()",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::SemanticSourceEntity::SemanticSourceEntity( CharSourceRange Range , ValueDecl * Dcl , TypeDecl * CtorTyRef , bool IsRef)",8, 24, 8, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::SemanticSourceEntity::SemanticSourceEntity( CharSourceRange Range , ModuleEntity Mod)",4, 20, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::SemanticSourceEntity::SemanticSourceEntity( CharSourceRange Range , ValueDecl * Dcl , Identifier argName)",7, 23, 8, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::walkToDeclPre( Decl * D , CharSourceRange Range)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type Ty , ReferenceMetaData Data)",6, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::visitSubscriptReference( ValueDecl * D , CharSourceRange Range , Optional<AccessKind> AccKind , bool IsOpenBracket)",6, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::visitCallArgName( Identifier Name , CharSourceRange Range , ValueDecl * D)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::visitModuleReference( ModuleEntity Mod , CharSourceRange Range)",4, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::annotateSourceEntity( const SemanticSourceEntity & Entity)",17, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::printSourceUntil( const char * Ptr)",13, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::printLoc( SourceLoc Loc , raw_ostream & OS)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::wrapForTest( const SemanticSourceEntity & Entity , StringRef Text)",53, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotationPrinter::wrapForTerminal( const SemanticSourceEntity & Entity , StringRef Text)",37, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doSemanticAnnotation( const CompilerInvocation & InitInvok , StringRef SourceFilename , bool TerminalOutput)",22, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doInputCompletenessTest( StringRef SourceFilename)",19, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"getModuleByFullName( ASTContext & Context , StringRef ModuleName)",14, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"getModuleByFullName( ASTContext & Context , Identifier ModuleName)",7, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintAST( const CompilerInvocation & InitInvok , StringRef SourceFilename , bool RunTypeChecker , const PrintOptions & Options , StringRef MangledNameToFind , StringRef DebugClientDiscriminator)",50, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintLocalTypes( const CompilerInvocation & InitInvok , const std :: vector<std::string> ModulesToPrint)",111, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printDeclPre( const Decl * D , Optional<BracketOptions> Bracket)",19, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printDeclLoc( const Decl * D)",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printDeclNameOrSignatureEndLoc( const Decl * D)",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printDeclPost( const Decl * D , Optional<BracketOptions> Bracket)",6, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printStructurePre( PrintStructureKind Kind , const Decl * D)",4, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printStructurePost( PrintStructureKind Kind , const Decl * D)",4, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printSynthesizedExtensionPre( const ExtensionDecl * ED , TypeOrExtensionDecl Target , Optional<BracketOptions> Bracket)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printSynthesizedExtensionPost( const ExtensionDecl * ED , TypeOrExtensionDecl Target , Optional<BracketOptions> Bracket)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printTypeRef( Type T , const TypeDecl * TD , Identifier Name)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"AnnotatingPrinter::printModuleRef( ModuleEntity Mod , Identifier Name)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"GroupNamesPrinter::GroupNamesPrinter( raw_ostream & OS)",1, 49, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"GroupNamesPrinter::~GroupNamesPrinter()",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"GroupNamesPrinter::addDecl( const Decl * D)",9, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintModuleGroups( const CompilerInvocation & InitInvok , const std :: vector<std::string> ModulesToPrint)",44, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintModules( const CompilerInvocation & InitInvok , const std :: vector<std::string> ModulesToPrint , const std :: vector<std::string> GroupsToPrint , ide :: ModuleTraversalOptions TraversalOptions , const PrintOptions & Options , bool AnnotatePrint , bool SynthesizeExtensions)",80, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintHeaders( const CompilerInvocation & InitInvok , const std :: vector<std::string> HeadersToPrint , const PrintOptions & Options , bool AnnotatePrint)",51, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintSwiftFileInterface( const CompilerInvocation & InitInvok , StringRef SourceFilename , bool AnnotatePrint)",28, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintDecls( const CompilerInvocation & InitInvok , StringRef SourceFilename , ArrayRef<std::string> DeclsToPrint , const PrintOptions & Options , bool AnnotatePrint)",52, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTTypePrinter::ASTTypePrinter( SourceManager & SM , const PrintOptions & Options)",2, 54, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTTypePrinter::walkToDeclPre( Decl * D)",11, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTTypePrinter::walkToDeclPost( Decl * D)",4, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTTypePrinter::walkToExprPre( Expr * E)",24, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTTypePrinter::walkToExprPost( Expr * E)",4, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintTypes( const CompilerInvocation & InitInvok , StringRef SourceFilename , bool FullyQualifiedTypes)",22, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTDocCommentDumper::ASTDocCommentDumper()",1, 46, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTDocCommentDumper::walkToDeclPre( Decl * D)",11, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTCommentPrinter::ASTCommentPrinter( SourceManager & SM , XMLValidator & TheXMLValidator)",2, 70, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTCommentPrinter::printWithEscaping( StringRef Str)",12, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTCommentPrinter::printDeclName( const ValueDecl * VD)",45, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTCommentPrinter::printRawComment( const RawComment & RC)",11, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTCommentPrinter::printBriefComment( StringRef Brief)",10, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTCommentPrinter::printDocComment( const Decl * D)",47, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"ASTCommentPrinter::walkToDeclPre( Decl * D)",39, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doDumpComments( const CompilerInvocation & InitInvok , StringRef SourceFilename)",20, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintComments( const CompilerInvocation & InitInvok , StringRef SourceFilename , StringRef CommentsXMLSchema)",25, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintModuleComments( const CompilerInvocation & InitInvok , const std :: vector<std::string> ModulesToPrint , StringRef CommentsXMLSchema)",38, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintModuleImports( const CompilerInvocation & InitInvok , const std :: vector<std::string> ModulesToPrint)",50, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintTypeInterface( const CompilerInvocation & InitInvok , const StringRef FileName , const StringRef LCPair)",48, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintTypeInterfaceForTypeUsr( const CompilerInvocation & InitInvok , const StringRef FileName , const StringRef Usr)",21, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"USRPrinter::USRPrinter( SourceManager & SM , unsigned BufferID , llvm :: raw_ostream & OS)",2, 45, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"USRPrinter::walkToDeclPre( Decl * D , CharSourceRange Range)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"USRPrinter::walkToExprPre( Expr * E)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"USRPrinter::printUSR( const ValueDecl * VD , SourceLoc Loc)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"USRPrinter::printLoc( SourceLoc Loc)",6, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"USRPrinter::shouldWalkIntoGenericParams()",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"TypeReconstructWalker::TypeReconstructWalker( ASTContext & Ctx , llvm :: raw_ostream & Stream)",2, 36, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"TypeReconstructWalker::walkToDeclPre( Decl * D , CharSourceRange range)",8, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"TypeReconstructWalker::walkToDeclPost( Decl * D)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"TypeReconstructWalker::visitDeclReference( ValueDecl * D , CharSourceRange Range , TypeDecl * CtorTyRef , ExtensionDecl * ExtTyRef , Type T , ReferenceMetaData Data)",16, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"TypeReconstructWalker::tryDemangleType( Type T , const DeclContext * DC , CharSourceRange range)",16, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"TypeReconstructWalker::tryDemangleDecl( ValueDecl * VD , CharSourceRange range , bool isRef)",25, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doReconstructType( const CompilerInvocation & InitInvok , StringRef SourceFilename)",25, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintRangeInfo( const CompilerInvocation & InitInvok , StringRef SourceFileName , StringRef StartPos , StringRef EndPos)",43, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::printSymbolInfo( SymbolInfo SymInfo)",11, 6, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::PrintIndexDataConsumer( raw_ostream & OS , bool indexLocals = false)",2, 48, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::indexLocals()",1, 62, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::failed( StringRef error)",1, 45, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::recordHash( StringRef hash , bool isKnown)",1, 76, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::startDependency( StringRef name , StringRef path , bool isClangModule , bool isSystem , StringRef hash)",7, 6, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::finishDependency( bool isClangModule)",3, 6, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::startSourceEntity( const IndexSymbol & symbol)",20, 6, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::finishSourceEntity( SymbolInfo symInfo , SymbolRoleSet roles)",3, 6, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"PrintIndexDataConsumer::finish()",1, 30, 4, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintIndexedSymbols( const CompilerInvocation & InitInvok , StringRef SourceFileName , bool indexLocals)",33, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintIndexedSymbolsFromModule( const CompilerInvocation & InitInvok , StringRef ModuleName)",31, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doPrintUSRs( const CompilerInvocation & InitInvok , StringRef SourceFilename)",21, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doTestCreateCompilerInvocation( ArrayRef<const char*> Args)",19, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"doTestCompilerInvocationFromModule( StringRef ModuleFilePath)",15, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/swift-ide-test/swift-ide-test.cpp,"main( int argc , char * argv [ ])",403, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/XMLValidator.cpp,"XMLValidator::XMLValidator()",1, 61, 0, 0
repos/cpp/swift/tools/swift-ide-test/XMLValidator.cpp,"XMLValidator::~XMLValidator()",1, 47, 0, 0
repos/cpp/swift/tools/swift-ide-test/XMLValidator.cpp,"XMLValidator::setSchema( StringRef FileName)",4, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/XMLValidator.cpp,"XMLValidator::validate( const std :: string & XML)",33, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/XMLValidator.cpp,"XMLValidator::XMLValidator()",1, 61, 0, 0
repos/cpp/swift/tools/swift-ide-test/XMLValidator.cpp,"XMLValidator::~XMLValidator()",1, 47, 0, 0
repos/cpp/swift/tools/swift-ide-test/XMLValidator.cpp,"XMLValidator::setSchema( StringRef FileName)",1, 52, 0, 0
repos/cpp/swift/tools/swift-ide-test/XMLValidator.cpp,"XMLValidator::validate( const std :: string & XML)",3, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"swift::sma::operator ==( const DeclAttributes & LHS , const DeclAttributes & RHS)",8, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"swift::sma::NestedDecls::isEmpty() const",6, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"swift::sma::operator ==( const NestedDecls & LHS , const NestedDecls & RHS)",4, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<std::shared_ptr<T>>::mapping( IO & io , std :: shared_ptr<T> & Ptr)",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::DeclAttributes>::mapping( IO & io , :: swift :: sma :: DeclAttributes & DA)",5, 4, 0, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::GenericParam>::mapping( IO & io , :: swift :: sma :: GenericParam & ND)",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::ConformanceRequirement>::mapping( IO & io , :: swift :: sma :: ConformanceRequirement & CR)",4, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::SameTypeRequirement>::mapping( IO & io , :: swift :: sma :: SameTypeRequirement & STR)",4, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::GenericSignature>::mapping( IO & io , :: swift :: sma :: GenericSignature & GS)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::Module>::mapping( IO & io , :: swift :: sma :: Module & M)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::StructDecl>::mapping( IO & io , :: swift :: sma :: StructDecl & SD)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::EnumCaseDecl>::mapping( IO & io , :: swift :: sma :: EnumCaseDecl & ECD)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::EnumDecl>::mapping( IO & io , :: swift :: sma :: EnumDecl & ED)",9, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::ClassDecl>::mapping( IO & io , :: swift :: sma :: ClassDecl & CD)",8, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::ProtocolDecl>::mapping( IO & io , :: swift :: sma :: ProtocolDecl & PD)",6, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::TypealiasDecl>::mapping( IO & io , :: swift :: sma :: TypealiasDecl & TD)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::AssociatedTypeDecl>::mapping( IO & io , :: swift :: sma :: AssociatedTypeDecl & ATD)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::VarDecl>::mapping( IO & io , :: swift :: sma :: VarDecl & VD)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::LetDecl>::mapping( IO & io , :: swift :: sma :: LetDecl & LD)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::FuncParam>::mapping( IO & io , :: swift :: sma :: FuncParam & FP)",6, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::FuncDecl>::mapping( IO & io , :: swift :: sma :: FuncDecl & FD)",8, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::ScalarEnumerationTraits<::swift::sma::InitializerKind>::enumeration( IO & io , :: swift :: sma :: InitializerKind & Value)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::ScalarEnumerationTraits<::swift::sma::InitializerFailability>::enumeration( IO & io , :: swift :: sma :: InitializerFailability & Value)",8, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::InitDecl>::mapping( IO & io , :: swift :: sma :: InitDecl & ID)",8, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::DeinitDecl>::mapping( IO & io , :: swift :: sma :: DeinitDecl & DD)",4, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"llvm::yaml::MappingTraits<::swift::sma::NestedDecls>::mapping( IO & io , :: swift :: sma :: NestedDecls & ND)",14, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visit( const Decl * D)",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::takeNestedDecls()",1, 69, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::convertToIdentifier( Identifier I) const",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::convertToTypeName( Type T) const",9, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::convertToOptionalTypeName( Type T) const",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::convertToGenericSignature( GenericSignature * GS)",31, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::collectProtocolConformances( NominalTypeDecl * NTD)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitDecl( Decl * D)",3, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitStructDecl( StructDecl * SD)",11, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitEnumDecl( EnumDecl * ED)",12, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitClassDecl( ClassDecl * CD)",12, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitProtocolDecl( ProtocolDecl * PD)",9, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitTypeAliasDecl( TypeAliasDecl * TAD)",8, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitAssociatedTypeDecl( AssociatedTypeDecl * ATD)",10, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitFuncDecl( FuncDecl * FD)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitConstructorDecl( ConstructorDecl * CD)",5, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"SMAModelGenerator::visitDestructorDecl( DestructorDecl * DD)",7, 4, 2, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"createSMAModel( ModuleDecl * M)",19, 2, 0, 0
repos/cpp/swift/tools/swift-ide-test/ModuleAPIDiff.cpp,"swift::doGenerateModuleAPIDescription( StringRef MainExecutablePath , ArrayRef<std::string> Args)",43, 2, 0, 0
repos/cpp/swift/tools/swift-llvm-opt/LLVMOpt.cpp,"GetCodeGenOptLevel()",6, 2, 0, 0
repos/cpp/swift/tools/swift-llvm-opt/LLVMOpt.cpp,"getTargetMachine( llvm :: Triple TheTriple , StringRef CPUStr , StringRef FeaturesStr , const llvm :: TargetOptions & Options)",14, 2, 0, 0
repos/cpp/swift/tools/swift-llvm-opt/LLVMOpt.cpp,"dumpOutput( llvm :: Module & M , llvm :: raw_ostream & os)",6, 2, 0, 0
repos/cpp/swift/tools/swift-llvm-opt/LLVMOpt.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/swift-llvm-opt/LLVMOpt.cpp,"addPass( legacy :: PassManagerBase & PM , Pass * P)",14, 2, 0, 0
repos/cpp/swift/tools/swift-llvm-opt/LLVMOpt.cpp,"runSpecificPasses( StringRef Binary , llvm :: Module * M , llvm :: TargetMachine * TM , llvm :: Triple & ModuleTriple)",38, 2, 0, 0
repos/cpp/swift/tools/swift-llvm-opt/LLVMOpt.cpp,"main( int argc , char ** argv)",105, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"contains( std :: vector<T*> & container , T * instance)",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"contains( ArrayRef<T> container , T instance)",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SequentialNodeMatcher::SequentialNodeMatcher( ArrayRef<SDKNode*> Left , ArrayRef<SDKNode*> Right , MatchedNodeListener & Listener)",4, 74, 26, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SequentialNodeMatcher::match()",13, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"BestMatchMatcher::internalCanMatch( NodePtr L , NodePtr R)",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"BestMatchMatcher::findBestMatch( NodePtr Pin , NodeVector & Candidates)",11, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"BestMatchMatcher::BestMatchMatcher( NodeVector & Left , NodeVector & Right , llvm :: function_ref<bool(NodePtr,NodePtr)> CanMatch , llvm :: function_ref<bool(NodeMatch,NodeMatch)> IsFirstMatchBetter , NodeMatchReason Reason , MatchedNodeListener & Listener)",8, 23, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"BestMatchMatcher::match()",8, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::handleUnmatch( NodeVector & Matched , NodeVector & All , bool Left)",10, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::detectFuncToProperty( SDKNode * R , SDKNode * A)",21, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::isAnonymousEnum( SDKNodeDecl * N)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::isNominalEnum( SDKNodeDecl * N)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::getLastPartOfUsr( SDKNodeDecl * N)",6, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::detectTypeAliasChange( SDKNodeDecl * R , SDKNodeDecl * A)",11, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::detectModernizeEnum( SDKNodeDecl * R , SDKNodeDecl * A)",23, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::detectSameAnonymousEnum( SDKNodeDecl * R , SDKNodeDecl * A)",11, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::isNameTooSimple( StringRef N)",7, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::isSimilarName( StringRef L , StringRef R)",14, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::isDeclKindCrossable( DeclKind DK1 , DeclKind DK2 , bool First)",7, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::isRename( NodePtr L , NodePtr R)",12, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::isBetterMatch( NodeMatch Match1 , NodeMatch Match2)",26, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::foundMatch( NodePtr R , NodePtr A , NodeMatchReason Reason)",5, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::RemovedAddedNodeMatcher( NodeVector & Removed , NodeVector & Added , MatchedNodeListener & Listener)",3, 64, 26, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RemovedAddedNodeMatcher::match()",35, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SameNameNodeMatcher::isUSRSame( SDKNode * L , SDKNode * R)",7, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SameNameNodeMatcher::getNameMatchKind( SDKNode * L , SDKNode * R)",14, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SameNameNodeMatcher::getNameMatchKindPriority( SDKNodeKind Kind)",13, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SameNameNodeMatcher::findBestNameMatch( ArrayRef<NameMatchCandidate> Candidates , ArrayRef<NameMatchKind> Kinds)",8, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SameNameNodeMatcher::SameNameNodeMatcher( ArrayRef<SDKNode*> Left , ArrayRef<SDKNode*> Right , MatchedNodeListener & Listener)",3, 77, 22, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SameNameNodeMatcher::match()",38, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SequentialRecursiveMatcher::matchInternal( NodePtr L , NodePtr R)",11, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SequentialRecursiveMatcher::SequentialRecursiveMatcher( NodePtr & Left , NodePtr & Right , MatchedNodeListener & Listener)",3, 66, 29, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SequentialRecursiveMatcher::match()",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SDKTreeDiffPass::~SDKTreeDiffPass()",1, 32, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"detectRename( SDKNode * L , SDKNode * R)",8, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"isOwnershipEquivalent( ReferenceOwnership Left , ReferenceOwnership Right)",10, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"swift::ide::api::SDKNodeDeclType::diagnose( SDKNode * Right)",34, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"swift::ide::api::SDKNodeDeclAbstractFunc::diagnose( SDKNode * Right)",12, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"swift::ide::api::SDKNodeDeclFunction::diagnose( SDKNode * Right)",17, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"swift::ide::api::SDKNodeDeclSubscript::diagnose( SDKNode * Right)",10, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"swift::ide::api::SDKNodeDecl::diagnose( SDKNode * Right)",67, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"swift::ide::api::SDKNodeDeclOperator::diagnose( SDKNode * Right)",10, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"swift::ide::api::SDKNodeDeclVar::diagnose( SDKNode * Right)",21, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"shouldDiagnoseType( SDKNodeType * T)",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"swift::ide::api::SDKNodeType::diagnose( SDKNode * Right)",42, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"swift::ide::api::SDKNodeTypeFunc::diagnose( SDKNode * Right)",14, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"PrunePass::removeCommon( NodeVector & Left , NodeVector & Right)",6, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"PrunePass::removeCommonChildren( NodePtr Left , NodePtr Right)",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"PrunePass::printSpaces( llvm :: raw_ostream & OS , SDKNode * N)",5, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"PrunePass::debugMatch( SDKNode * Left , SDKNode * Right , NodeMatchReason Reason , llvm :: raw_ostream & OS)",22, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"PrunePass::PrunePass( SDKContext & Ctx)",1, 77, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"PrunePass::PrunePass( SDKContext & Ctx , llvm :: StringSet<> prWhitelist)",4, 52, 4, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"PrunePass::foundMatch( NodePtr Left , NodePtr Right , NodeMatchReason Reason)",139, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"PrunePass::pass( NodePtr Left , NodePtr Right)",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeMemberDiffFinder::visit( NodePtr node)",54, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeMemberDiffFinder::TypeMemberDiffFinder( SDKNodeRoot * diffAgainst)",2, 32, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeMemberDiffFinder::findDiffsFor( NodePtr ptr)",1, 73, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeMemberDiffFinder::getDiffs() const",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeMemberDiffFinder::dump() const",1, 44, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeAliasDiffFinder::checkTypeMatch( const SDKNodeType * aliasType , const SDKNodeType * rawType)",14, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeAliasDiffFinder::visit( NodePtr node)",16, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeAliasDiffFinder::TypeAliasDiffFinder( SDKNodeRoot * leftRoot , SDKNodeRoot * rightRoot , NodeMap & result)",3, 24, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeAliasDiffFinder::search()",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SearchVisitor::SearchVisitor( llvm :: function_ref<bool(NodePtr)> Predicate)",2, 28, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SearchVisitor::visit( NodePtr Node)",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"SearchVisitor::search( NodePtr Node)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectWrapOptional( SDKNodeType * Node , SDKNodeType * Counter)",11, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectWrapImplicitOptional( SDKNodeType * Node , SDKNodeType * Counter)",12, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectOptionalUpdate( SDKNodeType * Node , SDKNodeType * Counter)",11, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectUnmanagedUpdate( SDKNodeType * Node , SDKNodeType * Counter)",9, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectTypeRewritten( SDKNodeType * Node , SDKNodeType * Counter)",13, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::isRawType( const SDKNodeType * T , StringRef & Raw)",14, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::getStringRepresentableChange( SDKNode * L , SDKNode * R , StringRef & Raw)",19, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectDictionaryKeyChangeInternal( SDKNodeType * L , SDKNodeType * R , StringRef & Raw)",14, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectDictionaryKeyChange( SDKNodeType * L , SDKNodeType * R)",36, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectArrayMemberChangeInternal( SDKNodeType * L , SDKNodeType * R , StringRef & Raw)",13, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectArrayMemberChange( SDKNodeType * L , SDKNodeType * R)",36, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detectSimpleStringRepresentableUpdate( SDKNodeType * L , SDKNodeType * R)",35, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::isUnhandledCase( SDKNodeType * Node , SDKNodeType * Counter)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::clearTypeRewritten( SDKNode * N)",7, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::InterfaceTypeChangeDetector( bool IsVisitingLeft)",2, 38, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"InterfaceTypeChangeDetector::detect( SDKNode * Left , SDKNode * Right)",25, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"ChangeRefinementPass::ChangeRefinementPass( UpdatedNodesMap & UpdateMap)",2, 67, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"ChangeRefinementPass::pass( NodePtr Left , NodePtr Right)",8, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"ChangeRefinementPass::visit( NodePtr Node)",8, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"printNode( llvm :: raw_ostream & os , NodePtr node)",11, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"TypeMemberDiffFinder::dump( llvm :: raw_ostream & os) const",14, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"removeRedundantAndSort( std :: vector<T> & Diffs)",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"serializeDiffs( llvm :: raw_ostream & Fs , std :: vector<T> & Diffs)",12, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"isTypeChangeInterestedFuncNode( NodePtr Decl)",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::isInterested( SDKNodeDecl * Decl , NodeAnnotation Anno)",14, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::doesAncestorHaveTypeRewritten()",5, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::getLeftComment( NodePtr Node , NodeAnnotation Anno)",23, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::getRightComment( NodePtr Node , NodeAnnotation Anno)",28, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::handleAnnotations( NodePtr Node , SDKNodeDecl * NonTypeParent , StringRef Index , ArrayRef<NodeAnnotation> Annotations)",13, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::visit( NodePtr Node)",20, 4, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::getIndexString( NodePtr Node)",14, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::collectIndexes( NodePtr Node , std :: vector<int> & Indexes)",8, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::DiffItemEmitter( DiffVector & AllItems)",1, 64, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiffItemEmitter::collectDiffItems( NodePtr Root , DiffVector & DV)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiagnosisEmitter::DiagnosisEmitter( SDKContext & Ctx)",4, 70, 4, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiagnosisEmitter::collectAddedDecls( NodePtr Root , std :: set<SDKNodeDecl*> & Results)",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiagnosisEmitter::findAddedDecl( const SDKNodeDecl * Root)",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiagnosisEmitter::findTypeAliasDecl( const SDKNodeDecl * Node)",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiagnosisEmitter::diagnosis( NodePtr LeftRoot , NodePtr RightRoot , SDKContext & Ctx)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiagnosisEmitter::handle( const SDKNodeDecl * Node , NodeAnnotation Anno)",71, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiagnosisEmitter::visitDecl( SDKNodeDecl * Node)",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"DiagnosisEmitter::visit( NodePtr Node)",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"NoEscapingFuncEmitter::NoEscapingFuncEmitter( NoEscapeFuncParamVector & AllItems)",1, 83, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"NoEscapingFuncEmitter::visit( NodePtr Node)",13, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"NoEscapingFuncEmitter::collectDiffItems( NodePtr Root , NoEscapeFuncParamVector & DV)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RenameDetectorForMemberDiff::RenameDetectorForMemberDiff()",1, 77, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RenameDetectorForMemberDiff::foundMatch( NodePtr Left , NodePtr Right , NodeMatchReason Reason)",7, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"RenameDetectorForMemberDiff::workOn( NodePtr Left , NodePtr Right)",14, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"findSelfIndex( SDKNode * Node)",13, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"findTypeMemberDiffs( NodePtr leftSDKRoot , NodePtr rightSDKRoot , TypeMemberDiffVector & out)",26, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"diagnoseModuleChange( StringRef LeftPath , StringRef RightPath , StringRef OutputPath , CheckerOptions Opts , llvm :: StringSet<> ProtocolReqWhitelist)",41, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"populateAliasChanges( NodeMap & AliasMap , DiffVector & AllItems , const bool isRevert)",20, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"compareSDKs( StringRef LeftPath , StringRef RightPath , StringRef DiffPath , llvm :: StringSet<> & IgnoredRemoveUsrs , CheckerOptions Opts)",91, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"readFileLineByLine( StringRef Path , llvm :: StringSet<> & Lines)",21, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"prepareForDump( const char * Main , CompilerInvocation & InitInvok , llvm :: StringSet<> & Modules)",65, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"readIgnoredUsrs( llvm :: StringSet<> & IgnoredUsrs)",10, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"deserializeDiffItems( APIDiffItemStore & Store , StringRef DiffPath , StringRef OutputPath)",8, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"deserializeNameCorrection( APIDiffItemStore & Store , StringRef OutputPath)",21, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"getCheckOpts()",11, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/swift-api-digester.cpp,"main( int argc , char * argv [ ])",79, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleDiagsConsumer.cpp,"getCategoryName( uint32_t ID)",45, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleDiagsConsumer.cpp,"swift::ide::api::ModuleDifferDiagsConsumer::ModuleDifferDiagsConsumer( bool DiagnoseModuleDiff , llvm :: raw_ostream & OS)",11, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleDiagsConsumer.cpp,"swift::ide::api::ModuleDifferDiagsConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const DiagnosticInfo & Info)",21, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleDiagsConsumer.cpp,"swift::ide::api::ModuleDifferDiagsConsumer::~ModuleDifferDiagsConsumer()",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getAttrName( DeclAttrKind Kind)",10, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SDKNodeInitInfo::SDKNodeInitInfo( SDKContext & Ctx)",1, 49, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKContext::SDKContext( CheckerOptions Opts)",14, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeRoot::registerDescendant( SDKNode * D)",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::SDKNode( SDKNodeInitInfo Info , SDKNodeKind Kind)",2, 77, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeRoot::SDKNodeRoot( SDKNodeInitInfo Info)",1, 84, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::SDKNodeDecl( SDKNodeInitInfo Info , SDKNodeKind Kind)",11, 80, 8, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::SDKNodeType( SDKNodeInitInfo Info , SDKNodeKind Kind)",4, 51, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeTypeNominal::SDKNodeTypeNominal( SDKNodeInitInfo Info)",2, 64, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeTypeFunc::SDKNodeTypeFunc( SDKNodeInitInfo Info)",2, 46, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeTypeAlias::SDKNodeTypeAlias( SDKNodeInitInfo Info)",2, 47, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclType::SDKNodeDeclType( SDKNodeInitInfo Info)",4, 43, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeConformance::SDKNodeConformance( SDKNodeInitInfo Info)",2, 45, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeTypeWitness::SDKNodeTypeWitness( SDKNodeInitInfo Info)",2, 45, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclOperator::SDKNodeDeclOperator( SDKNodeInitInfo Info)",2, 50, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclTypeAlias::SDKNodeDeclTypeAlias( SDKNodeInitInfo Info)",2, 51, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclVar::SDKNodeDeclVar( SDKNodeInitInfo Info)",4, 33, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclAbstractFunc::SDKNodeDeclAbstractFunc( SDKNodeInitInfo Info , SDKNodeKind Kind)",3, 50, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclFunction::SDKNodeDeclFunction( SDKNodeInitInfo Info)",3, 37, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclConstructor::SDKNodeDeclConstructor( SDKNodeInitInfo Info)",2, 65, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclGetter::SDKNodeDeclGetter( SDKNodeInitInfo Info)",2, 60, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclSetter::SDKNodeDeclSetter( SDKNodeInitInfo Info)",2, 60, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclAssociatedType::SDKNodeDeclAssociatedType( SDKNodeInitInfo Info)",2, 57, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclSubscript::SDKNodeDeclSubscript( SDKNodeInitInfo Info)",4, 60, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::getHeaderName() const",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclVar::getGetter() const",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclVar::getSetter() const",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclVar::getType() const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"UpdatedNodesMap::findUpdateCounterpart( const SDKNode * Node) const",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::getChildIndex( const SDKNode * Child) const",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::getOnlyChild() const",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::getRootNode() const",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::addChild( SDKNode * Child)",14, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::childAt( unsigned I) const",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::removeChild( NodePtr C)",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::annotate( NodeAnnotation Anno , StringRef Comment)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::removeAnnotate( NodeAnnotation Anno)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::getAnnotateComment( NodeAnnotation Anno) const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::getAnnotations( std :: vector<NodeAnnotation> & Scratch) const",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::isAnnotatedAs( NodeAnnotation Anno) const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::preorderVisit( NodePtr Root , SDKNodeVisitor & Visitor)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::postorderVisit( NodePtr Root , SDKNodeVisitor & Visitor)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeVectorViewer::getNext( VectorIt Start)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeVectorViewer::ViewerIterator::operator ++()",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeVectorViewer::begin()",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeVectorViewer::end()",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::getTypeKind() const",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::getTypeAttributes() const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::addTypeAttribute( TypeAttrKind AttrKind)",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::hasTypeAttribute( TypeAttrKind DAKind) const",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::getParamValueOwnership() const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::getTypeRoleDescription() const",29, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeRoot::getInstance( SDKContext & Ctx)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::getScreenInfo() const",15, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::printFullyQualifiedName( llvm :: raw_ostream & OS) const",8, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::getFullyQualifiedName() const",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::isNonOptionalProtocolRequirement() const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::hasDeclAttribute( DeclAttrKind DAKind) const",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::getDeclAttributes() const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::hasAttributeChange( const SDKNodeDecl & Another) const",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::hasAttributeChange( const SDKNodeType & Another) const",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::getClosestParentDecl() const",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclType::addConformance( SDKNode * Conf)",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeTypeWitness::getUnderlyingType() const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeTypeWitness::getWitnessedTypeName() const",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclType::getSuperclass() const",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclType::lookupChildByPrintedName( StringRef Name) const",11, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclType::getRawValueType() const",8, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclType::isConformingTo( KnownProtocolKind Kind) const",10, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclAbstractFunc::getTypeRoleDescription( SDKContext & Ctx , unsigned Index)",11, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"parseKeyKind( StringRef Content)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getKeyContent( SDKContext & Ctx , KeyKind Kind)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::constructSDKNode( SDKContext & Ctx , llvm :: yaml :: MappingNode * Node)",128, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::hasSameChildren( const SDKNode & Other) const",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::nodeSetDifference( ArrayRef<SDKNode*> Left , ArrayRef<SDKNode*> Right , NodeVector & LeftMinusRight , NodeVector & RightMinusLeft)",24, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"hasSameContents( ArrayRef<SDKNode*> Left , ArrayRef<SDKNode*> Right)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"hasSameParameterFlags( const SDKNodeType * Left , const SDKNodeType * Right)",8, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"isSDKNodeEqual( SDKContext & Ctx , const SDKNode & L , const SDKNode & R)",129, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKContext::isEqual( const SDKNode & Left , const SDKNode & Right)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKContext::getAccessLevel( const ValueDecl * VD) const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::operator ==( const SDKNode & Other) const",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDumpVisitor::dumpSpace( int Num)",6, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDumpVisitor::visit( NodePtr Node)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDumpVisitor::SDKNodeDumpVisitor()",1, 27, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getPrintedName( SDKContext & Ctx , Type Ty , bool IsImplicitlyUnwrappedOptional = false)",12, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getTypeName( SDKContext & Ctx , Type Ty , bool IsImplicitlyUnwrappedOptional)",25, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"calculateUsr( SDKContext & Ctx , ValueDecl * VD)",8, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"calculateLocation( SDKContext & SDKCtx , Decl * D)",16, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"isFunctionTypeNoEscape( Type Ty)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getEscapedName( DeclBaseName name)",16, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getPrintedName( SDKContext & Ctx , ValueDecl * VD)",21, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"isFuncThrowing( ValueDecl * VD)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getSelfIndex( ValueDecl * VD)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getReferenceOwnership( ValueDecl * VD)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getCanonicalRequirement( Requirement & Req)",10, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"printGenericSignature( SDKContext & Ctx , Decl * D)",34, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getSimilarMemberCount( NominalTypeDecl * NTD , ValueDecl * VD , llvm :: function_ref<bool(Decl*)> Check)",10, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKContext::getFixedBinaryOrder( ValueDecl * VD) const",32, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeInitInfo::SDKNodeInitInfo( SDKContext & Ctx , Type Ty , TypeInitInfo Info)",12, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeInitInfo::SDKNodeInitInfo( SDKContext & Ctx , Decl * D)",12, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeInitInfo::SDKNodeInitInfo( SDKContext & Ctx , OperatorDecl * OD)",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeInitInfo::SDKNodeInitInfo( SDKContext & Ctx , ValueDecl * VD)",57, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeInitInfo::createSDKNode( SDKNodeKind Kind)",10, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructTypeNode( Type T , TypeInitInfo Info)",50, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::createParameterNodes( ParameterList * PL)",21, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructFunctionNode( FuncDecl * FD , SDKNodeKind Kind)",12, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructInitNode( ConstructorDecl * CD)",8, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SDKContext::shouldIgnore( Decl * D , const Decl * Parent) const",53, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructTypeDeclNode( NominalTypeDecl * NTD)",11, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructExternalExtensionNode( NominalTypeDecl * NTD , ArrayRef<ExtensionDecl*> AllExts)",12, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructVarNode( ValueDecl * VD)",17, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructTypeAliasNode( TypeAliasDecl * TAD)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructAssociatedTypeNode( AssociatedTypeDecl * ATD)",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructSubscriptDeclNode( SubscriptDecl * SD)",8, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::addMembersToRoot( SDKNode * Root , IterableDeclContext * Context)",30, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructTypeWitnessNode( AssociatedTypeDecl * Assoc , Type Ty)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::constructConformanceNode( ProtocolConformance * Conform)",13, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::SwiftDeclCollector::addConformancesToTypeDecl( SDKNodeDeclType * Root , NominalTypeDecl * NTD)",8, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SwiftDeclCollector::printTopLevelNames()",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SwiftDeclCollector::lookupVisibleDecls( ArrayRef<ModuleDecl*> Modules)",47, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SwiftDeclCollector::constructOperatorDeclNode( OperatorDecl * OD)",3, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SwiftDeclCollector::processDecl( Decl * D)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SwiftDeclCollector::processValueDecl( ValueDecl * VD)",13, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SwiftDeclCollector::foundDecl( ValueDecl * VD , DeclVisibilityKind Reason)",9, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::output( json :: Output & out , KeyKind Key , bool Value)",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::output( json :: Output & out , KeyKind Key , StringRef Value)",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNode::jsonize( json :: Output & out)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDecl::jsonize( json :: Output & out)",22, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclAbstractFunc::jsonize( json :: Output & out)",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclFunction::jsonize( json :: Output & out)",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclType::jsonize( json :: Output & out)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeType::jsonize( json :: Output & out)",6, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeTypeNominal::jsonize( json :: Output & out)",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclSubscript::jsonize( json :: Output & out)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SDKNodeDeclVar::jsonize( json :: Output & out)",7, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ScalarEnumerationTraits<TypeAttrKind>::enumeration( Output & out , TypeAttrKind & value)",4, 4, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ScalarEnumerationTraits<DeclAttrKind>::enumeration( Output & out , DeclAttrKind & value)",4, 4, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ScalarEnumerationTraits<DeclKind>::enumeration( Output & out , DeclKind & value)",4, 4, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ObjectTraits<SDKNode*>::mapping( Output & out , SDKNode * & value)",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ArrayTraits<ArrayRef<SDKNode*>>::size( Output & out , ArrayRef<SDKNode*> & seq)",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ArrayTraits<ArrayRef<SDKNode*>>::element( Output & , ArrayRef<SDKNode*> & seq , size_t index)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ArrayTraits<ArrayRef<TypeAttrKind>>::size( Output & out , ArrayRef<TypeAttrKind> & seq)",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ArrayTraits<ArrayRef<TypeAttrKind>>::element( Output & , ArrayRef<TypeAttrKind> & seq , size_t index)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ArrayTraits<ArrayRef<DeclAttrKind>>::size( Output & out , ArrayRef<DeclAttrKind> & seq)",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ArrayTraits<ArrayRef<DeclAttrKind>>::element( Output & , ArrayRef<DeclAttrKind> & seq , size_t index)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ArrayTraits<ArrayRef<StringRef>>::size( Output & out , ArrayRef<StringRef> & seq)",3, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::json::ArrayTraits<ArrayRef<StringRef>>::element( Output & , ArrayRef<StringRef> & seq , size_t index)",4, 4, 2, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"emitSDKNodeRoot( llvm :: raw_ostream & os , SDKNode * & Root)",4, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"parseJsonEmit( SDKContext & Ctx , StringRef FileName)",23, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"getDumpFilePath( StringRef OutputDir , StringRef FileName)",11, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SwiftDeclCollector::deSerialize( StringRef Filename)",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"SwiftDeclCollector::serialize( StringRef Filename)",5, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::dumpSwiftModules( const CompilerInvocation & InitInvok , const llvm :: StringSet<> & ModuleNames , StringRef OutputDir , const std :: vector<std::string> PrintApis , CheckerOptions Opts)",56, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::dumpSDKContent( const CompilerInvocation & InitInvok , const llvm :: StringSet<> & ModuleNames , StringRef OutputFile , CheckerOptions Opts)",50, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::deserializeSDKDump( StringRef dumpPath , StringRef OutputPath , CheckerOptions Opts)",17, 2, 0, 0
repos/cpp/swift/tools/swift-api-digester/ModuleAnalyzerNodes.cpp,"swift::ide::api::findDeclUsr( StringRef dumpPath , CheckerOptions Opts)",30, 2, 0, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"FormatterDocument::FormatterDiagConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const swift :: DiagnosticInfo & Info)",9, 6, 4, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"FormatterDocument::FormatterDocument( std :: unique_ptr<llvm::MemoryBuffer> Buffer)",5, 4, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"FormatterDocument::updateCode( std :: unique_ptr<llvm::MemoryBuffer> Buffer)",11, 4, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"FormatterDocument::reformat( LineRange Range , CodeFormatOptions Options)",4, 4, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"FormatterDocument::memBuffer() const",3, 4, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"SwiftFormatInvocation::parseLineRange( StringRef Input , unsigned & FromLine , unsigned & ToLine)",5, 4, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"SwiftFormatInvocation::SwiftFormatInvocation( const std :: string & ExecPath)",2, 40, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"SwiftFormatInvocation::getOutputFilename()",1, 68, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"SwiftFormatInvocation::getInputFilenames()",1, 81, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"SwiftFormatInvocation::getLineRanges()",1, 73, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"SwiftFormatInvocation::parseArgs( ArrayRef<const char*> Args , DiagnosticEngine & Diags)",62, 4, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"SwiftFormatInvocation::format( StringRef Filename , DiagnosticEngine & Diags)",64, 4, 2, 0
repos/cpp/swift/tools/driver/swift_format_main.cpp,"swift_format_main( ArrayRef<const char*> Args , const char * Argv0 , void * MainAddr)",33, 2, 0, 0
repos/cpp/swift/tools/driver/driver.cpp,"getExecutablePath( const char * FirstArg)",4, 2, 0, 0
repos/cpp/swift/tools/driver/driver.cpp,"shouldRunAsSubcommand( StringRef ExecName , SmallString<256> & SubcommandName , const ArrayRef<const char*> Args , bool & isRepl)",40, 2, 0, 0
repos/cpp/swift/tools/driver/driver.cpp,"run_driver( StringRef ExecName , const ArrayRef<const char*> argv)",65, 2, 0, 0
repos/cpp/swift/tools/driver/driver.cpp,"main( int argc_ , const char ** argv_)",67, 2, 0, 0
repos/cpp/swift/tools/driver/modulewrap_main.cpp,"ModuleWrapInvocation::hasSingleInput() const",1, 69, 2, 0
repos/cpp/swift/tools/driver/modulewrap_main.cpp,"ModuleWrapInvocation::getFilenameOfFirstInput() const",3, 4, 2, 0
repos/cpp/swift/tools/driver/modulewrap_main.cpp,"ModuleWrapInvocation::setMainExecutablePath( const std :: string & Path)",3, 4, 2, 0
repos/cpp/swift/tools/driver/modulewrap_main.cpp,"ModuleWrapInvocation::getOutputFilename()",1, 68, 2, 0
repos/cpp/swift/tools/driver/modulewrap_main.cpp,"ModuleWrapInvocation::getInputFilenames()",1, 81, 2, 0
repos/cpp/swift/tools/driver/modulewrap_main.cpp,"ModuleWrapInvocation::getTargetTriple()",1, 59, 2, 0
repos/cpp/swift/tools/driver/modulewrap_main.cpp,"ModuleWrapInvocation::parseArgs( llvm :: ArrayRef<const char*> Args , DiagnosticEngine & Diags)",52, 4, 2, 0
repos/cpp/swift/tools/driver/modulewrap_main.cpp,"modulewrap_main( ArrayRef<const char*> Args , const char * Argv0 , void * MainAddr)",70, 2, 0, 0
repos/cpp/swift/tools/driver/autolink_extract_main.cpp,"AutolinkExtractInvocation::setMainExecutablePath( const std :: string & Path)",3, 4, 2, 0
repos/cpp/swift/tools/driver/autolink_extract_main.cpp,"AutolinkExtractInvocation::getOutputFilename()",3, 4, 2, 0
repos/cpp/swift/tools/driver/autolink_extract_main.cpp,"AutolinkExtractInvocation::getInputFilenames()",3, 4, 2, 0
repos/cpp/swift/tools/driver/autolink_extract_main.cpp,"AutolinkExtractInvocation::parseArgs( ArrayRef<const char*> Args , DiagnosticEngine & Diags)",47, 4, 2, 0
repos/cpp/swift/tools/driver/autolink_extract_main.cpp,"extractLinkerFlagsFromObjectFile( const llvm :: object :: ObjectFile * ObjectFile , std :: vector<std::string> & LinkerFlags)",20, 2, 0, 0
repos/cpp/swift/tools/driver/autolink_extract_main.cpp,"extractLinkerFlags( const llvm :: object :: Binary * Bin , CompilerInstance & Instance , StringRef BinaryFileName , std :: vector<std::string> & LinkerFlags)",37, 2, 0, 0
repos/cpp/swift/tools/driver/autolink_extract_main.cpp,"autolink_extract_main( ArrayRef<const char*> Args , const char * Argv0 , void * MainAddr)",55, 2, 0, 0
repos/cpp/swift/tools/driver/api_notes.cpp,"apinotes_main( ArrayRef<const char*> Args)",127, 2, 0, 0
repos/cpp/swift/tools/swift-refactor/swift-refactor.cpp,"doesFileExist( StringRef Path)",7, 2, 0, 0
repos/cpp/swift/tools/swift-refactor/swift-refactor.cpp,"convertToNameUsage( StringRef RoleString)",11, 2, 0, 0
repos/cpp/swift/tools/swift-refactor/swift-refactor.cpp,"getLocsByLabelOrPosition( StringRef LabelOrLineCol , std :: string & Buffer)",45, 2, 0, 0
repos/cpp/swift/tools/swift-refactor/swift-refactor.cpp,"getRenameLocs( unsigned BufferID , SourceManager & SM , ArrayRef<RefactorLoc> Locs , StringRef OldName , StringRef NewName , bool IsFunctionLike , bool IsNonProtocolType)",12, 2, 0, 0
repos/cpp/swift/tools/swift-refactor/swift-refactor.cpp,"getRange( unsigned BufferID , SourceManager & SM , RefactorLoc Start , RefactorLoc End)",14, 2, 0, 0
repos/cpp/swift/tools/swift-refactor/swift-refactor.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/swift-refactor/swift-refactor.cpp,"main( int argc , char * argv [ ])",150, 2, 0, 0
repos/cpp/swift/tools/sil-func-extractor/SILFunctionExtractor.cpp,"anchorForGetMainExecutable()",1, 37, 0, 0
repos/cpp/swift/tools/sil-func-extractor/SILFunctionExtractor.cpp,"getFunctionNames( std :: vector<std::string> & Names)",24, 2, 0, 0
repos/cpp/swift/tools/sil-func-extractor/SILFunctionExtractor.cpp,"stringInSortedArray( StringRef str , ArrayRef<std::string> list , llvm :: function_ref<bool(const std::string&,const std::string&)> && cmp)",12, 2, 0, 0
repos/cpp/swift/tools/sil-func-extractor/SILFunctionExtractor.cpp,"removeUnwantedFunctions( SILModule * M , ArrayRef<std::string> MangledNames , ArrayRef<std::string> DemangledNames)",57, 2, 0, 0
repos/cpp/swift/tools/sil-func-extractor/SILFunctionExtractor.cpp,"main( int argc , char ** argv)",157, 2, 0, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"YAMLNode::YAMLNode( Node :: Kind kind)",1, 56, 2, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"llvm::yaml::ScalarEnumerationTraits<swift::Demangle::Node::Kind>::enumeration( IO & io , swift :: Demangle :: Node :: Kind & value)",4, 4, 0, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"llvm::yaml::MappingTraits<YAMLNode*>::mapping( IO & io , YAMLNode * & node)",5, 4, 2, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"llvm::yaml::MappingTraits<YAMLNode>::mapping( IO & io , YAMLNode & node)",5, 4, 2, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"getNodeTreeAsYAML( llvm :: StringRef name , NodePointer root)",27, 2, 0, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"substrBefore( llvm :: StringRef whole , llvm :: StringRef part)",4, 2, 0, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"substrAfter( llvm :: StringRef whole , llvm :: StringRef part)",4, 2, 0, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"demangle( llvm :: raw_ostream & os , llvm :: StringRef name , swift :: Demangle :: Context & DCtx , const swift :: Demangle :: DemangleOptions & options)",13, 2, 0, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"demangleSTDIN( const swift :: Demangle :: DemangleOptions & options)",21, 2, 0, 0
repos/cpp/swift/tools/swift-demangle-yamldump/swift-demangle-yamldump.cpp,"main( int argc , char ** argv)",30, 2, 0, 0
repos/cpp/swift/tools/swift-demangle-fuzzer/swift-demangle-fuzzer.cpp,"LLVMFuzzerTestOneInput( const uint8_t * Data , size_t Size)",7, 2, 0, 0
repos/cpp/swift/tools/sil-passpipeline-dumper/SILPassPipelineDumper.cpp,"llvm::operator < <( llvm :: raw_ostream & os , PassPipelineKind Kind)",8, 2, 0, 0
repos/cpp/swift/tools/sil-passpipeline-dumper/SILPassPipelineDumper.cpp,"main( int argc , char ** argv)",28, 3, 0, 0
repos/cpp/swift/unittests/AST/SourceLocTests.cpp,"swift::PrintTo( SourceLoc loc , std :: ostream * os)",6, 4, 2, 0
repos/cpp/swift/unittests/AST/SourceLocTests.cpp,"swift::PrintTo( SourceRange range , std :: ostream * os)",5, 4, 2, 0
repos/cpp/swift/unittests/AST/SourceLocTests.cpp,"TEST( SourceLoc , AssignExpr)",104, 2, 0, 0
repos/cpp/swift/unittests/AST/SourceLocTests.cpp,"TEST( SourceLoc , StmtConditionElement)",58, 2, 0, 0
repos/cpp/swift/unittests/AST/SourceLocTests.cpp,"TEST( SourceLoc , TupleExpr)",92, 2, 0, 0
repos/cpp/swift/unittests/AST/SourceLocTests.cpp,"TEST( SourceLoc , CharSourceRangeOverlaps)",50, 2, 0, 0
repos/cpp/swift/unittests/AST/TestContext.cpp,"declareOptionalType( ASTContext & ctx , SourceFile * fileForLookups , Identifier name)",13, 2, 0, 0
repos/cpp/swift/unittests/AST/TestContext.cpp,"TestContext::TestContext( ShouldDeclareOptionalTypes optionals)",20, 2, 0, 0
repos/cpp/swift/unittests/AST/TypeMatchTests.cpp,"TEST( TypeMatch , IdenticalTypes)",25, 2, 0, 0
repos/cpp/swift/unittests/AST/TypeMatchTests.cpp,"TEST( TypeMatch , UnrelatedTypes)",52, 2, 0, 0
repos/cpp/swift/unittests/AST/TypeMatchTests.cpp,"TEST( TypeMatch , Classes)",46, 2, 0, 0
repos/cpp/swift/unittests/AST/TypeMatchTests.cpp,"TEST( TypeMatch , Optionals)",38, 2, 0, 0
repos/cpp/swift/unittests/AST/TypeMatchTests.cpp,"TEST( TypeMatch , OptionalMismatch)",81, 2, 0, 0
repos/cpp/swift/unittests/AST/TypeMatchTests.cpp,"TEST( TypeMatch , OptionalMismatchTuples)",60, 2, 0, 0
repos/cpp/swift/unittests/AST/TypeMatchTests.cpp,"TEST( TypeMatch , OptionalMismatchFunctions)",19, 2, 0, 0
repos/cpp/swift/unittests/AST/TypeMatchTests.cpp,"TEST( TypeMatch , NoEscapeMismatchFunctions)",41, 2, 0, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"ArithmeticExpr::ArithmeticExpr( Kind kind)",1, 45, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"Literal::Literal( double value)",1, 74, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"Binary::Binary( OperatorKind operatorKind , ArithmeticExpr * lhs , ArithmeticExpr * rhs)",3, 29, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"simple_display( llvm :: raw_ostream & out , ArithmeticExpr * expr)",20, 2, 0, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"EvaluationRule::evaluate( Evaluator & evaluator , ArithmeticExpr * expr) const",26, 4, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"EvaluationRule::diagnoseCycle( DiagnosticEngine & diags) const",1, 56, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"EvaluationRule::noteCycleStep( DiagnosticEngine & diags) const",1, 56, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"InternallyCachedEvaluationRule::isCached() const",10, 4, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"ExternallyCachedEvaluationRule::isCached() const",11, 4, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"ExternallyCachedEvaluationRule::getCachedResult() const",5, 4, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"ExternallyCachedEvaluationRule::cacheResult( double value) const",5, 4, 2, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"evalOrNaN( Evaluator & evaluator , const Request & request)",3, 2, 0, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"TEST( ArithmeticEvaluator , Simple)",119, 2, 0, 0
repos/cpp/swift/unittests/AST/ArithmeticEvaluator.cpp,"TEST( ArithmeticEvaluator , Cycle)",47, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"ExpectationDiagnosticConsumer::ExpectationDiagnosticConsumer( ExpectationDiagnosticConsumer * previous , ArrayRef<ExpectedDiagnostic> expected)",3, 74, 6, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"ExpectationDiagnosticConsumer::~ExpectationDiagnosticConsumer()",4, 6, 4, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"ExpectationDiagnosticConsumer::handleDiagnostic( SourceManager & SM , SourceLoc loc , DiagnosticKind kind , StringRef formatString , ArrayRef<DiagnosticArgument> formatArgs , const DiagnosticInfo & info)",8, 6, 4, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"ExpectationDiagnosticConsumer::finishProcessing()",7, 6, 4, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , SubconsumersFinishInOrder)",18, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , InvalidLocDiagsGoToEveryConsumer)",21, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , ErrorsWithLocationsGoToExpectedConsumers)",50, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , ErrorsInUnaffiliatedFilesGoToEveryConsumer)",54, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , WarningsAndRemarksAreTreatedLikeErrors)",41, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , NotesAreAttachedToErrors)",62, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , NotesAreAttachedToWarningsAndRemarks)",62, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , NotesAreAttachedToErrorsEvenAcrossFiles)",59, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , NotesAreAttachedToErrorsEvenAcrossFilesWithUnaffiliatedConsumer)",63, 2, 0, 0
repos/cpp/swift/unittests/AST/DiagnosticConsumerTests.cpp,"TEST( FileSpecificDiagnosticConsumer , NotesWithInvalidLocsAreStillAttachedToErrors)",48, 2, 0, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"VersionRangeLattice::intersectRanges( VersionRange A , VersionRange B)",4, 4, 2, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"VersionRangeLattice::unionRanges( VersionRange A , VersionRange B)",4, 4, 2, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"VersionRangeLattice::equals( VersionRange A , VersionRange B)",3, 4, 2, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"VersionRangeLattice::intersectEquals( VersionRange A , VersionRange B , VersionRange Expected)",6, 4, 2, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"VersionRangeLattice::unionEquals( VersionRange A , VersionRange B , VersionRange Expected)",6, 4, 2, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"TEST_F( VersionRangeLattice , AllIsTopElement)",9, 2, 0, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"TEST_F( VersionRangeLattice , EmptyIsBottomElement)",9, 2, 0, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"TEST_F( VersionRangeLattice , ContainmentClosedEndedPositiveInfinity)",8, 2, 0, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"TEST_F( VersionRangeLattice , MeetWithAll)",6, 2, 0, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"TEST_F( VersionRangeLattice , JoinWithAll)",5, 2, 0, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"TEST_F( VersionRangeLattice , MeetWithEmpty)",4, 2, 0, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"TEST_F( VersionRangeLattice , JoinWithEmpty)",4, 2, 0, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"TEST_F( VersionRangeLattice , MeetWithClosedEndedPositiveInfinity)",6, 2, 0, 0
repos/cpp/swift/unittests/AST/VersionRangeLattice.cpp,"TEST_F( VersionRangeLattice , JoinWithClosedEndedPositiveInfinity)",6, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"loadFromString( DependencyGraph<uintptr_t> & dg , uintptr_t node , StringRef key , StringRef data)",4, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"loadFromString( DependencyGraph<uintptr_t> & dg , uintptr_t node , StringRef key1 , StringRef data1 , StringRef key2 , StringRef data2)",7, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"loadFromString( DependencyGraph<uintptr_t> & dg , uintptr_t node , StringRef key1 , StringRef data1 , StringRef key2 , StringRef data2 , StringRef key3 , StringRef data3 , StringRef key4 , StringRef data4)",11, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , BasicLoad)",30, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , IndependentNodes)",43, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , IndependentDepKinds)",19, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , IndependentDepKinds2)",19, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , IndependentMembers)",24, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleDependent)",22, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleDependentReverse)",22, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleDependent2)",22, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleDependent3)",24, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleDependent4)",24, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleDependent5)",26, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleDependent6)",22, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleDependentMember)",24, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"contains( const Range & range , const T & value)",3, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , MultipleDependentsSame)",27, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , MultipleDependentsDifferent)",27, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , ChainedDependents)",29, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , MarkTwoNodes)",46, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , MarkOneNodeTwice)",31, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , MarkOneNodeTwice2)",31, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , NotTransitiveOnceMarked)",39, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , DependencyLoops)",32, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , MarkIntransitive)",20, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , MarkIntransitiveTwice)",16, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , MarkIntransitiveThenIndirect)",19, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleExternal)",19, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , SimpleExternal2)",16, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , ChainedExternal)",27, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , ChainedExternalReverse)",32, 2, 0, 0
repos/cpp/swift/unittests/Driver/DependencyGraphTests.cpp,"TEST( DependencyGraph , ChainedExternalPreMarked)",20, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"RaceThunk( RaceThreadContext<T> & ctx)",18, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"RaceTest( std :: function<T()> code)",30, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"RaceTest_ExpectEqual( std :: function<T()> code)",10, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( StaticObjects , ini)",21, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( Concurrent , ConcurrentList)",22, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( Concurrent , ConcurrentMap)",32, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( MetadataTest , getMetatypeMetadata)",46, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( MetadataTest , getExistentialMetadata)",183, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( MetadataTest , getExistentialTypeMetadata_opaque)",58, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( MetadataTest , getExistentialTypeMetadata_class)",58, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( MetadataTest , getExistentialTypeMetadata_subclass)",46, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"initializeRelativePointer( int32_t * ptr , T value)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"witnessTableInstantiator( WitnessTable * instantiatedTable , const Metadata * type , void ** const * instantiationArgs)",17, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeDefaultWitness1()",1, 37, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeDefaultWitness2()",1, 37, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeRequirement1()",1, 34, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeRequirement2()",1, 34, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeRequirement3()",1, 34, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeRequirement4()",1, 34, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeRequirement5()",1, 34, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TestProtocol::TestProtocol()",42, 4, 2, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeWitness1()",1, 30, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeWitness2()",1, 30, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeWitness3()",1, 30, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"fakeWitness5()",1, 30, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"ResilientWitnessTableStorage::ResilientWitnessTableStorage()",32, 4, 2, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"initialize_pod_witness_table( ValueWitnessTable & testTable)",10, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_assignWithCopy_pod)",33, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_assignWithTake_pod)",33, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"initialize_indirect_witness_table( ValueWitnessTable & testTable)",10, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_assignWithCopy_indirect_indirect)",35, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_assignWithTake_indirect_indirect)",35, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_assignWithCopy_pod_indirect)",32, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_assignWithTake_pod_indirect)",32, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_assignWithCopy_indirect_pod)",36, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_assignWithTake_indirect_pod)",36, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_initWithCopy_pod)",33, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_initWithTake_pod)",33, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_initWithCopy_indirect)",32, 2, 0, 0
repos/cpp/swift/unittests/runtime/Metadata.cpp,"TEST( TestOpaqueExistentialBox , test_initWithTake_indirect)",32, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"getEmptyValue()",3, 4, 2, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"getEmptyValue<MetadataResponse>()",3, 4, 2, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"getEmptyValue<TypeInfo>()",3, 4, 2, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"CompatibilityOverrideTest::SetUp()",10, 4, 2, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"CompatibilityOverrideTest::TearDown()",4, 4, 2, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCast)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastClass)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastClassUnconditional)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastObjCClass)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastObjCClassUnconditional)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastForeignClass)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastForeignClassUnconditional)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastUnknownClass)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastUnknownClassUnconditional)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastMetatype)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastMetatypeUnconditional)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastObjCClassMetatype)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastObjCClassMetatypeUnconditional)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastForeignClassMetatype)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_dynamicCastForeignClassMetatypeUnconditional)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_conformsToProtocol)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_conformsToSwiftProtocol)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_getTypeByMangledNode)",6, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_getTypeByMangledName)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_getAssociatedTypeWitnessSlow)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/CompatibilityOverride.cpp,"TEST_F( CompatibilityOverrideTest , test_swift_getAssociatedConformanceWitnessSlow)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_makeAnyHashableUsingDefaultRepresentation( const OpaqueValue * value , const void * anyHashableResultPointer , const Metadata * T , const WitnessTable * hashableWT)",8, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_stdlib_Hashable_isEqual_indirect( const void * lhsValue , const void * rhsValue , const Metadata * type , const void * wt)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_stdlib_Hashable_hashValue_indirect( const void * value , const Metadata * type , const void * wt)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_convertToAnyHashableIndirect( OpaqueValue * source , OpaqueValue * destination , const Metadata * sourceType , const void * sourceConformance)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_anyHashableDownCastConditionalIndirect( OpaqueValue * source , OpaqueValue * destination , const Metadata * targetType)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_arrayDownCastIndirect( OpaqueValue * destination , OpaqueValue * source , const Metadata * sourceValueType , const Metadata * targetValueType)",6, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_arrayDownCastConditionalIndirect( OpaqueValue * destination , OpaqueValue * source , const Metadata * sourceValueType , const Metadata * targetValueType)",6, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_setDownCastIndirect( OpaqueValue * destination , OpaqueValue * source , const Metadata * sourceValueType , const Metadata * targetValueType , const void * sourceValueHashable , const void * targetValueHashable)",8, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_setDownCastConditionalIndirect( OpaqueValue * destination , OpaqueValue * source , const Metadata * sourceValueType , const Metadata * targetValueType , const void * sourceValueHashable , const void * targetValueHashable)",8, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_dictionaryDownCastIndirect( OpaqueValue * destination , OpaqueValue * source , const Metadata * sourceKeyType , const Metadata * sourceValueType , const Metadata * targetKeyType , const Metadata * targetValueType , const void * sourceKeyHashable , const void * targetKeyHashable)",10, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_swift_dictionaryDownCastConditionalIndirect( OpaqueValue * destination , OpaqueValue * source , const Metadata * sourceKeyType , const Metadata * sourceValueType , const Metadata * targetKeyType , const Metadata * targetValueType , const void * sourceKeyHashable , const void * targetKeyHashable)",10, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_bridgeNonVerbatimBoxedValue( const OpaqueValue * sourceValue , OpaqueValue * destValue , const Metadata * nativeType)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"_bridgeNonVerbatimFromObjectiveCToAny( HeapObject * sourceValue , OpaqueValue * destValue)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"swift_unboxFromSwiftValueWithType( OpaqueValue * source , OpaqueValue * result , const Metadata * destinationType)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"swift_swiftValueConformsTo( const Metadata * destinationType)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"ss27_bridgeAnythingToObjectiveCyyXlxlF( OpaqueValue * src , const Metadata * srcType)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"ss13_getErrorCodeySiSPyxGs0B0RzlF( void *)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"ss23_getErrorDomainNSStringyyXlSPyxGs0B0RzlF( void *)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"ss29_getErrorUserInfoNSDictionaryyyXlSgSPyxGs0B0RzlF( void *)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"ss32_getErrorEmbeddedNSErrorIndirectyyXlSgSPyxGs0B0RzlF( void *)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"swift_getKeyPathImpl( const void * p , const void * e , const void * a)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/Stdlib.cpp,"MANGLE_SYM( s20_playgroundPrintHookySScSgvg)()",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"threadedExecute( int threadCount , ThreadBody threadBody , AfterSpinRelease afterSpinRelease)",43, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"threadedExecute( int threadCount , ThreadBody threadBody)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"threadedExecute( M & mutex , C & condition , bool & doneCondition , ConsumerBody consumerBody , ProducerBody producerBody)",61, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"basicLockableThreaded( M & mutex)",17, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( MutexTest , BasicLockableThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticMutexTest , BasicLockableThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticUnsafeMutexTest , BasicLockableThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"lockableThreaded( M & mutex)",27, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( MutexTest , LockableThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticMutexTest , LockableThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"scopedLockThreaded( M & mutex)",16, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( MutexTest , ScopedLockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticMutexTest , ScopedLockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"scopedUnlockUnderScopedLockThreaded( M & mutex)",21, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( MutexTest , ScopedUnlockUnderScopedLockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticMutexTest , ScopedUnlockUnderScopedLockThreaded)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"criticalSectionThreaded( M & mutex)",17, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( MutexTest , CriticalSectionThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticMutexTest , CriticalSectionThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"conditionThreaded( M & mutex , C & condition)",41, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( MutexTest , ConditionThreaded)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticMutexTest , ConditionThreaded)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"conditionLockOrWaitLockThenNotifyThreaded( M & mutex , C & condition)",41, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( MutexTest , ConditionLockOrWaitLockThenNotifyThreaded)",5, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticMutexTest , ConditionLockOrWaitLockThenNotifyThreaded)",6, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"scopedReadThreaded( RW & lock)",48, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , ScopedReadLockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , ScopedReadLockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , ScopedReadUnlockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , ScopedReadUnlockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"scopedWriteLockThreaded( RW & lock)",51, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , ScopedWriteLockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , ScopedWriteLockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , ScopedWriteUnlockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , ScopedWriteUnlockThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"readLockWhileReadLockedThreaded( RW & lock)",29, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , ReadLockWhileReadLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , ReadLockWhileReadLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"readLockWhileWriteLockedThreaded( RW & lock)",28, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , ReadLockWhileWriteLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , ReadLockWhileWriteLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"writeLockWhileReadLockedThreaded( RW & lock)",30, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , WriteLockWhileReadLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , WriteLockWhileReadLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"writeLockWhileWriteLockedThreaded( RW & lock)",30, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , WriteLockWhileWriteLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , WriteLockWhileWriteLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"tryReadLockWhileWriteLockedThreaded( RW & lock)",18, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , TryReadLockWhileWriteLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , TryReadLockWhileWriteLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"tryReadLockWhileReadLockedThreaded( RW & lock)",30, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , TryReadLockWhileReadLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , TryReadLockWhileReadLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"tryWriteLockWhileWriteLockedThreaded( RW & lock)",18, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , TryWriteLockWhileWriteLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , TryWriteLockWhileWriteLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"tryWriteLockWhileReadLockedThreaded( RW & lock)",18, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , TryWriteLockWhileReadLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , TryWriteLockWhileReadLockedThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"readWriteLockCacheExampleThreaded( RW & lock)",93, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( ReadWriteLockTest , ReadWriteLockCacheExampleThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Mutex.cpp,"TEST( StaticReadWriteLockTest , ReadWriteLockCacheExampleThreaded)",4, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"initialize_pod_witness_table_size_uint32_t_stride_uint64_t( ValueWitnessTable & testTable)",11, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayInitWithCopy)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"destroyTestObject( SWIFT_CONTEXT HeapObject * _object)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"allocTestObject( size_t * addr , size_t value)",9, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayInitWithCopyNoAliasNonPOD)",28, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayInitWithTakeNoAliasPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayInitWithTakeFrontToBackPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayInitWithTakeBackToFrontPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayInitWithTakeNoAliasNonPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayInitWithTakeFrontToBackNonPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayInitWithTakeBackToFrontNonPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayAssignWithCopyNoAliasPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayAssignWithCopyFrontToBackPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayAssignWithCopyBackToFrontPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayAssignWithCopyNoAliasNonPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayAssignWithCopyFrontToBackNonPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayAssignWithCopyBackToFrontNonPOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayAssignWithTakePOD)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayAssignWithTakeNonPOD)",32, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayDestroyPOD)",10, 2, 0, 0
repos/cpp/swift/unittests/runtime/Array.cpp,"TEST( TestArrayCopy , test_swift_arrayDestroyNonPOD)",11, 2, 0, 0
repos/cpp/swift/unittests/runtime/Concurrent.cpp,"TEST( ConcurrentReadableArrayTest , SingleThreaded)",27, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"destroyTestObject( SWIFT_CONTEXT HeapObject * _object)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"allocTestObject( size_t * addr , size_t value)",9, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , release)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , retain_release)",11, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , retain_release_n)",18, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , unknown_retain_release_n)",18, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , unowned_retain_release_n)",16, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , unowned_retain_release_n_overflow)",17, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , isUniquelyReferenced)",15, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , nonatomic_release)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , nonatomic_retain_release)",11, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , nonatomic_retain_release_n)",20, 2, 0, 0
repos/cpp/swift/unittests/runtime/Refcounting.cpp,"TEST( RefcountingTest , nonatomic_unknown_retain_release_n)",20, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"byte_getExtraInhabitantTag( const OpaqueValue * src , unsigned numXI , const Metadata * self)",9, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"byte_getEnumTagSinglePayload( const OpaqueValue * value , unsigned numEmptyCases , const Metadata * self)",6, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"byte_storeExtraInhabitantTag( OpaqueValue * dest , unsigned tag , unsigned numXI , const Metadata * self)",6, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"byte_storeEnumTagSinglePayload( OpaqueValue * value , unsigned tag , unsigned numEmptyCases , const Metadata * self)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"asOpaque( const void * v)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"asOpaque( void * v)",3, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"test_getEnumCaseSinglePayload( std :: initializer_list<uint8_t> repr , const FullOpaqueMetadata & metadata , unsigned numEmptyCases)",6, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"TEST( EnumTest , getEnumCaseSinglePayload)",34, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"test_storeEnumTagSinglePayload( std :: initializer_list<uint8_t> after , std :: initializer_list<uint8_t> before , const FullOpaqueMetadata & metadata , unsigned whichCase , unsigned numEmptyCases)",17, 2, 0, 0
repos/cpp/swift/unittests/runtime/Enum.cpp,"TEST( EnumTest , storeEnumTagSinglePayload)",51, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TestObject::TestObject( size_t * addr , size_t value)",3, 6, 3, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"deinitTestObject( SWIFT_CONTEXT HeapObject * _object)",53, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"allocTestObject( size_t * addr , size_t value)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"retainALot( TestObject * object , size_t & deinited , uint64_t count)",8, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"releaseALot( TestObject * object , size_t & deinited , uint64_t count)",8, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , retain_max)",18, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , retain_overflow_DeathTest)",13, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , nonatomic_retain_max)",18, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , nonatomic_retain_overflow_DeathTest)",13, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"unownedRetainALot( TestObject * object , uint64_t count)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"unownedReleaseALot( TestObject * object , uint64_t count)",7, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , unowned_retain_max)",31, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , unowned_retain_overflow_DeathTest)",14, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , nonatomic_unowned_retain_max)",31, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , nonatomic_unowned_retain_overflow_DeathTest)",14, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"weakRetainALot( TestObject * object , uint64_t count)",10, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"weakReleaseALot( HeapObjectSideTableEntry * side , uint64_t count)",6, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , weak_retain_max)",31, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , weak_retain_overflow_DeathTest)",14, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , nonatomic_weak_retain_max)",31, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"swift::WeakReference::getSideTable()",3, 4, 2, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , lifecycle_live_deiniting_no_side_DeathTest)",40, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , lifecycle_live_deiniting_deinited_no_side_DeathTest)",64, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , lifecycle_live_deiniting_with_side_DeathTest)",90, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , lifecycle_live_deiniting_deinited_with_side_DeathTest)",115, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , lifecycle_live_deiniting_freed_with_side_DeathTest)",114, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , lifecycle_live_deiniting_deinited_freed_with_side_DeathTest)",143, 2, 0, 0
repos/cpp/swift/unittests/runtime/LongTests/LongRefcounting.cpp,"TEST( LongRefcountingTest , lifecycle_live_deiniting_urc_overflow_to_side)",35, 2, 0, 0
repos/cpp/swift/unittests/IDE/CodeCompletionToken.cpp,"replaceAtWithNull( const std :: string & S)",8, 2, 0, 0
repos/cpp/swift/unittests/IDE/CodeCompletionToken.cpp,"TEST( CodeCompletionToken , FindInEmptyFile)",7, 2, 0, 0
repos/cpp/swift/unittests/IDE/CodeCompletionToken.cpp,"TEST( CodeCompletionToken , FindNonExistent)",7, 2, 0, 0
repos/cpp/swift/unittests/IDE/CodeCompletionToken.cpp,"TEST( CodeCompletionToken , RemovesOtherTokens)",7, 2, 0, 0
repos/cpp/swift/unittests/IDE/CodeCompletionToken.cpp,"TEST( CodeCompletionToken , FindBegin)",7, 2, 0, 0
repos/cpp/swift/unittests/IDE/CodeCompletionToken.cpp,"TEST( CodeCompletionToken , FindEnd)",7, 2, 0, 0
repos/cpp/swift/unittests/IDE/CodeCompletionToken.cpp,"TEST( CodeCompletionToken , FindSingleLine)",7, 2, 0, 0
repos/cpp/swift/unittests/IDE/CodeCompletionToken.cpp,"TEST( CodeCompletionToken , FindMultiline)",10, 2, 0, 0
repos/cpp/swift/unittests/IDE/Placeholders.cpp,"replaceFromString( const std :: string & S , bool * HadPH = nullptr)",7, 2, 0, 0
repos/cpp/swift/unittests/IDE/Placeholders.cpp,"TEST( Placeholders , Replace)",26, 2, 0, 0
repos/cpp/swift/unittests/IDE/Placeholders.cpp,"TEST( Placeholders , ReplaceNoCallback)",8, 2, 0, 0
repos/cpp/swift/unittests/IDE/Placeholders.cpp,"TEST( Placeholders , NoPlaceholder1)",7, 2, 0, 0
repos/cpp/swift/unittests/IDE/Placeholders.cpp,"TEST( Placeholders , NoPlaceholder2)",11, 2, 0, 0
repos/cpp/swift/unittests/IDE/Placeholders.cpp,"TEST( Placeholders , Nested)",6, 2, 0, 0
repos/cpp/swift/unittests/IDE/Placeholders.cpp,"TEST( Placeholders , TooShort)",9, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , BasicMatching)",24, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , SingleCharacterMatching)",10, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , UnicodeMatching)",23, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , BasicScoring)",7, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , BestMatchNotFirstMatch)",12, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , CamelCaseScoring)",68, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , LongerRunsInLongerCandidates)",22, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , ShorterMatches)",26, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , SingleCharacterScoring)",20, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , ScoringOddities)",23, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , NormalizeSingleCharacterScore)",12, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , NormalizeScore)",21, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , TokenizingCharacters)",15, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/FuzzyStringMatcherTest.cpp,"TEST( FuzzyStringMatcher , ShortUnconnectedMatches)",5, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/Support/ImmutableTextBufferTest.cpp,"TEST( EditableTextBuffer , Updates)",33, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"getRuntimeLibPath()",3, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::needsSemanticInfo()",1, 58, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::handleRequestError( const char * Description)",3, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::syntaxMapEnabled()",1, 52, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::handleSyntaxMap( unsigned Offset , unsigned Length , UIdent Kind)",2, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::handleSemanticAnnotation( unsigned Offset , unsigned Length , UIdent Kind , bool isSystem)",2, 59, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::documentStructureEnabled()",1, 61, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::beginDocumentSubStructure( unsigned Offset , unsigned Length , UIdent Kind , UIdent AccessLevel , UIdent SetterAccessLevel , unsigned NameOffset , unsigned NameLength , unsigned BodyOffset , unsigned BodyLength , unsigned DocOffset , unsigned DocLength , StringRef DisplayName , StringRef TypeName , StringRef RuntimeName , StringRef SelectorName , ArrayRef<StringRef> InheritedTypes , ArrayRef<std::tuple<UIdent,unsigned,unsigned>> Attrs)",16, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::endDocumentSubStructure()",1, 45, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::handleDocumentSubStructureElement( UIdent Kind , unsigned Offset , unsigned Length)",2, 70, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::recordAffectedRange( unsigned Offset , unsigned Length)",1, 73, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::recordAffectedLineRange( unsigned Line , unsigned Length)",1, 75, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::setDiagnosticStage( UIdent DiagStage)",1, 56, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::handleDiagnostic( const DiagnosticEntryInfo & Info , UIdent DiagStage)",2, 54, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::recordFormattedText( StringRef Text)",1, 55, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::handleSourceText( StringRef Text)",1, 52, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::handleSyntaxTree( const swift :: syntax :: SourceFileSyntax & SyntaxTree , std :: unordered_set<unsigned> & ReusedNodeIds)",2, 81, 24, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"NullEditorConsumer::syntaxTreeTransferMode()",3, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::getLang()",1, 63, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::SetUp()",7, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::CursorInfoTest()",8, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::addNotificationReceiver( DocumentUpdateNotificationReceiver Receiver)",3, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::open( const char * DocName , StringRef Text , Optional<ArrayRef<const char*>> CArgs = llvm :: None)",7, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::replaceText( StringRef DocName , unsigned Offset , unsigned Length , StringRef Text)",5, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::getCursor( const char * DocName , unsigned Offset , ArrayRef<const char*> CArgs)",20, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::findOffset( StringRef Val , StringRef Text)",5, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::setNeedsSema( bool needsSema)",1, 72, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"CursorInfoTest::makeArgs( const char * DocName , ArrayRef<const char*> CArgs)",6, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"TEST_F( CursorInfoTest , FileNotExist)",12, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"TEST_F( CursorInfoTest , EditAfter)",34, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"TEST_F( CursorInfoTest , EditBefore)",36, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"TEST_F( CursorInfoTest , CursorInfoMustWaitDueDeclLoc)",29, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"TEST_F( CursorInfoTest , CursorInfoMustWaitDueOffset)",29, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"TEST_F( CursorInfoTest , CursorInfoMustWaitDueToken)",30, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/CursorInfoTest.cpp,"TEST_F( CursorInfoTest , CursorInfoMustWaitDueTokenRace)",28, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"getRuntimeLibPath()",3, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::handleRequestError( const char * Description)",3, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::syntaxMapEnabled()",1, 52, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::handleSyntaxMap( unsigned Offset , unsigned Length , UIdent Kind)",2, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::handleSemanticAnnotation( unsigned Offset , unsigned Length , UIdent Kind , bool isSystem)",2, 59, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::documentStructureEnabled()",1, 61, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::beginDocumentSubStructure( unsigned Offset , unsigned Length , UIdent Kind , UIdent AccessLevel , UIdent SetterAccessLevel , unsigned NameOffset , unsigned NameLength , unsigned BodyOffset , unsigned BodyLength , unsigned DocOffset , unsigned DocLength , StringRef DisplayName , StringRef TypeName , StringRef RuntimeName , StringRef SelectorName , ArrayRef<StringRef> InheritedTypes , ArrayRef<std::tuple<UIdent,unsigned,unsigned>> Attrs)",16, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::endDocumentSubStructure()",1, 45, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::handleDocumentSubStructureElement( UIdent Kind , unsigned Offset , unsigned Length)",2, 70, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::recordAffectedRange( unsigned Offset , unsigned Length)",1, 73, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::recordAffectedLineRange( unsigned Line , unsigned Length)",1, 75, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::recordFormattedText( StringRef Text)",1, 55, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::setDiagnosticStage( UIdent diagStage)",1, 80, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::handleDiagnostic( const DiagnosticEntryInfo & Info , UIdent DiagStage)",4, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::handleSourceText( StringRef Text)",1, 52, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::handleSyntaxTree( const swift :: syntax :: SourceFileSyntax & SyntaxTree , std :: unordered_set<unsigned> & ReusedNodeIds)",2, 81, 24, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"DiagConsumer::syntaxTreeTransferMode()",3, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::EditTest()",16, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::getLang()",1, 64, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::SetUp()",6, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::addNotificationReceiver( DocumentUpdateNotificationReceiver Receiver)",3, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::waitForDocUpdate( bool reset = false)",10, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::open( const char * DocName , StringRef Text , ArrayRef<const char*> CArgs , EditorConsumer & Consumer)",6, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::close( const char * DocName)",3, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::replaceText( StringRef DocName , unsigned Offset , unsigned Length , StringRef Text , EditorConsumer & Consumer)",5, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::findOffset( StringRef Val , StringRef Text)",5, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::reset( DiagConsumer & Consumer)",6, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::makeArgs( const char * DocName , ArrayRef<const char*> CArgs)",6, 4, 2, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"TEST_F( EditTest , DiagsAfterEdit)",35, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"EditTest::doubleOpenWithDelay( useconds_t delay , bool closeDoc)",36, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"TEST_F( EditTest , DISABLED_DiagsAfterCloseAndReopen)",15, 2, 0, 0
repos/cpp/swift/unittests/SourceKit/SwiftLang/EditingTest.cpp,"TEST_F( EditTest , DiagsAfterReopen)",10, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , TypeAttributeWithAPIs)",62, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , TypeAttributeMakeAPIs)",60, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , TupleWithAPIs)",51, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , TupleBuilderAPIs)",52, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , TupleMakeAPIs)",30, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , CreateCannedTypes)",17, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , OptionalTypeMakeAPIs)",11, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , OptionalTypeWithAPIs)",13, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , ImplicitlyUnwrappedOptionalTypeMakeAPIs)",12, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , ImplicitlyUnwrappedOptionalTypeWithAPIs)",14, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , MetatypeTypeMakeAPIs)",12, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , MetatypeTypeWithAPIs)",36, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , ArrayTypeWithAPIs)",15, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , ArrayTypeMakeAPIs)",12, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , DictionaryTypeWithAPIs)",22, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , DictionaryTypeMakeAPIs)",16, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , FunctionTypeMakeAPIs)",74, 3, 1, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , FunctionTypeWithAPIs)",65, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TypeSyntaxTests.cpp,"TEST( TypeSyntaxTests , FunctionTypeBuilderAPIs)",68, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , Empty)",58, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , EmptyEquivalence)",8, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , Backtick)",6, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , PrintingSpaces)",6, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , PrintingTabs)",6, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , PrintingNewlines)",6, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , PrintingLineComments)",9, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , PrintingBlockComments)",6, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , PrintingDocLineComments)",9, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , PrintingDocBlockComments)",6, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , PrintingCombinations)",30, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , Contains)",32, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , Iteration)",15, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , push_back)",10, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , push_front)",11, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , front)",12, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , back)",10, 2, 0, 0
repos/cpp/swift/unittests/Syntax/TriviaTests.cpp,"TEST( TriviaTests , size)",7, 2, 0, 0
repos/cpp/swift/unittests/Syntax/AbsolutePositionTests.cpp,"TEST( PositionTests , AbsolutePosition1)",14, 2, 0, 0
repos/cpp/swift/unittests/Syntax/AbsolutePositionTests.cpp,"TEST( PositionTests , AbsolutePosition2)",13, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , FallthroughStmtGetAPIs)",13, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , FallthroughStmtWithAPIs)",12, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , FallthroughStmtMakeAPIs)",40, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , BreakStmtGetAPIs)",9, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , BreakStmtWithAPIs)",34, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , BreakStmtMakeAPIs)",17, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , ContinueStmtGetAPIs)",9, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , ContinueStmtWithAPIs)",34, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , ContinueStmtMakeAPIs)",17, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , ReturnStmtMakeAPIs)",21, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , ReturnStmtGetAPIs)",13, 2, 0, 0
repos/cpp/swift/unittests/Syntax/StmtSyntaxTests.cpp,"TEST( StmtSyntaxTests , ReturnStmtWithAPIs)",30, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"getCannedArgument()",10, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , empty)",5, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , size)",5, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , subscript)",23, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , appending)",28, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , removingLast)",16, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , prepending)",29, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , removingFirst)",17, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , inserting)",60, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , cleared)",15, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , Iteration)",31, 2, 0, 0
repos/cpp/swift/unittests/Syntax/SyntaxCollectionTests.cpp,"TEST( SyntaxCollectionTests , Removing)",15, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , IntegerLiteralExprMakeAPIs)",47, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , SymbolicReferenceExprGetAPIs)",30, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , SymbolicReferenceExprMakeAPIs)",36, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , SymbolicReferenceExprWithAPIs)",38, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallArgumentGetAPIs)",25, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallArgumentMakeAPIs)",30, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallArgumentWithAPIs)",19, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"getFullArgumentList()",19, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"getLabellessArgumentList()",26, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallArgumentListGetAPIs)",51, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallArgumentListMakeAPIs)",33, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallArgumentListWithAPIs)",9, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallExprGetAPIs)",33, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallExprMakeAPIs)",23, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallExprWithAPIs)",29, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ExprSyntaxTests.cpp,"TEST( ExprSyntaxTests , FunctionCallExprBuilderAPIs)",60, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"getCannedDeclModifier()",7, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , DeclModifierMakeAPIs)",14, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , DeclModifierGetAPIs)",12, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , DeclModifierWithAPIs)",16, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , TypealiasMakeAPIs)",45, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , TypealiasWithAPIs)",41, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , TypealiasBuilderAPIs)",42, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"getCannedFunctionParameter()",21, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionParameterMakeAPIs)",14, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionParameterGetAPIs)",46, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionParameterWithAPIs)",39, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionParameterListMakeAPIs)",17, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"getCannedFunctionSignature()",17, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionSignatureMakeAPIs)",17, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionSignatureGetAPIs)",49, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionSignatureWithAPIs)",27, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"getCannedModifiers()",16, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"getCannedGenericParams()",19, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"getCannedBody()",17, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"getCannedWhereClause()",15, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"getCannedFunctionDecl()",14, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionDeclMakeAPIs)",22, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionDeclGetAPIs)",11, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionDeclWithAPIs)",3, 2, 0, 0
repos/cpp/swift/unittests/Syntax/DeclSyntaxTests.cpp,"TEST( DeclSyntaxTests , FunctionDeclBuilderAPIs)",3, 2, 0, 0
repos/cpp/swift/unittests/Syntax/RawSyntaxTests.cpp,"TEST( RawSyntaxTests , accumulateAbsolutePosition1)",16, 2, 0, 0
repos/cpp/swift/unittests/Syntax/RawSyntaxTests.cpp,"TEST( RawSyntaxTests , accumulateAbsolutePosition2)",12, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ThreadSafeCachingTests.cpp,"getExpressionFrom( ReturnStmtSyntax Return)",4, 2, 0, 0
repos/cpp/swift/unittests/Syntax/ThreadSafeCachingTests.cpp,"Pool::Pool()",24, 4, 2, 0
repos/cpp/swift/unittests/Syntax/ThreadSafeCachingTests.cpp,"Pool::run( FuncTy Func , ReturnStmtSyntax Return)",12, 4, 2, 0
repos/cpp/swift/unittests/Syntax/ThreadSafeCachingTests.cpp,"Pool::~Pool()",10, 4, 2, 0
repos/cpp/swift/unittests/Syntax/ThreadSafeCachingTests.cpp,"TEST( ThreadSafeCachingTests , ReturnGetExpression)",25, 2, 0, 0
repos/cpp/swift/unittests/Parse/BuildConfigTests.cpp,"CV( const char * VersionString)",5, 2, 0, 0
repos/cpp/swift/unittests/Parse/BuildConfigTests.cpp,"V( const char * VersionString)",5, 2, 0, 0
repos/cpp/swift/unittests/Parse/BuildConfigTests.cpp,"TEST_F( CompilerVersionTest , VersionComparison)",10, 2, 0, 0
repos/cpp/swift/unittests/Parse/BuildConfigTests.cpp,"TEST_F( VersionTest , VersionComparison)",20, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTriviaTests.cpp,"TEST_F( LexerTriviaTest , RestoreWithTrivia)",48, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTriviaTests.cpp,"TEST_F( LexerTriviaTest , TriviaHashbang)",22, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTriviaTests.cpp,"TEST_F( LexerTriviaTest , TriviaHashbangAfterBOM)",24, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTriviaTests.cpp,"TEST_F( LexerTriviaTest , TriviaConflictMarker)",40, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTriviaTests.cpp,"TEST_F( LexerTriviaTest , TriviaCarriageReturn)",35, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTriviaTests.cpp,"TEST_F( LexerTriviaTest , TriviaNewLines)",60, 2, 0, 0
repos/cpp/swift/unittests/Parse/TokenizerTests.cpp,"TokenizerTest::makeBuffer( StringRef Source)",3, 4, 2, 0
repos/cpp/swift/unittests/Parse/TokenizerTests.cpp,"TokenizerTest::replaceNewLines( std :: string & S)",10, 4, 2, 0
repos/cpp/swift/unittests/Parse/TokenizerTests.cpp,"TokenizerTest::tokToString( swift :: tok T)",32, 4, 2, 0
repos/cpp/swift/unittests/Parse/TokenizerTests.cpp,"TokenizerTest::assertTokens( std :: vector<Token> Ts , StringRef Expected)",16, 4, 2, 0
repos/cpp/swift/unittests/Parse/TokenizerTests.cpp,"TokenizerTest::parseAndGetSplitTokens( unsigned BufID)",11, 4, 2, 0
repos/cpp/swift/unittests/Parse/TokenizerTests.cpp,"TokenizerTest::tokenize( unsigned BufID , const std :: vector<Token> & SplitTokens = { })",11, 4, 2, 0
repos/cpp/swift/unittests/Parse/TokenizerTests.cpp,"TEST_F( TokenizerTest , ProperlySplitTokens)",68, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"LexerTest::tokenizeAndKeepEOF( unsigned BufferID)",10, 4, 2, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"LexerTest::checkLex( StringRef Source , ArrayRef<tok> ExpectedTokens , bool KeepComments = false , bool KeepEOF = false)",18, 4, 2, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"LexerTest::getLocForEndOfToken( SourceLoc Loc)",3, 4, 2, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , TokenizeSkipComments)",7, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , TokenizeWithComments)",14, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , EOFTokenLengthIsZero)",8, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , BrokenStringLiteral1)",9, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , BrokenStringLiteral2)",9, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , StringLiteralWithNUL1)",9, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , ContentStartHashbangSkip)",16, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , ContentStartHashbangSkipUTF8BOM)",16, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , ContentStartOperatorLeftBound)",16, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , ContentStartOperatorLeftBoundUTF8BOM)",16, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , ContentStartConflictMarker)",21, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , ContentStartConflictMarkerUTF8BOM)",22, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , ContentStartTokenIsStartOfLine)",17, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , ContentStartTokenIsStartOfLineUTF8BOM)",17, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , BOMNoCommentNoTrivia)",31, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , BOMTokenCommentNoTrivia)",58, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , BOMAttachCommentNoTrivia)",31, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , BOMNoCommentTrivia)",41, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , BOMAttachCommentTrivia)",41, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , RestoreBasic)",46, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , RestoreNewlineFlag)",46, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , RestoreStopAtCodeCompletion)",54, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , getLocForStartOfToken)",16, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , getLocForStartOfTokenWithCustomSourceLocation)",22, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , NestedSubLexers)",41, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , TokenizePlaceholder)",11, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , NoPlaceholder)",12, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , NestedPlaceholder)",8, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"StringCaptureDiagnosticConsumer::handleDiagnostic( SourceManager & SM , SourceLoc Loc , DiagnosticKind Kind , StringRef FormatString , ArrayRef<DiagnosticArgument> FormatArgs , const swift :: DiagnosticInfo & Info)",12, 4, 2, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"containsPrefix( const std :: vector<std::string> & strs , const std :: string & prefix)",9, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , DiagnoseEmbeddedNul)",21, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , DiagnoseEmbeddedNulOffset)",22, 2, 0, 0
repos/cpp/swift/unittests/Parse/LexerTests.cpp,"TEST_F( LexerTest , EncodedStringSegmentPastTheEnd)",27, 2, 0, 0
repos/cpp/swift/unittests/Parse/SyntaxParsingCacheTests.cpp,"llvm::PrintTo( const Optional<T> & optVal , :: std :: ostream * os)",6, 2, 0, 0
repos/cpp/swift/unittests/Parse/SyntaxParsingCacheTests.cpp,"check( ArrayRef<SourceEdit> Edits , ArrayRef<Optional<size_t>> expected)",7, 2, 0, 0
repos/cpp/swift/unittests/Parse/SyntaxParsingCacheTests.cpp,"TEST_F( TranslateToPreEditPositionTest , SingleEdit1)",11, 2, 0, 0
repos/cpp/swift/unittests/Parse/SyntaxParsingCacheTests.cpp,"TEST_F( TranslateToPreEditPositionTest , SingleEdit)",11, 2, 0, 0
repos/cpp/swift/unittests/Parse/SyntaxParsingCacheTests.cpp,"TEST_F( TranslateToPreEditPositionTest , SingleInsert)",11, 2, 0, 0
repos/cpp/swift/unittests/Parse/SyntaxParsingCacheTests.cpp,"TEST_F( TranslateToPreEditPositionTest , SingleDelete)",11, 2, 0, 0
repos/cpp/swift/unittests/Parse/SyntaxParsingCacheTests.cpp,"TEST_F( TranslateToPreEditPositionTest , SimpleMultiEdit)",14, 2, 0, 0
repos/cpp/swift/unittests/Parse/SyntaxParsingCacheTests.cpp,"TEST_F( TranslateToPreEditPositionTest , ComplexMultiEdit)",13, 2, 0, 0
repos/cpp/swift/unittests/Basic/ExponentialGrowthAppendingBinaryByteStreamTests.cpp,"TEST_F( ExponentialGrowthAppendingBinaryByteStreamTest , ReadAndWrite)",49, 2, 0, 0
repos/cpp/swift/unittests/Basic/ExponentialGrowthAppendingBinaryByteStreamTests.cpp,"TEST_F( ExponentialGrowthAppendingBinaryByteStreamTest , WriteAtInvalidOffset)",18, 2, 0, 0
repos/cpp/swift/unittests/Basic/ExponentialGrowthAppendingBinaryByteStreamTests.cpp,"TEST_F( ExponentialGrowthAppendingBinaryByteStreamTest , InitialSizeZero)",10, 2, 0, 0
repos/cpp/swift/unittests/Basic/ExponentialGrowthAppendingBinaryByteStreamTests.cpp,"TEST_F( ExponentialGrowthAppendingBinaryByteStreamTest , GrowMultipleSteps)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/ExponentialGrowthAppendingBinaryByteStreamTests.cpp,"TEST_F( ExponentialGrowthAppendingBinaryByteStreamTest , WriteIntoMiddle)",27, 2, 0, 0
repos/cpp/swift/unittests/Basic/ExponentialGrowthAppendingBinaryByteStreamTests.cpp,"TEST_F( ExponentialGrowthAppendingBinaryByteStreamTest , WriteRaw)",26, 2, 0, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"swift::sys::CacheValueInfo<Counter>::enterCache( const Counter & value)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"swift::sys::CacheValueInfo<Counter>::retain( void * ptr)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"swift::sys::CacheValueInfo<Counter>::release( void * ptr)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"swift::sys::CacheValueInfo<Counter>::getFromCache( void * ptr)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"swift::sys::CacheValueInfo<Counter>::getCost( const Counter & value)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"RefCntToken::RefCntToken( bool & freed)",1, 45, 2, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"RefCntToken::~RefCntToken()",1, 35, 2, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"TEST( Cache , sameKey)",13, 2, 0, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"TEST( Cache , sameValue)",27, 2, 0, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"TEST( Cache , sameKeyValue)",15, 2, 0, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"TEST( Cache , sameKeyIntrusiveRefCountPter)",15, 2, 0, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"TEST( Cache , sameValueIntrusiveRefCountPter)",19, 2, 0, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"TEST( Cache , sameKeyValueIntrusiveRefCountPter)",14, 2, 0, 0
repos/cpp/swift/unittests/Basic/CacheTest.cpp,"TEST( Cache , copyValue)",18, 2, 0, 0
repos/cpp/swift/unittests/Basic/EditorPlaceholderTest.cpp,"TEST( EditorPlaceholder , EditorPlaceholders)",29, 2, 0, 0
repos/cpp/swift/unittests/Basic/EditorPlaceholderTest.cpp,"TEST( EditorPlaceholder , InvalidEditorPlaceholders)",17, 2, 0, 0
repos/cpp/swift/unittests/Basic/TransformArrayRefTest.cpp,"TEST( TransformArrayRefTest , Empty)",7, 2, 0, 0
repos/cpp/swift/unittests/Basic/TransformArrayRefTest.cpp,"TEST( TransformArrayRefTest , Subscript)",19, 2, 0, 0
repos/cpp/swift/unittests/Basic/TransformArrayRefTest.cpp,"TEST( TransformArrayRefTest , Iteration)",39, 2, 0, 0
repos/cpp/swift/unittests/Basic/TransformArrayRefTest.cpp,"TEST( TransformArrayRefTest , Slicing)",22, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , Add)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , AppendEmptyAfterAdd)",12, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , AppendSetBits)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , AddAdd)",7, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , Copies)",15, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , CopyClearIntoAllocated)",19, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , AddMoveAdd)",12, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , MultiChunkAppend)",11, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , AssignAfterGrowth)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"ComparableOptional::ComparableOptional( const T & value)",1, 55, 2, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"ComparableOptional::ComparableOptional()",1, 36, 2, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"ComparableOptional::operator ==( const Optional<T> & other) const",8, 4, 2, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , Enumeration)",21, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , SetClearBit)",19, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , FlipAllSmall)",17, 2, 0, 0
repos/cpp/swift/unittests/Basic/ClusteredBitVectorTest.cpp,"TEST( ClusteredBitVector , FlipAllBig)",17, 2, 0, 0
repos/cpp/swift/unittests/Basic/ThreadSafeRefCntPointerTest.cpp,"TestRelease::TestRelease( bool & destroy)",1, 51, 2, 0
repos/cpp/swift/unittests/Basic/ThreadSafeRefCntPointerTest.cpp,"TestRelease::~TestRelease()",1, 37, 2, 0
repos/cpp/swift/unittests/Basic/ThreadSafeRefCntPointerTest.cpp,"TEST( ThreadSafeRefCountedBase , ReleaseSimple)",7, 2, 0, 0
repos/cpp/swift/unittests/Basic/ThreadSafeRefCntPointerTest.cpp,"TEST( ThreadSafeRefCountedBase , Release)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/ThreadSafeRefCntPointerTest.cpp,"TestReleaseVPTR::TestReleaseVPTR( bool & destroy)",1, 55, 2, 0
repos/cpp/swift/unittests/Basic/ThreadSafeRefCntPointerTest.cpp,"TestReleaseVPTR::~TestReleaseVPTR()",1, 50, 2, 0
repos/cpp/swift/unittests/Basic/ThreadSafeRefCntPointerTest.cpp,"TEST( ThreadSafeRefCountedBaseVPTR , ReleaseSimple)",7, 2, 0, 0
repos/cpp/swift/unittests/Basic/ThreadSafeRefCntPointerTest.cpp,"TEST( ThreadSafeRefCountedBaseVPTR , Release)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/SourceManagerTest.cpp,"tokenize( SourceManager & SM , StringRef Source)",13, 2, 0, 0
repos/cpp/swift/unittests/Basic/SourceManagerTest.cpp,"TEST( SourceManager , IsBeforeInBuffer)",12, 2, 0, 0
repos/cpp/swift/unittests/Basic/SourceManagerTest.cpp,"TEST( SourceManager , RangeContainsTokenLoc)",28, 2, 0, 0
repos/cpp/swift/unittests/Basic/SourceManagerTest.cpp,"TEST( SourceManager , RangeContains)",22, 2, 0, 0
repos/cpp/swift/unittests/Basic/StringExtrasTest.cpp,"TEST( CamelCaseWordsTest , Iteration)",50, 2, 0, 0
repos/cpp/swift/unittests/Basic/StringExtrasTest.cpp,"TEST( CamelCaseWordsTest , PluralAcronyms)",46, 2, 0, 0
repos/cpp/swift/unittests/Basic/StringExtrasTest.cpp,"TEST( CamelCaseWordsTest , MorePluralAcronyms)",48, 2, 0, 0
repos/cpp/swift/unittests/Basic/StringExtrasTest.cpp,"TEST( CamelCaseWordsTest , WordsWithUnderscores)",29, 2, 0, 0
repos/cpp/swift/unittests/Basic/StringExtrasTest.cpp,"TEST( ToLowercaseTest , Words)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/StringExtrasTest.cpp,"TEST( ToLowercaseInitialismsTest , Words)",7, 2, 0, 0
repos/cpp/swift/unittests/Basic/StringExtrasTest.cpp,"TEST( ToSentencecaseTest , Words)",8, 2, 0, 0
repos/cpp/swift/unittests/Basic/OwnedStringTest.cpp,"TEST( OwnedStringTest , char_pointer_empty)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/OwnedStringTest.cpp,"TEST( OwnedStringTest , char_pointer_non_empty)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/OwnedStringTest.cpp,"TEST( OwnedStringTest , ref_counted_copies_buffer)",16, 2, 0, 0
repos/cpp/swift/unittests/Basic/OwnedStringTest.cpp,"TEST( OwnedStringTest , ref_counted_assignment)",6, 2, 0, 0
repos/cpp/swift/unittests/Basic/ValueEnumeratorTest.cpp,"TEST( ValueEnumerator , basic)",57, 2, 0, 0
repos/cpp/swift/unittests/Basic/OptionSetTest.cpp,"TEST( OptionSet , contains)",38, 2, 0, 0
repos/cpp/swift/unittests/Basic/OptionSetTest.cpp,"TEST( OptionSet , intptr_t)",16, 2, 0, 0
repos/cpp/swift/unittests/Basic/OptionSetTest.cpp,"TEST( OptionSet , intptr_t_isConstructible)",23, 2, 0, 0
repos/cpp/swift/unittests/Basic/UnicodeTest.cpp,"TEST( ExtractExtendedGraphemeCluster , Test1)",5, 2, 0, 0
repos/cpp/swift/unittests/Basic/UnicodeTest.cpp,"TEST( IsSingleExtendedGraphemeCluster , Test1)",4, 2, 0, 0
repos/cpp/swift/unittests/Basic/FileSystemTest.cpp,"TEST( FileSystem , MoveFileIfDifferentEmpty)",83, 2, 0, 0
repos/cpp/swift/unittests/Basic/FileSystemTest.cpp,"TEST( FileSystem , MoveFileIfDifferentNonEmpty)",104, 2, 0, 0
repos/cpp/swift/unittests/Basic/FileSystemTest.cpp,"TEST( FileSystem , MoveFileIfDifferentNonExistent)",26, 2, 0, 0
repos/cpp/swift/unittests/Basic/FileSystemTest.cpp,"TEST( FileSystem , MoveFileIfDifferentInvalid)",25, 2, 0, 0
repos/cpp/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb,"FindGraphemeClusterBoundaries( StringRef Str)",12, 2, 0, 0
repos/cpp/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb,"TEST( ExtractExtendedGraphemeCluster , TestsFromUnicodeSpec)",6, 2, 0, 0
repos/cpp/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb,"TEST( ExtractExtendedGraphemeCluster , ExtraTests)",18, 2, 0, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"Element::decode( const EncodedSequenceBase :: Chunk * & ptr)",6, 4, 2, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"Element::encode( EncodedSequenceBase :: Chunk * & ptr) const",5, 4, 2, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"Element::getEncodedSize() const",5, 4, 2, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"Tester::Tester()",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"Tester::push_back( Element elt)",5, 4, 2, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"Tester::push_small()",4, 4, 2, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"Tester::push_big()",8, 4, 2, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"Tester::push( DataSet set)",7, 4, 2, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"Tester::check()",24, 4, 2, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"TEST( EncodedSequenceTest , PushIterate)",10, 2, 0, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"testCopyCtor( DataSet srcSet)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"TEST( EncodedSequenceTest , CopyCtor)",4, 2, 0, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"testMoveCtor( DataSet srcSet)",12, 2, 0, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"TEST( EncodedSequenceTest , MoveCtor)",4, 2, 0, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"testCopyAssign( DataSet destSet , DataSet srcSet)",12, 2, 0, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"TEST( EncodedSequenceTest , CopyAssign)",5, 2, 0, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"testMoveAssign( DataSet destSet , DataSet srcSet)",15, 2, 0, 0
repos/cpp/swift/unittests/Basic/EncodedSequenceTest.cpp,"TEST( EncodedSequenceTest , MoveAssign)",5, 2, 0, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"ParentType::ParentType( uint8_t allocatedSize , ValueKind kind)",2, 52, 2, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"ParentType::allocated_size() const",1, 60, 2, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"ParentType::getKind() const",1, 45, 2, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"TwoByteType::TwoByteType( uint8_t Value)",2, 71, 6, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"ThreeByteType::ThreeByteType( uint16_t Value)",2, 73, 6, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"RandomValueGenerator::seed()",1, 58, 2, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"RandomValueGenerator::RandomValueGenerator()",3, 44, 6, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"RandomValueGenerator::push( DiverseStackImpl<ParentType> & Stack , std :: vector<TwoByteType> & TwoByteVector , std :: vector<ThreeByteType> & ThreeByteVector , std :: vector<ValueKind> & ControlVector)",18, 4, 2, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"RandomValueGenerator::push( DiverseStackImpl<ParentType> & Stack)",11, 4, 2, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"TEST( DiverseStack , MonomorphicPushPop)",21, 2, 0, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"TEST( DiverseStack , Iterate)",17, 2, 0, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"TEST( DiverseStack , PolymorphicPushPop)",45, 2, 0, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"TEST( DiverseStack , StableIndexLookup)",36, 2, 0, 0
repos/cpp/swift/unittests/Basic/DiverseStackTest.cpp,"TEST( DiverseStack , PopMany)",37, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"getTestKey( int i , uint32_t *)",1, 53, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"getTestValue( int i , uint32_t *)",1, 60, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"getTestKey( int i , uint32_t **)",5, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"getTestValue( int i , uint32_t **)",5, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::init()",1, 38, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::isClearing() const",1, 49, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::isLive() const",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::CtorTester()",7, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::CtorTester( EmptyTester)",7, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::CtorTester( TombstoneTester)",7, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::CtorTester( int V)",8, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::CtorTester( uint32_t V)",8, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::CtorTester( const CtorTester & Arg)",9, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::CtorTester( CtorTester && Arg)",14, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::operator =( const CtorTester & Arg)",16, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::operator =( CtorTester && Arg)",18, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::~CtorTester()",11, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::operator uint32_t() const",1, 53, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::getValue() const",1, 48, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::operator ==( const CtorTester & RHS) const",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::isIgnorableTester() const",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTester::dump( StringRef Name) const",9, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::dumpLiveTesters() const",10, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::verifyTesters() const",4, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::hasLiveTesters() const",7, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::numLiveTesters() const",6, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::clearTesters()",5, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::isLive( CtorTester * T) const",5, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::insert( CtorTester * T)",3, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::erase( CtorTester * T)",1, 78, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterSet::finalize()",4, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterMapInfo::getEmptyKey()",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterMapInfo::getTombstoneKey()",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterMapInfo::getHashValue( const CtorTester & Val)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"CtorTesterMapInfo::isEqual( const CtorTester & LHS , const CtorTester & RHS)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"getTestKey( int i , CtorTester *)",1, 69, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"getTestValue( int i , CtorTester *)",1, 76, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"BlotMapVectorTest::SetUp()",4, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"BlotMapVectorTest::~BlotMapVectorTest()",5, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"BlotMapVectorTest::TearDown()",4, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"BlotMapVectorTest::getKey( int i = 4)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"BlotMapVectorTest::getValue( int i = 5)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , EmptyIntMapTest)",14, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , ConstEmptyMapTest)",6, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , SingleEntryMapTest)",24, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , ClearTest)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , EraseTest)",11, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , EraseTest2)",10, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , InsertTest)",7, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , CopyConstructorTest)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , CopyConstructorNotSmallTest)",10, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , CopyConstructorFromDefaultTest)",6, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , CopyConstructorFromEmptyTest)",9, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , AssignmentTest)",20, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , IterationTest)",22, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TYPED_TEST( BlotMapVectorTest , ConstIteratorTest)",10, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TEST( BlotMapVectorCustomTest , StringRefTest)",23, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TestBlotMapVectorInfo::getEmptyKey()",1, 54, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TestBlotMapVectorInfo::getTombstoneKey()",1, 63, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TestBlotMapVectorInfo::getHashValue( const unsigned & Val)",1, 74, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TestBlotMapVectorInfo::getHashValue( const char * Val)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TestBlotMapVectorInfo::isEqual( const unsigned & LHS , const unsigned & RHS)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TestBlotMapVectorInfo::isEqual( const char * LHS , const unsigned & RHS)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TEST( BlotMapVectorCustomTest , FindAsTest)",17, 2, 0, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"ContiguousBlotMapVectorInfo::getEmptyKey()",1, 54, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"ContiguousBlotMapVectorInfo::getTombstoneKey()",1, 63, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"ContiguousBlotMapVectorInfo::getHashValue( const unsigned & Val)",1, 68, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"ContiguousBlotMapVectorInfo::isEqual( const unsigned & LHS , const unsigned & RHS)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/BlotMapVectorTest.cpp,"TEST( BlotMapVectorCustomTest , SmallBlotMapVectorGrowTest)",26, 2, 0, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"asArray( StringRef str)",3, 2, 0, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"asString( ArrayRef<char> str)",3, 2, 0, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"Tester::Tester()",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"Tester::insert( StringRef key , int value)",14, 4, 2, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"Tester::find( StringRef key)",22, 4, 2, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"Tester::clear()",6, 4, 2, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"Tester::validate()",22, 4, 2, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"TEST( PrefixMapTest , Insert)",11, 2, 0, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"TEST( PrefixMapTest , Test1)",22, 2, 0, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"TEST( PrefixMapTest , Test2)",23, 2, 0, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"TEST( PrefixMapTest , Test3)",6, 2, 0, 0
repos/cpp/swift/unittests/Basic/PrefixMapTest.cpp,"TEST( PrefixMapTest , Test4)",14, 2, 0, 0
repos/cpp/swift/unittests/Basic/RangeTest.cpp,"TEST( Range , basic)",15, 2, 0, 0
repos/cpp/swift/unittests/Basic/RangeTest.cpp,"TEST( ReverseRange , basic)",15, 2, 0, 0
repos/cpp/swift/unittests/Basic/ImmutablePointerSetTest.cpp,"TEST( ImmutableSortedSet , OneElementSets)",34, 2, 0, 0
repos/cpp/swift/unittests/Basic/ImmutablePointerSetTest.cpp,"TEST( ImmutablePointerSet , MultipleElementSets)",55, 2, 0, 0
repos/cpp/swift/unittests/Basic/ImmutablePointerSetTest.cpp,"TEST( ImmutablePointerSet , EmptyIntersectionTests)",19, 2, 0, 0
repos/cpp/swift/unittests/Basic/JSONSerialization.cpp,"swift::json::ObjectTraits<Leaf>::mapping( Output & out , Leaf & value)",16, 4, 2, 0
repos/cpp/swift/unittests/Basic/JSONSerialization.cpp,"swift::json::NullableTraits<Leaf*>::isNull( Leaf * & value)",1, 54, 2, 0
repos/cpp/swift/unittests/Basic/JSONSerialization.cpp,"swift::json::NullableTraits<Leaf*>::get( Leaf * & value)",1, 52, 2, 0
repos/cpp/swift/unittests/Basic/JSONSerialization.cpp,"swift::json::ArrayTraits<std::vector<Leaf*>>::size( Output & out , std :: vector<Leaf*> & seq)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/JSONSerialization.cpp,"swift::json::ArrayTraits<std::vector<Leaf*>>::element( Output & out , std :: vector<Leaf*> & seq , size_t index)",3, 4, 2, 0
repos/cpp/swift/unittests/Basic/JSONSerialization.cpp,"swift::json::ObjectTraits<Root>::mapping( Output & out , Root & value)",10, 4, 2, 0
repos/cpp/swift/unittests/Basic/JSONSerialization.cpp,"TEST( JSONSerialization , basicCompact)",15, 2, 0, 0
repos/cpp/swift/unittests/Basic/JSONSerialization.cpp,"TEST( JSONSerialization , basicPretty)",28, 2, 0, 0
repos/cpp/swift/unittests/Basic/JSONSerialization.cpp,"TEST( JSONSerialization , basicUserInfo)",20, 2, 0, 0
repos/cpp/swift/unittests/Basic/SuccessorMapTest.cpp,"TEST( SuccessorMapTest , T1)",36, 2, 0, 0
repos/cpp/swift/unittests/Basic/SuccessorMapTest.cpp,"TEST( SuccessorMapTest , T2)",14, 2, 0, 0
repos/cpp/swift/unittests/Basic/SuccessorMapTest.cpp,"TEST( SuccessorMapTest , T3)",18, 2, 0, 0
repos/cpp/swift/unittests/Basic/PointerIntEnumTest.cpp,"TEST( PointerIntEnumTest , DefaultConstructorYieldsInvalid)",5, 2, 0, 0
repos/cpp/swift/unittests/Basic/PointerIntEnumTest.cpp,"TEST( PointerIntEnumTest , PointerConstructor)",13, 2, 0, 0
repos/cpp/swift/unittests/Basic/PointerIntEnumTest.cpp,"TEST( PointerIntEnumTest , IndexConstructor)",33, 2, 0, 0
repos/cpp/swift/unittests/Basic/PointerIntEnumTest.cpp,"TEST( PointerIntEnumTest , CopyConstructorAssignment)",53, 2, 0, 0
repos/cpp/swift/unittests/Basic/PointerIntEnumTest.cpp,"TEST( PointerIntEnumTest , MoveConstructorAssignment)",53, 2, 0, 0
repos/cpp/swift/unittests/Basic/PointerIntEnumTest.cpp,"TEST( PointerIntEnumTest , Comparisons)",51, 2, 0, 0
repos/cpp/swift/unittests/Basic/DemangleTest.cpp,"TEST( Demangle , DemangleWrappers)",7, 2, 0, 0
repos/cpp/swift/unittests/Basic/DemangleTest.cpp,"TEST( Demangle , IsObjCSymbol)",8, 2, 0, 0
repos/cpp/swift/unittests/Basic/TreeScopedHashTableTest.cpp,"TEST( TreeScopedHashTableTest , T1)",26, 2, 0, 0
repos/cpp/swift/unittests/Basic/TreeScopedHashTableTest.cpp,"TEST( TreeScopedHashTableTest , T2)",58, 2, 0, 0
repos/cpp/swift/unittests/Basic/TreeScopedHashTableTest.cpp,"TEST( TreeScopedHashTableTest , IteratorTest)",36, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueBuiltinTypeRef)",10, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueNominalTypeRef)",15, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueBoundGenericTypeRef)",23, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueTupleTypeRef)",30, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueFunctionTypeRef)",99, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueProtocolTypeRef)",23, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueMetatypeTypeRef)",13, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueExistentialMetatypeTypeRef)",11, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueGenericTypeParameterTypeRef)",12, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueDependentMemberTypeRef)",19, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueForeignClassTypeRef)",13, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueObjCClassTypeRef)",13, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueOpaqueTypeRef)",10, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueUnownedStorageType)",12, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueWeakStorageType)",12, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueUnmanagedStorageType)",12, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , UniqueAfterSubstitution)",29, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , NestedTypes)",30, 2, 0, 0
repos/cpp/swift/unittests/Reflection/TypeRef.cpp,"TEST( TypeRefTest , DeriveSubstitutions)",35, 2, 0, 0
repos/cpp/swift/unittests/SwiftDemangle/DemangleTest.cpp,"TEST( FunctionNameDemangleTests , CorrectlyDemangles)",22, 2, 0, 0
repos/cpp/swift/unittests/SwiftDemangle/DemangleTest.cpp,"TEST( FunctionNameDemangleTests , NewManglingPrefix)",26, 2, 0, 0
repos/cpp/swift/unittests/SwiftDemangle/DemangleTest.cpp,"TEST( FunctionNameDemangledTests , WorksWithNULLBuffer)",10, 2, 0, 0
repos/cpp/swift/unittests/SwiftDemangle/DemangleTest.cpp,"TEST( FunctionNameDemangleTests , IgnoresNonMangledInputs)",10, 2, 0, 0
repos/cpp/swift/stdlib/private/RuntimeUnittest/ExclusivityTests.cpp,"testExclusivityNullPC()",11, 2, 0, 0
repos/cpp/swift/stdlib/private/RuntimeUnittest/ExclusivityTests.cpp,"testExclusivityPCOne()",11, 2, 0, 0
repos/cpp/swift/stdlib/private/RuntimeUnittest/ExclusivityTests.cpp,"testExclusivityBogusPC()",11, 2, 0, 0
repos/cpp/swift/stdlib/private/RuntimeUnittest/ExclusivityTests.cpp,"testExclusivityNonNested()",30, 2, 0, 0
repos/cpp/swift/stdlib/private/StdlibUnittest/InspectValue.cpp,"getMetadataKindOf( OpaqueValue * value , const Metadata * type)",12, 2, 0, 0
repos/cpp/swift/stdlib/private/StdlibUnittest/InterceptTraps.cpp,"CrashCatcher( int Sig)",15, 2, 0, 0
repos/cpp/swift/stdlib/private/StdlibUnittest/InterceptTraps.cpp,"installTrapInterceptor()",12, 2, 0, 0
repos/cpp/swift/stdlib/private/StdlibUnittest/OpaqueIdentityFunctions.cpp,"getPointer( void * x)",1, 40, 0, 0
repos/cpp/swift/stdlib/public/runtime/KnownMetadata.cpp,"swift::swift_copyPOD( OpaqueValue * dest , OpaqueValue * src , const Metadata * type)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/KnownMetadata.cpp,"alignas( 16)",3, 5, 2, 0
repos/cpp/swift/stdlib/public/runtime/KnownMetadata.cpp,"alignas( 16)",3, 5, 2, 0
repos/cpp/swift/stdlib/public/runtime/KnownMetadata.cpp,"alignas( 16)",3, 5, 2, 0
repos/cpp/swift/stdlib/public/runtime/KnownMetadata.cpp,"alignas( 16)",3, 5, 2, 0
repos/cpp/swift/stdlib/public/runtime/KnownMetadata.cpp,"ThickFunctionBox::storeExtraInhabitantTag( char * dest , unsigned tag)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/KnownMetadata.cpp,"ThickFunctionBox::getExtraInhabitantTag( const char * src)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/KnownMetadata.cpp,"TrivialThickFunctionBox::storeExtraInhabitantTag( char * dest , unsigned tag)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/KnownMetadata.cpp,"TrivialThickFunctionBox::getExtraInhabitantTag( const char * src)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_getObjectRuntimeFunctionCounters( HeapObject * object , RuntimeFunctionCountersState * result)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_setObjectRuntimeFunctionCounters( HeapObject * object , RuntimeFunctionCountersState * state)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_getGlobalRuntimeFunctionCounters( RuntimeFunctionCountersState * result)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_setGlobalRuntimeFunctionCounters( RuntimeFunctionCountersState * state)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_getRuntimeFunctionNames()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_getRuntimeFunctionCountersOffsets()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_getNumRuntimeFunctionCounters()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_dumpRuntimeCounters( RuntimeFunctionCountersState * State)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_dumpObjectsRuntimeFunctionPointers()",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_setGlobalRuntimeFunctionCountersMode( int mode)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_setPerObjectRuntimeFunctionCountersMode( int mode)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RuntimeInvocationsTracking.cpp,"_swift_setGlobalRuntimeFunctionCountersUpdateHandler( RuntimeFunctionCountersUpdateHandler handler)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionMachO.cpp,"addImageCallback( const mach_header * mh , intptr_t vmaddr_slide)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionMachO.cpp,"swift::initializeProtocolLookup()",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionMachO.cpp,"swift::initializeProtocolConformanceLookup()",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionMachO.cpp,"swift::initializeTypeMetadataRecordLookup()",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionMachO.cpp,"swift::initializeDynamicReplacementLookup()",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionMachO.cpp,"swift::lookupSymbol( const void * address , SymbolInfo * info)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionMachO.cpp,"swift::lookupSection( const char * segment , const char * section , size_t * outSize)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ProtocolDescriptor::dump() const",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ProtocolDescriptorFlags::dump() const",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"class_getName( const ClassMetadata * type)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ProtocolConformanceDescriptor::dump() const",29, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ProtocolConformanceDescriptor::verify() const",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"TypeReference::getObjCClass( TypeReferenceKind kind) const",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ProtocolConformanceDescriptor::getCanonicalTypeMetadata() const",31, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ProtocolConformanceDescriptor::getWitnessTable( const Metadata * type) const",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceSection::begin() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceSection::end() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheKey::ConformanceCacheKey( const void * type , const ProtocolDescriptor * proto)",4, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheEntry::ConformanceCacheEntry( ConformanceCacheKey key , const ProtocolConformanceDescriptor * description , size_t failureGeneration)",6, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheEntry::compareWithKey( const ConformanceCacheKey & key) const",9, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheEntry::getExtraAllocationSize( Args && ... ignored)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheEntry::isSuccessful() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheEntry::makeSuccessful( const ProtocolConformanceDescriptor * description)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheEntry::updateFailureGeneration( size_t failureGeneration)",4, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheEntry::getDescription() const",4, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheEntry::getFailureGeneration() const",4, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceState::ConformanceState()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceState::cacheSuccess( const void * type , const ProtocolDescriptor * proto , const ProtocolConformanceDescriptor * description)",10, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceState::cacheFailure( const void * type , const ProtocolDescriptor * proto , size_t failureGeneration)",12, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceState::findCached( const void * type , const ProtocolDescriptor * proto)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceState::verify() const",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"_registerProtocolConformances( ConformanceState & C , const ProtocolConformanceRecord * begin , const ProtocolConformanceRecord * end)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"swift::addImageProtocolConformanceBlockCallback( const void * conformances , uintptr_t conformancesSize)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"swift::swift_registerProtocolConformances( const ProtocolConformanceRecord * begin , const ProtocolConformanceRecord * end)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheResult::cachedSuccess( const ProtocolConformanceDescriptor * description)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheResult::cachedFailure( ConformanceCacheEntry * entry , bool auth)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCacheResult::cacheMiss()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"getConformanceCacheTypeKey( const Metadata * type)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"searchInConformanceCache( const Metadata * type , const ProtocolDescriptor * protocol)",75, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCandidate::ConformanceCandidate()",1, 74, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCandidate::ConformanceCandidate( const ProtocolConformanceDescriptor & conformance)",15, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCandidate::getConformingTypeAsMetadata() const",4, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCandidate::matches( const Metadata * conformingType) const",16, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"ConformanceCandidate::getMatchingType( const Metadata * conformingType) const",12, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"swift_conformsToSwiftProtocolImpl( const Metadata * const type , const ProtocolDescriptor * protocol , StringRef module)",64, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"swift_conformsToProtocolImpl( const Metadata * const type , const ProtocolDescriptor * protocol)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"swift::_searchConformancesByMangledTypeName( Demangle :: NodePointer node)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"swift::_checkGenericRequirements( llvm :: ArrayRef<GenericRequirementDescriptor> requirements , std :: vector<const void*> & extraArguments , SubstGenericParameterFn substGenericParam , SubstDependentWitnessTableFn substWitnessTable)",89, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ProtocolConformance.cpp,"swift::findConformingSuperclass( const Metadata * type , const ProtocolConformanceDescriptor * conformance)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionELF.cpp,"record( const swift :: MetadataSections * sections)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionELF.cpp,"swift::initializeProtocolLookup()",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionELF.cpp,"swift::initializeProtocolConformanceLookup()",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionELF.cpp,"swift::initializeTypeMetadataRecordLookup()",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionELF.cpp,"swift::initializeDynamicReplacementLookup()",2, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionELF.cpp,"swift_addNewDSOImage( const void * addr)",31, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionELF.cpp,"swift::lookupSymbol( const void * address , SymbolInfo * info)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionELF.cpp,"swift::lookupSection( const char * segment , const char * section , size_t * outSize)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TargetSingletonMetadataInitialization<InProcess>::allocate( const TypeContextDescriptor * description) const",40, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"installGenericArguments( Metadata * metadata , const TypeContextDescriptor * description , const void * arguments)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"computeMetadataBoundsForObjCClass( Class cls)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"computeMetadataBoundsForSuperclass( const void * ref , TypeReferenceKind refKind)",37, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"computeMetadataBoundsFromSuperclass( const ClassDescriptor * description , StoredClassMetadataBounds & storedBounds)",22, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::getResilientMetadataBounds( const ClassDescriptor * description)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::getResilientImmediateMembersOffset( const ClassDescriptor * description)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"inferStateForMetadata( Metadata * metadata)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"GenericCacheEntry::getName()",1, 60, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"GenericCacheEntry::GenericCacheEntry( MetadataCacheKey key , Args && ... args)",2, 47, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"GenericCacheEntry::allocate( const TypeContextDescriptor * description , const void * const * arguments)",27, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"GenericCacheEntry::tryInitialize( Metadata * metadata , PrivateMetadataState state , PrivateMetadataCompletionContext * context)",31, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"GenericMetadataCache::GenericMetadataCache( const TargetGenericContext<InProcess> & genericContext)",17, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getCache( const TypeContextDescriptor & description)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"unsafeGetInitializedCache( const TypeGenericContextDescriptorHeader & generics)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"copyMetadataPattern( void ** section , const GenericMetadataPartialPattern * pattern)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"initializeClassMetadataFromPattern( ClassMetadata * metadata , ClassMetadataBounds bounds , const ClassDescriptor * description , const GenericClassMetadataPattern * pattern)",106, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_allocateGenericClassMetadata( const ClassDescriptor * description , const void * arguments , const GenericClassMetadataPattern * pattern)",33, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"initializeValueMetadataFromPattern( ValueMetadata * metadata , const ValueTypeDescriptor * description , const GenericValueMetadataPattern * pattern)",29, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_allocateGenericValueMetadata( const ValueTypeDescriptor * description , const void * arguments , const GenericValueMetadataPattern * pattern , size_t extraDataSize)",32, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getGenericMetadata( MetadataRequest request , const void * const * arguments , const TypeContextDescriptor * description)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheEntry::getValue()",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheEntry::setValue( ValueType value)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheEntry::numTrailingObjects( OverloadToken<int>)",1, 71, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheEntry::getName()",1, 70, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheEntry::SingletonMetadataCacheEntry()",1, 37, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheEntry::allocate( const TypeContextDescriptor * description)",10, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheEntry::tryInitialize( Metadata * metadata , PrivateMetadataState state , PrivateMetadataCompletionContext * context)",33, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheEntry::publishCompleteMetadata( Metadata * metadata)",6, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheStorage::getConcurrency()",1, 65, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheStorage::getOrInsert( KeyType key , ArgTys && ... args)",27, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheStorage::find( KeyType key)",6, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"SingletonMetadataCacheStorage::resolveExistingEntry( KeyType key)",5, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getSingletonMetadata( MetadataRequest request , const TypeContextDescriptor * description)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ObjCClassCacheEntry::ObjCClassCacheEntry( const ClassMetadata * theClass)",5, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ObjCClassCacheEntry::getKeyIntValueForDump()",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ObjCClassCacheEntry::compareWithKey( const ClassMetadata * theClass) const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ObjCClassCacheEntry::getExtraAllocationSize( const ClassMetadata * key)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ObjCClassCacheEntry::getExtraAllocationSize() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getObjCClassMetadata( const ClassMetadata * theClass)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getObjCClassFromMetadata( const Metadata * theMetadata)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getObjCClassFromMetadataConditional( const Metadata * theMetadata)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::Key::getFlags() const",1, 57, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::Key::getParameter( unsigned index) const",4, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::Key::getResult() const",1, 57, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::Key::getParameterFlags() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::Key::getParameterFlags( unsigned index) const",5, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::getKeyIntValueForDump()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::compareWithKey( const Key & key) const",22, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::getExtraAllocationSize( const Key & key)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::getExtraAllocationSize() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::getExtraAllocationSize( const FunctionTypeFlags & flags)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getFunctionTypeMetadata0( FunctionTypeFlags flags , const Metadata * result)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getFunctionTypeMetadata1( FunctionTypeFlags flags , const Metadata * arg0 , const Metadata * result)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getFunctionTypeMetadata2( FunctionTypeFlags flags , const Metadata * arg0 , const Metadata * arg1 , const Metadata * result)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getFunctionTypeMetadata3( FunctionTypeFlags flags , const Metadata * arg0 , const Metadata * arg1 , const Metadata * arg2 , const Metadata * result)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getFunctionTypeMetadata( FunctionTypeFlags flags , const Metadata * const * parameters , const uint32_t * parameterFlags , const Metadata * result)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"FunctionCacheEntry::FunctionCacheEntry( const Key & key)",43, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::getName()",1, 56, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::getValue()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::setValue( ValueType value)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::checkTransitiveCompleteness()",6, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::getNumElements() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::getKeyIntValueForDump()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::compareWithKey( const Key & key) const",29, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::numTrailingObjects( OverloadToken<TupleTypeMetadata::Element>) const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::numTrailingObjects( OverloadToken<TupleTypeMetadata::Element> , const Key & key , Args && ... extraArgs)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheStorage::resolveExistingEntry( const TupleTypeMetadata * metadata)",8, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_getValueWitnesses( const Metadata * metatype)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_projectBuffer( ValueBuffer * buffer , const Metadata * metatype)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_allocateBuffer( ValueBuffer * buffer , const Metadata * metatype)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_destroy( OpaqueValue * tuple , const Metadata * _metadata)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_forEachField( OpaqueValue * destTuple , OpaqueValue * srcTuple , const Metadata * _metatype , forEachOperation operation)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_memcpy( OpaqueValue * dest , OpaqueValue * src , const Metadata * metatype)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_initializeWithCopy( OpaqueValue * dest , OpaqueValue * src , const Metadata * metatype)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_initializeWithTake( OpaqueValue * dest , OpaqueValue * src , const Metadata * metatype)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_assignWithCopy( OpaqueValue * dest , OpaqueValue * src , const Metadata * metatype)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_assignWithTake( OpaqueValue * dest , OpaqueValue * src , const Metadata * metatype)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_initializeBufferWithCopyOfBuffer( ValueBuffer * dest , ValueBuffer * src , const Metadata * metatype)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_storeExtraInhabitantTag( OpaqueValue * tuple , unsigned tag , unsigned xiCount , const Metadata * _metatype)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_getExtraInhabitantTag( const OpaqueValue * tuple , unsigned xiCount , const Metadata * _metatype)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_getEnumTagSinglePayload( const OpaqueValue * enumAddr , unsigned numEmptyCases , const Metadata * self)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"tuple_storeEnumTagSinglePayload( OpaqueValue * enumAddr , unsigned whichCase , unsigned numEmptyCases , const Metadata * self)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getInitialLayoutForValueType()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getInitialLayoutForHeapObject()",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"roundUpToAlignMask( size_t size , size_t alignMask)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"performBasicLayout( TypeLayout & layout , ElementType * elements , size_t numElements , GetLayoutFn && getLayout , SetOffsetFn && setOffset)",37, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getTupleTypeLayout2( TypeLayout * result , const TypeLayout * elt0 , const TypeLayout * elt1)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getTupleTypeLayout3( TypeLayout * result , const TypeLayout * elt0 , const TypeLayout * elt1 , const TypeLayout * elt2)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getTupleTypeLayout( TypeLayout * result , uint32_t * elementOffsets , TupleTypeFlags flags , const TypeLayout * const * elements)",23, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getTupleTypeMetadata( MetadataRequest request , TupleTypeFlags flags , const Metadata * const * elements , const char * labels , const ValueWitnessTable * proposedWitnesses)",46, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::TupleCacheEntry( const Key & key , MetadataRequest request , const ValueWitnessTable * proposedWitnesses)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::allocate( const ValueWitnessTable * proposedWitnesses)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TupleCacheEntry::tryInitialize( Metadata * metadata , PrivateMetadataState state , PrivateMetadataCompletionContext * context)",137, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getTupleTypeMetadata2( MetadataRequest request , const Metadata * elt0 , const Metadata * elt1 , const char * labels , const ValueWitnessTable * proposedWitnesses)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getTupleTypeMetadata3( MetadataRequest request , const Metadata * elt0 , const Metadata * elt1 , const Metadata * elt2 , const char * labels , const ValueWitnessTable * proposedWitnesses)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TypeContextIdentity::TypeContextIdentity( const TypeContextDescriptor * type)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TypeContextIdentity::operator ==( const TypeContextIdentity & other) const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"TypeContextIdentity::compare( const TypeContextIdentity & other) const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::equalContexts( const ContextDescriptor * a , const ContextDescriptor * b)",48, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"perform( InRet *(*function)(InArgs*...))",7, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"perform( void(*function)(InArgs*...))",7, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"pointer_function_cast( In * function)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"pod_indirect_initializeBufferWithCopyOfBuffer( ValueBuffer * dest , ValueBuffer * src , const Metadata * self)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"pod_destroy( OpaqueValue * object , const Metadata * self)",1, 70, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"pod_copy( OpaqueValue * dest , OpaqueValue * src , const Metadata * self)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"pod_direct_initializeBufferWithCopyOfBuffer( ValueBuffer * dest , ValueBuffer * src , const Metadata * self)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"sizeWithAlignmentMask( uint64_t size , uint64_t alignmentMask , uint64_t hasExtraInhabitants)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::installCommonValueWitnesses( const TypeLayout & layout , ValueWitnessTable * vwtable)",69, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getMutableVWTableForInit( StructMetadata * self , StructLayoutFlags flags)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_initStructMetadata( StructMetadata * structType , StructLayoutFlags layoutFlags , size_t numFields , const TypeLayout * const * fieldTypes , uint32_t * fieldOffsets)",31, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getResilientMetadataAllocator()",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_relocateClassMetadata( const ClassDescriptor * description , const ResilientClassMetadataPattern * pattern)",81, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ClassIvarList::getIvars()",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ClassIvarList::getIvars() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getLog2AlignmentFromMask( size_t alignMask)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getROData( ClassMetadata * theClass)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"initGenericClassObjCName( ClassMetadata * theClass)",25, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"copySuperclassMetadataToSubclass( ClassMetadata * theClass , ClassLayoutFlags layoutFlags)",60, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"initClassVTable( ClassMetadata * self)",40, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"initClassFieldOffsetVector( ClassMetadata * self , size_t numFields , const TypeLayout * const * fieldTypes , size_t * fieldOffsets)",77, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"initObjCClass( ClassMetadata * self , size_t numFields , const TypeLayout * const * fieldTypes , size_t * fieldOffsets)",41, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"initGenericObjCClass( ClassMetadata * self , size_t numFields , const TypeLayout * const * fieldTypes , size_t * fieldOffsets)",107, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_initClassMetadata( ClassMetadata * self , ClassLayoutFlags layoutFlags , size_t numFields , const TypeLayout * const * fieldTypes , size_t * fieldOffsets)",70, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_updateClassMetadata( ClassMetadata * self , ClassLayoutFlags layoutFlags , size_t numFields , const TypeLayout * const * fieldTypes , size_t * fieldOffsets)",71, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"isAncestorOf( const ClassMetadata * metadata , const ClassDescriptor * description)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_lookUpClassMethod( const ClassMetadata * metadata , const MethodDescriptor * method , const ClassDescriptor * description)",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getMetatypeValueWitnesses( const Metadata * instanceType)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"MetatypeCacheEntry::MetatypeCacheEntry( const Metadata * instanceType)",5, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"MetatypeCacheEntry::getKeyIntValueForDump()",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"MetatypeCacheEntry::compareWithKey( const Metadata * instanceType) const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"MetatypeCacheEntry::getExtraAllocationSize( const Metadata * instanceType)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"MetatypeCacheEntry::getExtraAllocationSize() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getMetatypeMetadata( const Metadata * instanceMetadata)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeValueWitnessTableCacheEntry::getNumWitnessTables() const",4, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeValueWitnessTableCacheEntry::getKeyIntValueForDump()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeValueWitnessTableCacheEntry::compareWithKey( unsigned key) const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeValueWitnessTableCacheEntry::getExtraAllocationSize( unsigned numTables)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeValueWitnessTableCacheEntry::getExtraAllocationSize() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeCacheEntry::getKeyIntValueForDump()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeCacheEntry::compareWithKey( const Metadata * instanceType) const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeCacheEntry::getExtraAllocationSize( const Metadata * key)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeCacheEntry::getExtraAllocationSize() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getExistentialMetatypeValueWitnesses( unsigned numWitnessTables)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeValueWitnessTableCacheEntry::ExistentialMetatypeValueWitnessTableCacheEntry( unsigned numWitnessTables)",24, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getExistentialMetatypeMetadata( const Metadata * instanceMetadata)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialMetatypeCacheEntry::ExistentialMetatypeCacheEntry( const Metadata * instanceMetadata)",18, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialCacheEntry::getKeyIntValueForDump()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialCacheEntry::compareWithKey( Key key) const",22, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialCacheEntry::getExtraAllocationSize( Key key)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialCacheEntry::getExtraAllocationSize() const",5, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"OpaqueExistentialValueWitnessTableCacheEntry::getNumWitnessTables() const",4, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"OpaqueExistentialValueWitnessTableCacheEntry::getKeyIntValueForDump()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"OpaqueExistentialValueWitnessTableCacheEntry::compareWithKey( unsigned key) const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"OpaqueExistentialValueWitnessTableCacheEntry::getExtraAllocationSize( unsigned numTables)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"OpaqueExistentialValueWitnessTableCacheEntry::getExtraAllocationSize() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ClassExistentialValueWitnessTableCacheEntry::getNumWitnessTables() const",4, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ClassExistentialValueWitnessTableCacheEntry::getKeyIntValueForDump()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ClassExistentialValueWitnessTableCacheEntry::compareWithKey( unsigned key) const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ClassExistentialValueWitnessTableCacheEntry::getExtraAllocationSize( unsigned numTables)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ClassExistentialValueWitnessTableCacheEntry::getExtraAllocationSize() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getOpaqueExistentialValueWitnesses( unsigned numWitnessTables)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"OpaqueExistentialValueWitnessTableCacheEntry::OpaqueExistentialValueWitnessTableCacheEntry( unsigned numWitnessTables)",22, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getClassExistentialValueWitnesses( const Metadata * superclass , unsigned numWitnessTables)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ClassExistentialValueWitnessTableCacheEntry::ClassExistentialValueWitnessTableCacheEntry( unsigned numWitnessTables)",24, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getExistentialValueWitnesses( ProtocolClassConstraint classConstraint , const Metadata * superclassConstraint , unsigned numWitnessTables , SpecialProtocol special)",31, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialTypeMetadata::getRepresentation() const",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialTypeMetadata::mayTakeValue( const OpaqueValue * container) const",28, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialTypeMetadata::deinitExistentialContainer( OpaqueValue * container) const",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialTypeMetadata::projectValue( const OpaqueValue * container) const",26, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialTypeMetadata::getDynamicType( const OpaqueValue * container) const",23, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialTypeMetadata::getWitnessTable( const OpaqueValue * container , unsigned i) const",36, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"anyProtocolIsClassBound( size_t numProtocols , const ProtocolDescriptorRef * protocols)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::_getSimpleProtocolTypeMetadata( const ProtocolDescriptor * protocol)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getExistentialTypeMetadata( ProtocolClassConstraint classConstraint , const Metadata * superclassConstraint , size_t numProtocols , const ProtocolDescriptorRef * protocols)",30, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ExistentialCacheEntry::ExistentialCacheEntry( Key key)",36, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_assignExistentialWithCopy0( OpaqueValue * dest , const OpaqueValue * src , const Metadata * type)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_assignExistentialWithCopy1( OpaqueValue * dest , const OpaqueValue * src , const Metadata * type)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_assignExistentialWithCopy( OpaqueValue * dest , const OpaqueValue * src , const Metadata * type)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getForeignTypeDescription( Metadata * metadata)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::getValue()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::setValue( ValueType value)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::getName()",1, 66, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::ForeignMetadataCacheEntry( const TypeContextDescriptor * description , MetadataRequest request , Metadata * candidate)",21, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::getDescription() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::numTrailingObjects( OverloadToken<int> , Args && ...)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::getKeyIntValueForDump() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::compareWithKey( const TypeContextDescriptor * key) const",7, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::allocate( Metadata * candidate)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignMetadataCacheEntry::tryInitialize( Metadata * metadata , PrivateMetadataState state , PrivateMetadataCompletionContext * ctxt)",27, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getForeignTypeMetadata( MetadataRequest request , ForeignTypeMetadata * candidate)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignWitnessTableCacheEntry::ForeignWitnessTableCacheEntry( const ForeignWitnessTableCacheEntry :: Key k , const WitnessTable * d)",3, 29, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignWitnessTableCacheEntry::getKeyIntValueForDump()",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignWitnessTableCacheEntry::compareWithKey( const Key other) const",6, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignWitnessTableCacheEntry::getExtraAllocationSize( const Key , const WitnessTable *)",4, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"ForeignWitnessTableCacheEntry::getExtraAllocationSize() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"_getForeignWitnessTable( const WitnessTable * witnessTableCandidate , const TypeContextDescriptor * contextDescriptor , const ProtocolDescriptor * protocol)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"Metadata::getClassObject() const",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"Metadata::allocateBoxForExistentialIn( ValueBuffer * buffer) const",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"Metadata::allocateBufferIn( ValueBuffer * buffer) const",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"Metadata::projectBufferFrom( ValueBuffer * buffer) const",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"Metadata::deallocateBufferIn( ValueBuffer * buffer) const",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"_swift_debug_verifyTypeLayoutAttribute( Metadata * type , const void * runtimeValue , const void * staticValue , size_t size , const char * description)",29, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::getStringForMetadataKind( MetadataKind kind)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"Metadata::dump() const",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"WitnessTableCacheEntry::WitnessTableCacheEntry( const Metadata * type , const ProtocolConformanceDescriptor * conformance , const void * const * instantiationArgs)",4, 46, 6, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"WitnessTableCacheEntry::getKeyIntValueForDump() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"WitnessTableCacheEntry::compareWithKey( const Metadata * type) const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"WitnessTableCacheEntry::getExtraAllocationSize( const Metadata * type , const ProtocolConformanceDescriptor * conformance , const void * const * instantiationArgs)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"WitnessTableCacheEntry::getExtraAllocationSize() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"WitnessTableCacheEntry::getWitnessTableSize( const ProtocolConformanceDescriptor * conformance)",9, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"getCache( const GenericWitnessTable * gen)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"doesNotRequireInstantiation( const ProtocolConformanceDescriptor * conformance , const GenericWitnessTable * genericTable)",30, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"initializeResilientWitnessTable( const ProtocolConformanceDescriptor * conformance , const Metadata * conformingType , const GenericWitnessTable * genericTable , void ** table)",59, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"WitnessTableCacheEntry::allocate( const ProtocolConformanceDescriptor * conformance , const void * const * instantiationArgs)",72, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getWitnessTable( const ProtocolConformanceDescriptor * conformance , const Metadata * type , const void * const * instantiationArgs)",31, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"findAssociatedTypeName( const ProtocolDescriptor * protocol , const ProtocolRequirement * assocType)",24, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift_getAssociatedTypeWitnessSlowImpl( MetadataRequest request , WitnessTable * wtable , const Metadata * conformingType , const ProtocolRequirement * reqBase , const ProtocolRequirement * assocType)",115, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getAssociatedTypeWitness( MetadataRequest request , WitnessTable * wtable , const Metadata * conformingType , const ProtocolRequirement * reqBase , const ProtocolRequirement * assocType)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift_getAssociatedConformanceWitnessSlowImpl( WitnessTable * wtable , const Metadata * conformingType , const Metadata * assocType , const ProtocolRequirement * reqBase , const ProtocolRequirement * assocConformance)",69, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getAssociatedConformanceWitness( WitnessTable * wtable , const Metadata * conformingType , const Metadata * assocType , const ProtocolRequirement * reqBase , const ProtocolRequirement * assocConformance)",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"performOnMetadataCache( const Metadata * metadata , Callbacks && callbacks)",49, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::addToMetadataQueue( MetadataCompletionQueueEntry * queueEntry , MetadataDependency dependency)",33, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::resumeMetadataCompletion( MetadataCompletionQueueEntry * queueEntry)",32, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_checkMetadataState( MetadataRequest request , const Metadata * type)",35, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"findAnyTransitiveMetadata( const Metadata * type , T && predicate)",59, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"areAllTransitiveMetadataComplete_cheap( const Metadata * type)",42, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"checkTransitiveCompleteness( const Metadata * initialType)",60, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"diagnoseMetadataDependencyCycle( const Metadata * start , ArrayRef<MetadataDependency> links)",56, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"checkMetadataDependency( MetadataDependency dependency)",32, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::checkMetadataDependencyCycle( const Metadata * startMetadata , MetadataDependency firstLink , MetadataDependency secondLink)",25, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"MetadataAllocator::Allocate( size_t size , size_t alignment)",44, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"MetadataAllocator::Deallocate( const void * allocation , size_t size)",25, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::allocateMetadata( size_t size , size_t alignment)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"Metadata::satisfiesClassConstraint() const",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"referencesAnonymousContext( Demangle :: Node * node)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::verifyMangledNameRoundtrip( const Metadata * metadata)",33, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Metadata.cpp,"swift::swift_getTypeContextDescriptor( const Metadata * type)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/CompatibilityOverride.cpp,"getOverrideSectionPtr()",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Heap.cpp,"swift::swift_slowAlloc( size_t size , size_t alignMask)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Heap.cpp,"swift::swift_slowDealloc( void * ptr , size_t bytes , size_t alignMask)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"errorName( int errorcode)",18, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ConditionPlatformHelper::init( pthread_cond_t & condition)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ConditionPlatformHelper::destroy( pthread_cond_t & condition)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ConditionPlatformHelper::notifyOne( pthread_cond_t & condition)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ConditionPlatformHelper::notifyAll( pthread_cond_t & condition)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ConditionPlatformHelper::wait( pthread_cond_t & condition , pthread_mutex_t & mutex)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"MutexPlatformHelper::init( pthread_mutex_t & mutex , bool checked)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"MutexPlatformHelper::destroy( pthread_mutex_t & mutex)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"MutexPlatformHelper::lock( pthread_mutex_t & mutex)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"MutexPlatformHelper::unlock( pthread_mutex_t & mutex)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"MutexPlatformHelper::try_lock( pthread_mutex_t & mutex)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ReadWriteLockPlatformHelper::init( pthread_rwlock_t & rwlock)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ReadWriteLockPlatformHelper::destroy( pthread_rwlock_t & rwlock)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ReadWriteLockPlatformHelper::readLock( pthread_rwlock_t & rwlock)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ReadWriteLockPlatformHelper::try_readLock( pthread_rwlock_t & rwlock)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ReadWriteLockPlatformHelper::writeLock( pthread_rwlock_t & rwlock)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ReadWriteLockPlatformHelper::try_writeLock( pthread_rwlock_t & rwlock)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ReadWriteLockPlatformHelper::readUnlock( pthread_rwlock_t & rwlock)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexPThread.cpp,"ReadWriteLockPlatformHelper::writeUnlock( pthread_rwlock_t & rwlock)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ExistentialContainer.cpp,"OpaqueExistentialContainer::isValueInline() const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ExistentialContainer.cpp,"OpaqueExistentialContainer::projectValue() const",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ExistentialContainer.cpp,"OpaqueExistentialContainer::deinit()",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ExistentialContainer.cpp,"OpaqueExistentialContainer::verify() const",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ExistentialContainer.cpp,"OpaqueExistentialContainer::dump() const",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"getSymbolNameAddr( llvm :: StringRef libraryName , SymbolInfo syminfo , std :: string & symbolName , uintptr_t & addrOut)",58, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::dumpStackTraceEntry( unsigned index , void * framePC , bool shortOutput)",58, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::printCurrentBacktrace( unsigned framesToSkip)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"reportOnCrash( uint32_t flags , const char * message)",23, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"reportOnCrash( uint32_t flags , const char * message)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"reportNow( uint32_t flags , const char * message)",20, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"_swift_runtime_on_report( uintptr_t flags , const char * message , RuntimeErrorDetails * details)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::_swift_reportToDebugger( uintptr_t flags , const char * message , RuntimeErrorDetails * details)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::_swift_shouldReportFatalErrorsToDebugger()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::swift_reportError( uint32_t flags , const char * message)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift_vasprintf( char ** strp , const char * fmt , va_list ap)",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::fatalError( uint32_t flags , const char * format , ...)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::warningv( uint32_t flags , const char * format , va_list args)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::warning( uint32_t flags , const char * format , ...)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift_deletedMethodError()",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::swift_abortRetainOverflow()",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::swift_abortUnownedRetainOverflow()",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::swift_abortWeakRetainOverflow()",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::swift_abortRetainUnowned( const void * object)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::swift_abortDynamicReplacementEnabling()",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Errors.cpp,"swift::swift_abortDynamicReplacementDisabling()",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"extractIntegerPart128( __uint128_t * fixed128 , int fractionBits)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"clearIntegerPart128( __uint128_t * fixed128 , int fractionBits)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"extractIntegerPart128( swift_uint128_t * fixed128 , int fractionBits)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"clearIntegerPart128( swift_uint128_t * fixed128 , int fractionBits)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"bitPatternForDouble( double d)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"swift_decompose_double( double d , int8_t * digits , size_t digits_length , int * decimalExponent)",312, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"bitPatternForFloat( float f)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"swift_decompose_float( float f , int8_t * digits , size_t digits_length , int * decimalExponent)",147, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"swift_decompose_float80( long double d , int8_t * digits , size_t digits_length , int * decimalExponent)",184, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"swift_format_constant( char * dest , size_t length , const char * s)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"swift_format_float( float d , char * dest , size_t length)",53, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"swift_format_double( double d , char * dest , size_t length)",53, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"swift_format_float80( long double d , char * dest , size_t length)",55, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"swift_format_exponential( char * dest , size_t length , bool negative , const int8_t * digits , int digit_count , int exponent)",54, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"swift_format_decimal( char * dest , size_t length , bool negative , const int8_t * digits , int digit_count , int exponent)",89, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply64x32RoundingDown( uint64_t lhs , uint32_t rhs)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply64x32RoundingUp( uint64_t lhs , uint32_t rhs)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply64x64RoundingDown( uint64_t lhs , uint64_t rhs)",26, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply64x64RoundingUp( uint64_t lhs , uint64_t rhs)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply128x64RoundingDown( swift_uint128_t lhs , uint64_t rhs)",37, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply128x64RoundingUp( swift_uint128_t lhs , uint64_t rhs)",38, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply128xi32( swift_uint128_t * lhs , uint32_t rhs)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"isLessThan128x128( swift_uint128_t lhs , swift_uint128_t rhs)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"subtract128x128( swift_uint128_t * lhs , swift_uint128_t rhs)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"shiftRightRoundingDown128( swift_uint128_t lhs , int shift)",20, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"shiftRightRoundingUp128( swift_uint128_t lhs , int shift)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply192x64RoundingDown( swift_uint192_t * lhs , uint64_t rhs)",53, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply192x64RoundingUp( swift_uint192_t * lhs , uint64_t rhs)",54, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply192xi32( swift_uint192_t * lhs , uint32_t rhs)",23, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply192x128RoundingDown( swift_uint192_t * lhs , swift_uint128_t rhs)",87, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"multiply192x128RoundingUp( swift_uint192_t * lhs , swift_uint128_t rhs)",90, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"subtract192x192( swift_uint192_t * lhs , swift_uint192_t rhs)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"isLessThan192x192( swift_uint192_t lhs , swift_uint192_t rhs)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"shiftRightRoundingDown192( swift_uint192_t * lhs , int shift)",30, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"shiftRightRoundingUp192( swift_uint192_t * lhs , int shift)",32, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"binaryExponentFor10ToThe( int p)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"decimalExponentFor2ToThe( int e)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"intervalContainingPowerOf10_Float( int p , uint64_t * lower , uint64_t * upper , int * exponent)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"intervalContainingPowerOf10_Double( int p , swift_uint128_t * lower , swift_uint128_t * upper , int * exponent)",48, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftDtoa.cpp,"intervalContainingPowerOf10_Float80( int p , swift_uint192_t * lower , swift_uint192_t * upper , int * exponent)",35, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"class_getName( const ClassMetadata * type)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_buildNameForMetadata( const Metadata * type , bool qualified , std :: string & result)",42, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift::nameForMetadata( const Metadata * type , bool qualified)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift::swift_getTypeName( const Metadata * type , bool qualified)",45, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift::swift_dynamicCastFailure( const void * sourceType , const char * sourceName , const void * targetType , const char * targetName , const char * message)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift::swift_dynamicCastFailure( const Metadata * sourceType , const Metadata * targetType , const char * message)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_fail( OpaqueValue * srcValue , const Metadata * srcType , const Metadata * targetType , DynamicCastFlags flags , const Metadata * srcDynamicType = nullptr)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_succeed( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , DynamicCastFlags flags)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastClassMetatype( const ClassMetadata * sourceType , const ClassMetadata * targetType)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_dynamicCastClassImpl( const void * object , const ClassMetadata * targetType)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_dynamicCastClassUnconditionalImpl( const void * object , const ClassMetadata * targetType , const char * file , unsigned line , unsigned column)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_unknownClassConformsToObjCProtocol( const OpaqueValue * value , Protocol * protocol)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift::_conformsToProtocol( const OpaqueValue * value , const Metadata * type , ProtocolDescriptorRef protocol , const WitnessTable ** conformance)",76, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_conformsToProtocols( const OpaqueValue * value , const Metadata * type , const ExistentialTypeMetadata * existentialType , const WitnessTable ** conformances)",25, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"shouldDeallocateSource( bool castSucceeded , DynamicCastFlags flags)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"isAnyObjectExistentialType( const ExistentialTypeMetadata * targetType)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"findDynamicValueAndType( OpaqueValue * value , const Metadata * type , OpaqueValue * & outValue , const Metadata * & outType , bool & inoutCanTake , bool isTargetTypeAnyObject , bool isTargetExistentialMetatype)",77, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift::swift_getDynamicType( OpaqueValue * value , const Metadata * self , bool existentialMetatype)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"deallocateDynamicValue( OpaqueValue * value , const Metadata * type)",28, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_dynamicCastMetatypeToObjectConditional( const Metadata * metatype)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_dynamicCastMetatypeToObjectUnconditional( const Metadata * metatype , const char * file , unsigned line , unsigned column)",18, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"isAnyHashableType( const StructMetadata * type)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"isAnyHashableType( const Metadata * type)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastToAnyHashable( OpaqueValue * destination , OpaqueValue * source , const Metadata * sourceType , const Metadata * targetType , DynamicCastFlags flags)",28, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastFromAnyHashable( OpaqueValue * destination , OpaqueValue * source , const Metadata * sourceType , const Metadata * targetType , DynamicCastFlags flags)",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastToExistential( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const ExistentialTypeMetadata * targetType , DynamicCastFlags flags)",243, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastUnknownClassToExistential( const void * object , const ExistentialTypeMetadata * targetType)",24, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_dynamicCastUnknownClassImpl( const void * object , const Metadata * targetType)",35, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_dynamicCastUnknownClassUnconditionalImpl( const void * object , const Metadata * targetType , const char * file , unsigned line , unsigned column)",42, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_dynamicCastMetatypeImpl( const Metadata * sourceType , const Metadata * targetType)",77, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_dynamicCastMetatypeUnconditionalImpl( const Metadata * sourceType , const Metadata * targetType , const char * file , unsigned line , unsigned column)",79, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastUnknownClass( void * object , const Metadata * targetType , bool unconditional)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastUnknownClassIndirect( OpaqueValue * dest , void * object , const Metadata * targetType , DynamicCastFlags flags)",38, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"findErrorWitness( const Metadata * srcType)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastToUnknownClassFromExistential( OpaqueValue * dest , OpaqueValue * src , const ExistentialTypeMetadata * srcType , const Metadata * targetType , DynamicCastFlags flags)",67, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"unwrapExistential( OpaqueValue * src , const ExistentialTypeMetadata * srcType , OpaqueValue * & srcValue , const Metadata * & srcCapturedType , bool & isOutOfLine , bool & canTake)",46, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastFromExistential( OpaqueValue * dest , OpaqueValue * src , const ExistentialTypeMetadata * srcType , const Metadata * targetType , DynamicCastFlags flags)",33, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastMetatypeToMetatype( OpaqueValue * dest , const Metadata * metatype , const MetatypeMetadata * targetType , DynamicCastFlags flags)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_getUnknownClassAsMetatype( void * object)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastUnknownClassToMetatype( OpaqueValue * dest , void * object , const MetatypeMetadata * targetType , DynamicCastFlags flags)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastToMetatype( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const MetatypeMetadata * targetType , DynamicCastFlags flags)",83, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastMetatypeToExistentialMetatype( OpaqueValue * dest , const Metadata * srcMetatype , const ExistentialMetatypeMetadata * targetType , DynamicCastFlags flags , bool writeDestMetatype = true)",61, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastUnknownClassToExistentialMetatype( OpaqueValue * dest , void * object , const ExistentialMetatypeMetadata * targetType , DynamicCastFlags flags)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastToExistentialMetatype( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const ExistentialMetatypeMetadata * targetType , DynamicCastFlags flags)",85, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastToFunction( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const FunctionTypeMetadata * targetType , DynamicCastFlags flags)",58, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"dynamicCastValueToNSError( OpaqueValue * src , const Metadata * srcType , const WitnessTable * srcErrorWitness , DynamicCastFlags flags)",18, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"checkDynamicCastFromOptional( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const Metadata * targetType , DynamicCastFlags flags)",49, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"tryDynamicCastBoxedSwiftValue( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const Metadata * targetType , DynamicCastFlags flags)",69, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastStructToStruct( OpaqueValue * destination , OpaqueValue * source , const StructMetadata * sourceType , const StructMetadata * targetType , DynamicCastFlags flags)",85, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastTupleToTuple( OpaqueValue * destination , OpaqueValue * source , const TupleTypeMetadata * sourceType , const TupleTypeMetadata * targetType , DynamicCastFlags flags)",106, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_dynamicCastImpl( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const Metadata * targetType , DynamicCastFlags flags)",225, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_isClassOrObjCExistentialTypeImpl( const Metadata * T)",20, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_getBridgedObjectiveCType( MetadataRequest request , const Metadata * conformingType , const _ObjectiveCBridgeableWitnessTable * wtable)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastValueToClassViaObjCBridgeable( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const Metadata * targetType , const _ObjectiveCBridgeableWitnessTable * srcBridgeWitness , DynamicCastFlags flags)",31, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastValueToClassExistentialViaObjCBridgeable( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const ExistentialTypeMetadata * targetType , const _ObjectiveCBridgeableWitnessTable * srcBridgeWitness , DynamicCastFlags flags)",31, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_dynamicCastClassToValueViaObjCBridgeable( OpaqueValue * dest , OpaqueValue * src , const Metadata * srcType , const Metadata * targetType , const _ObjectiveCBridgeableWitnessTable * targetBridgeWitness , DynamicCastFlags flags)",92, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"bridgeAnythingNonVerbatimToObjectiveC( OpaqueValue * src , const Metadata * srcType , bool consume)",86, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_bridgeAnythingNonVerbatimToObjectiveC( OpaqueValue * src , const Metadata * srcType)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"findBridgeWitness( const Metadata * T)",32, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_getBridgedNonVerbatimObjectiveCType( const Metadata * value , const Metadata * T)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"tryBridgeNonVerbatimFromObjectiveCUniversal( HeapObject * sourceValue , const Metadata * nativeType , OpaqueValue * destValue)",34, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_bridgeNonVerbatimFromObjectiveC( HeapObject * sourceValue , const Metadata * nativeType , OpaqueValue * destValue , const Metadata * nativeType_)",36, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_bridgeNonVerbatimFromObjectiveCConditional( HeapObject * sourceValue , const Metadata * nativeType , OpaqueValue * destValue , const Metadata * nativeType_)",40, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_isBridgedNonVerbatimToObjectiveC( const Metadata * value , const Metadata * T)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_swift_isClassOrObjCExistentialType( const Metadata * value , const Metadata * T)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift::_swift_class_getSuperclass( const Metadata * theClass)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_isClassType( const Metadata * type)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"swift_isOptionalType( const Metadata * type)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_swift_isOptional( OpaqueValue * src , const Metadata * type)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_swift_extractDynamicValue( OpaqueValue * value , const Metadata * self)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Casting.cpp,"_swift_bridgeToObjectiveCUsingProtocolIfPossible( OpaqueValue * src , const Metadata * srcType)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"array_pod_copy( ArrayCopy copyKind , OpaqueValue * dest , OpaqueValue * src , size_t stride , size_t count)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"get_witness_function( const ValueWitnessTable * wtable)",18, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"array_copy_operation( OpaqueValue * dest , OpaqueValue * src , size_t count , const Metadata * self)",50, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"swift_arrayInitWithCopy( OpaqueValue * dest , OpaqueValue * src , size_t count , const Metadata * self)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"swift_arrayInitWithTakeNoAlias( OpaqueValue * dest , OpaqueValue * src , size_t count , const Metadata * self)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"swift_arrayInitWithTakeFrontToBack( OpaqueValue * dest , OpaqueValue * src , size_t count , const Metadata * self)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"swift_arrayInitWithTakeBackToFront( OpaqueValue * dest , OpaqueValue * src , size_t count , const Metadata * self)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"swift_arrayAssignWithCopyNoAlias( OpaqueValue * dest , OpaqueValue * src , size_t count , const Metadata * self)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"swift_arrayAssignWithCopyFrontToBack( OpaqueValue * dest , OpaqueValue * src , size_t count , const Metadata * self)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"swift_arrayAssignWithCopyBackToFront( OpaqueValue * dest , OpaqueValue * src , size_t count , const Metadata * self)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"swift_arrayAssignWithTake( OpaqueValue * dest , OpaqueValue * src , size_t count , const Metadata * self)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Array.cpp,"swift_arrayDestroy( OpaqueValue * begin , size_t count , const Metadata * self)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RefCount.cpp,"swift::RefCounts<RefCountBits>::incrementSlow( RefCountBits oldbits , uint32_t n)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RefCount.cpp,"swift::RefCounts<RefCountBits>::incrementNonAtomicSlow( RefCountBits oldbits , uint32_t n)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RefCount.cpp,"swift::RefCounts<RefCountBits>::tryIncrementSlow( RefCountBits oldbits)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RefCount.cpp,"swift::RefCounts<RefCountBits>::tryIncrementNonAtomicSlow( RefCountBits oldbits)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RefCount.cpp,"swift::RefCounts<InlineRefCountBits>::allocateSideTable( bool failIfDeiniting)",41, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RefCount.cpp,"swift::RefCounts<InlineRefCountBits>::formWeakReference()",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RefCount.cpp,"swift::RefCounts<RefCountBits>::incrementUnownedSlow( uint32_t n)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/RefCount.cpp,"swift::RefCounts<SideTableRefCountBits>::incrementUnownedSlow( uint32_t n)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/CygwinPort.cpp,"swift::_swift_once_f( uintptr_t * predicate , void * context , void(*function)(void*))",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ErrorDefaultImpls.cpp,"_swift_stdlib_getDefaultErrorCode( OpaqueValue * error , const Metadata * T , const WitnessTable * Error)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Numeric.cpp,"convert( IntegerLiteral value)",29, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Numeric.cpp,"swift::swift_intToFloat32( IntegerLiteral value)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Numeric.cpp,"swift::swift_intToFloat64( IntegerLiteral value)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftRT-COFF.cpp,"swift_image_constructor()",27, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Demangle.cpp,"swift::_buildDemanglingForContext( const ContextDescriptor * context , llvm :: ArrayRef<NodePointer> demangledGenerics , Demangle :: Demangler & Dem)",193, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Demangle.cpp,"_buildDemanglerForBuiltinType( const Metadata * type , Demangle :: Demangler & Dem)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Demangle.cpp,"_buildDemanglingForNominalType( const Metadata * type , Demangle :: Demangler & Dem)",66, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Demangle.cpp,"swift::_swift_buildDemanglingForMetadata( const Metadata * type , Demangle :: Demangler & Dem)",317, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Demangle.cpp,"swift_demangle( const char * mangledName , size_t mangledNameLength , char * outputBuffer , size_t * outputBufferSize , uint32_t flags)",40, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Portability.cpp,"_swift_strlcpy( char * dst , const char * src , size_t maxlen)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionCOFF.cpp,"record( const swift :: MetadataSections * sections)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionCOFF.cpp,"swift::initializeProtocolLookup()",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionCOFF.cpp,"swift::initializeProtocolConformanceLookup()",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionCOFF.cpp,"swift::initializeTypeMetadataRecordLookup()",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionCOFF.cpp,"swift::initializeDynamicReplacementLookup()",2, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionCOFF.cpp,"swift_addNewDSOImage( const void * addr)",31, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionCOFF.cpp,"swift::lookupSymbol( const void * address , SymbolInfo * info)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ImageInspectionCOFF.cpp,"swift::lookupSection( const char * segment , const char * section , size_t * outSize)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/AnyHashableSupport.cpp,"HashableConformanceEntry::HashableConformanceEntry( HashableConformanceKey key , const Metadata * baseTypeThatConformsToHashable)",4, 74, 8, 0
repos/cpp/swift/stdlib/public/runtime/AnyHashableSupport.cpp,"HashableConformanceEntry::compareWithKey( const HashableConformanceKey & key) const",7, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/AnyHashableSupport.cpp,"HashableConformanceEntry::getExtraAllocationSize( HashableConformanceKey key , const Metadata * baseTypeThatConformsToHashable)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/AnyHashableSupport.cpp,"HashableConformanceEntry::getExtraAllocationSize() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/AnyHashableSupport.cpp,"findHashableBaseTypeImpl( const Metadata * type)",22, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/AnyHashableSupport.cpp,"swift::hashable_support::findHashableBaseTypeOfHashableType( const Metadata * type)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/AnyHashableSupport.cpp,"swift::hashable_support::findHashableBaseType( const Metadata * type)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/AnyHashableSupport.cpp,"_swift_makeAnyHashableUpcastingToHashableBaseType( OpaqueValue * value , const void * anyHashableResultPointer , const Metadata * type , const WitnessTable * hashableWT)",44, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/LLVMSupport.cpp,"llvm::_report_bad_alloc_error( const char * Reason , bool GenCrashDiag)",1, 71, 0, 0
repos/cpp/swift/stdlib/public/runtime/LLVMSupport.cpp,"llvm::report_bad_alloc_error( const char * Reason , bool GenCrashDiag)",1, 65, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"getDemanglerForRuntimeTypeResolution()",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ResolveAsSymbolicReference::operator ( )( SymbolicReferenceKind kind , Directness isIndirect , int32_t offset , const void * base)",44, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"_buildDemanglingForSymbolicReference( SymbolicReferenceKind kind , const void * resolvedReference , Demangler & Dem)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ResolveToDemanglingForContext::operator ( )( SymbolicReferenceKind kind , Directness isIndirect , int32_t offset , const void * base)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ExpandResolvedSymbolicReferences::operator ( )( SymbolicReferenceKind kind , const void * ptr)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"TypeMetadataSection::begin() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"TypeMetadataSection::end() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"NominalTypeDescriptorCacheEntry::NominalTypeDescriptorCacheEntry( const llvm :: StringRef name , const ContextDescriptor * description)",3, 54, 8, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"NominalTypeDescriptorCacheEntry::getDescription()",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"NominalTypeDescriptorCacheEntry::compareWithKey( llvm :: StringRef aName) const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"NominalTypeDescriptorCacheEntry::getExtraAllocationSize( T && ... ignored)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"TypeMetadataPrivateState::TypeMetadataPrivateState()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"_registerTypeMetadataRecords( TypeMetadataPrivateState & T , const TypeMetadataRecord * begin , const TypeMetadataRecord * end)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::addImageTypeMetadataRecordBlockCallback( const void * records , uintptr_t recordsSize)",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::swift_registerTypeMetadataRecords( const TypeMetadataRecord * begin , const TypeMetadataRecord * end)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"_findExtendedTypeContextDescriptor( const ExtensionContextDescriptor * extension , Demangle :: NodePointer * demangledNode = nullptr)",20, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::_isCImportedTagType( const TypeContextDescriptor * type , const ParsedTypeIdentity & identity)",18, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ParsedTypeIdentity::parse( const TypeContextDescriptor * type)",79, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"sameObjCTypeManglings( Demangle :: NodePointer node1 , Demangle :: NodePointer node2)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::_contextDescriptorMatchesMangling( const ContextDescriptor * context , Demangle :: NodePointer node)",184, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"_searchTypeMetadataRecords( TypeMetadataPrivateState & T , Demangle :: NodePointer node)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"_findNominalTypeDescriptor( Demangle :: NodePointer node , Demangle :: Demangler & Dem)",35, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ProtocolSection::begin() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ProtocolSection::end() const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ProtocolDescriptorCacheEntry::ProtocolDescriptorCacheEntry( const llvm :: StringRef name , const ProtocolDescriptor * description)",3, 56, 10, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ProtocolDescriptorCacheEntry::getDescription()",1, 71, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ProtocolDescriptorCacheEntry::compareWithKey( llvm :: StringRef aName) const",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ProtocolDescriptorCacheEntry::getExtraAllocationSize( T && ... ignored)",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"ProtocolMetadataPrivateState::ProtocolMetadataPrivateState()",3, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"_registerProtocols( ProtocolMetadataPrivateState & C , const ProtocolRecord * begin , const ProtocolRecord * end)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::addImageProtocolsBlockCallback( const void * protocols , uintptr_t protocolsSize)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::swift_registerProtocols( const ProtocolRecord * begin , const ProtocolRecord * end)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"_searchProtocolRecords( ProtocolMetadataPrivateState & C , const Demangle :: NodePointer & node)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"_findProtocolDescriptor( const Demangle :: NodePointer & node , Demangle :: Demangler & Dem , std :: string & mangledName)",31, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"FieldDescriptorCacheEntry::FieldDescriptorCacheEntry( const Metadata * type , const FieldDescriptor * description)",3, 48, 8, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"FieldDescriptorCacheEntry::getDescription()",1, 66, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"FieldDescriptorCacheEntry::compareWithKey( const Metadata * other) const",5, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"FieldDescriptorCacheEntry::getExtraAllocationSize( Args && ... ignored)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"StaticFieldSection::StaticFieldSection( const void * begin , const void * end)",2, 34, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"StaticFieldSection::begin() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"StaticFieldSection::end() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DynamicFieldSection::DynamicFieldSection( const FieldDescriptor ** fields , size_t size)",2, 45, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DynamicFieldSection::begin() const",1, 58, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DynamicFieldSection::end() const",1, 54, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::_depthIndexToFlatIndex( unsigned depth , unsigned index , ArrayRef<unsigned> paramCounts)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::_gatherGenericParameterCounts( const ContextDescriptor * descriptor , std :: vector<unsigned> & genericParamCounts)",28, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"findAssociatedTypeByName( const ProtocolDescriptor * protocol , StringRef name)",44, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"getLocalGenericParams( const ContextDescriptor * context)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::DecodedMetadataBuilder( Demangler & demangler , SubstGenericParameterFn substGenericParameter , SubstDependentWitnessTableFn substWitnessTable)",6, 47, 6, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::getNodeFactory()",1, 64, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createNominalTypeDecl( const Demangle :: NodePointer & node) const",5, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createProtocolDecl( const Demangle :: NodePointer & node) const",17, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createObjCProtocolDecl( const std :: string & mangledName) const",9, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createObjCClassType( const std :: string & mangledName) const",8, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createNominalType( BuiltNominalTypeDecl metadataOrTypeDecl , BuiltType parent) const",6, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createBoundGenericType( BuiltNominalTypeDecl anyTypeDecl , const ArrayRef<BuiltType> genericArgs , const BuiltType parent) const",88, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createBuiltinType( StringRef mangledName) const",7, 4, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createMetatypeType( BuiltType instance , bool wasAbstract) const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createExistentialMetatypeType( BuiltType instance) const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createProtocolCompositionType( ArrayRef<BuiltProtocolDecl> protocols , BuiltType superclass , bool isClassBound) const",19, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createGenericTypeParameterType( unsigned depth , unsigned index) const",8, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createFunctionType( ArrayRef<Demangle::FunctionParam<BuiltType>> params , BuiltType result , FunctionTypeFlags flags) const",22, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createTupleType( ArrayRef<BuiltType> elements , std :: string labels , bool variadic) const",12, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createDependentMemberType( StringRef name , BuiltType base , BuiltProtocolDecl protocol) const",24, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::createSILBoxType( BuiltType base) const",4, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DecodedMetadataBuilder::getReferenceOwnership() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift_getTypeByMangledNodeImpl( Demangler & demangler , Demangle :: NodePointer node , SubstGenericParameterFn substGenericParam , SubstDependentWitnessTableFn substWitnessTable)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift_getTypeByMangledNameImpl( StringRef typeName , SubstGenericParameterFn substGenericParam , SubstDependentWitnessTableFn substWitnessTable)",51, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift_getTypeByMangledNameInEnvironment( const char * typeNameStart , size_t typeNameLength , const TargetGenericEnvironment<InProcess> * environment , const void * const * genericArgs)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift_getTypeByMangledNameInContext( const char * typeNameStart , size_t typeNameLength , const TargetContextDescriptor<InProcess> * context , const void * const * genericArgs)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift_stdlib_getTypeByMangledNameUntrusted( const char * typeNameStart , size_t typeNameLength)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"getObjCClassByMangledName( const char * _Nonnull typeName , Class _Nullable * _Nonnull outClass)",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"installGetClassHook()",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"SubstGenericParametersFromMetadata::buildDescriptorPath( const ContextDescriptor * context) const",33, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"SubstGenericParametersFromMetadata::buildEnvironmentPath( const TargetGenericEnvironment<InProcess> * environment) const",39, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"SubstGenericParametersFromMetadata::setup() const",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"SubstGenericParametersFromMetadata::operator ( )( unsigned depth , unsigned index) const",39, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"SubstGenericParametersFromMetadata::operator ( )( const Metadata * type , unsigned index) const",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"SubstGenericParametersFromWrittenArgs::operator ( )( unsigned depth , unsigned index) const",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"SubstGenericParametersFromWrittenArgs::operator ( )( const Metadata * type , unsigned index) const",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"demangleToGenericParamRef( StringRef typeName)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::gatherWrittenGenericArgs( const Metadata * metadata , const TypeContextDescriptor * description , std :: vector<const Metadata*> & allGenericArgs)",107, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"InitializeDynamicReplacementLookup::InitializeDynamicReplacementLookup()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DynamicReplacementDescriptor::enableReplacement() const",28, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"DynamicReplacementDescriptor::disableReplacement() const",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"AutomaticDynamicReplacementEntry::enable() const",1, 54, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"AutomaticDynamicReplacementEntry::getFlags()",1, 40, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"AutomaticDynamicReplacements::getReplacementEntries() const",5, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"AutomaticDynamicReplacements::enableReplacements() const",4, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::addImageDynamicReplacementBlockCallback( const void * replacements , uintptr_t replacementsSize)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::swift_enableDynamicReplacementScope( const DynamicReplacementScope * scope)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MetadataLookup.cpp,"swift::swift_disableDynamicReplacementScope( const DynamicReplacementScope * scope)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::Mapping::Mapping( int fd , size_t fileSize , off_t offset , size_t length)",21, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::Mapping::data()",6, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::Mapping::~Mapping()",5, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::StaticBinaryELF()",20, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::getPathName()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::getSectionLoadAddress( const void * addr)",14, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::findSymbol( const void * addr)",16, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::symbolName( const Elf_Sym * symbol)",9, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::getExecutablePathName()",42, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::mmapExecutable()",39, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"StaticBinaryELF::findSectionHeader( ArrayRef<Elf_Shdr> headers , Elf_Word sectionType)",20, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/StaticBinaryELF.cpp,"swift::lookupSymbol( const void * address , SymbolInfo * info)",19, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"getAccessName( ExclusivityFlags flags)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"reportExclusivityConflict( ExclusivityFlags oldAction , void * oldPC , ExclusivityFlags newFlags , void * newPC , void * pointer)",47, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"Access::getNext() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"Access::setNext( Access * next)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"Access::getAccessAction() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"Access::initialize( void * pc , void * pointer , Access * next , ExclusivityFlags action)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"AccessSet::AccessSet()",1, 27, 2, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"AccessSet::insert( Access * access , void * pc , void * pointer , ExclusivityFlags flags)",28, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"AccessSet::remove( Access * access)",20, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"AccessSet::forEach( std :: function<void(Access*)> action)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"getAccessSet()",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"getAccessSet()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"createAccessSetThreadKey()",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"getAccessSet()",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"swift::swift_beginAccess( void * pointer , ValueBuffer * buffer , ExclusivityFlags flags , void * pc)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"swift::swift_endAccess( ValueBuffer * buffer)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Exclusivity.cpp,"swift::swift_dumpTrackedAccesses()",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/SwiftRT-ELF.cpp,"swift_image_constructor()",27, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ErrorObjectNative.cpp,"_getErrorAllocatedSizeAndAlignmentMask( const Metadata * type)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ErrorObjectNative.cpp,"_destroyErrorObject( SWIFT_CONTEXT HeapObject * obj)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ErrorObjectNative.cpp,"swift::swift_allocError( const swift :: Metadata * type , const swift :: WitnessTable * errorConformance , OpaqueValue * initialValue , bool isTake)",25, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ErrorObjectNative.cpp,"swift::swift_deallocError( SwiftError * error , const Metadata * type)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ErrorObjectNative.cpp,"swift::swift_getErrorValue( const SwiftError * errorObject , void ** scratch , ErrorValueResult * out)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/ErrorObjectNative.cpp,"swift::swift_willThrow( SWIFT_CONTEXT void * unused , SWIFT_ERROR_RESULT SwiftError ** error)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/MutexWin32.cpp,"ConditionPlatformHelper::wait( CONDITION_VARIABLE & condition , SRWLOCK & mutex)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Once.cpp,"swift::swift_once( swift_once_t * predicate , void(*fn)(void*) , void * context)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"swift_copyKeyPathTrivialIndices( const void * src , void * dest , size_t bytes)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"equateGenericArguments( const void * a , const void * b , size_t bytes)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"hashGenericArguments( const void * src , size_t bytes)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"YieldOnceTemporary::YieldOnceTemporary( const Metadata * type)",1, 61, 4, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"YieldOnceTemporary::allocateIn( const Metadata * type , YieldOnceBuffer * buffer)",6, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"YieldOnceTemporary::destroyAndDeallocateIn( YieldOnceBuffer * buffer)",5, 6, 4, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"_destroy_temporary_continuation( YieldOnceBuffer * buffer , bool forUnwind)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"swift::swift_readAtKeyPath( YieldOnceBuffer * buffer , const OpaqueValue * root , void * keyPath)",29, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"_release_owner_continuation( YieldOnceBuffer * buffer , bool forUnwind)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"swift::swift_modifyAtWritableKeyPath( YieldOnceBuffer * buffer , OpaqueValue * root , void * keyPath)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/KeyPaths.cpp,"swift::swift_modifyAtReferenceWritableKeyPath( YieldOnceBuffer * buffer , const OpaqueValue * root , void * keyPath)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"getMutableVWTableForInit( EnumMetadata * self , EnumLayoutFlags flags)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"swift::swift_initEnumMetadataSingleCase( EnumMetadata * self , EnumLayoutFlags layoutFlags , const TypeLayout * payloadLayout)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"swift::swift_initEnumMetadataSinglePayload( EnumMetadata * self , EnumLayoutFlags layoutFlags , const TypeLayout * payloadLayout , unsigned emptyCases)",66, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"swift::swift_getEnumTagSinglePayloadGeneric( const OpaqueValue * value , unsigned emptyCases , const Metadata * payloadType , getExtraInhabitantTag_t * getExtraInhabitantTag)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"swift::swift_storeEnumTagSinglePayloadGeneric( OpaqueValue * value , unsigned whichCase , unsigned emptyCases , const Metadata * payloadType , storeExtraInhabitantTag_t * storeExtraInhabitantTag)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"swift::swift_initEnumMetadataMultiPayload( EnumMetadata * enumType , EnumLayoutFlags layoutFlags , unsigned numPayloads , const TypeLayout * const * payloadLayouts)",57, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"getMultiPayloadLayout( const EnumMetadata * enumType)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"storeMultiPayloadTag( OpaqueValue * value , MultiPayloadLayout layout , unsigned tag)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"storeMultiPayloadValue( OpaqueValue * value , MultiPayloadLayout layout , unsigned payloadValue)",27, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"loadMultiPayloadTag( const OpaqueValue * value , MultiPayloadLayout layout , unsigned baseValue = 0)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"loadMultiPayloadValue( const OpaqueValue * value , MultiPayloadLayout layout)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"getMultiPayloadExtraInhabitantTag( const OpaqueValue * value , unsigned enumNumXI , const Metadata * enumType)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"storeMultiPayloadExtraInhabitantTag( OpaqueValue * value , unsigned tag , unsigned enumNumXI , const Metadata * enumType)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"getMultiPayloadEnumTagSinglePayload( const OpaqueValue * value , uint32_t numExtraCases , const Metadata * enumType)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"storeMultiPayloadEnumTagSinglePayload( OpaqueValue * value , uint32_t index , uint32_t numExtraCases , const Metadata * enumType)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"swift::swift_storeEnumTagMultiPayload( OpaqueValue * value , const EnumMetadata * enumType , unsigned whichCase)",25, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/Enum.cpp,"swift::swift_getEnumCaseMultiPayload( const OpaqueValue * value , const EnumMetadata * enumType)",22, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"isValidPointerForNativeRetain( const void * p)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_allocObject( HeapMetadata const * metadata , size_t requiredSize , size_t requiredAlignmentMask)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"_swift_allocObject_( HeapMetadata const * metadata , size_t requiredSize , size_t requiredAlignmentMask)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_initStackObject( HeapMetadata const * metadata , HeapObject * object)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"initStaticObjectWithContext( void * OpaqueCtx)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_initStaticObject( HeapMetadata const * metadata , HeapObject * object)",14, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_verifyEndOfLifetime( HeapObject * object)",13, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift_bufferAllocate( HeapMetadata const * bufferType , size_t size , size_t alignMask)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"destroyGenericBox( SWIFT_CONTEXT HeapObject * o)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"BoxCacheEntry::BoxCacheEntry( const Metadata * type)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"BoxCacheEntry::getKeyIntValueForDump()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"BoxCacheEntry::compareWithKey( const Metadata * type) const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"BoxCacheEntry::getExtraAllocationSize( const Metadata * key)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"BoxCacheEntry::getExtraAllocationSize() const",3, 4, 2, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_makeBoxUnique( OpaqueValue * buffer , const Metadata * type , size_t alignMask)",24, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_allocBox( const Metadata * type)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_deallocBox( HeapObject * o)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_projectBox( HeapObject * o)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_allocEmptyBox()",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_retain( HeapObject * object)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"_swift_retain_( HeapObject * object)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_retain( HeapObject * object)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_retain_n( HeapObject * object , uint32_t n)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"_swift_retain_n_( HeapObject * object , uint32_t n)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_retain_n( HeapObject * object , uint32_t n)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_release( HeapObject * object)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"_swift_release_( HeapObject * object)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_release( HeapObject * object)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_release_n( HeapObject * object , uint32_t n)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"_swift_release_n_( HeapObject * object , uint32_t n)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_release_n( HeapObject * object , uint32_t n)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_retainCount( HeapObject * object)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_unownedRetainCount( HeapObject * object)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakRetainCount( HeapObject * object)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_unownedRetain( HeapObject * object)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_unownedRelease( HeapObject * object)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_unownedRetain( HeapObject * object)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_unownedRelease( HeapObject * object)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_unownedRetain_n( HeapObject * object , int n)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_unownedRelease_n( HeapObject * object , int n)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_unownedRetain_n( HeapObject * object , int n)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_unownedRelease_n( HeapObject * object , int n)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_tryRetain( HeapObject * object)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"_swift_tryRetain_( HeapObject * object)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_isDeallocating( HeapObject * object)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_setDeallocating( HeapObject * object)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_unownedRetainStrong( HeapObject * object)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_unownedRetainStrong( HeapObject * object)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_unownedRetainStrongAndRelease( HeapObject * object)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_nonatomic_unownedRetainStrongAndRelease( HeapObject * object)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_unownedCheck( HeapObject * object)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"_swift_release_dealloc( HeapObject * object)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_rootObjCDealloc( HeapObject * self)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_deallocClassInstance( HeapObject * object , size_t allocatedSize , size_t allocatedAlignMask)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_deallocPartialClassInstance( HeapObject * object , HeapMetadata const * metadata , size_t allocatedSize , size_t allocatedAlignMask)",56, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"memset_pattern8( void * b , const void * pattern8 , size_t len)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift_deallocObjectImpl( HeapObject * object , size_t allocatedSize , size_t allocatedAlignMask , bool isDeiniting)",99, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_deallocObject( HeapObject * object , size_t allocatedSize , size_t allocatedAlignMask)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_deallocUninitializedObject( HeapObject * object , size_t allocatedSize , size_t allocatedAlignMask)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakInit( WeakReference * ref , HeapObject * value)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakAssign( WeakReference * ref , HeapObject * value)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakLoadStrong( WeakReference * ref)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakTakeStrong( WeakReference * ref)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakDestroy( WeakReference * ref)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakCopyInit( WeakReference * dest , WeakReference * src)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakTakeInit( WeakReference * dest , WeakReference * src)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakCopyAssign( WeakReference * dest , WeakReference * src)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"swift::swift_weakTakeAssign( WeakReference * dest , WeakReference * src)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/runtime/HeapObject.cpp,"HeapObject::dump() const",17, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/LibcShims.cpp,"swift::_swift_stdlib_putchar_unlocked( int c)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/LibcShims.cpp,"swift::_swift_stdlib_fwrite_stdout( const void * ptr , __swift_size_t size , __swift_size_t nitems)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/LibcShims.cpp,"swift::_swift_stdlib_read( int fd , void * buf , __swift_size_t nbyte)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/LibcShims.cpp,"swift::_swift_stdlib_write( int fd , const void * buf , __swift_size_t nbyte)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/LibcShims.cpp,"swift::_swift_stdlib_close( int fd)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/CommandLine.cpp,"_swift_stdlib_overrideUnsafeArgvArgc( char ** argv , int argc)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/CommandLine.cpp,"_swift_stdlib_getUnsafeArgvArgc( int * outArgLen)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/CommandLine.cpp,"_swift_stdlib_getUnsafeArgvArgc( int * outArgLen)",30, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/CommandLine.cpp,"_swift_stdlib_getUnsafeArgvArgc( int * outArgLen)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/CommandLine.cpp,"_swift_stdlib_getUnsafeArgvArgc( int * outArgLen)",43, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/CommandLine.cpp,"_swift_stdlib_getUnsafeArgvArgc( int * outArgLen)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_strtold_l( const char * nptr , char ** endptr , locale_t)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_strtod_l( const char * nptr , char ** endptr , locale_t loc)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_strtof_l( const char * nptr , char ** endptr , locale_t loc)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"uint64ToStringImpl( char * Buffer , uint64_t Value , int64_t Radix , bool Uppercase , bool Negative)",26, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_int64ToString( char * Buffer , size_t BufferLength , int64_t Value , int64_t Radix , bool Uppercase)",22, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_uint64ToString( char * Buffer , intptr_t BufferLength , uint64_t Value , int64_t Radix , bool Uppercase)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"getCLocale()",5, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"makeCLocale()",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"getCLocale()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_snprintf_l( char * Str , size_t StrSize , locale_t Locale , const char * Format , ...)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_floatingPointToString( char * Buffer , size_t BufferLength , T Value , const char * Format , bool Debug)",51, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_float32ToString( char * Buffer , size_t BufferLength , float Value , bool Debug)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_float64ToString( char * Buffer , size_t BufferLength , double Value , bool Debug)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_float80ToString( char * Buffer , size_t BufferLength , long double Value , bool Debug)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::swift_stdlib_readLine_stdin( unsigned char ** LinePtr)",51, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift_stringIsSignalingNaN( const char * nptr)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"_swift_stdlib_strtoX_clocale_impl( const char * nptr , T * outResult)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_strtold_clocale( const char * nptr , void * outResult)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_strtod_clocale( const char * nptr , double * outResult)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_strtof_clocale( const char * nptr , float * outResult)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"_swift_stdlib_strtoX_clocale_impl( const char * nptr , T * outResult , T huge , T(*posixImpl)(const char*,char**,locale_t))",21, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_strtold_clocale( const char * nptr , void * outResult)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_strtod_clocale( const char * nptr , double * outResult)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_strtof_clocale( const char * nptr , float * outResult)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_flockfile_stdout()",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_funlockfile_stdout()",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_putc_stderr( int C)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Stubs.cpp,"swift::_swift_stdlib_getHardwareConcurrency()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/MathStubs.cpp,"__muloti4( ti_int a , ti_int b , int * overflow)",37, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/MathStubs.cpp,"__mulodi4( di_int a , di_int b , int * overflow)",37, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/MathStubs.cpp,"__udivmodti4( tu_int a , tu_int b , tu_int * rem)",211, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/MathStubs.cpp,"__udivti3( tu_int a , tu_int b)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/MathStubs.cpp,"__umodti3( tu_int a , tu_int b)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/MathStubs.cpp,"__divti3( ti_int a , ti_int b)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/MathStubs.cpp,"__modti3( ti_int a , ti_int b)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/GlobalObjects.cpp,"initializeHashingParameters()",15, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/GlobalObjects.cpp,"swift::_swift_instantiateInertHeapObject( void * address , const HeapMetadata * metadata)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Random.cpp,"swift::swift_stdlib_random( void * buf , __swift_size_t nbytes)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Random.cpp,"swift::swift_stdlib_random( void * buf , __swift_size_t nbytes)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Random.cpp,"swift::swift_stdlib_random( void * buf , __swift_size_t nbytes)",39, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/ThreadLocalStorage.cpp,"destroyTLS_CCAdjustmentThunk( void * ptr)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/ThreadLocalStorage.cpp,"_stdlib_thread_key_create( __swift_thread_key_t * _Nonnull key , __swift_thread_key_destructor _Nullable destructor)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/ThreadLocalStorage.cpp,"_swift_stdlib_threadLocalStorageGet( void)",19, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/ThreadLocalStorage.cpp,"_swift_stdlib_threadLocalStorageGet( void)",23, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Assert.cpp,"logPrefixAndMessageToDebugger( const unsigned char * prefix , int prefixLength , const unsigned char * message , int messageLength)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Assert.cpp,"swift::_swift_stdlib_reportFatalErrorInFile( const unsigned char * prefix , int prefixLength , const unsigned char * message , int messageLength , const unsigned char * file , int fileLength , uint32_t line , uint32_t flags)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Assert.cpp,"swift::_swift_stdlib_reportFatalError( const unsigned char * prefix , int prefixLength , const unsigned char * message , int messageLength , uint32_t flags)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Assert.cpp,"swift::_swift_stdlib_reportUnimplementedInitializerInFile( const unsigned char * className , int classNameLength , const unsigned char * initName , int initNameLength , const unsigned char * file , int fileLength , uint32_t line , uint32_t column , uint32_t flags)",20, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/Assert.cpp,"swift::_swift_stdlib_reportUnimplementedInitializer( const unsigned char * className , int classNameLength , const unsigned char * initName , int initNameLength , uint32_t flags)",16, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::_swift_stdlib_unicode_strToUpper( uint16_t * Destination , int32_t DestinationCapacity , const uint16_t * Source , int32_t SourceLength)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::_swift_stdlib_unicode_strToLower( uint16_t * Destination , int32_t DestinationCapacity , const uint16_t * Source , int32_t SourceLength)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"ptr_cast( U * p)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"ptr_cast( const U * p)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_ubrk_close( swift :: __swift_stdlib_UBreakIterator * bi)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_ubrk_open( swift :: __swift_stdlib_UBreakIteratorType type , const char * locale , const __swift_stdlib_UChar * text , int32_t textLength , __swift_stdlib_UErrorCode * status)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_ubrk_preceding( swift :: __swift_stdlib_UBreakIterator * bi , int32_t offset)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_ubrk_following( swift :: __swift_stdlib_UBreakIterator * bi , int32_t offset)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_ubrk_setText( swift :: __swift_stdlib_UBreakIterator * bi , const __swift_stdlib_UChar * text , __swift_int32_t textLength , __swift_stdlib_UErrorCode * status)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_ubrk_setUText( swift :: __swift_stdlib_UBreakIterator * bi , __swift_stdlib_UText * text , __swift_stdlib_UErrorCode * status)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_utext_openUTF8( __swift_stdlib_UText * ut , const char * s , int64_t len , __swift_stdlib_UErrorCode * status)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_utext_openUChars( __swift_stdlib_UText * ut , const __swift_stdlib_UChar * s , int64_t len , __swift_stdlib_UErrorCode * status)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_unorm2_hasBoundaryBefore( const __swift_stdlib_UNormalizer2 * ptr , __swift_stdlib_UChar32 char32)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_unorm2_getNFCInstance( __swift_stdlib_UErrorCode * err)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_unorm2_normalize( const __swift_stdlib_UNormalizer2 * norm , const __swift_stdlib_UChar * src , __swift_int32_t len , __swift_stdlib_UChar * dst , __swift_int32_t capacity , __swift_stdlib_UErrorCode * err)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_unorm2_spanQuickCheckYes( const __swift_stdlib_UNormalizer2 * norm , const __swift_stdlib_UChar * ptr , __swift_int32_t len , __swift_stdlib_UErrorCode * err)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_u_hasBinaryProperty( __swift_stdlib_UChar32 c , __swift_stdlib_UProperty p)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_u_charAge( __swift_stdlib_UChar32 c , __swift_stdlib_UVersionInfo versionInfo)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_u_getIntPropertyValue( __swift_stdlib_UChar32 c , __swift_stdlib_UProperty p)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_u_charName( __swift_stdlib_UChar32 code , __swift_stdlib_UCharNameChoice nameChoice , char * buffer , __swift_int32_t bufferLength , __swift_stdlib_UErrorCode * pErrorCode)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_u_strToLower( __swift_stdlib_UChar * dest , __swift_int32_t destCapacity , const __swift_stdlib_UChar * src , __swift_int32_t srcLength , const char * locale , __swift_stdlib_UErrorCode * pErrorCode)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_u_strToTitle( __swift_stdlib_UChar * dest , __swift_int32_t destCapacity , const __swift_stdlib_UChar * src , __swift_int32_t srcLength , __swift_stdlib_UBreakIterator * titleIter , const char * locale , __swift_stdlib_UErrorCode * pErrorCode)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_u_strToUpper( __swift_stdlib_UChar * dest , __swift_int32_t destCapacity , const __swift_stdlib_UChar * src , __swift_int32_t srcLength , const char * locale , __swift_stdlib_UErrorCode * pErrorCode)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/stubs/UnicodeNormalization.cpp,"swift::__swift_stdlib_u_getNumericValue( __swift_stdlib_UChar32 c)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::getRemoteAddrOfTypeRefPointer( const void * pointer)",20, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::TypeRefBuilder()",1, 48, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"normalizeReflectionName( Demangler & dem , StringRef reflectionName)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"reflectionNameMatches( Demangler & dem , StringRef reflectionName , StringRef searchName)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::lookupTypeWitness( const std :: string & MangledTypeName , const std :: string & Member , const StringRef Protocol)",46, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::lookupSuperclass( const TypeRef * TR)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::getFieldTypeInfo( const TypeRef * TR)",36, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::getFieldTypeRefs( const TypeRef * TR , const std :: pair<const FieldDescriptor*,const ReflectionInfo*> & FD , std :: vector<FieldTypeInfo> & Fields)",40, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::getBuiltinTypeInfo( const TypeRef * TR)",30, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::getCaptureDescriptor( uintptr_t RemoteAddress)",12, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::getClosureContextInfo( const CaptureDescriptor & CD , uintptr_t TypeRefOffset)",35, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::dumpTypeRef( StringRef MangledName , std :: ostream & OS , bool printTypeName)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::dumpFieldSection( std :: ostream & OS)",27, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::dumpAssociatedTypeSection( std :: ostream & OS)",26, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::dumpBuiltinTypeSection( std :: ostream & OS)",18, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"ClosureContextInfo::dump() const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"ClosureContextInfo::dump( std :: ostream & OS) const",21, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::dumpCaptureSection( std :: ostream & OS)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRefBuilder.cpp,"TypeRefBuilder::dumpAllSections( std :: ostream & OS)",18, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeInfo::dump() const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::PrintTypeInfo::indent( unsigned Amount)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::PrintTypeInfo::printHeader( const std :: string & name)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::PrintTypeInfo::printField( const std :: string & name , const T & value)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::PrintTypeInfo::printRec( const TypeInfo & TI)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::PrintTypeInfo::printBasic( const TypeInfo & TI)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::PrintTypeInfo::printFields( const RecordTypeInfo & TI)",13, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::PrintTypeInfo::PrintTypeInfo( std :: ostream & OS , unsigned Indent)",2, 32, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::PrintTypeInfo::print( const TypeInfo & TI)",83, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeInfo::dump( std :: ostream & OS , unsigned Indent) const",4, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::BuiltinTypeInfo::BuiltinTypeInfo( const BuiltinTypeDescriptor * descriptor)",8, 49, 6, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::ExistentialTypeInfoBuilder::isSingleError() const",19, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::ExistentialTypeInfoBuilder::examineProtocols()",75, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::ExistentialTypeInfoBuilder::ExistentialTypeInfoBuilder( TypeConverter & TC)",5, 24, 4, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::ExistentialTypeInfoBuilder::addProtocol( const TypeRef * P)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::ExistentialTypeInfoBuilder::addProtocolComposition( const ProtocolCompositionTypeRef * PC)",50, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::ExistentialTypeInfoBuilder::addAnyObject()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::ExistentialTypeInfoBuilder::markInvalid()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::ExistentialTypeInfoBuilder::build()",68, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::ExistentialTypeInfoBuilder::buildMetatype()",23, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::RecordTypeInfoBuilder::addField( unsigned fieldSize , unsigned fieldAlignment , unsigned numExtraInhabitants , bool bitwiseTakable)",53, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::RecordTypeInfoBuilder::addField( const std :: string & Name , const TypeRef * TR)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::RecordTypeInfoBuilder::build()",14, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getReferenceTypeInfo( ReferenceKind Kind , ReferenceCounting Refcounting)",55, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getThinFunctionTypeInfo()",15, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getThickFunctionTypeInfo()",11, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getAnyMetatypeTypeInfo()",15, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getEmptyTypeInfo()",12, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getRawPointerTypeRef()",7, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getNativeObjectTypeRef()",7, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getUnknownObjectTypeRef()",7, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getThinFunctionTypeRef()",7, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getAnyMetatypeTypeRef()",7, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::HasFixedSize()",1, 20, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitBuiltinTypeRef( const BuiltinTypeRef * B)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitNominalTypeRef( const NominalTypeRef * N)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitBoundGenericTypeRef( const BoundGenericTypeRef * BG)",9, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitTupleTypeRef( const TupleTypeRef * T)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitFunctionTypeRef( const FunctionTypeRef * F)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitProtocolCompositionTypeRef( const ProtocolCompositionTypeRef * PC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitMetatypeTypeRef( const MetatypeTypeRef * M)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitExistentialMetatypeTypeRef( const ExistentialMetatypeTypeRef * EM)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitSILBoxTypeRef( const SILBoxTypeRef * SB)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitForeignClassTypeRef( const ForeignClassTypeRef * F)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitObjCClassTypeRef( const ObjCClassTypeRef * OC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitObjCProtocolTypeRef( const ObjCProtocolTypeRef * OP)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitGenericTypeParameterTypeRef( const GenericTypeParameterTypeRef * GTP)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitDependentMemberTypeRef( const DependentMemberTypeRef * DM)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasFixedSize::visitOpaqueTypeRef( const OpaqueTypeRef * O)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::hasFixedSize( const TypeRef * TR)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::combineRepresentations( MetatypeRepresentation rep1 , MetatypeRepresentation rep2)",15, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::HasSingletonMetatype()",1, 28, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitBuiltinTypeRef( const BuiltinTypeRef * B)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitNominalTypeRef( const NominalTypeRef * N)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitBoundGenericTypeRef( const BoundGenericTypeRef * BG)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitTupleTypeRef( const TupleTypeRef * T)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitFunctionTypeRef( const FunctionTypeRef * F)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitProtocolCompositionTypeRef( const ProtocolCompositionTypeRef * PC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitMetatypeTypeRef( const MetatypeTypeRef * M)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitExistentialMetatypeTypeRef( const ExistentialMetatypeTypeRef * EM)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitSILBoxTypeRef( const SILBoxTypeRef * SB)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitGenericTypeParameterTypeRef( const GenericTypeParameterTypeRef * GTP)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitDependentMemberTypeRef( const DependentMemberTypeRef * DM)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitForeignClassTypeRef( const ForeignClassTypeRef * F)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitObjCClassTypeRef( const ObjCClassTypeRef * OC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitObjCProtocolTypeRef( const ObjCProtocolTypeRef * OP)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::HasSingletonMetatype::visitOpaqueTypeRef( const OpaqueTypeRef * O)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::EnumTypeInfoBuilder::getCaseTypeRef( FieldTypeInfo Case)",8, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::EnumTypeInfoBuilder::addCase( const std :: string & Name , const TypeRef * TR , const TypeInfo * TI)",14, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::EnumTypeInfoBuilder::EnumTypeInfoBuilder( TypeConverter & TC)",3, 73, 6, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::EnumTypeInfoBuilder::build( const TypeRef * TR , const std :: pair<const FieldDescriptor*,const ReflectionInfo*> & FD)",112, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::LowerType( TypeConverter & TC)",1, 43, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitBuiltinTypeRef( const BuiltinTypeRef * B)",21, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitAnyNominalTypeRef( const TypeRef * TR)",51, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitNominalTypeRef( const NominalTypeRef * N)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitBoundGenericTypeRef( const BoundGenericTypeRef * BG)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitTupleTypeRef( const TupleTypeRef * T)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitFunctionTypeRef( const FunctionTypeRef * F)",15, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitProtocolCompositionTypeRef( const ProtocolCompositionTypeRef * PC)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitMetatypeTypeRef( const MetatypeTypeRef * M)",13, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitExistentialMetatypeTypeRef( const ExistentialMetatypeTypeRef * EM)",13, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitGenericTypeParameterTypeRef( const GenericTypeParameterTypeRef * GTP)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitDependentMemberTypeRef( const DependentMemberTypeRef * DM)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitForeignClassTypeRef( const ForeignClassTypeRef * F)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitObjCClassTypeRef( const ObjCClassTypeRef * OC)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitObjCProtocolTypeRef( const ObjCProtocolTypeRef * OP)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::rebuildStorageTypeInfo( const TypeInfo * TI , ReferenceKind Kind)",52, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitAnyStorageTypeRef( const TypeRef * TR , ReferenceKind Kind)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitSILBoxTypeRef( const SILBoxTypeRef * SB)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::LowerType::visitOpaqueTypeRef( const OpaqueTypeRef * O)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getTypeInfo( const TypeRef * TR)",21, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeLowering.cpp,"swift::reflection::TypeConverter::getClassInstanceTypeInfo( const TypeRef * TR , unsigned start)",44, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::indent( unsigned Amount)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::printHeader( std :: string Name)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::printField( std :: string name , const T & value)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::printRec( const MetadataSource * MS)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::closeForm()",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::PrintMetadataSource( std :: ostream & OS , unsigned Indent)",2, 32, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::visitClosureBindingMetadataSource( const ClosureBindingMetadataSource * CB)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::visitReferenceCaptureMetadataSource( const ReferenceCaptureMetadataSource * RC)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::visitMetadataCaptureMetadataSource( const MetadataCaptureMetadataSource * MC)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::visitGenericArgumentMetadataSource( const GenericArgumentMetadataSource * GA)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::visitSelfMetadataSource( const SelfMetadataSource * S)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"PrintMetadataSource::visitSelfWitnessTableMetadataSource( const SelfWitnessTableMetadataSource * W)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"MetadataSource::dump() const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/MetadataSource.cpp,"MetadataSource::dump( std :: ostream & OS , unsigned Indent) const",4, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::indent( unsigned Amount)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::printHeader( std :: string Name)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::printField( std :: string name , const T & value)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::printRec( const TypeRef * typeRef)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::PrintTypeRef( std :: ostream & OS , unsigned Indent)",2, 32, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitBuiltinTypeRef( const BuiltinTypeRef * B)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitNominalTypeRef( const NominalTypeRef * N)",22, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitBoundGenericTypeRef( const BoundGenericTypeRef * BG)",18, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitTupleTypeRef( const TupleTypeRef * T)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitFunctionTypeRef( const FunctionTypeRef * F)",66, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitProtocolCompositionTypeRef( const ProtocolCompositionTypeRef * PC)",10, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitMetatypeTypeRef( const MetatypeTypeRef * M)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitExistentialMetatypeTypeRef( const ExistentialMetatypeTypeRef * EM)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitGenericTypeParameterTypeRef( const GenericTypeParameterTypeRef * GTP)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitDependentMemberTypeRef( const DependentMemberTypeRef * DM)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitForeignClassTypeRef( const ForeignClassTypeRef * F)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitObjCClassTypeRef( const ObjCClassTypeRef * OC)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitObjCProtocolTypeRef( const ObjCProtocolTypeRef * OC)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitSILBoxTypeRef( const SILBoxTypeRef * SB)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"PrintTypeRef::visitOpaqueTypeRef( const OpaqueTypeRef * O)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::TypeRefIsConcrete( const GenericArgumentMap & Subs)",1, 68, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitBuiltinTypeRef( const BuiltinTypeRef * B)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitNominalTypeRef( const NominalTypeRef * N)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitBoundGenericTypeRef( const BoundGenericTypeRef * BG)",9, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitTupleTypeRef( const TupleTypeRef * T)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitFunctionTypeRef( const FunctionTypeRef * F)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitProtocolCompositionTypeRef( const ProtocolCompositionTypeRef * PC)",9, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitMetatypeTypeRef( const MetatypeTypeRef * M)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitExistentialMetatypeTypeRef( const ExistentialMetatypeTypeRef * EM)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitGenericTypeParameterTypeRef( const GenericTypeParameterTypeRef * GTP)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitDependentMemberTypeRef( const DependentMemberTypeRef * DM)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitForeignClassTypeRef( const ForeignClassTypeRef * F)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitObjCClassTypeRef( const ObjCClassTypeRef * OC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitObjCProtocolTypeRef( const ObjCProtocolTypeRef * OC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitOpaqueTypeRef( const OpaqueTypeRef * O)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefIsConcrete::visitSILBoxTypeRef( const SILBoxTypeRef * SB)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"OpaqueTypeRef::get()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRef::dump() const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRef::dump( std :: ostream & OS , unsigned Indent) const",4, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRef::isConcrete() const",4, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRef::isConcreteAfterSubstitutions( const GenericArgumentMap & Subs) const",4, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"NominalTypeTrait::getDepth() const",9, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRef::getSubstMap() const",31, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"NominalTypeTrait::isStruct() const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"NominalTypeTrait::isEnum() const",1, 80, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"NominalTypeTrait::isClass() const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"NominalTypeTrait::isProtocol() const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"NominalTypeTrait::isAlias() const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::ThickenMetatype( TypeRefBuilder & Builder)",1, 65, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitBuiltinTypeRef( const BuiltinTypeRef * B)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitNominalTypeRef( const NominalTypeRef * N)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitBoundGenericTypeRef( const BoundGenericTypeRef * BG)",7, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitTupleTypeRef( const TupleTypeRef * T)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitFunctionTypeRef( const FunctionTypeRef * F)",12, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitProtocolCompositionTypeRef( const ProtocolCompositionTypeRef * PC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitMetatypeTypeRef( const MetatypeTypeRef * M)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitExistentialMetatypeTypeRef( const ExistentialMetatypeTypeRef * EM)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitGenericTypeParameterTypeRef( const GenericTypeParameterTypeRef * GTP)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitDependentMemberTypeRef( const DependentMemberTypeRef * DM)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitForeignClassTypeRef( const ForeignClassTypeRef * F)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitObjCClassTypeRef( const ObjCClassTypeRef * OC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitObjCProtocolTypeRef( const ObjCProtocolTypeRef * OP)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitSILBoxTypeRef( const SILBoxTypeRef * SB)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"ThickenMetatype::visitOpaqueTypeRef( const OpaqueTypeRef * O)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"thickenMetatypes( TypeRefBuilder & Builder , const TypeRef * TR)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::TypeRefSubstitution( TypeRefBuilder & Builder , GenericArgumentMap Substitutions)",2, 56, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitBuiltinTypeRef( const BuiltinTypeRef * B)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitNominalTypeRef( const NominalTypeRef * N)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitBoundGenericTypeRef( const BoundGenericTypeRef * BG)",10, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitTupleTypeRef( const TupleTypeRef * T)",6, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitFunctionTypeRef( const FunctionTypeRef * F)",12, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitProtocolCompositionTypeRef( const ProtocolCompositionTypeRef * PC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitMetatypeTypeRef( const MetatypeTypeRef * M)",14, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitExistentialMetatypeTypeRef( const ExistentialMetatypeTypeRef * EM)",5, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitGenericTypeParameterTypeRef( const GenericTypeParameterTypeRef * GTP)",11, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitDependentMemberTypeRef( const DependentMemberTypeRef * DM)",53, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitForeignClassTypeRef( const ForeignClassTypeRef * F)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitObjCClassTypeRef( const ObjCClassTypeRef * OC)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitObjCProtocolTypeRef( const ObjCProtocolTypeRef * OP)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitSILBoxTypeRef( const SILBoxTypeRef * SB)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRefSubstitution::visitOpaqueTypeRef( const OpaqueTypeRef * O)",3, 4, 2, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRef::subst( TypeRefBuilder & Builder , const GenericArgumentMap & Subs) const",3, 2, 0, 0
repos/cpp/swift/stdlib/public/Reflection/TypeRef.cpp,"TypeRef::deriveSubstitutions( GenericArgumentMap & Subs , const TypeRef * OrigTR , const TypeRef * SubstTR)",139, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"SwiftReflectionContext::SwiftReflectionContext( MemoryReaderImpl impl)",4, 4, 2, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"SwiftReflectionContext::~SwiftReflectionContext()",5, 4, 2, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_getSupportedMetadataVersion()",3, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"minimalDataLayoutQueryFunction( void * ReaderContext , DataLayoutQueryType type , void * inBuffer , void * outBuffer)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_createReflectionContext( void * ReaderContext , uint8_t PointerSize , FreeBytesFunction Free , ReadBytesFunction ReadBytes , GetStringLengthFunction GetStringLength , GetSymbolAddressFunction GetSymbolAddress)",23, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_createReflectionContextWithDataLayout( void * ReaderContext , QueryDataLayoutFunction DataLayout , FreeBytesFunction Free , ReadBytesFunction ReadBytes , GetStringLengthFunction GetStringLength , GetSymbolAddressFunction GetSymbolAddress)",17, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_destroyReflectionContext( SwiftReflectionContextRef ContextRef)",3, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_addReflectionInfo( SwiftReflectionContextRef ContextRef , swift_reflection_info_t Info)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_addImage( SwiftReflectionContextRef ContextRef , swift_addr_t imageStart)",5, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_readIsaMask( SwiftReflectionContextRef ContextRef , uintptr_t * outIsaMask)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_typeRefForMetadata( SwiftReflectionContextRef ContextRef , uintptr_t Metadata)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_ownsObject( SwiftReflectionContextRef ContextRef , uintptr_t Object)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_ownsAddress( SwiftReflectionContextRef ContextRef , uintptr_t Address)",4, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_metadataForObject( SwiftReflectionContextRef ContextRef , uintptr_t Object)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_typeRefForInstance( SwiftReflectionContextRef ContextRef , uintptr_t Object)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_typeRefForMangledTypeName( SwiftReflectionContextRef ContextRef , const char * MangledTypeName , uint64_t Length)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_genericArgumentOfTypeRef( swift_typeref_t OpaqueTypeRef , unsigned Index)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_genericArgumentCountOfTypeRef( swift_typeref_t OpaqueTypeRef)",9, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"getTypeInfoKind( const TypeInfo & TI)",52, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"convertTypeInfo( const TypeInfo * TI)",23, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"convertChild( const TypeInfo * TI , unsigned Index)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_infoForTypeRef( SwiftReflectionContextRef ContextRef , swift_typeref_t OpaqueTypeRef)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_childOfTypeRef( SwiftReflectionContextRef ContextRef , swift_typeref_t OpaqueTypeRef , unsigned Index)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_infoForMetadata( SwiftReflectionContextRef ContextRef , uintptr_t Metadata)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_childOfMetadata( SwiftReflectionContextRef ContextRef , uintptr_t Metadata , unsigned Index)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_infoForInstance( SwiftReflectionContextRef ContextRef , uintptr_t Object)",6, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_childOfInstance( SwiftReflectionContextRef ContextRef , uintptr_t Object , unsigned Index)",7, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_projectExistential( SwiftReflectionContextRef ContextRef , swift_addr_t ExistentialAddress , swift_typeref_t ExistentialTypeRef , swift_typeref_t * InstanceTypeRef , swift_addr_t * StartOfInstanceData)",22, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_dumpTypeRef( swift_typeref_t OpaqueTypeRef)",8, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_dumpInfoForTypeRef( SwiftReflectionContextRef ContextRef , swift_typeref_t OpaqueTypeRef)",11, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_dumpInfoForMetadata( SwiftReflectionContextRef ContextRef , uintptr_t Metadata)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_dumpInfoForInstance( SwiftReflectionContextRef ContextRef , uintptr_t Object)",10, 2, 0, 0
repos/cpp/swift/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp,"swift_reflection_demangle( const char * MangledName , size_t Length , char * OutDemangledName , size_t MaxLength)",10, 2, 0, 0
repos/cpp/swift/utils/test-prefix-map/main.cpp,"Tester::Tester()",3, 4, 2, 0
repos/cpp/swift/utils/test-prefix-map/main.cpp,"Tester::asArray( StringRef str)",3, 4, 2, 0
repos/cpp/swift/utils/test-prefix-map/main.cpp,"Tester::asString( ArrayRef<char> str)",3, 4, 2, 0
repos/cpp/swift/utils/test-prefix-map/main.cpp,"Tester::insert( StringRef key , int value)",9, 4, 2, 0
repos/cpp/swift/utils/test-prefix-map/main.cpp,"Tester::find( StringRef key)",22, 4, 2, 0
repos/cpp/swift/utils/test-prefix-map/main.cpp,"Tester::clear()",6, 4, 2, 0
repos/cpp/swift/utils/test-prefix-map/main.cpp,"Tester::validate()",23, 4, 2, 0
repos/cpp/swift/utils/test-prefix-map/main.cpp,"Tester::dump()",13, 4, 2, 0
repos/cpp/swift/utils/test-prefix-map/main.cpp,"main( int argc , char ** argv)",49, 2, 0, 0
repos/cpp/swift/utils/test-successor-map/main.cpp,"main( int argc , char ** argv)",69, 2, 0, 0
repos/cpp/swift/utils/test-clustered-bit-vector/generator.cpp,"randCount( unsigned n)",3, 2, 0, 0
repos/cpp/swift/utils/test-clustered-bit-vector/generator.cpp,"randNV()",1, 44, 0, 0
repos/cpp/swift/utils/test-clustered-bit-vector/generator.cpp,"checkConsistency( const Twine & name , const ClusteredBitVector & cbv , const std :: vector<bool> & vec , unsigned depth)",25, 2, 0, 0
repos/cpp/swift/utils/test-clustered-bit-vector/generator.cpp,"run()",157, 2, 0, 0
repos/cpp/swift/utils/test-clustered-bit-vector/generator.cpp,"main()",4, 2, 0, 0
repos/cpp/swift/utils/test-clustered-bit-vector/test.cpp,"main()",7, 2, 0, 0
